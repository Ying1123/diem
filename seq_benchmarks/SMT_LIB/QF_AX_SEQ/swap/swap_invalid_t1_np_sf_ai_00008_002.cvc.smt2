(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_766 () (Seq Element))
(declare-fun a_768 () (Seq Element))
(declare-fun a_770 () (Seq Element))
(declare-fun a_772 () (Seq Element))
(declare-fun a_774 () (Seq Element))
(declare-fun a_776 () (Seq Element))
(declare-fun a_778 () (Seq Element))
(declare-fun a_780 () (Seq Element))
(declare-fun a_782 () (Seq Element))
(declare-fun a_784 () (Seq Element))
(declare-fun a_786 () (Seq Element))
(declare-fun a_787 () (Seq Element))
(declare-fun a_789 () (Seq Element))
(declare-fun a_790 () (Seq Element))
(declare-fun a_792 () (Seq Element))
(declare-fun a_794 () (Seq Element))
(declare-fun a_795 () (Seq Element))
(declare-fun a_796 () (Seq Element))
(declare-fun a_798 () (Seq Element))
(declare-fun a_800 () (Seq Element))
(declare-fun a_802 () (Seq Element))
(declare-fun a_804 () (Seq Element))
(declare-fun a_806 () (Seq Element))
(declare-fun a_808 () (Seq Element))
(declare-fun a_810 () (Seq Element))
(declare-fun a_811 () (Seq Element))
(declare-fun a_813 () (Seq Element))
(declare-fun a_814 () (Seq Element))
(declare-fun a_816 () (Seq Element))
(declare-fun a_818 () (Seq Element))
(declare-fun e_765 () Element)
(declare-fun e_767 () Element)
(declare-fun e_769 () Element)
(declare-fun e_771 () Element)
(declare-fun e_773 () Element)
(declare-fun e_775 () Element)
(declare-fun e_777 () Element)
(declare-fun e_779 () Element)
(declare-fun e_781 () Element)
(declare-fun e_783 () Element)
(declare-fun e_785 () Element)
(declare-fun e_788 () Element)
(declare-fun e_791 () Element)
(declare-fun e_793 () Element)
(declare-fun e_797 () Element)
(declare-fun e_799 () Element)
(declare-fun e_801 () Element)
(declare-fun e_803 () Element)
(declare-fun e_805 () Element)
(declare-fun e_807 () Element)
(declare-fun e_809 () Element)
(declare-fun e_812 () Element)
(declare-fun e_815 () Element)
(declare-fun e_817 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(assert (= a_766 (seq.update a1 i5 (seq.unit e_765))))
(assert (= a_768 (seq.update a_766 i0 (seq.unit e_767))))
(assert (= a_770 (seq.update a_768 i5 (seq.unit e_769))))
(assert (= a_772 (seq.update a_770 i6 (seq.unit e_771))))
(assert (= a_774 (seq.update a_772 i5 (seq.unit e_773))))
(assert (= a_776 (seq.update a_774 i3 (seq.unit e_775))))
(assert (= a_778 (seq.update a_776 i1 (seq.unit e_777))))
(assert (= a_780 (seq.update a_778 i7 (seq.unit e_779))))
(assert (= a_782 (seq.update a_780 i4 (seq.unit e_781))))
(assert (= a_784 (seq.update a_782 i0 (seq.unit e_783))))
(assert (= a_786 (seq.update a_784 i1 (seq.unit e_785))))
(assert (= a_787 (seq.update a_786 i1 (seq.unit e_785))))
(assert (= a_789 (seq.update a_787 i4 (seq.unit e_788))))
(assert (= a_790 (seq.update a_789 i4 (seq.unit e_788))))
(assert (= a_792 (seq.update a_790 i5 (seq.unit e_791))))
(assert (= a_794 (seq.update a_792 i2 (seq.unit e_793))))
(assert (= a_795 (seq.update a_768 i6 (seq.unit e_771))))
(assert (= a_796 (seq.update a_795 i5 (seq.unit e_769))))
(assert (= a_798 (seq.update a_796 i3 (seq.unit e_797))))
(assert (= a_800 (seq.update a_798 i5 (seq.unit e_799))))
(assert (= a_802 (seq.update a_800 i7 (seq.unit e_801))))
(assert (= a_804 (seq.update a_802 i1 (seq.unit e_803))))
(assert (= a_806 (seq.update a_804 i4 (seq.unit e_805))))
(assert (= a_808 (seq.update a_806 i0 (seq.unit e_807))))
(assert (= a_810 (seq.update a_808 i1 (seq.unit e_809))))
(assert (= a_811 (seq.update a_810 i1 (seq.unit e_809))))
(assert (= a_813 (seq.update a_811 i4 (seq.unit e_812))))
(assert (= a_814 (seq.update a_813 i4 (seq.unit e_812))))
(assert (= a_816 (seq.update a_814 i3 (seq.unit e_815))))
(assert (= a_818 (seq.update a_816 i5 (seq.unit e_817))))
(assert (= e_765 (seq.nth a1 i0)))
(assert (= e_767 (seq.nth a1 i5)))
(assert (= e_769 (seq.nth a_768 i6)))
(assert (= e_771 (seq.nth a_768 i5)))
(assert (= e_773 (seq.nth a_772 i3)))
(assert (= e_775 (seq.nth a_772 i5)))
(assert (= e_777 (seq.nth a_776 i7)))
(assert (= e_779 (seq.nth a_776 i1)))
(assert (= e_781 (seq.nth a_780 i0)))
(assert (= e_783 (seq.nth a_780 i4)))
(assert (= e_785 (seq.nth a_784 i1)))
(assert (= e_788 (seq.nth a_787 i4)))
(assert (= e_791 (seq.nth a_790 i2)))
(assert (= e_793 (seq.nth a_790 i5)))
(assert (= e_797 (seq.nth a_796 i5)))
(assert (= e_799 (seq.nth a_796 i3)))
(assert (= e_801 (seq.nth a_800 i1)))
(assert (= e_803 (seq.nth a_800 i7)))
(assert (= e_805 (seq.nth a_804 i0)))
(assert (= e_807 (seq.nth a_804 i4)))
(assert (= e_809 (seq.nth a_808 i1)))
(assert (= e_812 (seq.nth a_811 i4)))
(assert (= e_815 (seq.nth a_814 i5)))
(assert (= e_817 (seq.nth a_814 i3)))
(assert (not (= a_794 a_818)))
(check-sat)
(exit)
