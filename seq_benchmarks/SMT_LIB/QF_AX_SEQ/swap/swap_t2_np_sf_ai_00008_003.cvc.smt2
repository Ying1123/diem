(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)

(declare-sort Element 0)
(declare-fun a_671 () (Seq Element))
(declare-fun a_673 () (Seq Element))
(declare-fun a_675 () (Seq Element))
(declare-fun a_677 () (Seq Element))
(declare-fun a_679 () (Seq Element))
(declare-fun a_681 () (Seq Element))
(declare-fun a_683 () (Seq Element))
(declare-fun a_684 () (Seq Element))
(declare-fun a_686 () (Seq Element))
(declare-fun a_688 () (Seq Element))
(declare-fun a_690 () (Seq Element))
(declare-fun a_692 () (Seq Element))
(declare-fun a_694 () (Seq Element))
(declare-fun a_696 () (Seq Element))
(declare-fun a_698 () (Seq Element))
(declare-fun a_700 () (Seq Element))
(declare-fun e_670 () Element)
(declare-fun e_672 () Element)
(declare-fun e_674 () Element)
(declare-fun e_676 () Element)
(declare-fun e_678 () Element)
(declare-fun e_680 () Element)
(declare-fun e_682 () Element)
(declare-fun e_685 () Element)
(declare-fun e_687 () Element)
(declare-fun e_689 () Element)
(declare-fun e_691 () Element)
(declare-fun e_693 () Element)
(declare-fun e_695 () Element)
(declare-fun e_697 () Element)
(declare-fun e_699 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(assert (= a_671 (seq.update a1 i7 (seq.unit e_670))))
(assert (= a_673 (seq.update a_671 i2 (seq.unit e_672))))
(assert (= a_675 (seq.update a_673 i2 (seq.unit e_674))))
(assert (= a_677 (seq.update a_675 i3 (seq.unit e_676))))
(assert (= a_679 (seq.update a_677 i3 (seq.unit e_678))))
(assert (= a_681 (seq.update a_679 i1 (seq.unit e_680))))
(assert (= a_683 (seq.update a_681 i6 (seq.unit e_682))))
(assert (= a_684 (seq.update a_683 i6 (seq.unit e_682))))
(assert (= a_686 (seq.update a_684 i6 (seq.unit e_685))))
(assert (= a_688 (seq.update a_686 i7 (seq.unit e_687))))
(assert (= a_690 (seq.update a_688 i2 (seq.unit e_689))))
(assert (= a_692 (seq.update a_690 i3 (seq.unit e_691))))
(assert (= a_694 (seq.update a_692 i4 (seq.unit e_693))))
(assert (= a_696 (seq.update a_694 i0 (seq.unit e_695))))
(assert (= a_698 (seq.update a_696 i5 (seq.unit e_697))))
(assert (= a_700 (seq.update a_698 i7 (seq.unit e_699))))
(assert (= e_670 (seq.nth a1 i2)))
(assert (= e_672 (seq.nth a1 i7)))
(assert (= e_674 (seq.nth a_673 i3)))
(assert (= e_676 (seq.nth a_673 i2)))
(assert (= e_678 (seq.nth a_677 i1)))
(assert (= e_680 (seq.nth a_677 i3)))
(assert (= e_682 (seq.nth a_681 i6)))
(assert (= e_685 (seq.nth a_684 i7)))
(assert (= e_687 (seq.nth a_684 i6)))
(assert (= e_689 (seq.nth a_688 i3)))
(assert (= e_691 (seq.nth a_688 i2)))
(assert (= e_693 (seq.nth a_692 i0)))
(assert (= e_695 (seq.nth a_692 i4)))
(assert (= e_697 (seq.nth a_696 i7)))
(assert (= e_699 (seq.nth a_696 i5)))
(assert (not (= a_700 a_700)))
(check-sat)
(exit)
