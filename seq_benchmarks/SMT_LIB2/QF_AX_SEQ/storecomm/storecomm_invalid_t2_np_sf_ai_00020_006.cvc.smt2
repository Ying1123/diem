(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_239 () (Seq Element))
(declare-fun a_240 () (Seq Element))
(declare-fun a_241 () (Seq Element))
(declare-fun a_242 () (Seq Element))
(declare-fun a_243 () (Seq Element))
(declare-fun a_244 () (Seq Element))
(declare-fun a_245 () (Seq Element))
(declare-fun a_246 () (Seq Element))
(declare-fun a_247 () (Seq Element))
(declare-fun a_248 () (Seq Element))
(declare-fun a_249 () (Seq Element))
(declare-fun a_250 () (Seq Element))
(declare-fun a_251 () (Seq Element))
(declare-fun a_252 () (Seq Element))
(declare-fun a_253 () (Seq Element))
(declare-fun a_254 () (Seq Element))
(declare-fun a_255 () (Seq Element))
(declare-fun a_256 () (Seq Element))
(declare-fun a_257 () (Seq Element))
(declare-fun a_258 () (Seq Element))
(declare-fun a_259 () (Seq Element))
(declare-fun a_260 () (Seq Element))
(declare-fun a_261 () (Seq Element))
(declare-fun a_262 () (Seq Element))
(declare-fun a_263 () (Seq Element))
(declare-fun a_264 () (Seq Element))
(declare-fun a_265 () (Seq Element))
(declare-fun a_266 () (Seq Element))
(declare-fun a_267 () (Seq Element))
(declare-fun a_268 () (Seq Element))
(declare-fun a_269 () (Seq Element))
(declare-fun a_270 () (Seq Element))
(declare-fun a_271 () (Seq Element))
(declare-fun a_272 () (Seq Element))
(declare-fun a_273 () (Seq Element))
(declare-fun a_274 () (Seq Element))
(declare-fun a_275 () (Seq Element))
(declare-fun a_276 () (Seq Element))
(declare-fun a_277 () (Seq Element))
(declare-fun a_278 () (Seq Element))
(declare-fun a1 () (Seq Element))
(declare-fun e1 () Element)
(declare-fun e10 () Element)
(declare-fun e11 () Element)
(declare-fun e12 () Element)
(declare-fun e13 () Element)
(declare-fun e14 () Element)
(declare-fun e15 () Element)
(declare-fun e16 () Element)
(declare-fun e17 () Element)
(declare-fun e18 () Element)
(declare-fun e19 () Element)
(declare-fun e2 () Element)
(declare-fun e20 () Element)
(declare-fun e3 () Element)
(declare-fun e4 () Element)
(declare-fun e5 () Element)
(declare-fun e6 () Element)
(declare-fun e7 () Element)
(declare-fun e8 () Element)
(declare-fun e9 () Element)
(declare-fun i1 () Int)
(declare-fun i10 () Int)
(declare-fun i11 () Int)
(declare-fun i12 () Int)
(declare-fun i13 () Int)
(declare-fun i14 () Int)
(declare-fun i15 () Int)
(declare-fun i16 () Int)
(declare-fun i17 () Int)
(declare-fun i18 () Int)
(declare-fun i19 () Int)
(declare-fun i2 () Int)
(declare-fun i20 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun i8 () Int)
(declare-fun i9 () Int)
(assert (= a_239 (seq.update a1 i1 (seq.unit e1))))
(assert (= a_240 (seq.update a_239 i2 (seq.unit e2))))
(assert (= a_241 (seq.update a_240 i3 (seq.unit e3))))
(assert (= a_242 (seq.update a_241 i4 (seq.unit e4))))
(assert (= a_243 (seq.update a_242 i5 (seq.unit e5))))
(assert (= a_244 (seq.update a_243 i6 (seq.unit e6))))
(assert (= a_245 (seq.update a_244 i7 (seq.unit e7))))
(assert (= a_246 (seq.update a_245 i8 (seq.unit e8))))
(assert (= a_247 (seq.update a_246 i9 (seq.unit e9))))
(assert (= a_248 (seq.update a_247 i10 (seq.unit e10))))
(assert (= a_249 (seq.update a_248 i11 (seq.unit e11))))
(assert (= a_250 (seq.update a_249 i12 (seq.unit e12))))
(assert (= a_251 (seq.update a_250 i13 (seq.unit e13))))
(assert (= a_252 (seq.update a_251 i14 (seq.unit e14))))
(assert (= a_253 (seq.update a_252 i15 (seq.unit e15))))
(assert (= a_254 (seq.update a_253 i16 (seq.unit e16))))
(assert (= a_255 (seq.update a_254 i17 (seq.unit e17))))
(assert (= a_256 (seq.update a_255 i18 (seq.unit e18))))
(assert (= a_257 (seq.update a_256 i19 (seq.unit e19))))
(assert (= a_258 (seq.update a_257 i1 (seq.unit e1))))
(assert (= a_259 (seq.update a1 i20 (seq.unit e20))))
(assert (= a_260 (seq.update a_259 i18 (seq.unit e18))))
(assert (= a_261 (seq.update a_260 i19 (seq.unit e19))))
(assert (= a_262 (seq.update a_261 i3 (seq.unit e3))))
(assert (= a_263 (seq.update a_262 i12 (seq.unit e12))))
(assert (= a_264 (seq.update a_263 i5 (seq.unit e5))))
(assert (= a_265 (seq.update a_264 i11 (seq.unit e11))))
(assert (= a_266 (seq.update a_265 i16 (seq.unit e16))))
(assert (= a_267 (seq.update a_266 i1 (seq.unit e1))))
(assert (= a_268 (seq.update a_267 i2 (seq.unit e2))))
(assert (= a_269 (seq.update a_268 i10 (seq.unit e10))))
(assert (= a_270 (seq.update a_269 i6 (seq.unit e6))))
(assert (= a_271 (seq.update a_270 i8 (seq.unit e8))))
(assert (= a_272 (seq.update a_271 i4 (seq.unit e4))))
(assert (= a_273 (seq.update a_272 i17 (seq.unit e17))))
(assert (= a_274 (seq.update a_273 i7 (seq.unit e7))))
(assert (= a_275 (seq.update a_274 i13 (seq.unit e13))))
(assert (= a_276 (seq.update a_275 i9 (seq.unit e9))))
(assert (= a_277 (seq.update a_276 i15 (seq.unit e15))))
(assert (= a_278 (seq.update a_277 i14 (seq.unit e14))))
(assert (not (= i19 i20)))
(assert (not (= i18 i20)))
(assert (not (= i18 i19)))
(assert (not (= i17 i20)))
(assert (not (= i17 i19)))
(assert (not (= i17 i18)))
(assert (not (= i16 i20)))
(assert (not (= i16 i19)))
(assert (not (= i16 i18)))
(assert (not (= i16 i17)))
(assert (not (= i15 i20)))
(assert (not (= i15 i19)))
(assert (not (= i15 i18)))
(assert (not (= i15 i17)))
(assert (not (= i15 i16)))
(assert (not (= i14 i20)))
(assert (not (= i14 i19)))
(assert (not (= i14 i18)))
(assert (not (= i14 i17)))
(assert (not (= i14 i16)))
(assert (not (= i14 i15)))
(assert (not (= i13 i20)))
(assert (not (= i13 i19)))
(assert (not (= i13 i18)))
(assert (not (= i13 i17)))
(assert (not (= i13 i16)))
(assert (not (= i13 i15)))
(assert (not (= i13 i14)))
(assert (not (= i12 i20)))
(assert (not (= i12 i19)))
(assert (not (= i12 i18)))
(assert (not (= i12 i17)))
(assert (not (= i12 i16)))
(assert (not (= i12 i15)))
(assert (not (= i12 i14)))
(assert (not (= i12 i13)))
(assert (not (= i11 i20)))
(assert (not (= i11 i19)))
(assert (not (= i11 i18)))
(assert (not (= i11 i17)))
(assert (not (= i11 i16)))
(assert (not (= i11 i15)))
(assert (not (= i11 i14)))
(assert (not (= i11 i13)))
(assert (not (= i11 i12)))
(assert (not (= i10 i20)))
(assert (not (= i10 i19)))
(assert (not (= i10 i18)))
(assert (not (= i10 i17)))
(assert (not (= i10 i16)))
(assert (not (= i10 i15)))
(assert (not (= i10 i14)))
(assert (not (= i10 i13)))
(assert (not (= i10 i12)))
(assert (not (= i10 i11)))
(assert (not (= i9 i20)))
(assert (not (= i9 i19)))
(assert (not (= i9 i18)))
(assert (not (= i9 i17)))
(assert (not (= i9 i16)))
(assert (not (= i9 i15)))
(assert (not (= i9 i14)))
(assert (not (= i9 i13)))
(assert (not (= i9 i12)))
(assert (not (= i9 i11)))
(assert (not (= i9 i10)))
(assert (not (= i8 i20)))
(assert (not (= i8 i19)))
(assert (not (= i8 i18)))
(assert (not (= i8 i17)))
(assert (not (= i8 i16)))
(assert (not (= i8 i15)))
(assert (not (= i8 i14)))
(assert (not (= i8 i13)))
(assert (not (= i8 i12)))
(assert (not (= i8 i11)))
(assert (not (= i8 i10)))
(assert (not (= i8 i9)))
(assert (not (= i7 i20)))
(assert (not (= i7 i19)))
(assert (not (= i7 i18)))
(assert (not (= i7 i17)))
(assert (not (= i7 i16)))
(assert (not (= i7 i15)))
(assert (not (= i7 i14)))
(assert (not (= i7 i13)))
(assert (not (= i7 i12)))
(assert (not (= i7 i11)))
(assert (not (= i7 i10)))
(assert (not (= i7 i9)))
(assert (not (= i7 i8)))
(assert (not (= i6 i20)))
(assert (not (= i6 i19)))
(assert (not (= i6 i18)))
(assert (not (= i6 i17)))
(assert (not (= i6 i16)))
(assert (not (= i6 i15)))
(assert (not (= i6 i14)))
(assert (not (= i6 i13)))
(assert (not (= i6 i12)))
(assert (not (= i6 i11)))
(assert (not (= i6 i10)))
(assert (not (= i6 i9)))
(assert (not (= i6 i8)))
(assert (not (= i6 i7)))
(assert (not (= i5 i20)))
(assert (not (= i5 i19)))
(assert (not (= i5 i18)))
(assert (not (= i5 i17)))
(assert (not (= i5 i16)))
(assert (not (= i5 i15)))
(assert (not (= i5 i14)))
(assert (not (= i5 i13)))
(assert (not (= i5 i12)))
(assert (not (= i5 i11)))
(assert (not (= i5 i10)))
(assert (not (= i5 i9)))
(assert (not (= i5 i8)))
(assert (not (= i5 i7)))
(assert (not (= i5 i6)))
(assert (not (= i4 i20)))
(assert (not (= i4 i19)))
(assert (not (= i4 i18)))
(assert (not (= i4 i17)))
(assert (not (= i4 i16)))
(assert (not (= i4 i15)))
(assert (not (= i4 i14)))
(assert (not (= i4 i13)))
(assert (not (= i4 i12)))
(assert (not (= i4 i11)))
(assert (not (= i4 i10)))
(assert (not (= i4 i9)))
(assert (not (= i4 i8)))
(assert (not (= i4 i7)))
(assert (not (= i4 i6)))
(assert (not (= i4 i5)))
(assert (not (= i3 i20)))
(assert (not (= i3 i19)))
(assert (not (= i3 i18)))
(assert (not (= i3 i17)))
(assert (not (= i3 i16)))
(assert (not (= i3 i15)))
(assert (not (= i3 i14)))
(assert (not (= i3 i13)))
(assert (not (= i3 i12)))
(assert (not (= i3 i11)))
(assert (not (= i3 i10)))
(assert (not (= i3 i9)))
(assert (not (= i3 i8)))
(assert (not (= i3 i7)))
(assert (not (= i3 i6)))
(assert (not (= i3 i5)))
(assert (not (= i3 i4)))
(assert (not (= i2 i20)))
(assert (not (= i2 i19)))
(assert (not (= i2 i18)))
(assert (not (= i2 i17)))
(assert (not (= i2 i16)))
(assert (not (= i2 i15)))
(assert (not (= i2 i14)))
(assert (not (= i2 i13)))
(assert (not (= i2 i12)))
(assert (not (= i2 i11)))
(assert (not (= i2 i10)))
(assert (not (= i2 i9)))
(assert (not (= i2 i8)))
(assert (not (= i2 i7)))
(assert (not (= i2 i6)))
(assert (not (= i2 i5)))
(assert (not (= i2 i4)))
(assert (not (= i2 i3)))
(assert (not (= i1 i20)))
(assert (not (= i1 i19)))
(assert (not (= i1 i18)))
(assert (not (= i1 i17)))
(assert (not (= i1 i16)))
(assert (not (= i1 i15)))
(assert (not (= i1 i14)))
(assert (not (= i1 i13)))
(assert (not (= i1 i12)))
(assert (not (= i1 i11)))
(assert (not (= i1 i10)))
(assert (not (= i1 i9)))
(assert (not (= i1 i8)))
(assert (not (= i1 i7)))
(assert (not (= i1 i6)))
(assert (not (= i1 i5)))
(assert (not (= i1 i4)))
(assert (not (= i1 i3)))
(assert (not (= i1 i2)))
(assert (not (= a_258 a_278)))
(check-sat)
(exit)
