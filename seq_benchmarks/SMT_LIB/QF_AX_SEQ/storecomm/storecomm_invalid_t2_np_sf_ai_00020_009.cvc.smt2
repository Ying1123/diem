(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_0 () (Seq Element))
(declare-fun a_1 () (Seq Element))
(declare-fun a_10 () (Seq Element))
(declare-fun a_11 () (Seq Element))
(declare-fun a_12 () (Seq Element))
(declare-fun a_13 () (Seq Element))
(declare-fun a_14 () (Seq Element))
(declare-fun a_15 () (Seq Element))
(declare-fun a_16 () (Seq Element))
(declare-fun a_17 () (Seq Element))
(declare-fun a_18 () (Seq Element))
(declare-fun a_19 () (Seq Element))
(declare-fun a_2 () (Seq Element))
(declare-fun a_20 () (Seq Element))
(declare-fun a_21 () (Seq Element))
(declare-fun a_22 () (Seq Element))
(declare-fun a_23 () (Seq Element))
(declare-fun a_24 () (Seq Element))
(declare-fun a_25 () (Seq Element))
(declare-fun a_26 () (Seq Element))
(declare-fun a_27 () (Seq Element))
(declare-fun a_28 () (Seq Element))
(declare-fun a_29 () (Seq Element))
(declare-fun a_3 () (Seq Element))
(declare-fun a_30 () (Seq Element))
(declare-fun a_31 () (Seq Element))
(declare-fun a_32 () (Seq Element))
(declare-fun a_33 () (Seq Element))
(declare-fun a_34 () (Seq Element))
(declare-fun a_35 () (Seq Element))
(declare-fun a_36 () (Seq Element))
(declare-fun a_37 () (Seq Element))
(declare-fun a_38 () (Seq Element))
(declare-fun a_39 () (Seq Element))
(declare-fun a_4 () (Seq Element))
(declare-fun a_5 () (Seq Element))
(declare-fun a_6 () (Seq Element))
(declare-fun a_7 () (Seq Element))
(declare-fun a_8 () (Seq Element))
(declare-fun a_9 () (Seq Element))
(declare-fun a1 () (Seq Element))
(declare-fun e1 () Element)
(declare-fun e10 () Element)
(declare-fun e11 () Element)
(declare-fun e12 () Element)
(declare-fun e13 () Element)
(declare-fun e14 () Element)
(declare-fun e15 () Element)
(declare-fun e16 () Element)
(declare-fun e17 () Element)
(declare-fun e18 () Element)
(declare-fun e19 () Element)
(declare-fun e2 () Element)
(declare-fun e20 () Element)
(declare-fun e3 () Element)
(declare-fun e4 () Element)
(declare-fun e5 () Element)
(declare-fun e6 () Element)
(declare-fun e7 () Element)
(declare-fun e8 () Element)
(declare-fun e9 () Element)
(declare-fun i1 () Int)
(declare-fun i10 () Int)
(declare-fun i11 () Int)
(declare-fun i12 () Int)
(declare-fun i13 () Int)
(declare-fun i14 () Int)
(declare-fun i15 () Int)
(declare-fun i16 () Int)
(declare-fun i17 () Int)
(declare-fun i18 () Int)
(declare-fun i19 () Int)
(declare-fun i2 () Int)
(declare-fun i20 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun i8 () Int)
(declare-fun i9 () Int)
(assert (= a_0 (seq.update a1 i1 (seq.unit e1))))
(assert (= a_1 (seq.update a_0 i2 (seq.unit e2))))
(assert (= a_10 (seq.update a_9 i11 (seq.unit e11))))
(assert (= a_11 (seq.update a_10 i12 (seq.unit e12))))
(assert (= a_12 (seq.update a_11 i13 (seq.unit e13))))
(assert (= a_13 (seq.update a_12 i14 (seq.unit e14))))
(assert (= a_14 (seq.update a_13 i15 (seq.unit e15))))
(assert (= a_15 (seq.update a_14 i16 (seq.unit e16))))
(assert (= a_16 (seq.update a_15 i17 (seq.unit e17))))
(assert (= a_17 (seq.update a_16 i18 (seq.unit e18))))
(assert (= a_18 (seq.update a_17 i19 (seq.unit e19))))
(assert (= a_19 (seq.update a_18 i1 (seq.unit e1))))
(assert (= a_2 (seq.update a_1 i3 (seq.unit e3))))
(assert (= a_20 (seq.update a1 i3 (seq.unit e3))))
(assert (= a_21 (seq.update a_20 i17 (seq.unit e17))))
(assert (= a_22 (seq.update a_21 i6 (seq.unit e6))))
(assert (= a_23 (seq.update a_22 i9 (seq.unit e9))))
(assert (= a_24 (seq.update a_23 i19 (seq.unit e19))))
(assert (= a_25 (seq.update a_24 i12 (seq.unit e12))))
(assert (= a_26 (seq.update a_25 i18 (seq.unit e18))))
(assert (= a_27 (seq.update a_26 i11 (seq.unit e11))))
(assert (= a_28 (seq.update a_27 i15 (seq.unit e15))))
(assert (= a_29 (seq.update a_28 i2 (seq.unit e2))))
(assert (= a_3 (seq.update a_2 i4 (seq.unit e4))))
(assert (= a_30 (seq.update a_29 i8 (seq.unit e8))))
(assert (= a_31 (seq.update a_30 i7 (seq.unit e7))))
(assert (= a_32 (seq.update a_31 i10 (seq.unit e10))))
(assert (= a_33 (seq.update a_32 i5 (seq.unit e5))))
(assert (= a_34 (seq.update a_33 i4 (seq.unit e4))))
(assert (= a_35 (seq.update a_34 i20 (seq.unit e20))))
(assert (= a_36 (seq.update a_35 i14 (seq.unit e14))))
(assert (= a_37 (seq.update a_36 i13 (seq.unit e13))))
(assert (= a_38 (seq.update a_37 i16 (seq.unit e16))))
(assert (= a_39 (seq.update a_38 i1 (seq.unit e1))))
(assert (= a_4 (seq.update a_3 i5 (seq.unit e5))))
(assert (= a_5 (seq.update a_4 i6 (seq.unit e6))))
(assert (= a_6 (seq.update a_5 i7 (seq.unit e7))))
(assert (= a_7 (seq.update a_6 i8 (seq.unit e8))))
(assert (= a_8 (seq.update a_7 i9 (seq.unit e9))))
(assert (= a_9 (seq.update a_8 i10 (seq.unit e10))))
(assert (not (= i19 i20)))
(assert (not (= i18 i20)))
(assert (not (= i18 i19)))
(assert (not (= i17 i20)))
(assert (not (= i17 i19)))
(assert (not (= i17 i18)))
(assert (not (= i16 i20)))
(assert (not (= i16 i19)))
(assert (not (= i16 i18)))
(assert (not (= i16 i17)))
(assert (not (= i15 i20)))
(assert (not (= i15 i19)))
(assert (not (= i15 i18)))
(assert (not (= i15 i17)))
(assert (not (= i15 i16)))
(assert (not (= i14 i20)))
(assert (not (= i14 i19)))
(assert (not (= i14 i18)))
(assert (not (= i14 i17)))
(assert (not (= i14 i16)))
(assert (not (= i14 i15)))
(assert (not (= i13 i20)))
(assert (not (= i13 i19)))
(assert (not (= i13 i18)))
(assert (not (= i13 i17)))
(assert (not (= i13 i16)))
(assert (not (= i13 i15)))
(assert (not (= i13 i14)))
(assert (not (= i12 i20)))
(assert (not (= i12 i19)))
(assert (not (= i12 i18)))
(assert (not (= i12 i17)))
(assert (not (= i12 i16)))
(assert (not (= i12 i15)))
(assert (not (= i12 i14)))
(assert (not (= i12 i13)))
(assert (not (= i11 i20)))
(assert (not (= i11 i19)))
(assert (not (= i11 i18)))
(assert (not (= i11 i17)))
(assert (not (= i11 i16)))
(assert (not (= i11 i15)))
(assert (not (= i11 i14)))
(assert (not (= i11 i13)))
(assert (not (= i11 i12)))
(assert (not (= i10 i20)))
(assert (not (= i10 i19)))
(assert (not (= i10 i18)))
(assert (not (= i10 i17)))
(assert (not (= i10 i16)))
(assert (not (= i10 i15)))
(assert (not (= i10 i14)))
(assert (not (= i10 i13)))
(assert (not (= i10 i12)))
(assert (not (= i10 i11)))
(assert (not (= i9 i20)))
(assert (not (= i9 i19)))
(assert (not (= i9 i18)))
(assert (not (= i9 i17)))
(assert (not (= i9 i16)))
(assert (not (= i9 i15)))
(assert (not (= i9 i14)))
(assert (not (= i9 i13)))
(assert (not (= i9 i12)))
(assert (not (= i9 i11)))
(assert (not (= i9 i10)))
(assert (not (= i8 i20)))
(assert (not (= i8 i19)))
(assert (not (= i8 i18)))
(assert (not (= i8 i17)))
(assert (not (= i8 i16)))
(assert (not (= i8 i15)))
(assert (not (= i8 i14)))
(assert (not (= i8 i13)))
(assert (not (= i8 i12)))
(assert (not (= i8 i11)))
(assert (not (= i8 i10)))
(assert (not (= i8 i9)))
(assert (not (= i7 i20)))
(assert (not (= i7 i19)))
(assert (not (= i7 i18)))
(assert (not (= i7 i17)))
(assert (not (= i7 i16)))
(assert (not (= i7 i15)))
(assert (not (= i7 i14)))
(assert (not (= i7 i13)))
(assert (not (= i7 i12)))
(assert (not (= i7 i11)))
(assert (not (= i7 i10)))
(assert (not (= i7 i9)))
(assert (not (= i7 i8)))
(assert (not (= i6 i20)))
(assert (not (= i6 i19)))
(assert (not (= i6 i18)))
(assert (not (= i6 i17)))
(assert (not (= i6 i16)))
(assert (not (= i6 i15)))
(assert (not (= i6 i14)))
(assert (not (= i6 i13)))
(assert (not (= i6 i12)))
(assert (not (= i6 i11)))
(assert (not (= i6 i10)))
(assert (not (= i6 i9)))
(assert (not (= i6 i8)))
(assert (not (= i6 i7)))
(assert (not (= i5 i20)))
(assert (not (= i5 i19)))
(assert (not (= i5 i18)))
(assert (not (= i5 i17)))
(assert (not (= i5 i16)))
(assert (not (= i5 i15)))
(assert (not (= i5 i14)))
(assert (not (= i5 i13)))
(assert (not (= i5 i12)))
(assert (not (= i5 i11)))
(assert (not (= i5 i10)))
(assert (not (= i5 i9)))
(assert (not (= i5 i8)))
(assert (not (= i5 i7)))
(assert (not (= i5 i6)))
(assert (not (= i4 i20)))
(assert (not (= i4 i19)))
(assert (not (= i4 i18)))
(assert (not (= i4 i17)))
(assert (not (= i4 i16)))
(assert (not (= i4 i15)))
(assert (not (= i4 i14)))
(assert (not (= i4 i13)))
(assert (not (= i4 i12)))
(assert (not (= i4 i11)))
(assert (not (= i4 i10)))
(assert (not (= i4 i9)))
(assert (not (= i4 i8)))
(assert (not (= i4 i7)))
(assert (not (= i4 i6)))
(assert (not (= i4 i5)))
(assert (not (= i3 i20)))
(assert (not (= i3 i19)))
(assert (not (= i3 i18)))
(assert (not (= i3 i17)))
(assert (not (= i3 i16)))
(assert (not (= i3 i15)))
(assert (not (= i3 i14)))
(assert (not (= i3 i13)))
(assert (not (= i3 i12)))
(assert (not (= i3 i11)))
(assert (not (= i3 i10)))
(assert (not (= i3 i9)))
(assert (not (= i3 i8)))
(assert (not (= i3 i7)))
(assert (not (= i3 i6)))
(assert (not (= i3 i5)))
(assert (not (= i3 i4)))
(assert (not (= i2 i20)))
(assert (not (= i2 i19)))
(assert (not (= i2 i18)))
(assert (not (= i2 i17)))
(assert (not (= i2 i16)))
(assert (not (= i2 i15)))
(assert (not (= i2 i14)))
(assert (not (= i2 i13)))
(assert (not (= i2 i12)))
(assert (not (= i2 i11)))
(assert (not (= i2 i10)))
(assert (not (= i2 i9)))
(assert (not (= i2 i8)))
(assert (not (= i2 i7)))
(assert (not (= i2 i6)))
(assert (not (= i2 i5)))
(assert (not (= i2 i4)))
(assert (not (= i2 i3)))
(assert (not (= i1 i20)))
(assert (not (= i1 i19)))
(assert (not (= i1 i18)))
(assert (not (= i1 i17)))
(assert (not (= i1 i16)))
(assert (not (= i1 i15)))
(assert (not (= i1 i14)))
(assert (not (= i1 i13)))
(assert (not (= i1 i12)))
(assert (not (= i1 i11)))
(assert (not (= i1 i10)))
(assert (not (= i1 i9)))
(assert (not (= i1 i8)))
(assert (not (= i1 i7)))
(assert (not (= i1 i6)))
(assert (not (= i1 i5)))
(assert (not (= i1 i4)))
(assert (not (= i1 i3)))
(assert (not (= i1 i2)))
(assert (not (= a_19 a_39)))
(check-sat)
(exit)
