
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for vectors, based on Z3 sequences.
//
// This version of vectors has extensional equality.
//
// This implementation works to some extend but has been so far been much slower/times out compared to
// non-extensional array versions, even though the later require stratified custom equality.
//
// Major issues seem to be:
//
// (a) UpdateVec, SwapVec etc. are slow. UpdateVec requires a ConcatVec of two SliceVec.
// (b) ReverseVec needs to be fully axiomatized with quantifiers which makes it infeasible
//     to work in practice.

type {:builtin "Seq"} Vec _;

function {:builtin "seq.empty"} EmptyVec<T>(): Vec T;

function {:builtin "seq.unit"} MakeVec1<T>(v: T): Vec T;

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    ConcatVec(MakeVec1(v1), MakeVec1(v2))
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    ConcatVec(MakeVec2(v1, v2), MakeVec1(v3))
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    ConcatVec(MakeVec3(v1, v2, v3), MakeVec1(v4))
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    ConcatVec(v, MakeVec1(elem))
}

function {:builtin "seq.nth"} ReadVec<T>(v: Vec T, i: int): T;

function {:builtin "seq.len"} LenVec<T>(v: Vec T): int;

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    LenVec(v) == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    SliceVec(v, 0, LenVec(v) - 1)
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    ConcatVec(SliceVec(v, 0, i), SliceVec(v, i + 1, LenVec(v)))
}

function {:builtin "seq.++"} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec3<T>(v1: Vec T, v2: Vec T, v3: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec4<T>(v1: Vec T, v2: Vec T, v3: Vec T, v4: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec5<T>(v1: Vec T, v2: Vec T, v3: Vec T, v4: Vec T, v5: Vec T): Vec T;

function {:inline} ReverseVec<T>(v: Vec T): Vec T;
axiom {:ctor "Vec"} (forall<T> v: Vec T:: {ReverseVec(v)}
        (var r := ReverseVec(v);
         LenVec(r) == LenVec(v) &&
         (forall i: int:: {ReadVec(r, i)} i >= 0 && i < LenVec(r) ==> ReadVec(r, i) == ReadVec(v, LenVec(v) - i - 1))));

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    ExtractVec(v, i, j - i)
}
/*private*/ function {:builtin "seq.extract"} ExtractVec<T>(v: Vec T, start: int, len: int): Vec T;

function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    ConcatVec3(SliceVec(v, 0, i), MakeVec1(elem), SliceVec(v, i + 1, LenVec(v)))
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    UpdateVec(UpdateVec(v, j, ReadVec(v, i)), i, ReadVec(v, j))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    ContainsSubVec(v, MakeVec1(e))
}
/*private*/ function {:builtin "seq.contains"} ContainsSubVec<T>(v: Vec T, sub: Vec T): bool;

function {:inline} IndexOfVec<T>(v: Vec T, e: T): int {
    IndexOfSubVec(v, MakeVec1(e))
}
/*private*/ function {:builtin "seq.indexof"} IndexOfSubVec<T>(v: Vec T, sub: Vec T): int;

function {:inline} InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

type {:datatype} Multiset _;
function {:constructor} Multiset<T>(v: [T]int, l: int): Multiset T;

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    l#Multiset(s)
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := l#Multiset(s);
    (var cnt := v#Multiset(s)[v];
    Multiset(v#Multiset(s)[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := l#Multiset(s1);
    (var len2 := l#Multiset(s2);
    Multiset((lambda v:T :: v#Multiset(s1)[v]-v#Multiset(s2)[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (l#Multiset(s) == 0) &&
    (forall v: T :: v#Multiset(s)[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (l#Multiset(s1) <= l#Multiset(s2)) &&
    (forall v: T :: v#Multiset(s1)[v] <= v#Multiset(s2)[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    v#Multiset(s)[v] > 0
}



// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;

type {:datatype} $Range;
function {:constructor} $Range(lb: int, ub: int): $Range;

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(lb#$Range(r)) &&  $IsValid'u64'(ub#$Range(r))
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   lb#$Range(r) <= i && i < ub#$Range(r)
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

type {:datatype} $Location;

// A global resource location within the statically known resource type's memory,
// where `a` is an address.
function {:constructor} $Global(a: int): $Location;

// A local location. `i` is the unique index of the local.
function {:constructor} $Local(i: int): $Location;

// The location of a reference outside of the verification scope, for example, a `&mut` parameter
// of the function being verified. References with these locations don't need to be written back
// when mutation ends.
function {:constructor} $Param(i: int): $Location;


// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
type {:datatype} $Mutation _;
function {:constructor} $Mutation<T>(l: $Location, p: Vec int, v: T): $Mutation T;

// Representation of memory for a given type.
type {:datatype} $Memory _;
function {:constructor} $Memory<T>(domain: [int]bool, contents: [int]T): $Memory T;

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    v#$Mutation(ref)
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(l#$Mutation(m), p#$Mutation(m), v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), offset), v)
}

// Return true of the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true of the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    l#$Mutation(m1) == l#$Mutation(m2)
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    is#$Global(l#$Mutation(m))
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    l#$Mutation(m) == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    a#$Global(l#$Mutation(m))
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    domain#$Memory(m)[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    contents#$Memory(m)[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(domain#$Memory(m)[a := true], contents#$Memory(m)[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := false], contents#$Memory(m))
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := domain#$Memory(s)[a]],
            contents#$Memory(m)[a := contents#$Memory(s)[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// Note that *not* inlining the shl/shr functions avoids timeouts. It appears that Z3 can reason
// better about this if it is an axiomatized function.
function $shl(src1: int, p: int): int {
    if p == 8 then src1 * 256
    else if p == 16 then src1 * 65536
    else if p == 32 then src1 * 4294967296
    else if p == 64 then src1 * 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

function $shr(src1: int, p: int): int {
    if p == 8 then src1 div 256
    else if p == 16 then src1 div 65536
    else if p == 32 then src1 div 4294967296
    else if p == 64 then src1 div 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

// TODO: fix this and $Shr to drop bits on overflow. Requires $Shl8, $Shl64, and $Shl128
procedure {:inline 1} $Shl(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shl(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shr(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, lb#$Range(r), ub#$Range(r))
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`


function {:inline} $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_KeyRotationCapability`


function {:inline} $IsEqual'vec'$1_DiemAccount_KeyRotationCapability''(v1: Vec ($1_DiemAccount_KeyRotationCapability), v2: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_KeyRotationCapability''(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): int;
axiom (forall v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability:: {$IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_KeyRotationCapability'() returns (v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), val: $1_DiemAccount_KeyRotationCapability) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), val: $1_DiemAccount_KeyRotationCapability): Vec ($1_DiemAccount_KeyRotationCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), other: Vec ($1_DiemAccount_KeyRotationCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int) returns (dst: $1_DiemAccount_KeyRotationCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_KeyRotationCapability), m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int, j: int): Vec ($1_DiemAccount_KeyRotationCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_WithdrawCapability`


function {:inline} $IsEqual'vec'$1_DiemAccount_WithdrawCapability''(v1: Vec ($1_DiemAccount_WithdrawCapability), v2: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_WithdrawCapability''(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): int;
axiom (forall v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability:: {$IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_WithdrawCapability'() returns (v: Vec ($1_DiemAccount_WithdrawCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), val: $1_DiemAccount_WithdrawCapability) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), val: $1_DiemAccount_WithdrawCapability): Vec ($1_DiemAccount_WithdrawCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), other: Vec ($1_DiemAccount_WithdrawCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int) returns (dst: $1_DiemAccount_WithdrawCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_WithdrawCapability), m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int, j: int): Vec ($1_DiemAccount_WithdrawCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemId_DiemIdDomain`


function {:inline} $IsEqual'vec'$1_DiemId_DiemIdDomain''(v1: Vec ($1_DiemId_DiemIdDomain), v2: Vec ($1_DiemId_DiemIdDomain)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemId_DiemIdDomain''(v: Vec ($1_DiemId_DiemIdDomain)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemId_DiemIdDomain'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain), e: $1_DiemId_DiemIdDomain): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemId_DiemIdDomain'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain), e: $1_DiemId_DiemIdDomain): int;
axiom (forall v: Vec ($1_DiemId_DiemIdDomain), e: $1_DiemId_DiemIdDomain:: {$IndexOfVec'$1_DiemId_DiemIdDomain'(v, e)}
    (var i := $IndexOfVec'$1_DiemId_DiemIdDomain'(v, e);
     if (!$ContainsVec'$1_DiemId_DiemIdDomain'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemId_DiemIdDomain'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemId_DiemIdDomain'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemId_DiemIdDomain'(): Vec ($1_DiemId_DiemIdDomain) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemId_DiemIdDomain'() returns (v: Vec ($1_DiemId_DiemIdDomain)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemId_DiemIdDomain'(): Vec ($1_DiemId_DiemIdDomain) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemId_DiemIdDomain'(m: $Mutation (Vec ($1_DiemId_DiemIdDomain)), val: $1_DiemId_DiemIdDomain) returns (m': $Mutation (Vec ($1_DiemId_DiemIdDomain))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain), val: $1_DiemId_DiemIdDomain): Vec ($1_DiemId_DiemIdDomain) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemId_DiemIdDomain'(m: $Mutation (Vec ($1_DiemId_DiemIdDomain))) returns (e: $1_DiemId_DiemIdDomain, m': $Mutation (Vec ($1_DiemId_DiemIdDomain))) {
    var v: Vec ($1_DiemId_DiemIdDomain);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemId_DiemIdDomain'(m: $Mutation (Vec ($1_DiemId_DiemIdDomain)), other: Vec ($1_DiemId_DiemIdDomain)) returns (m': $Mutation (Vec ($1_DiemId_DiemIdDomain))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemId_DiemIdDomain'(m: $Mutation (Vec ($1_DiemId_DiemIdDomain))) returns (m': $Mutation (Vec ($1_DiemId_DiemIdDomain))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain), i: int) returns (dst: $1_DiemId_DiemIdDomain) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain), i: int): $1_DiemId_DiemIdDomain {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemId_DiemIdDomain'(m: $Mutation (Vec ($1_DiemId_DiemIdDomain)), index: int)
returns (dst: $Mutation ($1_DiemId_DiemIdDomain), m': $Mutation (Vec ($1_DiemId_DiemIdDomain)))
{
    var v: Vec ($1_DiemId_DiemIdDomain);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain), i: int): $1_DiemId_DiemIdDomain {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemId_DiemIdDomain'(m: $Mutation (Vec ($1_DiemId_DiemIdDomain)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemId_DiemIdDomain)))
{
    var v: Vec ($1_DiemId_DiemIdDomain);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain), i: int, j: int): Vec ($1_DiemId_DiemIdDomain) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemId_DiemIdDomain'(m: $Mutation (Vec ($1_DiemId_DiemIdDomain)), i: int) returns (e: $1_DiemId_DiemIdDomain, m': $Mutation (Vec ($1_DiemId_DiemIdDomain)))
{
    var v: Vec ($1_DiemId_DiemIdDomain);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemId_DiemIdDomain'(m: $Mutation (Vec ($1_DiemId_DiemIdDomain)), i: int) returns (e: $1_DiemId_DiemIdDomain, m': $Mutation (Vec ($1_DiemId_DiemIdDomain)))
{
    var len: int;
    var v: Vec ($1_DiemId_DiemIdDomain);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain), e: $1_DiemId_DiemIdDomain) returns (res: bool)  {
    res := $ContainsVec'$1_DiemId_DiemIdDomain'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain), e: $1_DiemId_DiemIdDomain) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemId_DiemIdDomain'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemSystem_ValidatorInfo`


function {:inline} $IsEqual'vec'$1_DiemSystem_ValidatorInfo''(v1: Vec ($1_DiemSystem_ValidatorInfo), v2: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemSystem_ValidatorInfo''(v: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): int;
axiom (forall v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo:: {$IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e)}
    (var i := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
     if (!$ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemSystem_ValidatorInfo'() returns (v: Vec ($1_DiemSystem_ValidatorInfo)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), val: $1_DiemSystem_ValidatorInfo) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), val: $1_DiemSystem_ValidatorInfo): Vec ($1_DiemSystem_ValidatorInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), other: Vec ($1_DiemSystem_ValidatorInfo)) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int) returns (dst: $1_DiemSystem_ValidatorInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), index: int)
returns (dst: $Mutation ($1_DiemSystem_ValidatorInfo), m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int, j: int): Vec ($1_DiemSystem_ValidatorInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var len: int;
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res: bool)  {
    res := $ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'#0'`


function {:inline} $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''(v1: Vec ($1_Diem_PreburnWithMetadata'#0'), v2: Vec ($1_Diem_PreburnWithMetadata'#0')): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'#0''(): Vec ($1_Diem_PreburnWithMetadata'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'#0''() returns (v: Vec ($1_Diem_PreburnWithMetadata'#0')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'#0''(): Vec ($1_Diem_PreburnWithMetadata'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), val: $1_Diem_PreburnWithMetadata'#0') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), val: $1_Diem_PreburnWithMetadata'#0'): Vec ($1_Diem_PreburnWithMetadata'#0') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), other: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'#0') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int): $1_Diem_PreburnWithMetadata'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'#0'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int): $1_Diem_PreburnWithMetadata'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'#0') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'$1_XDX_XDX'`


function {:inline} $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''(v1: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), v2: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''() returns (v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), val: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), val: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), other: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'$1_XUS_XUS'`


function {:inline} $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''(v1: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), v2: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''() returns (v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), val: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), val: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), other: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_ValidatorConfig_Config`


function {:inline} $IsEqual'vec'$1_ValidatorConfig_Config''(v1: Vec ($1_ValidatorConfig_Config), v2: Vec ($1_ValidatorConfig_Config)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_ValidatorConfig_Config''(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_ValidatorConfig_Config'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): int;
axiom (forall v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config:: {$IndexOfVec'$1_ValidatorConfig_Config'(v, e)}
    (var i := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
     if (!$ContainsVec'$1_ValidatorConfig_Config'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_ValidatorConfig_Config'() returns (v: Vec ($1_ValidatorConfig_Config)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), val: $1_ValidatorConfig_Config) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), val: $1_ValidatorConfig_Config): Vec ($1_ValidatorConfig_Config) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    var v: Vec ($1_ValidatorConfig_Config);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), other: Vec ($1_ValidatorConfig_Config)) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int) returns (dst: $1_ValidatorConfig_Config) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), index: int)
returns (dst: $Mutation ($1_ValidatorConfig_Config), m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int, j: int) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int, j: int): Vec ($1_ValidatorConfig_Config) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var len: int;
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res: bool)  {
    res := $ContainsVec'$1_ValidatorConfig_Config'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `vec'u8'`


function {:inline} $IsEqual'vec'vec'u8'''(v1: Vec (Vec (int)), v2: Vec (Vec (int))): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'vec'u8'''(v: Vec (Vec (int))): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'vec'u8''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e))
}

function $IndexOfVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): int;
axiom (forall v: Vec (Vec (int)), e: Vec (int):: {$IndexOfVec'vec'u8''(v, e)}
    (var i := $IndexOfVec'vec'u8''(v, e);
     if (!$ContainsVec'vec'u8''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'vec'u8''(ReadVec(v, j), e))));


function {:inline} $RangeVec'vec'u8''(v: Vec (Vec (int))): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'vec'u8''() returns (v: Vec (Vec (int))) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'vec'u8''(v: Vec (Vec (int))) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'vec'u8''(m: $Mutation (Vec (Vec (int))), val: Vec (int)) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'vec'u8''(v: Vec (Vec (int)), val: Vec (int)): Vec (Vec (int)) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (e: Vec (int), m': $Mutation (Vec (Vec (int)))) {
    var v: Vec (Vec (int));
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'vec'u8''(m: $Mutation (Vec (Vec (int))), other: Vec (Vec (int))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'vec'u8''(v: Vec (Vec (int))) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'vec'u8''(v: Vec (Vec (int))): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'vec'u8''(v: Vec (Vec (int)), i: int) returns (dst: Vec (int)) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'vec'u8''(m: $Mutation (Vec (Vec (int))), index: int)
returns (dst: $Mutation (Vec (int)), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'vec'u8''(v: Vec (Vec (int))) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int, j: int) returns (m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'vec'u8''(v: Vec (Vec (int)), i: int, j: int): Vec (Vec (int)) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var len: int;
    var v: Vec (Vec (int));

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res: bool)  {
    res := $ContainsVec'vec'u8''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'vec'u8''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`


function {:inline} $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u64`


function {:inline} $IsEqual'vec'u64''(v1: Vec (int), v2: Vec (int)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'u64''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u64'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e))
}

function $IndexOfVec'u64'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u64'(v, e)}
    (var i := $IndexOfVec'u64'(v, e);
     if (!$ContainsVec'u64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u64'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'u64'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'u64'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'u64'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'u64'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'u64'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'u64'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'u64'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'u64'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'u64'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'u64'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'u64'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'u64'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'u64'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'u64'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u64'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'u64'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`


function {:inline} $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_Hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_Hash_sha2(v1), $1_Hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha2(v1), $1_Hash_sha2(v2)));

procedure $1_Hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha2_256(val: Vec int): Vec int {
    $1_Hash_sha2(val)
}

// similarly for Hash_sha3
function $1_Hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_Hash_sha3(v1), $1_Hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha3(v1), $1_Hash_sha3(v2)));

procedure $1_Hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha3_256(val: Vec int): Vec int {
    $1_Hash_sha3(val)
}

// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: int) {
    // A signer is currently identical to an address.
    signer := addr;
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: int
) {
  return;
}

// ==================================================================================
// Native Signer

procedure {:inline 1} $1_Signer_borrow_address(signer: int) returns (res: int) {
    res := signer;
}

// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native BCS::serialize

// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `address`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function {:inline} $1_BCS_serialize'address'(v: int): Vec int;

axiom (forall v1, v2: int :: {$1_BCS_serialize'address'(v1), $1_BCS_serialize'address'(v2)}
   $IsEqual'address'(v1, v2) <==> $IsEqual'vec'u8''($1_BCS_serialize'address'(v1), $1_BCS_serialize'address'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: int :: {$1_BCS_serialize'address'(v)}
     ( var r := $1_BCS_serialize'address'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_BCS_to_bytes'address'(v: int) returns (res: Vec int);
ensures res == $1_BCS_serialize'address'(v);

function {:inline} $1_BCS_$to_bytes'address'(v: int): Vec int {
    $1_BCS_serialize'address'(v)
}

// Serialized addresses should have the same length.
const $serialized_address_len: int;
// Serialized addresses should have the same length
axiom (forall v: int :: {$1_BCS_serialize'address'(v)}
     ( var r := $1_BCS_serialize'address'(v); LenVec(r) == $serialized_address_len));




// ==================================================================================
// Native Signer::spec_address_of

function {:inline} $1_Signer_spec_address_of(signer: int): int
{
    // A signer is currently identical to an address.
    signer
}

function {:inline} $1_Signer_$borrow_address(signer: int): int
{
    // A signer is currently identical to an address.
    signer
}

// ==================================================================================
// Native Event module




// Publishing a generator does nothing. Currently we just ignore this function and do not represent generators
// at all because they are not publicly exposed by the Event module.
// TODO: we should check (and abort with the right code) if a generator already exists for
// the signer.

procedure {:inline 1} $1_Event_publish_generator(signer: int) {
}

// Generic code for dealing with mutations (havoc) still requires type and memory declarations.
type $1_Event_EventHandleGenerator;
var $1_Event_EventHandleGenerator_$memory: $Memory $1_Event_EventHandleGenerator;

// Abstract type of event handles.
type $1_Event_EventHandle;

// Global state to implement uniqueness of event handles.
var $1_Event_EventHandles: [$1_Event_EventHandle]bool;

// Universal representation of an an event. For each concrete event type, we generate a constructor.
type {:datatype} $EventRep;

// Representation of EventStore that consists of event streams.
type {:datatype} $EventStore;
function {:constructor} $EventStore(
    counter: int, streams: [$1_Event_EventHandle]Multiset $EventRep): $EventStore;

// Global state holding EventStore.
var $es: $EventStore;

procedure {:inline 1} $InitEventStore() {
    assume $EventStore__is_empty($es);
}

function {:inline} $EventStore__is_empty(es: $EventStore): bool {
    (counter#$EventStore(es) == 0) &&
    (forall handle: $1_Event_EventHandle ::
        (var stream := streams#$EventStore(es)[handle];
        IsEmptyMultiset(stream)))
}

// This function returns (es1 - es2). This function assumes that es2 is a subset of es1.
function {:inline} $EventStore__subtract(es1: $EventStore, es2: $EventStore): $EventStore {
    $EventStore(counter#$EventStore(es1)-counter#$EventStore(es2),
        (lambda handle: $1_Event_EventHandle ::
        SubtractMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle])))
}

function {:inline} $EventStore__is_subset(es1: $EventStore, es2: $EventStore): bool {
    (counter#$EventStore(es1) <= counter#$EventStore(es2)) &&
    (forall handle: $1_Event_EventHandle ::
        IsSubsetMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle]
        )
    )
}

procedure {:inline 1} $EventStore__diverge(es: $EventStore) returns (es': $EventStore) {
    assume $EventStore__is_subset(es, es');
}

const $EmptyEventStore: $EventStore;
axiom $EventStore__is_empty($EmptyEventStore);

// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_FreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_FreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(e: $1_AccountFreezing_FreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_FreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_FreezeAccountEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_FreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_FreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_UnfreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_UnfreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(e: $1_AccountFreezing_UnfreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_UnfreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_UnfreezeAccountEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_UnfreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_UnfreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DesignatedDealer_ReceivedMintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(a: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', b: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(h: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    true
}

// Embed event `$1_DesignatedDealer_ReceivedMintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(e: $1_DesignatedDealer_ReceivedMintEvent): $EventRep;
axiom (forall v1, v2: $1_DesignatedDealer_ReceivedMintEvent :: {$ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1), $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2)}
    $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(v1, v2) <==> $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1) == $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DesignatedDealer_ReceivedMintEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DesignatedDealer_ReceivedMintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    var handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DesignatedDealer_ReceivedMintEvent'(handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
}

function {:inline} $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_AdminTransactionEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(a: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', b: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(h: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_AdminTransactionEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(e: $1_DiemAccount_AdminTransactionEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_AdminTransactionEvent :: {$ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1), $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2)}
    $IsEqual'$1_DiemAccount_AdminTransactionEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1) == $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_AdminTransactionEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_AdminTransactionEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_AdminTransactionEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_CreateAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(a: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', b: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(h: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_CreateAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_CreateAccountEvent'(e: $1_DiemAccount_CreateAccountEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_CreateAccountEvent :: {$ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1), $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2)}
    $IsEqual'$1_DiemAccount_CreateAccountEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1) == $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_CreateAccountEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_CreateAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_CreateAccountEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_CreateAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_ReceivedPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_ReceivedPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(e: $1_DiemAccount_ReceivedPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_ReceivedPaymentEvent :: {$ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_ReceivedPaymentEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_ReceivedPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_ReceivedPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_SentPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_SentPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_SentPaymentEvent'(e: $1_DiemAccount_SentPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_SentPaymentEvent :: {$ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_SentPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_SentPaymentEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_SentPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_SentPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_SentPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemBlock_NewBlockEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(a: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', b: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(h: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    true
}

// Embed event `$1_DiemBlock_NewBlockEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemBlock_NewBlockEvent'(e: $1_DiemBlock_NewBlockEvent): $EventRep;
axiom (forall v1, v2: $1_DiemBlock_NewBlockEvent :: {$ToEventRep'$1_DiemBlock_NewBlockEvent'(v1), $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2)}
    $IsEqual'$1_DiemBlock_NewBlockEvent'(v1, v2) <==> $ToEventRep'$1_DiemBlock_NewBlockEvent'(v1) == $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemBlock_NewBlockEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemBlock_NewBlockEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    var handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemBlock_NewBlockEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemBlock_NewBlockEvent'(handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemBlock_NewBlockEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemConfig_NewEpochEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(a: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', b: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(h: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    true
}

// Embed event `$1_DiemConfig_NewEpochEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemConfig_NewEpochEvent'(e: $1_DiemConfig_NewEpochEvent): $EventRep;
axiom (forall v1, v2: $1_DiemConfig_NewEpochEvent :: {$ToEventRep'$1_DiemConfig_NewEpochEvent'(v1), $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2)}
    $IsEqual'$1_DiemConfig_NewEpochEvent'(v1, v2) <==> $ToEventRep'$1_DiemConfig_NewEpochEvent'(v1) == $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemConfig_NewEpochEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemConfig_NewEpochEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    var handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemConfig_NewEpochEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemConfig_NewEpochEvent'(handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemConfig_NewEpochEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemId_DiemIdDomainEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent''(a: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent', b: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent''(h: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent'): bool {
    true
}

// Embed event `$1_DiemId_DiemIdDomainEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemId_DiemIdDomainEvent'(e: $1_DiemId_DiemIdDomainEvent): $EventRep;
axiom (forall v1, v2: $1_DiemId_DiemIdDomainEvent :: {$ToEventRep'$1_DiemId_DiemIdDomainEvent'(v1), $ToEventRep'$1_DiemId_DiemIdDomainEvent'(v2)}
    $IsEqual'$1_DiemId_DiemIdDomainEvent'(v1, v2) <==> $ToEventRep'$1_DiemId_DiemIdDomainEvent'(v1) == $ToEventRep'$1_DiemId_DiemIdDomainEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemId_DiemIdDomainEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemId_DiemIdDomainEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent', msg: $1_DiemId_DiemIdDomainEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent') {
    var handle: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemId_DiemIdDomainEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemId_DiemIdDomainEvent'(handle: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemId_DiemIdDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent', msg: $1_DiemId_DiemIdDomainEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemId_DiemIdDomainEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemId_DiemIdDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent', msg: $1_DiemId_DiemIdDomainEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemId_DiemIdDomainEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_BurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_BurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''(a: $1_Event_EventHandle'$1_Diem_BurnEvent', b: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''(h: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    true
}

// Embed event `$1_Diem_BurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_BurnEvent'(e: $1_Diem_BurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_BurnEvent :: {$ToEventRep'$1_Diem_BurnEvent'(v1), $ToEventRep'$1_Diem_BurnEvent'(v2)}
    $IsEqual'$1_Diem_BurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_BurnEvent'(v1) == $ToEventRep'$1_Diem_BurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_BurnEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_BurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_BurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_BurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_BurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_BurnEvent'(handle: $1_Event_EventHandle'$1_Diem_BurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_BurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_BurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_CancelBurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_CancelBurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(a: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', b: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(h: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    true
}

// Embed event `$1_Diem_CancelBurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_CancelBurnEvent'(e: $1_Diem_CancelBurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_CancelBurnEvent :: {$ToEventRep'$1_Diem_CancelBurnEvent'(v1), $ToEventRep'$1_Diem_CancelBurnEvent'(v2)}
    $IsEqual'$1_Diem_CancelBurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_CancelBurnEvent'(v1) == $ToEventRep'$1_Diem_CancelBurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_CancelBurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_CancelBurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_CancelBurnEvent'(handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_CancelBurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_CancelBurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_MintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_MintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''(a: $1_Event_EventHandle'$1_Diem_MintEvent', b: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''(h: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    true
}

// Embed event `$1_Diem_MintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_MintEvent'(e: $1_Diem_MintEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_MintEvent :: {$ToEventRep'$1_Diem_MintEvent'(v1), $ToEventRep'$1_Diem_MintEvent'(v2)}
    $IsEqual'$1_Diem_MintEvent'(v1, v2) <==> $ToEventRep'$1_Diem_MintEvent'(v1) == $ToEventRep'$1_Diem_MintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_MintEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_MintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_MintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_MintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_MintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_MintEvent'(handle: $1_Event_EventHandle'$1_Diem_MintEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_MintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_MintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_PreburnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_PreburnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''(a: $1_Event_EventHandle'$1_Diem_PreburnEvent', b: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''(h: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    true
}

// Embed event `$1_Diem_PreburnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_PreburnEvent'(e: $1_Diem_PreburnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_PreburnEvent :: {$ToEventRep'$1_Diem_PreburnEvent'(v1), $ToEventRep'$1_Diem_PreburnEvent'(v2)}
    $IsEqual'$1_Diem_PreburnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_PreburnEvent'(v1) == $ToEventRep'$1_Diem_PreburnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_PreburnEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_PreburnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_PreburnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_PreburnEvent'(handle: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_PreburnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_PreburnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_ToXDXExchangeRateUpdateEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(a: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', b: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(h: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    true
}

// Embed event `$1_Diem_ToXDXExchangeRateUpdateEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(e: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_ToXDXExchangeRateUpdateEvent :: {$ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1), $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2)}
    $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1, v2) <==> $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1) == $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_BaseUrlRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_BaseUrlRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(e: $1_DualAttestation_BaseUrlRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_BaseUrlRotationEvent :: {$ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1), $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_BaseUrlRotationEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_BaseUrlRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_BaseUrlRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_ComplianceKeyRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_ComplianceKeyRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(e: $1_DualAttestation_ComplianceKeyRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_ComplianceKeyRotationEvent :: {$ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1), $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_ComplianceKeyRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(es, handle, msg)
    else
        es
}




//==================================
// Begin Translation



// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }

// spec fun at /home/ying/diem/language/move-stdlib/modules/Signer.move:13:5+77
function {:inline} $1_Signer_$address_of(s: int): int {
    $1_Signer_$borrow_address(s)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:45:5+60
function {:inline} $1_CoreAddresses_$CORE_CODE_ADDRESS(): int {
    1
}

// spec fun at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:24:5+70
function {:inline} $1_CoreAddresses_$CURRENCY_INFO_ADDRESS(): int {
    173345816
}

// spec fun at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:16:5+66
function {:inline} $1_CoreAddresses_$DIEM_ROOT_ADDRESS(): int {
    173345816
}

// spec fun at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:5+76
function {:inline} $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(): int {
    186537453
}

// spec fun at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:39:5+62
function {:inline} $1_CoreAddresses_$VM_RESERVED_ADDRESS(): int {
    0
}

// fun CoreAddresses::CORE_CODE_ADDRESS [baseline] at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:45:5+60
procedure {:inline 1} $1_CoreAddresses_CORE_CODE_ADDRESS() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $temp_0'address': int;

    // bytecode translation starts here
    // $t0 := 0x1 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:46:9+4
    assume {:print "$at(8,1952,1956)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:46:9+4
    assume {:print "$track_return(2,0,0):", $t0} $t0 == $t0;

    // label L1 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:47:5+1
    assume {:print "$at(8,1961,1962)"} true;
L1:

    // return $t0 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:47:5+1
    $ret0 := $t0;
    return;

}

// fun CoreAddresses::CURRENCY_INFO_ADDRESS [baseline] at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:24:5+70
procedure {:inline 1} $1_CoreAddresses_CURRENCY_INFO_ADDRESS() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $temp_0'address': int;

    // bytecode translation starts here
    // $t0 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:25:9+10
    assume {:print "$at(8,1126,1136)"} true;
    $t0 := 173345816;
    assume $IsValid'address'($t0);

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:25:9+10
    assume {:print "$track_return(2,1,0):", $t0} $t0 == $t0;

    // label L1 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:26:5+1
    assume {:print "$at(8,1141,1142)"} true;
L1:

    // return $t0 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:26:5+1
    $ret0 := $t0;
    return;

}

// fun CoreAddresses::DIEM_ROOT_ADDRESS [baseline] at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:16:5+66
procedure {:inline 1} $1_CoreAddresses_DIEM_ROOT_ADDRESS() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $temp_0'address': int;

    // bytecode translation starts here
    // $t0 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:17:9+10
    assume {:print "$at(8,737,747)"} true;
    $t0 := 173345816;
    assume $IsValid'address'($t0);

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:17:9+10
    assume {:print "$track_return(2,2,0):", $t0} $t0 == $t0;

    // label L1 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:18:5+1
    assume {:print "$at(8,752,753)"} true;
L1:

    // return $t0 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:18:5+1
    $ret0 := $t0;
    return;

}

// fun CoreAddresses::TREASURY_COMPLIANCE_ADDRESS [baseline] at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:5+76
procedure {:inline 1} $1_CoreAddresses_TREASURY_COMPLIANCE_ADDRESS() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $temp_0'address': int;

    // bytecode translation starts here
    // $t0 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:32:9+10
    assume {:print "$at(8,1419,1429)"} true;
    $t0 := 186537453;
    assume $IsValid'address'($t0);

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:32:9+10
    assume {:print "$track_return(2,3,0):", $t0} $t0 == $t0;

    // label L1 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:33:5+1
    assume {:print "$at(8,1434,1435)"} true;
L1:

    // return $t0 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:33:5+1
    $ret0 := $t0;
    return;

}

// fun CoreAddresses::VM_RESERVED_ADDRESS [baseline] at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:39:5+62
procedure {:inline 1} $1_CoreAddresses_VM_RESERVED_ADDRESS() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $temp_0'address': int;

    // bytecode translation starts here
    // $t0 := 0x0 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:40:9+4
    assume {:print "$at(8,1768,1772)"} true;
    $t0 := 0;
    assume $IsValid'address'($t0);

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:40:9+4
    assume {:print "$track_return(2,4,0):", $t0} $t0 == $t0;

    // label L1 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:41:5+1
    assume {:print "$at(8,1777,1778)"} true;
L1:

    // return $t0 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:41:5+1
    $ret0 := $t0;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:127:5+114
function {:inline} $1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    !$ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:147:5+115
function {:inline} $1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:109:10+129
function {:inline} $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): int {
    $microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds($ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:122:10+150
function {:inline} $1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): int {
    ($microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds($ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) div 1000000)
}

// struct DiemTimestamp::CurrentTimeMicroseconds at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:21:5+73
type {:datatype} $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:constructor} $1_DiemTimestamp_CurrentTimeMicroseconds($microseconds: int): $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:inline} $Update'$1_DiemTimestamp_CurrentTimeMicroseconds'_microseconds(s: $1_DiemTimestamp_CurrentTimeMicroseconds, x: int): $1_DiemTimestamp_CurrentTimeMicroseconds {
    $1_DiemTimestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'(s: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'($microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds(s))
}
function {:inline} $IsEqual'$1_DiemTimestamp_CurrentTimeMicroseconds'(s1: $1_DiemTimestamp_CurrentTimeMicroseconds, s2: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;

// fun DiemTimestamp::set_time_has_started [baseline] at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:5+240
procedure {:inline 1} $1_DiemTimestamp_set_time_has_started(_$t0: int) returns ()
{
    // declare local variables
    var $t1: $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:5+1
    assume {:print "$at(17,1620,1621)"} true;
    assume {:print "$track_local(3,6,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(17,1683,1699)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16

    // assume Identical($t2, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
    assume ($t2 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t2) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
    assume {:print "$at(17,1683,1699)"} true;
    assume {:print "$track_abort(3,6):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(17,1709,1752)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43

    // assume Identical($t4, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
    assume ($t4 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t4) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
    if ($t4) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
L6:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
    assume {:print "$at(17,1709,1752)"} true;
    assume {:print "$track_abort(3,6):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
L5:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:40:61+1
    assume {:print "$at(17,1814,1815)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := pack DiemTimestamp::CurrentTimeMicroseconds($t5) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:40:21+43
    $t6 := $1_DiemTimestamp_CurrentTimeMicroseconds($t5);

    // move_to<DiemTimestamp::CurrentTimeMicroseconds>($t6, $t0) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:41:9+7
    assume {:print "$at(17,1827,1834)"} true;
    if ($ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemTimestamp_CurrentTimeMicroseconds_$memory := $ResourceUpdate($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $t0, $t6);
    }
    if ($abort_flag) {
        assume {:print "$at(17,1827,1834)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(3,6):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:42:5+1
    assume {:print "$at(17,1859,1860)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:42:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:42:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:42:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun DiemTimestamp::update_global_time [verification] at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:56:5+844
procedure {:timeLimit 40} $1_DiemTimestamp_update_global_time$verify(_$t0: int, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: $Mutation ($1_DiemTimestamp_CurrentTimeMicroseconds);
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: $Mutation ($1_DiemTimestamp_CurrentTimeMicroseconds);
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation (int);
    var $t25: int;
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$modifies: [int]bool;
    var $temp_0'$1_DiemTimestamp_CurrentTimeMicroseconds': $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#147: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t14));
    assume IsEmptyVec(p#$Mutation($t24));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:56:5+844
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(17,2559,3403)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:56:5+844
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:56:5+844
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:56:5+844
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:56:5+844
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume Identical($t9, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:80:9+34
    assume {:print "$at(17,3552,3586)"} true;
    assume ($t9 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume CanModify<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:78:9+77
    assume {:print "$at(17,3465,3542)"} true;
    assume $1_DiemTimestamp_CurrentTimeMicroseconds_$modifies[$1_CoreAddresses_$DIEM_ROOT_ADDRESS()];

    // @147 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:78:9+77
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#147 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:56:5+1
    assume {:print "$at(17,2559,2560)"} true;
    assume {:print "$track_local(3,7,0):", $t0} $t0 == $t0;

    // trace_local[proposer]($t1) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:56:5+1
    assume {:print "$track_local(3,7,1):", $t1} $t1 == $t1;

    // trace_local[timestamp]($t2) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:56:5+1
    assume {:print "$track_local(3,7,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:61:9+18
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(17,2715,2733)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:61:9+18

    // assume Identical($t10, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:61:9+18
    assume ($t10 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t10) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:61:9+18
    if ($t10) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:61:9+18
L10:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:61:9+18
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t11));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:61:9+18
    assume {:print "$at(17,2715,2733)"} true;
    assume {:print "$track_abort(3,7):", $t11} $t11 == $t11;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:61:9+18
    goto L8;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:61:9+18
L9:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:61:9+18

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:63:9+33
    // >> opaque call: CoreAddresses::assert_vm($t0)
    assume {:print "$at(17,2792,2825)"} true;

    // opaque begin: CoreAddresses::assert_vm($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:63:9+33

    // assume Identical($t12, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$VM_RESERVED_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:63:9+33
    assume ($t12 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$VM_RESERVED_ADDRESS()));

    // if ($t12) goto L12 else goto L11 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:63:9+33
    if ($t12) { goto L12; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:63:9+33
L12:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$VM_RESERVED_ADDRESS()), Eq(2, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:63:9+33
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(2, $t11));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:63:9+33
    assume {:print "$at(17,2792,2825)"} true;
    assume {:print "$track_abort(3,7):", $t11} $t11 == $t11;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:63:9+33
    goto L8;

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:63:9+33
L11:

    // opaque end: CoreAddresses::assert_vm($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:63:9+33

    // $t13 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L8 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:65:71+34
    assume {:print "$at(17,2898,2932)"} true;
    call $t13 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(17,2898,2932)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,7):", $t11} $t11 == $t11;
        goto L8;
    }

    // assert CanModify<DiemTimestamp::CurrentTimeMicroseconds>($t13) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:65:28+17
    assert {:msg "assert_failed(17,2855,2872): caller does not have permission to modify `DiemTimestamp::CurrentTimeMicroseconds` at given address"}
      $1_DiemTimestamp_CurrentTimeMicroseconds_$modifies[$t13];

    // $t14 := borrow_global<DiemTimestamp::CurrentTimeMicroseconds>($t13) on_abort goto L8 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:65:28+17
    if (!$ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $t13)) {
        call $ExecFailureAbort();
    } else {
        $t14 := $Mutation($Global($t13), EmptyVec(), $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $t13));
    }
    if ($abort_flag) {
        assume {:print "$at(17,2855,2872)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,7):", $t11} $t11 == $t11;
        goto L8;
    }

    // trace_local[global_timer]($t14) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:65:13+12
    $temp_0'$1_DiemTimestamp_CurrentTimeMicroseconds' := $Dereference($t14);
    assume {:print "$track_local(3,7,3):", $temp_0'$1_DiemTimestamp_CurrentTimeMicroseconds'} $temp_0'$1_DiemTimestamp_CurrentTimeMicroseconds' == $temp_0'$1_DiemTimestamp_CurrentTimeMicroseconds';

    // $t15 := get_field<DiemTimestamp::CurrentTimeMicroseconds>.microseconds($t14) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:66:19+25
    assume {:print "$at(17,2953,2978)"} true;
    $t15 := $microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds($Dereference($t14));

    // trace_local[now]($t15) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:66:13+3
    assume {:print "$track_local(3,7,4):", $t15} $t15 == $t15;

    // $t16 := CoreAddresses::VM_RESERVED_ADDRESS() on_abort goto L8 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:67:25+36
    assume {:print "$at(17,3004,3040)"} true;
    call $t16 := $1_CoreAddresses_VM_RESERVED_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(17,3004,3040)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,7):", $t11} $t11 == $t11;
        goto L8;
    }

    // $t17 := ==($t1, $t16) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:67:22+2
    $t17 := $IsEqual'address'($t1, $t16);

    // if ($t17) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:67:9+361
    if ($t17) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:67:9+361
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:67:9+361
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:20+3
    assume {:print "$at(17,3144,3147)"} true;
L0:

    // $t18 := ==($t15, $t2) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:24+2
    $t18 := $IsEqual'u64'($t15, $t2);

    // $t19 := 2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:63+10
    $t19 := 2;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:38+36
    // >> opaque call: $t16 := Errors::invalid_argument($t15)

    // $t20 := opaque begin: Errors::invalid_argument($t19) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:38+36

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:38+36
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 7) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:38+36
    assume $IsEqual'u64'($t20, 7);

    // $t20 := opaque end: Errors::invalid_argument($t19) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:38+36

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:13+62
    assume {:print "$track_local(3,7,6):", $t20} $t20 == $t20;

    // trace_local[tmp#$5]($t18) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:13+62
    assume {:print "$track_local(3,7,5):", $t18} $t18 == $t18;

    // if ($t18) goto L3 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:13+62
    if ($t18) { goto L3; } else { goto L4; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:13+62
L4:

    // destroy($t14) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:13+62

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:13+62
    assume {:print "$at(17,3137,3199)"} true;
    assume {:print "$track_abort(3,7):", $t20} $t20 == $t20;

    // $t11 := move($t20) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:13+62
    $t11 := $t20;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:13+62
    goto L8;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:75+1
L3:

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:69:75+1
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:20+3
    assume {:print "$at(17,3284,3287)"} true;
L2:

    // $t21 := <($t15, $t2) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:24+1
    call $t21 := $Lt($t15, $t2);

    // $t22 := 2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:62+10
    $t22 := 2;
    assume $IsValid'u64'($t22);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:37+36
    // >> opaque call: $t19 := Errors::invalid_argument($t18)

    // $t23 := opaque begin: Errors::invalid_argument($t22) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:37+36

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:37+36
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 7) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:37+36
    assume $IsEqual'u64'($t23, 7);

    // $t23 := opaque end: Errors::invalid_argument($t22) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:37+36

    // trace_local[tmp#$8]($t23) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:13+61
    assume {:print "$track_local(3,7,8):", $t23} $t23 == $t23;

    // trace_local[tmp#$7]($t21) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:13+61
    assume {:print "$track_local(3,7,7):", $t21} $t21 == $t21;

    // if ($t21) goto L5 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:13+61
    if ($t21) { goto L5; } else { goto L6; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:13+61
L6:

    // destroy($t14) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:13+61

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:13+61
    assume {:print "$at(17,3277,3338)"} true;
    assume {:print "$track_abort(3,7):", $t23} $t23 == $t23;

    // $t11 := move($t23) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:13+61
    $t11 := $t23;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:72:13+61
    goto L8;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:74:37+9
    assume {:print "$at(17,3387,3396)"} true;
L5:

    // $t24 := borrow_field<DiemTimestamp::CurrentTimeMicroseconds>.microseconds($t14) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:74:9+25
    $t24 := $ChildMutation($t14, 0, $microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds($Dereference($t14)));

    // write_ref($t24, $t2) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:74:9+37
    $t24 := $UpdateMutation($t24, $t2);

    // write_back[Reference($t14).microseconds]($t24) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:74:9+37
    $t14 := $UpdateMutation($t14, $Update'$1_DiemTimestamp_CurrentTimeMicroseconds'_microseconds($Dereference($t14), $Dereference($t24)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:56:5+844
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume {:print "$at(17,2559,3403)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:56:5+844
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // write_back[DiemTimestamp::CurrentTimeMicroseconds@]($t14) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:74:9+37
    assume {:print "$at(17,3359,3396)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory := $ResourceUpdate($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $GlobalLocationAddress($t14),
        $Dereference($t14));

    // assert Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume {:print "$at(11,104358,104486)"} true;
    assert {:msg "assert_failed(11,104358,104486): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume {:print "$at(11,104557,104677)"} true;
    assert {:msg "assert_failed(11,104557,104677): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:75:5+1
    assume {:print "$at(17,3402,3403)"} true;
L7:

    // assume Identical($t25, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:81:9+44
    assume {:print "$at(17,3595,3639)"} true;
    assume ($t25 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assert Not(Not(DiemTimestamp::$is_operating[@147]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#147);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$VM_RESERVED_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:105:9+110
    assume {:print "$at(8,4190,4300)"} true;
    assert {:msg "assert_failed(8,4190,4300): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$VM_RESERVED_ADDRESS());

    // assert Not((if Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]()) {{let ; Neq<u64>($t9, $t2)}} else {{let ; Ge($t9, $t2)}})) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:89:9+250
    assume {:print "$at(17,3947,4197)"} true;
    assert {:msg "assert_failed(17,3947,4197): function does not abort under this condition"}
      !if ($IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS())) then (!$IsEqual'u64'($t9, $t2)) else (($t9 >= $t2));

    // assert Eq<u64>($t25, $t2) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:86:9+30
    assume {:print "$at(17,3815,3845)"} true;
    assert {:msg "assert_failed(17,3815,3845): post-condition does not hold"}
      $IsEqual'u64'($t25, $t2);

    // return () at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:86:9+30
    return;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:75:5+1
    assume {:print "$at(17,3402,3403)"} true;
L8:

    // assert Or(Or(Not(DiemTimestamp::$is_operating[@147]()), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$VM_RESERVED_ADDRESS[]())), (if Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]()) {{let ; Neq<u64>($t9, $t2)}} else {{let ; Ge($t9, $t2)}})) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:76:5+795
    assume {:print "$at(17,3408,4203)"} true;
    assert {:msg "assert_failed(17,3408,4203): abort not covered by any of the `aborts_if` clauses"}
      ((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#147) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$VM_RESERVED_ADDRESS())) || if ($IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS())) then (!$IsEqual'u64'($t9, $t2)) else (($t9 >= $t2)));

    // assert Or(Or(And(Not(DiemTimestamp::$is_operating[@147]()), Eq(1, $t11)), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$VM_RESERVED_ADDRESS[]()), Eq(2, $t11))), And((if Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]()) {{let ; Neq<u64>($t9, $t2)}} else {{let ; Ge($t9, $t2)}}), Eq(7, $t11))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:76:5+795
    assert {:msg "assert_failed(17,3408,4203): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#147) && $IsEqual'u8'(1, $t11)) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(2, $t11))) || (if ($IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS())) then (!$IsEqual'u64'($t9, $t2)) else (($t9 >= $t2)) && $IsEqual'u8'(7, $t11)));

    // abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:76:5+795
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// struct SlidingNonce::SlidingNonce at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:13:5+341
type {:datatype} $1_SlidingNonce_SlidingNonce;
function {:constructor} $1_SlidingNonce_SlidingNonce($min_nonce: int, $nonce_mask: int): $1_SlidingNonce_SlidingNonce;
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_min_nonce(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce(x, $nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_nonce_mask(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce($min_nonce#$1_SlidingNonce_SlidingNonce(s), x)
}
function $IsValid'$1_SlidingNonce_SlidingNonce'(s: $1_SlidingNonce_SlidingNonce): bool {
    $IsValid'u64'($min_nonce#$1_SlidingNonce_SlidingNonce(s))
      && $IsValid'u128'($nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $IsEqual'$1_SlidingNonce_SlidingNonce'(s1: $1_SlidingNonce_SlidingNonce, s2: $1_SlidingNonce_SlidingNonce): bool {
    s1 == s2
}
var $1_SlidingNonce_SlidingNonce_$memory: $Memory $1_SlidingNonce_SlidingNonce;

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:228:5+394
function {:inline} $1_Roles_$can_hold_balance($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, account: int): bool {
    (($1_Roles_$has_parent_VASP_role($1_Roles_RoleId_$memory, account) || $1_Roles_$has_child_VASP_role($1_Roles_RoleId_$memory, account)) || $1_Roles_$has_designated_dealer_role($1_Roles_RoleId_$memory, account))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:218:5+124
function {:inline} $1_Roles_$has_child_VASP_role($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, account: int): bool {
    $1_Roles_$has_role($1_Roles_RoleId_$memory, account, 6)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:202:5+138
function {:inline} $1_Roles_$has_designated_dealer_role($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, account: int): bool {
    $1_Roles_$has_role($1_Roles_RoleId_$memory, account, 2)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:194:5+122
function {:inline} $1_Roles_$has_diem_root_role($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, account: int): bool {
    $1_Roles_$has_role($1_Roles_RoleId_$memory, account, 0)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:214:5+126
function {:inline} $1_Roles_$has_parent_VASP_role($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, account: int): bool {
    $1_Roles_$has_role($1_Roles_RoleId_$memory, account, 5)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:188:5+210
function {:inline} $1_Roles_$has_role($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, account: int, role_id: int): bool {
    (var addr := $1_Signer_$address_of(account); ($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), role_id)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:475:9+93
function {:inline} $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): int {
    $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:479:9+148
function {:inline} $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int, role_id: int): bool {
    ($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), role_id))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:483:9+124
function {:inline} $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:487:9+144
function {:inline} $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 1)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:491:9+140
function {:inline} $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 2)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:495:9+124
function {:inline} $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 3)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:499:9+142
function {:inline} $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 4)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:503:9+128
function {:inline} $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 5)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:507:9+126
function {:inline} $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 6)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:511:9+229
function {:inline} $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    (($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr)) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))
}

// struct Roles::RoleId at /home/ying/diem/language/diem-framework/modules/Roles.move:51:5+51
type {:datatype} $1_Roles_RoleId;
function {:constructor} $1_Roles_RoleId($role_id: int): $1_Roles_RoleId;
function {:inline} $Update'$1_Roles_RoleId'_role_id(s: $1_Roles_RoleId, x: int): $1_Roles_RoleId {
    $1_Roles_RoleId(x)
}
function $IsValid'$1_Roles_RoleId'(s: $1_Roles_RoleId): bool {
    $IsValid'u64'($role_id#$1_Roles_RoleId(s))
}
function {:inline} $IsEqual'$1_Roles_RoleId'(s1: $1_Roles_RoleId, s2: $1_Roles_RoleId): bool {
    s1 == s2
}
var $1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId;

// fun Roles::can_hold_balance [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:228:5+394
procedure {:inline 1} $1_Roles_can_hold_balance(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: bool;
    var $t8: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:228:5+1
    assume {:print "$at(26,9217,9218)"} true;
    assume {:print "$track_local(6,9,0):", $t0} $t0 == $t0;

    // $t3 := Roles::has_parent_VASP_role($t0) on_abort goto L9 with $t4 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+29
    assume {:print "$at(26,9489,9518)"} true;
    call $t3 := $1_Roles_has_parent_VASP_role($t0);
    if ($abort_flag) {
        assume {:print "$at(26,9489,9518)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(6,9):", $t4} $t4 == $t4;
        goto L9;
    }

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+69
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+69
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+69
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+69
L0:

    // $t5 := true at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+69
    $t5 := true;
    assume $IsValid'bool'($t5);

    // $t1 := $t5 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+69
    $t1 := $t5;

    // trace_local[tmp#$1]($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+69
    assume {:print "$track_local(6,9,1):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+69
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:233:29+7
    assume {:print "$at(26,9550,9557)"} true;
L2:

    // $t6 := Roles::has_child_VASP_role($t0) on_abort goto L9 with $t4 at /home/ying/diem/language/diem-framework/modules/Roles.move:233:9+28
    call $t6 := $1_Roles_has_child_VASP_role($t0);
    if ($abort_flag) {
        assume {:print "$at(26,9530,9558)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(6,9):", $t4} $t4 == $t4;
        goto L9;
    }

    // $t1 := $t6 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+69
    assume {:print "$at(26,9489,9558)"} true;
    $t1 := $t6;

    // trace_local[tmp#$1]($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+69
    assume {:print "$track_local(6,9,1):", $t6} $t6 == $t6;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+69
L3:

    // if ($t1) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116
    if ($t1) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116
L4:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116

    // $t7 := true at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116
    $t7 := true;
    assume $IsValid'bool'($t7);

    // $t2 := $t7 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116
    $t2 := $t7;

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116
    assume {:print "$track_local(6,9,2):", $t7} $t7 == $t7;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:36+7
    assume {:print "$at(26,9597,9604)"} true;
L6:

    // $t8 := Roles::has_designated_dealer_role($t0) on_abort goto L9 with $t4 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+35
    call $t8 := $1_Roles_has_designated_dealer_role($t0);
    if ($abort_flag) {
        assume {:print "$at(26,9570,9605)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(6,9):", $t4} $t4 == $t4;
        goto L9;
    }

    // $t2 := $t8 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116
    assume {:print "$at(26,9489,9605)"} true;
    $t2 := $t8;

    // trace_local[tmp#$2]($t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116
    assume {:print "$track_local(6,9,2):", $t8} $t8 == $t8;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116
L7:

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:232:9+116
    assume {:print "$track_return(6,9,0):", $t2} $t2 == $t2;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Roles.move:235:5+1
    assume {:print "$at(26,9610,9611)"} true;
L8:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/Roles.move:235:5+1
    $ret0 := $t2;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Roles.move:235:5+1
L9:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:235:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Roles::get_role_id [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:222:5+172
procedure {:inline 1} $1_Roles_get_role_id(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_Roles_RoleId;
    var $t8: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[a]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:222:5+1
    assume {:print "$at(26,8958,8959)"} true;
    assume {:print "$track_local(6,10,0):", $t0} $t0 == $t0;

    // $t3 := exists<Roles::RoleId>($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:223:16+6
    assume {:print "$at(26,9031,9037)"} true;
    $t3 := $ResourceExists($1_Roles_RoleId_$memory, $t0);

    // $t4 := 0 at /home/ying/diem/language/diem-framework/modules/Roles.move:223:57+8
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:223:35+31
    // >> opaque call: $t5 := Errors::not_published($t4)

    // $t5 := opaque begin: Errors::not_published($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:223:35+31

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:223:35+31
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, 5) at /home/ying/diem/language/diem-framework/modules/Roles.move:223:35+31
    assume $IsEqual'u64'($t5, 5);

    // $t5 := opaque end: Errors::not_published($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:223:35+31

    // trace_local[tmp#$2]($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:223:9+58
    assume {:print "$track_local(6,10,2):", $t5} $t5 == $t5;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/Roles.move:223:9+58
    assume {:print "$track_local(6,10,1):", $t3} $t3 == $t3;

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:223:9+58
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:223:9+58
L1:

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:223:9+58
    assume {:print "$at(26,9024,9082)"} true;
    assume {:print "$track_abort(6,10):", $t5} $t5 == $t5;

    // $t6 := move($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:223:9+58
    $t6 := $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:223:9+58
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Roles.move:224:31+1
    assume {:print "$at(26,9114,9115)"} true;
L0:

    // $t7 := get_global<Roles::RoleId>($t0) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/Roles.move:224:9+13
    if (!$ResourceExists($1_Roles_RoleId_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_Roles_RoleId_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(26,9092,9105)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,10):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t8 := get_field<Roles::RoleId>.role_id($t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:224:9+32
    $t8 := $role_id#$1_Roles_RoleId($t7);

    // trace_return[0]($t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:224:9+32
    assume {:print "$track_return(6,10,0):", $t8} $t8 == $t8;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:225:5+1
    assume {:print "$at(26,9129,9130)"} true;
L2:

    // return $t8 at /home/ying/diem/language/diem-framework/modules/Roles.move:225:5+1
    $ret0 := $t8;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:225:5+1
L3:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:225:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Roles::grant_diem_root_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:59:5+376
procedure {:inline 1} $1_Roles_grant_diem_root_role(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t0: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:59:5+1
    assume {:print "$at(26,2443,2444)"} true;
    assume {:print "$track_local(6,11,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:62:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(26,2521,2552)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Roles.move:62:9+31

    // assume Identical($t1, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/Roles.move:62:9+31
    assume ($t1 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t1) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:62:9+31
    if ($t1) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:62:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:62:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t2));

    // trace_abort($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:62:9+31
    assume {:print "$at(26,2521,2552)"} true;
    assume {:print "$track_abort(6,11):", $t2} $t2 == $t2;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:62:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:62:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Roles.move:62:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:65:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(26,2667,2710)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:65:9+43

    // assume Identical($t3, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:65:9+43
    assume ($t3 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t3) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:65:9+43
    if ($t3) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:65:9+43
L6:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:65:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t2));

    // trace_abort($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:65:9+43
    assume {:print "$at(26,2667,2710)"} true;
    assume {:print "$track_abort(6,11):", $t2} $t2 == $t2;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:65:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:65:9+43
L5:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:65:9+43

    // $t4 := 0 at /home/ying/diem/language/diem-framework/modules/Roles.move:67:32+17
    assume {:print "$at(26,2794,2811)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
    // >> opaque call: Roles::grant_role($t0, $t1)

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:171:9+44
    assume {:print "$at(26,7145,7189)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Implies(Eq<u64>($t4, 0), Eq<address>($t5, CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
    assume {:print "$at(26,2771,2812)"} true;
    assume ($IsEqual'u64'($t4, 0) ==> $IsEqual'address'($t5, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(Eq<u64>($t4, 1), Eq<address>($t5, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
    assume ($IsEqual'u64'($t4, 1) ==> $IsEqual'address'($t5, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // opaque begin: Roles::grant_role($t0, $t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41

    // assume Identical($t6, exists<Roles::RoleId>(Signer::$address_of($t0))) at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
    assume ($t6 == $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0)));

    // if ($t6) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
    if ($t6) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
L8:

    // assume And(exists<Roles::RoleId>(Signer::$address_of($t0)), Eq(6, $t2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
    assume ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0)) && $IsEqual'u8'(6, $t2));

    // trace_abort($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
    assume {:print "$at(26,2771,2812)"} true;
    assume {:print "$track_abort(6,11):", $t2} $t2 == $t2;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
L7:

    // modifies global<Roles::RoleId>(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));
    }

    // assume exists<Roles::RoleId>(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t4);

    // opaque end: Roles::grant_role($t0, $t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:67:9+41

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:68:5+1
    assume {:print "$at(26,2818,2819)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:68:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:68:5+1
L2:

    // abort($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:68:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun Roles::grant_role [verification] at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
procedure {:timeLimit 40} $1_Roles_grant_role$verify(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Roles_RoleId;
    var $t0: int;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#118: $Memory $1_Roles_RoleId;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    assume {:print "$at(26,6830,7029)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:171:9+44
    assume {:print "$at(26,7145,7189)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t4, CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:173:9+85
    assume {:print "$at(26,7248,7333)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t4, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(Eq<u64>($t1, 1), Eq<address>($t4, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:174:9+105
    assume {:print "$at(26,7342,7447)"} true;
    assume ($IsEqual'u64'($t1, 1) ==> $IsEqual'address'($t4, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    assume {:print "$at(26,7701,7731)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @118 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_Roles_RoleId_$memory#118 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+1
    assume {:print "$at(26,6830,6831)"} true;
    assume {:print "$track_local(6,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+1
    assume {:print "$track_local(6,12,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:165:32+27
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(26,6910,6937)"} true;

    // $t5 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:32+27

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:32+27
    assume $IsValid'address'($t5);

    // assume Eq<address>($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:32+27
    assume $IsEqual'address'($t5, $1_Signer_spec_address_of($t0));

    // $t5 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:32+27

    // $t6 := exists<Roles::RoleId>($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:17+6
    $t6 := $ResourceExists($1_Roles_RoleId_$memory, $t5);

    // $t7 := !($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:16+1
    call $t7 := $Not($t6);

    // $t8 := 0 at /home/ying/diem/language/diem-framework/modules/Roles.move:165:88+8
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:165:62+35
    // >> opaque call: $t8 := Errors::already_published($t7)

    // $t9 := opaque begin: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:62+35

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:62+35
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 6) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:62+35
    assume $IsEqual'u64'($t9, 6);

    // $t9 := opaque end: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:62+35

    // trace_local[tmp#$3]($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
    assume {:print "$track_local(6,12,3):", $t9} $t9 == $t9;

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
    assume {:print "$track_local(6,12,2):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
    assume {:print "$at(26,6887,6976)"} true;
    assume {:print "$track_abort(6,12):", $t9} $t9 == $t9;

    // $t10 := move($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
    $t10 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Roles.move:166:17+7
    assume {:print "$at(26,6994,7001)"} true;
L0:

    // $t11 := pack Roles::RoleId($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:26+18
    $t11 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:9+7
    assert {:msg "assert_failed(26,6986,6993): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$t0];

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume {:print "$at(26,6830,7029)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // move_to<Roles::RoleId>($t11, $t0) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/Roles.move:166:9+7
    assume {:print "$at(26,6986,6993)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $t0, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(26,6986,6993)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(6,12):", $t10} $t10 == $t10;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume {:print "$at(11,105582,105664)"} true;
    assert {:msg "assert_failed(11,105582,105664): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assert And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume {:print "$at(11,105776,105915)"} true;
    assert {:msg "assert_failed(11,105776,105915): global memory invariant does not hold"}
      (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume {:print "$at(11,106134,106273)"} true;
    assert {:msg "assert_failed(11,106134,106273): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume {:print "$at(11,106427,106628)"} true;
    assert {:msg "assert_failed(11,106427,106628): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:167:5+1
    assume {:print "$at(26,7028,7029)"} true;
L2:

    // assert Not(exists[@118]<Roles::RoleId>(Signer::$address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/Roles.move:179:9+62
    assume {:print "$at(26,7535,7597)"} true;
    assert {:msg "assert_failed(26,7535,7597): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#118, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:180:9+29
    assume {:print "$at(26,7606,7635)"} true;
    assert {:msg "assert_failed(26,7606,7635): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+48
    assume {:print "$at(26,7644,7692)"} true;
    assert {:msg "assert_failed(26,7644,7692): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+48
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:167:5+1
    assume {:print "$at(26,7028,7029)"} true;
L3:

    // assert exists[@118]<Roles::RoleId>(Signer::$address_of[]($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:168:5+419
    assume {:print "$at(26,7034,7453)"} true;
    assert {:msg "assert_failed(26,7034,7453): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#118, $1_Signer_$address_of($t0));

    // assert And(exists[@118]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(6, $t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:168:5+419
    assert {:msg "assert_failed(26,7034,7453): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#118, $1_Signer_$address_of($t0)) && $IsEqual'u8'(6, $t10));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/Roles.move:168:5+419
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun Roles::grant_treasury_compliance_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:76:5+448
procedure {:inline 1} $1_Roles_grant_treasury_compliance_role(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t0: int;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t1));

    // trace_local[treasury_compliance_account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:76:5+1
    assume {:print "$at(26,3149,3150)"} true;
    assume {:print "$track_local(6,13,0):", $t0} $t0 == $t0;

    // trace_local[dr_account]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:76:5+1
    assume {:print "$track_local(6,13,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:80:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(26,3299,3330)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Roles.move:80:9+31

    // assume Identical($t3, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/Roles.move:80:9+31
    assume ($t3 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:80:9+31
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:80:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t4)) at /home/ying/diem/language/diem-framework/modules/Roles.move:80:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:80:9+31
    assume {:print "$at(26,3299,3330)"} true;
    assume {:print "$track_abort(6,13):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:80:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:80:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Roles.move:80:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:81:9+70
    // >> opaque call: CoreAddresses::assert_treasury_compliance($t0)
    assume {:print "$at(26,3340,3410)"} true;

    // opaque begin: CoreAddresses::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:81:9+70

    // assume Identical($t5, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:81:9+70
    assume ($t5 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:81:9+70
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:81:9+70
L6:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t4)) at /home/ying/diem/language/diem-framework/modules/Roles.move:81:9+70
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:81:9+70
    assume {:print "$at(26,3340,3410)"} true;
    assume {:print "$track_abort(6,13):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:81:9+70
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:81:9+70
L5:

    // opaque end: CoreAddresses::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:81:9+70

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:82:9+28
    // >> opaque call: Roles::assert_diem_root($t1)
    assume {:print "$at(26,3420,3448)"} true;

    // assume Identical($t6, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_diem_root($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:82:9+28
    assume {:print "$at(26,3420,3448)"} true;

    // assume Identical($t7, Or(Or(Or(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Roles.move:82:9+28
    assume ($t7 == (((!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t7) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/Roles.move:82:9+28
    if ($t7) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/Roles.move:82:9+28
L8:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4)), And(Not(exists<Roles::RoleId>($t6)), Eq(5, $t4))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/Roles.move:82:9+28
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'u8'(5, $t4))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:82:9+28
    assume {:print "$at(26,3420,3448)"} true;
    assume {:print "$track_abort(6,13):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:82:9+28
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Roles.move:82:9+28
L7:

    // opaque end: Roles::assert_diem_root($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:82:9+28

    // $t8 := 1 at /home/ying/diem/language/diem-framework/modules/Roles.move:84:49+27
    assume {:print "$at(26,3562,3589)"} true;
    $t8 := 1;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
    // >> opaque call: Roles::grant_role($t0, $t2)

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:171:9+44
    assume {:print "$at(26,7145,7189)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Implies(Eq<u64>($t8, 0), Eq<address>($t9, CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
    assume {:print "$at(26,3522,3590)"} true;
    assume ($IsEqual'u64'($t8, 0) ==> $IsEqual'address'($t9, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(Eq<u64>($t8, 1), Eq<address>($t9, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
    assume ($IsEqual'u64'($t8, 1) ==> $IsEqual'address'($t9, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // opaque begin: Roles::grant_role($t0, $t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68

    // assume Identical($t10, exists<Roles::RoleId>(Signer::$address_of($t0))) at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
    assume ($t10 == $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0)));

    // if ($t10) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
    if ($t10) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
L10:

    // assume And(exists<Roles::RoleId>(Signer::$address_of($t0)), Eq(6, $t4)) at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
    assume ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0)) && $IsEqual'u8'(6, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
    assume {:print "$at(26,3522,3590)"} true;
    assume {:print "$track_abort(6,13):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
    goto L2;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
L9:

    // modifies global<Roles::RoleId>(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));
    }

    // assume exists<Roles::RoleId>(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t8);

    // opaque end: Roles::grant_role($t0, $t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:84:9+68

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:85:5+1
    assume {:print "$at(26,3596,3597)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:85:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:85:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:85:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Roles::has_child_VASP_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:218:5+124
procedure {:inline 1} $1_Roles_has_child_VASP_role(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:218:5+1
    assume {:print "$at(26,8828,8829)"} true;
    assume {:print "$track_local(6,14,0):", $t0} $t0 == $t0;

    // $t1 := 6 at /home/ying/diem/language/diem-framework/modules/Roles.move:219:27+18
    assume {:print "$at(26,8927,8945)"} true;
    $t1 := 6;
    assume $IsValid'u64'($t1);

    // $t2 := Roles::has_role($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/Roles.move:219:9+37
    call $t2 := $1_Roles_has_role($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(26,8909,8946)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(6,14):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:219:9+37
    assume {:print "$track_return(6,14,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:220:5+1
    assume {:print "$at(26,8951,8952)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/Roles.move:220:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:220:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Roles.move:220:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Roles::has_designated_dealer_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:202:5+138
procedure {:inline 1} $1_Roles_has_designated_dealer_role(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:202:5+1
    assume {:print "$at(26,8278,8279)"} true;
    assume {:print "$track_local(6,15,0):", $t0} $t0 == $t0;

    // $t1 := 2 at /home/ying/diem/language/diem-framework/modules/Roles.move:203:27+25
    assume {:print "$at(26,8384,8409)"} true;
    $t1 := 2;
    assume $IsValid'u64'($t1);

    // $t2 := Roles::has_role($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/Roles.move:203:9+44
    call $t2 := $1_Roles_has_role($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(26,8366,8410)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(6,15):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:203:9+44
    assume {:print "$track_return(6,15,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:204:5+1
    assume {:print "$at(26,8415,8416)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/Roles.move:204:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:204:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Roles.move:204:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Roles::has_diem_root_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:194:5+122
procedure {:inline 1} $1_Roles_has_diem_root_role(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:194:5+1
    assume {:print "$at(26,8002,8003)"} true;
    assume {:print "$track_local(6,16,0):", $t0} $t0 == $t0;

    // $t1 := 0 at /home/ying/diem/language/diem-framework/modules/Roles.move:195:27+17
    assume {:print "$at(26,8100,8117)"} true;
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := Roles::has_role($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/Roles.move:195:9+36
    call $t2 := $1_Roles_has_role($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(26,8082,8118)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(6,16):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:195:9+36
    assume {:print "$track_return(6,16,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:196:5+1
    assume {:print "$at(26,8123,8124)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/Roles.move:196:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:196:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Roles.move:196:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Roles::has_parent_VASP_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:214:5+126
procedure {:inline 1} $1_Roles_has_parent_VASP_role(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:214:5+1
    assume {:print "$at(26,8696,8697)"} true;
    assume {:print "$track_local(6,17,0):", $t0} $t0 == $t0;

    // $t1 := 5 at /home/ying/diem/language/diem-framework/modules/Roles.move:215:27+19
    assume {:print "$at(26,8796,8815)"} true;
    $t1 := 5;
    assume $IsValid'u64'($t1);

    // $t2 := Roles::has_role($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/Roles.move:215:9+38
    call $t2 := $1_Roles_has_role($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(26,8778,8816)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(6,17):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:215:9+38
    assume {:print "$track_return(6,17,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:216:5+1
    assume {:print "$at(26,8821,8822)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/Roles.move:216:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:216:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Roles.move:216:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Roles::has_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:188:5+210
procedure {:inline 1} $1_Roles_has_role(_$t0: int, _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: $1_Roles_RoleId;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:188:5+1
    assume {:print "$at(26,7786,7787)"} true;
    assume {:print "$track_local(6,18,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:188:5+1
    assume {:print "$track_local(6,18,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:189:19+27
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(26,7873,7900)"} true;

    // $t4 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:189:19+27

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:189:19+27
    assume $IsValid'address'($t4);

    // assume Eq<address>($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:189:19+27
    assume $IsEqual'address'($t4, $1_Signer_spec_address_of($t0));

    // $t4 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:189:19+27

    // trace_local[addr]($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:189:12+4
    assume {:print "$track_local(6,18,2):", $t4} $t4 == $t4;

    // $t5 := exists<Roles::RoleId>($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+6
    assume {:print "$at(26,7909,7915)"} true;
    $t5 := $ResourceExists($1_Roles_RoleId_$memory, $t4);

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+81
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+81
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+81
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Roles.move:191:37+4
    assume {:print "$at(26,7966,7970)"} true;
L0:

    // $t6 := get_global<Roles::RoleId>($t4) on_abort goto L5 with $t7 at /home/ying/diem/language/diem-framework/modules/Roles.move:191:15+13
    if (!$ResourceExists($1_Roles_RoleId_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($1_Roles_RoleId_$memory, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(26,7944,7957)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(6,18):", $t7} $t7 == $t7;
        goto L5;
    }

    // $t8 := get_field<Roles::RoleId>.role_id($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:191:15+35
    $t8 := $role_id#$1_Roles_RoleId($t6);

    // $t9 := ==($t8, $t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:191:51+2
    $t9 := $IsEqual'u64'($t8, $t1);

    // $t3 := $t9 at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+81
    assume {:print "$at(26,7909,7990)"} true;
    $t3 := $t9;

    // trace_local[tmp#$3]($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+81
    assume {:print "$track_local(6,18,3):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+81
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+81
L2:

    // $t10 := false at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+81
    $t10 := false;
    assume $IsValid'bool'($t10);

    // $t3 := $t10 at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+81
    $t3 := $t10;

    // trace_local[tmp#$3]($t10) at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+81
    assume {:print "$track_local(6,18,3):", $t10} $t10 == $t10;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+81
L3:

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Roles.move:190:8+81
    assume {:print "$track_return(6,18,0):", $t3} $t3 == $t3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:192:5+1
    assume {:print "$at(26,7995,7996)"} true;
L4:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Roles.move:192:5+1
    $ret0 := $t3;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:192:5+1
L5:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:192:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Roles::new_child_vasp_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:151:5+230
procedure {:inline 1} $1_Roles_new_child_vasp_role(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t0: int;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[creating_account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:151:5+1
    assume {:print "$at(26,6355,6356)"} true;
    assume {:print "$track_local(6,22,0):", $t0} $t0 == $t0;

    // trace_local[new_account]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:151:5+1
    assume {:print "$track_local(6,22,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:155:9+41
    // >> opaque call: Roles::assert_parent_vasp_role($t0)
    assume {:print "$at(26,6484,6525)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:155:9+41
    assume {:print "$at(26,6484,6525)"} true;

    // assume Identical($t5, Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:155:9+41
    assume ($t5 == (!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 5)));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:155:9+41
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:155:9+41
L4:

    // assume Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 5), Eq(3, $t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:155:9+41
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 5) && $IsEqual'u8'(3, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:155:9+41
    assume {:print "$at(26,6484,6525)"} true;
    assume {:print "$track_abort(6,22):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:155:9+41
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:155:9+41
L3:

    // opaque end: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:155:9+41

    // $t7 := 6 at /home/ying/diem/language/diem-framework/modules/Roles.move:156:33+18
    assume {:print "$at(26,6559,6577)"} true;
    $t7 := 6;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
    // >> opaque call: Roles::grant_role($t1, $t2)

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:171:9+44
    assume {:print "$at(26,7145,7189)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Implies(Eq<u64>($t7, 0), Eq<address>($t8, CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
    assume {:print "$at(26,6535,6578)"} true;
    assume ($IsEqual'u64'($t7, 0) ==> $IsEqual'address'($t8, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(Eq<u64>($t7, 1), Eq<address>($t8, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
    assume ($IsEqual'u64'($t7, 1) ==> $IsEqual'address'($t8, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // opaque begin: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43

    // assume Identical($t9, exists<Roles::RoleId>(Signer::$address_of($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
    assume ($t9 == $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
L6:

    // assume And(exists<Roles::RoleId>(Signer::$address_of($t1)), Eq(6, $t6)) at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
    assume ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) && $IsEqual'u8'(6, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
    assume {:print "$at(26,6535,6578)"} true;
    assume {:print "$track_abort(6,22):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
L5:

    // modifies global<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));
    }

    // assume exists<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), $t7);

    // opaque end: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:156:9+43

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:157:5+1
    assume {:print "$at(26,6584,6585)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:157:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:157:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:157:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Roles::new_designated_dealer_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:95:5+247
procedure {:inline 1} $1_Roles_new_designated_dealer_role(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t0: int;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[creating_account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:95:5+1
    assume {:print "$at(26,4107,4108)"} true;
    assume {:print "$track_local(6,23,0):", $t0} $t0 == $t0;

    // trace_local[new_account]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:95:5+1
    assume {:print "$track_local(6,23,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:99:9+44
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(26,4243,4287)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:99:9+44
    assume {:print "$at(26,4243,4287)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Roles.move:99:9+44
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:99:9+44
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:99:9+44
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:99:9+44
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:99:9+44
    assume {:print "$at(26,4243,4287)"} true;
    assume {:print "$track_abort(6,23):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:99:9+44
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:99:9+44
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:99:9+44

    // $t7 := 2 at /home/ying/diem/language/diem-framework/modules/Roles.move:100:33+25
    assume {:print "$at(26,4321,4346)"} true;
    $t7 := 2;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
    // >> opaque call: Roles::grant_role($t1, $t2)

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:171:9+44
    assume {:print "$at(26,7145,7189)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Implies(Eq<u64>($t7, 0), Eq<address>($t8, CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
    assume {:print "$at(26,4297,4347)"} true;
    assume ($IsEqual'u64'($t7, 0) ==> $IsEqual'address'($t8, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(Eq<u64>($t7, 1), Eq<address>($t8, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
    assume ($IsEqual'u64'($t7, 1) ==> $IsEqual'address'($t8, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // opaque begin: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50

    // assume Identical($t9, exists<Roles::RoleId>(Signer::$address_of($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
    assume ($t9 == $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
L6:

    // assume And(exists<Roles::RoleId>(Signer::$address_of($t1)), Eq(6, $t6)) at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
    assume ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) && $IsEqual'u8'(6, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
    assume {:print "$at(26,4297,4347)"} true;
    assume {:print "$track_abort(6,23):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
L5:

    // modifies global<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));
    }

    // assume exists<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), $t7);

    // opaque end: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:100:9+50

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:101:5+1
    assume {:print "$at(26,4353,4354)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:101:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:101:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:101:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Roles::new_parent_vasp_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:137:5+235
procedure {:inline 1} $1_Roles_new_parent_vasp_role(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t0: int;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[creating_account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:137:5+1
    assume {:print "$at(26,5796,5797)"} true;
    assume {:print "$track_local(6,24,0):", $t0} $t0 == $t0;

    // trace_local[new_account]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:137:5+1
    assume {:print "$track_local(6,24,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:141:9+44
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(26,5926,5970)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:141:9+44
    assume {:print "$at(26,5926,5970)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Roles.move:141:9+44
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:141:9+44
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:141:9+44
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:141:9+44
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:141:9+44
    assume {:print "$at(26,5926,5970)"} true;
    assume {:print "$track_abort(6,24):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:141:9+44
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:141:9+44
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:141:9+44

    // $t7 := 5 at /home/ying/diem/language/diem-framework/modules/Roles.move:142:33+19
    assume {:print "$at(26,6004,6023)"} true;
    $t7 := 5;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
    // >> opaque call: Roles::grant_role($t1, $t2)

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:171:9+44
    assume {:print "$at(26,7145,7189)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Implies(Eq<u64>($t7, 0), Eq<address>($t8, CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
    assume {:print "$at(26,5980,6024)"} true;
    assume ($IsEqual'u64'($t7, 0) ==> $IsEqual'address'($t8, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(Eq<u64>($t7, 1), Eq<address>($t8, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
    assume ($IsEqual'u64'($t7, 1) ==> $IsEqual'address'($t8, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // opaque begin: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44

    // assume Identical($t9, exists<Roles::RoleId>(Signer::$address_of($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
    assume ($t9 == $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
L6:

    // assume And(exists<Roles::RoleId>(Signer::$address_of($t1)), Eq(6, $t6)) at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
    assume ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) && $IsEqual'u8'(6, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
    assume {:print "$at(26,5980,6024)"} true;
    assume {:print "$track_abort(6,24):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
L5:

    // modifies global<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));
    }

    // assume exists<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), $t7);

    // opaque end: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:142:9+44

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:143:5+1
    assume {:print "$at(26,6030,6031)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:143:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:143:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:143:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Roles::new_validator_operator_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:123:5+239
procedure {:inline 1} $1_Roles_new_validator_operator_role(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t0: int;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[creating_account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:123:5+1
    assume {:print "$at(26,5222,5223)"} true;
    assume {:print "$track_local(6,25,0):", $t0} $t0 == $t0;

    // trace_local[new_account]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:123:5+1
    assume {:print "$track_local(6,25,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:127:9+34
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(26,5359,5393)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:127:9+34
    assume {:print "$at(26,5359,5393)"} true;

    // assume Identical($t5, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t4))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Roles.move:127:9+34
    assume ($t5 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t4)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:127:9+34
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:127:9+34
L4:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t6)), And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:127:9+34
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t6)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t6))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:127:9+34
    assume {:print "$at(26,5359,5393)"} true;
    assume {:print "$track_abort(6,25):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:127:9+34
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:127:9+34
L3:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:127:9+34

    // $t7 := 4 at /home/ying/diem/language/diem-framework/modules/Roles.move:128:33+26
    assume {:print "$at(26,5427,5453)"} true;
    $t7 := 4;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
    // >> opaque call: Roles::grant_role($t1, $t2)

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:171:9+44
    assume {:print "$at(26,7145,7189)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Implies(Eq<u64>($t7, 0), Eq<address>($t8, CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
    assume {:print "$at(26,5403,5454)"} true;
    assume ($IsEqual'u64'($t7, 0) ==> $IsEqual'address'($t8, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(Eq<u64>($t7, 1), Eq<address>($t8, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
    assume ($IsEqual'u64'($t7, 1) ==> $IsEqual'address'($t8, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // opaque begin: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51

    // assume Identical($t9, exists<Roles::RoleId>(Signer::$address_of($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
    assume ($t9 == $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
L6:

    // assume And(exists<Roles::RoleId>(Signer::$address_of($t1)), Eq(6, $t6)) at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
    assume ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) && $IsEqual'u8'(6, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
    assume {:print "$at(26,5403,5454)"} true;
    assume {:print "$track_abort(6,25):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
L5:

    // modifies global<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));
    }

    // assume exists<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), $t7);

    // opaque end: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:128:9+51

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:129:5+1
    assume {:print "$at(26,5460,5461)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:129:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:129:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:129:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Roles::new_validator_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:109:5+220
procedure {:inline 1} $1_Roles_new_validator_role(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t0: int;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[creating_account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:109:5+1
    assume {:print "$at(26,4688,4689)"} true;
    assume {:print "$track_local(6,26,0):", $t0} $t0 == $t0;

    // trace_local[new_account]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:109:5+1
    assume {:print "$track_local(6,26,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:113:9+34
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(26,4815,4849)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:113:9+34
    assume {:print "$at(26,4815,4849)"} true;

    // assume Identical($t5, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t4))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Roles.move:113:9+34
    assume ($t5 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t4)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:113:9+34
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:113:9+34
L4:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t6)), And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:113:9+34
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t6)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t6))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:113:9+34
    assume {:print "$at(26,4815,4849)"} true;
    assume {:print "$track_abort(6,26):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:113:9+34
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:113:9+34
L3:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:113:9+34

    // $t7 := 3 at /home/ying/diem/language/diem-framework/modules/Roles.move:114:33+17
    assume {:print "$at(26,4883,4900)"} true;
    $t7 := 3;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
    // >> opaque call: Roles::grant_role($t1, $t2)

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:171:9+44
    assume {:print "$at(26,7145,7189)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Implies(Eq<u64>($t7, 0), Eq<address>($t8, CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
    assume {:print "$at(26,4859,4901)"} true;
    assume ($IsEqual'u64'($t7, 0) ==> $IsEqual'address'($t8, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(Eq<u64>($t7, 1), Eq<address>($t8, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
    assume ($IsEqual'u64'($t7, 1) ==> $IsEqual'address'($t8, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // opaque begin: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42

    // assume Identical($t9, exists<Roles::RoleId>(Signer::$address_of($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
    assume ($t9 == $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
L6:

    // assume And(exists<Roles::RoleId>(Signer::$address_of($t1)), Eq(6, $t6)) at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
    assume ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) && $IsEqual'u8'(6, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
    assume {:print "$at(26,4859,4901)"} true;
    assume {:print "$track_abort(6,26):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
L5:

    // modifies global<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));
    }

    // assume exists<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), $t7);

    // opaque end: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:114:9+42

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:115:5+1
    assume {:print "$at(26,4907,4908)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:115:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:115:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:115:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:80:10+360
function {:inline} $1_FixedPoint32_spec_multiply_u64(val: int, multiplier: $1_FixedPoint32_FixedPoint32): int {
    if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 0)) then (0) else (if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 1)) then (val) else (if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 2)) then ((val div 2)) else ((18446744073709551615 + 1))))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:206:10+244
function {:inline} $1_FixedPoint32_spec_create_from_rational(numerator: int, denominator: int): $1_FixedPoint32_FixedPoint32 {
    if ($IsEqual'num'(numerator, denominator)) then ($1_FixedPoint32_FixedPoint32(1)) else ($1_FixedPoint32_FixedPoint32(2))
}

// struct FixedPoint32::FixedPoint32 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:19:5+56
type {:datatype} $1_FixedPoint32_FixedPoint32;
function {:constructor} $1_FixedPoint32_FixedPoint32($value: int): $1_FixedPoint32_FixedPoint32;
function {:inline} $Update'$1_FixedPoint32_FixedPoint32'_value(s: $1_FixedPoint32_FixedPoint32, x: int): $1_FixedPoint32_FixedPoint32 {
    $1_FixedPoint32_FixedPoint32(x)
}
function $IsValid'$1_FixedPoint32_FixedPoint32'(s: $1_FixedPoint32_FixedPoint32): bool {
    $IsValid'u64'($value#$1_FixedPoint32_FixedPoint32(s))
}
function {:inline} $IsEqual'$1_FixedPoint32_FixedPoint32'(s1: $1_FixedPoint32_FixedPoint32, s2: $1_FixedPoint32_FixedPoint32): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:93:5+86
function {:inline} $1_Vector_$is_empty'u8'(v: Vec (int)): bool {
    $IsEqual'u64'($1_Vector_$length'u8'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:93:5+86
function {:inline} $1_Vector_$is_empty'vec'u8''(v: Vec (Vec (int))): bool {
    $IsEqual'u64'($1_Vector_$length'vec'u8''(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:93:5+86
function {:inline} $1_Vector_$is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_ValidatorConfig_Config'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:93:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemId_DiemIdDomain'(v: Vec ($1_DiemId_DiemIdDomain)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemId_DiemIdDomain'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:93:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:93:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Event.move:95:9+260
function {:inline} $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'(h1: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', h2: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(h1, h2)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Event.move:95:9+260
function {:inline} $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'(h1: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', h2: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(h1, h2)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:92:5+285
function {:inline} $1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): $1_RegisteredCurrencies_RegisteredCurrencies {
    (var addr := $1_CoreAddresses_$DIEM_ROOT_ADDRESS(); $payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'($ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:92:5+285
function {:inline} $1_DiemConfig_$get'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    (var addr := $1_CoreAddresses_$DIEM_ROOT_ADDRESS(); $payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:92:5+285
function {:inline} $1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): $1_DiemSystem_DiemSystem {
    (var addr := $1_CoreAddresses_$DIEM_ROOT_ADDRESS(); $payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:92:5+285
function {:inline} $1_DiemConfig_$get'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): $1_DiemVMConfig_DiemVMConfig {
    (var addr := $1_CoreAddresses_$DIEM_ROOT_ADDRESS(); $payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:92:5+285
function {:inline} $1_DiemConfig_$get'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): $1_DiemVersion_DiemVersion {
    (var addr := $1_CoreAddresses_$DIEM_ROOT_ADDRESS(); $payload#$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:203:5+119
function {:inline} $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory: $Memory $1_DiemConfig_DisableReconfiguration): bool {
    !$ResourceExists($1_DiemConfig_DisableReconfiguration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:439:9+109
function {:inline} $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration): bool {
    $ResourceExists($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:443:9+124
function {:inline} $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:443:9+124
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:443:9+124
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:443:9+124
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:443:9+124
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:447:9+132
function {:inline} $1_DiemConfig_spec_get_config'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))
}

// struct DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:15:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:constructor} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'($payload: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''_payload(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', x: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies' {
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'($payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s1: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', s2: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';

// struct DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:15:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', x: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption' {
    $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s1: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', s2: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';

// struct DiemConfig::DiemConfig<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:15:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($payload: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', x: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'$1_DiemSystem_DiemSystem'($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';

// struct DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:15:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'($payload: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', x: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig' {
    $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsValid'$1_DiemVMConfig_DiemVMConfig'($payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s1: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', s2: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';

// struct DiemConfig::DiemConfig<DiemVersion::DiemVersion> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:15:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'($payload: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', x: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion' {
    $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $IsValid'$1_DiemVersion_DiemVersion'($payload#$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s1: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', s2: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';

// struct DiemConfig::Configuration at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:28:5+306
type {:datatype} $1_DiemConfig_Configuration;
function {:constructor} $1_DiemConfig_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration;
function {:inline} $Update'$1_DiemConfig_Configuration'_epoch(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration(x, $last_reconfiguration_time#$1_DiemConfig_Configuration(s), $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_last_reconfiguration_time(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), x, $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_events(s: $1_DiemConfig_Configuration, x: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), $last_reconfiguration_time#$1_DiemConfig_Configuration(s), x)
}
function $IsValid'$1_DiemConfig_Configuration'(s: $1_DiemConfig_Configuration): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_Configuration(s))
      && $IsValid'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''($events#$1_DiemConfig_Configuration(s))
}
function {:inline} $IsEqual'$1_DiemConfig_Configuration'(s1: $1_DiemConfig_Configuration, s2: $1_DiemConfig_Configuration): bool {
    s1 == s2
}
var $1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration;

// struct DiemConfig::DisableReconfiguration at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:41:5+40
type {:datatype} $1_DiemConfig_DisableReconfiguration;
function {:constructor} $1_DiemConfig_DisableReconfiguration($dummy_field: bool): $1_DiemConfig_DisableReconfiguration;
function {:inline} $Update'$1_DiemConfig_DisableReconfiguration'_dummy_field(s: $1_DiemConfig_DisableReconfiguration, x: bool): $1_DiemConfig_DisableReconfiguration {
    $1_DiemConfig_DisableReconfiguration(x)
}
function $IsValid'$1_DiemConfig_DisableReconfiguration'(s: $1_DiemConfig_DisableReconfiguration): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_DisableReconfiguration(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DisableReconfiguration'(s1: $1_DiemConfig_DisableReconfiguration, s2: $1_DiemConfig_DisableReconfiguration): bool {
    s1 == s2
}
var $1_DiemConfig_DisableReconfiguration_$memory: $Memory $1_DiemConfig_DisableReconfiguration;

// struct DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:38:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies' {
    $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''(s: $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''(s1: $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies', s2: $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';

// struct DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:38:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';

// struct DiemConfig::ModifyConfigCapability<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:38:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';

// struct DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:38:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig';

// struct DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:38:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion';

// struct DiemConfig::NewEpochEvent at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:23:5+64
type {:datatype} $1_DiemConfig_NewEpochEvent;
function {:constructor} $1_DiemConfig_NewEpochEvent($epoch: int): $1_DiemConfig_NewEpochEvent;
function {:inline} $Update'$1_DiemConfig_NewEpochEvent'_epoch(s: $1_DiemConfig_NewEpochEvent, x: int): $1_DiemConfig_NewEpochEvent {
    $1_DiemConfig_NewEpochEvent(x)
}
function $IsValid'$1_DiemConfig_NewEpochEvent'(s: $1_DiemConfig_NewEpochEvent): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_NewEpochEvent(s))
}
function {:inline} $IsEqual'$1_DiemConfig_NewEpochEvent'(s1: $1_DiemConfig_NewEpochEvent, s2: $1_DiemConfig_NewEpochEvent): bool {
    s1 == s2
}

// struct RegisteredCurrencies::RegisteredCurrencies at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:15:5+101
type {:datatype} $1_RegisteredCurrencies_RegisteredCurrencies;
function {:constructor} $1_RegisteredCurrencies_RegisteredCurrencies($currency_codes: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies;
function {:inline} $Update'$1_RegisteredCurrencies_RegisteredCurrencies'_currency_codes(s: $1_RegisteredCurrencies_RegisteredCurrencies, x: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies {
    $1_RegisteredCurrencies_RegisteredCurrencies(x)
}
function $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'(s: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    $IsValid'vec'vec'u8'''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s))
}
function {:inline} $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'(s1: $1_RegisteredCurrencies_RegisteredCurrencies, s2: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    s1 == s2
}

// fun RegisteredCurrencies::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:5+280
procedure {:inline 1} $1_RegisteredCurrencies_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: Vec (Vec (int));
    var $t8: $1_RegisteredCurrencies_RegisteredCurrencies;
    var $t9: int;
    var $t10: bool;
    var $t0: int;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'': $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'': $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_DiemConfig_Configuration_$memory#346: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:5+1
    assume {:print "$at(25,817,818)"} true;
    assume {:print "$track_local(12,1,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(25,870,901)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31

    // assume Identical($t3, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
    assume ($t3 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t4)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
    assume {:print "$at(25,870,901)"} true;
    assume {:print "$track_abort(12,1):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(25,911,946)"} true;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    assume {:print "$at(25,911,946)"} true;

    // assume Identical($t6, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    assume ($t6 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t6) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    if ($t6) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4)), And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t4))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 0), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'u8'(5, $t4))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 0) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    assume {:print "$at(25,911,946)"} true;
    assume {:print "$track_abort(12,1):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35

    // $t7 := Vector::empty<vector<u8>>() on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:29:52+15
    assume {:print "$at(25,1063,1078)"} true;
    call $t7 := $1_Vector_empty'vec'u8''();
    if ($abort_flag) {
        assume {:print "$at(25,1063,1078)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(12,1):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t8 := pack RegisteredCurrencies::RegisteredCurrencies($t7) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:29:13+56
    $t8 := $1_RegisteredCurrencies_RegisteredCurrencies($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    // >> opaque call: DiemConfig::publish_new_config<RegisteredCurrencies::RegisteredCurrencies>($t0, $t2)
    assume {:print "$at(25,956,1090)"} true;

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: DiemConfig::publish_new_config<RegisteredCurrencies::RegisteredCurrencies>($t0, $t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume {:print "$at(25,956,1090)"} true;

    // assume Identical($t10, Or(Or(Or(Or(DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>(), exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0))), Not(exists<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume ($t10 == (((($1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t10) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    if ($t10) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
L8:

    // assume Or(Or(Or(Or(DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>(), exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0))), And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t4))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume (((($1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'u8'(5, $t4))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume {:print "$at(25,956,1090)"} true;
    assume {:print "$track_abort(12,1):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
L7:

    // @346 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    $1_DiemConfig_Configuration_$memory#346 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'';
        $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'');
    } else {
        $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'';
        $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceUpdate($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'');
    } else {
        $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceRemove($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0));

    // assume DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory);

    // assume Eq<RegisteredCurrencies::RegisteredCurrencies>(DiemConfig::$get<RegisteredCurrencies::RegisteredCurrencies>(), $t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory), $t8);

    // assume Eq<bool>(DiemConfig::spec_has_config[@346](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#346), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::publish_new_config<RegisteredCurrencies::RegisteredCurrencies>($t0, $t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134

    // label L1 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:31:5+1
    assume {:print "$at(25,1096,1097)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:31:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:31:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:31:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun RegisteredCurrencies::add_currency_code [baseline] at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:51:5+449
procedure {:inline 1} $1_RegisteredCurrencies_add_currency_code(_$t0: int, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: $1_RegisteredCurrencies_RegisteredCurrencies;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_DiemConfig_Configuration;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $1_RegisteredCurrencies_RegisteredCurrencies;
    var $t10: Vec (Vec (int));
    var $t11: bool;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($1_RegisteredCurrencies_RegisteredCurrencies);
    var $t16: $Mutation (Vec (Vec (int)));
    var $t17: $1_RegisteredCurrencies_RegisteredCurrencies;
    var $t18: $1_DiemConfig_Configuration;
    var $t19: int;
    var $t20: bool;
    var $t0: int;
    var $t1: Vec (int);
    var $temp_0'$1_DiemConfig_Configuration': $1_DiemConfig_Configuration;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'': $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $temp_0'$1_RegisteredCurrencies_RegisteredCurrencies': $1_RegisteredCurrencies_RegisteredCurrencies;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemConfig_Configuration_$memory#311: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t16));

    // bytecode translation starts here
    // assume Identical($t5, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t5 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t6, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t6 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:51:5+1
    assume {:print "$at(25,1792,1793)"} true;
    assume {:print "$track_local(12,0,0):", $t0} $t0 == $t0;

    // trace_local[currency_code]($t1) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:51:5+1
    assume {:print "$track_local(12,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    // >> opaque call: $t2 := DiemConfig::get<RegisteredCurrencies::RegisteredCurrencies>()
    assume {:print "$at(25,1915,1954)"} true;

    // $t2 := opaque begin: DiemConfig::get<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39

    // assume Identical($t7, Not(exists<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    assume ($t7 == !$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t7) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    if ($t7) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
L5:

    // assume And(Not(exists<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS())), Eq(5, $t8)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    assume (!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(5, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    assume {:print "$at(25,1915,1954)"} true;
    assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
L4:

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    assume $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'($t2);

    // assume Eq<RegisteredCurrencies::RegisteredCurrencies>($t2, DiemConfig::$get<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    assume $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($t2, $1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // $t2 := opaque end: DiemConfig::get<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39

    // trace_local[config]($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:13+6
    assume {:print "$track_local(12,0,2):", $t2} $t2 == $t2;

    // $t9 := copy($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:57:32+6
    assume {:print "$at(25,2003,2009)"} true;
    $t9 := $t2;

    // $t10 := get_field<RegisteredCurrencies::RegisteredCurrencies>.currency_codes($t9) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:57:31+22
    $t10 := $currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($t9);

    // $t11 := Vector::contains<vector<u8>>($t10, $t1) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:57:14+56
    call $t11 := $1_Vector_contains'vec'u8''($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(25,1985,2041)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t12 := !($t11) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:57:13+1
    call $t12 := $Not($t11);

    // $t13 := 0 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:38+28
    assume {:print "$at(25,2080,2108)"} true;
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:13+54
    // >> opaque call: $t10 := Errors::invalid_argument($t9)

    // $t14 := opaque begin: Errors::invalid_argument($t13) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:13+54

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:13+54
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 7) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:13+54
    assume $IsEqual'u64'($t14, 7);

    // $t14 := opaque end: Errors::invalid_argument($t13) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:13+54

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
    assume {:print "$at(25,1964,2119)"} true;
    assume {:print "$track_local(12,0,4):", $t14} $t14 == $t14;

    // trace_local[tmp#$3]($t12) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
    assume {:print "$track_local(12,0,3):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
    assume {:print "$at(25,1964,2119)"} true;
    assume {:print "$track_abort(12,0):", $t14} $t14 == $t14;

    // $t8 := move($t14) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
    $t8 := $t14;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:32+6
    assume {:print "$at(25,2152,2158)"} true;
L0:

    // $t15 := borrow_local($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:32+6
    $t15 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t16 := borrow_field<RegisteredCurrencies::RegisteredCurrencies>.currency_codes($t15) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:27+26
    $t16 := $ChildMutation($t15, 0, $currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($Dereference($t15)));

    // Vector::push_back<vector<u8>>($t16, $t1) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:9+60
    call $t16 := $1_Vector_push_back'vec'u8''($t16, $t1);
    if ($abort_flag) {
        assume {:print "$at(25,2129,2189)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // write_back[Reference($t15).currency_codes]($t16) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:9+60
    $t15 := $UpdateMutation($t15, $Update'$1_RegisteredCurrencies_RegisteredCurrencies'_currency_codes($Dereference($t15), $Dereference($t16)));

    // write_back[LocalRoot($t2)@]($t15) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:9+60
    $t2 := $Dereference($t15);

    // $t17 := move($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:37+6
    assume {:print "$at(25,2227,2233)"} true;
    $t17 := $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    // >> opaque call: DiemConfig::set<RegisteredCurrencies::RegisteredCurrencies>($t0, $t13)

    // assume Identical($t18, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t18 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t19, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t19 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // opaque begin: DiemConfig::set<RegisteredCurrencies::RegisteredCurrencies>($t0, $t17) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume {:print "$at(25,2199,2234)"} true;

    // assume Identical($t20, Or(Or(Not(exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0))), Not(exists<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS()))), And(And(And(And(DiemTimestamp::$is_operating(), DiemConfig::$reconfiguration_enabled()), Gt(DiemTimestamp::spec_now_microseconds(), 0)), Lt(select DiemConfig::Configuration.epoch($t18), 18446744073709551615)), Lt($t19, select DiemConfig::Configuration.last_reconfiguration_time($t18))))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume ($t20 == ((!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0)) || !$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || (((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > 0)) && ($epoch#$1_DiemConfig_Configuration($t18) < 18446744073709551615)) && ($t19 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t18)))));

    // if ($t20) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    if ($t20) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
L7:

    // assume Or(Or(And(Not(exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0))), Eq(4, $t8)), And(Not(exists<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS())), Eq(5, $t8))), And(And(And(And(And(DiemTimestamp::$is_operating(), DiemConfig::$reconfiguration_enabled()), Gt(DiemTimestamp::spec_now_microseconds(), 0)), Lt(select DiemConfig::Configuration.epoch($t18), 18446744073709551615)), Lt($t19, select DiemConfig::Configuration.last_reconfiguration_time($t18))), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume (((!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t8)) || (!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(5, $t8))) || ((((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > 0)) && ($epoch#$1_DiemConfig_Configuration($t18) < 18446744073709551615)) && ($t19 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t18))) && $IsEqual'u8'(1, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume {:print "$at(25,2199,2234)"} true;
    assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
L6:

    // @311 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    $1_DiemConfig_Configuration_$memory#311 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_Configuration';
        $1_DiemConfig_Configuration_$memory := $ResourceUpdate($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_Configuration');
    } else {
        $1_DiemConfig_Configuration_$memory := $ResourceRemove($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'';
        $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'');
    } else {
        $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory);

    // assume Eq<RegisteredCurrencies::RegisteredCurrencies>(DiemConfig::$get<RegisteredCurrencies::RegisteredCurrencies>(), $t17) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory), $t17);

    // assume Eq<bool>(DiemConfig::spec_has_config[@311](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#311), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::set<RegisteredCurrencies::RegisteredCurrencies>($t0, $t17) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35

    // label L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:62:5+1
    assume {:print "$at(25,2240,2241)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:62:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:62:5+1
L3:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:62:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+134
function {:inline} $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+134
function {:inline} $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+267
function {:inline} $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    (var addr := $1_CoreAddresses_$CURRENCY_INFO_ADDRESS(); ($ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, addr) && $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+267
function {:inline} $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    (var addr := $1_CoreAddresses_$CURRENCY_INFO_ADDRESS(); ($ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, addr) && $is_synthetic#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+88
function {:inline} $1_Diem_$value'$1_XUS_XUS'(coin: $1_Diem_Diem'$1_XUS_XUS'): int {
    $value#$1_Diem_Diem'$1_XUS_XUS'(coin)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+88
function {:inline} $1_Diem_$value'#0'(coin: $1_Diem_Diem'#0'): int {
    $value#$1_Diem_Diem'#0'(coin)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1418:10+142
function {:inline} $1_Diem_spec_scaling_factor'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): int {
    $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1442:10+107
function {:inline} $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1803:9+133
function {:inline} $1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1803:9+133
function {:inline} $1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1803:9+133
function {:inline} $1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1808:9+153
function {:inline} $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): $1_Diem_CurrencyInfo'#0' {
    $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1813:9+156
function {:inline} $1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0', value: int): int {
    $1_FixedPoint32_spec_multiply_u64(value, $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1817:9+168
function {:inline} $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1833:9+130
function {:inline} $1_Diem_spec_make_preburn'#0'(amount: int): $1_Diem_Preburn'#0' {
    $1_Diem_Preburn'#0'($1_Diem_Diem'#0'(amount))
}

// struct Diem::Diem<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+126
type {:datatype} $1_Diem_Diem'$1_XUS_XUS';
function {:constructor} $1_Diem_Diem'$1_XUS_XUS'($value: int): $1_Diem_Diem'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Diem'$1_XUS_XUS''_value(s: $1_Diem_Diem'$1_XUS_XUS', x: int): $1_Diem_Diem'$1_XUS_XUS' {
    $1_Diem_Diem'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Diem'$1_XUS_XUS''(s: $1_Diem_Diem'$1_XUS_XUS'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XUS_XUS''(s1: $1_Diem_Diem'$1_XUS_XUS', s2: $1_Diem_Diem'$1_XUS_XUS'): bool {
    s1 == s2
}

// struct Diem::Diem<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+126
type {:datatype} $1_Diem_Diem'$1_XDX_XDX';
function {:constructor} $1_Diem_Diem'$1_XDX_XDX'($value: int): $1_Diem_Diem'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Diem'$1_XDX_XDX''_value(s: $1_Diem_Diem'$1_XDX_XDX', x: int): $1_Diem_Diem'$1_XDX_XDX' {
    $1_Diem_Diem'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Diem'$1_XDX_XDX''(s: $1_Diem_Diem'$1_XDX_XDX'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XDX_XDX''(s1: $1_Diem_Diem'$1_XDX_XDX', s2: $1_Diem_Diem'$1_XDX_XDX'): bool {
    s1 == s2
}

// struct Diem::Diem<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+126
type {:datatype} $1_Diem_Diem'#0';
function {:constructor} $1_Diem_Diem'#0'($value: int): $1_Diem_Diem'#0';
function {:inline} $Update'$1_Diem_Diem'#0''_value(s: $1_Diem_Diem'#0', x: int): $1_Diem_Diem'#0' {
    $1_Diem_Diem'#0'(x)
}
function $IsValid'$1_Diem_Diem'#0''(s: $1_Diem_Diem'#0'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'#0''(s1: $1_Diem_Diem'#0', s2: $1_Diem_Diem'#0'): bool {
    s1 == s2
}

// struct Diem::BurnCapability<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:37:5+50
type {:datatype} $1_Diem_BurnCapability'$1_XUS_XUS';
function {:constructor} $1_Diem_BurnCapability'$1_XUS_XUS'($dummy_field: bool): $1_Diem_BurnCapability'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XUS_XUS''_dummy_field(s: $1_Diem_BurnCapability'$1_XUS_XUS', x: bool): $1_Diem_BurnCapability'$1_XUS_XUS' {
    $1_Diem_BurnCapability'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''(s: $1_Diem_BurnCapability'$1_XUS_XUS'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XUS_XUS''(s1: $1_Diem_BurnCapability'$1_XUS_XUS', s2: $1_Diem_BurnCapability'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_BurnCapability'$1_XUS_XUS';

// struct Diem::BurnCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:37:5+50
type {:datatype} $1_Diem_BurnCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_BurnCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_BurnCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_BurnCapability'$1_XDX_XDX', x: bool): $1_Diem_BurnCapability'$1_XDX_XDX' {
    $1_Diem_BurnCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''(s: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XDX_XDX''(s1: $1_Diem_BurnCapability'$1_XDX_XDX', s2: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_BurnCapability'$1_XDX_XDX';

// struct Diem::BurnCapability<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:37:5+50
type {:datatype} $1_Diem_BurnCapability'#0';
function {:constructor} $1_Diem_BurnCapability'#0'($dummy_field: bool): $1_Diem_BurnCapability'#0';
function {:inline} $Update'$1_Diem_BurnCapability'#0''_dummy_field(s: $1_Diem_BurnCapability'#0', x: bool): $1_Diem_BurnCapability'#0' {
    $1_Diem_BurnCapability'#0'(x)
}
function $IsValid'$1_Diem_BurnCapability'#0''(s: $1_Diem_BurnCapability'#0'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'#0''(s1: $1_Diem_BurnCapability'#0', s2: $1_Diem_BurnCapability'#0'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'#0'_$memory: $Memory $1_Diem_BurnCapability'#0';

// struct Diem::BurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:58:5+323
type {:datatype} $1_Diem_BurnEvent;
function {:constructor} $1_Diem_BurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_BurnEvent;
function {:inline} $Update'$1_Diem_BurnEvent'_amount(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent(x, $currency_code#$1_Diem_BurnEvent(s), $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_currency_code(s: $1_Diem_BurnEvent, x: Vec (int)): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), x, $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_preburn_address(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), $currency_code#$1_Diem_BurnEvent(s), x)
}
function $IsValid'$1_Diem_BurnEvent'(s: $1_Diem_BurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_BurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_BurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_BurnEvent'(s1: $1_Diem_BurnEvent, s2: $1_Diem_BurnEvent): bool {
    s1 == s2
}

// struct Diem::CancelBurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:83:5+327
type {:datatype} $1_Diem_CancelBurnEvent;
function {:constructor} $1_Diem_CancelBurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_CancelBurnEvent;
function {:inline} $Update'$1_Diem_CancelBurnEvent'_amount(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent(x, $currency_code#$1_Diem_CancelBurnEvent(s), $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_currency_code(s: $1_Diem_CancelBurnEvent, x: Vec (int)): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), x, $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_preburn_address(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), $currency_code#$1_Diem_CancelBurnEvent(s), x)
}
function $IsValid'$1_Diem_CancelBurnEvent'(s: $1_Diem_CancelBurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_CancelBurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CancelBurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_CancelBurnEvent'(s1: $1_Diem_CancelBurnEvent, s2: $1_Diem_CancelBurnEvent): bool {
    s1 == s2
}

// struct Diem::CurrencyInfo<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2300
type {:datatype} $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:constructor} $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_total_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_currency_code(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_can_mint(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_mint_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s1: $1_Diem_CurrencyInfo'$1_XUS_XUS', s2: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';

// struct Diem::CurrencyInfo<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2300
type {:datatype} $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:constructor} $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_total_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_currency_code(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_can_mint(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_mint_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s1: $1_Diem_CurrencyInfo'$1_XDX_XDX', s2: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';

// struct Diem::CurrencyInfo<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2300
type {:datatype} $1_Diem_CurrencyInfo'#0';
function {:constructor} $1_Diem_CurrencyInfo'#0'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#0';
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_total_value(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'(x, $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_preburn_value(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'#0', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_is_synthetic(s: $1_Diem_CurrencyInfo'#0', x: bool): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_scaling_factor(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), x, $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_fractional_part(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), x, $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_currency_code(s: $1_Diem_CurrencyInfo'#0', x: Vec (int)): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), x, $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_can_mint(s: $1_Diem_CurrencyInfo'#0', x: bool): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), x, $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_mint_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), x, $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_burn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), x, $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_preburn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_cancel_burn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'#0''(s: $1_Diem_CurrencyInfo'#0'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'#0''(s1: $1_Diem_CurrencyInfo'#0', s2: $1_Diem_CurrencyInfo'#0'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0';

// struct Diem::MintCapability<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+50
type {:datatype} $1_Diem_MintCapability'$1_XUS_XUS';
function {:constructor} $1_Diem_MintCapability'$1_XUS_XUS'($dummy_field: bool): $1_Diem_MintCapability'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_MintCapability'$1_XUS_XUS''_dummy_field(s: $1_Diem_MintCapability'$1_XUS_XUS', x: bool): $1_Diem_MintCapability'$1_XUS_XUS' {
    $1_Diem_MintCapability'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XUS_XUS''(s: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XUS_XUS''(s1: $1_Diem_MintCapability'$1_XUS_XUS', s2: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_MintCapability'$1_XUS_XUS';

// struct Diem::MintCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+50
type {:datatype} $1_Diem_MintCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_MintCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_MintCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_MintCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_MintCapability'$1_XDX_XDX', x: bool): $1_Diem_MintCapability'$1_XDX_XDX' {
    $1_Diem_MintCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''(s: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XDX_XDX''(s1: $1_Diem_MintCapability'$1_XDX_XDX', s2: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_MintCapability'$1_XDX_XDX';

// struct Diem::MintCapability<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+50
type {:datatype} $1_Diem_MintCapability'#0';
function {:constructor} $1_Diem_MintCapability'#0'($dummy_field: bool): $1_Diem_MintCapability'#0';
function {:inline} $Update'$1_Diem_MintCapability'#0''_dummy_field(s: $1_Diem_MintCapability'#0', x: bool): $1_Diem_MintCapability'#0' {
    $1_Diem_MintCapability'#0'(x)
}
function $IsValid'$1_Diem_MintCapability'#0''(s: $1_Diem_MintCapability'#0'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'#0''(s1: $1_Diem_MintCapability'#0', s2: $1_Diem_MintCapability'#0'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'#0'_$memory: $Memory $1_Diem_MintCapability'#0';

// struct Diem::MintEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:44:5+199
type {:datatype} $1_Diem_MintEvent;
function {:constructor} $1_Diem_MintEvent($amount: int, $currency_code: Vec (int)): $1_Diem_MintEvent;
function {:inline} $Update'$1_Diem_MintEvent'_amount(s: $1_Diem_MintEvent, x: int): $1_Diem_MintEvent {
    $1_Diem_MintEvent(x, $currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $Update'$1_Diem_MintEvent'_currency_code(s: $1_Diem_MintEvent, x: Vec (int)): $1_Diem_MintEvent {
    $1_Diem_MintEvent($amount#$1_Diem_MintEvent(s), x)
}
function $IsValid'$1_Diem_MintEvent'(s: $1_Diem_MintEvent): bool {
    $IsValid'u64'($amount#$1_Diem_MintEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $IsEqual'$1_Diem_MintEvent'(s1: $1_Diem_MintEvent, s2: $1_Diem_MintEvent): bool {
    s1 == s2
}

// struct Diem::Preburn<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+232
type {:datatype} $1_Diem_Preburn'$1_XUS_XUS';
function {:constructor} $1_Diem_Preburn'$1_XUS_XUS'($to_burn: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Preburn'$1_XUS_XUS''_to_burn(s: $1_Diem_Preburn'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS' {
    $1_Diem_Preburn'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XUS_XUS''(s: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($to_burn#$1_Diem_Preburn'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XUS_XUS''(s1: $1_Diem_Preburn'$1_XUS_XUS', s2: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XUS_XUS'_$memory: $Memory $1_Diem_Preburn'$1_XUS_XUS';

// struct Diem::Preburn<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+232
type {:datatype} $1_Diem_Preburn'$1_XDX_XDX';
function {:constructor} $1_Diem_Preburn'$1_XDX_XDX'($to_burn: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Preburn'$1_XDX_XDX''_to_burn(s: $1_Diem_Preburn'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX' {
    $1_Diem_Preburn'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XDX_XDX''(s: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($to_burn#$1_Diem_Preburn'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XDX_XDX''(s1: $1_Diem_Preburn'$1_XDX_XDX', s2: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XDX_XDX'_$memory: $Memory $1_Diem_Preburn'$1_XDX_XDX';

// struct Diem::Preburn<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+232
type {:datatype} $1_Diem_Preburn'#0';
function {:constructor} $1_Diem_Preburn'#0'($to_burn: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0';
function {:inline} $Update'$1_Diem_Preburn'#0''_to_burn(s: $1_Diem_Preburn'#0', x: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0' {
    $1_Diem_Preburn'#0'(x)
}
function $IsValid'$1_Diem_Preburn'#0''(s: $1_Diem_Preburn'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($to_burn#$1_Diem_Preburn'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'#0''(s1: $1_Diem_Preburn'#0', s2: $1_Diem_Preburn'#0'): bool {
    s1 == s2
}
var $1_Diem_Preburn'#0'_$memory: $Memory $1_Diem_Preburn'#0';

// struct Diem::PreburnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:70:5+355
type {:datatype} $1_Diem_PreburnEvent;
function {:constructor} $1_Diem_PreburnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_PreburnEvent;
function {:inline} $Update'$1_Diem_PreburnEvent'_amount(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent(x, $currency_code#$1_Diem_PreburnEvent(s), $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_currency_code(s: $1_Diem_PreburnEvent, x: Vec (int)): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), x, $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_preburn_address(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), $currency_code#$1_Diem_PreburnEvent(s), x)
}
function $IsValid'$1_Diem_PreburnEvent'(s: $1_Diem_PreburnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_PreburnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_PreburnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnEvent'(s1: $1_Diem_PreburnEvent, s2: $1_Diem_PreburnEvent): bool {
    s1 == s2
}

// struct Diem::PreburnQueue<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:194:5+144
type {:datatype} $1_Diem_PreburnQueue'$1_XUS_XUS';
function {:constructor} $1_Diem_PreburnQueue'$1_XUS_XUS'($preburns: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $1_Diem_PreburnQueue'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_PreburnQueue'$1_XUS_XUS''_preburns(s: $1_Diem_PreburnQueue'$1_XUS_XUS', x: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $1_Diem_PreburnQueue'$1_XUS_XUS' {
    $1_Diem_PreburnQueue'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''(s: $1_Diem_PreburnQueue'$1_XUS_XUS'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'$1_XUS_XUS''(s1: $1_Diem_PreburnQueue'$1_XUS_XUS', s2: $1_Diem_PreburnQueue'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';

// struct Diem::PreburnQueue<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:194:5+144
type {:datatype} $1_Diem_PreburnQueue'$1_XDX_XDX';
function {:constructor} $1_Diem_PreburnQueue'$1_XDX_XDX'($preburns: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $1_Diem_PreburnQueue'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_PreburnQueue'$1_XDX_XDX''_preburns(s: $1_Diem_PreburnQueue'$1_XDX_XDX', x: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $1_Diem_PreburnQueue'$1_XDX_XDX' {
    $1_Diem_PreburnQueue'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_PreburnQueue'$1_XDX_XDX''(s: $1_Diem_PreburnQueue'$1_XDX_XDX'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'$1_XDX_XDX''(s1: $1_Diem_PreburnQueue'$1_XDX_XDX', s2: $1_Diem_PreburnQueue'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory: $Memory $1_Diem_PreburnQueue'$1_XDX_XDX';

// struct Diem::PreburnQueue<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:194:5+144
type {:datatype} $1_Diem_PreburnQueue'#0';
function {:constructor} $1_Diem_PreburnQueue'#0'($preburns: Vec ($1_Diem_PreburnWithMetadata'#0')): $1_Diem_PreburnQueue'#0';
function {:inline} $Update'$1_Diem_PreburnQueue'#0''_preburns(s: $1_Diem_PreburnQueue'#0', x: Vec ($1_Diem_PreburnWithMetadata'#0')): $1_Diem_PreburnQueue'#0' {
    $1_Diem_PreburnQueue'#0'(x)
}
function $IsValid'$1_Diem_PreburnQueue'#0''(s: $1_Diem_PreburnQueue'#0'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''($preburns#$1_Diem_PreburnQueue'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'#0''(s1: $1_Diem_PreburnQueue'#0', s2: $1_Diem_PreburnQueue'#0'): bool {
    s1 == s2
}
var $1_Diem_PreburnQueue'#0'_$memory: $Memory $1_Diem_PreburnQueue'#0';

// struct Diem::PreburnWithMetadata<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:178:5+120
type {:datatype} $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
function {:constructor} $1_Diem_PreburnWithMetadata'$1_XUS_XUS'($preburn: $1_Diem_Preburn'$1_XUS_XUS', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''_preburn(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    $1_Diem_PreburnWithMetadata'$1_XUS_XUS'(x, $metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''_metadata(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', x: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    $1_Diem_PreburnWithMetadata'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(s1: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', s2: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    s1 == s2
}

// struct Diem::PreburnWithMetadata<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:178:5+120
type {:datatype} $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
function {:constructor} $1_Diem_PreburnWithMetadata'$1_XDX_XDX'($preburn: $1_Diem_Preburn'$1_XDX_XDX', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''_preburn(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', x: $1_Diem_Preburn'$1_XDX_XDX'): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    $1_Diem_PreburnWithMetadata'$1_XDX_XDX'(x, $metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''_metadata(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', x: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    $1_Diem_PreburnWithMetadata'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(s1: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', s2: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    s1 == s2
}

// struct Diem::PreburnWithMetadata<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:178:5+120
type {:datatype} $1_Diem_PreburnWithMetadata'#0';
function {:constructor} $1_Diem_PreburnWithMetadata'#0'($preburn: $1_Diem_Preburn'#0', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'#0';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#0''_preburn(s: $1_Diem_PreburnWithMetadata'#0', x: $1_Diem_Preburn'#0'): $1_Diem_PreburnWithMetadata'#0' {
    $1_Diem_PreburnWithMetadata'#0'(x, $metadata#$1_Diem_PreburnWithMetadata'#0'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#0''_metadata(s: $1_Diem_PreburnWithMetadata'#0', x: Vec (int)): $1_Diem_PreburnWithMetadata'#0' {
    $1_Diem_PreburnWithMetadata'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'#0''(s: $1_Diem_PreburnWithMetadata'#0'): bool {
    $IsValid'$1_Diem_Preburn'#0''($preburn#$1_Diem_PreburnWithMetadata'#0'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'#0''(s1: $1_Diem_PreburnWithMetadata'#0', s2: $1_Diem_PreburnWithMetadata'#0'): bool {
    s1 == s2
}

// struct Diem::ToXDXExchangeRateUpdateEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:94:5+424
type {:datatype} $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:constructor} $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code: Vec (int), $new_to_xdx_exchange_rate: int): $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_currency_code(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: Vec (int)): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent(x, $new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_new_to_xdx_exchange_rate(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: int): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s), x)
}
function $IsValid'$1_Diem_ToXDXExchangeRateUpdateEvent'(s: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
      && $IsValid'u64'($new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(s1: $1_Diem_ToXDXExchangeRateUpdateEvent, s2: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    s1 == s2
}

// fun Diem::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
procedure {:inline 1} $1_Diem_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+1
    assume {:print "$at(10,12665,12666)"} true;
    assume {:print "$track_local(13,16,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(10,12733,12764)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31

    // assume Identical($t3, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    assume ($t3 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    assume {:print "$at(10,12733,12764)"} true;
    assume {:print "$track_abort(13,16):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(10,12808,12851)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43

    // assume Identical($t5, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    assume ($t5 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
L6:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    assume {:print "$at(10,12808,12851)"} true;
    assume {:print "$track_abort(13,16):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
L5:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // RegisteredCurrencies::initialize($t0) on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:254:9+44
    assume {:print "$at(10,12861,12905)"} true;
    call $1_RegisteredCurrencies_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(10,12861,12905)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(13,16):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:255:5+1
    assume {:print "$at(10,12911,12912)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:255:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:255:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:255:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::value<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+88
procedure {:inline 1} $1_Diem_value'$1_XUS_XUS'(_$t0: $1_Diem_Diem'$1_XUS_XUS') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+1
    assume {:print "$at(10,54510,54511)"} true;
    assume {:print "$track_local(13,39,0):", $t0} $t0 == $t0;

    // $t1 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1118:9+10
    assume {:print "$at(10,54582,54592)"} true;
    $t1 := $value#$1_Diem_Diem'$1_XUS_XUS'($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1118:9+10
    assume {:print "$track_return(13,39,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1119:5+1
    assume {:print "$at(10,54597,54598)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1119:5+1
    $ret0 := $t1;
    return;

}

// fun Diem::value<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+88
procedure {:inline 1} $1_Diem_value'#0'(_$t0: $1_Diem_Diem'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+1
    assume {:print "$at(10,54510,54511)"} true;
    assume {:print "$track_local(13,39,0):", $t0} $t0 == $t0;

    // $t1 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1118:9+10
    assume {:print "$at(10,54582,54592)"} true;
    $t1 := $value#$1_Diem_Diem'#0'($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1118:9+10
    assume {:print "$track_return(13,39,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1119:5+1
    assume {:print "$at(10,54597,54598)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1119:5+1
    $ret0 := $t1;
    return;

}

// fun Diem::cancel_burn<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+549
procedure {:inline 1} $1_Diem_cancel_burn'#0'(_$t0: int, _$t1: int, _$t2: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: $1_Diem_CurrencyInfo'#0';
    var $t7: $1_Diem_CurrencyInfo'#0';
    var $t8: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t9: $1_Diem_CurrencyInfo'#0';
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: Vec (int);
    var $t12: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_BurnCapability'#0';
    var $t20: $1_Diem_CurrencyInfo'#0';
    var $t21: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t23: $1_Diem_CurrencyInfo'#0';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t26: $1_Diem_Diem'#0';
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t6, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:378:9+91
    assume {:print "$at(10,18439,18530)"} true;
    assume ($t6 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t7, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1023:9+82
    assume {:print "$at(10,49950,50032)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t8, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t8 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t9, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1032:9+82
    assume {:print "$at(10,50391,50473)"} true;
    assume ($t9 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+42
    assume {:print "$at(10,50788,50830)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t11, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1040:9+51
    assume {:print "$at(10,50839,50890)"} true;
    assume ($t11 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, select Diem::CurrencyInfo.cancel_burn_events($t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1041:9+37
    assume {:print "$at(10,50899,50936)"} true;
    assume ($t12 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t10));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$at(10,17858,17859)"} true;
    assume {:print "$track_local(13,9,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$track_local(13,9,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$track_local(13,9,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,18064,18094)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30

    // assume Identical($t13, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume ($t13 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t13) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    if ($t13) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
L5:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t14)) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t14));

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume {:print "$at(10,18064,18094)"} true;
    assume {:print "$track_abort(13,9):", $t14} $t14 == $t14;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
L4:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    // >> opaque call: $t6 := Signer::address_of($t0)
    assume {:print "$at(10,18115,18142)"} true;

    // $t15 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume $IsValid'address'($t15);

    // assume Eq<address>($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume $IsEqual'address'($t15, $1_Signer_spec_address_of($t0));

    // $t15 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27

    // trace_local[addr]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:13+4
    assume {:print "$track_local(13,9,3):", $t15} $t15 == $t15;

    // $t16 := exists<Diem::BurnCapability<#0>>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:16+6
    assume {:print "$at(10,18159,18165)"} true;
    $t16 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t15);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:84+16
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45
    // >> opaque call: $t9 := Errors::requires_capability($t8)

    // $t18 := opaque begin: Errors::requires_capability($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45
    assume $IsEqual'u64'($t18, 4);

    // $t18 := opaque end: Errors::requires_capability($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45

    // trace_local[tmp#$5]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$track_local(13,9,5):", $t18} $t18 == $t18;

    // trace_local[tmp#$4]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$track_local(13,9,4):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
L1:

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$at(10,18152,18245)"} true;
    assume {:print "$track_abort(13,9):", $t18} $t18 == $t18;

    // $t14 := move($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    $t14 := $t18;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:372:13+15
    assume {:print "$at(10,18296,18311)"} true;
L0:

    // $t19 := get_global<Diem::BurnCapability<#0>>($t15) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/Diem.move:373:13+13
    assume {:print "$at(10,18325,18338)"} true;
    if (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t15)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $t15);
    }
    if ($abort_flag) {
        assume {:print "$at(10,18325,18338)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(13,9):", $t14} $t14 == $t14;
        goto L3;
    }

    // assume Identical($t20, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1023:9+82
    assume {:print "$at(10,49950,50032)"} true;
    assume ($t20 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t21, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t21 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t22, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1032:9+82
    assume {:print "$at(10,50391,50473)"} true;
    assume ($t22 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+42
    assume {:print "$at(10,50788,50830)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1040:9+51
    assume {:print "$at(10,50839,50890)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.cancel_burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1041:9+37
    assume {:print "$at(10,50899,50936)"} true;
    assume ($t25 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t23));

    // $t26 := Diem::cancel_burn_with_capability<#0>($t1, $t19, $t2) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/Diem.move:371:9+146
    assume {:print "$at(10,18255,18401)"} true;
    call $t26 := $1_Diem_cancel_burn_with_capability'#0'($t1, $t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,18255,18401)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(13,9):", $t14} $t14 == $t14;
        goto L3;
    }

    // trace_return[0]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:371:9+146
    assume {:print "$track_return(13,9,0):", $t26} $t26 == $t26;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    assume {:print "$at(10,18406,18407)"} true;
L2:

    // return $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    $ret0 := $t26;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
L3:

    // abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun Diem::cancel_burn_with_capability<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:981:5+1201
procedure {:inline 1} $1_Diem_cancel_burn_with_capability'#0'(_$t0: int, _$t1: $1_Diem_BurnCapability'#0', _$t2: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t5: bool;
    var $t6: int;
    var $t7: $1_Diem_Diem'#0';
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t15: $1_Diem_PreburnWithMetadata'#0';
    var $t16: bool;
    var $t17: int;
    var $t18: $1_Diem_Preburn'#0';
    var $t19: Vec (int);
    var $t20: $1_Diem_Diem'#0';
    var $t21: Vec (int);
    var $t22: bool;
    var $t23: int;
    var $t24: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t32: bool;
    var $t33: bool;
    var $t34: $Mutation ($1_Event_EventHandle'$1_Diem_CancelBurnEvent');
    var $t35: $1_Diem_CancelBurnEvent;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_PreburnQueue'#0'_$memory#184: $Memory $1_Diem_PreburnQueue'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t31));
    assume IsEmptyVec(p#$Mutation($t34));

    // bytecode translation starts here
    // assume Identical($t8, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1023:9+82
    assume {:print "$at(10,49950,50032)"} true;
    assume ($t8 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume Identical($t10, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1032:9+82
    assume {:print "$at(10,50391,50473)"} true;
    assume ($t10 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+42
    assume {:print "$at(10,50788,50830)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1040:9+51
    assume {:print "$at(10,50839,50890)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.cancel_burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1041:9+37
    assume {:print "$at(10,50899,50936)"} true;
    assume ($t13 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:981:5+1
    assume {:print "$at(10,48114,48115)"} true;
    assume {:print "$track_local(13,10,0):", $t0} $t0 == $t0;

    // trace_local[_capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:981:5+1
    assume {:print "$track_local(13,10,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:981:5+1
    assume {:print "$track_local(13,10,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    // >> opaque call: $t8 := Diem::remove_preburn_from_queue<#0>($t0, $t2)
    assume {:print "$at(10,48462,48522)"} true;

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // $t15 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume {:print "$at(10,48462,48522)"} true;

    // assume Identical($t16, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume ($t16 == (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t14, i)))), $t2)))))));

    // if ($t16) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
L9:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t17)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) && $IsEqual'u8'(5, $t17)) || ((var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t14, i)))), $t2))))) && $IsEqual'u8'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume {:print "$at(10,48462,48522)"} true;
    assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
L8:

    // @184 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    $1_Diem_PreburnQueue'#0'_$memory#184 := $1_Diem_PreburnQueue'#0'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t0);
    }

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t15);

    // assume Implies(exists[@184]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#184, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t15))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t15))), $t2);

    // $t15 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60

    // ($t18, $t19) := unpack Diem::PreburnWithMetadata<#0>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:13+64
    $t18 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t15);
    $t19 := $metadata#$1_Diem_PreburnWithMetadata'#0'($t15);

    // destroy($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:74+1

    // $t20 := unpack Diem::Preburn<#0>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:43+19
    $t20 := $to_burn#$1_Diem_Preburn'#0'($t18);

    // trace_local[to_burn]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:53+7
    assume {:print "$track_local(13,10,7):", $t20} $t20 == $t20;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    // >> opaque call: $t12 := Diem::currency_code<#0>()
    assume {:print "$at(10,48586,48611)"} true;

    // $t21 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25

    // assume Identical($t22, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume ($t22 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t22) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    if ($t22) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
L11:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume {:print "$at(10,48586,48611)"} true;
    assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
L10:

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume $IsValid'vec'u8''($t21);

    // assume Eq<vector<u8>>($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume $IsEqual'vec'u8''($t21, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t21 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25

    // trace_local[currency_code]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:13+13
    assume {:print "$track_local(13,10,3):", $t21} $t21 == $t21;

    // $t23 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:992:62+38
    assume {:print "$at(10,48674,48712)"} true;
    call $t23 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,48674,48712)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t24 := borrow_global<Diem::CurrencyInfo<#0>>($t23) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:992:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t24 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(10,48632,48649)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[info]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:992:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t24);
    assume {:print "$track_local(13,10,4):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t25 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:16+18
    assume {:print "$at(10,48730,48748)"} true;
    $t25 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t26 := >=($t25, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:35+2
    call $t26 := $Ge($t25, $t2);

    // $t27 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:993:69+8
    $t27 := 2;
    assume $IsValid'u64'($t27);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32
    // >> opaque call: $t18 := Errors::limit_exceeded($t17)

    // $t28 := opaque begin: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32
    assume $IsValid'u64'($t28);

    // assume Eq<u64>($t28, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32
    assume $IsEqual'u64'($t28, 8);

    // $t28 := opaque end: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32

    // trace_local[tmp#$6]($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    assume {:print "$track_local(13,10,6):", $t28} $t28 == $t28;

    // trace_local[tmp#$5]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    assume {:print "$track_local(13,10,5):", $t26} $t26 == $t26;

    // if ($t26) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    if ($t26) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
L1:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70

    // trace_abort($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    assume {:print "$at(10,48723,48793)"} true;
    assume {:print "$track_abort(13,10):", $t28} $t28 == $t28;

    // $t17 := move($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    $t17 := $t28;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:994:30+4
    assume {:print "$at(10,48824,48828)"} true;
L0:

    // $t29 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:994:30+18
    $t29 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t30 := -($t29, $t2) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:994:49+1
    call $t30 := $Sub($t29, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,48843,48844)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t31 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:994:9+18
    $t31 := $ChildMutation($t24, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24)));

    // write_ref($t31, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:994:9+48
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t24).preburn_value]($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:994:9+48
    $t24 := $UpdateMutation($t24, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t24), $Dereference($t31)));

    // $t32 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:14+17
    assume {:print "$at(10,49017,49034)"} true;
    $t32 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t33 := !($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:13+1
    call $t33 := $Not($t32);

    // if ($t33) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
    if ($t33) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:999:22+4
    assume {:print "$at(10,49090,49094)"} true;
L2:

    // $t34 := borrow_field<Diem::CurrencyInfo<#0>>.cancel_burn_events($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:999:17+28
    $t34 := $ChildMutation($t24, 11, $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t24)));

    // $t35 := pack Diem::CancelBurnEvent($t2, $t21, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:17+135
    assume {:print "$at(10,49131,49266)"} true;
    $t35 := $1_Diem_CancelBurnEvent($t2, $t21, $t0);

    // Event::emit_event<Diem::CancelBurnEvent>($t34, $t35) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:998:13+230
    assume {:print "$at(10,49050,49280)"} true;
    call $t34 := $1_Event_emit_event'$1_Diem_CancelBurnEvent'($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(10,49050,49280)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:998:13+230

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:998:13+230
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:14+1
    assume {:print "$at(10,49280,49281)"} true;
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
    assume {:print "$at(10,49012,49291)"} true;
L4:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1008:9+7
    assume {:print "$at(10,49302,49309)"} true;
L5:

    // trace_return[0]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1008:9+7
    assume {:print "$track_return(13,10,0):", $t20} $t20 == $t20;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:5+1
    assume {:print "$at(10,49314,49315)"} true;
L6:

    // return $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:5+1
    $ret0 := $t20;
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:5+1
L7:

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:5+1
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun Diem::create_preburn<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+255
procedure {:inline 1} $1_Diem_create_preburn'$1_XUS_XUS'(_$t0: int) returns ($ret0: $1_Diem_Preburn'$1_XUS_XUS')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: $1_Diem_Diem'$1_XUS_XUS';
    var $t7: $1_Diem_Preburn'$1_XUS_XUS';
    var $t0: int;
    var $temp_0'$1_Diem_Preburn'$1_XUS_XUS'': $1_Diem_Preburn'$1_XUS_XUS';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+1
    assume {:print "$at(10,26506,26507)"} true;
    assume {:print "$track_local(13,11,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,26613,26658)"} true;

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume {:print "$at(10,26613,26658)"} true;

    // assume Identical($t3, Or(Or(Not(exists<Roles::RoleId>($t2)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume ($t3 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t2) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t2)), Eq(5, $t4)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t2) && $IsEqual'u8'(5, $t4)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume {:print "$at(10,26613,26658)"} true;
    assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,26668,26698)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30

    // assume Identical($t5, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume ($t5 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume {:print "$at(10,26668,26698)"} true;
    assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30

    // $t6 := Diem::zero<#0>() on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:555:38+16
    assume {:print "$at(10,26737,26753)"} true;
    call $t6 := $1_Diem_zero'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(10,26737,26753)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t7 := pack Diem::Preburn<#0>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:9+47
    $t7 := $1_Diem_Preburn'$1_XUS_XUS'($t6);

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:9+47
    assume {:print "$track_return(13,11,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    assume {:print "$at(10,26760,26761)"} true;
L1:

    // return $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::create_preburn<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+255
procedure {:inline 1} $1_Diem_create_preburn'$1_XDX_XDX'(_$t0: int) returns ($ret0: $1_Diem_Preburn'$1_XDX_XDX')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: $1_Diem_Diem'$1_XDX_XDX';
    var $t7: $1_Diem_Preburn'$1_XDX_XDX';
    var $t0: int;
    var $temp_0'$1_Diem_Preburn'$1_XDX_XDX'': $1_Diem_Preburn'$1_XDX_XDX';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+1
    assume {:print "$at(10,26506,26507)"} true;
    assume {:print "$track_local(13,11,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,26613,26658)"} true;

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume {:print "$at(10,26613,26658)"} true;

    // assume Identical($t3, Or(Or(Not(exists<Roles::RoleId>($t2)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume ($t3 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t2) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t2)), Eq(5, $t4)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t2) && $IsEqual'u8'(5, $t4)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume {:print "$at(10,26613,26658)"} true;
    assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,26668,26698)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30

    // assume Identical($t5, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume ($t5 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume {:print "$at(10,26668,26698)"} true;
    assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30

    // $t6 := Diem::zero<#0>() on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:555:38+16
    assume {:print "$at(10,26737,26753)"} true;
    call $t6 := $1_Diem_zero'$1_XDX_XDX'();
    if ($abort_flag) {
        assume {:print "$at(10,26737,26753)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t7 := pack Diem::Preburn<#0>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:9+47
    $t7 := $1_Diem_Preburn'$1_XDX_XDX'($t6);

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:9+47
    assume {:print "$track_return(13,11,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    assume {:print "$at(10,26760,26761)"} true;
L1:

    // return $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::mint<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:296:5+396
procedure {:inline 1} $1_Diem_mint'#0'(_$t0: int, _$t1: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_Diem_CurrencyInfo'#0';
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Diem_MintCapability'#0';
    var $t12: $1_Diem_CurrencyInfo'#0';
    var $t13: $1_Diem_CurrencyInfo'#0';
    var $t14: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t15: $1_Diem_MintEvent;
    var $t16: $1_Diem_Diem'#0';
    var $t17: bool;
    var $t18: $1_Diem_CurrencyInfo'#0';
    var $t19: $1_Diem_MintEvent;
    var $t20: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t21: bool;
    var $t0: int;
    var $t1: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t5, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:452:9+91
    assume {:print "$at(10,21848,21939)"} true;
    assume ($t5 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:296:5+1
    assume {:print "$at(10,14744,14745)"} true;
    assume {:print "$track_local(13,22,0):", $t0} $t0 == $t0;

    // trace_local[value]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:296:5+1
    assume {:print "$track_local(13,22,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:298:20+27
    // >> opaque call: $t5 := Signer::address_of($t0)
    assume {:print "$at(10,14886,14913)"} true;

    // $t6 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:20+27

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:20+27
    assume $IsValid'address'($t6);

    // assume Eq<address>($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:20+27
    assume $IsEqual'address'($t6, $1_Signer_spec_address_of($t0));

    // $t6 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:20+27

    // trace_local[addr]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:13+4
    assume {:print "$track_local(13,22,2):", $t6} $t6 == $t6;

    // $t7 := exists<Diem::MintCapability<#0>>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:16+6
    assume {:print "$at(10,14930,14936)"} true;
    $t7 := $ResourceExists($1_Diem_MintCapability'#0'_$memory, $t6);

    // $t8 := 9 at /home/ying/diem/language/diem-framework/modules/Diem.move:299:84+16
    $t8 := 9;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:299:56+45
    // >> opaque call: $t8 := Errors::requires_capability($t7)

    // $t9 := opaque begin: Errors::requires_capability($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:56+45

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:56+45
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:56+45
    assume $IsEqual'u64'($t9, 4);

    // $t9 := opaque end: Errors::requires_capability($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:56+45

    // trace_local[tmp#$4]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
    assume {:print "$track_local(13,22,4):", $t9} $t9 == $t9;

    // trace_local[tmp#$3]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
    assume {:print "$track_local(13,22,3):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
L1:

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
    assume {:print "$at(10,14923,15016)"} true;
    assume {:print "$track_abort(13,22):", $t9} $t9 == $t9;

    // $t10 := move($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
    $t10 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:301:13+5
    assume {:print "$at(10,15060,15065)"} true;
L0:

    // $t11 := get_global<Diem::MintCapability<#0>>($t6) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/Diem.move:302:13+13
    assume {:print "$at(10,15079,15092)"} true;
    if (!$ResourceExists($1_Diem_MintCapability'#0'_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $t6);
    }
    if ($abort_flag) {
        assume {:print "$at(10,15079,15092)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(13,22):", $t10} $t10 == $t10;
        goto L3;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    // >> opaque call: $t10 := Diem::mint_with_capability<#0>($t1, $t9)
    assume {:print "$at(10,15026,15134)"} true;

    // assume Identical($t12, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:452:9+91
    assume {:print "$at(10,21848,21939)"} true;
    assume ($t12 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t13, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:460:9+91
    assume {:print "$at(10,22364,22455)"} true;
    assume ($t13 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t14, select Diem::CurrencyInfo.mint_events($t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:461:9+39
    assume {:print "$at(10,22464,22503)"} true;
    assume ($t14 == $mint_events#$1_Diem_CurrencyInfo'#0'($t13));

    // assume Identical($t15, pack Diem::MintEvent($t1, select Diem::CurrencyInfo.currency_code($t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:462:9+114
    assume {:print "$at(10,22512,22626)"} true;
    assume ($t15 == $1_Diem_MintEvent($t1, $currency_code#$1_Diem_CurrencyInfo'#0'($t13)));

    // $t16 := opaque begin: Diem::mint_with_capability<#0>($t1, $t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume {:print "$at(10,15026,15134)"} true;

    // assume Identical($t17, Or(Or(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<#0>())), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), $t1), MaxU128())), Not(Diem::spec_is_currency<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume ($t17 == ((!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || (($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $t1) > $MAX_U128)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // if ($t17) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    if ($t17) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
L5:

    // assume Or(Or(And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<#0>())), Eq(1, $t10)), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), $t1), MaxU128()), Eq(8, $t10))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t10))) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume (((!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'u8'(1, $t10)) || ((($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $t1) > $MAX_U128) && $IsEqual'u8'(8, $t10))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume {:print "$at(10,15026,15134)"} true;
    assume {:print "$track_abort(13,22):", $t10} $t10 == $t10;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
L4:

    // modifies global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_CurrencyInfo'#0'';
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS(), $temp_0'$1_Diem_CurrencyInfo'#0'');
    } else {
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceRemove($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());
    }

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume $IsValid'$1_Diem_Diem'#0''($t16);

    // assume Identical($t18, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume {:print "$at(10,21948,22049)"} true;
    assume ($t18 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assume exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assume Eq<Diem::CurrencyInfo<#0>>($t18, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t12, Add(select Diem::CurrencyInfo.total_value($t12), $t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume $IsEqual'$1_Diem_CurrencyInfo'#0''($t18, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t12, ($total_value#$1_Diem_CurrencyInfo'#0'($t12) + $t1)));

    // assume Eq<u64>(select Diem::Diem.value($t16), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t16), $t1);

    // assume Identical($t19, $t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume ($t19 == $t15);

    // assume Identical($t20, $t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume ($t20 == $t14);

    // assume Identical($t21, Not(select Diem::CurrencyInfo.is_synthetic($t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume ($t21 == !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t13));

    // emit_event($t19, $t20, $t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume {:print "$at(10,15026,15134)"} true;
    $es := $CondExtendEventStore'$1_Diem_MintEvent'($es, $t20, $t19, $t21);

    // $t16 := opaque end: Diem::mint_with_capability<#0>($t1, $t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume {:print "$at(10,21948,22049)"} true;

    // trace_return[0]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume {:print "$at(10,15026,15134)"} true;
    assume {:print "$track_return(13,22,0):", $t16} $t16 == $t16;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:304:5+1
    assume {:print "$at(10,15139,15140)"} true;
L2:

    // return $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:304:5+1
    $ret0 := $t16;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:304:5+1
L3:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:304:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun Diem::publish_burn_capability<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+424
procedure {:inline 1} $1_Diem_publish_burn_capability'$1_XUS_XUS'(_$t0: int, _$t1: $1_Diem_BurnCapability'$1_XUS_XUS') returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$at(10,13382,13383)"} true;
    assume {:print "$track_local(13,27,0):", $t0} $t0 == $t0;

    // trace_local[cap]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$track_local(13,27,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,13519,13564)"} true;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(10,13519,13564)"} true;

    // assume Identical($t6, Or(Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume ($t6 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'u8'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(10,13519,13564)"} true;
    assume {:print "$track_abort(13,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,13574,13604)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30

    // assume Identical($t8, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume ($t8 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t8) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    if ($t8) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume {:print "$at(10,13574,13604)"} true;
    assume {:print "$track_abort(13,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(10,13668,13698)"} true;

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30

    // $t10 := exists<Diem::BurnCapability<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:14+6
    $t10 := $ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t9);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:13+1
    call $t11 := $Not($t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:39+16
    assume {:print "$at(10,13739,13755)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    // >> opaque call: $t8 := Errors::already_published($t7)

    // $t13 := opaque begin: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsEqual'u64'($t13, 6);

    // $t13 := opaque end: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(10,13614,13766)"} true;
    assume {:print "$track_local(13,27,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$track_local(13,27,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(10,13614,13766)"} true;
    assume {:print "$track_abort(13,27):", $t13} $t13 == $t13;

    // $t7 := move($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    $t7 := $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:17+10
    assume {:print "$at(10,13784,13794)"} true;
L0:

    // move_to<Diem::BurnCapability<#0>>($t1, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:9+7
    if ($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_BurnCapability'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t0, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(10,13776,13783)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(13,27):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    assume {:print "$at(10,13805,13806)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Diem::register_SCS_currency<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
procedure {:inline 1} $1_Diem_register_SCS_currency'$1_XUS_XUS'(_$t0: int, _$t1: int, _$t2: $1_FixedPoint32_FixedPoint32, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ()
{
    // declare local variables
    var $t6: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t7: $1_Diem_MintCapability'$1_XUS_XUS';
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: int;
    var $t24: $1_DiemConfig_Configuration;
    var $t25: int;
    var $t26: $1_Diem_MintCapability'$1_XUS_XUS';
    var $t27: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t28: int;
    var $t29: bool;
    var $t30: bool;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: int;
    var $t1: int;
    var $t2: $1_FixedPoint32_FixedPoint32;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_MintCapability'$1_XUS_XUS'': $1_Diem_MintCapability'$1_XUS_XUS';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // assume Identical($t10, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t1));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t14, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t1));

    // assume Identical($t15, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t15 == $1_Signer_spec_address_of($t1));

    // assume Identical($t16, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t16 == $1_Signer_spec_address_of($t1));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$at(10,62592,62593)"} true;
    assume {:print "$track_local(13,30,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,1):", $t1} $t1 == $t1;

    // trace_local[to_xdx_exchange_rate]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(10,62855,62900)"} true;

    // assume Identical($t17, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    assume {:print "$at(10,62855,62900)"} true;

    // assume Identical($t18, Or(Or(Not(exists<Roles::RoleId>($t17)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    assume ($t18 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t17) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t18) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    if ($t18) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t17)), Eq(5, $t19)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t19))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t17) && $IsEqual'u8'(5, $t19)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    assume {:print "$at(10,62855,62900)"} true;
    assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,62910,62945)"} true;

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    assume {:print "$at(10,62910,62945)"} true;

    // assume Identical($t21, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t20))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    assume ($t21 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t20)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t21) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    if ($t21) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t19)), And(Not(exists<Roles::RoleId>($t20)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 0), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t19))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t19)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t20) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 0) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    assume {:print "$at(10,62910,62945)"} true;
    assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35

    // $t22 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1313:17+5
    assume {:print "$at(10,63105,63110)"} true;
    $t22 := false;
    assume $IsValid'bool'($t22);

    // assume Identical($t23, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t23 == $1_Signer_spec_address_of($t0));

    // assume Identical($t24, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t24 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t25, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t25 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // ($t26, $t27) := Diem::register_currency<#0>($t0, $t2, $t22, $t3, $t4, $t5) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1310:13+245
    assume {:print "$at(10,62994,63239)"} true;
    call $t26,$t27 := $1_Diem_register_currency'$1_XUS_XUS'($t0, $t2, $t22, $t3, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,62994,63239)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // trace_local[burn_cap]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1309:24+8
    assume {:print "$at(10,62970,62978)"} true;
    assume {:print "$track_local(13,30,6):", $t27} $t27 == $t27;

    // trace_local[mint_cap]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1309:14+8
    assume {:print "$track_local(13,30,7):", $t26} $t26 == $t26;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30
    // >> opaque call: $t13 := Signer::address_of($t1)
    assume {:print "$at(10,63303,63333)"} true;

    // $t28 := opaque begin: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30
    assume $IsValid'address'($t28);

    // assume Eq<address>($t28, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30
    assume $IsEqual'address'($t28, $1_Signer_spec_address_of($t1));

    // $t28 := opaque end: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30

    // $t29 := exists<Diem::MintCapability<#0>>($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:14+6
    $t29 := $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $t28);

    // $t30 := !($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:13+1
    call $t30 := $Not($t29);

    // $t31 := 9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:39+16
    assume {:print "$at(10,63374,63390)"} true;
    $t31 := 9;
    assume $IsValid'u64'($t31);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43
    // >> opaque call: $t17 := Errors::already_published($t16)

    // $t32 := opaque begin: Errors::already_published($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43

    // assume WellFormed($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43
    assume $IsValid'u64'($t32);

    // assume Eq<u64>($t32, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43
    assume $IsEqual'u64'($t32, 6);

    // $t32 := opaque end: Errors::already_published($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43

    // trace_local[tmp#$9]($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    assume {:print "$at(10,63249,63401)"} true;
    assume {:print "$track_local(13,30,9):", $t32} $t32 == $t32;

    // trace_local[tmp#$8]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    assume {:print "$track_local(13,30,8):", $t30} $t30 == $t30;

    // if ($t30) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    if ($t30) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152

    // trace_abort($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    assume {:print "$at(10,63249,63401)"} true;
    assume {:print "$track_abort(13,30):", $t32} $t32 == $t32;

    // $t19 := move($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    $t19 := $t32;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1322:17+10
    assume {:print "$at(10,63419,63429)"} true;
L0:

    // move_to<Diem::MintCapability<#0>>($t26, $t1) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1322:9+7
    if ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_MintCapability'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $t1, $t26);
    }
    if ($abort_flag) {
        assume {:print "$at(10,63411,63418)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // assume Identical($t33, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t1));

    // Diem::publish_burn_capability<#0>($t1, $t27) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1323:9+55
    assume {:print "$at(10,63450,63505)"} true;
    call $1_Diem_publish_burn_capability'$1_XUS_XUS'($t1, $t27);
    if ($abort_flag) {
        assume {:print "$at(10,63450,63505)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+1
    assume {:print "$at(10,63511,63512)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+1
L3:

    // abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+1
    $abort_code := $t19;
    $abort_flag := true;
    return;

}

// fun Diem::scaling_factor<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:5+224
procedure {:inline 1} $1_Diem_scaling_factor'$1_XDX_XDX'() returns ($ret0: int)
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t4: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,67458,67488)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    assume {:print "$at(10,67458,67488)"} true;
    assume {:print "$track_abort(13,34):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30

    // $t2 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:47+38
    assume {:print "$at(10,67536,67574)"} true;
    call $t2 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,67536,67574)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,34):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:9+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,67498,67511)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,34):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.scaling_factor($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:9+92
    $t4 := $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:9+92
    assume {:print "$track_return(13,34,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1417:5+1
    assume {:print "$at(10,67595,67596)"} true;
L1:

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1417:5+1
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1417:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1417:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::register_currency<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
procedure {:inline 1} $1_Diem_register_currency'$1_XUS_XUS'(_$t0: int, _$t1: $1_FixedPoint32_FixedPoint32, _$t2: bool, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ($ret0: $1_Diem_MintCapability'$1_XUS_XUS', $ret1: $1_Diem_BurnCapability'$1_XUS_XUS')
{
    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: bool;
    var $t33: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t34: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t35: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t36: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t37: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t38: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t39: $1_DiemConfig_Configuration;
    var $t40: int;
    var $t41: bool;
    var $t42: $1_Diem_MintCapability'$1_XUS_XUS';
    var $t43: bool;
    var $t44: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t0: int;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_MintCapability'$1_XUS_XUS'': $1_Diem_MintCapability'$1_XUS_XUS';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$at(10,59514,59515)"} true;
    assume {:print "$track_local(13,31,0):", $t0} $t0 == $t0;

    // trace_local[to_xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,1):", $t1} $t1 == $t1;

    // trace_local[is_synthetic]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,59830,59865)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume {:print "$at(10,59830,59865)"} true;

    // assume Identical($t15, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume ($t15 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t15) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    if ($t15) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
L11:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t16)), And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0) && $IsEqual'u8'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume {:print "$at(10,59830,59865)"} true;
    assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
L10:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(10,59958,60005)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47

    // assume Identical($t17, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume ($t17 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // if ($t17) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    if ($t17) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
L13:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS()), Eq(2, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()) && $IsEqual'u8'(2, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume {:print "$at(10,59958,60005)"} true;
    assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
L12:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    // >> opaque call: $t11 := Signer::address_of($t0)
    assume {:print "$at(10,60067,60097)"} true;

    // $t18 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t0));

    // $t18 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30

    // $t19 := exists<Diem::CurrencyInfo<#0>>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:14+6
    $t19 := $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t18);

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:13+1
    call $t20 := $Not($t19);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:39+14
    assume {:print "$at(10,60138,60152)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    // >> opaque call: $t15 := Errors::already_published($t14)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41

    // trace_local[tmp#$7]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$at(10,60015,60163)"} true;
    assume {:print "$track_local(13,31,7):", $t22} $t22 == $t22;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$track_local(13,31,6):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$at(10,60015,60163)"} true;
    assume {:print "$track_abort(13,31):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    $t16 := $t22;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+1
    assume {:print "$at(10,60180,60181)"} true;
L0:

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := <($t23, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:18+1
    call $t24 := $Lt($t23, $t3);

    // if ($t24) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    if ($t24) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:38+14
L2:

    // $t25 := 10000000000 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:56+18
    $t25 := 10000000000;
    assume $IsValid'u64'($t25);

    // $t26 := <=($t3, $t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:53+2
    call $t26 := $Le($t3, $t25);

    // $t10 := $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t10 := $t26;

    // trace_local[tmp#$10]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    assume {:print "$track_local(13,31,10):", $t26} $t26 == $t26;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L4:

    // $t27 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t27 := false;
    assume $IsValid'bool'($t27);

    // $t10 := $t27 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t10 := $t27;

    // trace_local[tmp#$10]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    assume {:print "$track_local(13,31,10):", $t27} $t27 == $t27;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L5:

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:101+14
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    // >> opaque call: $t22 := Errors::invalid_argument($t21)

    // $t29 := opaque begin: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    assume $IsEqual'u64'($t29, 7);

    // $t29 := opaque end: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40

    // trace_local[tmp#$9]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$track_local(13,31,9):", $t29} $t29 == $t29;

    // trace_local[tmp#$8]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$track_local(13,31,8):", $t10} $t10 == $t10;

    // if ($t10) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    if ($t10) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
L7:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$at(10,60173,60281)"} true;
    assume {:print "$track_abort(13,31):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    $t16 := $t29;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    goto L9;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:17+10
    assume {:print "$at(10,60299,60309)"} true;
L6:

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1248:26+1
    assume {:print "$at(10,60361,60362)"} true;
    $t30 := 0;
    assume $IsValid'u128'($t30);

    // $t31 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1249:28+1
    assume {:print "$at(10,60391,60392)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t32 := true at /home/ying/diem/language/diem-framework/modules/Diem.move:1255:23+4
    assume {:print "$at(10,60580,60584)"} true;
    $t32 := true;
    assume $IsValid'bool'($t32);

    // $t33 := Event::new_event_handle<Diem::MintEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1256:26+46
    assume {:print "$at(10,60611,60657)"} true;
    call $t33 := $1_Event_new_event_handle'$1_Diem_MintEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60611,60657)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t34 := Event::new_event_handle<Diem::BurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1257:26+46
    assume {:print "$at(10,60684,60730)"} true;
    call $t34 := $1_Event_new_event_handle'$1_Diem_BurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60684,60730)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t35 := Event::new_event_handle<Diem::PreburnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1258:29+49
    assume {:print "$at(10,60760,60809)"} true;
    call $t35 := $1_Event_new_event_handle'$1_Diem_PreburnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60760,60809)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t36 := Event::new_event_handle<Diem::CancelBurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1259:33+52
    assume {:print "$at(10,60843,60895)"} true;
    call $t36 := $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60843,60895)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t37 := Event::new_event_handle<Diem::ToXDXExchangeRateUpdateEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1260:42+65
    assume {:print "$at(10,60938,61003)"} true;
    call $t37 := $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60938,61003)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t38 := pack Diem::CurrencyInfo<#0>($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:29+702
    assume {:print "$at(10,60311,61013)"} true;
    $t38 := $1_Diem_CurrencyInfo'$1_XUS_XUS'($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37);

    // move_to<Diem::CurrencyInfo<#0>>($t38, $t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:9+7
    if ($ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t0, $t38);
    }
    if ($abort_flag) {
        assume {:print "$at(10,60291,60298)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // assume Identical($t39, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t39 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t40, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t40 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // RegisteredCurrencies::add_currency_code($t0, $t5) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1262:9+101
    assume {:print "$at(10,61024,61125)"} true;
    call $1_RegisteredCurrencies_add_currency_code($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,61024,61125)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t41 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:10+26
    assume {:print "$at(10,61136,61162)"} true;
    $t41 := false;
    assume $IsValid'bool'($t41);

    // $t42 := pack Diem::MintCapability<#0>($t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:10+26
    $t42 := $1_Diem_MintCapability'$1_XUS_XUS'($t41);

    // $t43 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:38+26
    $t43 := false;
    assume $IsValid'bool'($t43);

    // $t44 := pack Diem::BurnCapability<#0>($t43) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:38+26
    $t44 := $1_Diem_BurnCapability'$1_XUS_XUS'($t43);

    // trace_return[0]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:9+56
    assume {:print "$track_return(13,31,0):", $t42} $t42 == $t42;

    // trace_return[1]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:9+56
    assume {:print "$track_return(13,31,1):", $t44} $t44 == $t44;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    assume {:print "$at(10,61196,61197)"} true;
L8:

    // return ($t42, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    $ret0 := $t42;
    $ret1 := $t44;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
L9:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::register_currency<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
procedure {:inline 1} $1_Diem_register_currency'$1_XDX_XDX'(_$t0: int, _$t1: $1_FixedPoint32_FixedPoint32, _$t2: bool, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ($ret0: $1_Diem_MintCapability'$1_XDX_XDX', $ret1: $1_Diem_BurnCapability'$1_XDX_XDX')
{
    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: bool;
    var $t33: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t34: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t35: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t36: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t37: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t38: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t39: $1_DiemConfig_Configuration;
    var $t40: int;
    var $t41: bool;
    var $t42: $1_Diem_MintCapability'$1_XDX_XDX';
    var $t43: bool;
    var $t44: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t0: int;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_MintCapability'$1_XDX_XDX'': $1_Diem_MintCapability'$1_XDX_XDX';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$at(10,59514,59515)"} true;
    assume {:print "$track_local(13,31,0):", $t0} $t0 == $t0;

    // trace_local[to_xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,1):", $t1} $t1 == $t1;

    // trace_local[is_synthetic]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,59830,59865)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume {:print "$at(10,59830,59865)"} true;

    // assume Identical($t15, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume ($t15 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t15) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    if ($t15) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
L11:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t16)), And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0) && $IsEqual'u8'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume {:print "$at(10,59830,59865)"} true;
    assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
L10:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(10,59958,60005)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47

    // assume Identical($t17, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume ($t17 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // if ($t17) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    if ($t17) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
L13:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS()), Eq(2, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()) && $IsEqual'u8'(2, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume {:print "$at(10,59958,60005)"} true;
    assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
L12:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    // >> opaque call: $t11 := Signer::address_of($t0)
    assume {:print "$at(10,60067,60097)"} true;

    // $t18 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t0));

    // $t18 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30

    // $t19 := exists<Diem::CurrencyInfo<#0>>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:14+6
    $t19 := $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t18);

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:13+1
    call $t20 := $Not($t19);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:39+14
    assume {:print "$at(10,60138,60152)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    // >> opaque call: $t15 := Errors::already_published($t14)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41

    // trace_local[tmp#$7]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$at(10,60015,60163)"} true;
    assume {:print "$track_local(13,31,7):", $t22} $t22 == $t22;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$track_local(13,31,6):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$at(10,60015,60163)"} true;
    assume {:print "$track_abort(13,31):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    $t16 := $t22;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+1
    assume {:print "$at(10,60180,60181)"} true;
L0:

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := <($t23, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:18+1
    call $t24 := $Lt($t23, $t3);

    // if ($t24) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    if ($t24) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:38+14
L2:

    // $t25 := 10000000000 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:56+18
    $t25 := 10000000000;
    assume $IsValid'u64'($t25);

    // $t26 := <=($t3, $t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:53+2
    call $t26 := $Le($t3, $t25);

    // $t10 := $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t10 := $t26;

    // trace_local[tmp#$10]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    assume {:print "$track_local(13,31,10):", $t26} $t26 == $t26;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L4:

    // $t27 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t27 := false;
    assume $IsValid'bool'($t27);

    // $t10 := $t27 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t10 := $t27;

    // trace_local[tmp#$10]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    assume {:print "$track_local(13,31,10):", $t27} $t27 == $t27;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L5:

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:101+14
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    // >> opaque call: $t22 := Errors::invalid_argument($t21)

    // $t29 := opaque begin: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    assume $IsEqual'u64'($t29, 7);

    // $t29 := opaque end: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40

    // trace_local[tmp#$9]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$track_local(13,31,9):", $t29} $t29 == $t29;

    // trace_local[tmp#$8]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$track_local(13,31,8):", $t10} $t10 == $t10;

    // if ($t10) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    if ($t10) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
L7:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$at(10,60173,60281)"} true;
    assume {:print "$track_abort(13,31):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    $t16 := $t29;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    goto L9;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:17+10
    assume {:print "$at(10,60299,60309)"} true;
L6:

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1248:26+1
    assume {:print "$at(10,60361,60362)"} true;
    $t30 := 0;
    assume $IsValid'u128'($t30);

    // $t31 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1249:28+1
    assume {:print "$at(10,60391,60392)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t32 := true at /home/ying/diem/language/diem-framework/modules/Diem.move:1255:23+4
    assume {:print "$at(10,60580,60584)"} true;
    $t32 := true;
    assume $IsValid'bool'($t32);

    // $t33 := Event::new_event_handle<Diem::MintEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1256:26+46
    assume {:print "$at(10,60611,60657)"} true;
    call $t33 := $1_Event_new_event_handle'$1_Diem_MintEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60611,60657)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t34 := Event::new_event_handle<Diem::BurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1257:26+46
    assume {:print "$at(10,60684,60730)"} true;
    call $t34 := $1_Event_new_event_handle'$1_Diem_BurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60684,60730)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t35 := Event::new_event_handle<Diem::PreburnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1258:29+49
    assume {:print "$at(10,60760,60809)"} true;
    call $t35 := $1_Event_new_event_handle'$1_Diem_PreburnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60760,60809)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t36 := Event::new_event_handle<Diem::CancelBurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1259:33+52
    assume {:print "$at(10,60843,60895)"} true;
    call $t36 := $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60843,60895)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t37 := Event::new_event_handle<Diem::ToXDXExchangeRateUpdateEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1260:42+65
    assume {:print "$at(10,60938,61003)"} true;
    call $t37 := $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60938,61003)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t38 := pack Diem::CurrencyInfo<#0>($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:29+702
    assume {:print "$at(10,60311,61013)"} true;
    $t38 := $1_Diem_CurrencyInfo'$1_XDX_XDX'($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37);

    // move_to<Diem::CurrencyInfo<#0>>($t38, $t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:9+7
    if ($ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t0, $t38);
    }
    if ($abort_flag) {
        assume {:print "$at(10,60291,60298)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // assume Identical($t39, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t39 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t40, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t40 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // RegisteredCurrencies::add_currency_code($t0, $t5) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1262:9+101
    assume {:print "$at(10,61024,61125)"} true;
    call $1_RegisteredCurrencies_add_currency_code($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,61024,61125)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t41 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:10+26
    assume {:print "$at(10,61136,61162)"} true;
    $t41 := false;
    assume $IsValid'bool'($t41);

    // $t42 := pack Diem::MintCapability<#0>($t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:10+26
    $t42 := $1_Diem_MintCapability'$1_XDX_XDX'($t41);

    // $t43 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:38+26
    $t43 := false;
    assume $IsValid'bool'($t43);

    // $t44 := pack Diem::BurnCapability<#0>($t43) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:38+26
    $t44 := $1_Diem_BurnCapability'$1_XDX_XDX'($t43);

    // trace_return[0]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:9+56
    assume {:print "$track_return(13,31,0):", $t42} $t42 == $t42;

    // trace_return[1]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:9+56
    assume {:print "$track_return(13,31,1):", $t44} $t44 == $t44;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    assume {:print "$at(10,61196,61197)"} true;
L8:

    // return ($t42, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    $ret0 := $t42;
    $ret1 := $t44;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
L9:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::update_minting_ability<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+397
procedure {:inline 1} $1_Diem_update_minting_ability'$1_XDX_XDX'(_$t0: int, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t10: $Mutation (bool);
    var $t0: int;
    var $t1: bool;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'': $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t10));

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+1
    assume {:print "$at(10,72039,72040)"} true;
    assume {:print "$track_local(13,36,0):", $t0} $t0 == $t0;

    // trace_local[can_mint]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+1
    assume {:print "$track_local(13,36,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,72190,72235)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    assume {:print "$at(10,72190,72235)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    assume {:print "$at(10,72190,72235)"} true;
    assume {:print "$track_abort(13,36):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,72245,72275)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30

    // assume Identical($t7, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    assume ($t7 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t7) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    if ($t7) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    assume {:print "$at(10,72245,72275)"} true;
    assume {:print "$track_abort(13,36):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30

    // $t8 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:71+38
    assume {:print "$at(10,72347,72385)"} true;
    call $t8 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,72347,72385)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(13,36):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t9 := borrow_global<Diem::CurrencyInfo<#0>>($t8) on_abort goto L2 with $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(10,72305,72322)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(13,36):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[currency_info]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:13+13
    $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' := $Dereference($t9);
    assume {:print "$track_local(13,36,2):", $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX''} $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' == $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'';

    // $t10 := borrow_field<Diem::CurrencyInfo<#0>>.can_mint($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+22
    assume {:print "$at(10,72396,72418)"} true;
    $t10 := $ChildMutation($t9, 7, $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t9)));

    // write_ref($t10, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+33
    $t10 := $UpdateMutation($t10, $t1);

    // write_back[Reference($t9).can_mint]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+33
    $t9 := $UpdateMutation($t9, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_can_mint($Dereference($t9), $Dereference($t10)));

    // pack_ref_deep($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+33

    // write_back[Diem::CurrencyInfo<#0>@]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+33
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1521:5+1
    assume {:print "$at(10,72435,72436)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1521:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1521:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1521:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Diem::zero<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+134
procedure {:inline 1} $1_Diem_zero'$1_XUS_XUS'() returns ($ret0: $1_Diem_Diem'$1_XUS_XUS')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,54275,54305)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume {:print "$at(10,54275,54305)"} true;
    assume {:print "$track_abort(13,43):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:33+1
    assume {:print "$at(10,54339,54340)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    $t3 := $1_Diem_Diem'$1_XUS_XUS'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    assume {:print "$track_return(13,43,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    assume {:print "$at(10,54347,54348)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::zero<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+134
procedure {:inline 1} $1_Diem_zero'$1_XDX_XDX'() returns ($ret0: $1_Diem_Diem'$1_XDX_XDX')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,54275,54305)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume {:print "$at(10,54275,54305)"} true;
    assume {:print "$track_abort(13,43):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:33+1
    assume {:print "$at(10,54339,54340)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    $t3 := $1_Diem_Diem'$1_XDX_XDX'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    assume {:print "$track_return(13,43,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    assume {:print "$at(10,54347,54348)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::zero<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+134
procedure {:inline 1} $1_Diem_zero'#0'() returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,54275,54305)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume {:print "$at(10,54275,54305)"} true;
    assume {:print "$track_abort(13,43):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:33+1
    assume {:print "$at(10,54339,54340)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    $t3 := $1_Diem_Diem'#0'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    assume {:print "$track_return(13,43,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    assume {:print "$at(10,54347,54348)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:510:5+116
function {:inline} $1_AccountLimits_$has_window_published'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', addr: int): bool {
    $ResourceExists($1_AccountLimits_Window'#0'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:104:10+155
function {:inline} $1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', amount: int, addr: int): bool {
    $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:134:10+159
function {:inline} $1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', amount: int, addr: int): bool {
    $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:299:9+263
function {:inline} $1_AccountLimits_spec_window_expired'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'#0', limits_definition: $1_AccountLimits_LimitsDefinition'#0'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'#0'(window) + $time_period#$1_AccountLimits_LimitsDefinition'#0'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:305:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'#0', limits_definition: $1_AccountLimits_LimitsDefinition'#0'): $1_AccountLimits_Window'#0' {
    if ($1_AccountLimits_spec_window_expired'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'#0'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'#0'(window), $limit_address#$1_AccountLimits_Window'#0'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:385:10+159
function {:inline} $1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): $1_AccountLimits_LimitsDefinition'#0' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:389:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): bool {
    $1_AccountLimits_spec_is_unrestricted'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:393:10+167
function {:inline} $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:397:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', receiving: $1_AccountLimits_Window'#0', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:404:10+272
function {:inline} $1_AccountLimits_spec_update_inflow'#0'(receiving: $1_AccountLimits_Window'#0', amount: int): $1_AccountLimits_Window'#0' {
    $Update'$1_AccountLimits_Window'#0''_tracked_balance($Update'$1_AccountLimits_Window'#0''_window_inflow(receiving, ($window_inflow#$1_AccountLimits_Window'#0'(receiving) + amount)), ($tracked_balance#$1_AccountLimits_Window'#0'(receiving) + amount))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:468:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', sending: $1_AccountLimits_Window'#0', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:473:10+342
function {:inline} $1_AccountLimits_spec_update_outflow'#0'(sending: $1_AccountLimits_Window'#0', amount: int): $1_AccountLimits_Window'#0' {
    $Update'$1_AccountLimits_Window'#0''_tracked_balance($Update'$1_AccountLimits_Window'#0''_window_outflow(sending, ($window_outflow#$1_AccountLimits_Window'#0'(sending) + amount)), if ((amount >= $tracked_balance#$1_AccountLimits_Window'#0'(sending))) then (0) else (($tracked_balance#$1_AccountLimits_Window'#0'(sending) - amount)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:494:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'#0'(limits_def: $1_AccountLimits_LimitsDefinition'#0'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'(limits_def), 86400000000))
}

// struct AccountLimits::AccountLimitMutationCapability at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:13:5+51
type {:datatype} $1_AccountLimits_AccountLimitMutationCapability;
function {:constructor} $1_AccountLimits_AccountLimitMutationCapability($dummy_field: bool): $1_AccountLimits_AccountLimitMutationCapability;
function {:inline} $Update'$1_AccountLimits_AccountLimitMutationCapability'_dummy_field(s: $1_AccountLimits_AccountLimitMutationCapability, x: bool): $1_AccountLimits_AccountLimitMutationCapability {
    $1_AccountLimits_AccountLimitMutationCapability(x)
}
function $IsValid'$1_AccountLimits_AccountLimitMutationCapability'(s: $1_AccountLimits_AccountLimitMutationCapability): bool {
    $IsValid'bool'($dummy_field#$1_AccountLimits_AccountLimitMutationCapability(s))
}
function {:inline} $IsEqual'$1_AccountLimits_AccountLimitMutationCapability'(s1: $1_AccountLimits_AccountLimitMutationCapability, s2: $1_AccountLimits_AccountLimitMutationCapability): bool {
    s1 == s2
}

// struct AccountLimits::LimitsDefinition<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:20:5+398
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s1: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', s2: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';

// struct AccountLimits::LimitsDefinition<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:20:5+398
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s1: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', s2: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';

// struct AccountLimits::LimitsDefinition<#0> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:20:5+398
type {:datatype} $1_AccountLimits_LimitsDefinition'#0';
function {:constructor} $1_AccountLimits_LimitsDefinition'#0'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'#0';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_inflow(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_outflow(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_time_period(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_holding(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'#0''(s: $1_AccountLimits_LimitsDefinition'#0'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'#0''(s1: $1_AccountLimits_LimitsDefinition'#0', s2: $1_AccountLimits_LimitsDefinition'#0'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0';

// struct AccountLimits::Window<#0> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:40:5+484
type {:datatype} $1_AccountLimits_Window'#0';
function {:constructor} $1_AccountLimits_Window'#0'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'#0';
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_start(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'(x, $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_inflow(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), x, $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_outflow(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), x, $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_tracked_balance(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), x, $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_limit_address(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), x)
}
function $IsValid'$1_AccountLimits_Window'#0''(s: $1_AccountLimits_Window'#0'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'#0'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'#0''(s1: $1_AccountLimits_Window'#0', s2: $1_AccountLimits_Window'#0'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0';

// fun AccountLimits::grant_mutation_capability [baseline] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:64:5+224
procedure {:inline 1} $1_AccountLimits_grant_mutation_capability(_$t0: int) returns ($ret0: $1_AccountLimits_AccountLimitMutationCapability)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: $1_AccountLimits_AccountLimitMutationCapability;
    var $t0: int;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:64:5+1
    assume {:print "$at(5,2508,2509)"} true;
    assume {:print "$track_local(14,3,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:65:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(5,2608,2639)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:65:9+31

    // assume Identical($t2, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:65:9+31
    assume ($t2 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t2) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:65:9+31
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:65:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t3)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:65:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:65:9+31
    assume {:print "$at(5,2608,2639)"} true;
    assume {:print "$track_abort(14,3):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:65:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:65:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:65:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(5,2649,2684)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:9+35
    assume {:print "$at(5,2649,2684)"} true;

    // assume Identical($t5, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t4))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:9+35
    assume ($t5 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t4)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:9+35
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t3)), And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t3))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0), Eq(3, $t3))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t3))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t3)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t3))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0) && $IsEqual'u8'(3, $t3))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t3)));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:9+35
    assume {:print "$at(5,2649,2684)"} true;
    assume {:print "$track_abort(14,3):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:9+35

    // $t6 := false at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:67:9+32
    assume {:print "$at(5,2694,2726)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := pack AccountLimits::AccountLimitMutationCapability($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:67:9+32
    $t7 := $1_AccountLimits_AccountLimitMutationCapability($t6);

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:67:9+32
    assume {:print "$track_return(14,3,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:68:5+1
    assume {:print "$at(5,2731,2732)"} true;
L1:

    // return $t7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:68:5+1
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:68:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:68:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun AccountLimits::has_window_published<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:510:5+116
procedure {:inline 1} $1_AccountLimits_has_window_published'#0'(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:510:5+1
    assume {:print "$at(5,23727,23728)"} true;
    assume {:print "$track_local(14,5,0):", $t0} $t0 == $t0;

    // $t1 := exists<AccountLimits::Window<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:9+6
    assume {:print "$at(5,23807,23813)"} true;
    $t1 := $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:9+30
    assume {:print "$track_return(14,5,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:512:5+1
    assume {:print "$at(5,23842,23843)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:512:5+1
    $ret0 := $t1;
    return;

}

// fun AccountLimits::publish_unrestricted_limits<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:5+522
procedure {:inline 1} $1_AccountLimits_publish_unrestricted_limits'$1_XUS_XUS'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[publish_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:5+1
    assume {:print "$at(5,7840,7841)"} true;
    assume {:print "$track_local(14,8,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35
    // >> opaque call: $t8 := Signer::address_of($t0)
    assume {:print "$at(5,7988,8023)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35

    // $t9 := exists<AccountLimits::LimitsDefinition<#0>>($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:14+6
    $t9 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t8);

    // $t10 := !($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:13+1
    call $t10 := $Not($t9);

    // $t11 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:39+18
    assume {:print "$at(5,8064,8082)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45
    // >> opaque call: $t12 := Errors::already_published($t11)

    // $t12 := opaque begin: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, 6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45
    assume $IsEqual'u64'($t12, 6);

    // $t12 := opaque end: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45

    // trace_local[tmp#$2]($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    assume {:print "$at(5,7932,8093)"} true;
    assume {:print "$track_local(14,8,2):", $t12} $t12 == $t12;

    // trace_local[tmp#$1]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    assume {:print "$track_local(14,8,1):", $t10} $t10 == $t10;

    // if ($t10) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    if ($t10) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    assume {:print "$at(5,7932,8093)"} true;
    assume {:print "$track_abort(14,8):", $t12} $t12 == $t12;

    // $t13 := move($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    $t13 := $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:192:13+15
    assume {:print "$at(5,8124,8139)"} true;
L0:

    // trace_local[tmp#$7]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:192:13+15
    assume {:print "$track_local(14,8,7):", $t0} $t0 == $t0;

    // $t14 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:194:29+7
    assume {:print "$at(5,8210,8217)"} true;
    $t14 := 18446744073709551615;
    assume $IsValid'u64'($t14);

    // $t15 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:195:30+7
    assume {:print "$at(5,8248,8255)"} true;
    $t15 := 18446744073709551615;
    assume $IsValid'u64'($t15);

    // $t16 := 86400000000 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:197:30+7
    assume {:print "$at(5,8324,8331)"} true;
    $t16 := 86400000000;
    assume $IsValid'u64'($t16);

    // $t17 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:196:30+7
    assume {:print "$at(5,8286,8293)"} true;
    $t17 := 18446744073709551615;
    assume $IsValid'u64'($t17);

    // $t18 := pack AccountLimits::LimitsDefinition<#0>($t14, $t15, $t16, $t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:193:13+193
    assume {:print "$at(5,8153,8346)"} true;
    $t18 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t14, $t15, $t16, $t17);

    // move_to<AccountLimits::LimitsDefinition<#0>>($t18, $t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:191:9+7
    assume {:print "$at(5,8103,8110)"} true;
    if ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t0, $t18);
    }
    if ($abort_flag) {
        assume {:print "$at(5,8103,8110)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(14,8):", $t13} $t13 == $t13;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
    assume {:print "$at(5,8361,8362)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
L3:

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun AccountLimits::publish_unrestricted_limits<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:5+522
procedure {:inline 1} $1_AccountLimits_publish_unrestricted_limits'$1_XDX_XDX'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[publish_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:5+1
    assume {:print "$at(5,7840,7841)"} true;
    assume {:print "$track_local(14,8,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35
    // >> opaque call: $t8 := Signer::address_of($t0)
    assume {:print "$at(5,7988,8023)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35

    // $t9 := exists<AccountLimits::LimitsDefinition<#0>>($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:14+6
    $t9 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t8);

    // $t10 := !($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:13+1
    call $t10 := $Not($t9);

    // $t11 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:39+18
    assume {:print "$at(5,8064,8082)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45
    // >> opaque call: $t12 := Errors::already_published($t11)

    // $t12 := opaque begin: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, 6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45
    assume $IsEqual'u64'($t12, 6);

    // $t12 := opaque end: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45

    // trace_local[tmp#$2]($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    assume {:print "$at(5,7932,8093)"} true;
    assume {:print "$track_local(14,8,2):", $t12} $t12 == $t12;

    // trace_local[tmp#$1]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    assume {:print "$track_local(14,8,1):", $t10} $t10 == $t10;

    // if ($t10) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    if ($t10) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    assume {:print "$at(5,7932,8093)"} true;
    assume {:print "$track_abort(14,8):", $t12} $t12 == $t12;

    // $t13 := move($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    $t13 := $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:192:13+15
    assume {:print "$at(5,8124,8139)"} true;
L0:

    // trace_local[tmp#$7]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:192:13+15
    assume {:print "$track_local(14,8,7):", $t0} $t0 == $t0;

    // $t14 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:194:29+7
    assume {:print "$at(5,8210,8217)"} true;
    $t14 := 18446744073709551615;
    assume $IsValid'u64'($t14);

    // $t15 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:195:30+7
    assume {:print "$at(5,8248,8255)"} true;
    $t15 := 18446744073709551615;
    assume $IsValid'u64'($t15);

    // $t16 := 86400000000 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:197:30+7
    assume {:print "$at(5,8324,8331)"} true;
    $t16 := 86400000000;
    assume $IsValid'u64'($t16);

    // $t17 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:196:30+7
    assume {:print "$at(5,8286,8293)"} true;
    $t17 := 18446744073709551615;
    assume $IsValid'u64'($t17);

    // $t18 := pack AccountLimits::LimitsDefinition<#0>($t14, $t15, $t16, $t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:193:13+193
    assume {:print "$at(5,8153,8346)"} true;
    $t18 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t14, $t15, $t16, $t17);

    // move_to<AccountLimits::LimitsDefinition<#0>>($t18, $t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:191:9+7
    assume {:print "$at(5,8103,8110)"} true;
    if ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t0, $t18);
    }
    if ($abort_flag) {
        assume {:print "$at(5,8103,8110)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(14,8):", $t13} $t13 == $t13;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
    assume {:print "$at(5,8361,8362)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
L3:

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// struct XUS::XUS at /home/ying/diem/language/diem-framework/modules/XUS.move:12:5+24
type {:datatype} $1_XUS_XUS;
function {:constructor} $1_XUS_XUS($dummy_field: bool): $1_XUS_XUS;
function {:inline} $Update'$1_XUS_XUS'_dummy_field(s: $1_XUS_XUS, x: bool): $1_XUS_XUS {
    $1_XUS_XUS(x)
}
function $IsValid'$1_XUS_XUS'(s: $1_XUS_XUS): bool {
    $IsValid'bool'($dummy_field#$1_XUS_XUS(s))
}
function {:inline} $IsEqual'$1_XUS_XUS'(s1: $1_XUS_XUS, s2: $1_XUS_XUS): bool {
    s1 == s2
}

// fun XUS::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/XUS.move:15:5+595
procedure {:inline 1} $1_XUS_initialize(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $1_DiemConfig_Configuration;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $1_FixedPoint32_FixedPoint32;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: Vec (int);
    var $t28: int;
    var $t29: int;
    var $t30: $1_DiemConfig_Configuration;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t1));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t4 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t5, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t5 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t6, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t1));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/XUS.move:15:5+1
    assume {:print "$at(38,399,400)"} true;
    assume {:print "$track_local(15,0,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/XUS.move:15:5+1
    assume {:print "$track_local(15,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(38,496,527)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31

    // assume Identical($t9, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
    assume ($t9 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t9) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
    if ($t9) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t10)) at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
    assume {:print "$at(38,496,527)"} true;
    assume {:print "$track_abort(15,0):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(38,537,582)"} true;

    // assume Identical($t11, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    assume {:print "$at(38,537,582)"} true;

    // assume Identical($t12, Or(Or(Not(exists<Roles::RoleId>($t11)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    assume ($t12 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t11) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t12) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    if ($t12) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
L6:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t11)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t11) && $IsEqual'u8'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    assume {:print "$at(38,537,582)"} true;
    assume {:print "$track_abort(15,0):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
L5:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(38,592,627)"} true;

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    assume {:print "$at(38,592,627)"} true;

    // assume Identical($t14, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t13))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    assume ($t14 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t13)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t14) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    if ($t14) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
L8:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t10)), And(Not(exists<Roles::RoleId>($t13)), Eq(5, $t10))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 0), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t10)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t13) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 0) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    assume {:print "$at(38,592,627)"} true;
    assume {:print "$track_abort(15,0):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
L7:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35

    // $t15 := 1 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:48+1
    assume {:print "$at(38,766,767)"} true;
    $t15 := 1;
    assume $IsValid'u64'($t15);

    // $t16 := 1 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:51+1
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // nop at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    // >> opaque call: $t4 := FixedPoint32::create_from_rational($t2, $t3)

    // assume Identical($t17, Shl($t15, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+39
    assume {:print "$at(42,8350,8389)"} true;
    assume ($t17 == $shl($t15, 64));

    // assume Identical($t18, Shl($t16, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:187:9+43
    assume {:print "$at(42,8398,8441)"} true;
    assume ($t18 == $shl($t16, 32));

    // assume Identical($t19, Div($t17, $t18)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:188:9+53
    assume {:print "$at(42,8450,8503)"} true;
    assume ($t19 == ($t17 div $t18));

    // assume Identical($t20, Shl($t15, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+39
    assume {:print "$at(42,8350,8389)"} true;
    assume ($t20 == $shl($t15, 64));

    // assume Identical($t21, Shl($t16, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:187:9+43
    assume {:print "$at(42,8398,8441)"} true;
    assume ($t21 == $shl($t16, 32));

    // assume Identical($t22, Div($t20, $t21)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:188:9+53
    assume {:print "$at(42,8450,8503)"} true;
    assume ($t22 == ($t20 div $t21));

    // $t23 := opaque begin: FixedPoint32::create_from_rational($t15, $t16) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    assume {:print "$at(38,731,771)"} true;

    // assume Identical($t24, Or(Or(Eq<num>($t21, 0), And(Eq<num>($t22, 0), Neq<num>($t20, 0))), Gt($t22, 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    assume ($t24 == (($IsEqual'num'($t21, 0) || ($IsEqual'num'($t22, 0) && !$IsEqual'num'($t20, 0))) || ($t22 > 18446744073709551615)));

    // if ($t24) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    if ($t24) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
L10:

    // assume Or(Or(And(Eq<num>($t21, 0), Eq(7, $t10)), And(And(Eq<num>($t22, 0), Neq<num>($t20, 0)), Eq(7, $t10))), And(Gt($t22, 18446744073709551615), Eq(8, $t10))) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    assume ((($IsEqual'num'($t21, 0) && $IsEqual'u8'(7, $t10)) || (($IsEqual'num'($t22, 0) && !$IsEqual'num'($t20, 0)) && $IsEqual'u8'(7, $t10))) || (($t22 > 18446744073709551615) && $IsEqual'u8'(8, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    assume {:print "$at(38,731,771)"} true;
    assume {:print "$track_abort(15,0):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    goto L2;

    // label L9 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
L9:

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t23);

    // assume Eq<FixedPoint32::FixedPoint32>($t23, FixedPoint32::spec_create_from_rational($t15, $t16)) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    assume $IsEqual'$1_FixedPoint32_FixedPoint32'($t23, $1_FixedPoint32_spec_create_from_rational($t15, $t16));

    // $t23 := opaque end: FixedPoint32::create_from_rational($t15, $t16) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40

    // $t25 := 1000000 at /home/ying/diem/language/diem-framework/modules/XUS.move:26:13+7
    assume {:print "$at(38,809,816)"} true;
    $t25 := 1000000;
    assume $IsValid'u64'($t25);

    // $t26 := 100 at /home/ying/diem/language/diem-framework/modules/XUS.move:27:13+3
    assume {:print "$at(38,855,858)"} true;
    $t26 := 100;
    assume $IsValid'u64'($t26);

    // $t27 := [88, 85, 83] at /home/ying/diem/language/diem-framework/modules/XUS.move:28:13+6
    assume {:print "$at(38,902,908)"} true;
    $t27 := MakeVec3(88, 85, 83);
    assume $IsValid'vec'u8''($t27);

    // assume Identical($t28, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t28 == $1_Signer_spec_address_of($t1));

    // assume Identical($t29, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t29 == $1_Signer_spec_address_of($t0));

    // assume Identical($t30, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t30 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t31, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t31 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t32, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t1));

    // assume Identical($t33, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t33 == $1_Signer_spec_address_of($t1));

    // assume Identical($t34, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t34 == $1_Signer_spec_address_of($t1));

    // Diem::register_SCS_currency<XUS::XUS>($t0, $t1, $t23, $t25, $t26, $t27) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/XUS.move:22:9+281
    assume {:print "$at(38,637,918)"} true;
    call $1_Diem_register_SCS_currency'$1_XUS_XUS'($t0, $t1, $t23, $t25, $t26, $t27);
    if ($abort_flag) {
        assume {:print "$at(38,637,918)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(15,0):", $t10} $t10 == $t10;
        goto L2;
    }

    // AccountLimits::publish_unrestricted_limits<XUS::XUS>($t0) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/XUS.move:30:9+59
    assume {:print "$at(38,928,987)"} true;
    call $1_AccountLimits_publish_unrestricted_limits'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(38,928,987)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(15,0):", $t10} $t10 == $t10;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/XUS.move:31:5+1
    assume {:print "$at(38,993,994)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/XUS.move:31:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:31:5+1
L2:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:31:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/XDX.move:134:9+105
function {:inline} $1_XDX_reserve_exists($1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve): bool {
    $ResourceExists($1_XDX_Reserve_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// struct XDX::XDX at /home/ying/diem/language/diem-framework/modules/XDX.move:16:5+24
type {:datatype} $1_XDX_XDX;
function {:constructor} $1_XDX_XDX($dummy_field: bool): $1_XDX_XDX;
function {:inline} $Update'$1_XDX_XDX'_dummy_field(s: $1_XDX_XDX, x: bool): $1_XDX_XDX {
    $1_XDX_XDX(x)
}
function $IsValid'$1_XDX_XDX'(s: $1_XDX_XDX): bool {
    $IsValid'bool'($dummy_field#$1_XDX_XDX(s))
}
function {:inline} $IsEqual'$1_XDX_XDX'(s1: $1_XDX_XDX, s2: $1_XDX_XDX): bool {
    s1 == s2
}

// struct XDX::Reserve at /home/ying/diem/language/diem-framework/modules/XDX.move:25:5+677
type {:datatype} $1_XDX_Reserve;
function {:constructor} $1_XDX_Reserve($mint_cap: $1_Diem_MintCapability'$1_XDX_XDX', $burn_cap: $1_Diem_BurnCapability'$1_XDX_XDX', $preburn_cap: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve;
function {:inline} $Update'$1_XDX_Reserve'_mint_cap(s: $1_XDX_Reserve, x: $1_Diem_MintCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve(x, $burn_cap#$1_XDX_Reserve(s), $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_burn_cap(s: $1_XDX_Reserve, x: $1_Diem_BurnCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), x, $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_preburn_cap(s: $1_XDX_Reserve, x: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), $burn_cap#$1_XDX_Reserve(s), x)
}
function $IsValid'$1_XDX_Reserve'(s: $1_XDX_Reserve): bool {
    $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''($mint_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''($burn_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $IsEqual'$1_XDX_Reserve'(s1: $1_XDX_Reserve, s2: $1_XDX_Reserve): bool {
    s1 == s2
}
var $1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve;

// fun XDX::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/XDX.move:49:5+998
procedure {:inline 1} $1_XDX_initialize(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t3: $1_Diem_MintCapability'$1_XDX_XDX';
    var $t4: $1_Diem_Preburn'$1_XDX_XDX';
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: $1_DiemConfig_Configuration;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $1_FixedPoint32_FixedPoint32;
    var $t29: bool;
    var $t30: bool;
    var $t31: int;
    var $t32: int;
    var $t33: Vec (int);
    var $t34: int;
    var $t35: $1_DiemConfig_Configuration;
    var $t36: int;
    var $t37: $1_Diem_MintCapability'$1_XDX_XDX';
    var $t38: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t39: bool;
    var $t40: int;
    var $t41: int;
    var $t42: $1_Diem_Preburn'$1_XDX_XDX';
    var $t43: $1_XDX_Reserve;
    var $t0: int;
    var $t1: int;
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_MintCapability'$1_XDX_XDX'': $1_Diem_MintCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_Preburn'$1_XDX_XDX'': $1_Diem_Preburn'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t8 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t9, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t9 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t1));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/XDX.move:49:5+1
    assume {:print "$at(37,2310,2311)"} true;
    assume {:print "$track_local(16,0,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/XDX.move:49:5+1
    assume {:print "$track_local(16,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(37,2407,2438)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31

    // assume Identical($t12, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
    assume ($t12 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t12) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
L5:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t13)) at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
    assume {:print "$at(37,2407,2438)"} true;
    assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
L4:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(37,2482,2529)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47

    // assume Identical($t14, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
    assume ($t14 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // if ($t14) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
    if ($t14) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
L7:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS()), Eq(2, $t13)) at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()) && $IsEqual'u8'(2, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
    assume {:print "$at(37,2482,2529)"} true;
    assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
L6:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47

    // $t15 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:57:33+34
    assume {:print "$at(37,2598,2632)"} true;
    call $t15 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(37,2598,2632)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // $t16 := exists<XDX::Reserve>($t15) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:17+6
    $t16 := $ResourceExists($1_XDX_Reserve_$memory, $t15);

    // $t17 := !($t16) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:16+1
    call $t17 := $Not($t16);

    // $t18 := 0 at /home/ying/diem/language/diem-framework/modules/XDX.move:57:96+8
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // nop at /home/ying/diem/language/diem-framework/modules/XDX.move:57:70+35
    // >> opaque call: $t11 := Errors::already_published($t10)

    // $t19 := opaque begin: Errors::already_published($t18) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:70+35

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:70+35
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 6) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:70+35
    assume $IsEqual'u64'($t19, 6);

    // $t19 := opaque end: Errors::already_published($t18) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:70+35

    // trace_local[tmp#$6]($t19) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
    assume {:print "$track_local(16,0,6):", $t19} $t19 == $t19;

    // trace_local[tmp#$5]($t17) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
    assume {:print "$track_local(16,0,5):", $t17} $t17 == $t17;

    // if ($t17) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
    if ($t17) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
    assume {:print "$at(37,2574,2671)"} true;
    assume {:print "$track_abort(16,0):", $t19} $t19 == $t19;

    // $t13 := move($t19) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
    $t13 := $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+10
    assume {:print "$at(37,2750,2760)"} true;
L0:

    // $t20 := 1 at /home/ying/diem/language/diem-framework/modules/XDX.move:60:48+1
    assume {:print "$at(37,2809,2810)"} true;
    $t20 := 1;
    assume $IsValid'u64'($t20);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/XDX.move:60:51+1
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    // >> opaque call: $t14 := FixedPoint32::create_from_rational($t12, $t13)

    // assume Identical($t22, Shl($t20, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+39
    assume {:print "$at(42,8350,8389)"} true;
    assume ($t22 == $shl($t20, 64));

    // assume Identical($t23, Shl($t21, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:187:9+43
    assume {:print "$at(42,8398,8441)"} true;
    assume ($t23 == $shl($t21, 32));

    // assume Identical($t24, Div($t22, $t23)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:188:9+53
    assume {:print "$at(42,8450,8503)"} true;
    assume ($t24 == ($t22 div $t23));

    // assume Identical($t25, Shl($t20, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+39
    assume {:print "$at(42,8350,8389)"} true;
    assume ($t25 == $shl($t20, 64));

    // assume Identical($t26, Shl($t21, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:187:9+43
    assume {:print "$at(42,8398,8441)"} true;
    assume ($t26 == $shl($t21, 32));

    // assume Identical($t27, Div($t25, $t26)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:188:9+53
    assume {:print "$at(42,8450,8503)"} true;
    assume ($t27 == ($t25 div $t26));

    // $t28 := opaque begin: FixedPoint32::create_from_rational($t20, $t21) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    assume {:print "$at(37,2774,2814)"} true;

    // assume Identical($t29, Or(Or(Eq<num>($t26, 0), And(Eq<num>($t27, 0), Neq<num>($t25, 0))), Gt($t27, 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    assume ($t29 == (($IsEqual'num'($t26, 0) || ($IsEqual'num'($t27, 0) && !$IsEqual'num'($t25, 0))) || ($t27 > 18446744073709551615)));

    // if ($t29) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    if ($t29) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
L9:

    // assume Or(Or(And(Eq<num>($t26, 0), Eq(7, $t13)), And(And(Eq<num>($t27, 0), Neq<num>($t25, 0)), Eq(7, $t13))), And(Gt($t27, 18446744073709551615), Eq(8, $t13))) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    assume ((($IsEqual'num'($t26, 0) && $IsEqual'u8'(7, $t13)) || (($IsEqual'num'($t27, 0) && !$IsEqual'num'($t25, 0)) && $IsEqual'u8'(7, $t13))) || (($t27 > 18446744073709551615) && $IsEqual'u8'(8, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    assume {:print "$at(37,2774,2814)"} true;
    assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
L8:

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t28);

    // assume Eq<FixedPoint32::FixedPoint32>($t28, FixedPoint32::spec_create_from_rational($t20, $t21)) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    assume $IsEqual'$1_FixedPoint32_FixedPoint32'($t28, $1_FixedPoint32_spec_create_from_rational($t20, $t21));

    // $t28 := opaque end: FixedPoint32::create_from_rational($t20, $t21) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40

    // $t30 := true at /home/ying/diem/language/diem-framework/modules/XDX.move:61:13+4
    assume {:print "$at(37,2852,2856)"} true;
    $t30 := true;
    assume $IsValid'bool'($t30);

    // $t31 := 1000000 at /home/ying/diem/language/diem-framework/modules/XDX.move:62:13+7
    assume {:print "$at(37,2889,2896)"} true;
    $t31 := 1000000;
    assume $IsValid'u64'($t31);

    // $t32 := 1000 at /home/ying/diem/language/diem-framework/modules/XDX.move:63:13+4
    assume {:print "$at(37,2935,2939)"} true;
    $t32 := 1000;
    assume $IsValid'u64'($t32);

    // $t33 := [88, 68, 88] at /home/ying/diem/language/diem-framework/modules/XDX.move:64:13+6
    assume {:print "$at(37,2982,2988)"} true;
    $t33 := MakeVec3(88, 68, 88);
    assume $IsValid'vec'u8''($t33);

    // assume Identical($t34, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t34 == $1_Signer_spec_address_of($t0));

    // assume Identical($t35, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t35 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t36, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t36 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // ($t37, $t38) := Diem::register_currency<XDX::XDX>($t0, $t28, $t30, $t31, $t32, $t33) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:58:36+290
    assume {:print "$at(37,2708,2998)"} true;
    call $t37,$t38 := $1_Diem_register_currency'$1_XDX_XDX'($t0, $t28, $t30, $t31, $t32, $t33);
    if ($abort_flag) {
        assume {:print "$at(37,2708,2998)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // trace_local[burn_cap]($t38) at /home/ying/diem/language/diem-framework/modules/XDX.move:58:24+8
    assume {:print "$track_local(16,0,2):", $t38} $t38 == $t38;

    // trace_local[mint_cap]($t37) at /home/ying/diem/language/diem-framework/modules/XDX.move:58:14+8
    assume {:print "$track_local(16,0,3):", $t37} $t37 == $t37;

    // $t39 := false at /home/ying/diem/language/diem-framework/modules/XDX.move:67:55+5
    assume {:print "$at(37,3087,3092)"} true;
    $t39 := false;
    assume $IsValid'bool'($t39);

    // assume Identical($t40, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t40 == $1_Signer_spec_address_of($t1));

    // Diem::update_minting_ability<XDX::XDX>($t1, $t39) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:67:9+52
    assume {:print "$at(37,3041,3093)"} true;
    call $1_Diem_update_minting_ability'$1_XDX_XDX'($t1, $t39);
    if ($abort_flag) {
        assume {:print "$at(37,3041,3093)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // AccountLimits::publish_unrestricted_limits<XDX::XDX>($t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:68:9+59
    assume {:print "$at(37,3103,3162)"} true;
    call $1_AccountLimits_publish_unrestricted_limits'$1_XDX_XDX'($t0);
    if ($abort_flag) {
        assume {:print "$at(37,3103,3162)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // assume Identical($t41, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t41 == $1_Signer_spec_address_of($t1));

    // $t42 := Diem::create_preburn<XDX::XDX>($t1) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:69:27+37
    assume {:print "$at(37,3190,3227)"} true;
    call $t42 := $1_Diem_create_preburn'$1_XDX_XDX'($t1);
    if ($abort_flag) {
        assume {:print "$at(37,3190,3227)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // trace_local[preburn_cap]($t42) at /home/ying/diem/language/diem-framework/modules/XDX.move:69:13+11
    assume {:print "$track_local(16,0,4):", $t42} $t42 == $t42;

    // $t43 := pack XDX::Reserve($t37, $t38, $t42) at /home/ying/diem/language/diem-framework/modules/XDX.move:70:29+43
    assume {:print "$at(37,3257,3300)"} true;
    $t43 := $1_XDX_Reserve($t37, $t38, $t42);

    // move_to<XDX::Reserve>($t43, $t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:70:9+7
    if ($ResourceExists($1_XDX_Reserve_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_XDX_Reserve_$memory := $ResourceUpdate($1_XDX_Reserve_$memory, $t0, $t43);
    }
    if ($abort_flag) {
        assume {:print "$at(37,3237,3244)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/XDX.move:71:5+1
    assume {:print "$at(37,3307,3308)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/XDX.move:71:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:71:5+1
L3:

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/XDX.move:71:5+1
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:64:5+153
function {:inline} $1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig, validator_operator_addr: int): bool {
    $ResourceExists($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, validator_operator_addr)
}

// struct ValidatorOperatorConfig::ValidatorOperatorConfig at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:11:5+141
type {:datatype} $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:constructor} $1_ValidatorOperatorConfig_ValidatorOperatorConfig($human_name: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:inline} $Update'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'_human_name(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, x: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig {
    $1_ValidatorOperatorConfig_ValidatorOperatorConfig(x)
}
function $IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    $IsValid'vec'u8''($human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s1: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, s2: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    s1 == s2
}
var $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig;

// fun ValidatorOperatorConfig::publish [baseline] at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:19:5+589
procedure {:inline 1} $1_ValidatorOperatorConfig_publish(_$t0: int, _$t1: int, _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t1));

    // assume Identical($t6, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t6 == $1_Signer_spec_address_of($t1));

    // trace_local[validator_operator_account]($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:19:5+1
    assume {:print "$at(36,466,467)"} true;
    assume {:print "$track_local(17,2,0):", $t0} $t0 == $t0;

    // trace_local[dr_account]($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:19:5+1
    assume {:print "$track_local(17,2,1):", $t1} $t1 == $t1;

    // trace_local[human_name]($t2) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:19:5+1
    assume {:print "$track_local(17,2,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(36,608,641)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+33

    // assume Identical($t7, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+33
    assume ($t7 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t7) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+33
    if ($t7) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+33
L5:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t8)) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+33
    assume {:print "$at(36,608,641)"} true;
    assume {:print "$track_abort(17,2):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+33
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+33
L4:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+33

    // nop at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+35
    // >> opaque call: Roles::assert_diem_root($t1)
    assume {:print "$at(36,651,686)"} true;

    // assume Identical($t9, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_diem_root($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+35
    assume {:print "$at(36,651,686)"} true;

    // assume Identical($t10, Or(Or(Or(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+35
    assume ($t10 == (((!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t10) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+35
    if ($t10) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8)), And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'u8'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+35
    assume {:print "$at(36,651,686)"} true;
    assume {:print "$track_abort(17,2):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+35
L6:

    // opaque end: Roles::assert_diem_root($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:9+60
    // >> opaque call: Roles::assert_validator_operator($t0)
    assume {:print "$at(36,696,756)"} true;

    // opaque begin: Roles::assert_validator_operator($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:9+60

    // assume Identical($t11, Or(Not(exists<Roles::RoleId>(Signer::spec_address_of($t0))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::spec_address_of($t0))), 4))) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:9+60
    assume ($t11 == (!$ResourceExists($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t0))), 4)));

    // if ($t11) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:9+60
    if ($t11) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:9+60
L9:

    // assume Or(And(Not(exists<Roles::RoleId>(Signer::spec_address_of($t0))), Eq(5, $t8)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::spec_address_of($t0))), 4), Eq(3, $t8))) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:9+60
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(5, $t8)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t0))), 4) && $IsEqual'u8'(3, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:9+60
    assume {:print "$at(36,696,756)"} true;
    assume {:print "$track_abort(17,2):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:9+60
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:9+60
L8:

    // opaque end: Roles::assert_validator_operator($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:9+60

    // nop at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:28:44+46
    // >> opaque call: $t5 := Signer::address_of($t0)
    assume {:print "$at(36,817,863)"} true;

    // $t12 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:28:44+46

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:28:44+46
    assume $IsValid'address'($t12);

    // assume Eq<address>($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:28:44+46
    assume $IsEqual'address'($t12, $1_Signer_spec_address_of($t0));

    // $t12 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:28:44+46

    // $t13 := ValidatorOperatorConfig::has_validator_operator_config($t12) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:28:14+77
    call $t13 := $1_ValidatorOperatorConfig_has_validator_operator_config($t12);
    if ($abort_flag) {
        assume {:print "$at(36,787,864)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(17,2):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t14 := !($t13) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:28:13+1
    call $t14 := $Not($t13);

    // $t15 := 0 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:29:39+26
    assume {:print "$at(36,904,930)"} true;
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:29:13+53
    // >> opaque call: $t9 := Errors::already_published($t8)

    // $t16 := opaque begin: Errors::already_published($t15) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:29:13+53

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:29:13+53
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 6) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:29:13+53
    assume $IsEqual'u64'($t16, 6);

    // $t16 := opaque end: Errors::already_published($t15) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:29:13+53

    // trace_local[tmp#$4]($t16) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:9+175
    assume {:print "$at(36,766,941)"} true;
    assume {:print "$track_local(17,2,4):", $t16} $t16 == $t16;

    // trace_local[tmp#$3]($t14) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:9+175
    assume {:print "$track_local(17,2,3):", $t14} $t14 == $t14;

    // if ($t14) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:9+175
    if ($t14) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:9+175
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:9+175

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:9+175
    assume {:print "$at(36,766,941)"} true;
    assume {:print "$track_abort(17,2):", $t16} $t16 == $t16;

    // $t8 := move($t16) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:9+175
    $t8 := $t16;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:9+175
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:32:17+26
    assume {:print "$at(36,960,986)"} true;
L0:

    // $t17 := pack ValidatorOperatorConfig::ValidatorOperatorConfig($t2) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:32:45+59
    $t17 := $1_ValidatorOperatorConfig_ValidatorOperatorConfig($t2);

    // move_to<ValidatorOperatorConfig::ValidatorOperatorConfig>($t17, $t0) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:32:9+7
    if ($ResourceExists($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory := $ResourceUpdate($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $t0, $t17);
    }
    if ($abort_flag) {
        assume {:print "$at(36,952,959)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(17,2):", $t8} $t8 == $t8;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:35:5+1
    assume {:print "$at(36,1054,1055)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:35:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:35:5+1
L3:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:35:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun ValidatorOperatorConfig::has_validator_operator_config [baseline] at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:64:5+153
procedure {:inline 1} $1_ValidatorOperatorConfig_has_validator_operator_config(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[validator_operator_addr]($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:64:5+1
    assume {:print "$at(36,2543,2544)"} true;
    assume {:print "$track_local(17,1,0):", $t0} $t0 == $t0;

    // $t1 := exists<ValidatorOperatorConfig::ValidatorOperatorConfig>($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:65:9+6
    assume {:print "$at(36,2634,2640)"} true;
    $t1 := $ResourceExists($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:65:9+56
    assume {:print "$track_return(17,1,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:66:5+1
    assume {:print "$at(36,2695,2696)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:66:5+1
    $ret0 := $t1;
    return;

}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:88:5+170
function {:inline} $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_KeyRotationCapability {
    $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:88:5+170
function {:inline} $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_WithdrawCapability {
    $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:53:5+95
function {:inline} $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:53:5+95
function {:inline} $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:63:5+96
function {:inline} $1_Option_$is_some'$1_ValidatorConfig_Config'(t: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    !$1_Vector_$is_empty'$1_ValidatorConfig_Config'($vec#$1_Option_Option'$1_ValidatorConfig_Config'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:63:5+96
function {:inline} $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    !$1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:63:5+96
function {:inline} $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    !$1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:35:10+78
function {:inline} $1_Option_spec_none'address'(): $1_Option_Option'address' {
    $1_Option_Option'address'($EmptyVec'address'())
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:35:10+78
function {:inline} $1_Option_spec_none'$1_ValidatorConfig_Config'(): $1_Option_Option'$1_ValidatorConfig_Config' {
    $1_Option_Option'$1_ValidatorConfig_Config'($EmptyVec'$1_ValidatorConfig_Config'())
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:35:10+78
function {:inline} $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'(): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'($EmptyVec'$1_DiemAccount_WithdrawCapability'())
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:48:10+89
function {:inline} $1_Option_spec_some'$1_DiemAccount_KeyRotationCapability'(e: $1_DiemAccount_KeyRotationCapability): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $1_Option_Option'$1_DiemAccount_KeyRotationCapability'(MakeVec1(e))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:48:10+89
function {:inline} $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'(e: $1_DiemAccount_WithdrawCapability): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'(MakeVec1(e))
}

// struct Option::Option<address> at /home/ying/diem/language/move-stdlib/modules/Option.move:10:5+81
type {:datatype} $1_Option_Option'address';
function {:constructor} $1_Option_Option'address'($vec: Vec (int)): $1_Option_Option'address';
function {:inline} $Update'$1_Option_Option'address''_vec(s: $1_Option_Option'address', x: Vec (int)): $1_Option_Option'address' {
    $1_Option_Option'address'(x)
}
function $IsValid'$1_Option_Option'address''(s: $1_Option_Option'address'): bool {
    $IsValid'vec'address''($vec#$1_Option_Option'address'(s))
}
function {:inline} $IsEqual'$1_Option_Option'address''(s1: $1_Option_Option'address', s2: $1_Option_Option'address'): bool {
    s1 == s2
}

// struct Option::Option<ValidatorConfig::Config> at /home/ying/diem/language/move-stdlib/modules/Option.move:10:5+81
type {:datatype} $1_Option_Option'$1_ValidatorConfig_Config';
function {:constructor} $1_Option_Option'$1_ValidatorConfig_Config'($vec: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config';
function {:inline} $Update'$1_Option_Option'$1_ValidatorConfig_Config''_vec(s: $1_Option_Option'$1_ValidatorConfig_Config', x: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config' {
    $1_Option_Option'$1_ValidatorConfig_Config'(x)
}
function $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''(s: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    $IsValid'vec'$1_ValidatorConfig_Config''($vec#$1_Option_Option'$1_ValidatorConfig_Config'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_ValidatorConfig_Config''(s1: $1_Option_Option'$1_ValidatorConfig_Config', s2: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    s1 == s2
}

// struct Option::Option<DiemAccount::KeyRotationCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:10:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_KeyRotationCapability'($vec: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''_vec(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', x: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $1_Option_Option'$1_DiemAccount_KeyRotationCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $IsValid'vec'$1_DiemAccount_KeyRotationCapability''($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s1: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', s2: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    s1 == s2
}

// struct Option::Option<DiemAccount::WithdrawCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:10:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_WithdrawCapability'($vec: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_WithdrawCapability''_vec(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability', x: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $IsValid'vec'$1_DiemAccount_WithdrawCapability''($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s1: $1_Option_Option'$1_DiemAccount_WithdrawCapability', s2: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:85:5+84
function {:inline} $1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:231:5+176
function {:inline} $1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    ($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr) && $1_Option_$is_some'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, addr))))
}

// struct ValidatorConfig::Config at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:18:5+178
type {:datatype} $1_ValidatorConfig_Config;
function {:constructor} $1_ValidatorConfig_Config($consensus_pubkey: Vec (int), $validator_network_addresses: Vec (int), $fullnode_network_addresses: Vec (int)): $1_ValidatorConfig_Config;
function {:inline} $Update'$1_ValidatorConfig_Config'_consensus_pubkey(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config(x, $validator_network_addresses#$1_ValidatorConfig_Config(s), $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_validator_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), x, $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_fullnode_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), $validator_network_addresses#$1_ValidatorConfig_Config(s), x)
}
function $IsValid'$1_ValidatorConfig_Config'(s: $1_ValidatorConfig_Config): bool {
    $IsValid'vec'u8''($consensus_pubkey#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($validator_network_addresses#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_Config'(s1: $1_ValidatorConfig_Config, s2: $1_ValidatorConfig_Config): bool {
    s1 == s2
}

// struct ValidatorConfig::ValidatorConfig at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:24:5+260
type {:datatype} $1_ValidatorConfig_ValidatorConfig;
function {:constructor} $1_ValidatorConfig_ValidatorConfig($config: $1_Option_Option'$1_ValidatorConfig_Config', $operator_account: $1_Option_Option'address', $human_name: Vec (int)): $1_ValidatorConfig_ValidatorConfig;
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_config(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'$1_ValidatorConfig_Config'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig(x, $operator_account#$1_ValidatorConfig_ValidatorConfig(s), $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_operator_account(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'address'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), x, $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_human_name(s: $1_ValidatorConfig_ValidatorConfig, x: Vec (int)): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), $operator_account#$1_ValidatorConfig_ValidatorConfig(s), x)
}
function $IsValid'$1_ValidatorConfig_ValidatorConfig'(s: $1_ValidatorConfig_ValidatorConfig): bool {
    $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''($config#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'vec'u8''($human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_ValidatorConfig'(s1: $1_ValidatorConfig_ValidatorConfig, s2: $1_ValidatorConfig_ValidatorConfig): bool {
    s1 == s2
}
var $1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig;

// fun ValidatorConfig::publish [baseline] at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:50:5+602
procedure {:inline 1} $1_ValidatorConfig_publish(_$t0: int, _$t1: int, _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: $1_Option_Option'$1_ValidatorConfig_Config';
    var $t17: $1_Option_Option'address';
    var $t18: $1_ValidatorConfig_ValidatorConfig;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t1));

    // trace_local[validator_account]($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:50:5+1
    assume {:print "$at(35,1987,1988)"} true;
    assume {:print "$track_local(19,7,0):", $t0} $t0 == $t0;

    // trace_local[dr_account]($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:50:5+1
    assume {:print "$track_local(19,7,1):", $t1} $t1 == $t1;

    // trace_local[human_name]($t2) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:50:5+1
    assume {:print "$track_local(19,7,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(35,2120,2153)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+33

    // assume Identical($t6, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+33
    assume ($t6 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+33
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+33
L5:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t7)) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+33
    assume {:print "$at(35,2120,2153)"} true;
    assume {:print "$track_abort(19,7):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+33
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+33
L4:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+33

    // nop at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+35
    // >> opaque call: Roles::assert_diem_root($t1)
    assume {:print "$at(35,2163,2198)"} true;

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_diem_root($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+35
    assume {:print "$at(35,2163,2198)"} true;

    // assume Identical($t9, Or(Or(Or(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t8))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t8)), 0)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+35
    assume ($t9 == (((!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t8)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t9) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+35
    if ($t9) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t7)), And(Not(exists<Roles::RoleId>($t8)), Eq(5, $t7))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t8)), 0), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t7)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t8) && $IsEqual'u8'(5, $t7))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)), 0) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+35
    assume {:print "$at(35,2163,2198)"} true;
    assume {:print "$track_abort(19,7):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+35
L6:

    // opaque end: Roles::assert_diem_root($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:9+42
    // >> opaque call: Roles::assert_validator($t0)
    assume {:print "$at(35,2208,2250)"} true;

    // opaque begin: Roles::assert_validator($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:9+42

    // assume Identical($t10, Or(Not(exists<Roles::RoleId>(Signer::$address_of($t0))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), 3))) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:9+42
    assume ($t10 == (!$ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), 3)));

    // if ($t10) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:9+42
    if ($t10) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:9+42
L9:

    // assume Or(And(Not(exists<Roles::RoleId>(Signer::$address_of($t0))), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), 3), Eq(3, $t7))) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:9+42
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0)) && $IsEqual'u8'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), 3) && $IsEqual'u8'(3, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:9+42
    assume {:print "$at(35,2208,2250)"} true;
    assume {:print "$track_abort(19,7):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:9+42
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:9+42
L8:

    // opaque end: Roles::assert_validator($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:9+42

    // nop at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:59:38+37
    // >> opaque call: $t5 := Signer::address_of($t0)
    assume {:print "$at(35,2305,2342)"} true;

    // $t11 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:59:38+37

    // assume WellFormed($t11) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:59:38+37
    assume $IsValid'address'($t11);

    // assume Eq<address>($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:59:38+37
    assume $IsEqual'address'($t11, $1_Signer_spec_address_of($t0));

    // $t11 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:59:38+37

    // $t12 := exists<ValidatorConfig::ValidatorConfig>($t11) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:59:14+6
    $t12 := $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, $t11);

    // $t13 := !($t12) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:59:13+1
    call $t13 := $Not($t12);

    // $t14 := 0 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:60:39+17
    assume {:print "$at(35,2383,2400)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // nop at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:60:13+44
    // >> opaque call: $t9 := Errors::already_published($t8)

    // $t15 := opaque begin: Errors::already_published($t14) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:60:13+44

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:60:13+44
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 6) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:60:13+44
    assume $IsEqual'u64'($t15, 6);

    // $t15 := opaque end: Errors::already_published($t14) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:60:13+44

    // trace_local[tmp#$4]($t15) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:9+151
    assume {:print "$at(35,2260,2411)"} true;
    assume {:print "$track_local(19,7,4):", $t15} $t15 == $t15;

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:9+151
    assume {:print "$track_local(19,7,3):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:9+151
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:9+151
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:9+151

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:9+151
    assume {:print "$at(35,2260,2411)"} true;
    assume {:print "$track_abort(19,7):", $t15} $t15 == $t15;

    // $t7 := move($t15) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:9+151
    $t7 := $t15;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:9+151
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:62:17+17
    assume {:print "$at(35,2429,2446)"} true;
L0:

    // nop at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:63:21+14
    // >> opaque call: $t10 := Option::none<ValidatorConfig::Config>()
    assume {:print "$at(35,2486,2500)"} true;

    // $t16 := opaque begin: Option::none<ValidatorConfig::Config>() at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:63:21+14

    // assume And(WellFormed($t16), Le(Len<ValidatorConfig::Config>(select Option::Option.vec($t16)), 1)) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:63:21+14
    assume ($IsValid'$1_Option_Option'$1_ValidatorConfig_Config''($t16) && (LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($t16)) <= 1));

    // assume Eq<Option::Option<ValidatorConfig::Config>>($t16, Option::spec_none<ValidatorConfig::Config>()) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:63:21+14
    assume $IsEqual'$1_Option_Option'$1_ValidatorConfig_Config''($t16, $1_Option_spec_none'$1_ValidatorConfig_Config'());

    // $t16 := opaque end: Option::none<ValidatorConfig::Config>() at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:63:21+14

    // nop at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:64:31+14
    // >> opaque call: $t11 := Option::none<address>()
    assume {:print "$at(35,2532,2546)"} true;

    // $t17 := opaque begin: Option::none<address>() at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:64:31+14

    // assume And(WellFormed($t17), Le(Len<address>(select Option::Option.vec($t17)), 1)) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:64:31+14
    assume ($IsValid'$1_Option_Option'address''($t17) && (LenVec($vec#$1_Option_Option'address'($t17)) <= 1));

    // assume Eq<Option::Option<address>>($t17, Option::spec_none<address>()) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:64:31+14
    assume $IsEqual'$1_Option_Option'address''($t17, $1_Option_spec_none'address'());

    // $t17 := opaque end: Option::none<address>() at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:64:31+14

    // $t18 := pack ValidatorConfig::ValidatorConfig($t16, $t17, $t2) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:62:36+133
    assume {:print "$at(35,2448,2581)"} true;
    $t18 := $1_ValidatorConfig_ValidatorConfig($t16, $t17, $t2);

    // move_to<ValidatorConfig::ValidatorConfig>($t18, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:62:9+7
    if ($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_ValidatorConfig_ValidatorConfig_$memory := $ResourceUpdate($1_ValidatorConfig_ValidatorConfig_$memory, $t0, $t18);
    }
    if ($abort_flag) {
        assume {:print "$at(35,2421,2428)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(19,7):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:67:5+1
    assume {:print "$at(35,2588,2589)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:67:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:67:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:67:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:166:5+80
function {:inline} $1_VASP_$is_child($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, addr: int): bool {
    $ResourceExists($1_VASP_ChildVASP_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:156:5+82
function {:inline} $1_VASP_$is_parent($1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $ResourceExists($1_VASP_ParentVASP_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:176:5+89
function {:inline} $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) || $1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:143:9+207
function {:inline} $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): int {
    if ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr)) then (addr) else ($parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:150:9+149
function {:inline} $1_VASP_spec_has_account_limits'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $1_AccountLimits_$has_window_published'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:199:10+168
function {:inline} $1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr1: int, addr2: int): bool {
    (($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr1) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr2)) && $IsEqual'address'($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr1), $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr2)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:216:10+99
function {:inline} $1_VASP_spec_num_children($1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, parent: int): int {
    $num_children#$1_VASP_ParentVASP($ResourceValue($1_VASP_ParentVASP_$memory, parent))
}

// struct VASP::ChildVASP at /home/ying/diem/language/diem-framework/modules/VASP.move:23:5+54
type {:datatype} $1_VASP_ChildVASP;
function {:constructor} $1_VASP_ChildVASP($parent_vasp_addr: int): $1_VASP_ChildVASP;
function {:inline} $Update'$1_VASP_ChildVASP'_parent_vasp_addr(s: $1_VASP_ChildVASP, x: int): $1_VASP_ChildVASP {
    $1_VASP_ChildVASP(x)
}
function $IsValid'$1_VASP_ChildVASP'(s: $1_VASP_ChildVASP): bool {
    $IsValid'address'($parent_vasp_addr#$1_VASP_ChildVASP(s))
}
function {:inline} $IsEqual'$1_VASP_ChildVASP'(s1: $1_VASP_ChildVASP, s2: $1_VASP_ChildVASP): bool {
    s1 == s2
}
var $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP;

// struct VASP::ParentVASP at /home/ying/diem/language/diem-framework/modules/VASP.move:17:5+121
type {:datatype} $1_VASP_ParentVASP;
function {:constructor} $1_VASP_ParentVASP($num_children: int): $1_VASP_ParentVASP;
function {:inline} $Update'$1_VASP_ParentVASP'_num_children(s: $1_VASP_ParentVASP, x: int): $1_VASP_ParentVASP {
    $1_VASP_ParentVASP(x)
}
function $IsValid'$1_VASP_ParentVASP'(s: $1_VASP_ParentVASP): bool {
    $IsValid'u64'($num_children#$1_VASP_ParentVASP(s))
}
function {:inline} $IsEqual'$1_VASP_ParentVASP'(s1: $1_VASP_ParentVASP, s2: $1_VASP_ParentVASP): bool {
    s1 == s2
}
var $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP;

// fun VASP::has_account_limits<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/VASP.move:117:5+170
procedure {:inline 1} $1_VASP_has_account_limits'#0'(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:117:5+1
    assume {:print "$at(33,5441,5442)"} true;
    assume {:print "$track_local(20,0,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:118:55+20
    // >> opaque call: $t1 := VASP::parent_address($t0)
    assume {:print "$at(33,5584,5604)"} true;

    // $t1 := opaque begin: VASP::parent_address($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:118:55+20

    // assume Identical($t2, And(Not(VASP::$is_parent($t0)), Not(VASP::$is_child($t0)))) at /home/ying/diem/language/diem-framework/modules/VASP.move:118:55+20
    assume ($t2 == (!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t0) && !$1_VASP_$is_child($1_VASP_ChildVASP_$memory, $t0)));

    // if ($t2) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:118:55+20
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/VASP.move:118:55+20
L4:

    // assume And(And(Not(VASP::$is_parent($t0)), Not(VASP::$is_child($t0))), Eq(7, $t3)) at /home/ying/diem/language/diem-framework/modules/VASP.move:118:55+20
    assume ((!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t0) && !$1_VASP_$is_child($1_VASP_ChildVASP_$memory, $t0)) && $IsEqual'u8'(7, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/VASP.move:118:55+20
    assume {:print "$at(33,5584,5604)"} true;
    assume {:print "$track_abort(20,0):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/VASP.move:118:55+20
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:118:55+20
L3:

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:118:55+20
    assume $IsValid'address'($t1);

    // assume Eq<address>($t1, VASP::spec_parent_address($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:118:55+20
    assume $IsEqual'address'($t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t0));

    // $t1 := opaque end: VASP::parent_address($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:118:55+20

    // $t4 := AccountLimits::has_window_published<#0>($t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/VASP.move:118:9+67
    call $t4 := $1_AccountLimits_has_window_published'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(33,5538,5605)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(20,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/VASP.move:118:9+67
    assume {:print "$track_return(20,0,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/VASP.move:119:5+1
    assume {:print "$at(33,5610,5611)"} true;
L1:

    // return $t4 at /home/ying/diem/language/diem-framework/modules/VASP.move:119:5+1
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/VASP.move:119:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/VASP.move:119:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun VASP::publish_child_vasp_credential [baseline] at /home/ying/diem/language/diem-framework/modules/VASP.move:71:5+896
procedure {:inline 1} $1_VASP_publish_child_vasp_credential(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation (int);
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: $Mutation ($1_VASP_ParentVASP);
    var $t28: $Mutation (int);
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: $1_VASP_ChildVASP;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t27));
    assume IsEmptyVec(p#$Mutation($t28));

    // bytecode translation starts here
    // assume Identical($t11, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/VASP.move:88:9+48
    assume {:print "$at(33,3978,4026)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t1));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:99:9+50
    assume {:print "$at(33,4590,4640)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // trace_local[parent]($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:71:5+1
    assume {:print "$at(33,3032,3033)"} true;
    assume {:print "$track_local(20,7,0):", $t0} $t0 == $t0;

    // trace_local[child]($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:71:5+1
    assume {:print "$track_local(20,7,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:75:9+38
    // >> opaque call: Roles::assert_parent_vasp_role($t0)
    assume {:print "$at(33,3159,3197)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:75:9+38
    assume {:print "$at(33,3159,3197)"} true;

    // assume Identical($t15, Or(Not(exists<Roles::RoleId>($t14)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 5))) at /home/ying/diem/language/diem-framework/modules/VASP.move:75:9+38
    assume ($t15 == (!$ResourceExists($1_Roles_RoleId_$memory, $t14) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 5)));

    // if ($t15) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/VASP.move:75:9+38
    if ($t15) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/VASP.move:75:9+38
L9:

    // assume Or(And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 5), Eq(3, $t16))) at /home/ying/diem/language/diem-framework/modules/VASP.move:75:9+38
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 5) && $IsEqual'u8'(3, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/VASP.move:75:9+38
    assume {:print "$at(33,3159,3197)"} true;
    assume {:print "$track_abort(20,7):", $t16} $t16 == $t16;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:75:9+38
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/VASP.move:75:9+38
L8:

    // opaque end: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:75:9+38

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+36
    // >> opaque call: Roles::assert_child_vasp_role($t1)
    assume {:print "$at(33,3207,3243)"} true;

    // opaque begin: Roles::assert_child_vasp_role($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+36

    // assume Identical($t17, Or(Not(exists<Roles::RoleId>(Signer::$address_of($t1))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), 6))) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+36
    assume ($t17 == (!$ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), 6)));

    // if ($t17) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+36
    if ($t17) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+36
L11:

    // assume Or(And(Not(exists<Roles::RoleId>(Signer::$address_of($t1))), Eq(5, $t16)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), 6), Eq(3, $t16))) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+36
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) && $IsEqual'u8'(5, $t16)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), 6) && $IsEqual'u8'(3, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+36
    assume {:print "$at(33,3207,3243)"} true;
    assume {:print "$track_abort(20,7):", $t16} $t16 == $t16;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+36
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+36
L10:

    // opaque end: Roles::assert_child_vasp_role($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+36

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:77:31+25
    // >> opaque call: $t11 := Signer::address_of($t1)
    assume {:print "$at(33,3275,3300)"} true;

    // $t18 := opaque begin: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:77:31+25

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:77:31+25
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/VASP.move:77:31+25
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t1));

    // $t18 := opaque end: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:77:31+25

    // trace_local[child_vasp_addr]($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:77:13+15
    assume {:print "$track_local(20,7,2):", $t18} $t18 == $t18;

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:78:17+24
    // >> opaque call: $t12 := VASP::is_vasp($t11)
    assume {:print "$at(33,3318,3342)"} true;

    // $t19 := opaque begin: VASP::is_vasp($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:17+24

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:17+24
    assume $IsValid'bool'($t19);

    // assume Eq<bool>($t19, VASP::$is_vasp($t18)) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:17+24
    assume $IsEqual'bool'($t19, $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18));

    // $t19 := opaque end: VASP::is_vasp($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:17+24

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:16+1
    call $t20 := $Not($t19);

    // $t21 := 0 at /home/ying/diem/language/diem-framework/modules/VASP.move:78:69+21
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:78:43+48
    // >> opaque call: $t15 := Errors::already_published($t14)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:43+48

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:43+48
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:43+48
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:43+48

    // trace_local[tmp#$6]($t22) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+83
    assume {:print "$track_local(20,7,6):", $t22} $t22 == $t22;

    // trace_local[tmp#$5]($t20) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+83
    assume {:print "$track_local(20,7,5):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+83
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+83
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+83

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+83

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+83
    assume {:print "$at(33,3310,3393)"} true;
    assume {:print "$track_abort(20,7):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+83
    $t16 := $t22;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+83
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/VASP.move:79:51+6
    assume {:print "$at(33,3445,3451)"} true;
L0:

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:79:32+26
    // >> opaque call: $t16 := Signer::address_of($t0)

    // $t23 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:79:32+26

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/VASP.move:79:32+26
    assume $IsValid'address'($t23);

    // assume Eq<address>($t23, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:79:32+26
    assume $IsEqual'address'($t23, $1_Signer_spec_address_of($t0));

    // $t23 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:79:32+26

    // trace_local[parent_vasp_addr]($t23) at /home/ying/diem/language/diem-framework/modules/VASP.move:79:13+16
    assume {:print "$track_local(20,7,4):", $t23} $t23 == $t23;

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:80:16+27
    // >> opaque call: $t17 := VASP::is_parent($t16)
    assume {:print "$at(33,3469,3496)"} true;

    // $t24 := opaque begin: VASP::is_parent($t23) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:16+27

    // assume WellFormed($t24) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:16+27
    assume $IsValid'bool'($t24);

    // assume Eq<bool>($t24, VASP::$is_parent($t23)) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:16+27
    assume $IsEqual'bool'($t24, $1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t23));

    // $t24 := opaque end: VASP::is_parent($t23) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:16+27

    // $t25 := 3 at /home/ying/diem/language/diem-framework/modules/VASP.move:80:70+18
    $t25 := 3;
    assume $IsValid'u64'($t25);

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:80:45+44
    // >> opaque call: $t19 := Errors::invalid_argument($t18)

    // $t26 := opaque begin: Errors::invalid_argument($t25) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:45+44

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:45+44
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 7) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:45+44
    assume $IsEqual'u64'($t26, 7);

    // $t26 := opaque end: Errors::invalid_argument($t25) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:45+44

    // trace_local[tmp#$8]($t26) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:9+81
    assume {:print "$track_local(20,7,8):", $t26} $t26 == $t26;

    // trace_local[tmp#$7]($t24) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:9+81
    assume {:print "$track_local(20,7,7):", $t24} $t24 == $t24;

    // if ($t24) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:80:9+81
    if ($t24) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:80:9+81
L3:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:9+81

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:9+81
    assume {:print "$at(33,3462,3543)"} true;
    assume {:print "$track_abort(20,7):", $t26} $t26 == $t26;

    // $t16 := move($t26) at /home/ying/diem/language/diem-framework/modules/VASP.move:80:9+81
    $t16 := $t26;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:80:9+81
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/VASP.move:81:63+16
    assume {:print "$at(33,3607,3623)"} true;
L2:

    // $t27 := borrow_global<VASP::ParentVASP>($t23) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/VASP.move:81:33+17
    if (!$ResourceExists($1_VASP_ParentVASP_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t27 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_VASP_ParentVASP_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(33,3577,3594)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(20,7):", $t16} $t16 == $t16;
        goto L7;
    }

    // $t28 := borrow_field<VASP::ParentVASP>.num_children($t27) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:28+65
    $t28 := $ChildMutation($t27, 0, $num_children#$1_VASP_ParentVASP($Dereference($t27)));

    // trace_local[num_children]($t28) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:13+12
    $temp_0'u64' := $Dereference($t28);
    assume {:print "$track_local(20,7,3):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // $t29 := read_ref($t28) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:16+13
    assume {:print "$at(33,3743,3756)"} true;
    $t29 := $Dereference($t28);

    // $t30 := 65536 at /home/ying/diem/language/diem-framework/modules/VASP.move:83:32+18
    $t30 := 65536;
    assume $IsValid'u64'($t30);

    // $t31 := <($t29, $t30) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:30+1
    call $t31 := $Lt($t29, $t30);

    // $t32 := 1 at /home/ying/diem/language/diem-framework/modules/VASP.move:83:75+18
    $t32 := 1;
    assume $IsValid'u64'($t32);

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:83:52+42
    // >> opaque call: $t26 := Errors::limit_exceeded($t25)

    // $t33 := opaque begin: Errors::limit_exceeded($t32) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:52+42

    // assume WellFormed($t33) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:52+42
    assume $IsValid'u64'($t33);

    // assume Eq<u64>($t33, 8) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:52+42
    assume $IsEqual'u64'($t33, 8);

    // $t33 := opaque end: Errors::limit_exceeded($t32) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:52+42

    // trace_local[tmp#$10]($t33) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:9+86
    assume {:print "$track_local(20,7,10):", $t33} $t33 == $t33;

    // trace_local[tmp#$9]($t31) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:9+86
    assume {:print "$track_local(20,7,9):", $t31} $t31 == $t31;

    // if ($t31) goto L4 else goto L12 at /home/ying/diem/language/diem-framework/modules/VASP.move:83:9+86
    if ($t31) { goto L4; } else { goto L12; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/VASP.move:83:9+86
L5:

    // destroy($t28) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:9+86

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:9+86

    // trace_abort($t33) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:9+86
    assume {:print "$at(33,3736,3822)"} true;
    assume {:print "$track_abort(20,7):", $t33} $t33 == $t33;

    // $t16 := move($t33) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:9+86
    $t16 := $t33;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:83:9+86
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/VASP.move:84:26+12
    assume {:print "$at(33,3849,3861)"} true;
L4:

    // $t34 := read_ref($t28) at /home/ying/diem/language/diem-framework/modules/VASP.move:84:25+13
    $t34 := $Dereference($t28);

    // $t35 := 1 at /home/ying/diem/language/diem-framework/modules/VASP.move:84:41+1
    $t35 := 1;
    assume $IsValid'u64'($t35);

    // $t36 := +($t34, $t35) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/VASP.move:84:39+1
    call $t36 := $AddU64($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(33,3862,3863)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(20,7):", $t16} $t16 == $t16;
        goto L7;
    }

    // write_ref($t28, $t36) at /home/ying/diem/language/diem-framework/modules/VASP.move:84:9+33
    $t28 := $UpdateMutation($t28, $t36);

    // write_back[Reference($t27).num_children]($t28) at /home/ying/diem/language/diem-framework/modules/VASP.move:84:9+33
    $t27 := $UpdateMutation($t27, $Update'$1_VASP_ParentVASP'_num_children($Dereference($t27), $Dereference($t28)));

    // write_back[VASP::ParentVASP@]($t27) at /home/ying/diem/language/diem-framework/modules/VASP.move:84:9+33
    $1_VASP_ParentVASP_$memory := $ResourceUpdate($1_VASP_ParentVASP_$memory, $GlobalLocationAddress($t27),
        $Dereference($t27));

    // $t37 := pack VASP::ChildVASP($t23) at /home/ying/diem/language/diem-framework/modules/VASP.move:85:24+30
    assume {:print "$at(33,3890,3920)"} true;
    $t37 := $1_VASP_ChildVASP($t23);

    // move_to<VASP::ChildVASP>($t37, $t1) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/VASP.move:85:9+7
    if ($ResourceExists($1_VASP_ChildVASP_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $1_VASP_ChildVASP_$memory := $ResourceUpdate($1_VASP_ChildVASP_$memory, $t1, $t37);
    }
    if ($abort_flag) {
        assume {:print "$at(33,3875,3882)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(20,7):", $t16} $t16 == $t16;
        goto L7;
    }

    // label L6 at /home/ying/diem/language/diem-framework/modules/VASP.move:86:5+1
    assume {:print "$at(33,3927,3928)"} true;
L6:

    // return () at /home/ying/diem/language/diem-framework/modules/VASP.move:86:5+1
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:86:5+1
L7:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/VASP.move:86:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // destroy($t27) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun VASP::publish_parent_vasp_credential [baseline] at /home/ying/diem/language/diem-framework/modules/VASP.move:45:5+421
procedure {:inline 1} $1_VASP_publish_parent_vasp_credential(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: $1_VASP_ParentVASP;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:58:9+46
    assume {:print "$at(33,2573,2619)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t1));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // trace_local[vasp]($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:45:5+1
    assume {:print "$at(33,1911,1912)"} true;
    assume {:print "$track_local(20,8,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:45:5+1
    assume {:print "$track_local(20,8,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(33,1999,2032)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+33

    // assume Identical($t8, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+33
    assume ($t8 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t8) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+33
    if ($t8) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+33
L5:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t9)) at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+33
    assume {:print "$at(33,1999,2032)"} true;
    assume {:print "$track_abort(20,8):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+33
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+33
L4:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+33

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:47:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(33,2042,2087)"} true;

    // assume Identical($t10, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:47:9+45
    assume {:print "$at(33,2042,2087)"} true;

    // assume Identical($t11, Or(Or(Not(exists<Roles::RoleId>($t10)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 1)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/VASP.move:47:9+45
    assume ($t11 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t10) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t11) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/VASP.move:47:9+45
    if ($t11) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:47:9+45
L7:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/VASP.move:47:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'u8'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 1) && $IsEqual'u8'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/VASP.move:47:9+45
    assume {:print "$at(33,2042,2087)"} true;
    assume {:print "$track_abort(20,8):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:47:9+45
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/VASP.move:47:9+45
L6:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:47:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+36
    // >> opaque call: Roles::assert_parent_vasp_role($t0)
    assume {:print "$at(33,2097,2133)"} true;

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+36
    assume {:print "$at(33,2097,2133)"} true;

    // assume Identical($t13, Or(Not(exists<Roles::RoleId>($t12)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t12)), 5))) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+36
    assume ($t13 == (!$ResourceExists($1_Roles_RoleId_$memory, $t12) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)), 5)));

    // if ($t13) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+36
    if ($t13) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+36
L9:

    // assume Or(And(Not(exists<Roles::RoleId>($t12)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t12)), 5), Eq(3, $t9))) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+36
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t12) && $IsEqual'u8'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)), 5) && $IsEqual'u8'(3, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+36
    assume {:print "$at(33,2097,2133)"} true;
    assume {:print "$track_abort(20,8):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+36
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+36
L8:

    // opaque end: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+36

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:49:25+24
    // >> opaque call: $t5 := Signer::address_of($t0)
    assume {:print "$at(33,2159,2183)"} true;

    // $t14 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:49:25+24

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/VASP.move:49:25+24
    assume $IsValid'address'($t14);

    // assume Eq<address>($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:49:25+24
    assume $IsEqual'address'($t14, $1_Signer_spec_address_of($t0));

    // $t14 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:49:25+24

    // trace_local[vasp_addr]($t14) at /home/ying/diem/language/diem-framework/modules/VASP.move:49:13+9
    assume {:print "$track_local(20,8,4):", $t14} $t14 == $t14;

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:50:17+18
    // >> opaque call: $t6 := VASP::is_vasp($t5)
    assume {:print "$at(33,2201,2219)"} true;

    // $t15 := opaque begin: VASP::is_vasp($t14) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:17+18

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:17+18
    assume $IsValid'bool'($t15);

    // assume Eq<bool>($t15, VASP::$is_vasp($t14)) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:17+18
    assume $IsEqual'bool'($t15, $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14));

    // $t15 := opaque end: VASP::is_vasp($t14) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:17+18

    // $t16 := !($t15) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:16+1
    call $t16 := $Not($t15);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/VASP.move:50:63+21
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/VASP.move:50:37+48
    // >> opaque call: $t9 := Errors::already_published($t8)

    // $t18 := opaque begin: Errors::already_published($t17) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:37+48

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:37+48
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 6) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:37+48
    assume $IsEqual'u64'($t18, 6);

    // $t18 := opaque end: Errors::already_published($t17) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:37+48

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:9+77
    assume {:print "$track_local(20,8,3):", $t18} $t18 == $t18;

    // trace_local[tmp#$2]($t16) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:9+77
    assume {:print "$track_local(20,8,2):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/VASP.move:50:9+77
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/VASP.move:50:9+77
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:9+77

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:9+77
    assume {:print "$at(33,2193,2270)"} true;
    assume {:print "$track_abort(20,8):", $t18} $t18 == $t18;

    // $t9 := move($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:9+77
    $t9 := $t18;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:50:9+77
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/VASP.move:51:17+4
    assume {:print "$at(33,2288,2292)"} true;
L0:

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/VASP.move:51:50+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := pack VASP::ParentVASP($t19) at /home/ying/diem/language/diem-framework/modules/VASP.move:51:23+30
    $t20 := $1_VASP_ParentVASP($t19);

    // move_to<VASP::ParentVASP>($t20, $t0) on_abort goto L3 with $t9 at /home/ying/diem/language/diem-framework/modules/VASP.move:51:9+7
    if ($ResourceExists($1_VASP_ParentVASP_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_VASP_ParentVASP_$memory := $ResourceUpdate($1_VASP_ParentVASP_$memory, $t0, $t20);
    }
    if ($abort_flag) {
        assume {:print "$at(33,2280,2287)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(20,8):", $t9} $t9 == $t9;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/VASP.move:52:5+1
    assume {:print "$at(33,2331,2332)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/VASP.move:52:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:52:5+1
L3:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/VASP.move:52:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:48:5+150
function {:inline} $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:48:5+150
function {:inline} $1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory: $Memory $1_TransactionFee_TransactionFee'#0'): bool {
    $ResourceExists($1_TransactionFee_TransactionFee'#0'_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:52:5+69
function {:inline} $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:170:10+164
function {:inline} $1_TransactionFee_spec_transaction_fee'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:170:10+164
function {:inline} $1_TransactionFee_spec_transaction_fee'#0'($1_TransactionFee_TransactionFee'#0'_$memory: $Memory $1_TransactionFee_TransactionFee'#0'): $1_TransactionFee_TransactionFee'#0' {
    $ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())
}

// struct TransactionFee::TransactionFee<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:17:5+116
type {:datatype} $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:constructor} $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance: $1_Diem_Diem'$1_XUS_XUS', $preburn: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_balance(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'(x, $preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_preburn(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
      && $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s1: $1_TransactionFee_TransactionFee'$1_XUS_XUS', s2: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS';

// struct TransactionFee::TransactionFee<#0> at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:17:5+116
type {:datatype} $1_TransactionFee_TransactionFee'#0';
function {:constructor} $1_TransactionFee_TransactionFee'#0'($balance: $1_Diem_Diem'#0', $preburn: $1_Diem_Preburn'#0'): $1_TransactionFee_TransactionFee'#0';
function {:inline} $Update'$1_TransactionFee_TransactionFee'#0''_balance(s: $1_TransactionFee_TransactionFee'#0', x: $1_Diem_Diem'#0'): $1_TransactionFee_TransactionFee'#0' {
    $1_TransactionFee_TransactionFee'#0'(x, $preburn#$1_TransactionFee_TransactionFee'#0'(s))
}
function {:inline} $Update'$1_TransactionFee_TransactionFee'#0''_preburn(s: $1_TransactionFee_TransactionFee'#0', x: $1_Diem_Preburn'#0'): $1_TransactionFee_TransactionFee'#0' {
    $1_TransactionFee_TransactionFee'#0'($balance#$1_TransactionFee_TransactionFee'#0'(s), x)
}
function $IsValid'$1_TransactionFee_TransactionFee'#0''(s: $1_TransactionFee_TransactionFee'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($balance#$1_TransactionFee_TransactionFee'#0'(s))
      && $IsValid'$1_Diem_Preburn'#0''($preburn#$1_TransactionFee_TransactionFee'#0'(s))
}
function {:inline} $IsEqual'$1_TransactionFee_TransactionFee'#0''(s1: $1_TransactionFee_TransactionFee'#0', s2: $1_TransactionFee_TransactionFee'#0'): bool {
    s1 == s2
}
var $1_TransactionFee_TransactionFee'#0'_$memory: $Memory $1_TransactionFee_TransactionFee'#0';

// fun TransactionFee::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:5+253
procedure {:inline 1} $1_TransactionFee_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:5+1
    assume {:print "$at(31,844,845)"} true;
    assume {:print "$track_local(21,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(31,912,943)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31

    // assume Identical($t2, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
    assume ($t2 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t2) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t3)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
    assume {:print "$at(31,912,943)"} true;
    assume {:print "$track_abort(21,2):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(31,953,998)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    assume {:print "$at(31,953,998)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
L6:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t3)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t3))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t3))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t3)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'u8'(3, $t3))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t3)));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    assume {:print "$at(31,953,998)"} true;
    assume {:print "$track_abort(21,2):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
L5:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45

    // TransactionFee::add_txn_fee_currency<XUS::XUS>($t0) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:33:9+37
    assume {:print "$at(31,1053,1090)"} true;
    call $1_TransactionFee_add_txn_fee_currency'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,1053,1090)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(21,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:34:5+1
    assume {:print "$at(31,1096,1097)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:34:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:34:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:34:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun TransactionFee::add_txn_fee_currency<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:59:5+508
procedure {:inline 1} $1_TransactionFee_add_txn_fee_currency'$1_XUS_XUS'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Diem_Diem'$1_XUS_XUS';
    var $t12: int;
    var $t13: $1_Diem_Preburn'$1_XUS_XUS';
    var $t14: $1_TransactionFee_TransactionFee'$1_XUS_XUS';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:59:5+1
    assume {:print "$at(31,2117,2118)"} true;
    assume {:print "$track_local(21,0,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(31,2197,2242)"} true;

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    assume {:print "$at(31,2197,2242)"} true;

    // assume Identical($t4, Or(Or(Not(exists<Roles::RoleId>($t3)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t3)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    assume ($t4 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t3) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t3)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t4) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    if ($t4) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t3)), Eq(5, $t5)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t3)), 1), Eq(3, $t5))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t5))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t3) && $IsEqual'u8'(5, $t5)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t3)), 1) && $IsEqual'u8'(3, $t5))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t5)));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    assume {:print "$at(31,2197,2242)"} true;
    assume {:print "$track_abort(21,0):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(31,2252,2288)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36

    // assume Identical($t6, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
    assume ($t6 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t6) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
    if ($t6) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t5)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
    assume {:print "$at(31,2252,2288)"} true;
    assume {:print "$track_abort(21,0):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36

    // $t7 := TransactionFee::is_coin_initialized<#0>() on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:63:14+31
    assume {:print "$at(31,2319,2350)"} true;
    call $t7 := $1_TransactionFee_is_coin_initialized'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(31,2319,2350)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(21,0):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t8 := !($t7) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:63:13+1
    call $t8 := $Not($t7);

    // $t9 := 0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:39+16
    assume {:print "$at(31,2390,2406)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:13+43
    // >> opaque call: $t6 := Errors::already_published($t5)

    // $t10 := opaque begin: Errors::already_published($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:13+43

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:13+43
    assume $IsValid'u64'($t10);

    // assume Eq<u64>($t10, 6) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:13+43
    assume $IsEqual'u64'($t10, 6);

    // $t10 := opaque end: Errors::already_published($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:13+43

    // trace_local[tmp#$2]($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
    assume {:print "$at(31,2298,2417)"} true;
    assume {:print "$track_local(21,0,2):", $t10} $t10 == $t10;

    // trace_local[tmp#$1]($t8) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
    assume {:print "$track_local(21,0,1):", $t8} $t8 == $t8;

    // if ($t8) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
    if ($t8) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
    assume {:print "$at(31,2298,2417)"} true;
    assume {:print "$track_abort(21,0):", $t10} $t10 == $t10;

    // $t5 := move($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
    $t5 := $t10;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:67:13+10
    assume {:print "$at(31,2448,2458)"} true;
L0:

    // $t11 := Diem::zero<#0>() on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:69:26+12
    assume {:print "$at(31,2524,2536)"} true;
    call $t11 := $1_Diem_zero'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(31,2524,2536)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(21,0):", $t5} $t5 == $t5;
        goto L3;
    }

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // $t13 := Diem::create_preburn<#0>($t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:70:26+32
    assume {:print "$at(31,2563,2595)"} true;
    call $t13 := $1_Diem_create_preburn'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,2563,2595)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(21,0):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t14 := pack TransactionFee::TransactionFee<#0>($t11, $t13) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:68:13+137
    assume {:print "$at(31,2472,2609)"} true;
    $t14 := $1_TransactionFee_TransactionFee'$1_XUS_XUS'($t11, $t13);

    // move_to<TransactionFee::TransactionFee<#0>>($t14, $t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:66:9+7
    assume {:print "$at(31,2427,2434)"} true;
    if ($ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory := $ResourceUpdate($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t0, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(31,2427,2434)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(21,0):", $t5} $t5 == $t5;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:73:5+1
    assume {:print "$at(31,2624,2625)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:73:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:73:5+1
L3:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:73:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun TransactionFee::is_coin_initialized<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:48:5+150
procedure {:inline 1} $1_TransactionFee_is_coin_initialized'$1_XUS_XUS'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := CoreAddresses::TREASURY_COMPLIANCE_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:49:42+44
    assume {:print "$at(31,1755,1799)"} true;
    call $t0 := $1_CoreAddresses_TREASURY_COMPLIANCE_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(31,1755,1799)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(21,3):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := exists<TransactionFee::TransactionFee<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:49:9+6
    $t2 := $ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t0);

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:49:9+78
    assume {:print "$track_return(21,3,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:50:5+1
    assume {:print "$at(31,1805,1806)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:50:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:50:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:50:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun TransactionFee::is_coin_initialized<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:48:5+150
procedure {:inline 1} $1_TransactionFee_is_coin_initialized'#0'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := CoreAddresses::TREASURY_COMPLIANCE_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:49:42+44
    assume {:print "$at(31,1755,1799)"} true;
    call $t0 := $1_CoreAddresses_TREASURY_COMPLIANCE_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(31,1755,1799)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(21,3):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := exists<TransactionFee::TransactionFee<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:49:9+6
    $t2 := $ResourceExists($1_TransactionFee_TransactionFee'#0'_$memory, $t0);

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:49:9+78
    assume {:print "$track_return(21,3,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:50:5+1
    assume {:print "$at(31,1805,1806)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:50:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:50:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:50:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun TransactionFee::pay_fee<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:76:5+402
procedure {:inline 1} $1_TransactionFee_pay_fee'$1_XUS_XUS'(_$t0: $1_Diem_Diem'$1_XUS_XUS') returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_TransactionFee_TransactionFee'$1_XUS_XUS');
    var $t2: bool;
    var $t3: int;
    var $t4: $1_Diem_Diem'$1_XUS_XUS';
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $Mutation ($1_TransactionFee_TransactionFee'$1_XUS_XUS');
    var $t12: $Mutation ($1_Diem_Diem'$1_XUS_XUS');
    var $t13: $1_Diem_Diem'$1_XUS_XUS';
    var $t14: bool;
    var $t0: $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_TransactionFee_TransactionFee'$1_XUS_XUS'': $1_TransactionFee_TransactionFee'$1_XUS_XUS';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t12));

    // bytecode translation starts here
    // assume Identical($t4, select TransactionFee::TransactionFee.balance(TransactionFee::spec_transaction_fee<#0>())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:88:9+52
    assume {:print "$at(31,3250,3302)"} true;
    assume ($t4 == $balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'($1_TransactionFee_spec_transaction_fee'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory)));

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:76:5+1
    assume {:print "$at(31,2687,2688)"} true;
    assume {:print "$track_local(21,5,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(31,2779,2812)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33

    // assume Identical($t5, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
    assume ($t5 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t5) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
    if ($t5) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
L5:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t6)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
    assume {:print "$at(31,2779,2812)"} true;
    assume {:print "$track_abort(21,5):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
L4:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33

    // $t7 := TransactionFee::is_coin_initialized<#0>() on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:16+31
    assume {:print "$at(31,2829,2860)"} true;
    call $t7 := $1_TransactionFee_is_coin_initialized'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(31,2829,2860)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(21,5):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t8 := 0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:71+16
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:49+39
    // >> opaque call: $t6 := Errors::not_published($t5)

    // $t9 := opaque begin: Errors::not_published($t8) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:49+39

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:49+39
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:49+39
    assume $IsEqual'u64'($t9, 5);

    // $t9 := opaque end: Errors::not_published($t8) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:49+39

    // trace_local[tmp#$3]($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
    assume {:print "$track_local(21,5,3):", $t9} $t9 == $t9;

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
    assume {:print "$track_local(21,5,2):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
L1:

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
    assume {:print "$at(31,2822,2902)"} true;
    assume {:print "$track_abort(21,5):", $t9} $t9 == $t9;

    // $t6 := move($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
    $t6 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:80:13+44
    assume {:print "$at(31,2980,3024)"} true;
L0:

    // $t10 := CoreAddresses::TREASURY_COMPLIANCE_ADDRESS() on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:80:13+44
    call $t10 := $1_CoreAddresses_TREASURY_COMPLIANCE_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(31,2980,3024)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(21,5):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t11 := borrow_global<TransactionFee::TransactionFee<#0>>($t10) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:79:20+17
    assume {:print "$at(31,2923,2940)"} true;
    if (!$ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t10)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $Mutation($Global($t10), EmptyVec(), $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t10));
    }
    if ($abort_flag) {
        assume {:print "$at(31,2923,2940)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(21,5):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_local[fees]($t11) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:79:13+4
    $temp_0'$1_TransactionFee_TransactionFee'$1_XUS_XUS'' := $Dereference($t11);
    assume {:print "$track_local(21,5,1):", $temp_0'$1_TransactionFee_TransactionFee'$1_XUS_XUS''} $temp_0'$1_TransactionFee_TransactionFee'$1_XUS_XUS'' == $temp_0'$1_TransactionFee_TransactionFee'$1_XUS_XUS'';

    // $t12 := borrow_field<TransactionFee::TransactionFee<#0>>.balance($t11) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:23+17
    assume {:print "$at(31,3059,3076)"} true;
    $t12 := $ChildMutation($t11, 0, $balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'($Dereference($t11)));

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    // >> opaque call: Diem::deposit<#0>($t9, $t0)

    // opaque begin: Diem::deposit<#0>($t12, $t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38

    // $t13 := read_ref($t12) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    $t13 := $Dereference($t12);

    // assume Identical($t14, Gt(Add(select Diem::Diem.value($t12), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    assume ($t14 == (($value#$1_Diem_Diem'$1_XUS_XUS'($Dereference($t12)) + $value#$1_Diem_Diem'$1_XUS_XUS'($t0)) > 18446744073709551615));

    // if ($t14) goto L8 else goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    if ($t14) { goto L8; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
L7:

    // assume And(Gt(Add(select Diem::Diem.value($t12), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t6)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    assume ((($value#$1_Diem_Diem'$1_XUS_XUS'($Dereference($t12)) + $value#$1_Diem_Diem'$1_XUS_XUS'($t0)) > 18446744073709551615) && $IsEqual'u8'(8, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    assume {:print "$at(31,3045,3083)"} true;
    assume {:print "$track_abort(21,5):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
L6:

    // havoc[mut]($t12) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    havoc $temp_0'$1_Diem_Diem'$1_XUS_XUS'';
    $t12 := $UpdateMutation($t12, $temp_0'$1_Diem_Diem'$1_XUS_XUS'');
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($Dereference($t12));

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($Dereference($t12));

    // assume Eq<u64>(select Diem::Diem.value($t12), Add(select Diem::Diem.value($t13), select Diem::Diem.value($t0))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($Dereference($t12)), ($value#$1_Diem_Diem'$1_XUS_XUS'($t13) + $value#$1_Diem_Diem'$1_XUS_XUS'($t0)));

    // opaque end: Diem::deposit<#0>($t12, $t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38

    // write_back[Reference($t11).balance]($t12) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    $t11 := $UpdateMutation($t11, $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_balance($Dereference($t11), $Dereference($t12)));

    // write_back[TransactionFee::TransactionFee<#0>@]($t11) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory := $ResourceUpdate($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t11),
        $Dereference($t11));

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:83:5+1
    assume {:print "$at(31,3088,3089)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:83:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:83:5+1
L3:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:83:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t11) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// fun TransactionFee::pay_fee<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:76:5+402
procedure {:inline 1} $1_TransactionFee_pay_fee'#0'(_$t0: $1_Diem_Diem'#0') returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_TransactionFee_TransactionFee'#0');
    var $t2: bool;
    var $t3: int;
    var $t4: $1_Diem_Diem'#0';
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $Mutation ($1_TransactionFee_TransactionFee'#0');
    var $t12: $Mutation ($1_Diem_Diem'#0');
    var $t13: $1_Diem_Diem'#0';
    var $t14: bool;
    var $t0: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_TransactionFee_TransactionFee'#0'': $1_TransactionFee_TransactionFee'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t12));

    // bytecode translation starts here
    // assume Identical($t4, select TransactionFee::TransactionFee.balance(TransactionFee::spec_transaction_fee<#0>())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:88:9+52
    assume {:print "$at(31,3250,3302)"} true;
    assume ($t4 == $balance#$1_TransactionFee_TransactionFee'#0'($1_TransactionFee_spec_transaction_fee'#0'($1_TransactionFee_TransactionFee'#0'_$memory)));

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:76:5+1
    assume {:print "$at(31,2687,2688)"} true;
    assume {:print "$track_local(21,5,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(31,2779,2812)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33

    // assume Identical($t5, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
    assume ($t5 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t5) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
    if ($t5) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
L5:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t6)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
    assume {:print "$at(31,2779,2812)"} true;
    assume {:print "$track_abort(21,5):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33
L4:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:77:9+33

    // $t7 := TransactionFee::is_coin_initialized<#0>() on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:16+31
    assume {:print "$at(31,2829,2860)"} true;
    call $t7 := $1_TransactionFee_is_coin_initialized'#0'();
    if ($abort_flag) {
        assume {:print "$at(31,2829,2860)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(21,5):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t8 := 0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:71+16
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:49+39
    // >> opaque call: $t6 := Errors::not_published($t5)

    // $t9 := opaque begin: Errors::not_published($t8) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:49+39

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:49+39
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:49+39
    assume $IsEqual'u64'($t9, 5);

    // $t9 := opaque end: Errors::not_published($t8) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:49+39

    // trace_local[tmp#$3]($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
    assume {:print "$track_local(21,5,3):", $t9} $t9 == $t9;

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
    assume {:print "$track_local(21,5,2):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
L1:

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
    assume {:print "$at(31,2822,2902)"} true;
    assume {:print "$track_abort(21,5):", $t9} $t9 == $t9;

    // $t6 := move($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
    $t6 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:78:9+80
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:80:13+44
    assume {:print "$at(31,2980,3024)"} true;
L0:

    // $t10 := CoreAddresses::TREASURY_COMPLIANCE_ADDRESS() on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:80:13+44
    call $t10 := $1_CoreAddresses_TREASURY_COMPLIANCE_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(31,2980,3024)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(21,5):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t11 := borrow_global<TransactionFee::TransactionFee<#0>>($t10) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:79:20+17
    assume {:print "$at(31,2923,2940)"} true;
    if (!$ResourceExists($1_TransactionFee_TransactionFee'#0'_$memory, $t10)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $Mutation($Global($t10), EmptyVec(), $ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $t10));
    }
    if ($abort_flag) {
        assume {:print "$at(31,2923,2940)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(21,5):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_local[fees]($t11) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:79:13+4
    $temp_0'$1_TransactionFee_TransactionFee'#0'' := $Dereference($t11);
    assume {:print "$track_local(21,5,1):", $temp_0'$1_TransactionFee_TransactionFee'#0''} $temp_0'$1_TransactionFee_TransactionFee'#0'' == $temp_0'$1_TransactionFee_TransactionFee'#0'';

    // $t12 := borrow_field<TransactionFee::TransactionFee<#0>>.balance($t11) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:23+17
    assume {:print "$at(31,3059,3076)"} true;
    $t12 := $ChildMutation($t11, 0, $balance#$1_TransactionFee_TransactionFee'#0'($Dereference($t11)));

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    // >> opaque call: Diem::deposit<#0>($t9, $t0)

    // opaque begin: Diem::deposit<#0>($t12, $t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38

    // $t13 := read_ref($t12) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    $t13 := $Dereference($t12);

    // assume Identical($t14, Gt(Add(select Diem::Diem.value($t12), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    assume ($t14 == (($value#$1_Diem_Diem'#0'($Dereference($t12)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615));

    // if ($t14) goto L8 else goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    if ($t14) { goto L8; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
L7:

    // assume And(Gt(Add(select Diem::Diem.value($t12), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t6)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    assume ((($value#$1_Diem_Diem'#0'($Dereference($t12)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615) && $IsEqual'u8'(8, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    assume {:print "$at(31,3045,3083)"} true;
    assume {:print "$track_abort(21,5):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
L6:

    // havoc[mut]($t12) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t12 := $UpdateMutation($t12, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t12));

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t12));

    // assume Eq<u64>(select Diem::Diem.value($t12), Add(select Diem::Diem.value($t13), select Diem::Diem.value($t0))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t12)), ($value#$1_Diem_Diem'#0'($t13) + $value#$1_Diem_Diem'#0'($t0)));

    // opaque end: Diem::deposit<#0>($t12, $t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38

    // write_back[Reference($t11).balance]($t12) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    $t11 := $UpdateMutation($t11, $Update'$1_TransactionFee_TransactionFee'#0''_balance($Dereference($t11), $Dereference($t12)));

    // write_back[TransactionFee::TransactionFee<#0>@]($t11) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:82:9+38
    $1_TransactionFee_TransactionFee'#0'_$memory := $ResourceUpdate($1_TransactionFee_TransactionFee'#0'_$memory, $GlobalLocationAddress($t11),
        $Dereference($t11));

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:83:5+1
    assume {:print "$at(31,3088,3089)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:83:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:83:5+1
L3:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:83:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t11) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:122:10+85
function {:inline} $1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): bool {
    $ResourceExists($1_DualAttestation_Credential_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:255:10+94
function {:inline} $1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): Vec (int) {
    $base_url#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:271:10+120
function {:inline} $1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): Vec (int) {
    $compliance_public_key#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:300:10+183
function {:inline} $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): int {
    if ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr)) then ($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else (addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:338:10+205
function {:inline} $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int): bool {
    (($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$IsEqual'address'($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer), $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:343:10+307
function {:inline} $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit, payer: int, payee: int, deposit_value: int): bool {
    ((($1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory, deposit_value) >= $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory)) && !$IsEqual'address'(payer, payee)) && $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:374:10+104
function {:inline} $1_DualAttestation_spec_dual_attestation_message(payer: int, metadata: Vec (int), deposit_value: int): Vec (int);
axiom (forall payer: int, metadata: Vec (int), deposit_value: int ::
(var $$res := $1_DualAttestation_spec_dual_attestation_message(payer, metadata, deposit_value);
$IsValid'vec'u8''($$res)));

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:426:10+589
function {:inline} $1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, payer: int, payee: int, metadata_signature: Vec (int), metadata: Vec (int), deposit_value: int): bool {
    (var payee_compliance_key := $1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)); (($IsEqual'num'(LenVec(metadata_signature), 64) && !$1_Vector_$is_empty'u8'(payee_compliance_key)) && $1_Signature_$ed25519_verify(metadata_signature, payee_compliance_key, $1_DualAttestation_spec_dual_attestation_message(payer, metadata, deposit_value))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:546:9+103
function {:inline} $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): bool {
    $ResourceExists($1_DualAttestation_Limit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:551:9+129
function {:inline} $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): int {
    $micro_xdx_limit#$1_DualAttestation_Limit($ResourceValue($1_DualAttestation_Limit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))
}

// struct DualAttestation::BaseUrlRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:58:5+257
type {:datatype} $1_DualAttestation_BaseUrlRotationEvent;
function {:constructor} $1_DualAttestation_BaseUrlRotationEvent($new_base_url: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_BaseUrlRotationEvent;
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_new_base_url(s: $1_DualAttestation_BaseUrlRotationEvent, x: Vec (int)): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_BaseUrlRotationEvent, x: int): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_BaseUrlRotationEvent'(s: $1_DualAttestation_BaseUrlRotationEvent): bool {
    $IsValid'vec'u8''($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(s1: $1_DualAttestation_BaseUrlRotationEvent, s2: $1_DualAttestation_BaseUrlRotationEvent): bool {
    s1 == s2
}

// struct DualAttestation::ComplianceKeyRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:50:5+303
type {:datatype} $1_DualAttestation_ComplianceKeyRotationEvent;
function {:constructor} $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_ComplianceKeyRotationEvent;
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_new_compliance_public_key(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: Vec (int)): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: int): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_ComplianceKeyRotationEvent'(s: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    $IsValid'vec'u8''($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(s1: $1_DualAttestation_ComplianceKeyRotationEvent, s2: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    s1 == s2
}

// struct DualAttestation::Credential at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:20:5+1467
type {:datatype} $1_DualAttestation_Credential;
function {:constructor} $1_DualAttestation_Credential($human_name: Vec (int), $base_url: Vec (int), $compliance_public_key: Vec (int), $expiration_date: int, $compliance_key_rotation_events: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', $base_url_rotation_events: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential;
function {:inline} $Update'$1_DualAttestation_Credential'_human_name(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential(x, $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), x, $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_public_key(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), x, $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_expiration_date(s: $1_DualAttestation_Credential, x: int): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), x, $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_key_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), x, $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), x)
}
function $IsValid'$1_DualAttestation_Credential'(s: $1_DualAttestation_Credential): bool {
    $IsValid'vec'u8''($human_name#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($base_url#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($compliance_public_key#$1_DualAttestation_Credential(s))
      && $IsValid'u64'($expiration_date#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''($compliance_key_rotation_events#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''($base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Credential'(s1: $1_DualAttestation_Credential, s2: $1_DualAttestation_Credential): bool {
    s1 == s2
}
var $1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential;

// struct DualAttestation::Limit at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:45:5+58
type {:datatype} $1_DualAttestation_Limit;
function {:constructor} $1_DualAttestation_Limit($micro_xdx_limit: int): $1_DualAttestation_Limit;
function {:inline} $Update'$1_DualAttestation_Limit'_micro_xdx_limit(s: $1_DualAttestation_Limit, x: int): $1_DualAttestation_Limit {
    $1_DualAttestation_Limit(x)
}
function $IsValid'$1_DualAttestation_Limit'(s: $1_DualAttestation_Limit): bool {
    $IsValid'u64'($micro_xdx_limit#$1_DualAttestation_Limit(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Limit'(s1: $1_DualAttestation_Limit, s2: $1_DualAttestation_Limit): bool {
    s1 == s2
}
var $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit;

// fun DualAttestation::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:5+599
procedure {:inline 1} $1_DualAttestation_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: $1_DualAttestation_Limit;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u128': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t6, Mul(1000, Diem::spec_scaling_factor<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:501:9+86
    assume {:print "$at(21,22219,22305)"} true;
    assume ($t6 == (1000 * $1_Diem_spec_scaling_factor'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:5+1
    assume {:print "$at(21,21365,21366)"} true;
    assume {:print "$track_local(23,10,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(21,21418,21449)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31

    // assume Identical($t7, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
    assume ($t7 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t7) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
    if ($t7) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
L7:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t8)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
    assume {:print "$at(21,21418,21449)"} true;
    assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
L6:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(21,21459,21502)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43

    // assume Identical($t9, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
    assume ($t9 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t9) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
    if ($t9) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
L9:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
    assume {:print "$at(21,21459,21502)"} true;
    assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
    goto L5;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
L8:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43

    // $t10 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:31+34
    assume {:print "$at(21,21561,21595)"} true;
    call $t10 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(21,21561,21595)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t11 := exists<DualAttestation::Limit>($t10) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:17+6
    $t11 := $ResourceExists($1_DualAttestation_Limit_$memory, $t10);

    // $t12 := !($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:16+1
    call $t12 := $Not($t11);

    // $t13 := 1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:94+6
    $t13 := 1;
    assume $IsValid'u64'($t13);

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:68+33
    // >> opaque call: $t10 := Errors::already_published($t9)

    // $t14 := opaque begin: Errors::already_published($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:68+33

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:68+33
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 6) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:68+33
    assume $IsEqual'u64'($t14, 6);

    // $t14 := opaque end: Errors::already_published($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:68+33

    // trace_local[tmp#$3]($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
    assume {:print "$track_local(23,10,3):", $t14} $t14 == $t14;

    // trace_local[tmp#$2]($t12) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
    assume {:print "$track_local(23,10,2):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
    assume {:print "$at(21,21539,21632)"} true;
    assume {:print "$track_abort(23,10):", $t14} $t14 == $t14;

    // $t8 := move($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
    $t8 := $t14;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:30+30
    assume {:print "$at(21,21663,21693)"} true;
L0:

    // $t15 := 1000 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:30+30
    $t15 := 1000;
    assume $IsValid'u64'($t15);

    // $t16 := (u128)($t15) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:29+40
    call $t16 := $CastU128($t15);
    if ($abort_flag) {
        assume {:print "$at(21,21662,21702)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t17 := Diem::scaling_factor<XDX::XDX>() on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:73+27
    call $t17 := $1_Diem_scaling_factor'$1_XDX_XDX'();
    if ($abort_flag) {
        assume {:print "$at(21,21706,21733)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t18 := (u128)($t17) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:72+37
    call $t18 := $CastU128($t17);
    if ($abort_flag) {
        assume {:print "$at(21,21705,21742)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t19 := *($t16, $t18) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:70+1
    call $t19 := $MulU128($t16, $t18);
    if ($abort_flag) {
        assume {:print "$at(21,21703,21704)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // trace_local[initial_limit]($t19) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:13+13
    assume {:print "$track_local(23,10,1):", $t19} $t19 == $t19;

    // $t20 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:33+7
    assume {:print "$at(21,21776,21783)"} true;
    $t20 := 18446744073709551615;
    assume $IsValid'u128'($t20);

    // $t21 := <=($t19, $t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:30+2
    call $t21 := $Le($t19, $t20);

    // $t22 := 1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:65+6
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:42+30
    // >> opaque call: $t19 := Errors::limit_exceeded($t18)

    // $t23 := opaque begin: Errors::limit_exceeded($t22) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:42+30

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:42+30
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:42+30
    assume $IsEqual'u64'($t23, 8);

    // $t23 := opaque end: Errors::limit_exceeded($t22) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:42+30

    // trace_local[tmp#$5]($t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
    assume {:print "$track_local(23,10,5):", $t23} $t23 == $t23;

    // trace_local[tmp#$4]($t21) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
    assume {:print "$track_local(23,10,4):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
    assume {:print "$at(21,21752,21816)"} true;
    assume {:print "$track_abort(23,10):", $t23} $t23 == $t23;

    // $t8 := move($t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
    $t8 := $t23;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:491:13+10
    assume {:print "$at(21,21847,21857)"} true;
L2:

    // $t24 := (u64)($t19) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:493:34+22
    assume {:print "$at(21,21912,21934)"} true;
    call $t24 := $CastU64($t19);
    if ($abort_flag) {
        assume {:print "$at(21,21912,21934)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t25 := pack DualAttestation::Limit($t24) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:492:13+77
    assume {:print "$at(21,21871,21948)"} true;
    $t25 := $1_DualAttestation_Limit($t24);

    // move_to<DualAttestation::Limit>($t25, $t0) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:490:9+7
    assume {:print "$at(21,21826,21833)"} true;
    if ($ResourceExists($1_DualAttestation_Limit_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DualAttestation_Limit_$memory := $ResourceUpdate($1_DualAttestation_Limit_$memory, $t0, $t25);
    }
    if ($abort_flag) {
        assume {:print "$at(21,21826,21833)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:496:5+1
    assume {:print "$at(21,21963,21964)"} true;
L4:

    // return () at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:496:5+1
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:496:5+1
L5:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:496:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun DualAttestation::publish_credential [baseline] at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
procedure {:inline 1} $1_DualAttestation_publish_credential(_$t0: int, _$t1: int, _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: Vec (int);
    var $t22: Vec (int);
    var $t23: int;
    var $t24: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent';
    var $t25: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent';
    var $t26: $1_DualAttestation_Credential;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:562:9+44
    assume {:print "$at(26,25164,25208)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, select Roles::RoleId.role_id(global<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:564:9+43
    assume {:print "$at(26,25285,25328)"} true;
    assume ($t6 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)));

    // assume Identical($t7, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t1));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:562:9+44
    assume {:print "$at(26,25164,25208)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, select Roles::RoleId.role_id(global<Roles::RoleId>($t8))) at /home/ying/diem/language/diem-framework/modules/Roles.move:564:9+43
    assume {:print "$at(26,25285,25328)"} true;
    assume ($t9 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)));

    // trace_local[created]($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+1
    assume {:print "$at(21,4368,4369)"} true;
    assume {:print "$track_local(23,11,0):", $t0} $t0 == $t0;

    // trace_local[creator]($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+1
    assume {:print "$track_local(23,11,1):", $t1} $t1 == $t1;

    // trace_local[human_name]($t2) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+1
    assume {:print "$track_local(23,11,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    // >> opaque call: Roles::assert_parent_vasp_or_designated_dealer($t0)
    assume {:print "$at(21,4499,4554)"} true;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:562:9+44
    assume {:print "$at(26,25164,25208)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, select Roles::RoleId.role_id(global<Roles::RoleId>($t10))) at /home/ying/diem/language/diem-framework/modules/Roles.move:564:9+43
    assume {:print "$at(26,25285,25328)"} true;
    assume ($t11 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)));

    // opaque begin: Roles::assert_parent_vasp_or_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    assume {:print "$at(21,4499,4554)"} true;

    // assume Identical($t12, Or(Not(exists<Roles::RoleId>($t10)), And(Neq<u64>($t11, 5), Neq<u64>($t11, 2)))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    assume ($t12 == (!$ResourceExists($1_Roles_RoleId_$memory, $t10) || (!$IsEqual'u64'($t11, 5) && !$IsEqual'u64'($t11, 2))));

    // if ($t12) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
L5:

    // assume Or(And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t13)), And(And(Neq<u64>($t11, 5), Neq<u64>($t11, 2)), Eq(3, $t13))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'u8'(5, $t13)) || ((!$IsEqual'u64'($t11, 5) && !$IsEqual'u64'($t11, 2)) && $IsEqual'u8'(3, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    assume {:print "$at(21,4499,4554)"} true;
    assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
L4:

    // opaque end: Roles::assert_parent_vasp_or_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(21,4564,4606)"} true;

    // assume Identical($t14, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    assume {:print "$at(21,4564,4606)"} true;

    // assume Identical($t15, Or(Or(Not(exists<Roles::RoleId>($t14)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 1)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    assume ($t15 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t14) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t15) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    if ($t15) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
L7:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t13)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 1), Eq(3, $t13))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t13))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t13)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 1) && $IsEqual'u8'(3, $t13))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    assume {:print "$at(21,4564,4606)"} true;
    assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
L6:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:33+27
    // >> opaque call: $t5 := Signer::address_of($t0)
    assume {:print "$at(21,4656,4683)"} true;

    // $t16 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:33+27

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:33+27
    assume $IsValid'address'($t16);

    // assume Eq<address>($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:33+27
    assume $IsEqual'address'($t16, $1_Signer_spec_address_of($t0));

    // $t16 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:33+27

    // $t17 := exists<DualAttestation::Credential>($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:14+6
    $t17 := $ResourceExists($1_DualAttestation_Credential_$memory, $t16);

    // $t18 := !($t17) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:13+1
    call $t18 := $Not($t17);

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:104:39+11
    assume {:print "$at(21,4724,4735)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:104:13+38
    // >> opaque call: $t9 := Errors::already_published($t8)

    // $t20 := opaque begin: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:104:13+38

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:104:13+38
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 6) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:104:13+38
    assume $IsEqual'u64'($t20, 6);

    // $t20 := opaque end: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:104:13+38

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
    assume {:print "$at(21,4616,4746)"} true;
    assume {:print "$track_local(23,11,4):", $t20} $t20 == $t20;

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
    assume {:print "$track_local(23,11,3):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
    assume {:print "$at(21,4616,4746)"} true;
    assume {:print "$track_abort(23,11):", $t20} $t20 == $t20;

    // $t13 := move($t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
    $t13 := $t20;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:106:17+7
    assume {:print "$at(21,4764,4771)"} true;
L0:

    // $t21 := Vector::empty<u8>() on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:108:23+15
    assume {:print "$at(21,4832,4847)"} true;
    call $t21 := $1_Vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(21,4832,4847)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;
        goto L3;
    }

    // $t22 := Vector::empty<u8>() on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:109:36+15
    assume {:print "$at(21,4884,4899)"} true;
    call $t22 := $1_Vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(21,4884,4899)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;
        goto L3;
    }

    // $t23 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:111:30+7
    assume {:print "$at(21,5011,5018)"} true;
    $t23 := 18446744073709551615;
    assume $IsValid'u64'($t23);

    // $t24 := Event::new_event_handle<DualAttestation::ComplianceKeyRotationEvent>($t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:112:45+60
    assume {:print "$at(21,5064,5124)"} true;
    call $t24 := $1_Event_new_event_handle'$1_DualAttestation_ComplianceKeyRotationEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(21,5064,5124)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;
        goto L3;
    }

    // $t25 := Event::new_event_handle<DualAttestation::BaseUrlRotationEvent>($t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:113:39+54
    assume {:print "$at(21,5164,5218)"} true;
    call $t25 := $1_Event_new_event_handle'$1_DualAttestation_BaseUrlRotationEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(21,5164,5218)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;
        goto L3;
    }

    // $t26 := pack DualAttestation::Credential($t2, $t21, $t22, $t23, $t24, $t25) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:106:26+456
    assume {:print "$at(21,4773,5229)"} true;
    $t26 := $1_DualAttestation_Credential($t2, $t21, $t22, $t23, $t24, $t25);

    // move_to<DualAttestation::Credential>($t26, $t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:106:9+7
    if ($ResourceExists($1_DualAttestation_Credential_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DualAttestation_Credential_$memory := $ResourceUpdate($1_DualAttestation_Credential_$memory, $t0, $t26);
    }
    if ($abort_flag) {
        assume {:print "$at(21,4756,4763)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:115:5+1
    assume {:print "$at(21,5235,5236)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:115:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:115:5+1
L3:

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:115:5+1
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun DualAttestation::publish_credential [verification] at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
procedure {:timeLimit 40} $1_DualAttestation_publish_credential$verify(_$t0: int, _$t1: int, _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: Vec (int);
    var $t22: Vec (int);
    var $t23: int;
    var $t24: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent';
    var $t25: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent';
    var $t26: $1_DualAttestation_Credential;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Roles_RoleId_$memory#254: $Memory $1_Roles_RoleId;
    var $1_DualAttestation_Credential_$memory#255: $Memory $1_DualAttestation_Credential;
    var $1_DualAttestation_Limit_$memory#256: $Memory $1_DualAttestation_Limit;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(21,4368,5236)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
    assume $IsValid'vec'u8''($t2);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:562:9+44
    assume {:print "$at(26,25164,25208)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, select Roles::RoleId.role_id(global<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:564:9+43
    assume {:print "$at(26,25285,25328)"} true;
    assume ($t6 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)));

    // assume Identical($t7, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t1));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:562:9+44
    assume {:print "$at(26,25164,25208)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, select Roles::RoleId.role_id(global<Roles::RoleId>($t8))) at /home/ying/diem/language/diem-framework/modules/Roles.move:564:9+43
    assume {:print "$at(26,25285,25328)"} true;
    assume ($t9 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)));

    // @254 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+1
    assume {:print "$at(21,4368,4369)"} true;
    $1_Roles_RoleId_$memory#254 := $1_Roles_RoleId_$memory;

    // @255 := save_mem(DualAttestation::Credential) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+1
    $1_DualAttestation_Credential_$memory#255 := $1_DualAttestation_Credential_$memory;

    // @256 := save_mem(DualAttestation::Limit) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+1
    $1_DualAttestation_Limit_$memory#256 := $1_DualAttestation_Limit_$memory;

    // trace_local[created]($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+1
    assume {:print "$track_local(23,11,0):", $t0} $t0 == $t0;

    // trace_local[creator]($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+1
    assume {:print "$track_local(23,11,1):", $t1} $t1 == $t1;

    // trace_local[human_name]($t2) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+1
    assume {:print "$track_local(23,11,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    // >> opaque call: Roles::assert_parent_vasp_or_designated_dealer($t0)
    assume {:print "$at(21,4499,4554)"} true;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:562:9+44
    assume {:print "$at(26,25164,25208)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, select Roles::RoleId.role_id(global<Roles::RoleId>($t10))) at /home/ying/diem/language/diem-framework/modules/Roles.move:564:9+43
    assume {:print "$at(26,25285,25328)"} true;
    assume ($t11 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)));

    // opaque begin: Roles::assert_parent_vasp_or_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    assume {:print "$at(21,4499,4554)"} true;

    // assume Identical($t12, Or(Not(exists<Roles::RoleId>($t10)), And(Neq<u64>($t11, 5), Neq<u64>($t11, 2)))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    assume ($t12 == (!$ResourceExists($1_Roles_RoleId_$memory, $t10) || (!$IsEqual'u64'($t11, 5) && !$IsEqual'u64'($t11, 2))));

    // if ($t12) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
L5:

    // assume Or(And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t13)), And(And(Neq<u64>($t11, 5), Neq<u64>($t11, 2)), Eq(3, $t13))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'u8'(5, $t13)) || ((!$IsEqual'u64'($t11, 5) && !$IsEqual'u64'($t11, 2)) && $IsEqual'u8'(3, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    assume {:print "$at(21,4499,4554)"} true;
    assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55
L4:

    // opaque end: Roles::assert_parent_vasp_or_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+55

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(21,4564,4606)"} true;

    // assume Identical($t14, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    assume {:print "$at(21,4564,4606)"} true;

    // assume Identical($t15, Or(Or(Not(exists<Roles::RoleId>($t14)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 1)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    assume ($t15 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t14) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t15) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    if ($t15) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
L7:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t13)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 1), Eq(3, $t13))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t13))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t13)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 1) && $IsEqual'u8'(3, $t13))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    assume {:print "$at(21,4564,4606)"} true;
    assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42
L6:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+42

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:33+27
    // >> opaque call: $t5 := Signer::address_of($t0)
    assume {:print "$at(21,4656,4683)"} true;

    // $t16 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:33+27

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:33+27
    assume $IsValid'address'($t16);

    // assume Eq<address>($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:33+27
    assume $IsEqual'address'($t16, $1_Signer_spec_address_of($t0));

    // $t16 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:33+27

    // $t17 := exists<DualAttestation::Credential>($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:14+6
    $t17 := $ResourceExists($1_DualAttestation_Credential_$memory, $t16);

    // $t18 := !($t17) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:13+1
    call $t18 := $Not($t17);

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:104:39+11
    assume {:print "$at(21,4724,4735)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:104:13+38
    // >> opaque call: $t9 := Errors::already_published($t8)

    // $t20 := opaque begin: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:104:13+38

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:104:13+38
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 6) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:104:13+38
    assume $IsEqual'u64'($t20, 6);

    // $t20 := opaque end: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:104:13+38

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
    assume {:print "$at(21,4616,4746)"} true;
    assume {:print "$track_local(23,11,4):", $t20} $t20 == $t20;

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
    assume {:print "$track_local(23,11,3):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
    assume {:print "$at(21,4616,4746)"} true;
    assume {:print "$track_abort(23,11):", $t20} $t20 == $t20;

    // $t13 := move($t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
    $t13 := $t20;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:9+130
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:106:17+7
    assume {:print "$at(21,4764,4771)"} true;
L0:

    // $t21 := Vector::empty<u8>() on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:108:23+15
    assume {:print "$at(21,4832,4847)"} true;
    call $t21 := $1_Vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(21,4832,4847)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;
        goto L3;
    }

    // $t22 := Vector::empty<u8>() on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:109:36+15
    assume {:print "$at(21,4884,4899)"} true;
    call $t22 := $1_Vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(21,4884,4899)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;
        goto L3;
    }

    // $t23 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:111:30+7
    assume {:print "$at(21,5011,5018)"} true;
    $t23 := 18446744073709551615;
    assume $IsValid'u64'($t23);

    // $t24 := Event::new_event_handle<DualAttestation::ComplianceKeyRotationEvent>($t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:112:45+60
    assume {:print "$at(21,5064,5124)"} true;
    call $t24 := $1_Event_new_event_handle'$1_DualAttestation_ComplianceKeyRotationEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(21,5064,5124)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;
        goto L3;
    }

    // $t25 := Event::new_event_handle<DualAttestation::BaseUrlRotationEvent>($t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:113:39+54
    assume {:print "$at(21,5164,5218)"} true;
    call $t25 := $1_Event_new_event_handle'$1_DualAttestation_BaseUrlRotationEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(21,5164,5218)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;
        goto L3;
    }

    // $t26 := pack DualAttestation::Credential($t2, $t21, $t22, $t23, $t24, $t25) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:106:26+456
    assume {:print "$at(21,4773,5229)"} true;
    $t26 := $1_DualAttestation_Credential($t2, $t21, $t22, $t23, $t24, $t25);

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:95:5+868
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume {:print "$at(21,4368,5236)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // move_to<DualAttestation::Credential>($t26, $t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:106:9+7
    assume {:print "$at(21,4756,4763)"} true;
    if ($ResourceExists($1_DualAttestation_Credential_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DualAttestation_Credential_$memory := $ResourceUpdate($1_DualAttestation_Credential_$memory, $t0, $t26);
    }
    if ($abort_flag) {
        assume {:print "$at(21,4756,4763)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(23,11):", $t13} $t13 == $t13;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume {:print "$at(11,106427,106628)"} true;
    assert {:msg "assert_failed(11,106427,106628): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:115:5+1
    assume {:print "$at(21,5235,5236)"} true;
L2:

    // assert Not(Not(exists[@254]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:563:9+59
    assume {:print "$at(26,25217,25276)"} true;
    assert {:msg "assert_failed(26,25217,25276): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#254, $t5);

    // assert Not(And(Neq<u64>($t6, 5), Neq<u64>($t6, 2))) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+120
    assume {:print "$at(26,25337,25457)"} true;
    assert {:msg "assert_failed(26,25337,25457): function does not abort under this condition"}
      !(!$IsEqual'u64'($t6, 5) && !$IsEqual'u64'($t6, 2));

    // assert Not(Not(exists[@254]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#254, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@254]<Roles::RoleId>($t7)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#254, $t7)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(DualAttestation::spec_has_credential[@255](Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:120:9+95
    assume {:print "$at(21,5551,5646)"} true;
    assert {:msg "assert_failed(21,5551,5646): function does not abort under this condition"}
      !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#255, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@254]<Roles::RoleId>($t8))) at /home/ying/diem/language/diem-framework/modules/Roles.move:563:9+59
    assume {:print "$at(26,25217,25276)"} true;
    assert {:msg "assert_failed(26,25217,25276): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#254, $t8);

    // assert Not(And(Neq<u64>($t9, 5), Neq<u64>($t9, 2))) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+120
    assume {:print "$at(26,25337,25457)"} true;
    assert {:msg "assert_failed(26,25337,25457): function does not abort under this condition"}
      !(!$IsEqual'u64'($t9, 5) && !$IsEqual'u64'($t9, 2));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential[@255](addr1), DualAttestation::spec_has_credential(addr1)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:560:9+122
    assume {:print "$at(21,24819,24941)"} true;
    assert {:msg "assert_failed(21,24819,24941): post-condition does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#255, addr1) ==> $1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1))));

    // assert Implies(DualAttestation::spec_is_published[@256](), Eq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@256]())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:587:9+119
    assume {:print "$at(21,26138,26257)"} true;
    assert {:msg "assert_failed(21,26138,26257): post-condition does not hold"}
      ($1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#256) ==> $IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#256)));

    // assert forall addr1: TypeDomain<address>() where DualAttestation::spec_has_credential[@255](addr1): Eq<vector<u8>>(select DualAttestation::Credential.compliance_public_key(global<DualAttestation::Credential>(addr1)), select DualAttestation::Credential.compliance_public_key(global[@255]<DualAttestation::Credential>(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:597:9+185
    assume {:print "$at(21,26579,26764)"} true;
    assert {:msg "assert_failed(21,26579,26764): post-condition does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#255, addr1))  ==> ($IsEqual'vec'u8''($compliance_public_key#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr1)), $compliance_public_key#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory#255, addr1)))));

    // assert forall addr1: TypeDomain<address>() where DualAttestation::spec_has_credential[@255](addr1): Eq<vector<u8>>(select DualAttestation::Credential.base_url(global<DualAttestation::Credential>(addr1)), select DualAttestation::Credential.base_url(global[@255]<DualAttestation::Credential>(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:607:9+159
    assume {:print "$at(21,27043,27202)"} true;
    assert {:msg "assert_failed(21,27043,27202): post-condition does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#255, addr1))  ==> ($IsEqual'vec'u8''($base_url#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr1)), $base_url#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory#255, addr1)))));

    // return () at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:607:9+159
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:115:5+1
    assume {:print "$at(21,5235,5236)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Or(Or(Not(exists[@254]<Roles::RoleId>($t5)), And(Neq<u64>($t6, 5), Neq<u64>($t6, 2))), Not(exists[@254]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@254]<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), DualAttestation::spec_has_credential[@255](Signer::spec_address_of[]($t0))), Not(exists[@254]<Roles::RoleId>($t8))), And(Neq<u64>($t9, 5), Neq<u64>($t9, 2))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:116:5+411
    assume {:print "$at(21,5241,5652)"} true;
    assert {:msg "assert_failed(21,5241,5652): abort not covered by any of the `aborts_if` clauses"}
      (((((((!$ResourceExists($1_Roles_RoleId_$memory#254, $t5) || (!$IsEqual'u64'($t6, 5) && !$IsEqual'u64'($t6, 2))) || !$ResourceExists($1_Roles_RoleId_$memory#254, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#254, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || $1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#255, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#254, $t8)) || (!$IsEqual'u64'($t9, 5) && !$IsEqual'u64'($t9, 2)));

    // assert Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@254]<Roles::RoleId>($t5)), Eq(5, $t13)), And(And(Neq<u64>($t6, 5), Neq<u64>($t6, 2)), Eq(3, $t13))), And(Not(exists[@254]<Roles::RoleId>($t7)), Eq(5, $t13))), And(Neq<u64>(select Roles::RoleId.role_id(global[@254]<Roles::RoleId>($t7)), 1), Eq(3, $t13))), And(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t13))), And(DualAttestation::spec_has_credential[@255](Signer::spec_address_of[]($t0)), Eq(6, $t13))), And(Not(exists[@254]<Roles::RoleId>($t8)), Eq(5, $t13))), And(And(Neq<u64>($t9, 5), Neq<u64>($t9, 2)), Eq(3, $t13))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:116:5+411
    assert {:msg "assert_failed(21,5241,5652): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((!$ResourceExists($1_Roles_RoleId_$memory#254, $t5) && $IsEqual'u8'(5, $t13)) || ((!$IsEqual'u64'($t6, 5) && !$IsEqual'u64'($t6, 2)) && $IsEqual'u8'(3, $t13))) || (!$ResourceExists($1_Roles_RoleId_$memory#254, $t7) && $IsEqual'u8'(5, $t13))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#254, $t7)), 1) && $IsEqual'u8'(3, $t13))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t13))) || ($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#255, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(6, $t13))) || (!$ResourceExists($1_Roles_RoleId_$memory#254, $t8) && $IsEqual'u8'(5, $t13))) || ((!$IsEqual'u64'($t9, 5) && !$IsEqual'u64'($t9, 2)) && $IsEqual'u8'(3, $t13)));

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:116:5+411
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun DualAttestation::rotate_base_url [verification] at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
procedure {:timeLimit 40} $1_DualAttestation_rotate_base_url$verify(_$t0: int, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation ($1_DualAttestation_Credential);
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent';
    var $t10: $1_DualAttestation_BaseUrlRotationEvent;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $Mutation ($1_DualAttestation_Credential);
    var $t17: $Mutation (Vec (int));
    var $t18: $Mutation ($1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent');
    var $t19: int;
    var $t20: bool;
    var $t21: $1_DualAttestation_BaseUrlRotationEvent;
    var $t0: int;
    var $t1: Vec (int);
    var $temp_0'$1_DualAttestation_Credential': $1_DualAttestation_Credential;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DualAttestation_Credential_$memory#228: $Memory $1_DualAttestation_Credential;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#229: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DualAttestation_Limit_$memory#230: $Memory $1_DualAttestation_Limit;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t16));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(21,5808,6335)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    assume $IsValid'vec'u8''($t1);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:144:9+46
    assume {:print "$at(21,6555,6601)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:158:9+46
    assume {:print "$at(21,7054,7100)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:168:9+46
    assume {:print "$at(21,7499,7545)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, select DualAttestation::Credential.base_url_rotation_events(global<DualAttestation::Credential>($t8))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:169:9+65
    assume {:print "$at(21,7554,7619)"} true;
    assume ($t9 == $base_url_rotation_events#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, $t8)));

    // assume Identical($t10, pack DualAttestation::BaseUrlRotationEvent($t1, DiemTimestamp::spec_now_seconds())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:170:9+147
    assume {:print "$at(21,7628,7775)"} true;
    assume ($t10 == $1_DualAttestation_BaseUrlRotationEvent($t1, $1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // @229 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+1
    assume {:print "$at(21,5808,5809)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#229 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @228 := save_mem(DualAttestation::Credential) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+1
    $1_DualAttestation_Credential_$memory#228 := $1_DualAttestation_Credential_$memory;

    // @230 := save_mem(DualAttestation::Limit) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+1
    $1_DualAttestation_Limit_$memory#230 := $1_DualAttestation_Limit_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+1
    assume {:print "$track_local(23,12,0):", $t0} $t0 == $t0;

    // trace_local[new_url]($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+1
    assume {:print "$track_local(23,12,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:128:20+27
    // >> opaque call: $t6 := Signer::address_of($t0)
    assume {:print "$at(21,5915,5942)"} true;

    // $t11 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:128:20+27

    // assume WellFormed($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:128:20+27
    assume $IsValid'address'($t11);

    // assume Eq<address>($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:128:20+27
    assume $IsEqual'address'($t11, $1_Signer_spec_address_of($t0));

    // $t11 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:128:20+27

    // trace_local[addr]($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:128:13+4
    assume {:print "$track_local(23,12,2):", $t11} $t11 == $t11;

    // $t12 := exists<DualAttestation::Credential>($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:16+6
    assume {:print "$at(21,5959,5965)"} true;
    $t12 := $ResourceExists($1_DualAttestation_Credential_$memory, $t11);

    // $t13 := 0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:64+11
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:42+34
    // >> opaque call: $t9 := Errors::not_published($t8)

    // $t14 := opaque begin: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:42+34

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:42+34
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 5) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:42+34
    assume $IsEqual'u64'($t14, 5);

    // $t14 := opaque end: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:42+34

    // trace_local[tmp#$5]($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:9+68
    assume {:print "$track_local(23,12,5):", $t14} $t14 == $t14;

    // trace_local[tmp#$4]($t12) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:9+68
    assume {:print "$track_local(23,12,4):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:9+68
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:9+68
L1:

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:9+68
    assume {:print "$at(21,5952,6020)"} true;
    assume {:print "$track_abort(23,12):", $t14} $t14 == $t14;

    // $t15 := move($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:9+68
    $t15 := $t14;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:129:9+68
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:130:56+4
    assume {:print "$at(21,6077,6081)"} true;
L0:

    // $t16 := borrow_global<DualAttestation::Credential>($t11) on_abort goto L3 with $t15 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:130:26+17
    if (!$ResourceExists($1_DualAttestation_Credential_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t16 := $Mutation($Global($t11), EmptyVec(), $ResourceValue($1_DualAttestation_Credential_$memory, $t11));
    }
    if ($abort_flag) {
        assume {:print "$at(21,6047,6064)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(23,12):", $t15} $t15 == $t15;
        goto L3;
    }

    // trace_local[credential]($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:130:13+10
    $temp_0'$1_DualAttestation_Credential' := $Dereference($t16);
    assume {:print "$track_local(23,12,3):", $temp_0'$1_DualAttestation_Credential'} $temp_0'$1_DualAttestation_Credential' == $temp_0'$1_DualAttestation_Credential';

    // $t17 := borrow_field<DualAttestation::Credential>.base_url($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:131:9+19
    assume {:print "$at(21,6092,6111)"} true;
    $t17 := $ChildMutation($t16, 1, $base_url#$1_DualAttestation_Credential($Dereference($t16)));

    // write_ref($t17, $t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:131:9+34
    $t17 := $UpdateMutation($t17, $t1);

    // write_back[Reference($t16).base_url]($t17) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:131:9+34
    $t16 := $UpdateMutation($t16, $Update'$1_DualAttestation_Credential'_base_url($Dereference($t16), $Dereference($t17)));

    // $t18 := borrow_field<DualAttestation::Credential>.base_url_rotation_events($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:132:27+40
    assume {:print "$at(21,6154,6194)"} true;
    $t18 := $ChildMutation($t16, 5, $base_url_rotation_events#$1_DualAttestation_Credential($Dereference($t16)));

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:134:35+28
    // >> opaque call: $t13 := DiemTimestamp::now_seconds()
    assume {:print "$at(21,6288,6316)"} true;

    // $t19 := opaque begin: DiemTimestamp::now_seconds() at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:134:35+28

    // assume Identical($t20, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:134:35+28
    assume ($t20 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t20) goto L6 else goto L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:134:35+28
    if ($t20) { goto L6; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:134:35+28
L5:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t15)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:134:35+28
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t15));

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:134:35+28
    assume {:print "$at(21,6288,6316)"} true;
    assume {:print "$track_abort(23,12):", $t15} $t15 == $t15;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:134:35+28
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:134:35+28
L4:

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:134:35+28
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, Div(DiemTimestamp::spec_now_microseconds(), 1000000)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:134:35+28
    assume $IsEqual'u64'($t19, ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) div 1000000));

    // $t19 := opaque end: DiemTimestamp::now_seconds() at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:134:35+28

    // $t21 := pack DualAttestation::BaseUrlRotationEvent($t1, $t19) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:132:69+131
    assume {:print "$at(21,6196,6327)"} true;
    $t21 := $1_DualAttestation_BaseUrlRotationEvent($t1, $t19);

    // Event::emit_event<DualAttestation::BaseUrlRotationEvent>($t18, $t21) on_abort goto L3 with $t15 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:132:9+192
    call $t18 := $1_Event_emit_event'$1_DualAttestation_BaseUrlRotationEvent'($t18, $t21);
    if ($abort_flag) {
        assume {:print "$at(21,6136,6328)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(23,12):", $t15} $t15 == $t15;
        goto L3;
    }

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:127:5+527
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume {:print "$at(21,5808,6335)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // write_back[DualAttestation::Credential@]($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:132:9+192
    assume {:print "$at(21,6136,6328)"} true;
    $1_DualAttestation_Credential_$memory := $ResourceUpdate($1_DualAttestation_Credential_$memory, $GlobalLocationAddress($t16),
        $Dereference($t16));

    // assert forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume {:print "$at(11,106427,106628)"} true;
    assert {:msg "assert_failed(11,106427,106628): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:136:5+1
    assume {:print "$at(21,6334,6335)"} true;
L2:

    // assert Not(Not(DualAttestation::spec_has_credential[@228]($t6))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:153:9+64
    assume {:print "$at(21,6882,6946)"} true;
    assert {:msg "assert_failed(21,6882,6946): function does not abort under this condition"}
      !!$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#228, $t6);

    // assert Not(Not(DiemTimestamp::$is_operating[@229]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#229);

    // assert Eq<vector<u8>>(select DualAttestation::Credential.base_url(global<DualAttestation::Credential>($t7)), $t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:160:9+55
    assume {:print "$at(21,7110,7165)"} true;
    assert {:msg "assert_failed(21,7110,7165): post-condition does not hold"}
      $IsEqual'vec'u8''($base_url#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, $t7)), $t1);

    // assert forall addr1: TypeDomain<address>() where Neq<address>(addr1, $t7): Eq<vector<u8>>(select DualAttestation::Credential.base_url(global<DualAttestation::Credential>(addr1)), select DualAttestation::Credential.base_url(global[@228]<DualAttestation::Credential>(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:162:9+142
    assume {:print "$at(21,7251,7393)"} true;
    assert {:msg "assert_failed(21,7251,7393): post-condition does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (!$IsEqual'address'(addr1, $t7))  ==> ($IsEqual'vec'u8''($base_url#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr1)), $base_url#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory#228, addr1)))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential[@228](addr1), DualAttestation::spec_has_credential(addr1)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:560:9+122
    assume {:print "$at(21,24819,24941)"} true;
    assert {:msg "assert_failed(21,24819,24941): post-condition does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#228, addr1) ==> $1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1))));

    // assert forall addr1: TypeDomain<address>(): Implies(Not(DualAttestation::spec_has_credential[@228](addr1)), Not(DualAttestation::spec_has_credential(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:566:9+124
    assume {:print "$at(21,25049,25173)"} true;
    assert {:msg "assert_failed(21,25049,25173): post-condition does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ((!$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#228, addr1) ==> !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1))));

    // assert Implies(DualAttestation::spec_is_published[@230](), Eq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@230]())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:587:9+119
    assume {:print "$at(21,26138,26257)"} true;
    assert {:msg "assert_failed(21,26138,26257): post-condition does not hold"}
      ($1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#230) ==> $IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#230)));

    // assert forall addr1: TypeDomain<address>() where DualAttestation::spec_has_credential[@228](addr1): Eq<vector<u8>>(select DualAttestation::Credential.compliance_public_key(global<DualAttestation::Credential>(addr1)), select DualAttestation::Credential.compliance_public_key(global[@228]<DualAttestation::Credential>(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:597:9+185
    assume {:print "$at(21,26579,26764)"} true;
    assert {:msg "assert_failed(21,26579,26764): post-condition does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#228, addr1))  ==> ($IsEqual'vec'u8''($compliance_public_key#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr1)), $compliance_public_key#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory#228, addr1)))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t10, $t9)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:174:9+20
    assume {:print "$at(21,7784,7804)"} true;
    assert {:msg "assert_failed(21,7784,7804): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'($EmptyEventStore, $t9, $t10); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t10, $t9)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:137:5+141
    assume {:print "$at(21,6340,6481)"} true;
    assert {:msg "assert_failed(21,6340,6481): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'($EmptyEventStore, $t9, $t10); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:137:5+141
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:136:5+1
    assume {:print "$at(21,6334,6335)"} true;
L3:

    // assert Or(Not(DualAttestation::spec_has_credential[@228]($t6)), Not(DiemTimestamp::$is_operating[@229]())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:137:5+141
    assume {:print "$at(21,6340,6481)"} true;
    assert {:msg "assert_failed(21,6340,6481): abort not covered by any of the `aborts_if` clauses"}
      (!$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#228, $t6) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#229));

    // assert Or(And(Not(DualAttestation::spec_has_credential[@228]($t6)), Eq(5, $t15)), And(Not(DiemTimestamp::$is_operating[@229]()), Eq(1, $t15))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:137:5+141
    assert {:msg "assert_failed(21,6340,6481): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((!$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#228, $t6) && $IsEqual'u8'(5, $t15)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#229) && $IsEqual'u8'(1, $t15)));

    // abort($t15) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:137:5+141
    $abort_code := $t15;
    $abort_flag := true;
    return;

    // label L6 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L6:

    // destroy($t16) at <internal>:1:1+10

    // destroy($t18) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun DualAttestation::rotate_compliance_public_key [verification] at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
procedure {:timeLimit 40} $1_DualAttestation_rotate_compliance_public_key$verify(_$t0: int, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation ($1_DualAttestation_Credential);
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent';
    var $t12: $1_DualAttestation_ComplianceKeyRotationEvent;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: $Mutation ($1_DualAttestation_Credential);
    var $t22: $Mutation (Vec (int));
    var $t23: $Mutation ($1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent');
    var $t24: int;
    var $t25: bool;
    var $t26: $1_DualAttestation_ComplianceKeyRotationEvent;
    var $t0: int;
    var $t1: Vec (int);
    var $temp_0'$1_DualAttestation_Credential': $1_DualAttestation_Credential;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DualAttestation_Credential_$memory#231: $Memory $1_DualAttestation_Credential;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#232: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DualAttestation_Limit_$memory#233: $Memory $1_DualAttestation_Limit;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t22));
    assume IsEmptyVec(p#$Mutation($t23));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(21,7885,8600)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    assume $IsValid'vec'u8''($t1);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:202:9+46
    assume {:print "$at(21,8911,8957)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:213:9+46
    assume {:print "$at(21,9375,9421)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:222:9+46
    assume {:print "$at(21,9881,9927)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, select DualAttestation::Credential.compliance_key_rotation_events(global<DualAttestation::Credential>($t10))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:223:9+71
    assume {:print "$at(21,9936,10007)"} true;
    assume ($t11 == $compliance_key_rotation_events#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, $t10)));

    // assume Identical($t12, pack DualAttestation::ComplianceKeyRotationEvent($t1, DiemTimestamp::spec_now_seconds())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:224:9+166
    assume {:print "$at(21,10016,10182)"} true;
    assume ($t12 == $1_DualAttestation_ComplianceKeyRotationEvent($t1, $1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // @232 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+1
    assume {:print "$at(21,7885,7886)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#232 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @231 := save_mem(DualAttestation::Credential) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+1
    $1_DualAttestation_Credential_$memory#231 := $1_DualAttestation_Credential_$memory;

    // @233 := save_mem(DualAttestation::Limit) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+1
    $1_DualAttestation_Limit_$memory#233 := $1_DualAttestation_Limit_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+1
    assume {:print "$track_local(23,13,0):", $t0} $t0 == $t0;

    // trace_local[new_key]($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+1
    assume {:print "$track_local(23,13,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:182:20+27
    // >> opaque call: $t8 := Signer::address_of($t0)
    assume {:print "$at(21,8028,8055)"} true;

    // $t13 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:182:20+27

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:182:20+27
    assume $IsValid'address'($t13);

    // assume Eq<address>($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:182:20+27
    assume $IsEqual'address'($t13, $1_Signer_spec_address_of($t0));

    // $t13 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:182:20+27

    // trace_local[addr]($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:182:13+4
    assume {:print "$track_local(23,13,2):", $t13} $t13 == $t13;

    // $t14 := exists<DualAttestation::Credential>($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:16+6
    assume {:print "$at(21,8072,8078)"} true;
    $t14 := $ResourceExists($1_DualAttestation_Credential_$memory, $t13);

    // $t15 := 0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:64+11
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:42+34
    // >> opaque call: $t11 := Errors::not_published($t10)

    // $t16 := opaque begin: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:42+34

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:42+34
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 5) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:42+34
    assume $IsEqual'u64'($t16, 5);

    // $t16 := opaque end: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:42+34

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:9+68
    assume {:print "$track_local(23,13,5):", $t16} $t16 == $t16;

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:9+68
    assume {:print "$track_local(23,13,4):", $t14} $t14 == $t14;

    // if ($t14) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:9+68
    if ($t14) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:9+68
L1:

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:9+68
    assume {:print "$at(21,8065,8133)"} true;
    assume {:print "$track_abort(23,13):", $t16} $t16 == $t16;

    // $t17 := move($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:9+68
    $t17 := $t16;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:183:9+68
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:51+12
    assume {:print "$at(21,8185,8197)"} true;
L0:

    // $t18 := Signature::ed25519_validate_pubkey($t1) on_abort goto L5 with $t17 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:16+48
    call $t18 := $1_Signature_ed25519_validate_pubkey($t1);
    if ($abort_flag) {
        assume {:print "$at(21,8150,8198)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(23,13):", $t17} $t17 == $t17;
        goto L5;
    }

    // $t19 := 2 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:91+19
    $t19 := 2;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:66+45
    // >> opaque call: $t14 := Errors::invalid_argument($t13)

    // $t20 := opaque begin: Errors::invalid_argument($t19) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:66+45

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:66+45
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 7) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:66+45
    assume $IsEqual'u64'($t20, 7);

    // $t20 := opaque end: Errors::invalid_argument($t19) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:66+45

    // trace_local[tmp#$7]($t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:9+103
    assume {:print "$track_local(23,13,7):", $t20} $t20 == $t20;

    // trace_local[tmp#$6]($t18) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:9+103
    assume {:print "$track_local(23,13,6):", $t18} $t18 == $t18;

    // if ($t18) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:9+103
    if ($t18) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:9+103
L3:

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:9+103
    assume {:print "$at(21,8143,8246)"} true;
    assume {:print "$track_abort(23,13):", $t20} $t20 == $t20;

    // $t17 := move($t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:9+103
    $t17 := $t20;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:184:9+103
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:185:56+4
    assume {:print "$at(21,8303,8307)"} true;
L2:

    // $t21 := borrow_global<DualAttestation::Credential>($t13) on_abort goto L5 with $t17 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:185:26+17
    if (!$ResourceExists($1_DualAttestation_Credential_$memory, $t13)) {
        call $ExecFailureAbort();
    } else {
        $t21 := $Mutation($Global($t13), EmptyVec(), $ResourceValue($1_DualAttestation_Credential_$memory, $t13));
    }
    if ($abort_flag) {
        assume {:print "$at(21,8273,8290)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(23,13):", $t17} $t17 == $t17;
        goto L5;
    }

    // trace_local[credential]($t21) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:185:13+10
    $temp_0'$1_DualAttestation_Credential' := $Dereference($t21);
    assume {:print "$track_local(23,13,3):", $temp_0'$1_DualAttestation_Credential'} $temp_0'$1_DualAttestation_Credential' == $temp_0'$1_DualAttestation_Credential';

    // $t22 := borrow_field<DualAttestation::Credential>.compliance_public_key($t21) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:186:9+32
    assume {:print "$at(21,8318,8350)"} true;
    $t22 := $ChildMutation($t21, 2, $compliance_public_key#$1_DualAttestation_Credential($Dereference($t21)));

    // write_ref($t22, $t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:186:9+47
    $t22 := $UpdateMutation($t22, $t1);

    // write_back[Reference($t21).compliance_public_key]($t22) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:186:9+47
    $t21 := $UpdateMutation($t21, $Update'$1_DualAttestation_Credential'_compliance_public_key($Dereference($t21), $Dereference($t22)));

    // $t23 := borrow_field<DualAttestation::Credential>.compliance_key_rotation_events($t21) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:187:27+46
    assume {:print "$at(21,8393,8439)"} true;
    $t23 := $ChildMutation($t21, 4, $compliance_key_rotation_events#$1_DualAttestation_Credential($Dereference($t21)));

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:189:35+28
    // >> opaque call: $t18 := DiemTimestamp::now_seconds()
    assume {:print "$at(21,8552,8580)"} true;

    // $t24 := opaque begin: DiemTimestamp::now_seconds() at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:189:35+28

    // assume Identical($t25, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:189:35+28
    assume ($t25 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t25) goto L8 else goto L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:189:35+28
    if ($t25) { goto L8; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:189:35+28
L7:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:189:35+28
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:189:35+28
    assume {:print "$at(21,8552,8580)"} true;
    assume {:print "$track_abort(23,13):", $t17} $t17 == $t17;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:189:35+28
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:189:35+28
L6:

    // assume WellFormed($t24) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:189:35+28
    assume $IsValid'u64'($t24);

    // assume Eq<u64>($t24, Div(DiemTimestamp::spec_now_microseconds(), 1000000)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:189:35+28
    assume $IsEqual'u64'($t24, ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) div 1000000));

    // $t24 := opaque end: DiemTimestamp::now_seconds() at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:189:35+28

    // $t26 := pack DualAttestation::ComplianceKeyRotationEvent($t1, $t24) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:187:75+150
    assume {:print "$at(21,8441,8591)"} true;
    $t26 := $1_DualAttestation_ComplianceKeyRotationEvent($t1, $t24);

    // Event::emit_event<DualAttestation::ComplianceKeyRotationEvent>($t23, $t26) on_abort goto L5 with $t17 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:187:9+217
    call $t23 := $1_Event_emit_event'$1_DualAttestation_ComplianceKeyRotationEvent'($t23, $t26);
    if ($abort_flag) {
        assume {:print "$at(21,8375,8592)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(23,13):", $t17} $t17 == $t17;
        goto L5;
    }

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:178:5+715
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume {:print "$at(21,7885,8600)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // write_back[DualAttestation::Credential@]($t21) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:187:9+217
    assume {:print "$at(21,8375,8592)"} true;
    $1_DualAttestation_Credential_$memory := $ResourceUpdate($1_DualAttestation_Credential_$memory, $GlobalLocationAddress($t21),
        $Dereference($t21));

    // assert forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume {:print "$at(11,106427,106628)"} true;
    assert {:msg "assert_failed(11,106427,106628): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // label L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:192:5+1
    assume {:print "$at(21,8599,8600)"} true;
L4:

    // assert Not(Not(Signature::$ed25519_validate_pubkey[]($t1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:207:9+85
    assume {:print "$at(21,9169,9254)"} true;
    assert {:msg "assert_failed(21,9169,9254): function does not abort under this condition"}
      !!$1_Signature_$ed25519_validate_pubkey($t1);

    // assert Not(Not(DualAttestation::spec_has_credential[@231]($t8))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:153:9+64
    assume {:print "$at(21,6882,6946)"} true;
    assert {:msg "assert_failed(21,6882,6946): function does not abort under this condition"}
      !!$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#231, $t8);

    // assert Not(Not(DiemTimestamp::$is_operating[@232]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#232);

    // assert Eq<vector<u8>>(select DualAttestation::Credential.compliance_public_key(global<DualAttestation::Credential>($t9)), $t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:214:9+68
    assume {:print "$at(21,9430,9498)"} true;
    assert {:msg "assert_failed(21,9430,9498): post-condition does not hold"}
      $IsEqual'vec'u8''($compliance_public_key#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, $t9)), $t1);

    // assert forall addr1: TypeDomain<address>() where Neq<address>(addr1, $t9): Eq<vector<u8>>(select DualAttestation::Credential.compliance_public_key(global<DualAttestation::Credential>(addr1)), select DualAttestation::Credential.compliance_public_key(global[@231]<DualAttestation::Credential>(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:216:9+169
    assume {:print "$at(21,9594,9763)"} true;
    assert {:msg "assert_failed(21,9594,9763): post-condition does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (!$IsEqual'address'(addr1, $t9))  ==> ($IsEqual'vec'u8''($compliance_public_key#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr1)), $compliance_public_key#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory#231, addr1)))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential[@231](addr1), DualAttestation::spec_has_credential(addr1)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:560:9+122
    assume {:print "$at(21,24819,24941)"} true;
    assert {:msg "assert_failed(21,24819,24941): post-condition does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#231, addr1) ==> $1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1))));

    // assert forall addr1: TypeDomain<address>(): Implies(Not(DualAttestation::spec_has_credential[@231](addr1)), Not(DualAttestation::spec_has_credential(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:566:9+124
    assume {:print "$at(21,25049,25173)"} true;
    assert {:msg "assert_failed(21,25049,25173): post-condition does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ((!$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#231, addr1) ==> !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1))));

    // assert Implies(DualAttestation::spec_is_published[@233](), Eq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@233]())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:587:9+119
    assume {:print "$at(21,26138,26257)"} true;
    assert {:msg "assert_failed(21,26138,26257): post-condition does not hold"}
      ($1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#233) ==> $IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#233)));

    // assert forall addr1: TypeDomain<address>() where DualAttestation::spec_has_credential[@231](addr1): Eq<vector<u8>>(select DualAttestation::Credential.base_url(global<DualAttestation::Credential>(addr1)), select DualAttestation::Credential.base_url(global[@231]<DualAttestation::Credential>(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:607:9+159
    assume {:print "$at(21,27043,27202)"} true;
    assert {:msg "assert_failed(21,27043,27202): post-condition does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#231, addr1))  ==> ($IsEqual'vec'u8''($base_url#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr1)), $base_url#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory#231, addr1)))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t12, $t11)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:228:9+20
    assume {:print "$at(21,10191,10211)"} true;
    assert {:msg "assert_failed(21,10191,10211): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'($EmptyEventStore, $t11, $t12); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t12, $t11)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:193:5+190
    assume {:print "$at(21,8605,8795)"} true;
    assert {:msg "assert_failed(21,8605,8795): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'($EmptyEventStore, $t11, $t12); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:193:5+190
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:192:5+1
    assume {:print "$at(21,8599,8600)"} true;
L5:

    // assert Or(Or(Not(Signature::$ed25519_validate_pubkey[]($t1)), Not(DualAttestation::spec_has_credential[@231]($t8))), Not(DiemTimestamp::$is_operating[@232]())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:193:5+190
    assume {:print "$at(21,8605,8795)"} true;
    assert {:msg "assert_failed(21,8605,8795): abort not covered by any of the `aborts_if` clauses"}
      ((!$1_Signature_$ed25519_validate_pubkey($t1) || !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#231, $t8)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#232));

    // assert Or(Or(And(Not(Signature::$ed25519_validate_pubkey[]($t1)), Eq(7, $t17)), And(Not(DualAttestation::spec_has_credential[@231]($t8)), Eq(5, $t17))), And(Not(DiemTimestamp::$is_operating[@232]()), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:193:5+190
    assert {:msg "assert_failed(21,8605,8795): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((!$1_Signature_$ed25519_validate_pubkey($t1) && $IsEqual'u8'(7, $t17)) || (!$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#231, $t8) && $IsEqual'u8'(5, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#232) && $IsEqual'u8'(1, $t17)));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:193:5+190
    $abort_code := $t17;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t21) at <internal>:1:1+10

    // destroy($t23) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:157:5+111
function {:inline} $1_DiemTransactionPublishingOption_$transactions_halted($1_DiemTransactionPublishingOption_HaltAllTransactions_$memory: $Memory $1_DiemTransactionPublishingOption_HaltAllTransactions): bool {
    $ResourceExists($1_DiemTransactionPublishingOption_HaltAllTransactions_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:184:9+461
function {:inline} $1_DiemTransactionPublishingOption_spec_is_script_allowed($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', $1_DiemTransactionPublishingOption_HaltAllTransactions_$memory: $Memory $1_DiemTransactionPublishingOption_HaltAllTransactions, account: int, hash: Vec (int)): bool {
    (var publish_option := $1_DiemConfig_spec_get_config'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory); ($1_Roles_$has_diem_root_role($1_Roles_RoleId_$memory, account) || (!$1_DiemTransactionPublishingOption_$transactions_halted($1_DiemTransactionPublishingOption_HaltAllTransactions_$memory) && ($1_Vector_$is_empty'u8'(hash) || ($1_Vector_$is_empty'vec'u8''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(publish_option)) || $ContainsVec'vec'u8''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(publish_option), hash))))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:193:9+249
function {:inline} $1_DiemTransactionPublishingOption_spec_is_module_allowed($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', account: int): bool {
    (var publish_option := $1_DiemConfig_spec_get_config'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory); ($module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(publish_option) || $1_Roles_$has_diem_root_role($1_Roles_RoleId_$memory, account)))
}

// struct DiemTransactionPublishingOption::DiemTransactionPublishingOption at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:27:5+381
type {:datatype} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:constructor} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list: Vec (Vec (int)), $module_publishing_allowed: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_script_allow_list(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: Vec (Vec (int))): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(x, $module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_module_publishing_allowed(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s), x)
}
function $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    $IsValid'vec'vec'u8'''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
      && $IsValid'bool'($module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s1: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, s2: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    s1 == s2
}

// struct DiemTransactionPublishingOption::HaltAllTransactions at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:36:5+37
type {:datatype} $1_DiemTransactionPublishingOption_HaltAllTransactions;
function {:constructor} $1_DiemTransactionPublishingOption_HaltAllTransactions($dummy_field: bool): $1_DiemTransactionPublishingOption_HaltAllTransactions;
function {:inline} $Update'$1_DiemTransactionPublishingOption_HaltAllTransactions'_dummy_field(s: $1_DiemTransactionPublishingOption_HaltAllTransactions, x: bool): $1_DiemTransactionPublishingOption_HaltAllTransactions {
    $1_DiemTransactionPublishingOption_HaltAllTransactions(x)
}
function $IsValid'$1_DiemTransactionPublishingOption_HaltAllTransactions'(s: $1_DiemTransactionPublishingOption_HaltAllTransactions): bool {
    $IsValid'bool'($dummy_field#$1_DiemTransactionPublishingOption_HaltAllTransactions(s))
}
function {:inline} $IsEqual'$1_DiemTransactionPublishingOption_HaltAllTransactions'(s1: $1_DiemTransactionPublishingOption_HaltAllTransactions, s2: $1_DiemTransactionPublishingOption_HaltAllTransactions): bool {
    s1 == s2
}
var $1_DiemTransactionPublishingOption_HaltAllTransactions_$memory: $Memory $1_DiemTransactionPublishingOption_HaltAllTransactions;

// fun DiemTransactionPublishingOption::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:38:5+436
procedure {:inline 1} $1_DiemTransactionPublishingOption_initialize(_$t0: int, _$t1: Vec (Vec (int)), _$t2: bool) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
    var $t10: int;
    var $t11: bool;
    var $t0: int;
    var $t1: Vec (Vec (int));
    var $t2: bool;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'': $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'': $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'vec'u8''': Vec (Vec (int));
    var $1_DiemConfig_Configuration_$memory#336: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:38:5+1
    assume {:print "$at(18,1558,1559)"} true;
    assume {:print "$track_local(24,1,0):", $t0} $t0 == $t0;

    // trace_local[script_allow_list]($t1) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:38:5+1
    assume {:print "$track_local(24,1,1):", $t1} $t1 == $t1;

    // trace_local[module_publishing_allowed]($t2) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:38:5+1
    assume {:print "$track_local(24,1,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(18,1714,1745)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31

    // assume Identical($t5, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
    assume ($t5 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t6)) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
    assume {:print "$at(18,1714,1745)"} true;
    assume {:print "$track_abort(24,1):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(18,1755,1790)"} true;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    assume {:print "$at(18,1755,1790)"} true;

    // assume Identical($t8, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    assume ($t8 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t8) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    if ($t8) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t6)), And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t6))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 0), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t6)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'u8'(5, $t6))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 0) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    assume {:print "$at(18,1755,1790)"} true;
    assume {:print "$track_abort(24,1):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35

    // $t9 := pack DiemTransactionPublishingOption::DiemTransactionPublishingOption($t1, $t2) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:48:13+108
    assume {:print "$at(18,1869,1977)"} true;
    $t9 := $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($t1, $t2);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    // >> opaque call: DiemConfig::publish_new_config<DiemTransactionPublishingOption::DiemTransactionPublishingOption>($t0, $t3)
    assume {:print "$at(18,1801,1987)"} true;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: DiemConfig::publish_new_config<DiemTransactionPublishingOption::DiemTransactionPublishingOption>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume {:print "$at(18,1801,1987)"} true;

    // assume Identical($t11, Or(Or(Or(Or(DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>(), exists<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(Signer::spec_address_of($t0))), Not(exists<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume ($t11 == (((($1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t11) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    if ($t11) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
L8:

    // assume Or(Or(Or(Or(DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>(), exists<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(Signer::spec_address_of($t0))), And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t6))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume (((($1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'u8'(5, $t6))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume {:print "$at(18,1801,1987)"} true;
    assume {:print "$track_abort(24,1):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
L7:

    // @336 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    $1_DiemConfig_Configuration_$memory#336 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'';
        $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'');
    } else {
        $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'';
        $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory := $ResourceUpdate($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'');
    } else {
        $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory := $ResourceRemove($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume exists<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_Signer_spec_address_of($t0));

    // assume DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory);

    // assume Eq<DiemTransactionPublishingOption::DiemTransactionPublishingOption>(DiemConfig::$get<DiemTransactionPublishingOption::DiemTransactionPublishingOption>(), $t9) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_$get'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory), $t9);

    // assume Eq<bool>(DiemConfig::spec_has_config[@336](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#336), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::publish_new_config<DiemTransactionPublishingOption::DiemTransactionPublishingOption>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:52:5+1
    assume {:print "$at(18,1993,1994)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:52:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:52:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:52:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun DiemTransactionPublishingOption::is_module_allowed [baseline] at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:92:5+229
procedure {:inline 1} $1_DiemTransactionPublishingOption_is_module_allowed(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
    var $t2: bool;
    var $t3: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: bool;
    var $t0: int;
    var $temp_0'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption': $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:92:5+1
    assume {:print "$at(18,3854,3855)"} true;
    assume {:print "$track_local(24,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:30+50
    // >> opaque call: $t3 := DiemConfig::get<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()
    assume {:print "$at(18,3938,3988)"} true;

    // $t3 := opaque begin: DiemConfig::get<DiemTransactionPublishingOption::DiemTransactionPublishingOption>() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:30+50

    // assume Identical($t4, Not(exists<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:30+50
    assume ($t4 == !$ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t4) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:30+50
    if ($t4) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:30+50
L7:

    // assume And(Not(exists<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS())), Eq(5, $t5)) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:30+50
    assume (!$ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(5, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:30+50
    assume {:print "$at(18,3938,3988)"} true;
    assume {:print "$track_abort(24,2):", $t5} $t5 == $t5;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:30+50
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:30+50
L6:

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:30+50
    assume $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($t3);

    // assume Eq<DiemTransactionPublishingOption::DiemTransactionPublishingOption>($t3, DiemConfig::$get<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:30+50
    assume $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($t3, $1_DiemConfig_$get'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // $t3 := opaque end: DiemConfig::get<DiemTransactionPublishingOption::DiemTransactionPublishingOption>() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:30+50

    // trace_local[publish_option]($t3) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:93:13+14
    assume {:print "$track_local(24,2,1):", $t3} $t3 == $t3;

    // $t6 := get_field<DiemTransactionPublishingOption::DiemTransactionPublishingOption>.module_publishing_allowed($t3) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+40
    assume {:print "$at(18,3999,4039)"} true;
    $t6 := $module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($t3);

    // if ($t6) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78
L0:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78

    // $t7 := true at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78
    $t7 := true;
    assume $IsValid'bool'($t7);

    // $t2 := $t7 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78
    $t2 := $t7;

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78
    assume {:print "$track_local(24,2,2):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:79+7
L2:

    // $t8 := Roles::has_diem_root_role($t0) on_abort goto L5 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:53+34
    call $t8 := $1_Roles_has_diem_root_role($t0);
    if ($abort_flag) {
        assume {:print "$at(18,4043,4077)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,2):", $t5} $t5 == $t5;
        goto L5;
    }

    // $t2 := $t8 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78
    $t2 := $t8;

    // trace_local[tmp#$2]($t8) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78
    assume {:print "$track_local(24,2,2):", $t8} $t8 == $t8;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78
L3:

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:95:9+78
    assume {:print "$track_return(24,2,0):", $t2} $t2 == $t2;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:96:5+1
    assume {:print "$at(18,4082,4083)"} true;
L4:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:96:5+1
    $ret0 := $t2;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:96:5+1
L5:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:96:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun DiemTransactionPublishingOption::is_script_allowed [baseline] at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:66:5+789
procedure {:inline 1} $1_DiemTransactionPublishingOption_is_script_allowed(_$t0: int, _$t1: Vec (int)) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
    var $t3: bool;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: bool;
    var $t9: bool;
    var $t10: bool;
    var $t11: bool;
    var $t12: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
    var $t13: bool;
    var $t14: Vec (Vec (int));
    var $t15: bool;
    var $t16: bool;
    var $t17: Vec (Vec (int));
    var $t18: bool;
    var $t0: int;
    var $t1: Vec (int);
    var $temp_0'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption': $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:66:5+1
    assume {:print "$at(18,2596,2597)"} true;
    assume {:print "$track_local(24,3,0):", $t0} $t0 == $t0;

    // trace_local[hash]($t1) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:66:5+1
    assume {:print "$track_local(24,3,1):", $t1} $t1 == $t1;

    // $t4 := Roles::has_diem_root_role($t0) on_abort goto L14 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:68:13+34
    assume {:print "$at(18,2722,2756)"} true;
    call $t4 := $1_Roles_has_diem_root_role($t0);
    if ($abort_flag) {
        assume {:print "$at(18,2722,2756)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,3):", $t5} $t5 == $t5;
        goto L14;
    }

    // if ($t4) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:68:9+51
    if ($t4) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:68:9+51
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:68:9+51
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:68:49+11
L0:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:68:49+11

    // $t6 := true at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:68:56+4
    $t6 := true;
    assume $IsValid'bool'($t6);

    // trace_return[0]($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:68:49+11
    assume {:print "$track_return(24,3,0):", $t6} $t6 == $t6;

    // $t7 := move($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:68:49+11
    $t7 := $t6;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:68:49+11
    goto L13;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:71:13+21
    assume {:print "$at(18,2864,2885)"} true;
L2:

    // $t8 := DiemTransactionPublishingOption::transactions_halted() on_abort goto L14 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:71:13+21
    call $t8 := $1_DiemTransactionPublishingOption_transactions_halted();
    if ($abort_flag) {
        assume {:print "$at(18,2864,2885)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,3):", $t5} $t5 == $t5;
        goto L14;
    }

    // if ($t8) goto L3 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:71:9+39
    if ($t8) { goto L3; } else { goto L4; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:71:9+39
L4:

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:71:9+39
    goto L5;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:71:36+12
L3:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:71:36+12

    // $t9 := false at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:71:43+5
    $t9 := false;
    assume $IsValid'bool'($t9);

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:71:36+12
    assume {:print "$track_return(24,3,0):", $t9} $t9 == $t9;

    // $t7 := move($t9) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:71:36+12
    $t7 := $t9;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:71:36+12
    goto L13;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:74:30+4
    assume {:print "$at(18,3030,3034)"} true;
L5:

    // $t10 := Vector::is_empty<u8>($t1) on_abort goto L14 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:74:13+22
    call $t10 := $1_Vector_is_empty'u8'($t1);
    if ($abort_flag) {
        assume {:print "$at(18,3013,3035)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,3):", $t5} $t5 == $t5;
        goto L14;
    }

    // if ($t10) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:74:9+39
    if ($t10) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:74:9+39
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:74:9+39
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:74:37+11
L6:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:74:37+11

    // $t11 := true at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:74:44+4
    $t11 := true;
    assume $IsValid'bool'($t11);

    // trace_return[0]($t11) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:74:37+11
    assume {:print "$track_return(24,3,0):", $t11} $t11 == $t11;

    // $t7 := move($t11) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:74:37+11
    $t7 := $t11;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:74:37+11
    goto L13;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50
    assume {:print "$at(18,3080,3130)"} true;
L8:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50
    // >> opaque call: $t10 := DiemConfig::get<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()

    // $t12 := opaque begin: DiemConfig::get<DiemTransactionPublishingOption::DiemTransactionPublishingOption>() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50

    // assume Identical($t13, Not(exists<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50
    assume ($t13 == !$ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t13) goto L16 else goto L15 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50
    if ($t13) { goto L16; } else { goto L15; }

    // label L16 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50
L16:

    // assume And(Not(exists<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS())), Eq(5, $t5)) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50
    assume (!$ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(5, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50
    assume {:print "$at(18,3080,3130)"} true;
    assume {:print "$track_abort(24,3):", $t5} $t5 == $t5;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50
    goto L14;

    // label L15 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50
L15:

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50
    assume $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($t12);

    // assume Eq<DiemTransactionPublishingOption::DiemTransactionPublishingOption>($t12, DiemConfig::$get<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50
    assume $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($t12, $1_DiemConfig_$get'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // $t12 := opaque end: DiemConfig::get<DiemTransactionPublishingOption::DiemTransactionPublishingOption>() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:30+50

    // trace_local[publish_option]($t12) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:76:13+14
    assume {:print "$track_local(24,3,2):", $t12} $t12 == $t12;

    // $t14 := get_field<DiemTransactionPublishingOption::DiemTransactionPublishingOption>.script_allow_list($t12) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:26+33
    assume {:print "$at(18,3224,3257)"} true;
    $t14 := $script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($t12);

    // $t15 := Vector::is_empty<vector<u8>>($t14) on_abort goto L14 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+51
    call $t15 := $1_Vector_is_empty'vec'u8''($t14);
    if ($abort_flag) {
        assume {:print "$at(18,3207,3258)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,3):", $t5} $t5 == $t5;
        goto L14;
    }

    // if ($t15) goto L9 else goto L10 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
    if ($t15) { goto L9; } else { goto L10; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
L10:

    // goto L11 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
    goto L11;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
L9:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172

    // $t16 := true at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
    $t16 := true;
    assume $IsValid'bool'($t16);

    // $t3 := $t16 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
    $t3 := $t16;

    // trace_local[tmp#$3]($t16) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
    assume {:print "$track_local(24,3,3):", $t16} $t16 == $t16;

    // goto L12 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
    goto L12;

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:80:34+14
    assume {:print "$at(18,3340,3354)"} true;
L11:

    // $t17 := get_field<DiemTransactionPublishingOption::DiemTransactionPublishingOption>.script_allow_list($t12) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:80:33+33
    $t17 := $script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($t12);

    // $t18 := Vector::contains<vector<u8>>($t17, $t1) on_abort goto L14 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:80:16+57
    call $t18 := $1_Vector_contains'vec'u8''($t17, $t1);
    if ($abort_flag) {
        assume {:print "$at(18,3322,3379)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,3):", $t5} $t5 == $t5;
        goto L14;
    }

    // $t3 := $t18 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
    assume {:print "$at(18,3207,3379)"} true;
    $t3 := $t18;

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
    assume {:print "$track_local(24,3,3):", $t18} $t18 == $t18;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
L12:

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
    assume {:print "$track_return(24,3,0):", $t3} $t3 == $t3;

    // $t7 := move($t3) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:78:9+172
    $t7 := $t3;

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:81:5+1
    assume {:print "$at(18,3384,3385)"} true;
L13:

    // return $t7 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:81:5+1
    $ret0 := $t7;
    return;

    // label L14 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:81:5+1
L14:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:81:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun DiemTransactionPublishingOption::transactions_halted [baseline] at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:157:5+111
procedure {:inline 1} $1_DiemTransactionPublishingOption_transactions_halted() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:158:37+34
    assume {:print "$at(18,6804,6838)"} true;
    call $t0 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(18,6804,6838)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(24,7):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := exists<DiemTransactionPublishingOption::HaltAllTransactions>($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:158:9+6
    $t2 := $ResourceExists($1_DiemTransactionPublishingOption_HaltAllTransactions_$memory, $t0);

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:158:9+63
    assume {:print "$track_return(24,7,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:159:5+1
    assume {:print "$at(18,6844,6845)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:159:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:159:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:159:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemId.move:110:5+95
function {:inline} $1_DiemId_$has_diem_id_domains($1_DiemId_DiemIdDomains_$memory: $Memory $1_DiemId_DiemIdDomains, addr: int): bool {
    $ResourceExists($1_DiemId_DiemIdDomains_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemId.move:300:5+133
function {:inline} $1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory: $Memory $1_DiemId_DiemIdDomainManager): bool {
    $ResourceExists($1_DiemId_DiemIdDomainManager_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())
}

// struct DiemId::DiemIdDomain at /home/ying/diem/language/diem-framework/modules/DiemId.move:27:5+112
type {:datatype} $1_DiemId_DiemIdDomain;
function {:constructor} $1_DiemId_DiemIdDomain($domain: Vec (int)): $1_DiemId_DiemIdDomain;
function {:inline} $Update'$1_DiemId_DiemIdDomain'_domain(s: $1_DiemId_DiemIdDomain, x: Vec (int)): $1_DiemId_DiemIdDomain {
    $1_DiemId_DiemIdDomain(x)
}
function $IsValid'$1_DiemId_DiemIdDomain'(s: $1_DiemId_DiemIdDomain): bool {
    $IsValid'vec'u8''($domain#$1_DiemId_DiemIdDomain(s))
}
function {:inline} $IsEqual'$1_DiemId_DiemIdDomain'(s1: $1_DiemId_DiemIdDomain, s2: $1_DiemId_DiemIdDomain): bool {
    s1 == s2
}

// struct DiemId::DiemIdDomainEvent at /home/ying/diem/language/diem-framework/modules/DiemId.move:41:5+263
type {:datatype} $1_DiemId_DiemIdDomainEvent;
function {:constructor} $1_DiemId_DiemIdDomainEvent($removed: bool, $domain: $1_DiemId_DiemIdDomain, $address: int): $1_DiemId_DiemIdDomainEvent;
function {:inline} $Update'$1_DiemId_DiemIdDomainEvent'_removed(s: $1_DiemId_DiemIdDomainEvent, x: bool): $1_DiemId_DiemIdDomainEvent {
    $1_DiemId_DiemIdDomainEvent(x, $domain#$1_DiemId_DiemIdDomainEvent(s), $address#$1_DiemId_DiemIdDomainEvent(s))
}
function {:inline} $Update'$1_DiemId_DiemIdDomainEvent'_domain(s: $1_DiemId_DiemIdDomainEvent, x: $1_DiemId_DiemIdDomain): $1_DiemId_DiemIdDomainEvent {
    $1_DiemId_DiemIdDomainEvent($removed#$1_DiemId_DiemIdDomainEvent(s), x, $address#$1_DiemId_DiemIdDomainEvent(s))
}
function {:inline} $Update'$1_DiemId_DiemIdDomainEvent'_address(s: $1_DiemId_DiemIdDomainEvent, x: int): $1_DiemId_DiemIdDomainEvent {
    $1_DiemId_DiemIdDomainEvent($removed#$1_DiemId_DiemIdDomainEvent(s), $domain#$1_DiemId_DiemIdDomainEvent(s), x)
}
function $IsValid'$1_DiemId_DiemIdDomainEvent'(s: $1_DiemId_DiemIdDomainEvent): bool {
    $IsValid'bool'($removed#$1_DiemId_DiemIdDomainEvent(s))
      && $IsValid'$1_DiemId_DiemIdDomain'($domain#$1_DiemId_DiemIdDomainEvent(s))
      && $IsValid'address'($address#$1_DiemId_DiemIdDomainEvent(s))
}
function {:inline} $IsEqual'$1_DiemId_DiemIdDomainEvent'(s1: $1_DiemId_DiemIdDomainEvent, s2: $1_DiemId_DiemIdDomainEvent): bool {
    s1 == s2
}

// struct DiemId::DiemIdDomainManager at /home/ying/diem/language/diem-framework/modules/DiemId.move:35:5+242
type {:datatype} $1_DiemId_DiemIdDomainManager;
function {:constructor} $1_DiemId_DiemIdDomainManager($diem_id_domain_events: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent'): $1_DiemId_DiemIdDomainManager;
function {:inline} $Update'$1_DiemId_DiemIdDomainManager'_diem_id_domain_events(s: $1_DiemId_DiemIdDomainManager, x: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent'): $1_DiemId_DiemIdDomainManager {
    $1_DiemId_DiemIdDomainManager(x)
}
function $IsValid'$1_DiemId_DiemIdDomainManager'(s: $1_DiemId_DiemIdDomainManager): bool {
    $IsValid'$1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent''($diem_id_domain_events#$1_DiemId_DiemIdDomainManager(s))
}
function {:inline} $IsEqual'$1_DiemId_DiemIdDomainManager'(s1: $1_DiemId_DiemIdDomainManager, s2: $1_DiemId_DiemIdDomainManager): bool {
    s1 == s2
}
var $1_DiemId_DiemIdDomainManager_$memory: $Memory $1_DiemId_DiemIdDomainManager;

// struct DiemId::DiemIdDomains at /home/ying/diem/language/diem-framework/modules/DiemId.move:14:5+146
type {:datatype} $1_DiemId_DiemIdDomains;
function {:constructor} $1_DiemId_DiemIdDomains($domains: Vec ($1_DiemId_DiemIdDomain)): $1_DiemId_DiemIdDomains;
function {:inline} $Update'$1_DiemId_DiemIdDomains'_domains(s: $1_DiemId_DiemIdDomains, x: Vec ($1_DiemId_DiemIdDomain)): $1_DiemId_DiemIdDomains {
    $1_DiemId_DiemIdDomains(x)
}
function $IsValid'$1_DiemId_DiemIdDomains'(s: $1_DiemId_DiemIdDomains): bool {
    $IsValid'vec'$1_DiemId_DiemIdDomain''($domains#$1_DiemId_DiemIdDomains(s))
}
function {:inline} $IsEqual'$1_DiemId_DiemIdDomains'(s1: $1_DiemId_DiemIdDomains, s2: $1_DiemId_DiemIdDomains): bool {
    s1 == s2
}
var $1_DiemId_DiemIdDomains_$memory: $Memory $1_DiemId_DiemIdDomains;

// fun DiemId::publish_diem_id_domain_manager [baseline] at /home/ying/diem/language/diem-framework/modules/DiemId.move:121:5+500
procedure {:inline 1} $1_DiemId_publish_diem_id_domain_manager(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent';
    var $t13: $1_DiemId_DiemIdDomainManager;
    var $t0: int;
    var $1_DiemId_DiemIdDomainManager_$modifies: [int]bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemId.move:121:5+1
    assume {:print "$at(15,4674,4675)"} true;
    assume {:print "$track_local(25,4,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemId.move:124:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(15,4763,4808)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemId.move:124:9+45
    assume {:print "$at(15,4763,4808)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemId.move:124:9+45
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t5) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemId.move:124:9+45
    if ($t5) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemId.move:124:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/DiemId.move:124:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemId.move:124:9+45
    assume {:print "$at(15,4763,4808)"} true;
    assume {:print "$track_abort(25,4):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemId.move:124:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemId.move:124:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemId.move:124:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/DiemId.move:126:42+30
    // >> opaque call: $t3 := Signer::address_of($t0)
    assume {:print "$at(15,4867,4897)"} true;

    // $t7 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemId.move:126:42+30

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/DiemId.move:126:42+30
    assume $IsValid'address'($t7);

    // assume Eq<address>($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemId.move:126:42+30
    assume $IsEqual'address'($t7, $1_Signer_spec_address_of($t0));

    // $t7 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemId.move:126:42+30

    // $t8 := exists<DiemId::DiemIdDomainManager>($t7) at /home/ying/diem/language/diem-framework/modules/DiemId.move:126:14+6
    $t8 := $ResourceExists($1_DiemId_DiemIdDomainManager_$memory, $t7);

    // $t9 := !($t8) at /home/ying/diem/language/diem-framework/modules/DiemId.move:126:13+1
    call $t9 := $Not($t8);

    // $t10 := 1 at /home/ying/diem/language/diem-framework/modules/DiemId.move:127:39+23
    assume {:print "$at(15,4938,4961)"} true;
    $t10 := 1;
    assume $IsValid'u64'($t10);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemId.move:127:13+50
    // >> opaque call: $t7 := Errors::already_published($t6)

    // $t11 := opaque begin: Errors::already_published($t10) at /home/ying/diem/language/diem-framework/modules/DiemId.move:127:13+50

    // assume WellFormed($t11) at /home/ying/diem/language/diem-framework/modules/DiemId.move:127:13+50
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 6) at /home/ying/diem/language/diem-framework/modules/DiemId.move:127:13+50
    assume $IsEqual'u64'($t11, 6);

    // $t11 := opaque end: Errors::already_published($t10) at /home/ying/diem/language/diem-framework/modules/DiemId.move:127:13+50

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/DiemId.move:125:9+154
    assume {:print "$at(15,4818,4972)"} true;
    assume {:print "$track_local(25,4,2):", $t11} $t11 == $t11;

    // trace_local[tmp#$1]($t9) at /home/ying/diem/language/diem-framework/modules/DiemId.move:125:9+154
    assume {:print "$track_local(25,4,1):", $t9} $t9 == $t9;

    // if ($t9) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemId.move:125:9+154
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemId.move:125:9+154
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemId.move:125:9+154

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemId.move:125:9+154
    assume {:print "$at(15,4818,4972)"} true;
    assume {:print "$track_abort(25,4):", $t11} $t11 == $t11;

    // $t6 := move($t11) at /home/ying/diem/language/diem-framework/modules/DiemId.move:125:9+154
    $t6 := $t11;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemId.move:125:9+154
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemId.move:130:13+10
    assume {:print "$at(15,5003,5013)"} true;
L0:

    // $t12 := Event::new_event_handle<DiemId::DiemIdDomainEvent>($t0) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemId.move:132:40+54
    assume {:print "$at(15,5088,5142)"} true;
    call $t12 := $1_Event_new_event_handle'$1_DiemId_DiemIdDomainEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(15,5088,5142)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,4):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t13 := pack DiemId::DiemIdDomainManager($t12) at /home/ying/diem/language/diem-framework/modules/DiemId.move:131:13+130
    assume {:print "$at(15,5027,5157)"} true;
    $t13 := $1_DiemId_DiemIdDomainManager($t12);

    // move_to<DiemId::DiemIdDomainManager>($t13, $t0) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemId.move:129:9+7
    assume {:print "$at(15,4982,4989)"} true;
    if ($ResourceExists($1_DiemId_DiemIdDomainManager_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemId_DiemIdDomainManager_$memory := $ResourceUpdate($1_DiemId_DiemIdDomainManager_$memory, $t0, $t13);
    }
    if ($abort_flag) {
        assume {:print "$at(15,4982,4989)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,4):", $t6} $t6 == $t6;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemId.move:135:5+1
    assume {:print "$at(15,5173,5174)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemId.move:135:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemId.move:135:5+1
L3:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemId.move:135:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun DiemId::publish_diem_id_domains [baseline] at /home/ying/diem/language/diem-framework/modules/DiemId.move:82:5+381
procedure {:inline 1} $1_DiemId_publish_diem_id_domains(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: Vec ($1_DiemId_DiemIdDomain);
    var $t14: $1_DiemId_DiemIdDomains;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemId.move:95:9+54
    assume {:print "$at(15,3546,3600)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[vasp_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemId.move:82:5+1
    assume {:print "$at(15,3121,3122)"} true;
    assume {:print "$track_local(25,5,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemId.move:85:9+44
    // >> opaque call: Roles::assert_parent_vasp_role($t0)
    assume {:print "$at(15,3204,3248)"} true;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/DiemId.move:85:9+44
    assume {:print "$at(15,3204,3248)"} true;

    // assume Identical($t6, Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 5))) at /home/ying/diem/language/diem-framework/modules/DiemId.move:85:9+44
    assume ($t6 == (!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 5)));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemId.move:85:9+44
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemId.move:85:9+44
L5:

    // assume Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 5), Eq(3, $t7))) at /home/ying/diem/language/diem-framework/modules/DiemId.move:85:9+44
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'u8'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 5) && $IsEqual'u8'(3, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemId.move:85:9+44
    assume {:print "$at(15,3204,3248)"} true;
    assume {:print "$track_abort(25,5):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemId.move:85:9+44
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemId.move:85:9+44
L4:

    // opaque end: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/DiemId.move:85:9+44

    // nop at /home/ying/diem/language/diem-framework/modules/DiemId.move:87:36+32
    // >> opaque call: $t3 := Signer::address_of($t0)
    assume {:print "$at(15,3301,3333)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemId.move:87:36+32

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemId.move:87:36+32
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemId.move:87:36+32
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemId.move:87:36+32

    // $t9 := exists<DiemId::DiemIdDomains>($t8) at /home/ying/diem/language/diem-framework/modules/DiemId.move:87:14+6
    $t9 := $ResourceExists($1_DiemId_DiemIdDomains_$memory, $t8);

    // $t10 := !($t9) at /home/ying/diem/language/diem-framework/modules/DiemId.move:87:13+1
    call $t10 := $Not($t9);

    // $t11 := 0 at /home/ying/diem/language/diem-framework/modules/DiemId.move:88:39+15
    assume {:print "$at(15,3374,3389)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemId.move:88:13+42
    // >> opaque call: $t7 := Errors::already_published($t6)

    // $t12 := opaque begin: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/DiemId.move:88:13+42

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/DiemId.move:88:13+42
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, 6) at /home/ying/diem/language/diem-framework/modules/DiemId.move:88:13+42
    assume $IsEqual'u64'($t12, 6);

    // $t12 := opaque end: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/DiemId.move:88:13+42

    // trace_local[tmp#$2]($t12) at /home/ying/diem/language/diem-framework/modules/DiemId.move:86:9+142
    assume {:print "$at(15,3258,3400)"} true;
    assume {:print "$track_local(25,5,2):", $t12} $t12 == $t12;

    // trace_local[tmp#$1]($t10) at /home/ying/diem/language/diem-framework/modules/DiemId.move:86:9+142
    assume {:print "$track_local(25,5,1):", $t10} $t10 == $t10;

    // if ($t10) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemId.move:86:9+142
    if ($t10) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemId.move:86:9+142
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemId.move:86:9+142

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemId.move:86:9+142
    assume {:print "$at(15,3258,3400)"} true;
    assume {:print "$track_abort(25,5):", $t12} $t12 == $t12;

    // $t7 := move($t12) at /home/ying/diem/language/diem-framework/modules/DiemId.move:86:9+142
    $t7 := $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemId.move:86:9+142
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemId.move:90:17+12
    assume {:print "$at(15,3418,3430)"} true;
L0:

    // $t13 := Vector::empty<DiemId::DiemIdDomain>() on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemId.move:91:22+15
    assume {:print "$at(15,3469,3484)"} true;
    call $t13 := $1_Vector_empty'$1_DiemId_DiemIdDomain'();
    if ($abort_flag) {
        assume {:print "$at(15,3469,3484)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,5):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t14 := pack DiemId::DiemIdDomains($t13) at /home/ying/diem/language/diem-framework/modules/DiemId.move:90:31+63
    assume {:print "$at(15,3432,3495)"} true;
    $t14 := $1_DiemId_DiemIdDomains($t13);

    // move_to<DiemId::DiemIdDomains>($t14, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemId.move:90:9+7
    if ($ResourceExists($1_DiemId_DiemIdDomains_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemId_DiemIdDomains_$memory := $ResourceUpdate($1_DiemId_DiemIdDomains_$memory, $t0, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(15,3410,3417)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,5):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemId.move:93:5+1
    assume {:print "$at(15,3501,3502)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemId.move:93:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemId.move:93:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemId.move:93:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// struct DesignatedDealer::Dealer at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:15:5+130
type {:datatype} $1_DesignatedDealer_Dealer;
function {:constructor} $1_DesignatedDealer_Dealer($mint_event_handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer;
function {:inline} $Update'$1_DesignatedDealer_Dealer'_mint_event_handle(s: $1_DesignatedDealer_Dealer, x: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer {
    $1_DesignatedDealer_Dealer(x)
}
function $IsValid'$1_DesignatedDealer_Dealer'(s: $1_DesignatedDealer_Dealer): bool {
    $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''($mint_event_handle#$1_DesignatedDealer_Dealer(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_Dealer'(s1: $1_DesignatedDealer_Dealer, s2: $1_DesignatedDealer_Dealer): bool {
    s1 == s2
}
var $1_DesignatedDealer_Dealer_$memory: $Memory $1_DesignatedDealer_Dealer;

// struct DesignatedDealer::ReceivedMintEvent at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:39:5+286
type {:datatype} $1_DesignatedDealer_ReceivedMintEvent;
function {:constructor} $1_DesignatedDealer_ReceivedMintEvent($currency_code: Vec (int), $destination_address: int, $amount: int): $1_DesignatedDealer_ReceivedMintEvent;
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_currency_code(s: $1_DesignatedDealer_ReceivedMintEvent, x: Vec (int)): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent(x, $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_destination_address(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), x, $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_amount(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), x)
}
function $IsValid'$1_DesignatedDealer_ReceivedMintEvent'(s: $1_DesignatedDealer_ReceivedMintEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'address'($destination_address#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'u64'($amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(s1: $1_DesignatedDealer_ReceivedMintEvent, s2: $1_DesignatedDealer_ReceivedMintEvent): bool {
    s1 == s2
}

// struct DesignatedDealer::TierInfo<#0> at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:29:5+272
type {:datatype} $1_DesignatedDealer_TierInfo'#0';
function {:constructor} $1_DesignatedDealer_TierInfo'#0'($window_start: int, $window_inflow: int, $tiers: Vec (int)): $1_DesignatedDealer_TierInfo'#0';
function {:inline} $Update'$1_DesignatedDealer_TierInfo'#0''_window_start(s: $1_DesignatedDealer_TierInfo'#0', x: int): $1_DesignatedDealer_TierInfo'#0' {
    $1_DesignatedDealer_TierInfo'#0'(x, $window_inflow#$1_DesignatedDealer_TierInfo'#0'(s), $tiers#$1_DesignatedDealer_TierInfo'#0'(s))
}
function {:inline} $Update'$1_DesignatedDealer_TierInfo'#0''_window_inflow(s: $1_DesignatedDealer_TierInfo'#0', x: int): $1_DesignatedDealer_TierInfo'#0' {
    $1_DesignatedDealer_TierInfo'#0'($window_start#$1_DesignatedDealer_TierInfo'#0'(s), x, $tiers#$1_DesignatedDealer_TierInfo'#0'(s))
}
function {:inline} $Update'$1_DesignatedDealer_TierInfo'#0''_tiers(s: $1_DesignatedDealer_TierInfo'#0', x: Vec (int)): $1_DesignatedDealer_TierInfo'#0' {
    $1_DesignatedDealer_TierInfo'#0'($window_start#$1_DesignatedDealer_TierInfo'#0'(s), $window_inflow#$1_DesignatedDealer_TierInfo'#0'(s), x)
}
function $IsValid'$1_DesignatedDealer_TierInfo'#0''(s: $1_DesignatedDealer_TierInfo'#0'): bool {
    $IsValid'u64'($window_start#$1_DesignatedDealer_TierInfo'#0'(s))
      && $IsValid'u64'($window_inflow#$1_DesignatedDealer_TierInfo'#0'(s))
      && $IsValid'vec'u64''($tiers#$1_DesignatedDealer_TierInfo'#0'(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_TierInfo'#0''(s1: $1_DesignatedDealer_TierInfo'#0', s2: $1_DesignatedDealer_TierInfo'#0'): bool {
    s1 == s2
}
var $1_DesignatedDealer_TierInfo'#0'_$memory: $Memory $1_DesignatedDealer_TierInfo'#0';

// fun DesignatedDealer::publish_designated_dealer_credential [verification] at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
procedure {:timeLimit 40} $1_DesignatedDealer_publish_designated_dealer_credential$verify(_$t0: int, _$t1: int, _$t2: bool) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    var $t19: $1_DesignatedDealer_Dealer;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: bool;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $1_Event_EventHandleGenerator_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $1_DesignatedDealer_Dealer_$modifies: [int]bool;
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'': $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#368: $Memory $1_Roles_RoleId;
    var $1_DesignatedDealer_Dealer_$memory#369: $Memory $1_DesignatedDealer_Dealer;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#370: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#371: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $1_Diem_Preburn'$1_XUS_XUS'_$memory#372: $Memory $1_Diem_Preburn'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'#0'_$memory#373: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#374: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#375: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(9,2379,2994)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    assume $IsValid'bool'($t2);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:82:9+42
    assume {:print "$at(9,3075,3117)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t1));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume CanModify<DesignatedDealer::Dealer>($t5) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:90:9+33
    assume {:print "$at(9,3495,3528)"} true;
    assume $1_DesignatedDealer_Dealer_$modifies[$t5];

    // assume CanModify<Event::EventHandleGenerator>($t5) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:92:9+54
    assume {:print "$at(9,3578,3632)"} true;
    assume $1_Event_EventHandleGenerator_$modifies[$t5];

    // assume CanModify<Diem::PreburnQueue<#0>>($t5) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:93:9+55
    assume {:print "$at(9,3641,3696)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t5];

    // assume CanModify<Diem::PreburnQueue<XUS::XUS>>($t5) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:94:9+50
    assume {:print "$at(9,3705,3755)"} true;
    assume $1_Diem_PreburnQueue'$1_XUS_XUS'_$modifies[$t5];

    // @368 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:94:9+50
    $1_Roles_RoleId_$memory#368 := $1_Roles_RoleId_$memory;

    // @370 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:94:9+50
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#370 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @372 := save_mem(Diem::Preburn<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:94:9+50
    $1_Diem_Preburn'$1_XUS_XUS'_$memory#372 := $1_Diem_Preburn'$1_XUS_XUS'_$memory;

    // @371 := save_mem(Diem::PreburnQueue<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:94:9+50
    $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#371 := $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory;

    // @373 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:94:9+50
    $1_Diem_CurrencyInfo'#0'_$memory#373 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @375 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:94:9+50
    $1_Diem_Preburn'#0'_$memory#375 := $1_Diem_Preburn'#0'_$memory;

    // @374 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:94:9+50
    $1_Diem_PreburnQueue'#0'_$memory#374 := $1_Diem_PreburnQueue'#0'_$memory;

    // @369 := save_mem(DesignatedDealer::Dealer) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:94:9+50
    $1_DesignatedDealer_Dealer_$memory#369 := $1_DesignatedDealer_Dealer_$memory;

    // trace_local[dd]($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+1
    assume {:print "$at(9,2379,2380)"} true;
    assume {:print "$track_local(26,2,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+1
    assume {:print "$track_local(26,2,1):", $t1} $t1 == $t1;

    // trace_local[add_all_currencies]($t2) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+1
    assume {:print "$track_local(26,2,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:69:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(9,2544,2589)"} true;

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:69:9+45
    assume {:print "$at(9,2544,2589)"} true;

    // assume Identical($t9, Or(Or(Not(exists<Roles::RoleId>($t8)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t8)), 1)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:69:9+45
    assume ($t9 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t8) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t9) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:69:9+45
    if ($t9) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:69:9+45
L9:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t8)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t8)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:69:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t8) && $IsEqual'u8'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)), 1) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:69:9+45
    assume {:print "$at(9,2544,2589)"} true;
    assume {:print "$track_abort(26,2):", $t10} $t10 == $t10;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:69:9+45
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:69:9+45
L8:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:69:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:70:9+35
    // >> opaque call: Roles::assert_designated_dealer($t0)
    assume {:print "$at(9,2599,2634)"} true;

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:70:9+35
    assume {:print "$at(9,2599,2634)"} true;

    // assume Identical($t12, Or(Not(exists<Roles::RoleId>($t11)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:70:9+35
    assume ($t12 == (!$ResourceExists($1_Roles_RoleId_$memory, $t11) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 2)));

    // if ($t12) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:70:9+35
    if ($t12) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:70:9+35
L11:

    // assume Or(And(Not(exists<Roles::RoleId>($t11)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 2), Eq(3, $t10))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:70:9+35
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t11) && $IsEqual'u8'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 2) && $IsEqual'u8'(3, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:70:9+35
    assume {:print "$at(9,2599,2634)"} true;
    assume {:print "$track_abort(26,2):", $t10} $t10 == $t10;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:70:9+35
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:70:9+35
L10:

    // opaque end: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:70:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:32+22
    // >> opaque call: $t5 := Signer::address_of($t0)
    assume {:print "$at(9,2667,2689)"} true;

    // $t13 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:32+22

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:32+22
    assume $IsValid'address'($t13);

    // assume Eq<address>($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:32+22
    assume $IsEqual'address'($t13, $1_Signer_spec_address_of($t0));

    // $t13 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:32+22

    // $t14 := exists<DesignatedDealer::Dealer>($t13) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:17+6
    $t14 := $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t13);

    // $t15 := !($t14) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:16+1
    call $t15 := $Not($t14);

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:83+7
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // nop at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:57+34
    // >> opaque call: $t9 := Errors::already_published($t8)

    // $t17 := opaque begin: Errors::already_published($t16) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:57+34

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:57+34
    assume $IsValid'u64'($t17);

    // assume Eq<u64>($t17, 6) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:57+34
    assume $IsEqual'u64'($t17, 6);

    // $t17 := opaque end: Errors::already_published($t16) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:57+34

    // trace_local[tmp#$4]($t17) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:9+83
    assume {:print "$track_local(26,2,4):", $t17} $t17 == $t17;

    // trace_local[tmp#$3]($t15) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:9+83
    assume {:print "$track_local(26,2,3):", $t15} $t15 == $t15;

    // if ($t15) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:9+83
    if ($t15) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:9+83
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:9+83

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:9+83

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:9+83
    assume {:print "$at(9,2644,2727)"} true;
    assume {:print "$track_abort(26,2):", $t17} $t17 == $t17;

    // $t10 := move($t17) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:9+83
    $t10 := $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:71:9+83
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:72:17+2
    assume {:print "$at(9,2745,2747)"} true;
L0:

    // $t18 := Event::new_event_handle<DesignatedDealer::ReceivedMintEvent>($t0) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:72:49+46
    call $t18 := $1_Event_new_event_handle'$1_DesignatedDealer_ReceivedMintEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(9,2777,2823)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t19 := pack DesignatedDealer::Dealer($t18) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:72:21+76
    $t19 := $1_DesignatedDealer_Dealer($t18);

    // assert CanModify<DesignatedDealer::Dealer>($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:72:9+7
    assert {:msg "assert_failed(9,2737,2744): caller does not have permission to modify `DesignatedDealer::Dealer` at given address"}
      $1_DesignatedDealer_Dealer_$modifies[$t0];

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:64:5+615
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume {:print "$at(9,2379,2994)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // move_to<DesignatedDealer::Dealer>($t19, $t0) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:72:9+7
    assume {:print "$at(9,2737,2744)"} true;
    if ($ResourceExists($1_DesignatedDealer_Dealer_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DesignatedDealer_Dealer_$memory := $ResourceUpdate($1_DesignatedDealer_Dealer_$memory, $t0, $t19);
    }
    if ($abort_flag) {
        assume {:print "$at(9,2737,2744)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(26,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // assert forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume {:print "$at(11,106134,106273)"} true;
    assert {:msg "assert_failed(11,106134,106273): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // if ($t2) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:73:9+151
    assume {:print "$at(9,2836,2987)"} true;
    if ($t2) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:73:9+151
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:73:9+151
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:31+2
    assume {:print "$at(9,2892,2894)"} true;
L2:

    // nop at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:13+33
    // >> opaque call: DesignatedDealer::add_currency<XUS::XUS>($t0, $t1)

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:113:9+42
    assume {:print "$at(9,4624,4666)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // assume Identical($t21, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t21 == $1_Signer_spec_address_of($t1));

    // assume Identical($t22, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t22 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Diem::PreburnQueue<XUS::XUS>>($t20) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:13+33
    assume {:print "$at(9,2874,2907)"} true;
    assert {:msg "assert_failed(9,2874,2907): caller does not have permission to modify `Diem::PreburnQueue<XUS::XUS>` at given address"}
      $1_Diem_PreburnQueue'$1_XUS_XUS'_$modifies[$t20];

    // opaque begin: DesignatedDealer::add_currency<XUS::XUS>($t0, $t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:13+33

    // assume Identical($t23, Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<Roles::RoleId>($t21)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t21)), 1)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), Not(exists<Roles::RoleId>($t22))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t22)), 2)), Not(exists<DesignatedDealer::Dealer>($t20))), Diem::$is_synthetic_currency<XUS::XUS>()), exists<Diem::PreburnQueue<XUS::XUS>>($t20)), exists<Diem::Preburn<XUS::XUS>>($t20)), Not(Diem::spec_is_currency<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:13+33
    assume ($t23 == (((((((((!$ResourceExists($1_Roles_RoleId_$memory, $t21) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t21)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_Roles_RoleId_$memory, $t22)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t22)), 2)) || !$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t20)) || $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) || $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t20)) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t20)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // if ($t23) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:13+33
    if ($t23) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:13+33
L13:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<Roles::RoleId>($t21)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t21)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t10))), And(Not(exists<Roles::RoleId>($t22)), Eq(5, $t10))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t22)), 2), Eq(3, $t10))), And(Not(exists<DesignatedDealer::Dealer>($t20)), Eq(5, $t10))), And(Diem::$is_synthetic_currency<XUS::XUS>(), Eq(7, $t10))), And(exists<Diem::PreburnQueue<XUS::XUS>>($t20), Eq(6, $t10))), And(exists<Diem::Preburn<XUS::XUS>>($t20), Eq(1, $t10))), And(Not(Diem::spec_is_currency<XUS::XUS>()), Eq(5, $t10))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:13+33
    assume ((((((((((!$ResourceExists($1_Roles_RoleId_$memory, $t21) && $IsEqual'u8'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t21)), 1) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t10))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t22) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t22)), 2) && $IsEqual'u8'(3, $t10))) || (!$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t20) && $IsEqual'u8'(5, $t10))) || ($1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(7, $t10))) || ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t20) && $IsEqual'u8'(6, $t10))) || ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t20) && $IsEqual'u8'(1, $t10))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:13+33
    assume {:print "$at(9,2874,2907)"} true;
    assume {:print "$track_abort(26,2):", $t10} $t10 == $t10;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:13+33
    goto L7;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:13+33
L12:

    // modifies global<Diem::PreburnQueue<XUS::XUS>>($t20) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:13+33
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'';
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t20, $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'');
    } else {
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t20);
    }

    // opaque end: DesignatedDealer::add_currency<XUS::XUS>($t0, $t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:13+33

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:74:46+1
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:36+2
    assume {:print "$at(9,2961,2963)"} true;
L4:

    // nop at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:13+38
    // >> opaque call: DesignatedDealer::add_currency<#0>($t0, $t1)

    // assume Identical($t24, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:113:9+42
    assume {:print "$at(9,4624,4666)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t0));

    // assume Identical($t25, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t1));

    // assume Identical($t26, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t26 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Diem::PreburnQueue<#0>>($t24) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:13+38
    assume {:print "$at(9,2938,2976)"} true;
    assert {:msg "assert_failed(9,2938,2976): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t24];

    // opaque begin: DesignatedDealer::add_currency<#0>($t0, $t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:13+38

    // assume Identical($t27, Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<Roles::RoleId>($t25)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 1)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), Not(exists<Roles::RoleId>($t26))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t26)), 2)), Not(exists<DesignatedDealer::Dealer>($t24))), Diem::$is_synthetic_currency<#0>()), exists<Diem::PreburnQueue<#0>>($t24)), exists<Diem::Preburn<#0>>($t24)), Not(Diem::spec_is_currency<#0>()))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:13+38
    assume ($t27 == (((((((((!$ResourceExists($1_Roles_RoleId_$memory, $t25) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_Roles_RoleId_$memory, $t26)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t26)), 2)) || !$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t24)) || $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t24)) || $ResourceExists($1_Diem_Preburn'#0'_$memory, $t24)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // if ($t27) goto L15 else goto L14 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:13+38
    if ($t27) { goto L15; } else { goto L14; }

    // label L15 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:13+38
L15:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<Roles::RoleId>($t25)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t10))), And(Not(exists<Roles::RoleId>($t26)), Eq(5, $t10))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t26)), 2), Eq(3, $t10))), And(Not(exists<DesignatedDealer::Dealer>($t24)), Eq(5, $t10))), And(Diem::$is_synthetic_currency<#0>(), Eq(7, $t10))), And(exists<Diem::PreburnQueue<#0>>($t24), Eq(6, $t10))), And(exists<Diem::Preburn<#0>>($t24), Eq(1, $t10))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t10))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:13+38
    assume ((((((((((!$ResourceExists($1_Roles_RoleId_$memory, $t25) && $IsEqual'u8'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 1) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t10))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t26) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t26)), 2) && $IsEqual'u8'(3, $t10))) || (!$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t24) && $IsEqual'u8'(5, $t10))) || ($1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(7, $t10))) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t24) && $IsEqual'u8'(6, $t10))) || ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t24) && $IsEqual'u8'(1, $t10))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:13+38
    assume {:print "$at(9,2938,2976)"} true;
    assume {:print "$track_abort(26,2):", $t10} $t10 == $t10;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:13+38
    goto L7;

    // label L14 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:13+38
L14:

    // modifies global<Diem::PreburnQueue<#0>>($t24) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:13+38
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t24, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t24);
    }

    // opaque end: DesignatedDealer::add_currency<#0>($t0, $t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:76:13+38

    // label L5 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:77:10+1
    assume {:print "$at(9,2987,2988)"} true;
L5:

    // label L6 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:78:5+1
    assume {:print "$at(9,2993,2994)"} true;
L6:

    // assert Not(Not(exists[@368]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#368, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@368]<Roles::RoleId>($t6)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#368, $t6)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Not(exists[@368]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#368, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@368]<Roles::RoleId>($t7)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#368, $t7)), 2);

    // assert Not(exists[@369]<DesignatedDealer::Dealer>($t5)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:86:9+65
    assume {:print "$at(9,3267,3332)"} true;
    assert {:msg "assert_failed(9,3267,3332): function does not abort under this condition"}
      !$ResourceExists($1_DesignatedDealer_Dealer_$memory#369, $t5);

    // assert Not(And($t2, Diem::$is_synthetic_currency[@370]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:125:9+80
    assume {:print "$at(9,5130,5210)"} true;
    assert {:msg "assert_failed(9,5130,5210): function does not abort under this condition"}
      !($t2 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#370));

    // assert Not(And($t2, exists[@371]<Diem::PreburnQueue<XUS::XUS>>($t5))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:126:9+87
    assume {:print "$at(9,5219,5306)"} true;
    assert {:msg "assert_failed(9,5219,5306): function does not abort under this condition"}
      !($t2 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#371, $t5));

    // assert Not(And($t2, exists[@372]<Diem::Preburn<XUS::XUS>>($t5))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:127:9+78
    assume {:print "$at(9,5315,5393)"} true;
    assert {:msg "assert_failed(9,5315,5393): function does not abort under this condition"}
      !($t2 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#372, $t5));

    // assert Not(And($t2, Not(Diem::spec_is_currency[@370]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !($t2 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#370));

    // assert Not(And(Not($t2), Diem::$is_synthetic_currency[@373]<#0>())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:125:9+80
    assume {:print "$at(9,5130,5210)"} true;
    assert {:msg "assert_failed(9,5130,5210): function does not abort under this condition"}
      !(!$t2 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#373));

    // assert Not(And(Not($t2), exists[@374]<Diem::PreburnQueue<#0>>($t5))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:126:9+87
    assume {:print "$at(9,5219,5306)"} true;
    assert {:msg "assert_failed(9,5219,5306): function does not abort under this condition"}
      !(!$t2 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#374, $t5));

    // assert Not(And(Not($t2), exists[@375]<Diem::Preburn<#0>>($t5))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:127:9+78
    assume {:print "$at(9,5315,5393)"} true;
    assert {:msg "assert_failed(9,5315,5393): function does not abort under this condition"}
      !(!$t2 && $ResourceExists($1_Diem_Preburn'#0'_$memory#375, $t5));

    // assert Not(And(Not($t2), Not(Diem::spec_is_currency[@373]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !(!$t2 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#373));

    // assert exists<DesignatedDealer::Dealer>($t5) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:91:9+32
    assume {:print "$at(9,3537,3569)"} true;
    assert {:msg "assert_failed(9,3537,3569): post-condition does not hold"}
      $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t5);

    // return () at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:91:9+32
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:78:5+1
    assume {:print "$at(9,2993,2994)"} true;
L7:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@368]<Roles::RoleId>($t6)), Neq<u64>(select Roles::RoleId.role_id(global[@368]<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Not(exists[@368]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@368]<Roles::RoleId>($t7)), 2)), exists[@369]<DesignatedDealer::Dealer>($t5)), And($t2, Diem::$is_synthetic_currency[@370]<XUS::XUS>())), And($t2, exists[@371]<Diem::PreburnQueue<XUS::XUS>>($t5))), And($t2, exists[@372]<Diem::Preburn<XUS::XUS>>($t5))), And($t2, Not(Diem::spec_is_currency[@370]<XUS::XUS>()))), And(Not($t2), Diem::$is_synthetic_currency[@373]<#0>())), And(Not($t2), exists[@374]<Diem::PreburnQueue<#0>>($t5))), And(Not($t2), exists[@375]<Diem::Preburn<#0>>($t5))), And(Not($t2), Not(Diem::spec_is_currency[@373]<#0>()))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:79:5+762
    assume {:print "$at(9,2999,3761)"} true;
    assert {:msg "assert_failed(9,2999,3761): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((!$ResourceExists($1_Roles_RoleId_$memory#368, $t6) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#368, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_Roles_RoleId_$memory#368, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#368, $t7)), 2)) || $ResourceExists($1_DesignatedDealer_Dealer_$memory#369, $t5)) || ($t2 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#370))) || ($t2 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#371, $t5))) || ($t2 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#372, $t5))) || ($t2 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#370))) || (!$t2 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#373))) || (!$t2 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#374, $t5))) || (!$t2 && $ResourceExists($1_Diem_Preburn'#0'_$memory#375, $t5))) || (!$t2 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#373)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@368]<Roles::RoleId>($t6)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global[@368]<Roles::RoleId>($t6)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t10))), And(Not(exists[@368]<Roles::RoleId>($t7)), Eq(5, $t10))), And(Neq<u64>(select Roles::RoleId.role_id(global[@368]<Roles::RoleId>($t7)), 2), Eq(3, $t10))), And(exists[@369]<DesignatedDealer::Dealer>($t5), Eq(6, $t10))), And(And($t2, Diem::$is_synthetic_currency[@370]<XUS::XUS>()), Eq(7, $t10))), And(And($t2, exists[@371]<Diem::PreburnQueue<XUS::XUS>>($t5)), Eq(6, $t10))), And(And($t2, exists[@372]<Diem::Preburn<XUS::XUS>>($t5)), Eq(1, $t10))), And(And($t2, Not(Diem::spec_is_currency[@370]<XUS::XUS>())), Eq(5, $t10))), And(And(Not($t2), Diem::$is_synthetic_currency[@373]<#0>()), Eq(7, $t10))), And(And(Not($t2), exists[@374]<Diem::PreburnQueue<#0>>($t5)), Eq(6, $t10))), And(And(Not($t2), exists[@375]<Diem::Preburn<#0>>($t5)), Eq(1, $t10))), And(And(Not($t2), Not(Diem::spec_is_currency[@373]<#0>())), Eq(5, $t10))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:79:5+762
    assert {:msg "assert_failed(9,2999,3761): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((!$ResourceExists($1_Roles_RoleId_$memory#368, $t6) && $IsEqual'u8'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#368, $t6)), 1) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t10))) || (!$ResourceExists($1_Roles_RoleId_$memory#368, $t7) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#368, $t7)), 2) && $IsEqual'u8'(3, $t10))) || ($ResourceExists($1_DesignatedDealer_Dealer_$memory#369, $t5) && $IsEqual'u8'(6, $t10))) || (($t2 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#370)) && $IsEqual'u8'(7, $t10))) || (($t2 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#371, $t5)) && $IsEqual'u8'(6, $t10))) || (($t2 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#372, $t5)) && $IsEqual'u8'(1, $t10))) || (($t2 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#370)) && $IsEqual'u8'(5, $t10))) || ((!$t2 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#373)) && $IsEqual'u8'(7, $t10))) || ((!$t2 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#374, $t5)) && $IsEqual'u8'(6, $t10))) || ((!$t2 && $ResourceExists($1_Diem_Preburn'#0'_$memory#375, $t5)) && $IsEqual'u8'(1, $t10))) || ((!$t2 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#373)) && $IsEqual'u8'(5, $t10)));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:79:5+762
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun DesignatedDealer::tiered_mint [verification] at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:5+1246
procedure {:timeLimit 40} $1_DesignatedDealer_tiered_mint$verify(_$t0: int, _$t1: int, _$t2: int, _$t3: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: $1_DesignatedDealer_TierInfo'#0';
    var $t22: int;
    var $t23: int;
    var $t24: Vec (int);
    var $t25: $Mutation ($1_DesignatedDealer_Dealer);
    var $t26: $Mutation ($1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent');
    var $t27: Vec (int);
    var $t28: bool;
    var $t29: $1_DesignatedDealer_ReceivedMintEvent;
    var $t30: $1_Diem_CurrencyInfo'#0';
    var $t31: $1_Diem_Diem'#0';
    var $t32: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_DesignatedDealer_Dealer_$modifies: [int]bool;
    var $1_DesignatedDealer_TierInfo'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_MintCapability'#0'_$memory#347: $Memory $1_Diem_MintCapability'#0';
    var $1_Roles_RoleId_$memory#348: $Memory $1_Roles_RoleId;
    var $1_DesignatedDealer_Dealer_$memory#349: $Memory $1_DesignatedDealer_Dealer;
    var $1_Diem_CurrencyInfo'#0'_$memory#350: $Memory $1_Diem_CurrencyInfo'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t25));
    assume IsEmptyVec(p#$Mutation($t26));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:5+1246
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(9,5405,6651)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:5+1246
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:5+1246
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:5+1246
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:172:17+6
    assume {:print "$at(9,7355,7361)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:172:17+6
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:172:17+6
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:172:17+6
    assume $IsValid'u64'($t3);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:172:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:172:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:172:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:172:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::TierInfo<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:172:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_TierInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_TierInfo'#0'_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_TierInfo'#0''($rsc))));

    // assume Identical($t8, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:170:9+97
    assume {:print "$at(9,7125,7222)"} true;
    assume ($t8 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume CanModify<DesignatedDealer::Dealer>($t2) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:165:9+33
    assume {:print "$at(9,6786,6819)"} true;
    assume $1_DesignatedDealer_Dealer_$modifies[$t2];

    // assume CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:166:9+86
    assume {:print "$at(9,6828,6914)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // assume CanModify<DesignatedDealer::TierInfo<#0>>($t2) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:168:9+45
    assume {:print "$at(9,7017,7062)"} true;
    assume $1_DesignatedDealer_TierInfo'#0'_$modifies[$t2];

    // @348 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:168:9+45
    $1_Roles_RoleId_$memory#348 := $1_Roles_RoleId_$memory;

    // @350 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:168:9+45
    $1_Diem_CurrencyInfo'#0'_$memory#350 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @347 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:168:9+45
    $1_Diem_MintCapability'#0'_$memory#347 := $1_Diem_MintCapability'#0'_$memory;

    // @349 := save_mem(DesignatedDealer::Dealer) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:168:9+45
    $1_DesignatedDealer_Dealer_$memory#349 := $1_DesignatedDealer_Dealer_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:5+1
    assume {:print "$at(9,5405,5406)"} true;
    assume {:print "$track_local(26,3,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:5+1
    assume {:print "$track_local(26,3,1):", $t1} $t1 == $t1;

    // trace_local[dd_addr]($t2) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:5+1
    assume {:print "$track_local(26,3,2):", $t2} $t2 == $t2;

    // trace_local[_tier_index]($t3) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:5+1
    assume {:print "$track_local(26,3,3):", $t3} $t3 == $t3;

    // nop at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:138:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(9,5744,5789)"} true;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:138:9+45
    assume {:print "$at(9,5744,5789)"} true;

    // assume Identical($t11, Or(Or(Not(exists<Roles::RoleId>($t10)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:138:9+45
    assume ($t11 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t10) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t11) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:138:9+45
    if ($t11) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:138:9+45
L10:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t12)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 1), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t12))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:138:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'u8'(5, $t12)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 1) && $IsEqual'u8'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:138:9+45
    assume {:print "$at(9,5744,5789)"} true;
    assume {:print "$track_abort(26,3):", $t12} $t12 == $t12;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:138:9+45
    goto L8;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:138:9+45
L9:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:138:9+45

    // $t13 := 0 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:25+1
    assume {:print "$at(9,5815,5816)"} true;
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := >($t1, $t13) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:23+1
    call $t14 := $Gt($t1, $t13);

    // $t15 := 4 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:53+20
    $t15 := 4;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:28+46
    // >> opaque call: $t11 := Errors::invalid_argument($t10)

    // $t16 := opaque begin: Errors::invalid_argument($t15) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:28+46

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:28+46
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 7) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:28+46
    assume $IsEqual'u64'($t16, 7);

    // $t16 := opaque end: Errors::invalid_argument($t15) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:28+46

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:9+66
    assume {:print "$track_local(26,3,5):", $t16} $t16 == $t16;

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:9+66
    assume {:print "$track_local(26,3,4):", $t14} $t14 == $t14;

    // if ($t14) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:9+66
    if ($t14) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:9+66
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:9+66

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:9+66
    assume {:print "$at(9,5799,5865)"} true;
    assume {:print "$track_abort(26,3):", $t16} $t16 == $t16;

    // $t12 := move($t16) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:9+66
    $t12 := $t16;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:139:9+66
    goto L8;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:26+7
    assume {:print "$at(9,5892,5899)"} true;
L0:

    // nop at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:16+18
    // >> opaque call: $t12 := DesignatedDealer::exists_at($t2)

    // $t17 := opaque begin: DesignatedDealer::exists_at($t2) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:16+18

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:16+18
    assume $IsValid'bool'($t17);

    // assume Eq<bool>($t17, exists<DesignatedDealer::Dealer>($t2)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:16+18
    assume $IsEqual'bool'($t17, $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t2));

    // $t17 := opaque end: DesignatedDealer::exists_at($t2) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:16+18

    // $t18 := 0 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:58+7
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // nop at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:36+30
    // >> opaque call: $t14 := Errors::not_published($t13)

    // $t19 := opaque begin: Errors::not_published($t18) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:36+30

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:36+30
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 5) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:36+30
    assume $IsEqual'u64'($t19, 5);

    // $t19 := opaque end: Errors::not_published($t18) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:36+30

    // trace_local[tmp#$7]($t19) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:9+58
    assume {:print "$track_local(26,3,7):", $t19} $t19 == $t19;

    // trace_local[tmp#$6]($t17) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:9+58
    assume {:print "$track_local(26,3,6):", $t17} $t17 == $t17;

    // if ($t17) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:9+58
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:9+58
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:9+58

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:9+58
    assume {:print "$at(9,5875,5933)"} true;
    assume {:print "$track_abort(26,3):", $t19} $t19 == $t19;

    // $t12 := move($t19) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:9+58
    $t12 := $t19;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:140:9+58
    goto L8;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:144:40+7
    assume {:print "$at(9,6116,6123)"} true;
L2:

    // $t20 := exists<DesignatedDealer::TierInfo<#0>>($t2) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:144:13+6
    $t20 := $ResourceExists($1_DesignatedDealer_TierInfo'#0'_$memory, $t2);

    // if ($t20) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:144:9+167
    if ($t20) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:144:9+167
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:144:9+167
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:145:106+7
    assume {:print "$at(9,6233,6240)"} true;
L4:

    // assert CanModify<DesignatedDealer::TierInfo<#0>>($t2) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:145:76+9
    assert {:msg "assert_failed(9,6203,6212): caller does not have permission to modify `DesignatedDealer::TierInfo<#0>` at given address"}
      $1_DesignatedDealer_TierInfo'#0'_$modifies[$t2];

    // $t21 := move_from<DesignatedDealer::TierInfo<#0>>($t2) on_abort goto L8 with $t12 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:145:76+9
    if (!$ResourceExists($1_DesignatedDealer_TierInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t21 := $ResourceValue($1_DesignatedDealer_TierInfo'#0'_$memory, $t2);
        $1_DesignatedDealer_TierInfo'#0'_$memory := $ResourceRemove($1_DesignatedDealer_TierInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(9,6203,6212)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(26,3):", $t12} $t12 == $t12;
        goto L8;
    }

    // ($t22, $t23, $t24) := unpack DesignatedDealer::TierInfo<#0>($t21) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:145:17+56
    $t22 := $window_start#$1_DesignatedDealer_TierInfo'#0'($t21);
    $t23 := $window_inflow#$1_DesignatedDealer_TierInfo'#0'($t21);
    $t24 := $tiers#$1_DesignatedDealer_TierInfo'#0'($t21);

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:145:70+1

    // destroy($t23) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:145:60+1

    // destroy($t22) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:145:42+1

    // label L6 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:150:44+7
    assume {:print "$at(9,6378,6385)"} true;
L6:

    // assert CanModify<DesignatedDealer::Dealer>($t2) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:150:18+17
    assert {:msg "assert_failed(9,6352,6369): caller does not have permission to modify `DesignatedDealer::Dealer` at given address"}
      $1_DesignatedDealer_Dealer_$modifies[$t2];

    // $t25 := borrow_global<DesignatedDealer::Dealer>($t2) on_abort goto L8 with $t12 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:150:18+17
    if (!$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t25 := $Mutation($Global($t2), EmptyVec(), $ResourceValue($1_DesignatedDealer_Dealer_$memory, $t2));
    }
    if ($abort_flag) {
        assume {:print "$at(9,6352,6369)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(26,3):", $t12} $t12 == $t12;
        goto L8;
    }

    // $t26 := borrow_field<DesignatedDealer::Dealer>.mint_event_handle($t25) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:150:13+57
    $t26 := $ChildMutation($t25, 0, $mint_event_handle#$1_DesignatedDealer_Dealer($Dereference($t25)));

    // nop at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:152:32+31
    // >> opaque call: $t22 := Diem::currency_code<#0>()
    assume {:print "$at(9,6469,6500)"} true;

    // $t27 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:152:32+31

    // assume Identical($t28, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:152:32+31
    assume ($t28 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t28) goto L13 else goto L11 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:152:32+31
    if ($t28) { goto L13; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:152:32+31
L12:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t12)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:152:32+31
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t12));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:152:32+31
    assume {:print "$at(9,6469,6500)"} true;
    assume {:print "$track_abort(26,3):", $t12} $t12 == $t12;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:152:32+31
    goto L8;

    // label L11 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:152:32+31
L11:

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:152:32+31
    assume $IsValid'vec'u8''($t27);

    // assume Eq<vector<u8>>($t27, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:152:32+31
    assume $IsEqual'vec'u8''($t27, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t27 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:152:32+31

    // $t29 := pack DesignatedDealer::ReceivedMintEvent($t27, $t2, $t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:151:13+166
    assume {:print "$at(9,6418,6584)"} true;
    $t29 := $1_DesignatedDealer_ReceivedMintEvent($t27, $t2, $t1);

    // Event::emit_event<DesignatedDealer::ReceivedMintEvent>($t26, $t29) on_abort goto L8 with $t12 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:149:9+298
    assume {:print "$at(9,6297,6595)"} true;
    call $t26 := $1_Event_emit_event'$1_DesignatedDealer_ReceivedMintEvent'($t26, $t29);
    if ($abort_flag) {
        assume {:print "$at(9,6297,6595)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(26,3):", $t12} $t12 == $t12;
        goto L8;
    }

    // assume Identical($t30, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:452:9+91
    assume {:print "$at(10,21848,21939)"} true;
    assume ($t30 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assert CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:157:9+40
    assume {:print "$at(9,6605,6645)"} true;
    assert {:msg "assert_failed(9,6605,6645): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // $t31 := Diem::mint<#0>($t0, $t1) on_abort goto L8 with $t12 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:157:9+40
    call $t31 := $1_Diem_mint'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(9,6605,6645)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(26,3):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_return[0]($t31) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:157:9+40
    assume {:print "$track_return(26,3,0):", $t31} $t31 == $t31;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:158:5+1
    assume {:print "$at(9,6650,6651)"} true;
L7:

    // assume Identical($t32, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:171:9+107
    assume {:print "$at(9,7231,7338)"} true;
    assume ($t32 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assert Not(Eq<u64>($t1, 0)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:180:9+52
    assume {:print "$at(9,7706,7758)"} true;
    assert {:msg "assert_failed(9,7706,7758): function does not abort under this condition"}
      !$IsEqual'u64'($t1, 0);

    // assert Not(Not(exists[@347]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:182:9+120
    assume {:print "$at(9,7801,7921)"} true;
    assert {:msg "assert_failed(9,7801,7921): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_MintCapability'#0'_$memory#347, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@348]<Roles::RoleId>($t9))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#348, $t9);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@348]<Roles::RoleId>($t9)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#348, $t9)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Not(exists[@349]<DesignatedDealer::Dealer>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:22:9+62
    assume {:print "$at(9,643,705)"} true;
    assert {:msg "assert_failed(9,643,705): function does not abort under this condition"}
      !!$ResourceExists($1_DesignatedDealer_Dealer_$memory#349, $t2);

    // assert Not(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@350]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:446:9+78
    assume {:print "$at(10,21552,21630)"} true;
    assert {:msg "assert_failed(10,21552,21630): function does not abort under this condition"}
      !!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#350));

    // assert Not(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@350]<#0>()), $t1), MaxU128())) at /home/ying/diem/language/diem-framework/modules/Diem.move:447:9+102
    assume {:print "$at(10,21639,21741)"} true;
    assert {:msg "assert_failed(10,21639,21741): function does not abort under this condition"}
      !(($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#350)) + $t1) > $MAX_U128);

    // assert Not(Not(Diem::spec_is_currency[@350]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#350);

    // assert exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:167:9+85
    assume {:print "$at(9,6923,7008)"} true;
    assert {:msg "assert_failed(9,6923,7008): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assert Not(exists<DesignatedDealer::TierInfo<#0>>($t2)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:169:9+45
    assume {:print "$at(9,7071,7116)"} true;
    assert {:msg "assert_failed(9,7071,7116): post-condition does not hold"}
      !$ResourceExists($1_DesignatedDealer_TierInfo'#0'_$memory, $t2);

    // assert Eq<u64>(select Diem::Diem.value($t31), $t1) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:172:9+31
    assume {:print "$at(9,7347,7378)"} true;
    assert {:msg "assert_failed(9,7347,7378): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t31), $t1);

    // assert Eq<Diem::CurrencyInfo<#0>>($t32, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t8, Add(select Diem::CurrencyInfo.total_value($t8), $t1))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:173:9+107
    assume {:print "$at(9,7387,7494)"} true;
    assert {:msg "assert_failed(9,7387,7494): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t32, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t8, ($total_value#$1_Diem_CurrencyInfo'#0'($t8) + $t1)));

    // return $t31 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:173:9+107
    $ret0 := $t31;
    return;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:158:5+1
    assume {:print "$at(9,6650,6651)"} true;
L8:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Eq<u64>($t1, 0), Not(exists[@347]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0)))), Not(exists[@348]<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global[@348]<Roles::RoleId>($t9)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Not(exists[@349]<DesignatedDealer::Dealer>($t2))), Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@350]<#0>()))), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@350]<#0>()), $t1), MaxU128())), Not(Diem::spec_is_currency[@350]<#0>())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:159:5+844
    assume {:print "$at(9,6656,7500)"} true;
    assert {:msg "assert_failed(9,6656,7500): abort not covered by any of the `aborts_if` clauses"}
      (((((((($IsEqual'u64'($t1, 0) || !$ResourceExists($1_Diem_MintCapability'#0'_$memory#347, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#348, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#348, $t9)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_DesignatedDealer_Dealer_$memory#349, $t2)) || !$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#350))) || (($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#350)) + $t1) > $MAX_U128)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#350));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(And(Eq<u64>($t1, 0), Eq(7, $t12)), And(Not(exists[@347]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t12))), And(Not(exists[@348]<Roles::RoleId>($t9)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global[@348]<Roles::RoleId>($t9)), 1), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t12))), And(Not(exists[@349]<DesignatedDealer::Dealer>($t2)), Eq(5, $t12))), And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@350]<#0>())), Eq(1, $t12))), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@350]<#0>()), $t1), MaxU128()), Eq(8, $t12))), And(Not(Diem::spec_is_currency[@350]<#0>()), Eq(5, $t12))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:159:5+844
    assert {:msg "assert_failed(9,6656,7500): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((($IsEqual'u64'($t1, 0) && $IsEqual'u8'(7, $t12)) || (!$ResourceExists($1_Diem_MintCapability'#0'_$memory#347, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#348, $t9) && $IsEqual'u8'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#348, $t9)), 1) && $IsEqual'u8'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t12))) || (!$ResourceExists($1_DesignatedDealer_Dealer_$memory#349, $t2) && $IsEqual'u8'(5, $t12))) || (!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#350)) && $IsEqual'u8'(1, $t12))) || ((($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#350)) + $t1) > $MAX_U128) && $IsEqual'u8'(8, $t12))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#350) && $IsEqual'u8'(5, $t12)));

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:159:5+844
    $abort_code := $t12;
    $abort_flag := true;
    return;

    // label L13 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L13:

    // destroy($t26) at <internal>:1:1+10

    // goto L12 at <internal>:1:1+10
    goto L12;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/ChainId.move:58:10+98
function {:inline} $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory: $Memory $1_ChainId_ChainId): int {
    $id#$1_ChainId_ChainId($ResourceValue($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))
}

// struct ChainId::ChainId at /home/ying/diem/language/diem-framework/modules/ChainId.move:11:5+45
type {:datatype} $1_ChainId_ChainId;
function {:constructor} $1_ChainId_ChainId($id: int): $1_ChainId_ChainId;
function {:inline} $Update'$1_ChainId_ChainId'_id(s: $1_ChainId_ChainId, x: int): $1_ChainId_ChainId {
    $1_ChainId_ChainId(x)
}
function $IsValid'$1_ChainId_ChainId'(s: $1_ChainId_ChainId): bool {
    $IsValid'u8'($id#$1_ChainId_ChainId(s))
}
function {:inline} $IsEqual'$1_ChainId_ChainId'(s1: $1_ChainId_ChainId, s2: $1_ChainId_ChainId): bool {
    s1 == s2
}
var $1_ChainId_ChainId_$memory: $Memory $1_ChainId_ChainId;

// fun ChainId::get [baseline] at /home/ying/diem/language/diem-framework/modules/ChainId.move:37:5+158
procedure {:inline 1} $1_ChainId_get() returns ($ret0: int)
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_ChainId_ChainId;
    var $t4: int;
    var $temp_0'u8': int;

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/ChainId.move:38:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(7,1456,1489)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/ChainId.move:38:9+33

    // assume Identical($t0, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/ChainId.move:38:9+33
    assume ($t0 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/ChainId.move:38:9+33
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/ChainId.move:38:9+33
L4:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t1)) at /home/ying/diem/language/diem-framework/modules/ChainId.move:38:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/ChainId.move:38:9+33
    assume {:print "$at(7,1456,1489)"} true;
    assume {:print "$track_abort(27,0):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/ChainId.move:38:9+33
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/ChainId.move:38:9+33
L3:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/ChainId.move:38:9+33

    // $t2 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/ChainId.move:39:32+34
    assume {:print "$at(7,1522,1556)"} true;
    call $t2 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(7,1522,1556)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(27,0):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_global<ChainId::ChainId>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/ChainId.move:39:9+13
    if (!$ResourceExists($1_ChainId_ChainId_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_ChainId_ChainId_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(7,1499,1512)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(27,0):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<ChainId::ChainId>.id($t3) at /home/ying/diem/language/diem-framework/modules/ChainId.move:39:9+61
    $t4 := $id#$1_ChainId_ChainId($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/ChainId.move:39:9+61
    assume {:print "$track_return(27,0,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/ChainId.move:40:5+1
    assume {:print "$at(7,1565,1566)"} true;
L1:

    // return $t4 at /home/ying/diem/language/diem-framework/modules/ChainId.move:40:5+1
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/ChainId.move:40:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/ChainId.move:40:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:161:5+163
function {:inline} $1_AccountFreezing_$account_is_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:230:9+136
function {:inline} $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:234:9+141
function {:inline} $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && !$is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// struct AccountFreezing::FreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:23:5+208
type {:datatype} $1_AccountFreezing_FreezeAccountEvent;
function {:constructor} $1_AccountFreezing_FreezeAccountEvent($initiator_address: int, $frozen_address: int): $1_AccountFreezing_FreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent(x, $frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_frozen_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeAccountEvent'(s: $1_AccountFreezing_FreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s))
      && $IsValid'address'($frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(s1: $1_AccountFreezing_FreezeAccountEvent, s2: $1_AccountFreezing_FreezeAccountEvent): bool {
    s1 == s2
}

// struct AccountFreezing::FreezeEventsHolder at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:17:5+169
type {:datatype} $1_AccountFreezing_FreezeEventsHolder;
function {:constructor} $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', $unfreeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder;
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_freeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder(x, $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_unfreeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeEventsHolder'(s: $1_AccountFreezing_FreezeEventsHolder): bool {
    $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
      && $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''($unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeEventsHolder'(s1: $1_AccountFreezing_FreezeEventsHolder, s2: $1_AccountFreezing_FreezeEventsHolder): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezeEventsHolder_$memory: $Memory $1_AccountFreezing_FreezeEventsHolder;

// struct AccountFreezing::FreezingBit at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:12:5+164
type {:datatype} $1_AccountFreezing_FreezingBit;
function {:constructor} $1_AccountFreezing_FreezingBit($is_frozen: bool): $1_AccountFreezing_FreezingBit;
function {:inline} $Update'$1_AccountFreezing_FreezingBit'_is_frozen(s: $1_AccountFreezing_FreezingBit, x: bool): $1_AccountFreezing_FreezingBit {
    $1_AccountFreezing_FreezingBit(x)
}
function $IsValid'$1_AccountFreezing_FreezingBit'(s: $1_AccountFreezing_FreezingBit): bool {
    $IsValid'bool'($is_frozen#$1_AccountFreezing_FreezingBit(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezingBit'(s1: $1_AccountFreezing_FreezingBit, s2: $1_AccountFreezing_FreezingBit): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit;

// struct AccountFreezing::UnfreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:31:5+216
type {:datatype} $1_AccountFreezing_UnfreezeAccountEvent;
function {:constructor} $1_AccountFreezing_UnfreezeAccountEvent($initiator_address: int, $unfrozen_address: int): $1_AccountFreezing_UnfreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent(x, $unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_unfrozen_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_UnfreezeAccountEvent'(s: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
      && $IsValid'address'($unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(s1: $1_AccountFreezing_UnfreezeAccountEvent, s2: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    s1 == s2
}

// fun AccountFreezing::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:5+508
procedure {:inline 1} $1_AccountFreezing_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    var $t13: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    var $t14: $1_AccountFreezing_FreezeEventsHolder;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:64:9+47
    assume {:print "$at(4,2284,2331)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:5+1
    assume {:print "$at(4,1621,1622)"} true;
    assume {:print "$track_local(28,4,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(4,1674,1705)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31

    // assume Identical($t4, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
    assume ($t4 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t4) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
    if ($t4) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
L5:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t5)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
    assume {:print "$at(4,1674,1705)"} true;
    assume {:print "$track_abort(28,4):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
L4:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(4,1715,1758)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43

    // assume Identical($t6, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
    assume ($t6 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t6) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
    if ($t6) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
L7:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t5)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
    assume {:print "$at(4,1715,1758)"} true;
    assume {:print "$track_abort(28,4):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
L6:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:41+30
    // >> opaque call: $t3 := Signer::address_of($t0)
    assume {:print "$at(4,1816,1846)"} true;

    // $t7 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:41+30

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:41+30
    assume $IsValid'address'($t7);

    // assume Eq<address>($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:41+30
    assume $IsEqual'address'($t7, $1_Signer_spec_address_of($t0));

    // $t7 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:41+30

    // $t8 := exists<AccountFreezing::FreezeEventsHolder>($t7) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:14+6
    $t8 := $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $t7);

    // $t9 := !($t8) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:13+1
    call $t9 := $Not($t8);

    // $t10 := 1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:39+21
    assume {:print "$at(4,1887,1908)"} true;
    $t10 := 1;
    assume $IsValid'u64'($t10);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:13+48
    // >> opaque call: $t7 := Errors::already_published($t6)

    // $t11 := opaque begin: Errors::already_published($t10) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:13+48

    // assume WellFormed($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:13+48
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 6) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:13+48
    assume $IsEqual'u64'($t11, 6);

    // $t11 := opaque end: Errors::already_published($t10) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:13+48

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
    assume {:print "$at(4,1768,1919)"} true;
    assume {:print "$track_local(28,4,2):", $t11} $t11 == $t11;

    // trace_local[tmp#$1]($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
    assume {:print "$track_local(28,4,1):", $t9} $t9 == $t9;

    // if ($t9) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
    assume {:print "$at(4,1768,1919)"} true;
    assume {:print "$track_abort(28,4):", $t11} $t11 == $t11;

    // $t5 := move($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
    $t5 := $t11;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:56:17+10
    assume {:print "$at(4,1937,1947)"} true;
L0:

    // $t12 := Event::new_event_handle<AccountFreezing::FreezeAccountEvent>($t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:57:34+35
    assume {:print "$at(4,2003,2038)"} true;
    call $t12 := $1_Event_new_event_handle'$1_AccountFreezing_FreezeAccountEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,2003,2038)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(28,4):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t13 := Event::new_event_handle<AccountFreezing::UnfreezeAccountEvent>($t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:58:36+35
    assume {:print "$at(4,2075,2110)"} true;
    call $t13 := $1_Event_new_event_handle'$1_AccountFreezing_UnfreezeAccountEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,2075,2110)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(28,4):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t14 := pack AccountFreezing::FreezeEventsHolder($t12, $t13) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:56:29+172
    assume {:print "$at(4,1949,2121)"} true;
    $t14 := $1_AccountFreezing_FreezeEventsHolder($t12, $t13);

    // move_to<AccountFreezing::FreezeEventsHolder>($t14, $t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:56:9+7
    if ($ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_AccountFreezing_FreezeEventsHolder_$memory := $ResourceUpdate($1_AccountFreezing_FreezeEventsHolder_$memory, $t0, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(4,1929,1936)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(28,4):", $t5} $t5 == $t5;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:60:5+1
    assume {:print "$at(4,2128,2129)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:60:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:60:5+1
L3:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:60:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun AccountFreezing::create [baseline] at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:69:5+236
procedure {:inline 1} $1_AccountFreezing_create(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: $1_AccountFreezing_FreezingBit;
    var $t0: int;
    var $1_AccountFreezing_FreezingBit_$modifies: [int]bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:75:9+44
    assume {:print "$at(4,2739,2783)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:69:5+1
    assume {:print "$at(4,2476,2477)"} true;
    assume {:print "$track_local(28,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:70:20+27
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(4,2533,2560)"} true;

    // $t5 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:70:20+27

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:70:20+27
    assume $IsValid'address'($t5);

    // assume Eq<address>($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:70:20+27
    assume $IsEqual'address'($t5, $1_Signer_spec_address_of($t0));

    // $t5 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:70:20+27

    // trace_local[addr]($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:70:13+4
    assume {:print "$track_local(28,2,1):", $t5} $t5 == $t5;

    // $t6 := exists<AccountFreezing::FreezingBit>($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:17+6
    assume {:print "$at(4,2578,2584)"} true;
    $t6 := $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t5);

    // $t7 := !($t6) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:16+1
    call $t7 := $Not($t6);

    // $t8 := 2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:70+13
    $t8 := 2;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:44+40
    // >> opaque call: $t8 := Errors::already_published($t7)

    // $t9 := opaque begin: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:44+40

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:44+40
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 6) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:44+40
    assume $IsEqual'u64'($t9, 6);

    // $t9 := opaque end: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:44+40

    // trace_local[tmp#$3]($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
    assume {:print "$track_local(28,2,3):", $t9} $t9 == $t9;

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
    assume {:print "$track_local(28,2,2):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
    assume {:print "$at(4,2570,2646)"} true;
    assume {:print "$track_abort(28,2):", $t9} $t9 == $t9;

    // $t10 := move($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
    $t10 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:72:17+7
    assume {:print "$at(4,2664,2671)"} true;
L0:

    // $t11 := false at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:72:51+5
    $t11 := false;
    assume $IsValid'bool'($t11);

    // $t12 := pack AccountFreezing::FreezingBit($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:72:26+32
    $t12 := $1_AccountFreezing_FreezingBit($t11);

    // move_to<AccountFreezing::FreezingBit>($t12, $t0) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:72:9+7
    if ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t0, $t12);
    }
    if ($abort_flag) {
        assume {:print "$at(4,2656,2663)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(28,2):", $t10} $t10 == $t10;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:73:5+1
    assume {:print "$at(4,2711,2712)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:73:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:73:5+1
L3:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:73:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun AccountFreezing::create [verification] at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:69:5+236
procedure {:timeLimit 40} $1_AccountFreezing_create$verify(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: $1_AccountFreezing_FreezingBit;
    var $t0: int;
    var $1_AccountFreezing_FreezingBit_$modifies: [int]bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountFreezing_FreezingBit_$memory#115: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:69:5+236
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume {:print "$at(4,2476,2712)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:69:5+236
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:69:5+236
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:69:5+236
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:75:9+44
    assume {:print "$at(4,2739,2783)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume CanModify<AccountFreezing::FreezingBit>($t4) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:76:9+35
    assume {:print "$at(4,2792,2827)"} true;
    assume $1_AccountFreezing_FreezingBit_$modifies[$t4];

    // @115 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:76:9+35
    $1_AccountFreezing_FreezingBit_$memory#115 := $1_AccountFreezing_FreezingBit_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:69:5+1
    assume {:print "$at(4,2476,2477)"} true;
    assume {:print "$track_local(28,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:70:20+27
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(4,2533,2560)"} true;

    // $t5 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:70:20+27

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:70:20+27
    assume $IsValid'address'($t5);

    // assume Eq<address>($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:70:20+27
    assume $IsEqual'address'($t5, $1_Signer_spec_address_of($t0));

    // $t5 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:70:20+27

    // trace_local[addr]($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:70:13+4
    assume {:print "$track_local(28,2,1):", $t5} $t5 == $t5;

    // $t6 := exists<AccountFreezing::FreezingBit>($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:17+6
    assume {:print "$at(4,2578,2584)"} true;
    $t6 := $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t5);

    // $t7 := !($t6) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:16+1
    call $t7 := $Not($t6);

    // $t8 := 2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:70+13
    $t8 := 2;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:44+40
    // >> opaque call: $t8 := Errors::already_published($t7)

    // $t9 := opaque begin: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:44+40

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:44+40
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 6) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:44+40
    assume $IsEqual'u64'($t9, 6);

    // $t9 := opaque end: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:44+40

    // trace_local[tmp#$3]($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
    assume {:print "$track_local(28,2,3):", $t9} $t9 == $t9;

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
    assume {:print "$track_local(28,2,2):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
    assume {:print "$at(4,2570,2646)"} true;
    assume {:print "$track_abort(28,2):", $t9} $t9 == $t9;

    // $t10 := move($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
    $t10 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:71:9+76
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:72:17+7
    assume {:print "$at(4,2664,2671)"} true;
L0:

    // $t11 := false at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:72:51+5
    $t11 := false;
    assume $IsValid'bool'($t11);

    // $t12 := pack AccountFreezing::FreezingBit($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:72:26+32
    $t12 := $1_AccountFreezing_FreezingBit($t11);

    // assert CanModify<AccountFreezing::FreezingBit>($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:72:9+7
    assert {:msg "assert_failed(4,2656,2663): caller does not have permission to modify `AccountFreezing::FreezingBit` at given address"}
      $1_AccountFreezing_FreezingBit_$modifies[$t0];

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:69:5+236
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(4,2476,2712)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // move_to<AccountFreezing::FreezingBit>($t12, $t0) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:72:9+7
    assume {:print "$at(4,2656,2663)"} true;
    if ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t0, $t12);
    }
    if ($abort_flag) {
        assume {:print "$at(4,2656,2663)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(28,2):", $t10} $t10 == $t10;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(11,106721,106818)"} true;
    assert {:msg "assert_failed(11,106721,106818): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:73:5+1
    assume {:print "$at(4,2711,2712)"} true;
L2:

    // assert Not(exists[@115]<AccountFreezing::FreezingBit>($t4)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:77:9+67
    assume {:print "$at(4,2836,2903)"} true;
    assert {:msg "assert_failed(4,2836,2903): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#115, $t4);

    // assert AccountFreezing::spec_account_is_not_frozen($t4) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:78:9+41
    assume {:print "$at(4,2912,2953)"} true;
    assert {:msg "assert_failed(4,2912,2953): post-condition does not hold"}
      $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t4);

    // assert forall addr: TypeDomain<address>() where exists[@115]<AccountFreezing::FreezingBit>(addr): Eq<bool>(select AccountFreezing::FreezingBit.is_frozen(global<AccountFreezing::FreezingBit>(addr)), select AccountFreezing::FreezingBit.is_frozen(global[@115]<AccountFreezing::FreezingBit>(addr))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:223:9+159
    assume {:print "$at(4,9112,9271)"} true;
    assert {:msg "assert_failed(4,9112,9271): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#115, addr))  ==> ($IsEqual'bool'($is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)), $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory#115, addr)))));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:223:9+159
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:73:5+1
    assume {:print "$at(4,2711,2712)"} true;
L3:

    // assert exists[@115]<AccountFreezing::FreezingBit>($t4) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:74:5+242
    assume {:print "$at(4,2717,2959)"} true;
    assert {:msg "assert_failed(4,2717,2959): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_AccountFreezing_FreezingBit_$memory#115, $t4);

    // assert And(exists[@115]<AccountFreezing::FreezingBit>($t4), Eq(6, $t10)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:74:5+242
    assert {:msg "assert_failed(4,2717,2959): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#115, $t4) && $IsEqual'u8'(6, $t10));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:74:5+242
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun AccountFreezing::freeze_account [verification] at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1052
procedure {:timeLimit 40} $1_AccountFreezing_freeze_account$verify(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    var $t11: $1_AccountFreezing_FreezeAccountEvent;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: bool;
    var $t29: $Mutation ($1_AccountFreezing_FreezingBit);
    var $t30: $Mutation (bool);
    var $t31: int;
    var $t32: int;
    var $t33: $Mutation ($1_AccountFreezing_FreezeEventsHolder);
    var $t34: $Mutation ($1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent');
    var $t35: $1_AccountFreezing_FreezeAccountEvent;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#193: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Roles_RoleId_$memory#194: $Memory $1_Roles_RoleId;
    var $1_AccountFreezing_FreezingBit_$memory#195: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t29));
    assume IsEmptyVec(p#$Mutation($t30));
    assume IsEmptyVec(p#$Mutation($t33));
    assume IsEmptyVec(p#$Mutation($t34));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1052
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(4,3003,4055)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1052
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1052
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1052
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1052
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1052
    assume $IsValid'address'($t1);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1052
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1052
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1052
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1052
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, select AccountFreezing::FreezeEventsHolder.freeze_event_handle(global<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:115:9+96
    assume {:print "$at(4,4688,4784)"} true;
    assume ($t10 == $freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder($ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t11, pack AccountFreezing::FreezeAccountEvent(Signer::spec_address_of($t0), $t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:116:9+133
    assume {:print "$at(4,4793,4926)"} true;
    assume ($t11 == $1_AccountFreezing_FreezeAccountEvent($1_Signer_spec_address_of($t0), $t1));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // @193 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1
    assume {:print "$at(4,3003,3004)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#193 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @194 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1
    $1_Roles_RoleId_$memory#194 := $1_Roles_RoleId_$memory;

    // @195 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1
    $1_AccountFreezing_FreezingBit_$memory#195 := $1_AccountFreezing_FreezingBit_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1
    assume {:print "$track_local(28,3,0):", $t0} $t0 == $t0;

    // trace_local[frozen_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1
    assume {:print "$track_local(28,3,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(4,3150,3183)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+33

    // assume Identical($t13, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+33
    assume ($t13 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t13) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+33
    if ($t13) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+33
L9:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t14)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t14));

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+33
    assume {:print "$at(4,3150,3183)"} true;
    assume {:print "$track_abort(28,3):", $t14} $t14 == $t14;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+33
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+33
L8:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+33

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:88:9+42
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(4,3193,3235)"} true;

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:88:9+42
    assume {:print "$at(4,3193,3235)"} true;

    // assume Identical($t16, Or(Or(Not(exists<Roles::RoleId>($t15)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:88:9+42
    assume ($t16 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t15) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t16) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:88:9+42
    if ($t16) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:88:9+42
L11:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t15)), Eq(5, $t14)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 1), Eq(3, $t14))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t14))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:88:9+42
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t15) && $IsEqual'u8'(5, $t14)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 1) && $IsEqual'u8'(3, $t14))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t14)));

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:88:9+42
    assume {:print "$at(4,3193,3235)"} true;
    assume {:print "$track_abort(28,3):", $t14} $t14 == $t14;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:88:9+42
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:88:9+42
L10:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:88:9+42

    // $t17 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L7 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:34+34
    assume {:print "$at(4,3327,3361)"} true;
    call $t17 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(4,3327,3361)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(28,3):", $t14} $t14 == $t14;
        goto L7;
    }

    // $t18 := !=($t1, $t17) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:31+2
    $t18 := !$IsEqual'address'($t1, $t17);

    // $t19 := 3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:95+24
    $t19 := 3;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:70+50
    // >> opaque call: $t12 := Errors::invalid_argument($t11)

    // $t20 := opaque begin: Errors::invalid_argument($t19) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:70+50

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:70+50
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 7) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:70+50
    assume $IsEqual'u64'($t20, 7);

    // $t20 := opaque end: Errors::invalid_argument($t19) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:70+50

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+112
    assume {:print "$track_local(28,3,4):", $t20} $t20 == $t20;

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+112
    assume {:print "$track_local(28,3,3):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+112
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+112
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+112

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+112
    assume {:print "$at(4,3302,3414)"} true;
    assume {:print "$track_abort(28,3):", $t20} $t20 == $t20;

    // $t14 := move($t20) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+112
    $t14 := $t20;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+112
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:16+14
    assume {:print "$at(4,3431,3445)"} true;
L0:

    // $t21 := CoreAddresses::TREASURY_COMPLIANCE_ADDRESS() on_abort goto L7 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:34+44
    call $t21 := $1_CoreAddresses_TREASURY_COMPLIANCE_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(4,3449,3493)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(28,3):", $t14} $t14 == $t14;
        goto L7;
    }

    // $t22 := !=($t1, $t21) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:31+2
    $t22 := !$IsEqual'address'($t1, $t21);

    // $t23 := 4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:105+17
    $t23 := 4;
    assume $IsValid'u64'($t23);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:80+43
    // >> opaque call: $t16 := Errors::invalid_argument($t15)

    // $t24 := opaque begin: Errors::invalid_argument($t23) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:80+43

    // assume WellFormed($t24) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:80+43
    assume $IsValid'u64'($t24);

    // assume Eq<u64>($t24, 7) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:80+43
    assume $IsEqual'u64'($t24, 7);

    // $t24 := opaque end: Errors::invalid_argument($t23) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:80+43

    // trace_local[tmp#$6]($t24) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+115
    assume {:print "$track_local(28,3,6):", $t24} $t24 == $t24;

    // trace_local[tmp#$5]($t22) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+115
    assume {:print "$track_local(28,3,5):", $t22} $t22 == $t22;

    // if ($t22) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+115
    if ($t22) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+115
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+115

    // trace_abort($t24) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+115
    assume {:print "$at(4,3424,3539)"} true;
    assume {:print "$track_abort(28,3):", $t24} $t24 == $t24;

    // $t14 := move($t24) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+115
    $t14 := $t24;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+115
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:36+14
    assume {:print "$at(4,3576,3590)"} true;
L2:

    // $t25 := exists<AccountFreezing::FreezingBit>($t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:16+6
    $t25 := $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t1);

    // $t26 := 2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:75+13
    $t26 := 2;
    assume $IsValid'u64'($t26);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:53+36
    // >> opaque call: $t19 := Errors::not_published($t18)

    // $t27 := opaque begin: Errors::not_published($t26) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:53+36

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:53+36
    assume $IsValid'u64'($t27);

    // assume Eq<u64>($t27, 5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:53+36
    assume $IsEqual'u64'($t27, 5);

    // $t27 := opaque end: Errors::not_published($t26) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:53+36

    // trace_local[tmp#$8]($t27) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+81
    assume {:print "$track_local(28,3,8):", $t27} $t27 == $t27;

    // trace_local[tmp#$7]($t25) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+81
    assume {:print "$track_local(28,3,7):", $t25} $t25 == $t25;

    // if ($t25) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+81
    if ($t25) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+81
L5:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+81

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+81
    assume {:print "$at(4,3549,3630)"} true;
    assume {:print "$track_abort(28,3):", $t27} $t27 == $t27;

    // $t14 := move($t27) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+81
    $t14 := $t27;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+81
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:93:68+4
    assume {:print "$at(4,3699,3703)"} true;
L4:

    // $t28 := true at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:93:68+4
    $t28 := true;
    assume $IsValid'bool'($t28);

    // $t29 := borrow_global<AccountFreezing::FreezingBit>($t1) on_abort goto L7 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:93:9+17
    if (!$ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t29 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(4,3640,3657)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(28,3):", $t14} $t14 == $t14;
        goto L7;
    }

    // $t30 := borrow_field<AccountFreezing::FreezingBit>.is_frozen($t29) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:93:9+56
    $t30 := $ChildMutation($t29, 0, $is_frozen#$1_AccountFreezing_FreezingBit($Dereference($t29)));

    // write_ref($t30, $t28) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:93:9+63
    $t30 := $UpdateMutation($t30, $t28);

    // write_back[Reference($t29).is_frozen]($t30) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:93:9+63
    $t29 := $UpdateMutation($t29, $Update'$1_AccountFreezing_FreezingBit'_is_frozen($Dereference($t29), $Dereference($t30)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:82:5+1052
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(4,3003,4055)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // write_back[AccountFreezing::FreezingBit@]($t29) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:93:9+63
    assume {:print "$at(4,3640,3703)"} true;
    $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $GlobalLocationAddress($t29),
        $Dereference($t29));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(11,106721,106818)"} true;
    assert {:msg "assert_failed(11,106721,106818): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:94:33+27
    // >> opaque call: $t23 := Signer::address_of($t0)
    assume {:print "$at(4,3737,3764)"} true;

    // $t31 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:94:33+27

    // assume WellFormed($t31) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:94:33+27
    assume $IsValid'address'($t31);

    // assume Eq<address>($t31, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:94:33+27
    assume $IsEqual'address'($t31, $1_Signer_spec_address_of($t0));

    // $t31 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:94:33+27

    // trace_local[initiator_address]($t31) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:94:13+17
    assume {:print "$track_local(28,3,2):", $t31} $t31 == $t31;

    // $t32 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L7 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:96:56+34
    assume {:print "$at(4,3868,3902)"} true;
    call $t32 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(4,3868,3902)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(28,3):", $t14} $t14 == $t14;
        goto L7;
    }

    // $t33 := borrow_global<AccountFreezing::FreezeEventsHolder>($t32) on_abort goto L7 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:96:18+17
    if (!$ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $t32)) {
        call $ExecFailureAbort();
    } else {
        $t33 := $Mutation($Global($t32), EmptyVec(), $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $t32));
    }
    if ($abort_flag) {
        assume {:print "$at(4,3830,3847)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(28,3):", $t14} $t14 == $t14;
        goto L7;
    }

    // $t34 := borrow_field<AccountFreezing::FreezeEventsHolder>.freeze_event_handle($t33) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:96:13+98
    $t34 := $ChildMutation($t33, 0, $freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder($Dereference($t33)));

    // $t35 := pack AccountFreezing::FreezeAccountEvent($t31, $t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:97:13+100
    assume {:print "$at(4,3937,4037)"} true;
    $t35 := $1_AccountFreezing_FreezeAccountEvent($t31, $t1);

    // Event::emit_event<AccountFreezing::FreezeAccountEvent>($t34, $t35) on_abort goto L7 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:95:9+274
    assume {:print "$at(4,3774,4048)"} true;
    call $t34 := $1_Event_emit_event'$1_AccountFreezing_FreezeAccountEvent'($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(4,3774,4048)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(28,3):", $t14} $t14 == $t14;
        goto L7;
    }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:102:5+1
    assume {:print "$at(4,4054,4055)"} true;
L6:

    // assert Not(Not(DiemTimestamp::$is_operating[@193]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#193);

    // assert Not(Not(exists[@194]<Roles::RoleId>($t9))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#194, $t9);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@194]<Roles::RoleId>($t9)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#194, $t9)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Eq<address>($t1, CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:106:9+93
    assume {:print "$at(4,4197,4290)"} true;
    assert {:msg "assert_failed(4,4197,4290): function does not abort under this condition"}
      !$IsEqual'address'($t1, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(Eq<address>($t1, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:107:9+103
    assume {:print "$at(4,4299,4402)"} true;
    assert {:msg "assert_failed(4,4299,4402): function does not abort under this condition"}
      !$IsEqual'address'($t1, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Not(exists[@195]<AccountFreezing::FreezingBit>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:108:9+74
    assume {:print "$at(4,4411,4485)"} true;
    assert {:msg "assert_failed(4,4411,4485): function does not abort under this condition"}
      !!$ResourceExists($1_AccountFreezing_FreezingBit_$memory#195, $t1);

    // assert Not(Not(exists[@194]<Roles::RoleId>($t12))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#194, $t12);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@194]<Roles::RoleId>($t12)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#194, $t12)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert AccountFreezing::spec_account_is_frozen($t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:109:9+47
    assume {:print "$at(4,4494,4541)"} true;
    assert {:msg "assert_failed(4,4494,4541): post-condition does not hold"}
      $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1);

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:120:9+20
    assume {:print "$at(4,4935,4955)"} true;
    assert {:msg "assert_failed(4,4935,4955): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:103:5+523
    assume {:print "$at(4,4060,4583)"} true;
    assert {:msg "assert_failed(4,4060,4583): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:103:5+523
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:102:5+1
    assume {:print "$at(4,4054,4055)"} true;
L7:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemTimestamp::$is_operating[@193]()), Not(exists[@194]<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global[@194]<Roles::RoleId>($t9)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Eq<address>($t1, CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Eq<address>($t1, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Not(exists[@195]<AccountFreezing::FreezingBit>($t1))), Not(exists[@194]<Roles::RoleId>($t12))), Neq<u64>(select Roles::RoleId.role_id(global[@194]<Roles::RoleId>($t12)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:103:5+523
    assume {:print "$at(4,4060,4583)"} true;
    assert {:msg "assert_failed(4,4060,4583): abort not covered by any of the `aborts_if` clauses"}
      (((((((((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#193) || !$ResourceExists($1_Roles_RoleId_$memory#194, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#194, $t9)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || $IsEqual'address'($t1, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $IsEqual'address'($t1, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#195, $t1)) || !$ResourceExists($1_Roles_RoleId_$memory#194, $t12)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#194, $t12)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemTimestamp::$is_operating[@193]()), Eq(1, $t14)), And(Not(exists[@194]<Roles::RoleId>($t9)), Eq(5, $t14))), And(Neq<u64>(select Roles::RoleId.role_id(global[@194]<Roles::RoleId>($t9)), 1), Eq(3, $t14))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t14))), And(Eq<address>($t1, CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(7, $t14))), And(Eq<address>($t1, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(7, $t14))), And(Not(exists[@195]<AccountFreezing::FreezingBit>($t1)), Eq(5, $t14))), And(Not(exists[@194]<Roles::RoleId>($t12)), Eq(5, $t14))), And(Neq<u64>(select Roles::RoleId.role_id(global[@194]<Roles::RoleId>($t12)), 1), Eq(3, $t14))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t14))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:103:5+523
    assert {:msg "assert_failed(4,4060,4583): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#193) && $IsEqual'u8'(1, $t14)) || (!$ResourceExists($1_Roles_RoleId_$memory#194, $t9) && $IsEqual'u8'(5, $t14))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#194, $t9)), 1) && $IsEqual'u8'(3, $t14))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t14))) || ($IsEqual'address'($t1, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(7, $t14))) || ($IsEqual'address'($t1, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(7, $t14))) || (!$ResourceExists($1_AccountFreezing_FreezingBit_$memory#195, $t1) && $IsEqual'u8'(5, $t14))) || (!$ResourceExists($1_Roles_RoleId_$memory#194, $t12) && $IsEqual'u8'(5, $t14))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#194, $t12)), 1) && $IsEqual'u8'(3, $t14))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t14)));

    // abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:103:5+523
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun AccountFreezing::unfreeze_account [verification] at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+765
procedure {:timeLimit 40} $1_AccountFreezing_unfreeze_account$verify(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    var $t7: $1_AccountFreezing_UnfreezeAccountEvent;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: $Mutation ($1_AccountFreezing_FreezingBit);
    var $t18: $Mutation (bool);
    var $t19: int;
    var $t20: int;
    var $t21: $Mutation ($1_AccountFreezing_FreezeEventsHolder);
    var $t22: $Mutation ($1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent');
    var $t23: $1_AccountFreezing_UnfreezeAccountEvent;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Roles_RoleId_$memory#189: $Memory $1_Roles_RoleId;
    var $1_AccountFreezing_FreezingBit_$memory#190: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t22));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+765
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(4,5007,5772)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+765
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+765
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+765
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+765
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+765
    assume $IsValid'address'($t1);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+765
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+765
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+765
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+765
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, select AccountFreezing::FreezeEventsHolder.unfreeze_event_handle(global<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:152:9+98
    assume {:print "$at(4,6204,6302)"} true;
    assume ($t6 == $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder($ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t7, pack AccountFreezing::UnfreezeAccountEvent(Signer::spec_address_of($t0), $t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:153:9+137
    assume {:print "$at(4,6311,6448)"} true;
    assume ($t7 == $1_AccountFreezing_UnfreezeAccountEvent($1_Signer_spec_address_of($t0), $t1));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // @188 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+1
    assume {:print "$at(4,5007,5008)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @189 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+1
    $1_Roles_RoleId_$memory#189 := $1_Roles_RoleId_$memory;

    // @190 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+1
    $1_AccountFreezing_FreezingBit_$memory#190 := $1_AccountFreezing_FreezingBit_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+1
    assume {:print "$track_local(28,5,0):", $t0} $t0 == $t0;

    // trace_local[unfrozen_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+1
    assume {:print "$track_local(28,5,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(4,5158,5191)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+33

    // assume Identical($t9, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+33
    assume ($t9 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t9) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+33
    if ($t9) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+33
L5:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t10)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+33
    assume {:print "$at(4,5158,5191)"} true;
    assume {:print "$track_abort(28,5):", $t10} $t10 == $t10;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+33
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+33
L4:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+33

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+42
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(4,5201,5243)"} true;

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+42
    assume {:print "$at(4,5201,5243)"} true;

    // assume Identical($t12, Or(Or(Not(exists<Roles::RoleId>($t11)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+42
    assume ($t12 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t11) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t12) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+42
    if ($t12) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+42
L7:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t11)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+42
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t11) && $IsEqual'u8'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+42
    assume {:print "$at(4,5201,5243)"} true;
    assume {:print "$track_abort(28,5):", $t10} $t10 == $t10;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+42
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+42
L6:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+42

    // $t13 := exists<AccountFreezing::FreezingBit>($t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:16+6
    assume {:print "$at(4,5260,5266)"} true;
    $t13 := $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t1);

    // $t14 := 2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:77+13
    $t14 := 2;
    assume $IsValid'u64'($t14);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:55+36
    // >> opaque call: $t7 := Errors::not_published($t6)

    // $t15 := opaque begin: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:55+36

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:55+36
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:55+36
    assume $IsEqual'u64'($t15, 5);

    // $t15 := opaque end: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:55+36

    // trace_local[tmp#$4]($t15) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+83
    assume {:print "$track_local(28,5,4):", $t15} $t15 == $t15;

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+83
    assume {:print "$track_local(28,5,3):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+83
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+83
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+83

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+83
    assume {:print "$at(4,5253,5336)"} true;
    assume {:print "$track_abort(28,5):", $t15} $t15 == $t15;

    // $t10 := move($t15) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+83
    $t10 := $t15;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+83
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:132:70+5
    assume {:print "$at(4,5407,5412)"} true;
L0:

    // $t16 := false at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:132:70+5
    $t16 := false;
    assume $IsValid'bool'($t16);

    // $t17 := borrow_global<AccountFreezing::FreezingBit>($t1) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:132:9+17
    if (!$ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(4,5346,5363)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(28,5):", $t10} $t10 == $t10;
        goto L3;
    }

    // $t18 := borrow_field<AccountFreezing::FreezingBit>.is_frozen($t17) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:132:9+58
    $t18 := $ChildMutation($t17, 0, $is_frozen#$1_AccountFreezing_FreezingBit($Dereference($t17)));

    // write_ref($t18, $t16) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:132:9+66
    $t18 := $UpdateMutation($t18, $t16);

    // write_back[Reference($t17).is_frozen]($t18) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:132:9+66
    $t17 := $UpdateMutation($t17, $Update'$1_AccountFreezing_FreezingBit'_is_frozen($Dereference($t17), $Dereference($t18)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:124:5+765
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(4,5007,5772)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // write_back[AccountFreezing::FreezingBit@]($t17) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:132:9+66
    assume {:print "$at(4,5346,5412)"} true;
    $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(11,106721,106818)"} true;
    assert {:msg "assert_failed(11,106721,106818): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:133:33+27
    // >> opaque call: $t11 := Signer::address_of($t0)
    assume {:print "$at(4,5446,5473)"} true;

    // $t19 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:133:33+27

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:133:33+27
    assume $IsValid'address'($t19);

    // assume Eq<address>($t19, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:133:33+27
    assume $IsEqual'address'($t19, $1_Signer_spec_address_of($t0));

    // $t19 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:133:33+27

    // trace_local[initiator_address]($t19) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:133:13+17
    assume {:print "$track_local(28,5,2):", $t19} $t19 == $t19;

    // $t20 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:135:56+34
    assume {:print "$at(4,5579,5613)"} true;
    call $t20 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(4,5579,5613)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(28,5):", $t10} $t10 == $t10;
        goto L3;
    }

    // $t21 := borrow_global<AccountFreezing::FreezeEventsHolder>($t20) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:135:18+17
    if (!$ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $t20)) {
        call $ExecFailureAbort();
    } else {
        $t21 := $Mutation($Global($t20), EmptyVec(), $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $t20));
    }
    if ($abort_flag) {
        assume {:print "$at(4,5541,5558)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(28,5):", $t10} $t10 == $t10;
        goto L3;
    }

    // $t22 := borrow_field<AccountFreezing::FreezeEventsHolder>.unfreeze_event_handle($t21) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:135:13+100
    $t22 := $ChildMutation($t21, 1, $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder($Dereference($t21)));

    // $t23 := pack AccountFreezing::UnfreezeAccountEvent($t19, $t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:136:13+104
    assume {:print "$at(4,5650,5754)"} true;
    $t23 := $1_AccountFreezing_UnfreezeAccountEvent($t19, $t1);

    // Event::emit_event<AccountFreezing::UnfreezeAccountEvent>($t22, $t23) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:134:9+282
    assume {:print "$at(4,5483,5765)"} true;
    call $t22 := $1_Event_emit_event'$1_AccountFreezing_UnfreezeAccountEvent'($t22, $t23);
    if ($abort_flag) {
        assume {:print "$at(4,5483,5765)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(28,5):", $t10} $t10 == $t10;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:141:5+1
    assume {:print "$at(4,5771,5772)"} true;
L2:

    // assert Not(Not(DiemTimestamp::$is_operating[@188]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188);

    // assert Not(Not(exists[@189]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#189, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@189]<Roles::RoleId>($t5)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#189, $t5)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Not(exists[@190]<AccountFreezing::FreezingBit>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:145:9+76
    assume {:print "$at(4,5916,5992)"} true;
    assert {:msg "assert_failed(4,5916,5992): function does not abort under this condition"}
      !!$ResourceExists($1_AccountFreezing_FreezingBit_$memory#190, $t1);

    // assert Not(Not(exists[@189]<Roles::RoleId>($t8))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#189, $t8);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@189]<Roles::RoleId>($t8)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#189, $t8)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(AccountFreezing::spec_account_is_frozen($t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:146:9+50
    assume {:print "$at(4,6001,6051)"} true;
    assert {:msg "assert_failed(4,6001,6051): post-condition does not hold"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1);

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t7, $t6)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:157:9+20
    assume {:print "$at(4,6457,6477)"} true;
    assert {:msg "assert_failed(4,6457,6477): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'($EmptyEventStore, $t6, $t7); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t7, $t6)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:142:5+318
    assume {:print "$at(4,5777,6095)"} true;
    assert {:msg "assert_failed(4,5777,6095): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'($EmptyEventStore, $t6, $t7); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:142:5+318
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:141:5+1
    assume {:print "$at(4,5771,5772)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Or(Or(Not(DiemTimestamp::$is_operating[@188]()), Not(exists[@189]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@189]<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Not(exists[@190]<AccountFreezing::FreezingBit>($t1))), Not(exists[@189]<Roles::RoleId>($t8))), Neq<u64>(select Roles::RoleId.role_id(global[@189]<Roles::RoleId>($t8)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:142:5+318
    assume {:print "$at(4,5777,6095)"} true;
    assert {:msg "assert_failed(4,5777,6095): abort not covered by any of the `aborts_if` clauses"}
      (((((((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188) || !$ResourceExists($1_Roles_RoleId_$memory#189, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#189, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#190, $t1)) || !$ResourceExists($1_Roles_RoleId_$memory#189, $t8)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#189, $t8)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assert Or(Or(Or(Or(Or(Or(Or(And(Not(DiemTimestamp::$is_operating[@188]()), Eq(1, $t10)), And(Not(exists[@189]<Roles::RoleId>($t5)), Eq(5, $t10))), And(Neq<u64>(select Roles::RoleId.role_id(global[@189]<Roles::RoleId>($t5)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t10))), And(Not(exists[@190]<AccountFreezing::FreezingBit>($t1)), Eq(5, $t10))), And(Not(exists[@189]<Roles::RoleId>($t8)), Eq(5, $t10))), And(Neq<u64>(select Roles::RoleId.role_id(global[@189]<Roles::RoleId>($t8)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:142:5+318
    assert {:msg "assert_failed(4,5777,6095): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188) && $IsEqual'u8'(1, $t10)) || (!$ResourceExists($1_Roles_RoleId_$memory#189, $t5) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#189, $t5)), 1) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t10))) || (!$ResourceExists($1_AccountFreezing_FreezingBit_$memory#190, $t1) && $IsEqual'u8'(5, $t10))) || (!$ResourceExists($1_Roles_RoleId_$memory#189, $t8) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#189, $t8)), 1) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t10)));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:142:5+318
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1492:5+232
function {:inline} $1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory: $Memory $1_DiemAccount_Balance'$1_XUS_XUS', addr: int): int {
    $1_DiemAccount_$balance_for'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1492:5+232
function {:inline} $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory: $Memory $1_DiemAccount_Balance'#0', addr: int): int {
    $1_DiemAccount_$balance_for'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1487:5+110
function {:inline} $1_DiemAccount_$balance_for'$1_XUS_XUS'(balance: $1_DiemAccount_Balance'$1_XUS_XUS'): int {
    $1_Diem_$value'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'(balance))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1487:5+110
function {:inline} $1_DiemAccount_$balance_for'#0'(balance: $1_DiemAccount_Balance'#0'): int {
    $1_Diem_$value'#0'($coin#$1_DiemAccount_Balance'#0'(balance))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+247
function {:inline} $1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+239
function {:inline} $1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+95
function {:inline} $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, check_addr: int): bool {
    $ResourceExists($1_DiemAccount_DiemAccount_$memory, check_addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:244:10+211
function {:inline} $1_DiemAccount_spec_has_published_account_limits'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    if ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) then ($1_VASP_spec_has_account_limits'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else ($1_AccountLimits_$has_window_published'#0'($1_AccountLimits_Window'#0'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:271:10+484
function {:inline} $1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int, is_withdrawal: bool): bool {
    if (is_withdrawal) then ((($1_DiemAccount_spec_has_published_account_limits'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))) else ((($1_DiemAccount_spec_has_published_account_limits'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee, payer)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1178:10+85
function {:inline} $1_DiemAccount_spec_abstract_create_authentication_key(auth_key_prefix: Vec (int)): Vec (int);
axiom (forall auth_key_prefix: Vec (int) ::
(var $$res := $1_DiemAccount_spec_abstract_create_authentication_key(auth_key_prefix);
$IsValid'vec'u8''($$res)));

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2342:9+155
function {:inline} $1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $key_rotation_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2347:9+145
function {:inline} $1_DiemAccount_spec_get_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_DiemAccount_KeyRotationCapability {
    $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2352:9+129
function {:inline} $1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2358:9+183
function {:inline} $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr) && $IsEqual'address'(addr, $account_address#$1_DiemAccount_KeyRotationCapability($1_DiemAccount_spec_get_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2364:9+139
function {:inline} $1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory: $Memory $1_DiemAccount_AccountOperationsCapability): bool {
    $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2369:9+144
function {:inline} $1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2374:9+134
function {:inline} $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_DiemAccount_WithdrawCapability {
    $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'($1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+121
function {:inline} $1_DiemAccount_spec_has_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'($1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2384:9+171
function {:inline} $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_spec_has_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr) && $IsEqual'address'(addr, $account_address#$1_DiemAccount_WithdrawCapability($1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2390:9+171
function {:inline} $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) && $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2398:10+208
function {:inline} $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, $1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, sender: int): bool {
    (var addr := $1_Signer_spec_address_of(sender); (($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)) && !$1_AccountFreezing_$account_is_frozen($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// struct DiemAccount::DiemAccount at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:36:5+1558
type {:datatype} $1_DiemAccount_DiemAccount;
function {:constructor} $1_DiemAccount_DiemAccount($authentication_key: Vec (int), $withdraw_capability: $1_Option_Option'$1_DiemAccount_WithdrawCapability', $key_rotation_capability: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', $received_events: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', $sent_events: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', $sequence_number: int): $1_DiemAccount_DiemAccount;
function {:inline} $Update'$1_DiemAccount_DiemAccount'_authentication_key(s: $1_DiemAccount_DiemAccount, x: Vec (int)): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount(x, $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_withdraw_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), x, $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), x, $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_received_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), x, $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sent_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), x, $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sequence_number(s: $1_DiemAccount_DiemAccount, x: int): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), x)
}
function $IsValid'$1_DiemAccount_DiemAccount'(s: $1_DiemAccount_DiemAccount): bool {
    $IsValid'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($key_rotation_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''($received_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''($sent_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'u64'($sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemAccount'(s1: $1_DiemAccount_DiemAccount, s2: $1_DiemAccount_DiemAccount): bool {
    s1 == s2
}
var $1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount;

// struct DiemAccount::AccountOperationsCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:93:5+167
type {:datatype} $1_DiemAccount_AccountOperationsCapability;
function {:constructor} $1_DiemAccount_AccountOperationsCapability($limits_cap: $1_AccountLimits_AccountLimitMutationCapability, $creation_events: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability;
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_limits_cap(s: $1_DiemAccount_AccountOperationsCapability, x: $1_AccountLimits_AccountLimitMutationCapability): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability(x, $creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events(s: $1_DiemAccount_AccountOperationsCapability, x: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability($limits_cap#$1_DiemAccount_AccountOperationsCapability(s), x)
}
function $IsValid'$1_DiemAccount_AccountOperationsCapability'(s: $1_DiemAccount_AccountOperationsCapability): bool {
    $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($limits_cap#$1_DiemAccount_AccountOperationsCapability(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''($creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AccountOperationsCapability'(s1: $1_DiemAccount_AccountOperationsCapability, s2: $1_DiemAccount_AccountOperationsCapability): bool {
    s1 == s2
}
var $1_DiemAccount_AccountOperationsCapability_$memory: $Memory $1_DiemAccount_AccountOperationsCapability;

// struct DiemAccount::AdminTransactionEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:129:5+150
type {:datatype} $1_DiemAccount_AdminTransactionEvent;
function {:constructor} $1_DiemAccount_AdminTransactionEvent($committed_timestamp_secs: int): $1_DiemAccount_AdminTransactionEvent;
function {:inline} $Update'$1_DiemAccount_AdminTransactionEvent'_committed_timestamp_secs(s: $1_DiemAccount_AdminTransactionEvent, x: int): $1_DiemAccount_AdminTransactionEvent {
    $1_DiemAccount_AdminTransactionEvent(x)
}
function $IsValid'$1_DiemAccount_AdminTransactionEvent'(s: $1_DiemAccount_AdminTransactionEvent): bool {
    $IsValid'u64'($committed_timestamp_secs#$1_DiemAccount_AdminTransactionEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AdminTransactionEvent'(s1: $1_DiemAccount_AdminTransactionEvent, s2: $1_DiemAccount_AdminTransactionEvent): bool {
    s1 == s2
}

// struct DiemAccount::Balance<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:66:5+253
type {:datatype} $1_DiemAccount_Balance'$1_XUS_XUS';
function {:constructor} $1_DiemAccount_Balance'$1_XUS_XUS'($coin: $1_Diem_Diem'$1_XUS_XUS'): $1_DiemAccount_Balance'$1_XUS_XUS';
function {:inline} $Update'$1_DiemAccount_Balance'$1_XUS_XUS''_coin(s: $1_DiemAccount_Balance'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_DiemAccount_Balance'$1_XUS_XUS' {
    $1_DiemAccount_Balance'$1_XUS_XUS'(x)
}
function $IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''(s: $1_DiemAccount_Balance'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($coin#$1_DiemAccount_Balance'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''(s1: $1_DiemAccount_Balance'$1_XUS_XUS', s2: $1_DiemAccount_Balance'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';

// struct DiemAccount::Balance<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:66:5+253
type {:datatype} $1_DiemAccount_Balance'$1_XDX_XDX';
function {:constructor} $1_DiemAccount_Balance'$1_XDX_XDX'($coin: $1_Diem_Diem'$1_XDX_XDX'): $1_DiemAccount_Balance'$1_XDX_XDX';
function {:inline} $Update'$1_DiemAccount_Balance'$1_XDX_XDX''_coin(s: $1_DiemAccount_Balance'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_DiemAccount_Balance'$1_XDX_XDX' {
    $1_DiemAccount_Balance'$1_XDX_XDX'(x)
}
function $IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''(s: $1_DiemAccount_Balance'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($coin#$1_DiemAccount_Balance'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''(s1: $1_DiemAccount_Balance'$1_XDX_XDX', s2: $1_DiemAccount_Balance'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';

// struct DiemAccount::Balance<#0> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:66:5+253
type {:datatype} $1_DiemAccount_Balance'#0';
function {:constructor} $1_DiemAccount_Balance'#0'($coin: $1_Diem_Diem'#0'): $1_DiemAccount_Balance'#0';
function {:inline} $Update'$1_DiemAccount_Balance'#0''_coin(s: $1_DiemAccount_Balance'#0', x: $1_Diem_Diem'#0'): $1_DiemAccount_Balance'#0' {
    $1_DiemAccount_Balance'#0'(x)
}
function $IsValid'$1_DiemAccount_Balance'#0''(s: $1_DiemAccount_Balance'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($coin#$1_DiemAccount_Balance'#0'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'#0''(s1: $1_DiemAccount_Balance'#0', s2: $1_DiemAccount_Balance'#0'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'#0'_$memory: $Memory $1_DiemAccount_Balance'#0';

// struct DiemAccount::CreateAccountEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:135:5+179
type {:datatype} $1_DiemAccount_CreateAccountEvent;
function {:constructor} $1_DiemAccount_CreateAccountEvent($created: int, $role_id: int): $1_DiemAccount_CreateAccountEvent;
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_created(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent(x, $role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_role_id(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent($created#$1_DiemAccount_CreateAccountEvent(s), x)
}
function $IsValid'$1_DiemAccount_CreateAccountEvent'(s: $1_DiemAccount_CreateAccountEvent): bool {
    $IsValid'address'($created#$1_DiemAccount_CreateAccountEvent(s))
      && $IsValid'u64'($role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_CreateAccountEvent'(s1: $1_DiemAccount_CreateAccountEvent, s2: $1_DiemAccount_CreateAccountEvent): bool {
    s1 == s2
}

// struct DiemAccount::DiemWriteSetManager at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:99:5+115
type {:datatype} $1_DiemAccount_DiemWriteSetManager;
function {:constructor} $1_DiemAccount_DiemWriteSetManager($upgrade_events: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager;
function {:inline} $Update'$1_DiemAccount_DiemWriteSetManager'_upgrade_events(s: $1_DiemAccount_DiemWriteSetManager, x: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager {
    $1_DiemAccount_DiemWriteSetManager(x)
}
function $IsValid'$1_DiemAccount_DiemWriteSetManager'(s: $1_DiemAccount_DiemWriteSetManager): bool {
    $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''($upgrade_events#$1_DiemAccount_DiemWriteSetManager(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemWriteSetManager'(s1: $1_DiemAccount_DiemWriteSetManager, s2: $1_DiemAccount_DiemWriteSetManager): bool {
    s1 == s2
}
var $1_DiemAccount_DiemWriteSetManager_$memory: $Memory $1_DiemAccount_DiemWriteSetManager;

// struct DiemAccount::KeyRotationCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:85:5+208
type {:datatype} $1_DiemAccount_KeyRotationCapability;
function {:constructor} $1_DiemAccount_KeyRotationCapability($account_address: int): $1_DiemAccount_KeyRotationCapability;
function {:inline} $Update'$1_DiemAccount_KeyRotationCapability'_account_address(s: $1_DiemAccount_KeyRotationCapability, x: int): $1_DiemAccount_KeyRotationCapability {
    $1_DiemAccount_KeyRotationCapability(x)
}
function $IsValid'$1_DiemAccount_KeyRotationCapability'(s: $1_DiemAccount_KeyRotationCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_KeyRotationCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_KeyRotationCapability'(s1: $1_DiemAccount_KeyRotationCapability, s2: $1_DiemAccount_KeyRotationCapability): bool {
    s1 == s2
}

// struct DiemAccount::ReceivedPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:117:5+363
type {:datatype} $1_DiemAccount_ReceivedPaymentEvent;
function {:constructor} $1_DiemAccount_ReceivedPaymentEvent($amount: int, $currency_code: Vec (int), $payer: int, $metadata: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent;
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_amount(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent(x, $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_currency_code(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), x, $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_payer(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), x, $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_metadata(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_ReceivedPaymentEvent'(s: $1_DiemAccount_ReceivedPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'address'($payer#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(s1: $1_DiemAccount_ReceivedPaymentEvent, s2: $1_DiemAccount_ReceivedPaymentEvent): bool {
    s1 == s2
}

// struct DiemAccount::SentPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:105:5+346
type {:datatype} $1_DiemAccount_SentPaymentEvent;
function {:constructor} $1_DiemAccount_SentPaymentEvent($amount: int, $currency_code: Vec (int), $payee: int, $metadata: Vec (int)): $1_DiemAccount_SentPaymentEvent;
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_amount(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent(x, $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_currency_code(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), x, $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_payee(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), x, $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_metadata(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_SentPaymentEvent'(s: $1_DiemAccount_SentPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'address'($payee#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_SentPaymentEvent'(s1: $1_DiemAccount_SentPaymentEvent, s2: $1_DiemAccount_SentPaymentEvent): bool {
    s1 == s2
}

// struct DiemAccount::WithdrawCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:76:5+202
type {:datatype} $1_DiemAccount_WithdrawCapability;
function {:constructor} $1_DiemAccount_WithdrawCapability($account_address: int): $1_DiemAccount_WithdrawCapability;
function {:inline} $Update'$1_DiemAccount_WithdrawCapability'_account_address(s: $1_DiemAccount_WithdrawCapability, x: int): $1_DiemAccount_WithdrawCapability {
    $1_DiemAccount_WithdrawCapability(x)
}
function $IsValid'$1_DiemAccount_WithdrawCapability'(s: $1_DiemAccount_WithdrawCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_WithdrawCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_WithdrawCapability'(s1: $1_DiemAccount_WithdrawCapability, s2: $1_DiemAccount_WithdrawCapability): bool {
    s1 == s2
}

// fun DiemAccount::initialize [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
procedure {:timeLimit 40} $1_DiemAccount_initialize$verify(_$t0: int, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t13: $1_DiemAccount_CreateAccountEvent;
    var $t14: $1_DiemAccount_CreateAccountEvent;
    var $t15: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t16: int;
    var $t17: $1_DiemAccount_AccountOperationsCapability;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: $1_DiemAccount_AccountOperationsCapability;
    var $t23: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t24: $1_DiemAccount_CreateAccountEvent;
    var $t25: $1_DiemAccount_CreateAccountEvent;
    var $t26: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t0: int;
    var $t1: Vec (int);
    var $1_SlidingNonce_SlidingNonce_$modifies: [int]bool;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $1_Event_EventHandleGenerator_$modifies: [int]bool;
    var $1_DiemId_DiemIdDomainManager_$modifies: [int]bool;
    var $1_AccountFreezing_FreezingBit_$modifies: [int]bool;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $1_DiemAccount_AccountOperationsCapability_$modifies: [int]bool;
    var $1_DiemAccount_DiemWriteSetManager_$modifies: [int]bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_DiemWriteSetManager': $1_DiemAccount_DiemWriteSetManager;
    var $temp_0'$1_DiemId_DiemIdDomainManager': $1_DiemId_DiemIdDomainManager;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'$1_SlidingNonce_SlidingNonce': $1_SlidingNonce_SlidingNonce;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'u8'': Vec (int);
    var $1_SlidingNonce_SlidingNonce_$memory#467: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_DiemAccount_AccountOperationsCapability_$memory#468: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemWriteSetManager_$memory#469: $Memory $1_DiemAccount_DiemWriteSetManager;
    var $1_AccountFreezing_FreezingBit_$memory#470: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#471: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Roles_RoleId_$memory#472: $Memory $1_Roles_RoleId;
    var $1_DiemId_DiemIdDomainManager_$memory#473: $Memory $1_DiemId_DiemIdDomainManager;
    var $1_DiemAccount_DiemAccount_$memory#474: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,9208,9715)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    assume $IsValid'vec'u8''($t1);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemId::DiemIdDomainManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    assume (forall $a_0: int :: {$ResourceValue($1_DiemId_DiemIdDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemId_DiemIdDomainManager_$memory, $a_0);
    ($IsValid'$1_DiemId_DiemIdDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+507
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume Identical($t2, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1227:9+49
    assume {:print "$at(11,55369,55418)"} true;
    assume ($t2 == $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Identical($t3, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1251:9+49
    assume {:print "$at(11,56713,56762)"} true;
    assume ($t3 == $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Identical($t4, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1295:9+59
    assume {:print "$at(11,59274,59333)"} true;
    assume ($t4 == $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assume Identical($t5, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1315:9+59
    assume {:print "$at(11,60508,60567)"} true;
    assume ($t5 == $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assume CanModify<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    assume {:print "$at(26,7701,7731)"} true;
    assume $1_Roles_RoleId_$modifies[$1_CoreAddresses_$DIEM_ROOT_ADDRESS()];

    // assume CanModify<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    assume $1_Roles_RoleId_$modifies[$1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()];

    // assume CanModify<Event::EventHandleGenerator>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1228:9+54
    assume {:print "$at(11,55427,55481)"} true;
    assume $1_Event_EventHandleGenerator_$modifies[$t2];

    // assume CanModify<DiemAccount::DiemAccount>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1229:9+38
    assume {:print "$at(11,55490,55528)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t2];

    // assume CanModify<DiemAccount::AccountOperationsCapability>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1230:9+54
    assume {:print "$at(11,55537,55591)"} true;
    assume $1_DiemAccount_AccountOperationsCapability_$modifies[$t2];

    // assume CanModify<DiemAccount::DiemWriteSetManager>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1231:9+46
    assume {:print "$at(11,55600,55646)"} true;
    assume $1_DiemAccount_DiemWriteSetManager_$modifies[$t2];

    // assume CanModify<SlidingNonce::SlidingNonce>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1232:9+53
    assume {:print "$at(11,55655,55708)"} true;
    assume $1_SlidingNonce_SlidingNonce_$modifies[$t2];

    // assume CanModify<Roles::RoleId>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1233:9+40
    assume {:print "$at(11,55717,55757)"} true;
    assume $1_Roles_RoleId_$modifies[$t2];

    // assume CanModify<AccountFreezing::FreezingBit>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1234:9+55
    assume {:print "$at(11,55766,55821)"} true;
    assume $1_AccountFreezing_FreezingBit_$modifies[$t2];

    // assume CanModify<DiemAccount::DiemAccount>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1296:9+38
    assume {:print "$at(11,59342,59380)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t4];

    // assume CanModify<SlidingNonce::SlidingNonce>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1297:9+53
    assume {:print "$at(11,59389,59442)"} true;
    assume $1_SlidingNonce_SlidingNonce_$modifies[$t4];

    // assume CanModify<Roles::RoleId>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1298:9+40
    assume {:print "$at(11,59451,59491)"} true;
    assume $1_Roles_RoleId_$modifies[$t4];

    // assume CanModify<AccountFreezing::FreezingBit>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1299:9+55
    assume {:print "$at(11,59500,59555)"} true;
    assume $1_AccountFreezing_FreezingBit_$modifies[$t4];

    // assume CanModify<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1300:9+81
    assume {:print "$at(11,59564,59645)"} true;
    assume $1_DiemAccount_AccountOperationsCapability_$modifies[$1_CoreAddresses_$DIEM_ROOT_ADDRESS()];

    // assume CanModify<Event::EventHandleGenerator>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1302:9+91
    assume {:print "$at(11,59743,59834)"} true;
    assume $1_Event_EventHandleGenerator_$modifies[$1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()];

    // assume CanModify<DiemId::DiemIdDomainManager>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1303:9+54
    assume {:print "$at(11,59843,59897)"} true;
    assume $1_DiemId_DiemIdDomainManager_$modifies[$t4];

    // @471 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1303:9+54
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#471 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @467 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1303:9+54
    $1_SlidingNonce_SlidingNonce_$memory#467 := $1_SlidingNonce_SlidingNonce_$memory;

    // @472 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1303:9+54
    $1_Roles_RoleId_$memory#472 := $1_Roles_RoleId_$memory;

    // @473 := save_mem(DiemId::DiemIdDomainManager) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1303:9+54
    $1_DiemId_DiemIdDomainManager_$memory#473 := $1_DiemId_DiemIdDomainManager_$memory;

    // @470 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1303:9+54
    $1_AccountFreezing_FreezingBit_$memory#470 := $1_AccountFreezing_FreezingBit_$memory;

    // @474 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1303:9+54
    $1_DiemAccount_DiemAccount_$memory#474 := $1_DiemAccount_DiemAccount_$memory;

    // @468 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1303:9+54
    $1_DiemAccount_AccountOperationsCapability_$memory#468 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @469 := save_mem(DiemAccount::DiemWriteSetManager) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1303:9+54
    $1_DiemAccount_DiemWriteSetManager_$memory#469 := $1_DiemAccount_DiemWriteSetManager_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+1
    assume {:print "$at(11,9208,9209)"} true;
    assume {:print "$track_local(29,25,0):", $t0} $t0 == $t0;

    // trace_local[dummy_auth_key_prefix]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:203:5+1
    assume {:print "$track_local(29,25,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:207:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(11,9356,9387)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:207:9+31

    // assume Identical($t6, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:207:9+31
    assume ($t6 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t6) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:207:9+31
    if ($t6) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:207:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:207:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:207:9+31
    assume {:print "$at(11,9356,9387)"} true;
    assume {:print "$track_abort(29,25):", $t7} $t7 == $t7;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:207:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:207:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:207:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:209:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(11,9460,9503)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:209:9+43

    // assume Identical($t8, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:209:9+43
    assume ($t8 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t8) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:209:9+43
    if ($t8) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:209:9+43
L6:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:209:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:209:9+43
    assume {:print "$at(11,9460,9503)"} true;
    assume {:print "$track_abort(29,25):", $t7} $t7 == $t7;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:209:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:209:9+43
L5:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:209:9+43

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    // >> opaque call: DiemAccount::create_diem_root_account($t1)
    assume {:print "$at(11,9514,9589)"} true;

    // assume Identical($t9, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1227:9+49
    assume {:print "$at(11,55369,55418)"} true;
    assume ($t9 == $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Identical($t10, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1251:9+49
    assume {:print "$at(11,56713,56762)"} true;
    assume ($t10 == $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert CanModify<Event::EventHandleGenerator>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    assume {:print "$at(11,9514,9589)"} true;
    assert {:msg "assert_failed(11,9514,9589): caller does not have permission to modify `Event::EventHandleGenerator` at given address"}
      $1_Event_EventHandleGenerator_$modifies[$t9];

    // assert CanModify<DiemAccount::DiemAccount>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    assert {:msg "assert_failed(11,9514,9589): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t9];

    // assert CanModify<DiemAccount::AccountOperationsCapability>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    assert {:msg "assert_failed(11,9514,9589): caller does not have permission to modify `DiemAccount::AccountOperationsCapability` at given address"}
      $1_DiemAccount_AccountOperationsCapability_$modifies[$t9];

    // assert CanModify<DiemAccount::DiemWriteSetManager>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    assert {:msg "assert_failed(11,9514,9589): caller does not have permission to modify `DiemAccount::DiemWriteSetManager` at given address"}
      $1_DiemAccount_DiemWriteSetManager_$modifies[$t9];

    // assert CanModify<SlidingNonce::SlidingNonce>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    assert {:msg "assert_failed(11,9514,9589): caller does not have permission to modify `SlidingNonce::SlidingNonce` at given address"}
      $1_SlidingNonce_SlidingNonce_$modifies[$t9];

    // assert CanModify<Roles::RoleId>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    assert {:msg "assert_failed(11,9514,9589): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$t9];

    // assert CanModify<AccountFreezing::FreezingBit>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    assert {:msg "assert_failed(11,9514,9589): caller does not have permission to modify `AccountFreezing::FreezingBit` at given address"}
      $1_AccountFreezing_FreezingBit_$modifies[$t9];

    // assert CanModify<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    assert {:msg "assert_failed(11,9514,9589): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$1_CoreAddresses_$DIEM_ROOT_ADDRESS()];

    // opaque begin: DiemAccount::create_diem_root_account($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75

    // assume Identical($t11, Or(Or(Or(Or(Or(Or(exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS()), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())), exists<AccountFreezing::FreezingBit>(CoreAddresses::$DIEM_ROOT_ADDRESS())), Not(DiemTimestamp::$is_genesis())), exists<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS())), Neq<num>(Add(16, Len<u8>($t1)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    assume ($t11 == (((((($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$IsEqual'num'((16 + LenVec($t1)), 32)));

    // if ($t11) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    if ($t11) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
L8:

    // assume Or(Or(Or(Or(Or(Or(And(exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t7)), And(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t7))), And(exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t7))), And(exists<AccountFreezing::FreezingBit>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t7))), And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t7))), And(exists<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t7))), And(Neq<num>(Add(16, Len<u8>($t1)), 32), Eq(7, $t7))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    assume ((((((($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t7)) || ($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t7))) || ($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t7))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t7))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t7))) || ($ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t7))) || (!$IsEqual'num'((16 + LenVec($t1)), 32) && $IsEqual'u8'(7, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    assume {:print "$at(11,9514,9589)"} true;
    assume {:print "$track_abort(29,25):", $t7} $t7 == $t7;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
L7:

    // modifies global<Event::EventHandleGenerator>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t9, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t9);
    }

    // modifies global<DiemAccount::DiemAccount>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t9, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t9);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $t9, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $t9);
    }

    // modifies global<DiemAccount::DiemWriteSetManager>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemWriteSetManager';
        $1_DiemAccount_DiemWriteSetManager_$memory := $ResourceUpdate($1_DiemAccount_DiemWriteSetManager_$memory, $t9, $temp_0'$1_DiemAccount_DiemWriteSetManager');
    } else {
        $1_DiemAccount_DiemWriteSetManager_$memory := $ResourceRemove($1_DiemAccount_DiemWriteSetManager_$memory, $t9);
    }

    // modifies global<SlidingNonce::SlidingNonce>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_SlidingNonce_SlidingNonce';
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceUpdate($1_SlidingNonce_SlidingNonce_$memory, $t9, $temp_0'$1_SlidingNonce_SlidingNonce');
    } else {
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceRemove($1_SlidingNonce_SlidingNonce_$memory, $t9);
    }

    // modifies global<Roles::RoleId>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $t9, $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $t9);
    }

    // modifies global<AccountFreezing::FreezingBit>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t9, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t9);
    }

    // modifies global<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume Identical($t12, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t12 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t13, pack DiemAccount::CreateAccountEvent(CoreAddresses::$DIEM_ROOT_ADDRESS(), Roles::spec_get_role_id(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t13 == $1_DiemAccount_CreateAccountEvent($1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume exists<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS())), 0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())), 0);

    // assume exists<DiemAccount::AccountOperationsCapability>($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t10);

    // assume exists<DiemAccount::DiemWriteSetManager>($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $t10);

    // assume exists<SlidingNonce::SlidingNonce>($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $t10);

    // assume Roles::spec_has_diem_root_role_addr($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, $t10);

    // assume DiemAccount::$exists_at($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t10);

    // assume AccountFreezing::spec_account_is_not_frozen($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t10);

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t10);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t10);

    // assume Identical($t14, $t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t14 == $t13);

    // assume Identical($t15, $t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t15 == $t12);

    // emit_event($t14, $t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:211:9+75
    assume {:print "$at(11,9514,9589)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t15, $t14);

    // opaque end: DiemAccount::create_diem_root_account($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    // >> opaque call: DiemAccount::create_treasury_compliance_account($t0, $t1)
    assume {:print "$at(11,9599,9708)"} true;

    // assume Identical($t16, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1282:9+59
    assume {:print "$at(11,58295,58354)"} true;
    assume ($t16 == $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assume Identical($t17, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1288:9+94
    assume {:print "$at(11,58687,58781)"} true;
    assume ($t17 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t18, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1295:9+59
    assume {:print "$at(11,59274,59333)"} true;
    assume ($t18 == $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assume Identical($t19, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t19 == $1_Signer_spec_address_of($t0));

    // assume Identical($t20, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1315:9+59
    assume {:print "$at(11,60508,60567)"} true;
    assume ($t20 == $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert CanModify<DiemAccount::DiemAccount>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    assume {:print "$at(11,9599,9708)"} true;
    assert {:msg "assert_failed(11,9599,9708): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t18];

    // assert CanModify<SlidingNonce::SlidingNonce>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    assert {:msg "assert_failed(11,9599,9708): caller does not have permission to modify `SlidingNonce::SlidingNonce` at given address"}
      $1_SlidingNonce_SlidingNonce_$modifies[$t18];

    // assert CanModify<Roles::RoleId>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    assert {:msg "assert_failed(11,9599,9708): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$t18];

    // assert CanModify<AccountFreezing::FreezingBit>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    assert {:msg "assert_failed(11,9599,9708): caller does not have permission to modify `AccountFreezing::FreezingBit` at given address"}
      $1_AccountFreezing_FreezingBit_$modifies[$t18];

    // assert CanModify<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    assert {:msg "assert_failed(11,9599,9708): caller does not have permission to modify `DiemAccount::AccountOperationsCapability` at given address"}
      $1_DiemAccount_AccountOperationsCapability_$modifies[$1_CoreAddresses_$DIEM_ROOT_ADDRESS()];

    // assert CanModify<Event::EventHandleGenerator>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    assert {:msg "assert_failed(11,9599,9708): caller does not have permission to modify `Event::EventHandleGenerator` at given address"}
      $1_Event_EventHandleGenerator_$modifies[$1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()];

    // assert CanModify<DiemId::DiemIdDomainManager>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    assert {:msg "assert_failed(11,9599,9708): caller does not have permission to modify `DiemId::DiemIdDomainManager` at given address"}
      $1_DiemId_DiemIdDomainManager_$modifies[$t18];

    // assert CanModify<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    assert {:msg "assert_failed(11,9599,9708): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()];

    // opaque begin: DiemAccount::create_treasury_compliance_account($t0, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109

    // assume Identical($t21, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), DiemId::$tc_domain_manager_exists()), Not(DiemTimestamp::$is_genesis())), exists<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), Not(exists<Roles::RoleId>($t19))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t19)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())), Eq<address>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS(), CoreAddresses::$VM_RESERVED_ADDRESS())), Eq<address>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS(), CoreAddresses::$CORE_CODE_ADDRESS())), exists<AccountFreezing::FreezingBit>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())))), Neq<num>(Add(16, Len<u8>($t1)), 32)), DiemId::$tc_domain_manager_exists())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    assume ($t21 == (((((((((((($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) || $1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory)) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_Roles_RoleId_$memory, $t19)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t19)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $IsEqual'address'($1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $1_CoreAddresses_$VM_RESERVED_ADDRESS())) || $IsEqual'address'($1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t1)), 32)) || $1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory)));

    // if ($t21) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    if ($t21) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
L10:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(6, $t7)), And(DiemId::$tc_domain_manager_exists(), Eq(6, $t7))), And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t7))), And(exists<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(6, $t7))), And(Not(exists<Roles::RoleId>($t19)), Eq(5, $t7))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t19)), 0), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t7))), And(Eq<address>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS(), CoreAddresses::$VM_RESERVED_ADDRESS()), Eq(7, $t7))), And(Eq<address>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS(), CoreAddresses::$CORE_CODE_ADDRESS()), Eq(7, $t7))), And(exists<AccountFreezing::FreezingBit>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(6, $t7))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))), Eq(5, $t7))), And(Neq<num>(Add(16, Len<u8>($t1)), 32), Eq(7, $t7))), And(DiemId::$tc_domain_manager_exists(), Eq(6, $t7))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    assume ((((((((((((($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t7)) || ($1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory) && $IsEqual'u8'(6, $t7))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t7))) || ($ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t7))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t19) && $IsEqual'u8'(5, $t7))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t19)), 0) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t7))) || ($IsEqual'address'($1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t7))) || ($IsEqual'address'($1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t7))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t7))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t7))) || (!$IsEqual'num'((16 + LenVec($t1)), 32) && $IsEqual'u8'(7, $t7))) || ($1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory) && $IsEqual'u8'(6, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    assume {:print "$at(11,9599,9708)"} true;
    assume {:print "$track_abort(29,25):", $t7} $t7 == $t7;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    goto L2;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
L9:

    // modifies global<DiemAccount::DiemAccount>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t18, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t18);
    }

    // modifies global<SlidingNonce::SlidingNonce>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_SlidingNonce_SlidingNonce';
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceUpdate($1_SlidingNonce_SlidingNonce_$memory, $t18, $temp_0'$1_SlidingNonce_SlidingNonce');
    } else {
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceRemove($1_SlidingNonce_SlidingNonce_$memory, $t18);
    }

    // modifies global<Roles::RoleId>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $t18, $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $t18);
    }

    // modifies global<AccountFreezing::FreezingBit>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t18, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t18);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<Event::EventHandleGenerator>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());
    }

    // modifies global<DiemId::DiemIdDomainManager>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemId_DiemIdDomainManager';
        $1_DiemId_DiemIdDomainManager_$memory := $ResourceUpdate($1_DiemId_DiemIdDomainManager_$memory, $t18, $temp_0'$1_DiemId_DiemIdDomainManager');
    } else {
        $1_DiemId_DiemIdDomainManager_$memory := $ResourceRemove($1_DiemId_DiemIdDomainManager_$memory, $t18);
    }

    // modifies global<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());
    }

    // assume Identical($t22, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1289:9+104
    assume {:print "$at(11,58790,58894)"} true;
    assume ($t22 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t23, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t23 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t24, pack DiemAccount::CreateAccountEvent(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS(), Roles::spec_get_role_id(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t24 == $1_DiemAccount_CreateAccountEvent($1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // assume exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume exists<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), 1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())), 1);

    // assume Roles::spec_has_treasury_compliance_role_addr($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, $t20);

    // assume DiemAccount::$exists_at($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t20);

    // assume exists<SlidingNonce::SlidingNonce>($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $t20);

    // assume AccountFreezing::spec_account_is_not_frozen($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t20);

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t20);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t20);

    // assume exists<DiemId::DiemIdDomainManager>($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_DiemId_DiemIdDomainManager_$memory, $t20);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t22, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t17, select DiemAccount::AccountOperationsCapability.creation_events($t17))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t22, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t17, $creation_events#$1_DiemAccount_AccountOperationsCapability($t17)));

    // assume Identical($t25, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t25 == $t24);

    // assume Identical($t26, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t26 == $t23);

    // emit_event($t25, $t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:214:9+109
    assume {:print "$at(11,9599,9708)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t26, $t25);

    // opaque end: DiemAccount::create_treasury_compliance_account($t0, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:218:5+1
    assume {:print "$at(11,9714,9715)"} true;
L1:

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:70:9+108
    assume {:print "$at(8,2901,3009)"} true;
    assert {:msg "assert_failed(8,2901,3009): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(exists[@467]<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1240:9+124
    assume {:print "$at(11,56083,56207)"} true;
    assert {:msg "assert_failed(11,56083,56207): function does not abort under this condition"}
      !$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#467, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(exists[@468]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1242:9+125
    assume {:print "$at(11,56216,56341)"} true;
    assert {:msg "assert_failed(11,56216,56341): function does not abort under this condition"}
      !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#468, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(exists[@469]<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1244:9+117
    assume {:print "$at(11,56350,56467)"} true;
    assert {:msg "assert_failed(11,56350,56467): function does not abort under this condition"}
      !$ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory#469, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(exists[@470]<AccountFreezing::FreezingBit>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1246:9+126
    assume {:print "$at(11,56476,56602)"} true;
    assert {:msg "assert_failed(11,56476,56602): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#470, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(Not(DiemTimestamp::$is_genesis[@471]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:142:9+51
    assume {:print "$at(17,5802,5853)"} true;
    assert {:msg "assert_failed(17,5802,5853): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#471);

    // assert Not(exists[@472]<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/Roles.move:179:9+62
    assume {:print "$at(26,7535,7597)"} true;
    assert {:msg "assert_failed(26,7535,7597): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#472, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(Neq<num>(Add(16, Len<u8>($t1)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1176:9+72
    assume {:print "$at(11,53276,53348)"} true;
    assert {:msg "assert_failed(11,53276,53348): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t1)), 32);

    // assert Not(exists[@467]<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1310:9+134
    assume {:print "$at(11,60217,60351)"} true;
    assert {:msg "assert_failed(11,60217,60351): function does not abort under this condition"}
      !$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#467, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(DiemId::$tc_domain_manager_exists[@473]()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1312:9+76
    assume {:print "$at(11,60360,60436)"} true;
    assert {:msg "assert_failed(11,60360,60436): function does not abort under this condition"}
      !$1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory#473);

    // assert Not(Not(DiemTimestamp::$is_genesis[@471]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:142:9+51
    assume {:print "$at(17,5802,5853)"} true;
    assert {:msg "assert_failed(17,5802,5853): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#471);

    // assert Not(exists[@472]<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/Roles.move:179:9+62
    assume {:print "$at(26,7535,7597)"} true;
    assert {:msg "assert_failed(26,7535,7597): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#472, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(exists[@470]<AccountFreezing::FreezingBit>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:225:9+136
    assume {:print "$at(11,10027,10163)"} true;
    assert {:msg "assert_failed(11,10027,10163): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#470, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert exists<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Roles.move:180:9+29
    assume {:print "$at(26,7606,7635)"} true;
    assert {:msg "assert_failed(26,7606,7635): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS())), 0) at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+48
    assume {:print "$at(26,7644,7692)"} true;
    assert {:msg "assert_failed(26,7644,7692): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())), 0);

    // assert exists<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Roles.move:180:9+29
    assume {:print "$at(26,7606,7635)"} true;
    assert {:msg "assert_failed(26,7606,7635): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), 1) at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+48
    assume {:print "$at(26,7644,7692)"} true;
    assert {:msg "assert_failed(26,7644,7692): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())), 1);

    // assert exists<DiemAccount::AccountOperationsCapability>($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1252:9+53
    assume {:print "$at(11,56771,56824)"} true;
    assert {:msg "assert_failed(11,56771,56824): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t3);

    // assert exists<DiemAccount::DiemWriteSetManager>($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1253:9+45
    assume {:print "$at(11,56833,56878)"} true;
    assert {:msg "assert_failed(11,56833,56878): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $t3);

    // assert exists<SlidingNonce::SlidingNonce>($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1254:9+52
    assume {:print "$at(11,56887,56939)"} true;
    assert {:msg "assert_failed(11,56887,56939): post-condition does not hold"}
      $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $t3);

    // assert Roles::spec_has_diem_root_role_addr($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1255:9+53
    assume {:print "$at(11,56948,57001)"} true;
    assert {:msg "assert_failed(11,56948,57001): post-condition does not hold"}
      $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, $t3);

    // assert DiemAccount::$exists_at($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1256:9+27
    assume {:print "$at(11,57010,57037)"} true;
    assert {:msg "assert_failed(11,57010,57037): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t3);

    // assert AccountFreezing::spec_account_is_not_frozen($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1257:9+61
    assume {:print "$at(11,57046,57107)"} true;
    assert {:msg "assert_failed(11,57046,57107): post-condition does not hold"}
      $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t3);

    // assert DiemAccount::spec_holds_own_key_rotation_cap($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1258:9+49
    assume {:print "$at(11,57116,57165)"} true;
    assert {:msg "assert_failed(11,57116,57165): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t3);

    // assert DiemAccount::spec_holds_own_withdraw_cap($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1259:9+45
    assume {:print "$at(11,57174,57219)"} true;
    assert {:msg "assert_failed(11,57174,57219): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t3);

    // assert exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1301:9+80
    assume {:print "$at(11,59654,59734)"} true;
    assert {:msg "assert_failed(11,59654,59734): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Roles::spec_has_treasury_compliance_role_addr($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1316:9+63
    assume {:print "$at(11,60576,60639)"} true;
    assert {:msg "assert_failed(11,60576,60639): post-condition does not hold"}
      $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, $t5);

    // assert DiemAccount::$exists_at($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1317:9+27
    assume {:print "$at(11,60648,60675)"} true;
    assert {:msg "assert_failed(11,60648,60675): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t5);

    // assert exists<SlidingNonce::SlidingNonce>($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1318:9+52
    assume {:print "$at(11,60684,60736)"} true;
    assert {:msg "assert_failed(11,60684,60736): post-condition does not hold"}
      $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $t5);

    // assert AccountFreezing::spec_account_is_not_frozen($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1319:9+61
    assume {:print "$at(11,60745,60806)"} true;
    assert {:msg "assert_failed(11,60745,60806): post-condition does not hold"}
      $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t5);

    // assert DiemAccount::spec_holds_own_key_rotation_cap($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1320:9+49
    assume {:print "$at(11,60815,60864)"} true;
    assert {:msg "assert_failed(11,60815,60864): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t5);

    // assert DiemAccount::spec_holds_own_withdraw_cap($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1321:9+45
    assume {:print "$at(11,60873,60918)"} true;
    assert {:msg "assert_failed(11,60873,60918): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t5);

    // assert exists<DiemId::DiemIdDomainManager>($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1322:9+53
    assume {:print "$at(11,60927,60980)"} true;
    assert {:msg "assert_failed(11,60927,60980): post-condition does not hold"}
      $ResourceExists($1_DiemId_DiemIdDomainManager_$memory, $t5);

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@474](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@474]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#474, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#474, addr)))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:218:5+1
    assume {:print "$at(11,9714,9715)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]()), exists[@467]<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())), exists[@468]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())), exists[@469]<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())), exists[@470]<AccountFreezing::FreezingBit>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Not(DiemTimestamp::$is_genesis[@471]())), exists[@472]<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Neq<num>(Add(16, Len<u8>($t1)), 32)), exists[@467]<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), DiemId::$tc_domain_manager_exists[@473]()), Not(DiemTimestamp::$is_genesis[@471]())), exists[@472]<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), exists[@470]<AccountFreezing::FreezingBit>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:220:5+724
    assume {:print "$at(11,9721,10445)"} true;
    assert {:msg "assert_failed(11,9721,10445): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || $ResourceExists($1_SlidingNonce_SlidingNonce_$memory#467, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#468, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory#469, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#470, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#471)) || $ResourceExists($1_Roles_RoleId_$memory#472, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$IsEqual'num'((16 + LenVec($t1)), 32)) || $ResourceExists($1_SlidingNonce_SlidingNonce_$memory#467, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || $1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory#473)) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#471)) || $ResourceExists($1_Roles_RoleId_$memory#472, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#470, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(2, $t7)), And(exists[@467]<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(6, $t7))), And(exists[@468]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(6, $t7))), And(exists[@469]<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(6, $t7))), And(exists[@470]<AccountFreezing::FreezingBit>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(6, $t7))), And(Not(DiemTimestamp::$is_genesis[@471]()), Eq(1, $t7))), And(exists[@472]<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(6, $t7))), And(Neq<num>(Add(16, Len<u8>($t1)), 32), Eq(7, $t7))), And(exists[@467]<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(6, $t7))), And(DiemId::$tc_domain_manager_exists[@473](), Eq(6, $t7))), And(Not(DiemTimestamp::$is_genesis[@471]()), Eq(1, $t7))), And(exists[@472]<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(6, $t7))), And(exists[@470]<AccountFreezing::FreezingBit>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(6, $t7))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:220:5+724
    assert {:msg "assert_failed(11,9721,10445): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t7)) || ($ResourceExists($1_SlidingNonce_SlidingNonce_$memory#467, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t7))) || ($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#468, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t7))) || ($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory#469, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t7))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#470, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t7))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#471) && $IsEqual'u8'(1, $t7))) || ($ResourceExists($1_Roles_RoleId_$memory#472, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t7))) || (!$IsEqual'num'((16 + LenVec($t1)), 32) && $IsEqual'u8'(7, $t7))) || ($ResourceExists($1_SlidingNonce_SlidingNonce_$memory#467, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t7))) || ($1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory#473) && $IsEqual'u8'(6, $t7))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#471) && $IsEqual'u8'(1, $t7))) || ($ResourceExists($1_Roles_RoleId_$memory#472, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t7))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#470, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t7)));

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:220:5+724
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun DiemAccount::preburn [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
procedure {:timeLimit 40} $1_DiemAccount_preburn$verify(_$t0: int, _$t1: $1_DiemAccount_WithdrawCapability, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: $1_Diem_CurrencyInfo'#0';
    var $t16: int;
    var $t17: $1_Diem_CurrencyInfo'#0';
    var $t18: Vec (int);
    var $t19: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t20: $1_Diem_PreburnEvent;
    var $t21: int;
    var $t22: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t23: $1_DiemAccount_SentPaymentEvent;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: Vec (int);
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t34: $1_DiemAccount_SentPaymentEvent;
    var $t35: $1_Diem_Diem'#0';
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: bool;
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: int;
    var $t45: $1_Diem_CurrencyInfo'#0';
    var $t46: $1_Diem_CurrencyInfo'#0';
    var $t47: Vec (int);
    var $t48: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t49: $1_Diem_PreburnEvent;
    var $t50: bool;
    var $t51: $1_Diem_CurrencyInfo'#0';
    var $t52: $1_Diem_PreburnEvent;
    var $t53: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t54: bool;
    var $t55: int;
    var $t56: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: $1_DiemAccount_WithdrawCapability;
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_Preburn'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $1_DiemAccount_Balance'#0'_$modifies: [int]bool;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemAccount_DiemAccount_$memory#579: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#580: $Memory $1_DiemAccount_Balance'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#581: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_AccountLimits_Window'#0'_$memory#582: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#583: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#584: $Memory $1_VASP_ParentVASP;
    var $1_DiemAccount_AccountOperationsCapability_$memory#585: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#586: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountFreezing_FreezingBit_$memory#587: $Memory $1_AccountFreezing_FreezingBit;
    var $1_Diem_Preburn'#0'_$memory#588: $Memory $1_Diem_Preburn'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#589: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Roles_RoleId_$memory#590: $Memory $1_Roles_RoleId;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,29470,29832)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:234:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+362
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:674:9+42
    assume {:print "$at(11,29883,29925)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, select DiemAccount::WithdrawCapability.account_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:675:9+32
    assume {:print "$at(11,29934,29966)"} true;
    assume ($t4 == $account_address#$1_DiemAccount_WithdrawCapability($t1));

    // assume Identical($t5, select DiemAccount::WithdrawCapability.account_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:631:9+32
    assume {:print "$at(11,28125,28157)"} true;
    assume ($t5 == $account_address#$1_DiemAccount_WithdrawCapability($t1));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:777:9+52
    assume {:print "$at(10,37690,37742)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:685:9+52
    assume {:print "$at(10,32772,32824)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, And(exists<Diem::Preburn<#0>>($t8), Not(exists<Diem::PreburnQueue<#0>>($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:686:9+103
    assume {:print "$at(10,32833,32936)"} true;
    assume ($t9 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t8) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t8)));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:734:9+52
    assume {:print "$at(10,35589,35641)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t4)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:706:9+61
    assume {:print "$at(11,31548,31609)"} true;
    assume ($t13 == $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t4))));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:789:9+52
    assume {:print "$at(10,38389,38441)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(10,25428,25470)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:717:9+42
    assume {:print "$at(11,32071,32113)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // assume Identical($t17, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(10,25747,25789)"} true;
    assume ($t17 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t18, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(10,25798,25849)"} true;
    assume ($t18 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t19, select Diem::CurrencyInfo.preburn_events($t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(10,25858,25891)"} true;
    assume ($t19 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t17));

    // assume Identical($t20, pack Diem::PreburnEvent($t2, $t18, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(10,25900,26011)"} true;
    assume ($t20 == $1_Diem_PreburnEvent($t2, $t18, $t16));

    // assume Identical($t21, select DiemAccount::WithdrawCapability.account_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:650:9+32
    assume {:print "$at(11,29045,29077)"} true;
    assume ($t21 == $account_address#$1_DiemAccount_WithdrawCapability($t1));

    // assume Identical($t22, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t21))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:651:9+52
    assume {:print "$at(11,29086,29138)"} true;
    assume ($t22 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t21)));

    // assume Identical($t23, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t16, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:652:9+161
    assume {:print "$at(11,29147,29308)"} true;
    assume ($t23 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t16, $EmptyVec'u8'()));

    // assume CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:676:9+80
    assume {:print "$at(11,29975,30055)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t4)];

    // assume CanModify<DiemAccount::DiemAccount>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:677:9+36
    assume {:print "$at(11,30064,30100)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t4];

    // assume CanModify<DiemAccount::Balance<#0>>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:705:9+39
    assume {:print "$at(11,31500,31539)"} true;
    assume $1_DiemAccount_Balance'#0'_$modifies[$t4];

    // assume CanModify<Diem::Preburn<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:791:9+49
    assume {:print "$at(10,38504,38553)"} true;
    assume $1_Diem_Preburn'#0'_$modifies[$t14];

    // assume CanModify<Diem::PreburnQueue<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:793:9+54
    assume {:print "$at(10,38636,38690)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t14];

    // assume CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    assume {:print "$at(10,38828,38908)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // @578 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @590 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_Roles_RoleId_$memory#590 := $1_Roles_RoleId_$memory;

    // @581 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_Diem_CurrencyInfo'#0'_$memory#581 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @588 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_Diem_Preburn'#0'_$memory#588 := $1_Diem_Preburn'#0'_$memory;

    // @589 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_Diem_PreburnQueue'#0'_$memory#589 := $1_Diem_PreburnQueue'#0'_$memory;

    // @586 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_AccountLimits_LimitsDefinition'#0'_$memory#586 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @582 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_AccountLimits_Window'#0'_$memory#582 := $1_AccountLimits_Window'#0'_$memory;

    // @583 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_VASP_ChildVASP_$memory#583 := $1_VASP_ChildVASP_$memory;

    // @584 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_VASP_ParentVASP_$memory#584 := $1_VASP_ParentVASP_$memory;

    // @587 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_AccountFreezing_FreezingBit_$memory#587 := $1_AccountFreezing_FreezingBit_$memory;

    // @579 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_DiemAccount_DiemAccount_$memory#579 := $1_DiemAccount_DiemAccount_$memory;

    // @585 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_DiemAccount_AccountOperationsCapability_$memory#585 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @580 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_DiemAccount_Balance'#0'_$memory#580 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[dd]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+1
    assume {:print "$at(11,29470,29471)"} true;
    assume {:print "$track_local(29,32,0):", $t0} $t0 == $t0;

    // trace_local[cap]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+1
    assume {:print "$track_local(29,32,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:663:5+1
    assume {:print "$track_local(29,32,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:668:9+35
    // >> opaque call: Roles::assert_designated_dealer($t0)
    assume {:print "$at(11,29654,29689)"} true;

    // assume Identical($t24, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:668:9+35
    assume {:print "$at(11,29654,29689)"} true;

    // assume Identical($t25, Or(Not(exists<Roles::RoleId>($t24)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t24)), 2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:668:9+35
    assume ($t25 == (!$ResourceExists($1_Roles_RoleId_$memory, $t24) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t24)), 2)));

    // if ($t25) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:668:9+35
    if ($t25) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:668:9+35
L4:

    // assume Or(And(Not(exists<Roles::RoleId>($t24)), Eq(5, $t26)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t24)), 2), Eq(3, $t26))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:668:9+35
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t24) && $IsEqual'u8'(5, $t26)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t24)), 2) && $IsEqual'u8'(3, $t26)));

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:668:9+35
    assume {:print "$at(11,29654,29689)"} true;
    assume {:print "$track_abort(29,32):", $t26} $t26 == $t26;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:668:9+35
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:668:9+35
L3:

    // opaque end: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:668:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:669:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(11,29699,29732)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:669:9+33

    // assume Identical($t27, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:669:9+33
    assume ($t27 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t27) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:669:9+33
    if ($t27) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:669:9+33
L6:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t26)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:669:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t26));

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:669:9+33
    assume {:print "$at(11,29699,29732)"} true;
    assume {:print "$track_abort(29,32):", $t26} $t26 == $t26;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:669:9+33
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:669:9+33
L5:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:669:9+33

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:56+22
    // >> opaque call: $t3 := Signer::address_of($t0)
    assume {:print "$at(11,29789,29811)"} true;

    // $t28 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:56+22

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:56+22
    assume $IsValid'address'($t28);

    // assume Eq<address>($t28, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:56+22
    assume $IsEqual'address'($t28, $1_Signer_spec_address_of($t0));

    // $t28 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:56+22

    // $t29 := [] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:88+3
    $t29 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t29);

    // assume Identical($t30, select DiemAccount::WithdrawCapability.account_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:611:9+32
    assume {:print "$at(11,27036,27068)"} true;
    assume ($t30 == $account_address#$1_DiemAccount_WithdrawCapability($t1));

    // assume Identical($t31, select DiemAccount::WithdrawCapability.account_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:631:9+32
    assume {:print "$at(11,28125,28157)"} true;
    assume ($t31 == $account_address#$1_DiemAccount_WithdrawCapability($t1));

    // assume Identical($t32, select DiemAccount::WithdrawCapability.account_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:650:9+32
    assume {:print "$at(11,29045,29077)"} true;
    assume ($t32 == $account_address#$1_DiemAccount_WithdrawCapability($t1));

    // assume Identical($t33, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:651:9+52
    assume {:print "$at(11,29086,29138)"} true;
    assume ($t33 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t32)));

    // assume Identical($t34, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t28, $t29)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:652:9+161
    assume {:print "$at(11,29147,29308)"} true;
    assume ($t34 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t28, $t29));

    // assert CanModify<DiemAccount::Balance<#0>>($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:37+55
    assume {:print "$at(11,29770,29825)"} true;
    assert {:msg "assert_failed(11,29770,29825): caller does not have permission to modify `DiemAccount::Balance<#0>` at given address"}
      $1_DiemAccount_Balance'#0'_$modifies[$t30];

    // assert CanModify<DiemAccount::DiemAccount>($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:37+55
    assert {:msg "assert_failed(11,29770,29825): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t30];

    // assert CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:37+55
    assert {:msg "assert_failed(11,29770,29825): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)];

    // $t35 := DiemAccount::withdraw_from<#0>($t1, $t28, $t2, $t29) on_abort goto L2 with $t26 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:37+55
    call $t35 := $1_DiemAccount_withdraw_from'#0'($t1, $t28, $t2, $t29);
    if ($abort_flag) {
        assume {:print "$at(11,29770,29825)"} true;
        $t26 := $abort_code;
        assume {:print "$track_abort(29,32):", $t26} $t26 == $t26;
        goto L2;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    // >> opaque call: Diem::preburn_to<#0>($t0, $t5)

    // assume Identical($t36, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:771:9+52
    assume {:print "$at(10,37428,37480)"} true;
    assume ($t36 == $1_Signer_spec_address_of($t0));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:777:9+52
    assume {:print "$at(10,37690,37742)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // assume Identical($t38, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t38 == $1_Signer_spec_address_of($t0));

    // assume Identical($t39, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:685:9+52
    assume {:print "$at(10,32772,32824)"} true;
    assume ($t39 == $1_Signer_spec_address_of($t0));

    // assume Identical($t40, And(exists<Diem::Preburn<#0>>($t39), Not(exists<Diem::PreburnQueue<#0>>($t39)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:686:9+103
    assume {:print "$at(10,32833,32936)"} true;
    assume ($t40 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t39) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t39)));

    // assume Identical($t41, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t41 == $1_Signer_spec_address_of($t0));

    // assume Identical($t42, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume ($t42 == $1_Signer_spec_address_of($t0));

    // assume Identical($t43, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:734:9+52
    assume {:print "$at(10,35589,35641)"} true;
    assume ($t43 == $1_Signer_spec_address_of($t0));

    // assume Identical($t44, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:789:9+52
    assume {:print "$at(10,38389,38441)"} true;
    assume ($t44 == $1_Signer_spec_address_of($t0));

    // assume Identical($t45, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(10,25428,25470)"} true;
    assume ($t45 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t46, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(10,25747,25789)"} true;
    assume ($t46 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t47, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(10,25798,25849)"} true;
    assume ($t47 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t48, select Diem::CurrencyInfo.preburn_events($t46)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(10,25858,25891)"} true;
    assume ($t48 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t46));

    // assume Identical($t49, pack Diem::PreburnEvent(select Diem::Diem.value($t35), $t47, $t36)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(10,25900,26011)"} true;
    assume ($t49 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t35), $t47, $t36));

    // assert CanModify<Diem::Preburn<#0>>($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    assume {:print "$at(11,29742,29826)"} true;
    assert {:msg "assert_failed(11,29742,29826): caller does not have permission to modify `Diem::Preburn<#0>` at given address"}
      $1_Diem_Preburn'#0'_$modifies[$t44];

    // assert CanModify<Diem::PreburnQueue<#0>>($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    assert {:msg "assert_failed(11,29742,29826): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t44];

    // assert CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    assert {:msg "assert_failed(11,29742,29826): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // opaque begin: Diem::preburn_to<#0>($t0, $t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84

    // assume Identical($t50, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(Or(exists<Diem::Preburn<#0>>($t37), exists<Diem::PreburnQueue<#0>>($t37))), Not(exists<Roles::RoleId>($t38))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t38)), 2)), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::Diem.value($t35)), 18446744073709551615)), Not(Diem::spec_is_currency<#0>())), And($t40, Not(exists<Roles::RoleId>($t41)))), And($t40, Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t41)), 2))), And($t40, Not(Diem::spec_is_currency<#0>()))), Not(exists<Roles::RoleId>($t42))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t42)), 2)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn<#0>(select Diem::Diem.value($t35)), [])))), 0)), And(exists<Diem::PreburnQueue<#0>>($t43), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t43))), 256)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    assume ($t50 == (((((((((((!($ResourceExists($1_Diem_Preburn'#0'_$memory, $t37) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t37)) || !$ResourceExists($1_Roles_RoleId_$memory, $t38)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t38)), 2)) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $value#$1_Diem_Diem'#0'($t35)) > 18446744073709551615)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || ($t40 && !$ResourceExists($1_Roles_RoleId_$memory, $t41))) || ($t40 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t41)), 2))) || ($t40 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))) || !$ResourceExists($1_Roles_RoleId_$memory, $t42)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t42)), 2)) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($value#$1_Diem_Diem'#0'($t35)), $EmptyVec'u8'())))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t43) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t43))) >= 256))));

    // if ($t50) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    if ($t50) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
L8:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(Or(exists<Diem::Preburn<#0>>($t37), exists<Diem::PreburnQueue<#0>>($t37))), And(Not(exists<Roles::RoleId>($t38)), Eq(5, $t26))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t38)), 2), Eq(3, $t26))), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::Diem.value($t35)), 18446744073709551615), Eq(8, $t26))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t26))), And(And($t40, Not(exists<Roles::RoleId>($t41))), Eq(5, $t26))), And(And($t40, Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t41)), 2)), Eq(3, $t26))), And(And($t40, Not(Diem::spec_is_currency<#0>())), Eq(5, $t26))), And(Not(exists<Roles::RoleId>($t42)), Eq(5, $t26))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t42)), 2), Eq(3, $t26))), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn<#0>(select Diem::Diem.value($t35)), [])))), 0), Eq(7, $t26))), And(And(exists<Diem::PreburnQueue<#0>>($t43), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t43))), 256)), Eq(8, $t26))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    assume (((((((((((!($ResourceExists($1_Diem_Preburn'#0'_$memory, $t37) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t37)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t38) && $IsEqual'u8'(5, $t26))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t38)), 2) && $IsEqual'u8'(3, $t26))) || ((($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $value#$1_Diem_Diem'#0'($t35)) > 18446744073709551615) && $IsEqual'u8'(8, $t26))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t26))) || (($t40 && !$ResourceExists($1_Roles_RoleId_$memory, $t41)) && $IsEqual'u8'(5, $t26))) || (($t40 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t41)), 2)) && $IsEqual'u8'(3, $t26))) || (($t40 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'u8'(5, $t26))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t42) && $IsEqual'u8'(5, $t26))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t42)), 2) && $IsEqual'u8'(3, $t26))) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($value#$1_Diem_Diem'#0'($t35)), $EmptyVec'u8'())))), 0) && $IsEqual'u8'(7, $t26))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t43) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t43))) >= 256)) && $IsEqual'u8'(8, $t26)));

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    assume {:print "$at(11,29742,29826)"} true;
    assume {:print "$track_abort(29,32):", $t26} $t26 == $t26;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
L7:

    // modifies global<Diem::Preburn<#0>>($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_Preburn'#0'';
        $1_Diem_Preburn'#0'_$memory := $ResourceUpdate($1_Diem_Preburn'#0'_$memory, $t44, $temp_0'$1_Diem_Preburn'#0'');
    } else {
        $1_Diem_Preburn'#0'_$memory := $ResourceRemove($1_Diem_Preburn'#0'_$memory, $t44);
    }

    // modifies global<Diem::PreburnQueue<#0>>($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t44, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t44);
    }

    // modifies global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_CurrencyInfo'#0'';
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS(), $temp_0'$1_Diem_CurrencyInfo'#0'');
    } else {
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceRemove($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());
    }

    // assume Identical($t51, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(10,25479,25531)"} true;
    assume ($t51 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume exists<Diem::PreburnQueue<#0>>($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t44);

    // assume Eq<Diem::CurrencyInfo<#0>>($t51, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t45, Add(select Diem::CurrencyInfo.preburn_value($t45), select Diem::Diem.value($t35)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $IsEqual'$1_Diem_CurrencyInfo'#0''($t51, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t45, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t45) + $value#$1_Diem_Diem'#0'($t35))));

    // assume Identical($t52, $t49) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t52 == $t49);

    // assume Identical($t53, $t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t53 == $t48);

    // assume Identical($t54, Not(select Diem::CurrencyInfo.is_synthetic($t46))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t54 == !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t46));

    // emit_event($t52, $t53, $t54) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:670:9+84
    assume {:print "$at(11,29742,29826)"} true;
    $es := $CondExtendEventStore'$1_Diem_PreburnEvent'($es, $t53, $t52, $t54);

    // opaque end: Diem::preburn_to<#0>($t0, $t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(10,25479,25531)"} true;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:671:5+1
    assume {:print "$at(11,29831,29832)"} true;
L1:

    // assume Identical($t55, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t4)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:707:9+71
    assume {:print "$at(11,31618,31689)"} true;
    assume ($t55 == $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t4))));

    // assume Identical($t56, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(10,25479,25531)"} true;
    assume ($t56 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert Not(Not(DiemTimestamp::$is_operating[@578]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578);

    // assert Not(Not(DiemAccount::$exists_at[@579]($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:635:9+55
    assume {:print "$at(11,28367,28422)"} true;
    assert {:msg "assert_failed(11,28367,28422): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#579, $t5);

    // assert Not(Not(exists[@580]<DiemAccount::Balance<#0>>($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:636:9+68
    assume {:print "$at(11,28431,28499)"} true;
    assert {:msg "assert_failed(11,28431,28499): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#580, $t5);

    // assert Not(Not(DiemTimestamp::$is_operating[@578]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578);

    // assert Not(Not(Diem::spec_is_currency[@581]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#581);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@585]()), Not(AccountLimits::spec_update_withdrawal_limits[@578, @586, @582]<#0>($t2, VASP::spec_parent_address[@583, @584]($t5)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:561:9+308
    assume {:print "$at(11,24943,25251)"} true;
    assert {:msg "assert_failed(11,24943,25251): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#585) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578, $1_AccountLimits_LimitsDefinition'#0'_$memory#586, $1_AccountLimits_Window'#0'_$memory#582, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@580]<DiemAccount::Balance<#0>>($t5))), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:575:11+66
    assume {:print "$at(11,25561,25627)"} true;
    assert {:msg "assert_failed(11,25561,25627): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#580, $t5))) < $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@578]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578);

    // assert Not(AccountFreezing::spec_account_is_frozen[@587]($t5)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:181:9+69
    assume {:print "$at(4,7220,7289)"} true;
    assert {:msg "assert_failed(4,7220,7289): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#587, $t5);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4079,4148)"} true;
    assert {:msg "assert_failed(5,4079,4148): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@586]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:444:9+96
    assume {:print "$at(5,20782,20878)"} true;
    assert {:msg "assert_failed(5,20782,20878): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@578, @586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), $t2), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:454:9+99
    assume {:print "$at(5,21264,21363)"} true;
    assert {:msg "assert_failed(5,21264,21363): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578, $1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5)))) + $t2) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), Gt(Add(select AccountLimits::Window.window_start(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:291:9+102
    assume {:print "$at(5,13064,13166)"} true;
    assert {:msg "assert_failed(5,13064,13166): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), Not(DiemTimestamp::$is_operating[@578]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578)));

    // assert Not(Not(Or(exists[@588]<Diem::Preburn<#0>>($t6), exists[@589]<Diem::PreburnQueue<#0>>($t6)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:780:9+101
    assume {:print "$at(10,37900,38001)"} true;
    assert {:msg "assert_failed(10,37900,38001): function does not abort under this condition"}
      !!($ResourceExists($1_Diem_Preburn'#0'_$memory#588, $t6) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#589, $t6));

    // assert Not(Not(exists[@590]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#590, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@590]<Roles::RoleId>($t7)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#590, $t7)), 2);

    // assert Not(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@581]<#0>()), $t2), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:520:9+102
    assume {:print "$at(10,25211,25313)"} true;
    assert {:msg "assert_failed(10,25211,25313): function does not abort under this condition"}
      !(($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#581)) + $t2) > 18446744073709551615);

    // assert Not(Not(Diem::spec_is_currency[@581]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#581);

    // assert Not(And($t9, Not(exists[@590]<Roles::RoleId>($t10)))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !($t9 && !$ResourceExists($1_Roles_RoleId_$memory#590, $t10));

    // assert Not(And($t9, Neq<u64>(select Roles::RoleId.role_id(global[@590]<Roles::RoleId>($t10)), 2))) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !($t9 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#590, $t10)), 2));

    // assert Not(And($t9, Not(Diem::spec_is_currency[@581]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !($t9 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#581));

    // assert Not(Not(exists[@590]<Roles::RoleId>($t11))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#590, $t11);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@590]<Roles::RoleId>($t11)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#590, $t11)), 2);

    // assert Not(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn[]<#0>($t2), [])))), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:735:9+75
    assume {:print "$at(10,35650,35725)"} true;
    assert {:msg "assert_failed(10,35650,35725): function does not abort under this condition"}
      !$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($t2), $EmptyVec'u8'())))), 0);

    // assert Not(And(exists[@589]<Diem::PreburnQueue<#0>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@589]<Diem::PreburnQueue<#0>>($t12))), 256))) at /home/ying/diem/language/diem-framework/modules/Diem.move:736:9+208
    assume {:print "$at(10,35734,35942)"} true;
    assert {:msg "assert_failed(10,35734,35942): function does not abort under this condition"}
      !($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#589, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#589, $t12))) >= 256));

    // assert exists<DiemAccount::DiemAccount>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:678:9+35
    assume {:print "$at(11,30109,30144)"} true;
    assert {:msg "assert_failed(11,30109,30144): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t4);

    // assert Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t4)), select DiemAccount::DiemAccount.withdraw_capability(global[@579]<DiemAccount::DiemAccount>($t4))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:679:9+126
    assume {:print "$at(11,30153,30279)"} true;
    assert {:msg "assert_failed(11,30153,30279): post-condition does not hold"}
      $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t4)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#579, $t4)));

    // assert Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t4)), select DiemAccount::DiemAccount.sent_events(global[@579]<DiemAccount::DiemAccount>($t4))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:681:9+149
    assume {:print "$at(11,30288,30437)"} true;
    assert {:msg "assert_failed(11,30288,30437): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t4)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#579, $t4)));

    // assert Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t4)), select DiemAccount::DiemAccount.received_events(global[@579]<DiemAccount::DiemAccount>($t4))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:683:9+157
    assume {:print "$at(11,30446,30603)"} true;
    assert {:msg "assert_failed(11,30446,30603): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t4)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#579, $t4)));

    // assert Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t3)), select DiemAccount::DiemAccount.sent_events(global[@579]<DiemAccount::DiemAccount>($t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:685:9+153
    assume {:print "$at(11,30612,30765)"} true;
    assert {:msg "assert_failed(11,30612,30765): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t3)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#579, $t3)));

    // assert Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t3)), select DiemAccount::DiemAccount.received_events(global[@579]<DiemAccount::DiemAccount>($t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:687:9+161
    assume {:print "$at(11,30774,30935)"} true;
    assert {:msg "assert_failed(11,30774,30935): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t3)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#579, $t3)));

    // assert Eq<u64>($t55, Sub($t13, $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:709:9+53
    assume {:print "$at(11,31754,31807)"} true;
    assert {:msg "assert_failed(11,31754,31807): post-condition does not hold"}
      $IsEqual'u64'($t55, ($t13 - $t2));

    // assert exists<Diem::PreburnQueue<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:794:9+53
    assume {:print "$at(10,38699,38752)"} true;
    assert {:msg "assert_failed(10,38699,38752): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t14);

    // assert Eq<Diem::CurrencyInfo<#0>>($t56, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t15, Add(select Diem::CurrencyInfo.preburn_value($t15), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:527:9+84
    assume {:print "$at(10,25540,25624)"} true;
    assert {:msg "assert_failed(10,25540,25624): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t56, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t15, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t15) + $t2)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@579](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@579]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#579, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#579, addr)))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t20, $t19, Not(select Diem::CurrencyInfo.is_synthetic($t17)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:540:9+42
    assume {:print "$at(10,26020,26062)"} true;
    assert {:msg "assert_failed(10,26020,26062): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t19, $t20, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t17)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t20, $t19, Not(select Diem::CurrencyInfo.is_synthetic($t17))), $t23, $t22)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+20
    assume {:print "$at(11,29317,29337)"} true;
    assert {:msg "assert_failed(11,29317,29337): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t19, $t20, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t17)), $t22, $t23); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t20, $t19, Not(select Diem::CurrencyInfo.is_synthetic($t17))), $t23, $t22)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:672:5+1231
    assume {:print "$at(11,29837,31068)"} true;
    assert {:msg "assert_failed(11,29837,31068): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t19, $t20, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t17)), $t22, $t23); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:672:5+1231
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:671:5+1
    assume {:print "$at(11,29831,29832)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemTimestamp::$is_operating[@578]()), Not(DiemAccount::$exists_at[@579]($t5))), Not(exists[@580]<DiemAccount::Balance<#0>>($t5))), Not(DiemTimestamp::$is_operating[@578]())), Not(Diem::spec_is_currency[@581]<#0>())), And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@585]()), Not(AccountLimits::spec_update_withdrawal_limits[@578, @586, @582]<#0>($t2, VASP::spec_parent_address[@583, @584]($t5)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@580]<DiemAccount::Balance<#0>>($t5))), $t2)), Not(DiemTimestamp::$is_operating[@578]())), AccountFreezing::spec_account_is_frozen[@587]($t5)), And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5))))), And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@586]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5))))))), And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@578, @586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), Gt(Add(select AccountLimits::Window.window_start(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), Not(DiemTimestamp::$is_operating[@578]())))), Not(Or(exists[@588]<Diem::Preburn<#0>>($t6), exists[@589]<Diem::PreburnQueue<#0>>($t6)))), Not(exists[@590]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@590]<Roles::RoleId>($t7)), 2)), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@581]<#0>()), $t2), 18446744073709551615)), Not(Diem::spec_is_currency[@581]<#0>())), And($t9, Not(exists[@590]<Roles::RoleId>($t10)))), And($t9, Neq<u64>(select Roles::RoleId.role_id(global[@590]<Roles::RoleId>($t10)), 2))), And($t9, Not(Diem::spec_is_currency[@581]<#0>()))), Not(exists[@590]<Roles::RoleId>($t11))), Neq<u64>(select Roles::RoleId.role_id(global[@590]<Roles::RoleId>($t11)), 2)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn[]<#0>($t2), [])))), 0)), And(exists[@589]<Diem::PreburnQueue<#0>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@589]<Diem::PreburnQueue<#0>>($t12))), 256))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:672:5+1231
    assume {:print "$at(11,29837,31068)"} true;
    assert {:msg "assert_failed(11,29837,31068): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((((((((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#579, $t5)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#580, $t5)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#581)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#585) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578, $1_AccountLimits_LimitsDefinition'#0'_$memory#586, $1_AccountLimits_Window'#0'_$memory#582, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))))) || ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#580, $t5))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#587, $t5)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578, $1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578)))) || !($ResourceExists($1_Diem_Preburn'#0'_$memory#588, $t6) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#589, $t6))) || !$ResourceExists($1_Roles_RoleId_$memory#590, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#590, $t7)), 2)) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#581)) + $t2) > 18446744073709551615)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#581)) || ($t9 && !$ResourceExists($1_Roles_RoleId_$memory#590, $t10))) || ($t9 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#590, $t10)), 2))) || ($t9 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#581))) || !$ResourceExists($1_Roles_RoleId_$memory#590, $t11)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#590, $t11)), 2)) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($t2), $EmptyVec'u8'())))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#589, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#589, $t12))) >= 256)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemTimestamp::$is_operating[@578]()), Eq(1, $t26)), And(Not(DiemAccount::$exists_at[@579]($t5)), Eq(5, $t26))), And(Not(exists[@580]<DiemAccount::Balance<#0>>($t5)), Eq(5, $t26))), And(Not(DiemTimestamp::$is_operating[@578]()), Eq(1, $t26))), And(Not(Diem::spec_is_currency[@581]<#0>()), Eq(5, $t26))), And(And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@585]()), Not(AccountLimits::spec_update_withdrawal_limits[@578, @586, @582]<#0>($t2, VASP::spec_parent_address[@583, @584]($t5))))), Eq(8, $t26))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@580]<DiemAccount::Balance<#0>>($t5))), $t2), Eq(8, $t26))), And(Not(DiemTimestamp::$is_operating[@578]()), Eq(1, $t26))), And(AccountFreezing::spec_account_is_frozen[@587]($t5), Eq(1, $t26))), And(And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), Eq(5, $t26))), And(And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@586]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))))), Eq(5, $t26))), And(And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@578, @586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), $t2), 18446744073709551615))), Eq(8, $t26))), And(And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), Gt(Add(select AccountLimits::Window.window_start(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5))))), MaxU64()))), Eq(8, $t26))), And(And(DiemAccount::spec_should_track_limits_for_account[@582, @583, @584]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@586]<#0>(global[@582]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@583, @584]($t5)))), Not(DiemTimestamp::$is_operating[@578]()))), Eq(1, $t26))), Not(Or(exists[@588]<Diem::Preburn<#0>>($t6), exists[@589]<Diem::PreburnQueue<#0>>($t6)))), And(Not(exists[@590]<Roles::RoleId>($t7)), Eq(5, $t26))), And(Neq<u64>(select Roles::RoleId.role_id(global[@590]<Roles::RoleId>($t7)), 2), Eq(3, $t26))), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@581]<#0>()), $t2), 18446744073709551615), Eq(8, $t26))), And(Not(Diem::spec_is_currency[@581]<#0>()), Eq(5, $t26))), And(And($t9, Not(exists[@590]<Roles::RoleId>($t10))), Eq(5, $t26))), And(And($t9, Neq<u64>(select Roles::RoleId.role_id(global[@590]<Roles::RoleId>($t10)), 2)), Eq(3, $t26))), And(And($t9, Not(Diem::spec_is_currency[@581]<#0>())), Eq(5, $t26))), And(Not(exists[@590]<Roles::RoleId>($t11)), Eq(5, $t26))), And(Neq<u64>(select Roles::RoleId.role_id(global[@590]<Roles::RoleId>($t11)), 2), Eq(3, $t26))), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn[]<#0>($t2), [])))), 0), Eq(7, $t26))), And(And(exists[@589]<Diem::PreburnQueue<#0>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@589]<Diem::PreburnQueue<#0>>($t12))), 256)), Eq(8, $t26))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:672:5+1231
    assert {:msg "assert_failed(11,29837,31068): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((((((((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578) && $IsEqual'u8'(1, $t26)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#579, $t5) && $IsEqual'u8'(5, $t26))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#580, $t5) && $IsEqual'u8'(5, $t26))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578) && $IsEqual'u8'(1, $t26))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#581) && $IsEqual'u8'(5, $t26))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#585) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578, $1_AccountLimits_LimitsDefinition'#0'_$memory#586, $1_AccountLimits_Window'#0'_$memory#582, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5)))) && $IsEqual'u8'(8, $t26))) || (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#580, $t5))) < $t2) && $IsEqual'u8'(8, $t26))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578) && $IsEqual'u8'(1, $t26))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#587, $t5) && $IsEqual'u8'(1, $t26))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) && $IsEqual'u8'(5, $t26))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))))) && $IsEqual'u8'(5, $t26))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578, $1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5)))) + $t2) > 18446744073709551615))) && $IsEqual'u8'(8, $t26))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))))) > $MAX_U64))) && $IsEqual'u8'(8, $t26))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#586, $ResourceValue($1_AccountLimits_Window'#0'_$memory#582, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#583, $1_VASP_ParentVASP_$memory#584, $t5))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#578))) && $IsEqual'u8'(1, $t26))) || !($ResourceExists($1_Diem_Preburn'#0'_$memory#588, $t6) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#589, $t6))) || (!$ResourceExists($1_Roles_RoleId_$memory#590, $t7) && $IsEqual'u8'(5, $t26))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#590, $t7)), 2) && $IsEqual'u8'(3, $t26))) || ((($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#581)) + $t2) > 18446744073709551615) && $IsEqual'u8'(8, $t26))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#581) && $IsEqual'u8'(5, $t26))) || (($t9 && !$ResourceExists($1_Roles_RoleId_$memory#590, $t10)) && $IsEqual'u8'(5, $t26))) || (($t9 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#590, $t10)), 2)) && $IsEqual'u8'(3, $t26))) || (($t9 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#581)) && $IsEqual'u8'(5, $t26))) || (!$ResourceExists($1_Roles_RoleId_$memory#590, $t11) && $IsEqual'u8'(5, $t26))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#590, $t11)), 2) && $IsEqual'u8'(3, $t26))) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($t2), $EmptyVec'u8'())))), 0) && $IsEqual'u8'(7, $t26))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#589, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#589, $t12))) >= 256)) && $IsEqual'u8'(8, $t26)));

    // abort($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:672:5+1231
    $abort_code := $t26;
    $abort_flag := true;
    return;

}

// fun DiemAccount::cancel_burn [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
procedure {:timeLimit 40} $1_DiemAccount_cancel_burn$verify(_$t0: int, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_Diem_Diem'#0';
    var $t4: $1_Diem_CurrencyInfo'#0';
    var $t5: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t6: $1_Diem_CurrencyInfo'#0';
    var $t7: Vec (int);
    var $t8: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t9: $1_Diem_CurrencyInfo'#0';
    var $t10: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t11: $1_DiemAccount_ReceivedPaymentEvent;
    var $t12: $1_Diem_CurrencyInfo'#0';
    var $t13: $1_Diem_CurrencyInfo'#0';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t15: $1_Diem_CurrencyInfo'#0';
    var $t16: $1_Diem_CurrencyInfo'#0';
    var $t17: Vec (int);
    var $t18: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t19: $1_Diem_Diem'#0';
    var $t20: int;
    var $t21: Vec (int);
    var $t22: Vec (int);
    var $t23: bool;
    var $t24: int;
    var $t25: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t26: $1_DiemAccount_ReceivedPaymentEvent;
    var $t27: $1_FixedPoint32_FixedPoint32;
    var $t28: bool;
    var $t29: $1_DiemAccount_ReceivedPaymentEvent;
    var $t30: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t31: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_BurnCapability'#0'_$memory#541: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#542: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#543: $Memory $1_Diem_PreburnQueue'#0';
    var $1_DiemAccount_Balance'#0'_$memory#544: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#545: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'#0'_$memory#546: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#547: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#548: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#550: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountFreezing_FreezingBit_$memory#551: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_DiemAccount_$memory#553: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#554: $Memory $1_DiemAccount_Balance'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,21649,22149)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:234:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+500
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t4, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1023:9+82
    assume {:print "$at(10,49950,50032)"} true;
    assume ($t4 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t5, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t5 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t6, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+42
    assume {:print "$at(10,50788,50830)"} true;
    assume ($t6 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t7, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1040:9+51
    assume {:print "$at(10,50839,50890)"} true;
    assume ($t7 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t8, select Diem::CurrencyInfo.cancel_burn_events($t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1041:9+37
    assume {:print "$at(10,50899,50936)"} true;
    assume ($t8 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t6));

    // assume Identical($t9, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1032:9+82
    assume {:print "$at(10,50391,50473)"} true;
    assume ($t9 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t10, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:408:9+56
    assume {:print "$at(11,17877,17933)"} true;
    assume ($t10 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t11, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t1, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:409:9+165
    assume {:print "$at(11,17942,18107)"} true;
    assume ($t11 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $EmptyVec'u8'()));

    // @549 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    assume {:print "$at(11,21649,21650)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @541 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    $1_Diem_BurnCapability'#0'_$memory#541 := $1_Diem_BurnCapability'#0'_$memory;

    // @542 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#542 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @543 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    $1_Diem_PreburnQueue'#0'_$memory#543 := $1_Diem_PreburnQueue'#0'_$memory;

    // @550 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    $1_AccountLimits_LimitsDefinition'#0'_$memory#550 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @546 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    $1_AccountLimits_Window'#0'_$memory#546 := $1_AccountLimits_Window'#0'_$memory;

    // @547 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    $1_VASP_ChildVASP_$memory#547 := $1_VASP_ChildVASP_$memory;

    // @548 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    $1_VASP_ParentVASP_$memory#548 := $1_VASP_ParentVASP_$memory;

    // @551 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    $1_AccountFreezing_FreezingBit_$memory#551 := $1_AccountFreezing_FreezingBit_$memory;

    // @545 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    $1_DiemAccount_DiemAccount_$memory#545 := $1_DiemAccount_DiemAccount_$memory;

    // @544 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    $1_DiemAccount_Balance'#0'_$memory#544 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    assume {:print "$track_local(29,6,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    assume {:print "$track_local(29,6,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:485:5+1
    assume {:print "$track_local(29,6,2):", $t2} $t2 == $t2;

    // assume Identical($t12, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:378:9+91
    assume {:print "$at(10,18439,18530)"} true;
    assume ($t12 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t13, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1023:9+82
    assume {:print "$at(10,49950,50032)"} true;
    assume ($t13 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t15, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1032:9+82
    assume {:print "$at(10,50391,50473)"} true;
    assume ($t15 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t16, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+42
    assume {:print "$at(10,50788,50830)"} true;
    assume ($t16 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t17, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1040:9+51
    assume {:print "$at(10,50839,50890)"} true;
    assume ($t17 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t18, select Diem::CurrencyInfo.cancel_burn_events($t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1041:9+37
    assume {:print "$at(10,50899,50936)"} true;
    assume ($t18 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t16));

    // $t19 := Diem::cancel_burn<#0>($t0, $t1, $t2) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:490:20+58
    assume {:print "$at(11,21854,21912)"} true;
    call $t19 := $1_Diem_cancel_burn'#0'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,21854,21912)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(29,6):", $t20} $t20 == $t20;
        goto L2;
    }

    // trace_local[coin]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:490:13+4
    assume {:print "$track_local(29,6,3):", $t19} $t19 == $t19;

    // $t21 := [] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:57+3
    assume {:print "$at(11,22127,22130)"} true;
    $t21 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t21);

    // $t22 := [] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:62+3
    $t22 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t22);

    // $t23 := false at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:67+5
    $t23 := false;
    assume $IsValid'bool'($t23);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    // >> opaque call: DiemAccount::deposit<#0>($t1, $t1, $t4, $t5, $t6, $t7)

    // assume Identical($t24, select Diem::Diem.value($t19)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:358:9+30
    assume {:print "$at(11,15804,15834)"} true;
    assume ($t24 == $value#$1_Diem_Diem'#0'($t19));

    // assume Identical($t25, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:408:9+56
    assume {:print "$at(11,17877,17933)"} true;
    assume ($t25 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t26, pack DiemAccount::ReceivedPaymentEvent($t24, Diem::spec_currency_code<#0>(), $t1, $t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:409:9+165
    assume {:print "$at(11,17942,18107)"} true;
    assume ($t26 == $1_DiemAccount_ReceivedPaymentEvent($t24, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $t21));

    // assume Identical($t27, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1377:9+59
    assume {:print "$at(10,65833,65892)"} true;
    assume ($t27 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // opaque begin: DiemAccount::deposit<#0>($t1, $t1, $t19, $t21, $t22, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume {:print "$at(11,22079,22143)"} true;

    // assume Identical($t28, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<#0>>($t1)), Not(DiemAccount::$exists_at($t1))), Eq<u64>($t24, 0)), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t24, VASP::spec_parent_address($t1))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<#0>())), AccountFreezing::spec_account_is_frozen($t1)), Gt(Add(DiemAccount::$balance<#0>($t1), $t24), MaxU64())), And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(DualAttestation::spec_is_published())))), And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(Diem::spec_is_currency<#0>())))), And($t23, And(Eq<num>(Len<u8>($t22), 0), Gt(FixedPoint32::spec_multiply_u64($t24, $t27), 18446744073709551615)))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_signature_is_valid($t1, $t1, $t22, $t21, $t24))))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1))))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume ($t28 == ((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1)) || $IsEqual'u64'($t24, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t24, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1)) || (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1) + $t24) > $MAX_U64)) || ($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)))) || ($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)))) || ($t23 && ($IsEqual'num'(LenVec($t22), 0) && ($1_FixedPoint32_spec_multiply_u64($t24, $t27) > 18446744073709551615)))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t1, $t1, $t22, $t21, $t24)))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))));

    // if ($t28) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    if ($t28) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
L4:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<#0>>($t1)), Eq(7, $t20)), And(Not(DiemAccount::$exists_at($t1)), Eq(5, $t20))), And(Eq<u64>($t24, 0), Eq(7, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t24, VASP::spec_parent_address($t1)))), Eq(8, $t20))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t20))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20))), And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t20))), And(Gt(Add(DiemAccount::$balance<#0>($t1), $t24), MaxU64()), Eq(8, $t20))), And(And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(DualAttestation::spec_is_published()))), Eq(5, $t20))), And(And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(Diem::spec_is_currency<#0>()))), Eq(5, $t20))), And(And($t23, And(Eq<num>(Len<u8>($t22), 0), Gt(FixedPoint32::spec_multiply_u64($t24, $t27), 18446744073709551615))), Eq(8, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), Eq(1, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), Eq(1, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_signature_is_valid($t1, $t1, $t22, $t21, $t24)))), Eq(7, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1))))), Eq(5, $t20))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume (((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1) && $IsEqual'u8'(7, $t20)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1) && $IsEqual'u8'(5, $t20))) || ($IsEqual'u64'($t24, 0) && $IsEqual'u8'(7, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t24, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'u8'(8, $t20))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'u8'(1, $t20))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t20))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'u8'(1, $t20))) || ((($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1) + $t24) > $MAX_U64) && $IsEqual'u8'(8, $t20))) || (($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) && $IsEqual'u8'(5, $t20))) || (($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))) && $IsEqual'u8'(5, $t20))) || (($t23 && ($IsEqual'num'(LenVec($t22), 0) && ($1_FixedPoint32_spec_multiply_u64($t24, $t27) > 18446744073709551615))) && $IsEqual'u8'(8, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'u8'(1, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'u8'(1, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t1, $t1, $t22, $t21, $t24))) && $IsEqual'u8'(7, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'u8'(5, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume {:print "$at(11,22079,22143)"} true;
    assume {:print "$track_abort(29,6):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
L3:

    // @553 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    $1_DiemAccount_DiemAccount_$memory#553 := $1_DiemAccount_DiemAccount_$memory;

    // @554 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    $1_DiemAccount_Balance'#0'_$memory#554 := $1_DiemAccount_Balance'#0'_$memory;

    // modifies global<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t1, $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $t1);
    }

    // modifies global<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t1, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t1);
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));
    }

    // assume exists<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t1);

    // assume exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.withdraw_capability(global[@553]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#553, $t1)));

    // assume Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.authentication_key(global[@553]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#553, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@553]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#553, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@553]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#553, $t1)));

    // assume Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@554]<#0>($t1), $t24)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#554, $t1) + $t24));

    // assume Identical($t29, $t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume ($t29 == $t26);

    // assume Identical($t30, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    assume ($t30 == $t25);

    // emit_event($t29, $t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t30, $t29);

    // opaque end: DiemAccount::deposit<#0>($t1, $t1, $t19, $t21, $t22, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:493:9+64

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:494:5+1
    assume {:print "$at(11,22148,22149)"} true;
L1:

    // assume Identical($t31, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1033:9+92
    assume {:print "$at(10,50482,50574)"} true;
    assume ($t31 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assert Not(Not(exists[@541]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:401:9+111
    assume {:print "$at(10,19566,19677)"} true;
    assert {:msg "assert_failed(10,19566,19677): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#541, $1_Signer_spec_address_of($t0));

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t4), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1026:9+66
    assume {:print "$at(10,50145,50211)"} true;
    assert {:msg "assert_failed(10,50145,50211): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t4) < $t2);

    // assert Not(Not(Diem::spec_is_currency[@542]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#542);

    // assert Not(Not(exists[@543]<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:848:9+86
    assume {:print "$at(10,41308,41394)"} true;
    assert {:msg "assert_failed(10,41308,41394): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#543, $t1);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t5)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t5, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:849:9+121
    assume {:print "$at(10,41403,41524)"} true;
    assert {:msg "assert_failed(10,41403,41524): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t5)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t5, i)))), $t2)))));

    // assert Not(Not(exists[@544]<DiemAccount::Balance<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:372:9+71
    assume {:print "$at(11,16433,16504)"} true;
    assert {:msg "assert_failed(11,16433,16504): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#544, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@545]($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:373:9+55
    assume {:print "$at(11,16513,16568)"} true;
    assert {:msg "assert_failed(11,16513,16568): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#545, $t1);

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:386:9+52
    assume {:print "$at(11,16976,17028)"} true;
    assert {:msg "assert_failed(11,16976,17028): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@549, @550, @546]<#0>($t2, VASP::spec_parent_address[@547, @548]($t1))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:392:9+238
    assume {:print "$at(11,17269,17507)"} true;
    assert {:msg "assert_failed(11,17269,17507): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549, $1_AccountLimits_LimitsDefinition'#0'_$memory#550, $1_AccountLimits_Window'#0'_$memory#546, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1)));

    // assert Not(Not(DiemTimestamp::$is_operating[@549]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), Not(exists[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4079,4148)"} true;
    assert {:msg "assert_failed(5,4079,4148): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), Not(exists[@550]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:360:9+98
    assume {:print "$at(5,16437,16535)"} true;
    assert {:msg "assert_failed(5,16437,16535): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@549, @550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:370:9+102
    assume {:print "$at(5,16932,17034)"} true;
    assert {:msg "assert_failed(5,16932,17034): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549, $1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@549, @550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+104
    assume {:print "$at(5,17043,17147)"} true;
    assert {:msg "assert_failed(5,17043,17147): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549, $1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:291:9+102
    assume {:print "$at(5,13064,13166)"} true;
    assert {:msg "assert_failed(5,13064,13166): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Not(DiemTimestamp::$is_operating[@549]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549)));

    // assert Not(Not(Diem::spec_is_currency[@542]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#542);

    // assert Not(AccountFreezing::spec_account_is_frozen[@551]($t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:181:9+69
    assume {:print "$at(4,7220,7289)"} true;
    assert {:msg "assert_failed(4,7220,7289): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#551, $t1);

    // assert Not(Gt(Add(DiemAccount::$balance[@544]<#0>($t1), $t2), MaxU64())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:378:9+81
    assume {:print "$at(11,16677,16758)"} true;
    assert {:msg "assert_failed(11,16677,16758): function does not abort under this condition"}
      !(($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#544, $t1) + $t2) > $MAX_U64);

    // assert Eq<Diem::CurrencyInfo<#0>>($t31, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t9, Sub(select Diem::CurrencyInfo.preburn_value($t9), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1034:9+84
    assume {:print "$at(10,50583,50667)"} true;
    assert {:msg "assert_failed(10,50583,50667): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t31, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t9, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t9) - $t2)));

    // assert Implies(exists[@543]<Diem::PreburnQueue<#0>>($t1), exists<Diem::PreburnQueue<#0>>($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:856:9+113
    assume {:print "$at(10,41796,41909)"} true;
    assert {:msg "assert_failed(10,41796,41909): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#543, $t1) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t1));

    // assert Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@544]<#0>($t1), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:401:9+69
    assume {:print "$at(11,17656,17725)"} true;
    assert {:msg "assert_failed(11,17656,17725): post-condition does not hold"}
      $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#544, $t1) + $t2));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@545](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@545]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#545, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#545, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@544]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@544]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#544, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#544, addr))))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t7, $t1), $t8, Not(select Diem::CurrencyInfo.is_synthetic($t6)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1042:9+165
    assume {:print "$at(10,50945,51110)"} true;
    assert {:msg "assert_failed(10,50945,51110): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t8, $1_Diem_CancelBurnEvent($t2, $t7, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t6)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t7, $t1), $t8, Not(select Diem::CurrencyInfo.is_synthetic($t6))), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:415:9+20
    assume {:print "$at(11,18116,18136)"} true;
    assert {:msg "assert_failed(11,18116,18136): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t8, $1_Diem_CancelBurnEvent($t2, $t7, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t6)), $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t7, $t1), $t8, Not(select Diem::CurrencyInfo.is_synthetic($t6))), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:495:5+412
    assume {:print "$at(11,22154,22566)"} true;
    assert {:msg "assert_failed(11,22154,22566): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t8, $1_Diem_CancelBurnEvent($t2, $t7, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t6)), $t10, $t11); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:495:5+412
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:494:5+1
    assume {:print "$at(11,22148,22149)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@541]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Lt(select Diem::CurrencyInfo.preburn_value($t4), $t2)), Not(Diem::spec_is_currency[@542]<#0>())), Not(exists[@543]<Diem::PreburnQueue<#0>>($t1))), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t5)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t5, i)))), $t2)), Not(exists[@544]<DiemAccount::Balance<#0>>($t1))), Not(DiemAccount::$exists_at[@545]($t1))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@549, @550, @546]<#0>($t2, VASP::spec_parent_address[@547, @548]($t1))))), Not(DiemTimestamp::$is_operating[@549]())), And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), Not(exists[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1))))), And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), Not(exists[@550]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1))))))), And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@549, @550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@549, @550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Not(DiemTimestamp::$is_operating[@549]())))), Not(Diem::spec_is_currency[@542]<#0>())), AccountFreezing::spec_account_is_frozen[@551]($t1)), Gt(Add(DiemAccount::$balance[@544]<#0>($t1), $t2), MaxU64())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:495:5+412
    assume {:print "$at(11,22154,22566)"} true;
    assert {:msg "assert_failed(11,22154,22566): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#541, $1_Signer_spec_address_of($t0)) || ($preburn_value#$1_Diem_CurrencyInfo'#0'($t4) < $t2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#542)) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#543, $t1)) || (var $range_0 := $Range(0, LenVec($t5)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t5, i)))), $t2)))))) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#544, $t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#545, $t1)) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549, $1_AccountLimits_LimitsDefinition'#0'_$memory#550, $1_AccountLimits_Window'#0'_$memory#546, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549, $1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549, $1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#542)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#551, $t1)) || (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#544, $t1) + $t2) > $MAX_U64));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@541]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t20)), And(Lt(select Diem::CurrencyInfo.preburn_value($t4), $t2), Eq(8, $t20))), And(Not(Diem::spec_is_currency[@542]<#0>()), Eq(5, $t20))), And(Not(exists[@543]<Diem::PreburnQueue<#0>>($t1)), Eq(5, $t20))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t5)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t5, i)))), $t2), Eq(1, $t20))), And(Not(exists[@544]<DiemAccount::Balance<#0>>($t1)), Eq(7, $t20))), And(Not(DiemAccount::$exists_at[@545]($t1)), Eq(5, $t20))), And(Eq<u64>($t2, 0), Eq(7, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@549, @550, @546]<#0>($t2, VASP::spec_parent_address[@547, @548]($t1)))), Eq(8, $t20))), And(Not(DiemTimestamp::$is_operating[@549]()), Eq(1, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), Not(exists[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), Not(exists[@550]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@549, @550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), $t2), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@549, @550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), $t2), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1))))), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@546, @547, @548]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@550]<#0>(global[@546]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@547, @548]($t1)))), Not(DiemTimestamp::$is_operating[@549]()))), Eq(1, $t20))), And(Not(Diem::spec_is_currency[@542]<#0>()), Eq(5, $t20))), And(AccountFreezing::spec_account_is_frozen[@551]($t1), Eq(1, $t20))), And(Gt(Add(DiemAccount::$balance[@544]<#0>($t1), $t2), MaxU64()), Eq(8, $t20))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:495:5+412
    assert {:msg "assert_failed(11,22154,22566): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#541, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t20)) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($t4) < $t2) && $IsEqual'u8'(8, $t20))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#542) && $IsEqual'u8'(5, $t20))) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#543, $t1) && $IsEqual'u8'(5, $t20))) || ((var $range_0 := $Range(0, LenVec($t5)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t5, i)))), $t2))))) && $IsEqual'u8'(1, $t20))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#544, $t1) && $IsEqual'u8'(7, $t20))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#545, $t1) && $IsEqual'u8'(5, $t20))) || ($IsEqual'u64'($t2, 0) && $IsEqual'u8'(7, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549, $1_AccountLimits_LimitsDefinition'#0'_$memory#550, $1_AccountLimits_Window'#0'_$memory#546, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && $IsEqual'u8'(8, $t20))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549) && $IsEqual'u8'(1, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))))) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549, $1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549, $1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))))) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#550, $ResourceValue($1_AccountLimits_Window'#0'_$memory#546, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#547, $1_VASP_ParentVASP_$memory#548, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#549))) && $IsEqual'u8'(1, $t20))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#542) && $IsEqual'u8'(5, $t20))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#551, $t1) && $IsEqual'u8'(1, $t20))) || ((($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#544, $t1) + $t2) > $MAX_U64) && $IsEqual'u8'(8, $t20)));

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:495:5+412
    $abort_code := $t20;
    $abort_flag := true;
    return;

}

// fun DiemAccount::deposit [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
procedure {:timeLimit 40} $1_DiemAccount_deposit$verify(_$t0: int, _$t1: int, _$t2: $1_Diem_Diem'#0', _$t3: Vec (int), _$t4: Vec (int), _$t5: bool) returns ()
{
    // declare local variables
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t17: $1_DiemAccount_ReceivedPaymentEvent;
    var $t18: $1_FixedPoint32_FixedPoint32;
    var $t19: bool;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: bool;
    var $t31: int;
    var $t32: int;
    var $t33: $1_FixedPoint32_FixedPoint32;
    var $t34: bool;
    var $t35: bool;
    var $t36: bool;
    var $t37: int;
    var $t38: bool;
    var $t39: int;
    var $t40: $1_DiemAccount_AccountOperationsCapability;
    var $t41: $1_AccountLimits_AccountLimitMutationCapability;
    var $t42: bool;
    var $t43: bool;
    var $t44: int;
    var $t45: int;
    var $t46: $Mutation ($1_DiemAccount_Balance'#0');
    var $t47: $Mutation ($1_Diem_Diem'#0');
    var $t48: $1_Diem_Diem'#0';
    var $t49: bool;
    var $t50: $Mutation ($1_DiemAccount_DiemAccount);
    var $t51: $Mutation ($1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent');
    var $t52: Vec (int);
    var $t53: bool;
    var $t54: $1_DiemAccount_ReceivedPaymentEvent;
    var $t0: int;
    var $t1: int;
    var $t2: $1_Diem_Diem'#0';
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $t5: bool;
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $1_DiemAccount_Balance'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_Balance'#0'_$memory#475: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#476: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'#0'_$memory#477: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#478: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#479: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#481: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#482: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_AccountFreezing_FreezingBit_$memory#483: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DualAttestation_Limit_$memory#484: $Memory $1_DualAttestation_Limit;
    var $1_DualAttestation_Credential_$memory#485: $Memory $1_DualAttestation_Credential;
    var $1_AccountLimits_Window'#0'_$memory#486: $Memory $1_AccountLimits_Window'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    assume IsEmptyVec(p#$Mutation($t46));
    assume IsEmptyVec(p#$Mutation($t47));
    assume IsEmptyVec(p#$Mutation($t50));
    assume IsEmptyVec(p#$Mutation($t51));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,12571,14795)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:234:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume $IsValid'$1_Diem_Diem'#0''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume $IsValid'vec'u8''($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume $IsValid'bool'($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+2224
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t15, select Diem::Diem.value($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:358:9+30
    assume {:print "$at(11,15804,15834)"} true;
    assume ($t15 == $value#$1_Diem_Diem'#0'($t2));

    // assume Identical($t16, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:408:9+56
    assume {:print "$at(11,17877,17933)"} true;
    assume ($t16 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t17, pack DiemAccount::ReceivedPaymentEvent($t15, Diem::spec_currency_code<#0>(), $t0, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:409:9+165
    assume {:print "$at(11,17942,18107)"} true;
    assume ($t17 == $1_DiemAccount_ReceivedPaymentEvent($t15, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t0, $t3));

    // assume Identical($t18, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1377:9+59
    assume {:print "$at(10,65833,65892)"} true;
    assume ($t18 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume CanModify<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:344:9+39
    assume {:print "$at(11,14846,14885)"} true;
    assume $1_DiemAccount_Balance'#0'_$modifies[$t1];

    // assume CanModify<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:345:9+36
    assume {:print "$at(11,14894,14930)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t1];

    // assume CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:346:9+80
    assume {:print "$at(11,14939,15019)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)];

    // @480 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:346:9+80
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @482 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:346:9+80
    $1_Diem_CurrencyInfo'#0'_$memory#482 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @481 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:346:9+80
    $1_AccountLimits_LimitsDefinition'#0'_$memory#481 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @477 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:346:9+80
    $1_AccountLimits_Window'#0'_$memory#477 := $1_AccountLimits_Window'#0'_$memory;

    // @478 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:346:9+80
    $1_VASP_ChildVASP_$memory#478 := $1_VASP_ChildVASP_$memory;

    // @479 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:346:9+80
    $1_VASP_ParentVASP_$memory#479 := $1_VASP_ParentVASP_$memory;

    // @485 := save_mem(DualAttestation::Credential) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:346:9+80
    $1_DualAttestation_Credential_$memory#485 := $1_DualAttestation_Credential_$memory;

    // @484 := save_mem(DualAttestation::Limit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:346:9+80
    $1_DualAttestation_Limit_$memory#484 := $1_DualAttestation_Limit_$memory;

    // @483 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:346:9+80
    $1_AccountFreezing_FreezingBit_$memory#483 := $1_AccountFreezing_FreezingBit_$memory;

    // @476 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:346:9+80
    $1_DiemAccount_DiemAccount_$memory#476 := $1_DiemAccount_DiemAccount_$memory;

    // @475 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:346:9+80
    $1_DiemAccount_Balance'#0'_$memory#475 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[payer]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+1
    assume {:print "$at(11,12571,12572)"} true;
    assume {:print "$track_local(29,18,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+1
    assume {:print "$track_local(29,18,1):", $t1} $t1 == $t1;

    // trace_local[to_deposit]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+1
    assume {:print "$track_local(29,18,2):", $t2} $t2 == $t2;

    // trace_local[metadata]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+1
    assume {:print "$track_local(29,18,3):", $t3} $t3 == $t3;

    // trace_local[metadata_signature]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+1
    assume {:print "$track_local(29,18,4):", $t4} $t4 == $t4;

    // trace_local[dual_attestation]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:286:5+1
    assume {:print "$track_local(29,18,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:294:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(11,12856,12889)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:294:9+33

    // assume Identical($t19, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:294:9+33
    assume ($t19 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t19) goto L16 else goto L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:294:9+33
    if ($t19) { goto L16; } else { goto L15; }

    // label L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:294:9+33
L16:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t20)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:294:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:294:9+33
    assume {:print "$at(11,12856,12889)"} true;
    assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:294:9+33
    goto L14;

    // label L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:294:9+33
L15:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:294:9+33

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:295:9+41
    // >> opaque call: AccountFreezing::assert_not_frozen($t1)
    assume {:print "$at(11,12899,12940)"} true;

    // opaque begin: AccountFreezing::assert_not_frozen($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:295:9+41

    // assume Identical($t21, AccountFreezing::spec_account_is_frozen($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:295:9+41
    assume ($t21 == $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1));

    // if ($t21) goto L18 else goto L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:295:9+41
    if ($t21) { goto L18; } else { goto L17; }

    // label L18 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:295:9+41
L18:

    // assume And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t20)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:295:9+41
    assume ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'u8'(1, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:295:9+41
    assume {:print "$at(11,12899,12940)"} true;
    assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:295:9+41
    goto L14;

    // label L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:295:9+41
L17:

    // opaque end: AccountFreezing::assert_not_frozen($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:295:9+41

    // $t22 := Diem::value<#0>($t2) on_abort goto L14 with $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:298:29+24
    assume {:print "$at(11,13027,13051)"} true;
    call $t22 := $1_Diem_value'#0'($t2);
    if ($abort_flag) {
        assume {:print "$at(11,13027,13051)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;
        goto L14;
    }

    // trace_local[deposit_value]($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:298:13+13
    assume {:print "$track_local(29,18,6):", $t22} $t22 == $t22;

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:32+1
    assume {:print "$at(11,13084,13085)"} true;
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := >($t22, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:30+1
    call $t24 := $Gt($t22, $t23);

    // $t25 := 2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:60+21
    $t25 := 2;
    assume $IsValid'u64'($t25);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:35+47
    // >> opaque call: $t19 := Errors::invalid_argument($t18)

    // $t26 := opaque begin: Errors::invalid_argument($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:35+47

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:35+47
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:35+47
    assume $IsEqual'u64'($t26, 7);

    // $t26 := opaque end: Errors::invalid_argument($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:35+47

    // trace_local[tmp#$8]($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:9+74
    assume {:print "$track_local(29,18,8):", $t26} $t26 == $t26;

    // trace_local[tmp#$7]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:9+74
    assume {:print "$track_local(29,18,7):", $t24} $t24 == $t24;

    // if ($t24) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:9+74
    if ($t24) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:9+74
L1:

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:9+74
    assume {:print "$at(11,13061,13135)"} true;
    assume {:print "$track_abort(29,18):", $t26} $t26 == $t26;

    // $t20 := move($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:9+74
    $t20 := $t26;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:299:9+74
    goto L14;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:26+5
    assume {:print "$at(11,13213,13218)"} true;
L0:

    // $t27 := DiemAccount::exists_at($t1) on_abort goto L14 with $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:16+16
    call $t27 := $1_DiemAccount_exists_at($t1);
    if ($abort_flag) {
        assume {:print "$at(11,13203,13219)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;
        goto L14;
    }

    // $t28 := 17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:56+21
    $t28 := 17;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:34+44
    // >> opaque call: $t22 := Errors::not_published($t21)

    // $t29 := opaque begin: Errors::not_published($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:34+44

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:34+44
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:34+44
    assume $IsEqual'u64'($t29, 5);

    // $t29 := opaque end: Errors::not_published($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:34+44

    // trace_local[tmp#$10]($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:9+70
    assume {:print "$track_local(29,18,10):", $t29} $t29 == $t29;

    // trace_local[tmp#$9]($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:9+70
    assume {:print "$track_local(29,18,9):", $t27} $t27 == $t27;

    // if ($t27) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:9+70
    if ($t27) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:9+70
L3:

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:9+70
    assume {:print "$at(11,13196,13266)"} true;
    assume {:print "$track_abort(29,18):", $t29} $t29 == $t29;

    // $t20 := move($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:9+70
    $t20 := $t29;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:301:9+70
    goto L14;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:304:36+5
    assume {:print "$at(11,13380,13385)"} true;
L2:

    // $t30 := exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:304:13+6
    $t30 := $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // $t31 := 18 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:305:38+32
    assume {:print "$at(11,13425,13457)"} true;
    $t31 := 18;
    assume $IsValid'u64'($t31);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:305:13+58
    // >> opaque call: $t25 := Errors::invalid_argument($t24)

    // $t32 := opaque begin: Errors::invalid_argument($t31) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:305:13+58

    // assume WellFormed($t32) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:305:13+58
    assume $IsValid'u64'($t32);

    // assume Eq<u64>($t32, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:305:13+58
    assume $IsEqual'u64'($t32, 7);

    // $t32 := opaque end: Errors::invalid_argument($t31) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:305:13+58

    // trace_local[tmp#$12]($t32) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:303:9+131
    assume {:print "$at(11,13337,13468)"} true;
    assume {:print "$track_local(29,18,12):", $t32} $t32 == $t32;

    // trace_local[tmp#$11]($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:303:9+131
    assume {:print "$track_local(29,18,11):", $t30} $t30 == $t30;

    // if ($t30) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:303:9+131
    if ($t30) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:303:9+131
L5:

    // trace_abort($t32) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:303:9+131
    assume {:print "$at(11,13337,13468)"} true;
    assume {:print "$track_abort(29,18):", $t32} $t32 == $t32;

    // $t20 := move($t32) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:303:9+131
    $t20 := $t32;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:303:9+131
    goto L14;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:308:13+16
    assume {:print "$at(11,13483,13499)"} true;
L4:

    // if ($t5) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:308:9+257
    if ($t5) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:308:9+257
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:308:9+257
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:311:17+5
    assume {:print "$at(11,13649,13654)"} true;
L6:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:310:13+135
    // >> opaque call: DualAttestation::assert_payment_ok<#0>($t0, $t1, $t15, $t3, $t4)
    assume {:print "$at(11,13590,13725)"} true;

    // assume Identical($t33, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1377:9+59
    assume {:print "$at(10,65833,65892)"} true;
    assume ($t33 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // opaque begin: DualAttestation::assert_payment_ok<#0>($t0, $t1, $t22, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:310:13+135
    assume {:print "$at(11,13590,13725)"} true;

    // assume Identical($t34, Or(Or(Or(Or(Or(Or(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published())), And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency<#0>()))), And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64($t22, $t33), 18446744073709551615))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t0, $t1, $t22)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t0, $t1, $t22)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t0, $t1, $t22)), Not(DualAttestation::spec_signature_is_valid($t0, $t1, $t4, $t3, $t22)))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t0, $t1, $t22)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:310:13+135
    assume ($t34 == ((((((($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)) || ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))) || ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t22, $t33) > 18446744073709551615))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t0, $t1, $t22)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t0, $t1, $t22)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t0, $t1, $t22)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t0, $t1, $t4, $t3, $t22))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t0, $t1, $t22)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))));

    // if ($t34) goto L20 else goto L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:310:13+135
    if ($t34) { goto L20; } else { goto L19; }

    // label L20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:310:13+135
L20:

    // assume Or(Or(Or(Or(Or(Or(And(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published())), Eq(5, $t20)), And(And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency<#0>())), Eq(5, $t20))), And(And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64($t22, $t33), 18446744073709551615)), Eq(8, $t20))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t0, $t1, $t22)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))), Eq(1, $t20))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t0, $t1, $t22)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))), Eq(1, $t20))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t0, $t1, $t22)), Not(DualAttestation::spec_signature_is_valid($t0, $t1, $t4, $t3, $t22))), Eq(7, $t20))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t0, $t1, $t22)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))), Eq(5, $t20))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:310:13+135
    assume (((((((($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)) && $IsEqual'u8'(5, $t20)) || (($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'u8'(5, $t20))) || (($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t22, $t33) > 18446744073709551615)) && $IsEqual'u8'(8, $t20))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t0, $t1, $t22)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'u8'(1, $t20))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t0, $t1, $t22)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'u8'(1, $t20))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t0, $t1, $t22)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t0, $t1, $t4, $t3, $t22)) && $IsEqual'u8'(7, $t20))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t0, $t1, $t22)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'u8'(5, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:310:13+135
    assume {:print "$at(11,13590,13725)"} true;
    assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:310:13+135
    goto L14;

    // label L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:310:13+135
L19:

    // opaque end: DualAttestation::assert_payment_ok<#0>($t0, $t1, $t22, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:310:13+135

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:317:52+5
    assume {:print "$at(11,13891,13896)"} true;
L8:

    // $t35 := false at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:317:66+5
    $t35 := false;
    assume $IsValid'bool'($t35);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:317:13+59
    // >> opaque call: $t27 := DiemAccount::should_track_limits_for_account<#0>($t0, $t1, $t26)

    // $t36 := opaque begin: DiemAccount::should_track_limits_for_account<#0>($t0, $t1, $t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:317:13+59

    // assume WellFormed($t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:317:13+59
    assume $IsValid'bool'($t36);

    // assume Eq<bool>($t36, DiemAccount::spec_should_track_limits_for_account<#0>($t0, $t1, $t35)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:317:13+59
    assume $IsEqual'bool'($t36, $1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t0, $t1, $t35));

    // $t36 := opaque end: DiemAccount::should_track_limits_for_account<#0>($t0, $t1, $t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:317:13+59

    // if ($t36) goto L9 else goto L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:317:9+449
    if ($t36) { goto L9; } else { goto L10; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:317:9+449
L10:

    // goto L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:317:9+449
    goto L11;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:320:21+13
    assume {:print "$at(11,14016,14029)"} true;
L9:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:321:21+27
    // >> opaque call: $t28 := VASP::parent_address($t1)
    assume {:print "$at(11,14051,14078)"} true;

    // $t37 := opaque begin: VASP::parent_address($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:321:21+27

    // assume Identical($t38, And(Not(VASP::$is_parent($t1)), Not(VASP::$is_child($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:321:21+27
    assume ($t38 == (!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t1) && !$1_VASP_$is_child($1_VASP_ChildVASP_$memory, $t1)));

    // if ($t38) goto L22 else goto L21 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:321:21+27
    if ($t38) { goto L22; } else { goto L21; }

    // label L22 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:321:21+27
L22:

    // assume And(And(Not(VASP::$is_parent($t1)), Not(VASP::$is_child($t1))), Eq(7, $t20)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:321:21+27
    assume ((!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t1) && !$1_VASP_$is_child($1_VASP_ChildVASP_$memory, $t1)) && $IsEqual'u8'(7, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:321:21+27
    assume {:print "$at(11,14051,14078)"} true;
    assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:321:21+27
    goto L14;

    // label L21 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:321:21+27
L21:

    // assume WellFormed($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:321:21+27
    assume $IsValid'address'($t37);

    // assume Eq<address>($t37, VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:321:21+27
    assume $IsEqual'address'($t37, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));

    // $t37 := opaque end: VASP::parent_address($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:321:21+27

    // $t39 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L14 with $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:322:65+34
    assume {:print "$at(11,14144,14178)"} true;
    call $t39 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,14144,14178)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;
        goto L14;
    }

    // $t40 := get_global<DiemAccount::AccountOperationsCapability>($t39) on_abort goto L14 with $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:322:22+13
    if (!$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t39)) {
        call $ExecFailureAbort();
    } else {
        $t40 := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $t39);
    }
    if ($abort_flag) {
        assume {:print "$at(11,14101,14114)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;
        goto L14;
    }

    // $t41 := get_field<DiemAccount::AccountOperationsCapability>.limits_cap($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:322:21+90
    $t41 := $limits_cap#$1_DiemAccount_AccountOperationsCapability($t40);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
    // >> opaque call: $t32 := AccountLimits::update_deposit_limits<#0>($t15, $t28, $t31)
    assume {:print "$at(11,13951,14208)"} true;

    // assert CanModify<AccountLimits::Window<#0>>($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
    assert {:msg "assert_failed(11,13951,14208): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$t37];

    // $t42 := opaque begin: AccountLimits::update_deposit_limits<#0>($t22, $t37, $t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257

    // assume Identical($t43, Or(Or(Or(Or(Or(Not(exists<AccountLimits::Window<#0>>($t37)), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>($t37))))), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t37))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>($t37))), $t22), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t37))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>($t37))), $t22), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t37))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>($t37)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>($t37)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t37))), Not(DiemTimestamp::$is_operating())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
    assume ($t43 == (((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t37) || !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37))) + $t22) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37))) + $t22) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t43) goto L24 else goto L23 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
    if ($t43) { goto L24; } else { goto L23; }

    // label L24 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
L24:

    // assume Or(Or(Or(Or(Or(And(Not(exists<AccountLimits::Window<#0>>($t37)), Eq(5, $t20)), And(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>($t37)))), Eq(5, $t20))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t37))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>($t37))), $t22), MaxU64())), Eq(8, $t20))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t37))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>($t37))), $t22), MaxU64())), Eq(8, $t20))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t37))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>($t37)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>($t37)))), MaxU64())), Eq(8, $t20))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t37))), Not(DiemTimestamp::$is_operating())), Eq(1, $t20))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
    assume ((((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t37) && $IsEqual'u8'(5, $t20)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37))) && $IsEqual'u8'(5, $t20))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37))) + $t22) > $MAX_U64)) && $IsEqual'u8'(8, $t20))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37))) + $t22) > $MAX_U64)) && $IsEqual'u8'(8, $t20))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)))) > $MAX_U64)) && $IsEqual'u8'(8, $t20))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'u8'(1, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
    assume {:print "$at(11,13951,14208)"} true;
    assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
    goto L14;

    // label L23 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
L23:

    // @486 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
    $1_AccountLimits_Window'#0'_$memory#486 := $1_AccountLimits_Window'#0'_$memory;

    // modifies global<AccountLimits::Window<#0>>($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $t37, $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $t37);
    }

    // assume WellFormed($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
    assume $IsValid'bool'($t42);

    // assume Eq<bool>($t42, AccountLimits::spec_receiving_limits_ok<#0>(global[@486]<AccountLimits::Window<#0>>($t37), $t22)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
    assume $IsEqual'bool'($t42, $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#486, $t37), $t22));

    // assume (if And($t42, Not(AccountLimits::spec_window_unrestricted<#0>(global[@486]<AccountLimits::Window<#0>>($t37)))) {Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t37), AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>(global[@486]<AccountLimits::Window<#0>>($t37)), $t22))} else {Or(Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t37), AccountLimits::spec_window_reset<#0>(global[@486]<AccountLimits::Window<#0>>($t37))), Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t37), global[@486]<AccountLimits::Window<#0>>($t37)))}) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257
    assume if (($t42 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#486, $t37)))) then ($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37), $1_AccountLimits_spec_update_inflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#486, $t37)), $t22))) else (($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#486, $t37))) || $IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t37), $ResourceValue($1_AccountLimits_Window'#0'_$memory#486, $t37))));

    // $t42 := opaque end: AccountLimits::update_deposit_limits<#0>($t22, $t37, $t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:319:17+257

    // $t44 := 3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:324:40+23
    assume {:print "$at(11,14249,14272)"} true;
    $t44 := 3;
    assume $IsValid'u64'($t44);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:324:17+47
    // >> opaque call: $t34 := Errors::limit_exceeded($t33)

    // $t45 := opaque begin: Errors::limit_exceeded($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:324:17+47

    // assume WellFormed($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:324:17+47
    assume $IsValid'u64'($t45);

    // assume Eq<u64>($t45, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:324:17+47
    assume $IsEqual'u64'($t45, 8);

    // $t45 := opaque end: Errors::limit_exceeded($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:324:17+47

    // trace_local[tmp#$14]($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:318:13+360
    assume {:print "$at(11,13927,14287)"} true;
    assume {:print "$track_local(29,18,14):", $t45} $t45 == $t45;

    // trace_local[tmp#$13]($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:318:13+360
    assume {:print "$track_local(29,18,13):", $t42} $t42 == $t42;

    // if ($t42) goto L11 else goto L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:318:13+360
    if ($t42) { goto L11; } else { goto L12; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:318:13+360
L12:

    // trace_abort($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:318:13+360
    assume {:print "$at(11,13927,14287)"} true;
    assume {:print "$track_abort(29,18):", $t45} $t45 == $t45;

    // $t20 := move($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:318:13+360
    $t20 := $t45;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:318:13+360
    goto L14;

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:62+5
    assume {:print "$at(11,14402,14407)"} true;
L11:

    // assert CanModify<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:28+17
    assert {:msg "assert_failed(11,14368,14385): caller does not have permission to modify `DiemAccount::Balance<#0>` at given address"}
      $1_DiemAccount_Balance'#0'_$modifies[$t1];

    // $t46 := borrow_global<DiemAccount::Balance<#0>>($t1) on_abort goto L14 with $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:28+17
    if (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t46 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(11,14368,14385)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;
        goto L14;
    }

    // $t47 := borrow_field<DiemAccount::Balance<#0>>.coin($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:23+50
    $t47 := $ChildMutation($t46, 0, $coin#$1_DiemAccount_Balance'#0'($Dereference($t46)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
    // >> opaque call: Diem::deposit<#0>($t36, $t2)

    // opaque begin: Diem::deposit<#0>($t47, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77

    // $t48 := read_ref($t47) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
    $t48 := $Dereference($t47);

    // assume Identical($t49, Gt(Add(select Diem::Diem.value($t47), select Diem::Diem.value($t2)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
    assume ($t49 == (($value#$1_Diem_Diem'#0'($Dereference($t47)) + $value#$1_Diem_Diem'#0'($t2)) > 18446744073709551615));

    // if ($t49) goto L29 else goto L25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
    if ($t49) { goto L29; } else { goto L25; }

    // label L26 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
L26:

    // assume And(Gt(Add(select Diem::Diem.value($t47), select Diem::Diem.value($t2)), 18446744073709551615), Eq(8, $t20)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
    assume ((($value#$1_Diem_Diem'#0'($Dereference($t47)) + $value#$1_Diem_Diem'#0'($t2)) > 18446744073709551615) && $IsEqual'u8'(8, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
    assume {:print "$at(11,14349,14426)"} true;
    assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
    goto L14;

    // label L25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
L25:

    // havoc[mut]($t47) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t47 := $UpdateMutation($t47, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t47));

    // assume WellFormed($t47) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t47));

    // assume Eq<u64>(select Diem::Diem.value($t47), Add(select Diem::Diem.value($t48), select Diem::Diem.value($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t47)), ($value#$1_Diem_Diem'#0'($t48) + $value#$1_Diem_Diem'#0'($t2)));

    // opaque end: Diem::deposit<#0>($t47, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77

    // write_back[Reference($t46).coin]($t47) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
    $t46 := $UpdateMutation($t46, $Update'$1_DiemAccount_Balance'#0''_coin($Dereference($t46), $Dereference($t47)));

    // write_back[DiemAccount::Balance<#0>@]($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:329:9+77
    $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $GlobalLocationAddress($t46),
        $Dereference($t46));

    // assert CanModify<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:333:18+17
    assume {:print "$at(11,14527,14544)"} true;
    assert {:msg "assert_failed(11,14527,14544): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t1];

    // $t50 := borrow_global<DiemAccount::DiemAccount>($t1) on_abort goto L14 with $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:333:18+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t50 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(11,14527,14544)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;
        goto L14;
    }

    // $t51 := borrow_field<DiemAccount::DiemAccount>.received_events($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:333:13+58
    $t51 := $ChildMutation($t50, 3, $received_events#$1_DiemAccount_DiemAccount($Dereference($t50)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:336:32+28
    // >> opaque call: $t39 := Diem::currency_code<#0>()
    assume {:print "$at(11,14687,14715)"} true;

    // $t52 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:336:32+28

    // assume Identical($t53, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:336:32+28
    assume ($t53 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t53) goto L30 else goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:336:32+28
    if ($t53) { goto L30; } else { goto L27; }

    // label L28 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:336:32+28
L28:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:336:32+28
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:336:32+28
    assume {:print "$at(11,14687,14715)"} true;
    assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:336:32+28
    goto L14;

    // label L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:336:32+28
L27:

    // assume WellFormed($t52) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:336:32+28
    assume $IsValid'vec'u8''($t52);

    // assume Eq<vector<u8>>($t52, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:336:32+28
    assume $IsEqual'vec'u8''($t52, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t52 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:336:32+28

    // $t54 := pack DiemAccount::ReceivedPaymentEvent($t22, $t52, $t0, $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:334:13+184
    assume {:print "$at(11,14594,14778)"} true;
    $t54 := $1_DiemAccount_ReceivedPaymentEvent($t22, $t52, $t0, $t3);

    // Event::emit_event<DiemAccount::ReceivedPaymentEvent>($t51, $t54) on_abort goto L14 with $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:332:9+319
    assume {:print "$at(11,14469,14788)"} true;
    call $t51 := $1_Event_emit_event'$1_DiemAccount_ReceivedPaymentEvent'($t51, $t54);
    if ($abort_flag) {
        assume {:print "$at(11,14469,14788)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(29,18):", $t20} $t20 == $t20;
        goto L14;
    }

    // assert Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($t50))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assume {:print "$at(44,561,585)"} true;
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t50)))) <= 1);

    // assert Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($t50))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t50)))) <= 1);

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:341:5+1
    assume {:print "$at(11,14794,14795)"} true;
L13:

    // assert Not(Not(exists[@475]<DiemAccount::Balance<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:372:9+71
    assume {:print "$at(11,16433,16504)"} true;
    assert {:msg "assert_failed(11,16433,16504): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#475, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@476]($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:373:9+55
    assume {:print "$at(11,16513,16568)"} true;
    assert {:msg "assert_failed(11,16513,16568): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#476, $t1);

    // assert Not(Eq<u64>($t15, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:386:9+52
    assume {:print "$at(11,16976,17028)"} true;
    assert {:msg "assert_failed(11,16976,17028): function does not abort under this condition"}
      !$IsEqual'u64'($t15, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@480, @481, @477]<#0>($t15, VASP::spec_parent_address[@478, @479]($t1))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:392:9+238
    assume {:print "$at(11,17269,17507)"} true;
    assert {:msg "assert_failed(11,17269,17507): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480, $1_AccountLimits_LimitsDefinition'#0'_$memory#481, $1_AccountLimits_Window'#0'_$memory#477, $t15, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)));

    // assert Not(Not(DiemTimestamp::$is_operating[@480]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), Not(exists[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4079,4148)"} true;
    assert {:msg "assert_failed(5,4079,4148): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), Not(exists[@481]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:360:9+98
    assume {:print "$at(5,16437,16535)"} true;
    assert {:msg "assert_failed(5,16437,16535): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@480, @481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), $t15), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:370:9+102
    assume {:print "$at(5,16932,17034)"} true;
    assert {:msg "assert_failed(5,16932,17034): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480, $1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))) + $t15) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@480, @481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), $t15), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+104
    assume {:print "$at(5,17043,17147)"} true;
    assert {:msg "assert_failed(5,17043,17147): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480, $1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))) + $t15) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:291:9+102
    assume {:print "$at(5,13064,13166)"} true;
    assert {:msg "assert_failed(5,13064,13166): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Not(DiemTimestamp::$is_operating[@480]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480)));

    // assert Not(Not(Diem::spec_is_currency[@482]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#482);

    // assert Not(AccountFreezing::spec_account_is_frozen[@483]($t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:181:9+69
    assume {:print "$at(4,7220,7289)"} true;
    assert {:msg "assert_failed(4,7220,7289): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#483, $t1);

    // assert Not(Gt(Add(DiemAccount::$balance[@475]<#0>($t1), $t15), MaxU64())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:378:9+81
    assume {:print "$at(11,16677,16758)"} true;
    assert {:msg "assert_failed(11,16677,16758): function does not abort under this condition"}
      !(($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#475, $t1) + $t15) > $MAX_U64);

    // assert Not(And($t5, And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@484]())))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:336:9+58
    assume {:print "$at(21,14585,14643)"} true;
    assert {:msg "assert_failed(21,14585,14643): function does not abort under this condition"}
      !($t5 && ($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#484)));

    // assert Not(And($t5, And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@482]<#0>())))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !($t5 && ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#482)));

    // assert Not(And($t5, And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t15, $t18), 18446744073709551615)))) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:77:9+83
    assume {:print "$at(42,3513,3596)"} true;
    assert {:msg "assert_failed(42,3513,3596): function does not abort under this condition"}
      !($t5 && ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t15, $t18) > 18446744073709551615)));

    // assert Not(And($t5, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@482, @478, @479, @484]<#0>($t0, $t1, $t15)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@485](DualAttestation::spec_credential_address[@478, @479]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:419:9+114
    assume {:print "$at(21,18345,18459)"} true;
    assert {:msg "assert_failed(21,18345,18459): function does not abort under this condition"}
      !($t5 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#482, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Limit_$memory#484, $t0, $t1, $t15)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#485, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))));

    // assert Not(And($t5, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@482, @478, @479, @484]<#0>($t0, $t1, $t15)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@485](DualAttestation::spec_credential_address[@478, @479]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:420:9+101
    assume {:print "$at(21,18468,18569)"} true;
    assert {:msg "assert_failed(21,18468,18569): function does not abort under this condition"}
      !($t5 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#482, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Limit_$memory#484, $t0, $t1, $t15)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#485, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))));

    // assert Not(And($t5, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@482, @478, @479, @484]<#0>($t0, $t1, $t15)), Not(DualAttestation::spec_signature_is_valid[@478, @479, @485]($t0, $t1, $t4, $t3, $t15))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:421:9+136
    assume {:print "$at(21,18578,18714)"} true;
    assert {:msg "assert_failed(21,18578,18714): function does not abort under this condition"}
      !($t5 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#482, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Limit_$memory#484, $t0, $t1, $t15)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Credential_$memory#485, $t0, $t1, $t4, $t3, $t15)));

    // assert Not(And($t5, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@482, @478, @479, @484]<#0>($t0, $t1, $t15)), Not(DualAttestation::spec_has_credential[@485](DualAttestation::spec_credential_address[@478, @479]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:153:9+64
    assume {:print "$at(21,6882,6946)"} true;
    assert {:msg "assert_failed(21,6882,6946): function does not abort under this condition"}
      !($t5 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#482, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Limit_$memory#484, $t0, $t1, $t15)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#485, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))));

    // assert exists<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:348:9+35
    assume {:print "$at(11,15129,15164)"} true;
    assert {:msg "assert_failed(11,15129,15164): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:349:9+38
    assume {:print "$at(11,15173,15211)"} true;
    assert {:msg "assert_failed(11,15173,15211): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // assert Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.withdraw_capability(global[@476]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:350:9+122
    assume {:print "$at(11,15220,15342)"} true;
    assert {:msg "assert_failed(11,15220,15342): post-condition does not hold"}
      $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#476, $t1)));

    // assert Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.authentication_key(global[@476]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:352:9+120
    assume {:print "$at(11,15351,15471)"} true;
    assert {:msg "assert_failed(11,15351,15471): post-condition does not hold"}
      $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#476, $t1)));

    // assert Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@476]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:354:9+149
    assume {:print "$at(11,15480,15629)"} true;
    assert {:msg "assert_failed(11,15480,15629): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#476, $t1)));

    // assert Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@476]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:356:9+157
    assume {:print "$at(11,15638,15795)"} true;
    assert {:msg "assert_failed(11,15638,15795): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#476, $t1)));

    // assert Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@475]<#0>($t1), $t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:401:9+69
    assume {:print "$at(11,17656,17725)"} true;
    assert {:msg "assert_failed(11,17656,17725): post-condition does not hold"}
      $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#475, $t1) + $t15));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@476](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@476]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#476, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#476, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@475]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@475]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#475, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#475, addr))))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t17, $t16)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:415:9+20
    assume {:print "$at(11,18116,18136)"} true;
    assert {:msg "assert_failed(11,18116,18136): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t16, $t17); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t17, $t16)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:342:5+1369
    assume {:print "$at(11,14800,16169)"} true;
    assert {:msg "assert_failed(11,14800,16169): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t16, $t17); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:342:5+1369
    return;

    // label L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:341:5+1
    assume {:print "$at(11,14794,14795)"} true;
L14:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@475]<DiemAccount::Balance<#0>>($t1)), Not(DiemAccount::$exists_at[@476]($t1))), Eq<u64>($t15, 0)), And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@480, @481, @477]<#0>($t15, VASP::spec_parent_address[@478, @479]($t1))))), Not(DiemTimestamp::$is_operating[@480]())), And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), Not(exists[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1))))), And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), Not(exists[@481]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1))))))), And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@480, @481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), $t15), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@480, @481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), $t15), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Not(DiemTimestamp::$is_operating[@480]())))), Not(Diem::spec_is_currency[@482]<#0>())), AccountFreezing::spec_account_is_frozen[@483]($t1)), Gt(Add(DiemAccount::$balance[@475]<#0>($t1), $t15), MaxU64())), And($t5, And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@484]())))), And($t5, And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@482]<#0>())))), And($t5, And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t15, $t18), 18446744073709551615)))), And($t5, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@482, @478, @479, @484]<#0>($t0, $t1, $t15)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@485](DualAttestation::spec_credential_address[@478, @479]($t1)))))), And($t5, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@482, @478, @479, @484]<#0>($t0, $t1, $t15)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@485](DualAttestation::spec_credential_address[@478, @479]($t1)))))), And($t5, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@482, @478, @479, @484]<#0>($t0, $t1, $t15)), Not(DualAttestation::spec_signature_is_valid[@478, @479, @485]($t0, $t1, $t4, $t3, $t15))))), And($t5, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@482, @478, @479, @484]<#0>($t0, $t1, $t15)), Not(DualAttestation::spec_has_credential[@485](DualAttestation::spec_credential_address[@478, @479]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:342:5+1369
    assume {:print "$at(11,14800,16169)"} true;
    assert {:msg "assert_failed(11,14800,16169): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#475, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#476, $t1)) || $IsEqual'u64'($t15, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480, $1_AccountLimits_LimitsDefinition'#0'_$memory#481, $1_AccountLimits_Window'#0'_$memory#477, $t15, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480, $1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))) + $t15) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480, $1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))) + $t15) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#482)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#483, $t1)) || (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#475, $t1) + $t15) > $MAX_U64)) || ($t5 && ($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#484)))) || ($t5 && ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#482)))) || ($t5 && ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t15, $t18) > 18446744073709551615)))) || ($t5 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#482, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Limit_$memory#484, $t0, $t1, $t15)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#485, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))))) || ($t5 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#482, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Limit_$memory#484, $t0, $t1, $t15)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#485, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))))) || ($t5 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#482, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Limit_$memory#484, $t0, $t1, $t15)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Credential_$memory#485, $t0, $t1, $t4, $t3, $t15)))) || ($t5 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#482, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Limit_$memory#484, $t0, $t1, $t15)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#485, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@475]<DiemAccount::Balance<#0>>($t1)), Eq(7, $t20)), And(Not(DiemAccount::$exists_at[@476]($t1)), Eq(5, $t20))), And(Eq<u64>($t15, 0), Eq(7, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@480, @481, @477]<#0>($t15, VASP::spec_parent_address[@478, @479]($t1)))), Eq(8, $t20))), And(Not(DiemTimestamp::$is_operating[@480]()), Eq(1, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), Not(exists[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), Not(exists[@481]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@480, @481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), $t15), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@480, @481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), $t15), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1))))), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@477, @478, @479]<#0>($t0, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@481]<#0>(global[@477]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@478, @479]($t1)))), Not(DiemTimestamp::$is_operating[@480]()))), Eq(1, $t20))), And(Not(Diem::spec_is_currency[@482]<#0>()), Eq(5, $t20))), And(AccountFreezing::spec_account_is_frozen[@483]($t1), Eq(1, $t20))), And(Gt(Add(DiemAccount::$balance[@475]<#0>($t1), $t15), MaxU64()), Eq(8, $t20))), And(And($t5, And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@484]()))), Eq(5, $t20))), And(And($t5, And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@482]<#0>()))), Eq(5, $t20))), And(And($t5, And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t15, $t18), 18446744073709551615))), Eq(8, $t20))), And(And($t5, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@482, @478, @479, @484]<#0>($t0, $t1, $t15)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@485](DualAttestation::spec_credential_address[@478, @479]($t1))))), Eq(1, $t20))), And(And($t5, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@482, @478, @479, @484]<#0>($t0, $t1, $t15)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@485](DualAttestation::spec_credential_address[@478, @479]($t1))))), Eq(1, $t20))), And(And($t5, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@482, @478, @479, @484]<#0>($t0, $t1, $t15)), Not(DualAttestation::spec_signature_is_valid[@478, @479, @485]($t0, $t1, $t4, $t3, $t15)))), Eq(7, $t20))), And(And($t5, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@482, @478, @479, @484]<#0>($t0, $t1, $t15)), Not(DualAttestation::spec_has_credential[@485](DualAttestation::spec_credential_address[@478, @479]($t1))))), Eq(5, $t20))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:342:5+1369
    assert {:msg "assert_failed(11,14800,16169): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#475, $t1) && $IsEqual'u8'(7, $t20)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#476, $t1) && $IsEqual'u8'(5, $t20))) || ($IsEqual'u64'($t15, 0) && $IsEqual'u8'(7, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480, $1_AccountLimits_LimitsDefinition'#0'_$memory#481, $1_AccountLimits_Window'#0'_$memory#477, $t15, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && $IsEqual'u8'(8, $t20))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480) && $IsEqual'u8'(1, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))))) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480, $1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))) + $t15) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480, $1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))) + $t15) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))))) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t0, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#481, $ResourceValue($1_AccountLimits_Window'#0'_$memory#477, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#480))) && $IsEqual'u8'(1, $t20))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#482) && $IsEqual'u8'(5, $t20))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#483, $t1) && $IsEqual'u8'(1, $t20))) || ((($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#475, $t1) + $t15) > $MAX_U64) && $IsEqual'u8'(8, $t20))) || (($t5 && ($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#484))) && $IsEqual'u8'(5, $t20))) || (($t5 && ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#482))) && $IsEqual'u8'(5, $t20))) || (($t5 && ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t15, $t18) > 18446744073709551615))) && $IsEqual'u8'(8, $t20))) || (($t5 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#482, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Limit_$memory#484, $t0, $t1, $t15)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#485, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))))) && $IsEqual'u8'(1, $t20))) || (($t5 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#482, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Limit_$memory#484, $t0, $t1, $t15)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#485, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1))))) && $IsEqual'u8'(1, $t20))) || (($t5 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#482, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Limit_$memory#484, $t0, $t1, $t15)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Credential_$memory#485, $t0, $t1, $t4, $t3, $t15))) && $IsEqual'u8'(7, $t20))) || (($t5 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#482, $1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $1_DualAttestation_Limit_$memory#484, $t0, $t1, $t15)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#485, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#478, $1_VASP_ParentVASP_$memory#479, $t1)))) && $IsEqual'u8'(5, $t20)));

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:342:5+1369
    $abort_code := $t20;
    $abort_flag := true;
    return;

    // label L29 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L29:

    // destroy($t46) at <internal>:1:1+10

    // goto L26 at <internal>:1:1+10
    goto L26;

    // label L30 at <internal>:1:1+10
L30:

    // destroy($t50) at <internal>:1:1+10

    // destroy($t51) at <internal>:1:1+10

    // goto L28 at <internal>:1:1+10
    goto L28;

}

// fun DiemAccount::balance<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1492:5+232
procedure {:inline 1} $1_DiemAccount_balance'$1_XUS_XUS'(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_DiemAccount_Balance'$1_XUS_XUS';
    var $t8: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1492:5+1
    assume {:print "$at(11,69314,69315)"} true;
    assume {:print "$track_local(29,4,0):", $t0} $t0 == $t0;

    // $t3 := exists<DiemAccount::Balance<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:16+6
    assume {:print "$at(11,69401,69407)"} true;
    $t3 := $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t0);

    // $t4 := 19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:68+27
    $t4 := 19;
    assume $IsValid'u64'($t4);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50
    // >> opaque call: $t5 := Errors::not_published($t4)

    // $t5 := opaque begin: Errors::not_published($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50
    assume $IsEqual'u64'($t5, 5);

    // $t5 := opaque end: Errors::not_published($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50

    // trace_local[tmp#$2]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    assume {:print "$track_local(29,4,2):", $t5} $t5 == $t5;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    assume {:print "$track_local(29,4,1):", $t3} $t3 == $t3;

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
L1:

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    assume {:print "$at(11,69394,69482)"} true;
    assume {:print "$track_abort(29,4):", $t5} $t5 == $t5;

    // $t6 := move($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    $t6 := $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1494:51+4
    assume {:print "$at(11,69534,69538)"} true;
L0:

    // $t7 := get_global<DiemAccount::Balance<#0>>($t0) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1494:21+13
    if (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(11,69504,69517)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,4):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t8 := DiemAccount::balance_for<#0>($t7) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1494:9+48
    call $t8 := $1_DiemAccount_balance_for'$1_XUS_XUS'($t7);
    if ($abort_flag) {
        assume {:print "$at(11,69492,69540)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,4):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_return[0]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1494:9+48
    assume {:print "$track_return(29,4,0):", $t8} $t8 == $t8;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1495:5+1
    assume {:print "$at(11,69545,69546)"} true;
L2:

    // return $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1495:5+1
    $ret0 := $t8;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1495:5+1
L3:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1495:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun DiemAccount::balance<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1492:5+232
procedure {:inline 1} $1_DiemAccount_balance'#0'(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_DiemAccount_Balance'#0';
    var $t8: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1492:5+1
    assume {:print "$at(11,69314,69315)"} true;
    assume {:print "$track_local(29,4,0):", $t0} $t0 == $t0;

    // $t3 := exists<DiemAccount::Balance<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:16+6
    assume {:print "$at(11,69401,69407)"} true;
    $t3 := $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t0);

    // $t4 := 19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:68+27
    $t4 := 19;
    assume $IsValid'u64'($t4);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50
    // >> opaque call: $t5 := Errors::not_published($t4)

    // $t5 := opaque begin: Errors::not_published($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50
    assume $IsEqual'u64'($t5, 5);

    // $t5 := opaque end: Errors::not_published($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50

    // trace_local[tmp#$2]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    assume {:print "$track_local(29,4,2):", $t5} $t5 == $t5;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    assume {:print "$track_local(29,4,1):", $t3} $t3 == $t3;

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
L1:

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    assume {:print "$at(11,69394,69482)"} true;
    assume {:print "$track_abort(29,4):", $t5} $t5 == $t5;

    // $t6 := move($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    $t6 := $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1494:51+4
    assume {:print "$at(11,69534,69538)"} true;
L0:

    // $t7 := get_global<DiemAccount::Balance<#0>>($t0) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1494:21+13
    if (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(11,69504,69517)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,4):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t8 := DiemAccount::balance_for<#0>($t7) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1494:9+48
    call $t8 := $1_DiemAccount_balance_for'#0'($t7);
    if ($abort_flag) {
        assume {:print "$at(11,69492,69540)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,4):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_return[0]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1494:9+48
    assume {:print "$track_return(29,4,0):", $t8} $t8 == $t8;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1495:5+1
    assume {:print "$at(11,69545,69546)"} true;
L2:

    // return $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1495:5+1
    $ret0 := $t8;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1495:5+1
L3:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1495:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun DiemAccount::balance [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1492:5+232
procedure {:timeLimit 40} $1_DiemAccount_balance$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_DiemAccount_Balance'#0';
    var $t8: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemAccount_Balance'#0'_$memory#111: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#112: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1492:5+232
    assume {:print "$at(11,69314,69546)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1492:5+232
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // @112 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1492:5+1
    $1_DiemAccount_DiemAccount_$memory#112 := $1_DiemAccount_DiemAccount_$memory;

    // @111 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1492:5+1
    $1_DiemAccount_Balance'#0'_$memory#111 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1492:5+1
    assume {:print "$track_local(29,4,0):", $t0} $t0 == $t0;

    // $t3 := exists<DiemAccount::Balance<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:16+6
    assume {:print "$at(11,69401,69407)"} true;
    $t3 := $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t0);

    // $t4 := 19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:68+27
    $t4 := 19;
    assume $IsValid'u64'($t4);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50
    // >> opaque call: $t5 := Errors::not_published($t4)

    // $t5 := opaque begin: Errors::not_published($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50
    assume $IsEqual'u64'($t5, 5);

    // $t5 := opaque end: Errors::not_published($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:46+50

    // trace_local[tmp#$2]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    assume {:print "$track_local(29,4,2):", $t5} $t5 == $t5;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    assume {:print "$track_local(29,4,1):", $t3} $t3 == $t3;

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
L1:

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    assume {:print "$at(11,69394,69482)"} true;
    assume {:print "$track_abort(29,4):", $t5} $t5 == $t5;

    // $t6 := move($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    $t6 := $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1493:9+88
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1494:51+4
    assume {:print "$at(11,69534,69538)"} true;
L0:

    // $t7 := get_global<DiemAccount::Balance<#0>>($t0) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1494:21+13
    if (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(11,69504,69517)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,4):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t8 := DiemAccount::balance_for<#0>($t7) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1494:9+48
    call $t8 := $1_DiemAccount_balance_for'#0'($t7);
    if ($abort_flag) {
        assume {:print "$at(11,69492,69540)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,4):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_return[0]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1494:9+48
    assume {:print "$track_return(29,4,0):", $t8} $t8 == $t8;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1495:5+1
    assume {:print "$at(11,69545,69546)"} true;
L2:

    // assert Not(Not(exists[@111]<DiemAccount::Balance<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1497:9+67
    assume {:print "$at(11,69574,69641)"} true;
    assert {:msg "assert_failed(11,69574,69641): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#111, $t0);

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@112](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@112]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#112, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#112, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@111]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@111]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#111, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#111, addr))))));

    // return $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    $ret0 := $t8;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1495:5+1
    assume {:print "$at(11,69545,69546)"} true;
L3:

    // assert Not(exists[@111]<DiemAccount::Balance<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1496:5+96
    assume {:print "$at(11,69551,69647)"} true;
    assert {:msg "assert_failed(11,69551,69647): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#111, $t0);

    // assert And(Not(exists[@111]<DiemAccount::Balance<#0>>($t0)), Eq(5, $t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1496:5+96
    assert {:msg "assert_failed(11,69551,69647): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#111, $t0) && $IsEqual'u8'(5, $t6));

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1496:5+96
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun DiemAccount::add_currency<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
procedure {:inline 1} $1_DiemAccount_add_currency'$1_XUS_XUS'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: $1_Diem_Diem'$1_XUS_XUS';
    var $t22: $1_DiemAccount_Balance'$1_XUS_XUS';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+1
    assume {:print "$at(11,69714,69715)"} true;
    assume {:print "$track_local(29,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27
    // >> opaque call: $t8 := Signer::address_of($t0)
    assume {:print "$at(11,69791,69818)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27

    // trace_local[addr]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:13+4
    assume {:print "$track_local(29,2,1):", $t8} $t8 == $t8;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(11,69894,69927)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33

    // assume Identical($t9, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    assume ($t9 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t9) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    if ($t9) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
L9:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    assume {:print "$at(11,69894,69927)"} true;
    assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
L8:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33

    // $t11 := DiemAccount::exists_at($t8) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:16+15
    assume {:print "$at(11,69944,69959)"} true;
    call $t11 := $1_DiemAccount_exists_at($t8);
    if ($abort_flag) {
        assume {:print "$at(11,69944,69959)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:55+8
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31
    // >> opaque call: $t11 := Errors::not_published($t10)

    // $t13 := opaque begin: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31
    assume $IsEqual'u64'($t13, 5);

    // $t13 := opaque end: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    assume {:print "$track_local(29,2,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    assume {:print "$track_local(29,2,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    assume {:print "$at(11,69937,69993)"} true;
    assume {:print "$track_abort(29,2):", $t13} $t13 == $t13;

    // $t10 := move($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    $t10 := $t13;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1508:37+7
    assume {:print "$at(11,70120,70127)"} true;
L0:

    // $t14 := Roles::can_hold_balance($t0) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1508:13+32
    call $t14 := $1_Roles_can_hold_balance($t0);
    if ($abort_flag) {
        assume {:print "$at(11,70096,70128)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t15 := 4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:38+24
    assume {:print "$at(11,70167,70191)"} true;
    $t15 := 4;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50
    // >> opaque call: $t14 := Errors::invalid_argument($t13)

    // $t16 := opaque begin: Errors::invalid_argument($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50
    assume $IsEqual'u64'($t16, 7);

    // $t16 := opaque end: Errors::invalid_argument($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    assume {:print "$at(11,70076,70202)"} true;
    assume {:print "$track_local(29,2,5):", $t16} $t16 == $t16;

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    assume {:print "$track_local(29,2,4):", $t14} $t14 == $t14;

    // if ($t14) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    if ($t14) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    assume {:print "$at(11,70076,70202)"} true;
    assume {:print "$track_abort(29,2):", $t16} $t16 == $t16;

    // $t10 := move($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    $t10 := $t16;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:40+4
    assume {:print "$at(11,70310,70314)"} true;
L2:

    // $t17 := exists<DiemAccount::Balance<#0>>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:17+6
    $t17 := $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t8);

    // $t18 := !($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:16+1
    call $t18 := $Not($t17);

    // $t19 := 15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:73+22
    $t19 := 15;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49
    // >> opaque call: $t18 := Errors::already_published($t17)

    // $t20 := opaque begin: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49
    assume $IsEqual'u64'($t20, 6);

    // $t20 := opaque end: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49

    // trace_local[tmp#$7]($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    assume {:print "$track_local(29,2,7):", $t20} $t20 == $t20;

    // trace_local[tmp#$6]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    assume {:print "$track_local(29,2,6):", $t18} $t18 == $t18;

    // if ($t18) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    if ($t18) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
L5:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    assume {:print "$at(11,70279,70367)"} true;
    assume {:print "$track_abort(29,2):", $t20} $t20 == $t20;

    // $t10 := move($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    $t10 := $t20;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:17+7
    assume {:print "$at(11,70386,70393)"} true;
L4:

    // $t21 := Diem::zero<#0>() on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:48+19
    call $t21 := $1_Diem_zero'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(11,70417,70436)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t22 := pack DiemAccount::Balance<#0>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:26+43
    $t22 := $1_DiemAccount_Balance'$1_XUS_XUS'($t21);

    // move_to<DiemAccount::Balance<#0>>($t22, $t0) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:9+7
    if ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t0, $t22);
    }
    if ($abort_flag) {
        assume {:print "$at(11,70378,70385)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
    assume {:print "$at(11,70444,70445)"} true;
L6:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
L7:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun DiemAccount::add_currency<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
procedure {:inline 1} $1_DiemAccount_add_currency'$1_XDX_XDX'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: $1_Diem_Diem'$1_XDX_XDX';
    var $t22: $1_DiemAccount_Balance'$1_XDX_XDX';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+1
    assume {:print "$at(11,69714,69715)"} true;
    assume {:print "$track_local(29,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27
    // >> opaque call: $t8 := Signer::address_of($t0)
    assume {:print "$at(11,69791,69818)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27

    // trace_local[addr]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:13+4
    assume {:print "$track_local(29,2,1):", $t8} $t8 == $t8;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(11,69894,69927)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33

    // assume Identical($t9, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    assume ($t9 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t9) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    if ($t9) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
L9:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    assume {:print "$at(11,69894,69927)"} true;
    assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
L8:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33

    // $t11 := DiemAccount::exists_at($t8) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:16+15
    assume {:print "$at(11,69944,69959)"} true;
    call $t11 := $1_DiemAccount_exists_at($t8);
    if ($abort_flag) {
        assume {:print "$at(11,69944,69959)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:55+8
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31
    // >> opaque call: $t11 := Errors::not_published($t10)

    // $t13 := opaque begin: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31
    assume $IsEqual'u64'($t13, 5);

    // $t13 := opaque end: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    assume {:print "$track_local(29,2,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    assume {:print "$track_local(29,2,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    assume {:print "$at(11,69937,69993)"} true;
    assume {:print "$track_abort(29,2):", $t13} $t13 == $t13;

    // $t10 := move($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    $t10 := $t13;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1508:37+7
    assume {:print "$at(11,70120,70127)"} true;
L0:

    // $t14 := Roles::can_hold_balance($t0) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1508:13+32
    call $t14 := $1_Roles_can_hold_balance($t0);
    if ($abort_flag) {
        assume {:print "$at(11,70096,70128)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t15 := 4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:38+24
    assume {:print "$at(11,70167,70191)"} true;
    $t15 := 4;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50
    // >> opaque call: $t14 := Errors::invalid_argument($t13)

    // $t16 := opaque begin: Errors::invalid_argument($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50
    assume $IsEqual'u64'($t16, 7);

    // $t16 := opaque end: Errors::invalid_argument($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    assume {:print "$at(11,70076,70202)"} true;
    assume {:print "$track_local(29,2,5):", $t16} $t16 == $t16;

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    assume {:print "$track_local(29,2,4):", $t14} $t14 == $t14;

    // if ($t14) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    if ($t14) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    assume {:print "$at(11,70076,70202)"} true;
    assume {:print "$track_abort(29,2):", $t16} $t16 == $t16;

    // $t10 := move($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    $t10 := $t16;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:40+4
    assume {:print "$at(11,70310,70314)"} true;
L2:

    // $t17 := exists<DiemAccount::Balance<#0>>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:17+6
    $t17 := $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t8);

    // $t18 := !($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:16+1
    call $t18 := $Not($t17);

    // $t19 := 15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:73+22
    $t19 := 15;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49
    // >> opaque call: $t18 := Errors::already_published($t17)

    // $t20 := opaque begin: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49
    assume $IsEqual'u64'($t20, 6);

    // $t20 := opaque end: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49

    // trace_local[tmp#$7]($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    assume {:print "$track_local(29,2,7):", $t20} $t20 == $t20;

    // trace_local[tmp#$6]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    assume {:print "$track_local(29,2,6):", $t18} $t18 == $t18;

    // if ($t18) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    if ($t18) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
L5:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    assume {:print "$at(11,70279,70367)"} true;
    assume {:print "$track_abort(29,2):", $t20} $t20 == $t20;

    // $t10 := move($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    $t10 := $t20;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:17+7
    assume {:print "$at(11,70386,70393)"} true;
L4:

    // $t21 := Diem::zero<#0>() on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:48+19
    call $t21 := $1_Diem_zero'$1_XDX_XDX'();
    if ($abort_flag) {
        assume {:print "$at(11,70417,70436)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t22 := pack DiemAccount::Balance<#0>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:26+43
    $t22 := $1_DiemAccount_Balance'$1_XDX_XDX'($t21);

    // move_to<DiemAccount::Balance<#0>>($t22, $t0) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:9+7
    if ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t0, $t22);
    }
    if ($abort_flag) {
        assume {:print "$at(11,70378,70385)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
    assume {:print "$at(11,70444,70445)"} true;
L6:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
L7:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun DiemAccount::add_currency<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
procedure {:inline 1} $1_DiemAccount_add_currency'#0'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: $1_Diem_Diem'#0';
    var $t22: $1_DiemAccount_Balance'#0';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+1
    assume {:print "$at(11,69714,69715)"} true;
    assume {:print "$track_local(29,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27
    // >> opaque call: $t8 := Signer::address_of($t0)
    assume {:print "$at(11,69791,69818)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27

    // trace_local[addr]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:13+4
    assume {:print "$track_local(29,2,1):", $t8} $t8 == $t8;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(11,69894,69927)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33

    // assume Identical($t9, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    assume ($t9 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t9) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    if ($t9) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
L9:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    assume {:print "$at(11,69894,69927)"} true;
    assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
L8:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33

    // $t11 := DiemAccount::exists_at($t8) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:16+15
    assume {:print "$at(11,69944,69959)"} true;
    call $t11 := $1_DiemAccount_exists_at($t8);
    if ($abort_flag) {
        assume {:print "$at(11,69944,69959)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:55+8
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31
    // >> opaque call: $t11 := Errors::not_published($t10)

    // $t13 := opaque begin: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31
    assume $IsEqual'u64'($t13, 5);

    // $t13 := opaque end: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    assume {:print "$track_local(29,2,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    assume {:print "$track_local(29,2,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    assume {:print "$at(11,69937,69993)"} true;
    assume {:print "$track_abort(29,2):", $t13} $t13 == $t13;

    // $t10 := move($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    $t10 := $t13;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1508:37+7
    assume {:print "$at(11,70120,70127)"} true;
L0:

    // $t14 := Roles::can_hold_balance($t0) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1508:13+32
    call $t14 := $1_Roles_can_hold_balance($t0);
    if ($abort_flag) {
        assume {:print "$at(11,70096,70128)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t15 := 4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:38+24
    assume {:print "$at(11,70167,70191)"} true;
    $t15 := 4;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50
    // >> opaque call: $t14 := Errors::invalid_argument($t13)

    // $t16 := opaque begin: Errors::invalid_argument($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50
    assume $IsEqual'u64'($t16, 7);

    // $t16 := opaque end: Errors::invalid_argument($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    assume {:print "$at(11,70076,70202)"} true;
    assume {:print "$track_local(29,2,5):", $t16} $t16 == $t16;

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    assume {:print "$track_local(29,2,4):", $t14} $t14 == $t14;

    // if ($t14) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    if ($t14) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    assume {:print "$at(11,70076,70202)"} true;
    assume {:print "$track_abort(29,2):", $t16} $t16 == $t16;

    // $t10 := move($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    $t10 := $t16;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:40+4
    assume {:print "$at(11,70310,70314)"} true;
L2:

    // $t17 := exists<DiemAccount::Balance<#0>>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:17+6
    $t17 := $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t8);

    // $t18 := !($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:16+1
    call $t18 := $Not($t17);

    // $t19 := 15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:73+22
    $t19 := 15;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49
    // >> opaque call: $t18 := Errors::already_published($t17)

    // $t20 := opaque begin: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49
    assume $IsEqual'u64'($t20, 6);

    // $t20 := opaque end: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49

    // trace_local[tmp#$7]($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    assume {:print "$track_local(29,2,7):", $t20} $t20 == $t20;

    // trace_local[tmp#$6]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    assume {:print "$track_local(29,2,6):", $t18} $t18 == $t18;

    // if ($t18) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    if ($t18) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
L5:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    assume {:print "$at(11,70279,70367)"} true;
    assume {:print "$track_abort(29,2):", $t20} $t20 == $t20;

    // $t10 := move($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    $t10 := $t20;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:17+7
    assume {:print "$at(11,70386,70393)"} true;
L4:

    // $t21 := Diem::zero<#0>() on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:48+19
    call $t21 := $1_Diem_zero'#0'();
    if ($abort_flag) {
        assume {:print "$at(11,70417,70436)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t22 := pack DiemAccount::Balance<#0>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:26+43
    $t22 := $1_DiemAccount_Balance'#0'($t21);

    // move_to<DiemAccount::Balance<#0>>($t22, $t0) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:9+7
    if ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t0, $t22);
    }
    if ($abort_flag) {
        assume {:print "$at(11,70378,70385)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
    assume {:print "$at(11,70444,70445)"} true;
L6:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
L7:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun DiemAccount::add_currency [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
procedure {:timeLimit 40} $1_DiemAccount_add_currency$verify(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: $1_Diem_Diem'#0';
    var $t22: $1_DiemAccount_Balance'#0';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#260: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#261: $Memory $1_DiemAccount_Balance'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#262: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Roles_RoleId_$memory#263: $Memory $1_Roles_RoleId;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(11,69714,70445)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+731
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // @263 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+1
    $1_Roles_RoleId_$memory#263 := $1_Roles_RoleId_$memory;

    // @262 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#262 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @260 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+1
    $1_DiemAccount_DiemAccount_$memory#260 := $1_DiemAccount_DiemAccount_$memory;

    // @261 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+1
    $1_DiemAccount_Balance'#0'_$memory#261 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1501:5+1
    assume {:print "$track_local(29,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27
    // >> opaque call: $t8 := Signer::address_of($t0)
    assume {:print "$at(11,69791,69818)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:20+27

    // trace_local[addr]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1502:13+4
    assume {:print "$track_local(29,2,1):", $t8} $t8 == $t8;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(11,69894,69927)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33

    // assume Identical($t9, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    assume ($t9 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t9) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    if ($t9) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
L9:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    assume {:print "$at(11,69894,69927)"} true;
    assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33
L8:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1504:9+33

    // $t11 := DiemAccount::exists_at($t8) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:16+15
    assume {:print "$at(11,69944,69959)"} true;
    call $t11 := $1_DiemAccount_exists_at($t8);
    if ($abort_flag) {
        assume {:print "$at(11,69944,69959)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:55+8
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31
    // >> opaque call: $t11 := Errors::not_published($t10)

    // $t13 := opaque begin: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31
    assume $IsEqual'u64'($t13, 5);

    // $t13 := opaque end: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:33+31

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    assume {:print "$track_local(29,2,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    assume {:print "$track_local(29,2,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    assume {:print "$at(11,69937,69993)"} true;
    assume {:print "$track_abort(29,2):", $t13} $t13 == $t13;

    // $t10 := move($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    $t10 := $t13;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1505:9+56
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1508:37+7
    assume {:print "$at(11,70120,70127)"} true;
L0:

    // $t14 := Roles::can_hold_balance($t0) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1508:13+32
    call $t14 := $1_Roles_can_hold_balance($t0);
    if ($abort_flag) {
        assume {:print "$at(11,70096,70128)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t15 := 4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:38+24
    assume {:print "$at(11,70167,70191)"} true;
    $t15 := 4;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50
    // >> opaque call: $t14 := Errors::invalid_argument($t13)

    // $t16 := opaque begin: Errors::invalid_argument($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50
    assume $IsEqual'u64'($t16, 7);

    // $t16 := opaque end: Errors::invalid_argument($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1509:13+50

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    assume {:print "$at(11,70076,70202)"} true;
    assume {:print "$track_local(29,2,5):", $t16} $t16 == $t16;

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    assume {:print "$track_local(29,2,4):", $t14} $t14 == $t14;

    // if ($t14) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    if ($t14) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    assume {:print "$at(11,70076,70202)"} true;
    assume {:print "$track_abort(29,2):", $t16} $t16 == $t16;

    // $t10 := move($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    $t10 := $t16;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1507:9+126
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:40+4
    assume {:print "$at(11,70310,70314)"} true;
L2:

    // $t17 := exists<DiemAccount::Balance<#0>>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:17+6
    $t17 := $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t8);

    // $t18 := !($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:16+1
    call $t18 := $Not($t17);

    // $t19 := 15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:73+22
    $t19 := 15;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49
    // >> opaque call: $t18 := Errors::already_published($t17)

    // $t20 := opaque begin: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49
    assume $IsEqual'u64'($t20, 6);

    // $t20 := opaque end: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:47+49

    // trace_local[tmp#$7]($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    assume {:print "$track_local(29,2,7):", $t20} $t20 == $t20;

    // trace_local[tmp#$6]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    assume {:print "$track_local(29,2,6):", $t18} $t18 == $t18;

    // if ($t18) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    if ($t18) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
L5:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    assume {:print "$at(11,70279,70367)"} true;
    assume {:print "$track_abort(29,2):", $t20} $t20 == $t20;

    // $t10 := move($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    $t10 := $t20;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1512:9+88
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:17+7
    assume {:print "$at(11,70386,70393)"} true;
L4:

    // $t21 := Diem::zero<#0>() on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:48+19
    call $t21 := $1_Diem_zero'#0'();
    if ($abort_flag) {
        assume {:print "$at(11,70417,70436)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t22 := pack DiemAccount::Balance<#0>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:26+43
    $t22 := $1_DiemAccount_Balance'#0'($t21);

    // move_to<DiemAccount::Balance<#0>>($t22, $t0) on_abort goto L7 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1514:9+7
    if ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t0, $t22);
    }
    if ($abort_flag) {
        assume {:print "$at(11,70378,70385)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,2):", $t10} $t10 == $t10;
        goto L7;
    }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
    assume {:print "$at(11,70444,70445)"} true;
L6:

    // assert Not(Not(DiemAccount::$exists_at[@260](Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1518:9+82
    assume {:print "$at(11,70527,70609)"} true;
    assert {:msg "assert_failed(11,70527,70609): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#260, $1_Signer_spec_address_of($t0));

    // assert Not(exists[@261]<DiemAccount::Balance<#0>>(Signer::$address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1527:9+93
    assume {:print "$at(11,70975,71068)"} true;
    assert {:msg "assert_failed(11,70975,71068): function does not abort under this condition"}
      !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#261, $1_Signer_$address_of($t0));

    // assert Not(Not(Diem::spec_is_currency[@262]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#262);

    // assert Not(Not(Roles::$can_hold_balance[@263]($t0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1545:9+74
    assume {:print "$at(11,71789,71863)"} true;
    assert {:msg "assert_failed(11,71789,71863): function does not abort under this condition"}
      !!$1_Roles_$can_hold_balance($1_Roles_RoleId_$memory#263, $t0);

    // assert exists<DiemAccount::Balance<#0>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t0));

    // assert Eq<DiemAccount::Balance<#0>>(global<DiemAccount::Balance<#0>>(Signer::spec_address_of($t0)), pack DiemAccount::Balance<#0>(pack Diem::Diem<#0>(0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_Balance'#0''($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t0)), $1_DiemAccount_Balance'#0'($1_Diem_Diem'#0'(0)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@260](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@260]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#260, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#260, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@261]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@261]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#261, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#261, addr))))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1515:5+1
    assume {:print "$at(11,70444,70445)"} true;
L7:

    // assert Or(Or(Or(Not(DiemAccount::$exists_at[@260](Signer::spec_address_of[]($t0))), exists[@261]<DiemAccount::Balance<#0>>(Signer::$address_of[]($t0))), Not(Diem::spec_is_currency[@262]<#0>())), Not(Roles::$can_hold_balance[@263]($t0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1516:5+292
    assume {:print "$at(11,70450,70742)"} true;
    assert {:msg "assert_failed(11,70450,70742): abort not covered by any of the `aborts_if` clauses"}
      (((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#260, $1_Signer_spec_address_of($t0)) || $ResourceExists($1_DiemAccount_Balance'#0'_$memory#261, $1_Signer_$address_of($t0))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#262)) || !$1_Roles_$can_hold_balance($1_Roles_RoleId_$memory#263, $t0));

    // assert Or(Or(Or(And(Not(DiemAccount::$exists_at[@260](Signer::spec_address_of[]($t0))), Eq(5, $t10)), And(exists[@261]<DiemAccount::Balance<#0>>(Signer::$address_of[]($t0)), Eq(6, $t10))), And(Not(Diem::spec_is_currency[@262]<#0>()), Eq(5, $t10))), And(Not(Roles::$can_hold_balance[@263]($t0)), Eq(7, $t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1516:5+292
    assert {:msg "assert_failed(11,70450,70742): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#260, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(5, $t10)) || ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#261, $1_Signer_$address_of($t0)) && $IsEqual'u8'(6, $t10))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#262) && $IsEqual'u8'(5, $t10))) || (!$1_Roles_$can_hold_balance($1_Roles_RoleId_$memory#263, $t0) && $IsEqual'u8'(7, $t10)));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1516:5+292
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun DiemAccount::exists_at [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+95
procedure {:inline 1} $1_DiemAccount_exists_at(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[check_addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+1
    assume {:print "$at(11,73921,73922)"} true;
    assume {:print "$track_local(29,21,0):", $t0} $t0 == $t0;

    // $t1 := exists<DiemAccount::DiemAccount>($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1596:9+6
    assume {:print "$at(11,73979,73985)"} true;
    $t1 := $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1596:9+31
    assume {:print "$track_return(29,21,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1597:5+1
    assume {:print "$at(11,74015,74016)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1597:5+1
    $ret0 := $t1;
    return;

}

// fun DiemAccount::exists_at [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+95
procedure {:timeLimit 40} $1_DiemAccount_exists_at$verify(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_DiemAccount_DiemAccount_$memory#95: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+95
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,73921,74016)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+95
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+95
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+95
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+95
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+95
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+95
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // @95 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+1
    $1_DiemAccount_DiemAccount_$memory#95 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[check_addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+1
    assume {:print "$track_local(29,21,0):", $t0} $t0 == $t0;

    // $t1 := exists<DiemAccount::DiemAccount>($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1596:9+6
    assume {:print "$at(11,73979,73985)"} true;
    $t1 := $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1596:9+31
    assume {:print "$track_return(29,21,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1597:5+1
    assume {:print "$at(11,74015,74016)"} true;
L1:

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@95]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@95](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#95, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#95, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@95]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@95]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#95, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#95, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@95](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@95]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#95, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#95, addr)))));

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    $ret0 := $t1;
    return;

}

// fun DiemAccount::tiered_mint [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
procedure {:timeLimit 40} $1_DiemAccount_tiered_mint$verify(_$t0: int, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t4: $1_Diem_Diem'#0';
    var $t5: int;
    var $t6: int;
    var $t7: $1_Diem_CurrencyInfo'#0';
    var $t8: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t9: $1_DiemAccount_ReceivedPaymentEvent;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: $1_Diem_CurrencyInfo'#0';
    var $t14: int;
    var $t15: $1_Diem_Diem'#0';
    var $t16: bool;
    var $t17: $1_Diem_CurrencyInfo'#0';
    var $t18: int;
    var $t19: Vec (int);
    var $t20: Vec (int);
    var $t21: bool;
    var $t22: int;
    var $t23: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t24: $1_DiemAccount_ReceivedPaymentEvent;
    var $t25: $1_FixedPoint32_FixedPoint32;
    var $t26: bool;
    var $t27: $1_DiemAccount_ReceivedPaymentEvent;
    var $t28: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t29: int;
    var $t30: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $1_DesignatedDealer_Dealer_$modifies: [int]bool;
    var $1_DesignatedDealer_TierInfo'#0'_$modifies: [int]bool;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $1_DiemAccount_Balance'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_DesignatedDealer_Dealer': $1_DesignatedDealer_Dealer;
    var $temp_0'$1_DesignatedDealer_TierInfo'#0'': $1_DesignatedDealer_TierInfo'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_MintCapability'#0'_$memory#555: $Memory $1_Diem_MintCapability'#0';
    var $1_Roles_RoleId_$memory#556: $Memory $1_Roles_RoleId;
    var $1_DesignatedDealer_Dealer_$memory#557: $Memory $1_DesignatedDealer_Dealer;
    var $1_Diem_CurrencyInfo'#0'_$memory#558: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_DiemAccount_Balance'#0'_$memory#559: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#560: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'#0'_$memory#561: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#562: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#563: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#565: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountFreezing_FreezingBit_$memory#566: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_DiemAccount_$memory#567: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#568: $Memory $1_DiemAccount_Balance'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,18380,19032)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:234:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume $IsValid'u64'($t3);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::TierInfo<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_TierInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_TierInfo'#0'_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_TierInfo'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+652
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:461:9+82
    assume {:print "$at(11,20392,20474)"} true;
    assume ($t6 == $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t1))));

    // assume Identical($t7, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:463:9+94
    assume {:print "$at(11,20584,20678)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t8, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:408:9+56
    assume {:print "$at(11,17877,17933)"} true;
    assume ($t8 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t9, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), CoreAddresses::$VM_RESERVED_ADDRESS(), [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:409:9+165
    assume {:print "$at(11,17942,18107)"} true;
    assume ($t9 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $EmptyVec'u8'()));

    // assume CanModify<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:438:9+56
    assume {:print "$at(11,19088,19144)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t1];

    // assume CanModify<DesignatedDealer::Dealer>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:439:9+69
    assume {:print "$at(11,19153,19222)"} true;
    assume $1_DesignatedDealer_Dealer_$modifies[$t1];

    // assume CanModify<DesignatedDealer::TierInfo<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:440:9+78
    assume {:print "$at(11,19231,19309)"} true;
    assume $1_DesignatedDealer_TierInfo'#0'_$modifies[$t1];

    // assume CanModify<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:441:9+59
    assume {:print "$at(11,19318,19377)"} true;
    assume $1_DiemAccount_Balance'#0'_$modifies[$t1];

    // assume CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:442:9+100
    assume {:print "$at(11,19386,19486)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)];

    // assume CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    assume {:print "$at(11,19495,19578)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // @564 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @556 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    $1_Roles_RoleId_$memory#556 := $1_Roles_RoleId_$memory;

    // @558 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    $1_Diem_CurrencyInfo'#0'_$memory#558 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @555 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    $1_Diem_MintCapability'#0'_$memory#555 := $1_Diem_MintCapability'#0'_$memory;

    // @565 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    $1_AccountLimits_LimitsDefinition'#0'_$memory#565 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @561 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    $1_AccountLimits_Window'#0'_$memory#561 := $1_AccountLimits_Window'#0'_$memory;

    // @562 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    $1_VASP_ChildVASP_$memory#562 := $1_VASP_ChildVASP_$memory;

    // @563 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    $1_VASP_ParentVASP_$memory#563 := $1_VASP_ParentVASP_$memory;

    // @557 := save_mem(DesignatedDealer::Dealer) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    $1_DesignatedDealer_Dealer_$memory#557 := $1_DesignatedDealer_Dealer_$memory;

    // @566 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    $1_AccountFreezing_FreezingBit_$memory#566 := $1_AccountFreezing_FreezingBit_$memory;

    // @560 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    $1_DiemAccount_DiemAccount_$memory#560 := $1_DiemAccount_DiemAccount_$memory;

    // @559 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:443:9+83
    $1_DiemAccount_Balance'#0'_$memory#559 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+1
    assume {:print "$at(11,18380,18381)"} true;
    assume {:print "$track_local(29,41,0):", $t0} $t0 == $t0;

    // trace_local[designated_dealer_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+1
    assume {:print "$track_local(29,41,1):", $t1} $t1 == $t1;

    // trace_local[mint_amount]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+1
    assume {:print "$track_local(29,41,2):", $t2} $t2 == $t2;

    // trace_local[tier_index]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:421:5+1
    assume {:print "$track_local(29,41,3):", $t3} $t3 == $t3;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:427:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(11,18617,18662)"} true;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:427:9+45
    assume {:print "$at(11,18617,18662)"} true;

    // assume Identical($t11, Or(Or(Not(exists<Roles::RoleId>($t10)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:427:9+45
    assume ($t11 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t10) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t11) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:427:9+45
    if ($t11) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:427:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t12)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 1), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:427:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'u8'(5, $t12)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 1) && $IsEqual'u8'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:427:9+45
    assume {:print "$at(11,18617,18662)"} true;
    assume {:print "$track_abort(29,41):", $t12} $t12 == $t12;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:427:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:427:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:427:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    // >> opaque call: $t5 := DesignatedDealer::tiered_mint<#0>($t0, $t2, $t1, $t3)
    assume {:print "$at(11,18683,18805)"} true;

    // assume Identical($t13, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:170:9+97
    assume {:print "$at(9,7125,7222)"} true;
    assume ($t13 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assert CanModify<DesignatedDealer::Dealer>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    assume {:print "$at(11,18683,18805)"} true;
    assert {:msg "assert_failed(11,18683,18805): caller does not have permission to modify `DesignatedDealer::Dealer` at given address"}
      $1_DesignatedDealer_Dealer_$modifies[$t1];

    // assert CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    assert {:msg "assert_failed(11,18683,18805): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // assert CanModify<DesignatedDealer::TierInfo<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    assert {:msg "assert_failed(11,18683,18805): caller does not have permission to modify `DesignatedDealer::TierInfo<#0>` at given address"}
      $1_DesignatedDealer_TierInfo'#0'_$modifies[$t1];

    // $t15 := opaque begin: DesignatedDealer::tiered_mint<#0>($t0, $t2, $t1, $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122

    // assume Identical($t16, Or(Or(Or(Or(Or(Or(Or(Or(Eq<u64>($t2, 0), Not(exists<Diem::MintCapability<#0>>(Signer::spec_address_of($t0)))), Not(exists<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), Not(exists<DesignatedDealer::Dealer>($t1))), Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<#0>()))), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), $t2), MaxU128())), Not(Diem::spec_is_currency<#0>()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    assume ($t16 == (((((((($IsEqual'u64'($t2, 0) || !$ResourceExists($1_Diem_MintCapability'#0'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t1)) || !$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory))) || (($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $t2) > $MAX_U128)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // if ($t16) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    if ($t16) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
L6:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(And(Eq<u64>($t2, 0), Eq(7, $t12)), And(Not(exists<Diem::MintCapability<#0>>(Signer::spec_address_of($t0))), Eq(4, $t12))), And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 1), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t12))), And(Not(exists<DesignatedDealer::Dealer>($t1)), Eq(5, $t12))), And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<#0>())), Eq(1, $t12))), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), $t2), MaxU128()), Eq(8, $t12))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    assume ((((((((($IsEqual'u64'($t2, 0) && $IsEqual'u8'(7, $t12)) || (!$ResourceExists($1_Diem_MintCapability'#0'_$memory, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 1) && $IsEqual'u8'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t12))) || (!$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t1) && $IsEqual'u8'(5, $t12))) || (!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'u8'(1, $t12))) || ((($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $t2) > $MAX_U128) && $IsEqual'u8'(8, $t12))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    assume {:print "$at(11,18683,18805)"} true;
    assume {:print "$track_abort(29,41):", $t12} $t12 == $t12;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
L5:

    // modifies global<DesignatedDealer::Dealer>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DesignatedDealer_Dealer';
        $1_DesignatedDealer_Dealer_$memory := $ResourceUpdate($1_DesignatedDealer_Dealer_$memory, $t1, $temp_0'$1_DesignatedDealer_Dealer');
    } else {
        $1_DesignatedDealer_Dealer_$memory := $ResourceRemove($1_DesignatedDealer_Dealer_$memory, $t1);
    }

    // modifies global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_CurrencyInfo'#0'';
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS(), $temp_0'$1_Diem_CurrencyInfo'#0'');
    } else {
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceRemove($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());
    }

    // modifies global<DesignatedDealer::TierInfo<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DesignatedDealer_TierInfo'#0'';
        $1_DesignatedDealer_TierInfo'#0'_$memory := $ResourceUpdate($1_DesignatedDealer_TierInfo'#0'_$memory, $t1, $temp_0'$1_DesignatedDealer_TierInfo'#0'');
    } else {
        $1_DesignatedDealer_TierInfo'#0'_$memory := $ResourceRemove($1_DesignatedDealer_TierInfo'#0'_$memory, $t1);
    }

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:20+122
    assume $IsValid'$1_Diem_Diem'#0''($t15);

    // assume Identical($t17, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:171:9+107
    assume {:print "$at(9,7231,7338)"} true;
    assume ($t17 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:171:9+107
    assume $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assume Not(exists<DesignatedDealer::TierInfo<#0>>($t1)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:171:9+107
    assume !$ResourceExists($1_DesignatedDealer_TierInfo'#0'_$memory, $t1);

    // assume Eq<u64>(select Diem::Diem.value($t15), $t2) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:171:9+107
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t15), $t2);

    // assume Eq<Diem::CurrencyInfo<#0>>($t17, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t13, Add(select Diem::CurrencyInfo.total_value($t13), $t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:171:9+107
    assume $IsEqual'$1_Diem_CurrencyInfo'#0''($t17, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t13, ($total_value#$1_Diem_CurrencyInfo'#0'($t13) + $t2)));

    // $t15 := opaque end: DesignatedDealer::tiered_mint<#0>($t0, $t2, $t1, $t3) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:171:9+107

    // trace_local[coin]($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:428:13+4
    assume {:print "$at(11,18676,18680)"} true;
    assume {:print "$track_local(29,41,4):", $t15} $t15 == $t15;

    // $t18 := CoreAddresses::VM_RESERVED_ADDRESS() on_abort goto L2 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:17+36
    assume {:print "$at(11,18939,18975)"} true;
    call $t18 := $1_CoreAddresses_VM_RESERVED_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,18939,18975)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,41):", $t12} $t12 == $t12;
        goto L2;
    }

    // $t19 := [] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:88+3
    $t19 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t19);

    // $t20 := [] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:93+3
    $t20 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t20);

    // $t21 := false at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:98+5
    $t21 := false;
    assume $IsValid'bool'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    // >> opaque call: DiemAccount::deposit<#0>($t6, $t1, $t5, $t7, $t8, $t9)

    // assume Identical($t22, select Diem::Diem.value($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:358:9+30
    assume {:print "$at(11,15804,15834)"} true;
    assume ($t22 == $value#$1_Diem_Diem'#0'($t15));

    // assume Identical($t23, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:408:9+56
    assume {:print "$at(11,17877,17933)"} true;
    assume ($t23 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t24, pack DiemAccount::ReceivedPaymentEvent($t22, Diem::spec_currency_code<#0>(), $t18, $t19)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:409:9+165
    assume {:print "$at(11,17942,18107)"} true;
    assume ($t24 == $1_DiemAccount_ReceivedPaymentEvent($t22, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t18, $t19));

    // assume Identical($t25, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1377:9+59
    assume {:print "$at(10,65833,65892)"} true;
    assume ($t25 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert CanModify<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume {:print "$at(11,18931,19026)"} true;
    assert {:msg "assert_failed(11,18931,19026): caller does not have permission to modify `DiemAccount::Balance<#0>` at given address"}
      $1_DiemAccount_Balance'#0'_$modifies[$t1];

    // assert CanModify<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assert {:msg "assert_failed(11,18931,19026): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t1];

    // assert CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assert {:msg "assert_failed(11,18931,19026): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)];

    // opaque begin: DiemAccount::deposit<#0>($t18, $t1, $t15, $t19, $t20, $t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95

    // assume Identical($t26, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<#0>>($t1)), Not(DiemAccount::$exists_at($t1))), Eq<u64>($t22, 0)), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t22, VASP::spec_parent_address($t1))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t22), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t22), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<#0>())), AccountFreezing::spec_account_is_frozen($t1)), Gt(Add(DiemAccount::$balance<#0>($t1), $t22), MaxU64())), And($t21, And(Eq<num>(Len<u8>($t20), 0), Not(DualAttestation::spec_is_published())))), And($t21, And(Eq<num>(Len<u8>($t20), 0), Not(Diem::spec_is_currency<#0>())))), And($t21, And(Eq<num>(Len<u8>($t20), 0), Gt(FixedPoint32::spec_multiply_u64($t22, $t25), 18446744073709551615)))), And($t21, And(Or(Neq<num>(Len<u8>($t20), 0), DualAttestation::spec_dual_attestation_required<#0>($t18, $t1, $t22)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))))), And($t21, And(Or(Neq<num>(Len<u8>($t20), 0), DualAttestation::spec_dual_attestation_required<#0>($t18, $t1, $t22)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))))), And($t21, And(Or(Neq<num>(Len<u8>($t20), 0), DualAttestation::spec_dual_attestation_required<#0>($t18, $t1, $t22)), Not(DualAttestation::spec_signature_is_valid($t18, $t1, $t20, $t19, $t22))))), And($t21, And(Or(Neq<num>(Len<u8>($t20), 0), DualAttestation::spec_dual_attestation_required<#0>($t18, $t1, $t22)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1))))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume ($t26 == ((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1)) || $IsEqual'u64'($t22, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t22, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t22) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t22) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1)) || (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1) + $t22) > $MAX_U64)) || ($t21 && ($IsEqual'num'(LenVec($t20), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)))) || ($t21 && ($IsEqual'num'(LenVec($t20), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)))) || ($t21 && ($IsEqual'num'(LenVec($t20), 0) && ($1_FixedPoint32_spec_multiply_u64($t22, $t25) > 18446744073709551615)))) || ($t21 && ((!$IsEqual'num'(LenVec($t20), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t18, $t1, $t22)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($t21 && ((!$IsEqual'num'(LenVec($t20), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t18, $t1, $t22)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($t21 && ((!$IsEqual'num'(LenVec($t20), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t18, $t1, $t22)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t18, $t1, $t20, $t19, $t22)))) || ($t21 && ((!$IsEqual'num'(LenVec($t20), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t18, $t1, $t22)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))));

    // if ($t26) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    if ($t26) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
L8:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<#0>>($t1)), Eq(7, $t12)), And(Not(DiemAccount::$exists_at($t1)), Eq(5, $t12))), And(Eq<u64>($t22, 0), Eq(7, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t22, VASP::spec_parent_address($t1)))), Eq(8, $t12))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Eq(5, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))))), Eq(5, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t22), MaxU64()))), Eq(8, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t22), MaxU64()))), Eq(8, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64()))), Eq(8, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t12))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t12))), And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t12))), And(Gt(Add(DiemAccount::$balance<#0>($t1), $t22), MaxU64()), Eq(8, $t12))), And(And($t21, And(Eq<num>(Len<u8>($t20), 0), Not(DualAttestation::spec_is_published()))), Eq(5, $t12))), And(And($t21, And(Eq<num>(Len<u8>($t20), 0), Not(Diem::spec_is_currency<#0>()))), Eq(5, $t12))), And(And($t21, And(Eq<num>(Len<u8>($t20), 0), Gt(FixedPoint32::spec_multiply_u64($t22, $t25), 18446744073709551615))), Eq(8, $t12))), And(And($t21, And(Or(Neq<num>(Len<u8>($t20), 0), DualAttestation::spec_dual_attestation_required<#0>($t18, $t1, $t22)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), Eq(1, $t12))), And(And($t21, And(Or(Neq<num>(Len<u8>($t20), 0), DualAttestation::spec_dual_attestation_required<#0>($t18, $t1, $t22)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), Eq(1, $t12))), And(And($t21, And(Or(Neq<num>(Len<u8>($t20), 0), DualAttestation::spec_dual_attestation_required<#0>($t18, $t1, $t22)), Not(DualAttestation::spec_signature_is_valid($t18, $t1, $t20, $t19, $t22)))), Eq(7, $t12))), And(And($t21, And(Or(Neq<num>(Len<u8>($t20), 0), DualAttestation::spec_dual_attestation_required<#0>($t18, $t1, $t22)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1))))), Eq(5, $t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume (((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1) && $IsEqual'u8'(7, $t12)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1) && $IsEqual'u8'(5, $t12))) || ($IsEqual'u64'($t22, 0) && $IsEqual'u8'(7, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t22, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'u8'(8, $t12))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'u8'(5, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'u8'(5, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t22) > $MAX_U64))) && $IsEqual'u8'(8, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t22) > $MAX_U64))) && $IsEqual'u8'(8, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64))) && $IsEqual'u8'(8, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'u8'(1, $t12))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t12))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'u8'(1, $t12))) || ((($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1) + $t22) > $MAX_U64) && $IsEqual'u8'(8, $t12))) || (($t21 && ($IsEqual'num'(LenVec($t20), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) && $IsEqual'u8'(5, $t12))) || (($t21 && ($IsEqual'num'(LenVec($t20), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))) && $IsEqual'u8'(5, $t12))) || (($t21 && ($IsEqual'num'(LenVec($t20), 0) && ($1_FixedPoint32_spec_multiply_u64($t22, $t25) > 18446744073709551615))) && $IsEqual'u8'(8, $t12))) || (($t21 && ((!$IsEqual'num'(LenVec($t20), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t18, $t1, $t22)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'u8'(1, $t12))) || (($t21 && ((!$IsEqual'num'(LenVec($t20), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t18, $t1, $t22)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'u8'(1, $t12))) || (($t21 && ((!$IsEqual'num'(LenVec($t20), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t18, $t1, $t22)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t18, $t1, $t20, $t19, $t22))) && $IsEqual'u8'(7, $t12))) || (($t21 && ((!$IsEqual'num'(LenVec($t20), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t18, $t1, $t22)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'u8'(5, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume {:print "$at(11,18931,19026)"} true;
    assume {:print "$track_abort(29,41):", $t12} $t12 == $t12;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
L7:

    // @567 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    $1_DiemAccount_DiemAccount_$memory#567 := $1_DiemAccount_DiemAccount_$memory;

    // @568 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    $1_DiemAccount_Balance'#0'_$memory#568 := $1_DiemAccount_Balance'#0'_$memory;

    // modifies global<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t1, $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $t1);
    }

    // modifies global<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t1, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t1);
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));
    }

    // assume exists<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t1);

    // assume exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.withdraw_capability(global[@567]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#567, $t1)));

    // assume Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.authentication_key(global[@567]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#567, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@567]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#567, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@567]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#567, $t1)));

    // assume Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@568]<#0>($t1), $t22)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#568, $t1) + $t22));

    // assume Identical($t27, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume ($t27 == $t24);

    // assume Identical($t28, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    assume ($t28 == $t23);

    // emit_event($t27, $t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t28, $t27);

    // opaque end: DiemAccount::deposit<#0>($t18, $t1, $t15, $t19, $t20, $t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:433:9+95

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:434:5+1
    assume {:print "$at(11,19031,19032)"} true;
L1:

    // assume Identical($t29, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:462:9+92
    assume {:print "$at(11,20483,20575)"} true;
    assume ($t29 == $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t1))));

    // assume Identical($t30, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:464:9+104
    assume {:print "$at(11,20687,20791)"} true;
    assume ($t30 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:180:9+52
    assume {:print "$at(9,7706,7758)"} true;
    assert {:msg "assert_failed(9,7706,7758): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(Not(exists[@555]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:182:9+120
    assume {:print "$at(9,7801,7921)"} true;
    assert {:msg "assert_failed(9,7801,7921): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_MintCapability'#0'_$memory#555, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@556]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#556, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@556]<Roles::RoleId>($t5)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#556, $t5)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Not(exists[@557]<DesignatedDealer::Dealer>($t1))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:22:9+62
    assume {:print "$at(9,643,705)"} true;
    assert {:msg "assert_failed(9,643,705): function does not abort under this condition"}
      !!$ResourceExists($1_DesignatedDealer_Dealer_$memory#557, $t1);

    // assert Not(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@558]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:446:9+78
    assume {:print "$at(10,21552,21630)"} true;
    assert {:msg "assert_failed(10,21552,21630): function does not abort under this condition"}
      !!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#558));

    // assert Not(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@558]<#0>()), $t2), MaxU128())) at /home/ying/diem/language/diem-framework/modules/Diem.move:447:9+102
    assume {:print "$at(10,21639,21741)"} true;
    assert {:msg "assert_failed(10,21639,21741): function does not abort under this condition"}
      !(($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#558)) + $t2) > $MAX_U128);

    // assert Not(Not(Diem::spec_is_currency[@558]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#558);

    // assert Not(Not(exists[@559]<DiemAccount::Balance<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:372:9+71
    assume {:print "$at(11,16433,16504)"} true;
    assert {:msg "assert_failed(11,16433,16504): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#559, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@560]($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:373:9+55
    assume {:print "$at(11,16513,16568)"} true;
    assert {:msg "assert_failed(11,16513,16568): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#560, $t1);

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:386:9+52
    assume {:print "$at(11,16976,17028)"} true;
    assert {:msg "assert_failed(11,16976,17028): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@564, @565, @561]<#0>($t2, VASP::spec_parent_address[@562, @563]($t1))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:392:9+238
    assume {:print "$at(11,17269,17507)"} true;
    assert {:msg "assert_failed(11,17269,17507): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564, $1_AccountLimits_LimitsDefinition'#0'_$memory#565, $1_AccountLimits_Window'#0'_$memory#561, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1)));

    // assert Not(Not(DiemTimestamp::$is_operating[@564]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), Not(exists[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4079,4148)"} true;
    assert {:msg "assert_failed(5,4079,4148): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), Not(exists[@565]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:360:9+98
    assume {:print "$at(5,16437,16535)"} true;
    assert {:msg "assert_failed(5,16437,16535): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@564, @565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:370:9+102
    assume {:print "$at(5,16932,17034)"} true;
    assert {:msg "assert_failed(5,16932,17034): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564, $1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@564, @565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+104
    assume {:print "$at(5,17043,17147)"} true;
    assert {:msg "assert_failed(5,17043,17147): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564, $1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:291:9+102
    assume {:print "$at(5,13064,13166)"} true;
    assert {:msg "assert_failed(5,13064,13166): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Not(DiemTimestamp::$is_operating[@564]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564)));

    // assert Not(Not(Diem::spec_is_currency[@558]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#558);

    // assert Not(AccountFreezing::spec_account_is_frozen[@566]($t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:181:9+69
    assume {:print "$at(4,7220,7289)"} true;
    assert {:msg "assert_failed(4,7220,7289): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#566, $t1);

    // assert Not(Gt(Add(DiemAccount::$balance[@559]<#0>($t1), $t2), MaxU64())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:378:9+81
    assume {:print "$at(11,16677,16758)"} true;
    assert {:msg "assert_failed(11,16677,16758): function does not abort under this condition"}
      !(($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#559, $t1) + $t2) > $MAX_U64);

    // assert Eq<Diem::CurrencyInfo<#0>>($t30, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t7, Add(select Diem::CurrencyInfo.total_value($t7), $t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:466:9+112
    assume {:print "$at(11,20863,20975)"} true;
    assert {:msg "assert_failed(11,20863,20975): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t30, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t7, ($total_value#$1_Diem_CurrencyInfo'#0'($t7) + $t2)));

    // assert Eq<u64>($t29, Add($t6, $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:468:9+60
    assume {:print "$at(11,21052,21112)"} true;
    assert {:msg "assert_failed(11,21052,21112): post-condition does not hold"}
      $IsEqual'u64'($t29, ($t6 + $t2));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@560](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@560]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#560, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#560, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@559]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@559]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#559, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#559, addr))))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t9, $t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:415:9+20
    assume {:print "$at(11,18116,18136)"} true;
    assert {:msg "assert_failed(11,18116,18136): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t9, $t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:436:5+671
    assume {:print "$at(11,19038,19709)"} true;
    assert {:msg "assert_failed(11,19038,19709): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:436:5+671
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:434:5+1
    assume {:print "$at(11,19031,19032)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Eq<u64>($t2, 0), Not(exists[@555]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0)))), Not(exists[@556]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@556]<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Not(exists[@557]<DesignatedDealer::Dealer>($t1))), Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@558]<#0>()))), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@558]<#0>()), $t2), MaxU128())), Not(Diem::spec_is_currency[@558]<#0>())), Not(exists[@559]<DiemAccount::Balance<#0>>($t1))), Not(DiemAccount::$exists_at[@560]($t1))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@564, @565, @561]<#0>($t2, VASP::spec_parent_address[@562, @563]($t1))))), Not(DiemTimestamp::$is_operating[@564]())), And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), Not(exists[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1))))), And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), Not(exists[@565]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1))))))), And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@564, @565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@564, @565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Not(DiemTimestamp::$is_operating[@564]())))), Not(Diem::spec_is_currency[@558]<#0>())), AccountFreezing::spec_account_is_frozen[@566]($t1)), Gt(Add(DiemAccount::$balance[@559]<#0>($t1), $t2), MaxU64())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:436:5+671
    assume {:print "$at(11,19038,19709)"} true;
    assert {:msg "assert_failed(11,19038,19709): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((((($IsEqual'u64'($t2, 0) || !$ResourceExists($1_Diem_MintCapability'#0'_$memory#555, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#556, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#556, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_DesignatedDealer_Dealer_$memory#557, $t1)) || !$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#558))) || (($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#558)) + $t2) > $MAX_U128)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#558)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#559, $t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#560, $t1)) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564, $1_AccountLimits_LimitsDefinition'#0'_$memory#565, $1_AccountLimits_Window'#0'_$memory#561, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564, $1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564, $1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#558)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#566, $t1)) || (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#559, $t1) + $t2) > $MAX_U64));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Eq<u64>($t2, 0), Eq(7, $t12)), And(Not(exists[@555]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t12))), And(Not(exists[@556]<Roles::RoleId>($t5)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global[@556]<Roles::RoleId>($t5)), 1), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t12))), And(Not(exists[@557]<DesignatedDealer::Dealer>($t1)), Eq(5, $t12))), And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@558]<#0>())), Eq(1, $t12))), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@558]<#0>()), $t2), MaxU128()), Eq(8, $t12))), And(Not(Diem::spec_is_currency[@558]<#0>()), Eq(5, $t12))), And(Not(exists[@559]<DiemAccount::Balance<#0>>($t1)), Eq(7, $t12))), And(Not(DiemAccount::$exists_at[@560]($t1)), Eq(5, $t12))), And(Eq<u64>($t2, 0), Eq(7, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@564, @565, @561]<#0>($t2, VASP::spec_parent_address[@562, @563]($t1)))), Eq(8, $t12))), And(Not(DiemTimestamp::$is_operating[@564]()), Eq(1, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), Not(exists[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Eq(5, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), Not(exists[@565]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))))), Eq(5, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@564, @565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), $t2), MaxU64()))), Eq(8, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@564, @565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), $t2), MaxU64()))), Eq(8, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1))))), MaxU64()))), Eq(8, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account[@561, @562, @563]<#0>(CoreAddresses::$VM_RESERVED_ADDRESS[](), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@565]<#0>(global[@561]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@562, @563]($t1)))), Not(DiemTimestamp::$is_operating[@564]()))), Eq(1, $t12))), And(Not(Diem::spec_is_currency[@558]<#0>()), Eq(5, $t12))), And(AccountFreezing::spec_account_is_frozen[@566]($t1), Eq(1, $t12))), And(Gt(Add(DiemAccount::$balance[@559]<#0>($t1), $t2), MaxU64()), Eq(8, $t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:436:5+671
    assert {:msg "assert_failed(11,19038,19709): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((((($IsEqual'u64'($t2, 0) && $IsEqual'u8'(7, $t12)) || (!$ResourceExists($1_Diem_MintCapability'#0'_$memory#555, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#556, $t5) && $IsEqual'u8'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#556, $t5)), 1) && $IsEqual'u8'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t12))) || (!$ResourceExists($1_DesignatedDealer_Dealer_$memory#557, $t1) && $IsEqual'u8'(5, $t12))) || (!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#558)) && $IsEqual'u8'(1, $t12))) || ((($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#558)) + $t2) > $MAX_U128) && $IsEqual'u8'(8, $t12))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#558) && $IsEqual'u8'(5, $t12))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#559, $t1) && $IsEqual'u8'(7, $t12))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#560, $t1) && $IsEqual'u8'(5, $t12))) || ($IsEqual'u64'($t2, 0) && $IsEqual'u8'(7, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564, $1_AccountLimits_LimitsDefinition'#0'_$memory#565, $1_AccountLimits_Window'#0'_$memory#561, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && $IsEqual'u8'(8, $t12))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564) && $IsEqual'u8'(1, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && $IsEqual'u8'(5, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))))) && $IsEqual'u8'(5, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564, $1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'u8'(8, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564, $1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'u8'(8, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))))) > $MAX_U64))) && $IsEqual'u8'(8, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $1_CoreAddresses_$VM_RESERVED_ADDRESS(), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#565, $ResourceValue($1_AccountLimits_Window'#0'_$memory#561, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#562, $1_VASP_ParentVASP_$memory#563, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#564))) && $IsEqual'u8'(1, $t12))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#558) && $IsEqual'u8'(5, $t12))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#566, $t1) && $IsEqual'u8'(1, $t12))) || ((($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#559, $t1) + $t2) > $MAX_U64) && $IsEqual'u8'(8, $t12)));

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:436:5+671
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun DiemAccount::accepts_currency [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1549:5+107
procedure {:timeLimit 40} $1_DiemAccount_accepts_currency$verify(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_DiemAccount_DiemAccount_$memory#93: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#94: $Memory $1_DiemAccount_Balance'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1549:5+107
    assume {:print "$at(11,71947,72054)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1549:5+107
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // @93 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1549:5+1
    $1_DiemAccount_DiemAccount_$memory#93 := $1_DiemAccount_DiemAccount_$memory;

    // @94 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1549:5+1
    $1_DiemAccount_Balance'#0'_$memory#94 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1549:5+1
    assume {:print "$track_local(29,0,0):", $t0} $t0 == $t0;

    // $t1 := exists<DiemAccount::Balance<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1550:9+6
    assume {:print "$at(11,72020,72026)"} true;
    $t1 := $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1550:9+28
    assume {:print "$track_return(29,0,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:5+1
    assume {:print "$at(11,72053,72054)"} true;
L1:

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@93](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@93]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#93, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#93, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@94]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@94]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#94, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#94, addr))))));

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    $ret0 := $t1;
    return;

}

// fun DiemAccount::add_currencies_for_account<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
procedure {:inline 1} $1_DiemAccount_add_currencies_for_account'#0'(_$t0: int, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: bool;
    var $t9: bool;
    var $t0: int;
    var $t1: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:9+60
    assume {:print "$at(11,45382,45442)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[new_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+1
    assume {:print "$at(11,44816,44817)"} true;
    assume {:print "$track_local(29,1,0):", $t0} $t0 == $t0;

    // trace_local[add_all_currencies]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+1
    assume {:print "$track_local(29,1,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1006:32+31
    // >> opaque call: $t3 := Signer::address_of($t0)
    assume {:print "$at(11,44965,44996)"} true;

    // $t4 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1006:32+31

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1006:32+31
    assume $IsValid'address'($t4);

    // assume Eq<address>($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1006:32+31
    assume $IsEqual'address'($t4, $1_Signer_spec_address_of($t0));

    // $t4 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1006:32+31

    // trace_local[new_account_addr]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1006:13+16
    assume {:print "$track_local(29,1,2):", $t4} $t4 == $t4;

    // DiemAccount::add_currency<#0>($t0) on_abort goto L12 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1007:9+32
    assume {:print "$at(11,45006,45038)"} true;
    call $1_DiemAccount_add_currency'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,45006,45038)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,1):", $t5} $t5 == $t5;
        goto L12;
    }

    // if ($t1) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:9+279
    assume {:print "$at(11,45048,45327)"} true;
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:9+279
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:9+279
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1009:39+16
    assume {:print "$at(11,45112,45128)"} true;
L0:

    // $t6 := exists<DiemAccount::Balance<XUS::XUS>>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1009:18+6
    $t6 := $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t4);

    // $t7 := !($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1009:17+1
    call $t7 := $Not($t6);

    // if ($t7) goto L3 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1009:13+108
    if ($t7) { goto L3; } else { goto L4; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1009:13+108
L4:

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1009:13+108
    goto L5;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1010:35+11
    assume {:print "$at(11,45167,45178)"} true;
L3:

    // DiemAccount::add_currency<XUS::XUS>($t0) on_abort goto L12 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1010:17+30
    call $1_DiemAccount_add_currency'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,45149,45179)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,1):", $t5} $t5 == $t5;
        goto L12;
    }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:39+16
    assume {:print "$at(11,45234,45250)"} true;
L5:

    // $t8 := exists<DiemAccount::Balance<XDX::XDX>>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:18+6
    $t8 := $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t4);

    // $t9 := !($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:17+1
    call $t9 := $Not($t8);

    // if ($t9) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+108
    if ($t9) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+108
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+108
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1013:35+11
    assume {:print "$at(11,45289,45300)"} true;
L6:

    // DiemAccount::add_currency<XDX::XDX>($t0) on_abort goto L12 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1013:17+30
    call $1_DiemAccount_add_currency'$1_XDX_XDX'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,45271,45301)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,1):", $t5} $t5 == $t5;
        goto L12;
    }

    // goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1013:47+1
    goto L9;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+108
    assume {:print "$at(11,45208,45316)"} true;
L8:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+108

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:14+1
    assume {:print "$at(11,45316,45317)"} true;
L9:

    // goto L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:14+1
    goto L10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:9+279
    assume {:print "$at(11,45048,45327)"} true;
L2:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:9+279

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:10+1
    assume {:print "$at(11,45327,45328)"} true;
L10:

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1016:5+1
    assume {:print "$at(11,45333,45334)"} true;
L11:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1016:5+1
    return;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1016:5+1
L12:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1016:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun DiemAccount::add_currencies_for_account [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
procedure {:timeLimit 40} $1_DiemAccount_add_currencies_for_account$verify(_$t0: int, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: bool;
    var $t9: bool;
    var $t0: int;
    var $t1: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_Roles_RoleId_$memory#284: $Memory $1_Roles_RoleId;
    var $1_DiemAccount_Balance'#0'_$memory#285: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#286: $Memory $1_DiemAccount_DiemAccount;
    var $1_Diem_CurrencyInfo'#0'_$memory#287: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#288: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#289: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#290: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#291: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(11,44816,45334)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    assume $IsValid'bool'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:9+60
    assume {:print "$at(11,45382,45442)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // @284 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+1
    assume {:print "$at(11,44816,44817)"} true;
    $1_Roles_RoleId_$memory#284 := $1_Roles_RoleId_$memory;

    // @289 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+1
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#289 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @291 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+1
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#291 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @287 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#287 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @286 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+1
    $1_DiemAccount_DiemAccount_$memory#286 := $1_DiemAccount_DiemAccount_$memory;

    // @288 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+1
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#288 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @290 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+1
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#290 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // @285 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+1
    $1_DiemAccount_Balance'#0'_$memory#285 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[new_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+1
    assume {:print "$track_local(29,1,0):", $t0} $t0 == $t0;

    // trace_local[add_all_currencies]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1002:5+1
    assume {:print "$track_local(29,1,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1006:32+31
    // >> opaque call: $t3 := Signer::address_of($t0)
    assume {:print "$at(11,44965,44996)"} true;

    // $t4 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1006:32+31

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1006:32+31
    assume $IsValid'address'($t4);

    // assume Eq<address>($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1006:32+31
    assume $IsEqual'address'($t4, $1_Signer_spec_address_of($t0));

    // $t4 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1006:32+31

    // trace_local[new_account_addr]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1006:13+16
    assume {:print "$track_local(29,1,2):", $t4} $t4 == $t4;

    // DiemAccount::add_currency<#0>($t0) on_abort goto L12 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1007:9+32
    assume {:print "$at(11,45006,45038)"} true;
    call $1_DiemAccount_add_currency'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,45006,45038)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,1):", $t5} $t5 == $t5;
        goto L12;
    }

    // if ($t1) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:9+279
    assume {:print "$at(11,45048,45327)"} true;
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:9+279
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:9+279
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1009:39+16
    assume {:print "$at(11,45112,45128)"} true;
L0:

    // $t6 := exists<DiemAccount::Balance<XUS::XUS>>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1009:18+6
    $t6 := $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t4);

    // $t7 := !($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1009:17+1
    call $t7 := $Not($t6);

    // if ($t7) goto L3 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1009:13+108
    if ($t7) { goto L3; } else { goto L4; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1009:13+108
L4:

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1009:13+108
    goto L5;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1010:35+11
    assume {:print "$at(11,45167,45178)"} true;
L3:

    // DiemAccount::add_currency<XUS::XUS>($t0) on_abort goto L12 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1010:17+30
    call $1_DiemAccount_add_currency'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,45149,45179)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,1):", $t5} $t5 == $t5;
        goto L12;
    }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:39+16
    assume {:print "$at(11,45234,45250)"} true;
L5:

    // $t8 := exists<DiemAccount::Balance<XDX::XDX>>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:18+6
    $t8 := $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t4);

    // $t9 := !($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:17+1
    call $t9 := $Not($t8);

    // if ($t9) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+108
    if ($t9) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+108
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+108
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1013:35+11
    assume {:print "$at(11,45289,45300)"} true;
L6:

    // DiemAccount::add_currency<XDX::XDX>($t0) on_abort goto L12 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1013:17+30
    call $1_DiemAccount_add_currency'$1_XDX_XDX'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,45271,45301)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,1):", $t5} $t5 == $t5;
        goto L12;
    }

    // goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1013:47+1
    goto L9;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+108
    assume {:print "$at(11,45208,45316)"} true;
L8:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+108

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:14+1
    assume {:print "$at(11,45316,45317)"} true;
L9:

    // goto L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:14+1
    goto L10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:9+279
    assume {:print "$at(11,45048,45327)"} true;
L2:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:9+279

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:10+1
    assume {:print "$at(11,45327,45328)"} true;
L10:

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1016:5+1
    assume {:print "$at(11,45333,45334)"} true;
L11:

    // assert Not(Not(Roles::spec_can_hold_balance_addr[@284]($t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1020:9+93
    assume {:print "$at(11,45451,45544)"} true;
    assert {:msg "assert_failed(11,45451,45544): function does not abort under this condition"}
      !!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory#284, $t3);

    // assert Not(exists[@285]<DiemAccount::Balance<#0>>($t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1021:9+82
    assume {:print "$at(11,45553,45635)"} true;
    assert {:msg "assert_failed(11,45553,45635): function does not abort under this condition"}
      !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#285, $t3);

    // assert Not(Not(DiemAccount::$exists_at[@286]($t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:9+66
    assume {:print "$at(11,45644,45710)"} true;
    assert {:msg "assert_failed(11,45644,45710): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#286, $t3);

    // assert Not(Not(Diem::spec_is_currency[@287]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#287);

    // assert Not(And(And($t1, Not(exists[@288]<DiemAccount::Balance<XUS::XUS>>($t3))), Not(Diem::spec_is_currency[@289]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !(($t1 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#288, $t3)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#289));

    // assert Not(And(And($t1, Not(exists[@290]<DiemAccount::Balance<XDX::XDX>>($t3))), Not(Diem::spec_is_currency[@291]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !(($t1 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#290, $t3)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#291));

    // assert exists<DiemAccount::Balance<#0>>($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t3);

    // assert Eq<DiemAccount::Balance<#0>>(global<DiemAccount::Balance<#0>>($t3), pack DiemAccount::Balance<#0>(pack Diem::Diem<#0>(0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_Balance'#0''($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t3), $1_DiemAccount_Balance'#0'($1_Diem_Diem'#0'(0)));

    // assert Implies(And($t1, Not(exists<DiemAccount::Balance<XUS::XUS>>($t3))), exists<DiemAccount::Balance<XUS::XUS>>($t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      (($t1 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t3)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t3));

    // assert Implies(And($t1, Not(exists<DiemAccount::Balance<XUS::XUS>>($t3))), Eq<DiemAccount::Balance<XUS::XUS>>(global<DiemAccount::Balance<XUS::XUS>>($t3), pack DiemAccount::Balance<XUS::XUS>(pack Diem::Diem<XUS::XUS>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      (($t1 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t3)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t3), $1_DiemAccount_Balance'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(0))));

    // assert Implies(And($t1, Not(exists<DiemAccount::Balance<XDX::XDX>>($t3))), exists<DiemAccount::Balance<XDX::XDX>>($t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      (($t1 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t3)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t3));

    // assert Implies(And($t1, Not(exists<DiemAccount::Balance<XDX::XDX>>($t3))), Eq<DiemAccount::Balance<XDX::XDX>>(global<DiemAccount::Balance<XDX::XDX>>($t3), pack DiemAccount::Balance<XDX::XDX>(pack Diem::Diem<XDX::XDX>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      (($t1 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t3)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t3), $1_DiemAccount_Balance'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(0))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@286](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@286]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#286, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#286, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@285]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@285]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#285, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#285, addr))))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    return;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1016:5+1
    assume {:print "$at(11,45333,45334)"} true;
L12:

    // assert Or(Or(Or(Or(Or(Not(Roles::spec_can_hold_balance_addr[@284]($t3)), exists[@285]<DiemAccount::Balance<#0>>($t3)), Not(DiemAccount::$exists_at[@286]($t3))), Not(Diem::spec_is_currency[@287]<#0>())), And(And($t1, Not(exists[@288]<DiemAccount::Balance<XUS::XUS>>($t3))), Not(Diem::spec_is_currency[@289]<XUS::XUS>()))), And(And($t1, Not(exists[@290]<DiemAccount::Balance<XDX::XDX>>($t3))), Not(Diem::spec_is_currency[@291]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:5+531
    assume {:print "$at(11,45340,45871)"} true;
    assert {:msg "assert_failed(11,45340,45871): abort not covered by any of the `aborts_if` clauses"}
      (((((!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory#284, $t3) || $ResourceExists($1_DiemAccount_Balance'#0'_$memory#285, $t3)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#286, $t3)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#287)) || (($t1 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#288, $t3)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#289))) || (($t1 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#290, $t3)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#291)));

    // assert Or(Or(Or(Or(Or(And(Not(Roles::spec_can_hold_balance_addr[@284]($t3)), Eq(7, $t5)), And(exists[@285]<DiemAccount::Balance<#0>>($t3), Eq(6, $t5))), And(Not(DiemAccount::$exists_at[@286]($t3)), Eq(5, $t5))), And(Not(Diem::spec_is_currency[@287]<#0>()), Eq(5, $t5))), And(And(And($t1, Not(exists[@288]<DiemAccount::Balance<XUS::XUS>>($t3))), Not(Diem::spec_is_currency[@289]<XUS::XUS>())), Eq(5, $t5))), And(And(And($t1, Not(exists[@290]<DiemAccount::Balance<XDX::XDX>>($t3))), Not(Diem::spec_is_currency[@291]<XDX::XDX>())), Eq(5, $t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:5+531
    assert {:msg "assert_failed(11,45340,45871): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory#284, $t3) && $IsEqual'u8'(7, $t5)) || ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#285, $t3) && $IsEqual'u8'(6, $t5))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#286, $t3) && $IsEqual'u8'(5, $t5))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#287) && $IsEqual'u8'(5, $t5))) || ((($t1 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#288, $t3)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#289)) && $IsEqual'u8'(5, $t5))) || ((($t1 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#290, $t3)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#291)) && $IsEqual'u8'(5, $t5)));

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:5+531
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun DiemAccount::authentication_key [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1565:5+213
procedure {:timeLimit 40} $1_DiemAccount_authentication_key$verify(_$t0: int) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_DiemAccount_DiemAccount;
    var $t8: Vec (int);
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_DiemAccount_$memory#109: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1565:5+213
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,72561,72774)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1565:5+213
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1565:5+213
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1565:5+213
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1565:5+213
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1565:5+213
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1565:5+213
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // @109 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1565:5+1
    $1_DiemAccount_DiemAccount_$memory#109 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1565:5+1
    assume {:print "$track_local(29,3,0):", $t0} $t0 == $t0;

    // $t3 := DiemAccount::exists_at($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:16+15
    assume {:print "$at(11,72656,72671)"} true;
    call $t3 := $1_DiemAccount_exists_at($t0);
    if ($abort_flag) {
        assume {:print "$at(11,72656,72671)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,3):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:55+8
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:33+31
    // >> opaque call: $t5 := Errors::not_published($t4)

    // $t6 := opaque begin: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:33+31

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:33+31
    assume $IsValid'u64'($t6);

    // assume Eq<u64>($t6, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:33+31
    assume $IsEqual'u64'($t6, 5);

    // $t6 := opaque end: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:33+31

    // trace_local[tmp#$2]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:9+56
    assume {:print "$track_local(29,3,2):", $t6} $t6 == $t6;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:9+56
    assume {:print "$track_local(29,3,1):", $t3} $t3 == $t3;

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:9+56
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:9+56
L1:

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:9+56
    assume {:print "$at(11,72649,72705)"} true;
    assume {:print "$track_abort(29,3):", $t6} $t6 == $t6;

    // $t4 := move($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:9+56
    $t4 := $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1566:9+56
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1567:38+4
    assume {:print "$at(11,72744,72748)"} true;
L0:

    // $t7 := get_global<DiemAccount::DiemAccount>($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1567:11+13
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(11,72717,72730)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,3):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t8 := get_field<DiemAccount::DiemAccount>.authentication_key($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1567:10+52
    $t8 := $authentication_key#$1_DiemAccount_DiemAccount($t7);

    // trace_return[0]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1567:9+53
    assume {:print "$track_return(29,3,0):", $t8} $t8 == $t8;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1568:5+1
    assume {:print "$at(11,72773,72774)"} true;
L2:

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@109]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@109](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#109, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#109, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@109]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@109]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#109, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#109, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@109](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@109]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#109, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#109, addr)))));

    // return $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    $ret0 := $t8;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1568:5+1
    assume {:print "$at(11,72773,72774)"} true;
L3:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1568:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun DiemAccount::balance_for<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1487:5+110
procedure {:inline 1} $1_DiemAccount_balance_for'$1_XUS_XUS'(_$t0: $1_DiemAccount_Balance'$1_XUS_XUS') returns ($ret0: int)
{
    // declare local variables
    var $t1: $1_Diem_Diem'$1_XUS_XUS';
    var $t2: int;
    var $t3: int;
    var $t0: $1_DiemAccount_Balance'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'': $1_DiemAccount_Balance'$1_XUS_XUS';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[balance]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1487:5+1
    assume {:print "$at(11,69137,69138)"} true;
    assume {:print "$track_local(29,5,0):", $t0} $t0 == $t0;

    // $t1 := get_field<DiemAccount::Balance<#0>>.coin($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1488:28+13
    assume {:print "$at(11,69227,69240)"} true;
    $t1 := $coin#$1_DiemAccount_Balance'$1_XUS_XUS'($t0);

    // $t2 := Diem::value<#0>($t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1488:9+33
    call $t2 := $1_Diem_value'$1_XUS_XUS'($t1);
    if ($abort_flag) {
        assume {:print "$at(11,69208,69241)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(29,5):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1488:9+33
    assume {:print "$track_return(29,5,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1489:5+1
    assume {:print "$at(11,69246,69247)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1489:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1489:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1489:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun DiemAccount::balance_for<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1487:5+110
procedure {:inline 1} $1_DiemAccount_balance_for'#0'(_$t0: $1_DiemAccount_Balance'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: $1_Diem_Diem'#0';
    var $t2: int;
    var $t3: int;
    var $t0: $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[balance]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1487:5+1
    assume {:print "$at(11,69137,69138)"} true;
    assume {:print "$track_local(29,5,0):", $t0} $t0 == $t0;

    // $t1 := get_field<DiemAccount::Balance<#0>>.coin($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1488:28+13
    assume {:print "$at(11,69227,69240)"} true;
    $t1 := $coin#$1_DiemAccount_Balance'#0'($t0);

    // $t2 := Diem::value<#0>($t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1488:9+33
    call $t2 := $1_Diem_value'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(11,69208,69241)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(29,5):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1488:9+33
    assume {:print "$track_return(29,5,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1489:5+1
    assume {:print "$at(11,69246,69247)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1489:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1489:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1489:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun DiemAccount::balance_for [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1487:5+110
procedure {:timeLimit 40} $1_DiemAccount_balance_for$verify(_$t0: $1_DiemAccount_Balance'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: $1_Diem_Diem'#0';
    var $t2: int;
    var $t3: int;
    var $t0: $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#102: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#103: $Memory $1_DiemAccount_Balance'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1487:5+110
    assume {:print "$at(11,69137,69247)"} true;
    assume $IsValid'$1_DiemAccount_Balance'#0''($t0);

    // @102 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1487:5+1
    $1_DiemAccount_DiemAccount_$memory#102 := $1_DiemAccount_DiemAccount_$memory;

    // @103 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1487:5+1
    $1_DiemAccount_Balance'#0'_$memory#103 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[balance]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1487:5+1
    assume {:print "$track_local(29,5,0):", $t0} $t0 == $t0;

    // $t1 := get_field<DiemAccount::Balance<#0>>.coin($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1488:28+13
    assume {:print "$at(11,69227,69240)"} true;
    $t1 := $coin#$1_DiemAccount_Balance'#0'($t0);

    // $t2 := Diem::value<#0>($t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1488:9+33
    call $t2 := $1_Diem_value'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(11,69208,69241)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(29,5):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1488:9+33
    assume {:print "$track_return(29,5,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1489:5+1
    assume {:print "$at(11,69246,69247)"} true;
L1:

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@102](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@102]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#102, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#102, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@103]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@103]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#103, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#103, addr))))));

    // return $t2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1489:5+1
    assume {:print "$at(11,69246,69247)"} true;
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1489:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_authentication_key [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:5+442
procedure {:timeLimit 40} $1_DiemAccount_create_authentication_key$verify(_$t0: int, _$t1: Vec (int)) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: bool;
    var $t4: int;
    var $t5: $Mutation (Vec (int));
    var $t6: int;
    var $t7: int;
    var $t8: Vec (int);
    var $t9: Vec (int);
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: Vec (int);
    var $t0: int;
    var $t1: Vec (int);
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_DiemAccount_$memory#142: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t5));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:5+442
    assume {:print "$at(11,51992,52434)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:5+442
    assume $IsValid'vec'u8''($t1);

    // @142 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:5+1
    $1_DiemAccount_DiemAccount_$memory#142 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:5+1
    assume {:print "$track_local(29,7,0):", $t0} $t0 == $t0;

    // trace_local[auth_key_prefix]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:5+1
    assume {:print "$track_local(29,7,1):", $t1} $t1 == $t1;

    // $t2 := $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1151:13+18
    assume {:print "$at(11,52095,52113)"} true;
    $t2 := $t1;

    // trace_local[authentication_key]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1151:13+18
    assume {:print "$track_local(29,7,2):", $t2} $t2 == $t2;

    // $t5 := borrow_local($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1153:13+23
    assume {:print "$at(11,52169,52192)"} true;
    $t5 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t6 := Signer::borrow_address($t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1153:52+31
    call $t6 := $1_Signer_borrow_address($t0);
    if ($abort_flag) {
        assume {:print "$at(11,52208,52239)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,7):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t8 := BCS::to_bytes<address>($t6) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1153:38+46
    call $t8 := $1_BCS_to_bytes'address'($t6);
    if ($abort_flag) {
        assume {:print "$at(11,52194,52240)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,7):", $t7} $t7 == $t7;
        goto L3;
    }

    // Vector::append<u8>($t5, $t8) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1152:9+109
    assume {:print "$at(11,52141,52250)"} true;
    call $t5 := $1_Vector_append'u8'($t5, $t8);
    if ($abort_flag) {
        assume {:print "$at(11,52141,52250)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,7):", $t7} $t7 == $t7;
        goto L3;
    }

    // write_back[LocalRoot($t2)@]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1152:9+109
    $t2 := $Dereference($t5);

    // $t9 := copy($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1156:28+19
    assume {:print "$at(11,52295,52314)"} true;
    $t9 := $t2;

    // $t10 := Vector::length<u8>($t9) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1156:13+35
    call $t10 := $1_Vector_length'u8'($t9);
    if ($abort_flag) {
        assume {:print "$at(11,52280,52315)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,7):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t11 := 32 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1156:52+2
    $t11 := 32;
    assume $IsValid'u64'($t11);

    // $t12 := ==($t10, $t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1156:49+2
    $t12 := $IsEqual'u64'($t10, $t11);

    // $t13 := 8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1157:38+29
    assume {:print "$at(11,52360,52389)"} true;
    $t13 := 8;
    assume $IsValid'u64'($t13);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1157:13+55
    // >> opaque call: $t13 := Errors::invalid_argument($t12)

    // $t14 := opaque begin: Errors::invalid_argument($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1157:13+55

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1157:13+55
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1157:13+55
    assume $IsEqual'u64'($t14, 7);

    // $t14 := opaque end: Errors::invalid_argument($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1157:13+55

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1155:9+140
    assume {:print "$at(11,52260,52400)"} true;
    assume {:print "$track_local(29,7,4):", $t14} $t14 == $t14;

    // trace_local[tmp#$3]($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1155:9+140
    assume {:print "$track_local(29,7,3):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1155:9+140
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1155:9+140
L1:

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1155:9+140
    assume {:print "$at(11,52260,52400)"} true;
    assume {:print "$track_abort(29,7):", $t14} $t14 == $t14;

    // $t7 := move($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1155:9+140
    $t7 := $t14;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1155:9+140
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1159:9+18
    assume {:print "$at(11,52410,52428)"} true;
L0:

    // $t15 := move($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1159:9+18
    $t15 := $t2;

    // trace_return[0]($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1159:9+18
    assume {:print "$track_return(29,7,0):", $t15} $t15 == $t15;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1160:5+1
    assume {:print "$at(11,52433,52434)"} true;
L2:

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@142]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@142](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#142, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#142, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@142]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@142]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#142, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#142, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@142](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@142]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#142, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#142, addr)))));

    // return $t15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    $ret0 := $t15;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1160:5+1
    assume {:print "$at(11,52433,52434)"} true;
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1160:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_child_vasp_account [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
procedure {:timeLimit 40} $1_DiemAccount_create_child_vasp_account$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: bool) returns ()
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_DiemAccount_AccountOperationsCapability;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: $1_DiemAccount_AccountOperationsCapability;
    var $t23: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t24: $1_DiemAccount_CreateAccountEvent;
    var $t25: $1_DiemAccount_CreateAccountEvent;
    var $t26: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t27: int;
    var $t28: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t29: $1_DiemAccount_CreateAccountEvent;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Roles_RoleId_$memory#439: $Memory $1_Roles_RoleId;
    var $1_VASP_ChildVASP_$memory#440: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#441: $Memory $1_VASP_ParentVASP;
    var $1_Diem_CurrencyInfo'#0'_$memory#442: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#443: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#444: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#445: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#446: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#447: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#448: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemAccount_AccountOperationsCapability_$memory#449: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#450: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#451: $Memory $1_DiemAccount_Balance'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(11,66869,67552)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:234:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume $IsValid'bool'($t3);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:99:9+50
    assume {:print "$at(33,4590,4640)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // @448 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    assume {:print "$at(11,66869,66870)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#448 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @439 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    $1_Roles_RoleId_$memory#439 := $1_Roles_RoleId_$memory;

    // @444 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#444 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @446 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#446 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @442 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#442 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @440 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    $1_VASP_ChildVASP_$memory#440 := $1_VASP_ChildVASP_$memory;

    // @441 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    $1_VASP_ParentVASP_$memory#441 := $1_VASP_ParentVASP_$memory;

    // @447 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    $1_AccountFreezing_FreezingBit_$memory#447 := $1_AccountFreezing_FreezingBit_$memory;

    // @450 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    $1_DiemAccount_DiemAccount_$memory#450 := $1_DiemAccount_DiemAccount_$memory;

    // @449 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    $1_DiemAccount_AccountOperationsCapability_$memory#449 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @443 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#443 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @445 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#445 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // @451 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    $1_DiemAccount_Balance'#0'_$memory#451 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[parent]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    assume {:print "$track_local(29,8,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    assume {:print "$track_local(29,8,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    assume {:print "$track_local(29,8,2):", $t2} $t2 == $t2;

    // trace_local[add_all_currencies]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:5+1
    assume {:print "$track_local(29,8,3):", $t3} $t3 == $t3;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1440:9+38
    // >> opaque call: Roles::assert_parent_vasp_role($t0)
    assume {:print "$at(11,67108,67146)"} true;

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1440:9+38
    assume {:print "$at(11,67108,67146)"} true;

    // assume Identical($t9, Or(Not(exists<Roles::RoleId>($t8)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t8)), 5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1440:9+38
    assume ($t9 == (!$ResourceExists($1_Roles_RoleId_$memory, $t8) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)), 5)));

    // if ($t9) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1440:9+38
    if ($t9) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1440:9+38
L4:

    // assume Or(And(Not(exists<Roles::RoleId>($t8)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t8)), 5), Eq(3, $t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1440:9+38
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t8) && $IsEqual'u8'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)), 5) && $IsEqual'u8'(3, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1440:9+38
    assume {:print "$at(11,67108,67146)"} true;
    assume {:print "$track_abort(29,8):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1440:9+38
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1440:9+38
L3:

    // opaque end: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1440:9+38

    // $t11 := DiemAccount::create_signer($t1) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1441:27+34
    assume {:print "$at(11,67174,67208)"} true;
    call $t11 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(11,67174,67208)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,8):", $t10} $t10 == $t10;
        goto L2;
    }

    // trace_local[new_account]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1441:13+11
    assume {:print "$track_local(29,8,4):", $t11} $t11 == $t11;

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // Roles::new_child_vasp_role($t0, $t11) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1442:9+48
    assume {:print "$at(11,67218,67266)"} true;
    call $1_Roles_new_child_vasp_role($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(11,67218,67266)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,8):", $t10} $t10 == $t10;
        goto L2;
    }

    // assume Identical($t14, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/VASP.move:88:9+48
    assume {:print "$at(33,3978,4026)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t11));

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:99:9+50
    assume {:print "$at(33,4590,4640)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // VASP::publish_child_vasp_credential($t0, $t11) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1443:9+92
    assume {:print "$at(11,67276,67368)"} true;
    call $1_VASP_publish_child_vasp_credential($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(11,67276,67368)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,8):", $t10} $t10 == $t10;
        goto L2;
    }

    // Event::publish_generator($t11) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1447:9+38
    assume {:print "$at(11,67378,67416)"} true;
    call $1_Event_publish_generator($t11);
    if ($abort_flag) {
        assume {:print "$at(11,67378,67416)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,8):", $t10} $t10 == $t10;
        goto L2;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1448:9+43
    // >> opaque call: DiemAccount::make_account($t5, $t2)
    assume {:print "$at(11,67426,67469)"} true;

    // assume Identical($t17, Signer::$address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1106:9+55
    assume {:print "$at(11,49292,49347)"} true;
    assume ($t17 == $1_Signer_$address_of($t11));

    // assume Identical($t18, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1117:9+94
    assume {:print "$at(11,50033,50127)"} true;
    assume ($t18 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t19, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2211:9+44
    assume {:print "$at(11,100936,100980)"} true;
    assume ($t19 == $1_Signer_spec_address_of($t11));

    // assume Identical($t20, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2241:9+44
    assume {:print "$at(11,102524,102568)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t11));

    // assert exists<Roles::RoleId>($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assert {:msg "assert_failed(11,49790,49839): precondition does not hold at this call"}
      $ResourceExists($1_Roles_RoleId_$memory, $t17);

    // opaque begin: DiemAccount::make_account($t11, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49

    // assume Identical($t21, Or(Or(Or(Or(Eq<address>($t17, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq<address>($t17, CoreAddresses::$CORE_CODE_ADDRESS())), exists<AccountFreezing::FreezingBit>($t17)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume ($t21 == (((($IsEqual'address'($t17, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) || $IsEqual'address'($t17, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t17)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t21) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    if ($t21) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
L6:

    // assume Or(Or(Or(Or(And(Eq<address>($t17, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq(7, $t10)), And(Eq<address>($t17, CoreAddresses::$CORE_CODE_ADDRESS()), Eq(7, $t10))), And(exists<AccountFreezing::FreezingBit>($t17), Eq(6, $t10))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))), Eq(5, $t10))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume ((((($IsEqual'address'($t17, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t10)) || ($IsEqual'address'($t17, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t10))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t17) && $IsEqual'u8'(6, $t10))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'u8'(7, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assume {:print "$track_abort(29,8):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
L5:

    // modifies global<DiemAccount::DiemAccount>($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t17, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t17);
    }

    // modifies global<Event::EventHandleGenerator>($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t17, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t17);
    }

    // modifies global<AccountFreezing::FreezingBit>($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t17, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t17);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume Identical($t22, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1118:9+104
    assume {:print "$at(11,50136,50240)"} true;
    assume ($t22 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t23, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t23 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t24, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t11), Roles::spec_get_role_id(Signer::spec_address_of($t11)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t24 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t11), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t11))));

    // assume exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume DiemAccount::$exists_at($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t17);

    // assume AccountFreezing::spec_account_is_not_frozen($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t17);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t22, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t18, select DiemAccount::AccountOperationsCapability.creation_events($t18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t22, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t18, $creation_events#$1_DiemAccount_AccountOperationsCapability($t18)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t17);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t17);

    // assume Identical($t25, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t25 == $t24);

    // assume Identical($t26, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t26 == $t23);

    // emit_event($t25, $t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1448:9+43
    assume {:print "$at(11,67426,67469)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t26, $t25);

    // opaque end: DiemAccount::make_account($t11, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;

    // assume Identical($t27, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:9+60
    assume {:print "$at(11,45382,45442)"} true;
    assume ($t27 == $1_Signer_spec_address_of($t11));

    // DiemAccount::add_currencies_for_account<#0>($t11, $t3) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1449:9+67
    assume {:print "$at(11,67479,67546)"} true;
    call $1_DiemAccount_add_currencies_for_account'#0'($t11, $t3);
    if ($abort_flag) {
        assume {:print "$at(11,67479,67546)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,8):", $t10} $t10 == $t10;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1450:5+1
    assume {:print "$at(11,67551,67552)"} true;
L1:

    // assume Identical($t28, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t28 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t29, pack DiemAccount::CreateAccountEvent($t1, Roles::spec_get_role_id($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t29 == $1_DiemAccount_CreateAccountEvent($t1, $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $t1)));

    // assert Not(exists[@439]<Roles::RoleId>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1466:9+84
    assume {:print "$at(11,68193,68277)"} true;
    assert {:msg "assert_failed(11,68193,68277): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#439, $t1);

    // assert Not(Not(exists[@439]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:543:9+59
    assume {:print "$at(26,24362,24421)"} true;
    assert {:msg "assert_failed(26,24362,24421): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#439, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@439]<Roles::RoleId>($t5)), 5)) at /home/ying/diem/language/diem-framework/modules/Roles.move:544:9+89
    assume {:print "$at(26,24430,24519)"} true;
    assert {:msg "assert_failed(26,24430,24519): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#439, $t5)), 5);

    // assert Not(VASP::$is_vasp[@440, @441]($t1)) at /home/ying/diem/language/diem-framework/modules/VASP.move:101:9+61
    assume {:print "$at(33,4712,4773)"} true;
    assert {:msg "assert_failed(33,4712,4773): function does not abort under this condition"}
      !$1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#440, $1_VASP_ParentVASP_$memory#441, $t1);

    // assert Not(Not(VASP::$is_parent[@441]($t6))) at /home/ying/diem/language/diem-framework/modules/VASP.move:102:9+64
    assume {:print "$at(33,4782,4846)"} true;
    assert {:msg "assert_failed(33,4782,4846): function does not abort under this condition"}
      !!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory#441, $t6);

    // assert Not(Gt(Add(VASP::spec_num_children[@441]($t6), 1), 65536)) at /home/ying/diem/language/diem-framework/modules/VASP.move:103:9+94
    assume {:print "$at(33,4855,4949)"} true;
    assert {:msg "assert_failed(33,4855,4949): function does not abort under this condition"}
      !(($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#441, $t6) + 1) > 65536);

    // assert Not(Not(exists[@439]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:543:9+59
    assume {:print "$at(26,24362,24421)"} true;
    assert {:msg "assert_failed(26,24362,24421): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#439, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@439]<Roles::RoleId>($t7)), 5)) at /home/ying/diem/language/diem-framework/modules/Roles.move:544:9+89
    assume {:print "$at(26,24430,24519)"} true;
    assert {:msg "assert_failed(26,24430,24519): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#439, $t7)), 5);

    // assert Not(Not(Diem::spec_is_currency[@442]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#442);

    // assert Not(And(And($t3, Not(exists[@443]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@444]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !(($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#443, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#444));

    // assert Not(And(And($t3, Not(exists[@445]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@446]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !(($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#445, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#446));

    // assert Not(Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1127:9+85
    assume {:print "$at(11,50697,50782)"} true;
    assert {:msg "assert_failed(11,50697,50782): function does not abort under this condition"}
      !$IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS());

    // assert Not(Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1128:9+83
    assume {:print "$at(11,50791,50874)"} true;
    assert {:msg "assert_failed(11,50791,50874): function does not abort under this condition"}
      !$IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS());

    // assert Not(exists[@447]<AccountFreezing::FreezingBit>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1129:9+84
    assume {:print "$at(11,50883,50967)"} true;
    assert {:msg "assert_failed(11,50883,50967): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#447, $t1);

    // assert Not(And(DiemTimestamp::$is_genesis[@448](), Not(exists[@449]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1132:9+165
    assume {:print "$at(11,51142,51307)"} true;
    assert {:msg "assert_failed(11,51142,51307): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#448) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#449, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert Not(Neq<num>(Add(16, Len<u8>($t2)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1176:9+72
    assume {:print "$at(11,53276,53348)"} true;
    assert {:msg "assert_failed(11,53276,53348): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t2)), 32);

    // assert DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1476:9+30
    assume {:print "$at(11,68713,68743)"} true;
    assert {:msg "assert_failed(11,68713,68743): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert Roles::spec_has_child_VASP_role_addr($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1477:9+57
    assume {:print "$at(11,68752,68809)"} true;
    assert {:msg "assert_failed(11,68752,68809): post-condition does not hold"}
      $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, $t1);

    // assert Eq<u64>(VASP::spec_num_children(Signer::spec_address_of($t0)), Add(VASP::spec_num_children[@441](Signer::spec_address_of[]($t0)), 1)) at /home/ying/diem/language/diem-framework/modules/VASP.move:109:9+82
    assume {:print "$at(33,5066,5148)"} true;
    assert {:msg "assert_failed(33,5066,5148): post-condition does not hold"}
      $IsEqual'u64'($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t0)), ($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#441, $1_Signer_spec_address_of($t0)) + 1));

    // assert VASP::$is_child($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:110:9+29
    assume {:print "$at(33,5157,5186)"} true;
    assert {:msg "assert_failed(33,5157,5186): post-condition does not hold"}
      $1_VASP_$is_child($1_VASP_ChildVASP_$memory, $t1);

    // assert Eq<address>(VASP::spec_parent_address($t1), Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:111:9+55
    assume {:print "$at(33,5195,5250)"} true;
    assert {:msg "assert_failed(33,5195,5250): post-condition does not hold"}
      $IsEqual'address'($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $1_Signer_spec_address_of($t0));

    // assert exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // assert Eq<DiemAccount::Balance<#0>>(global<DiemAccount::Balance<#0>>($t1), pack DiemAccount::Balance<#0>(pack Diem::Diem<#0>(0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_Balance'#0''($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t1), $1_DiemAccount_Balance'#0'($1_Diem_Diem'#0'(0)));

    // assert Implies(And($t3, Not(exists<DiemAccount::Balance<XUS::XUS>>($t1))), exists<DiemAccount::Balance<XUS::XUS>>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      (($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1));

    // assert Implies(And($t3, Not(exists<DiemAccount::Balance<XUS::XUS>>($t1))), Eq<DiemAccount::Balance<XUS::XUS>>(global<DiemAccount::Balance<XUS::XUS>>($t1), pack DiemAccount::Balance<XUS::XUS>(pack Diem::Diem<XUS::XUS>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      (($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1), $1_DiemAccount_Balance'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(0))));

    // assert Implies(And($t3, Not(exists<DiemAccount::Balance<XDX::XDX>>($t1))), exists<DiemAccount::Balance<XDX::XDX>>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      (($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1));

    // assert Implies(And($t3, Not(exists<DiemAccount::Balance<XDX::XDX>>($t1))), Eq<DiemAccount::Balance<XDX::XDX>>(global<DiemAccount::Balance<XDX::XDX>>($t1), pack DiemAccount::Balance<XDX::XDX>(pack Diem::Diem<XDX::XDX>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      (($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1), $1_DiemAccount_Balance'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(0))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@450](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@450]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#450, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#450, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@451]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@451]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#451, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#451, addr))))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t29, $t28)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1146:9+20
    assume {:print "$at(11,51882,51902)"} true;
    assert {:msg "assert_failed(11,51882,51902): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t28, $t29); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t29, $t28)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1451:5+375
    assume {:print "$at(11,67557,67932)"} true;
    assert {:msg "assert_failed(11,67557,67932): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t28, $t29); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1451:5+375
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1450:5+1
    assume {:print "$at(11,67551,67552)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(exists[@439]<Roles::RoleId>($t1), Not(exists[@439]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@439]<Roles::RoleId>($t5)), 5)), VASP::$is_vasp[@440, @441]($t1)), Not(VASP::$is_parent[@441]($t6))), Gt(Add(VASP::spec_num_children[@441]($t6), 1), 65536)), Not(exists[@439]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@439]<Roles::RoleId>($t7)), 5)), Not(Diem::spec_is_currency[@442]<#0>())), And(And($t3, Not(exists[@443]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@444]<XUS::XUS>()))), And(And($t3, Not(exists[@445]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@446]<XDX::XDX>()))), Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]())), Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]())), exists[@447]<AccountFreezing::FreezingBit>($t1)), And(DiemTimestamp::$is_genesis[@448](), Not(exists[@449]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))), Neq<num>(Add(16, Len<u8>($t2)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1451:5+375
    assume {:print "$at(11,67557,67932)"} true;
    assert {:msg "assert_failed(11,67557,67932): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((($ResourceExists($1_Roles_RoleId_$memory#439, $t1) || !$ResourceExists($1_Roles_RoleId_$memory#439, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#439, $t5)), 5)) || $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#440, $1_VASP_ParentVASP_$memory#441, $t1)) || !$1_VASP_$is_parent($1_VASP_ParentVASP_$memory#441, $t6)) || (($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#441, $t6) + 1) > 65536)) || !$ResourceExists($1_Roles_RoleId_$memory#439, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#439, $t7)), 5)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#442)) || (($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#443, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#444))) || (($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#445, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#446))) || $IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS())) || $IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#447, $t1)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#448) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#449, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t2)), 32));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(exists[@439]<Roles::RoleId>($t1), Eq(6, $t10)), And(Not(exists[@439]<Roles::RoleId>($t5)), Eq(5, $t10))), And(Neq<u64>(select Roles::RoleId.role_id(global[@439]<Roles::RoleId>($t5)), 5), Eq(3, $t10))), And(VASP::$is_vasp[@440, @441]($t1), Eq(6, $t10))), And(Not(VASP::$is_parent[@441]($t6)), Eq(7, $t10))), And(Gt(Add(VASP::spec_num_children[@441]($t6), 1), 65536), Eq(8, $t10))), And(Not(exists[@439]<Roles::RoleId>($t7)), Eq(5, $t10))), And(Neq<u64>(select Roles::RoleId.role_id(global[@439]<Roles::RoleId>($t7)), 5), Eq(3, $t10))), And(Not(Diem::spec_is_currency[@442]<#0>()), Eq(5, $t10))), And(And(And($t3, Not(exists[@443]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@444]<XUS::XUS>())), Eq(5, $t10))), And(And(And($t3, Not(exists[@445]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@446]<XDX::XDX>())), Eq(5, $t10))), And(Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]()), Eq(7, $t10))), And(Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]()), Eq(7, $t10))), And(exists[@447]<AccountFreezing::FreezingBit>($t1), Eq(6, $t10))), And(And(DiemTimestamp::$is_genesis[@448](), Not(exists[@449]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))), Eq(5, $t10))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1451:5+375
    assert {:msg "assert_failed(11,67557,67932): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((($ResourceExists($1_Roles_RoleId_$memory#439, $t1) && $IsEqual'u8'(6, $t10)) || (!$ResourceExists($1_Roles_RoleId_$memory#439, $t5) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#439, $t5)), 5) && $IsEqual'u8'(3, $t10))) || ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#440, $1_VASP_ParentVASP_$memory#441, $t1) && $IsEqual'u8'(6, $t10))) || (!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory#441, $t6) && $IsEqual'u8'(7, $t10))) || ((($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#441, $t6) + 1) > 65536) && $IsEqual'u8'(8, $t10))) || (!$ResourceExists($1_Roles_RoleId_$memory#439, $t7) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#439, $t7)), 5) && $IsEqual'u8'(3, $t10))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#442) && $IsEqual'u8'(5, $t10))) || ((($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#443, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#444)) && $IsEqual'u8'(5, $t10))) || ((($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#445, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#446)) && $IsEqual'u8'(5, $t10))) || ($IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t10))) || ($IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t10))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#447, $t1) && $IsEqual'u8'(6, $t10))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#448) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#449, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'u8'(7, $t10)));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1451:5+375
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_designated_dealer [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
procedure {:timeLimit 40} $1_DiemAccount_create_designated_dealer$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: Vec (int), _$t4: bool) returns ()
{
    // declare local variables
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $1_DiemAccount_AccountOperationsCapability;
    var $t24: int;
    var $t25: int;
    var $t26: bool;
    var $t27: $1_DiemAccount_AccountOperationsCapability;
    var $t28: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t29: $1_DiemAccount_CreateAccountEvent;
    var $t30: $1_DiemAccount_CreateAccountEvent;
    var $t31: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t32: int;
    var $t33: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t34: $1_DiemAccount_CreateAccountEvent;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DesignatedDealer_Dealer': $1_DesignatedDealer_Dealer;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'': $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Roles_RoleId_$memory#487: $Memory $1_Roles_RoleId;
    var $1_DesignatedDealer_Dealer_$memory#488: $Memory $1_DesignatedDealer_Dealer;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#489: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#490: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $1_Diem_Preburn'$1_XUS_XUS'_$memory#491: $Memory $1_Diem_Preburn'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'#0'_$memory#492: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#493: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#494: $Memory $1_Diem_Preburn'#0';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#495: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#496: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#497: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#498: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#499: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemAccount_AccountOperationsCapability_$memory#500: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#501: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#502: $Memory $1_DiemAccount_Balance'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(11,61422,62311)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume $IsValid'bool'($t4);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+889
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // @499 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    assume {:print "$at(11,61422,61423)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#499 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @487 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_Roles_RoleId_$memory#487 := $1_Roles_RoleId_$memory;

    // @489 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#489 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @491 := save_mem(Diem::Preburn<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_Diem_Preburn'$1_XUS_XUS'_$memory#491 := $1_Diem_Preburn'$1_XUS_XUS'_$memory;

    // @490 := save_mem(Diem::PreburnQueue<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#490 := $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory;

    // @497 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#497 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @492 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#492 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @494 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_Diem_Preburn'#0'_$memory#494 := $1_Diem_Preburn'#0'_$memory;

    // @493 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_Diem_PreburnQueue'#0'_$memory#493 := $1_Diem_PreburnQueue'#0'_$memory;

    // @488 := save_mem(DesignatedDealer::Dealer) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_DesignatedDealer_Dealer_$memory#488 := $1_DesignatedDealer_Dealer_$memory;

    // @498 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_AccountFreezing_FreezingBit_$memory#498 := $1_AccountFreezing_FreezingBit_$memory;

    // @501 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_DiemAccount_DiemAccount_$memory#501 := $1_DiemAccount_DiemAccount_$memory;

    // @500 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_DiemAccount_AccountOperationsCapability_$memory#500 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @495 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#495 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @496 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#496 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // @502 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    $1_DiemAccount_Balance'#0'_$memory#502 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[creator_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    assume {:print "$track_local(29,9,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    assume {:print "$track_local(29,9,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    assume {:print "$track_local(29,9,2):", $t2} $t2 == $t2;

    // trace_local[human_name]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    assume {:print "$track_local(29,9,3):", $t3} $t3 == $t3;

    // trace_local[add_all_currencies]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1332:5+1
    assume {:print "$track_local(29,9,4):", $t4} $t4 == $t4;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1339:9+50
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(11,61704,61754)"} true;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1339:9+50
    assume {:print "$at(11,61704,61754)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1339:9+50
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t8) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1339:9+50
    if ($t8) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1339:9+50
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1339:9+50
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'u8'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1) && $IsEqual'u8'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1339:9+50
    assume {:print "$at(11,61704,61754)"} true;
    assume {:print "$track_abort(29,9):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1339:9+50
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1339:9+50
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1339:9+50

    // $t10 := DiemAccount::create_signer($t1) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1340:30+34
    assume {:print "$at(11,61785,61819)"} true;
    call $t10 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(11,61785,61819)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[new_dd_account]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1340:13+14
    assume {:print "$track_local(29,9,5):", $t10} $t10 == $t10;

    // Event::publish_generator($t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1341:9+41
    assume {:print "$at(11,61829,61870)"} true;
    call $1_Event_publish_generator($t10);
    if ($abort_flag) {
        assume {:print "$at(11,61829,61870)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // Roles::new_designated_dealer_role($t0, $t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:9+67
    assume {:print "$at(11,61880,61947)"} true;
    call $1_Roles_new_designated_dealer_role($t0, $t10);
    if ($abort_flag) {
        assume {:print "$at(11,61880,61947)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
    // >> opaque call: DesignatedDealer::publish_designated_dealer_credential<#0>($t6, $t0, $t4)
    assume {:print "$at(11,61957,62075)"} true;

    // assume Identical($t13, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:82:9+42
    assume {:print "$at(9,3075,3117)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t10));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t10));

    // opaque begin: DesignatedDealer::publish_designated_dealer_credential<#0>($t10, $t0, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
    assume {:print "$at(11,61957,62075)"} true;

    // assume Identical($t16, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<Roles::RoleId>($t14)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), Not(exists<Roles::RoleId>($t15))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 2)), exists<DesignatedDealer::Dealer>($t13)), And($t4, Diem::$is_synthetic_currency<XUS::XUS>())), And($t4, exists<Diem::PreburnQueue<XUS::XUS>>($t13))), And($t4, exists<Diem::Preburn<XUS::XUS>>($t13))), And($t4, Not(Diem::spec_is_currency<XUS::XUS>()))), And(Not($t4), Diem::$is_synthetic_currency<#0>())), And(Not($t4), exists<Diem::PreburnQueue<#0>>($t13))), And(Not($t4), exists<Diem::Preburn<#0>>($t13))), And(Not($t4), Not(Diem::spec_is_currency<#0>())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
    assume ($t16 == (((((((((((((!$ResourceExists($1_Roles_RoleId_$memory, $t14) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_Roles_RoleId_$memory, $t15)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 2)) || $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t13)) || ($t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || ($t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t13))) || ($t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t13))) || ($t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || (!$t4 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))) || (!$t4 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t13))) || (!$t4 && $ResourceExists($1_Diem_Preburn'#0'_$memory, $t13))) || (!$t4 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))));

    // if ($t16) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
    if ($t16) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
L6:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t9))), And(Not(exists<Roles::RoleId>($t15)), Eq(5, $t9))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 2), Eq(3, $t9))), And(exists<DesignatedDealer::Dealer>($t13), Eq(6, $t9))), And(And($t4, Diem::$is_synthetic_currency<XUS::XUS>()), Eq(7, $t9))), And(And($t4, exists<Diem::PreburnQueue<XUS::XUS>>($t13)), Eq(6, $t9))), And(And($t4, exists<Diem::Preburn<XUS::XUS>>($t13)), Eq(1, $t9))), And(And($t4, Not(Diem::spec_is_currency<XUS::XUS>())), Eq(5, $t9))), And(And(Not($t4), Diem::$is_synthetic_currency<#0>()), Eq(7, $t9))), And(And(Not($t4), exists<Diem::PreburnQueue<#0>>($t13)), Eq(6, $t9))), And(And(Not($t4), exists<Diem::Preburn<#0>>($t13)), Eq(1, $t9))), And(And(Not($t4), Not(Diem::spec_is_currency<#0>())), Eq(5, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
    assume ((((((((((((((!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 1) && $IsEqual'u8'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t9))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t15) && $IsEqual'u8'(5, $t9))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 2) && $IsEqual'u8'(3, $t9))) || ($ResourceExists($1_DesignatedDealer_Dealer_$memory, $t13) && $IsEqual'u8'(6, $t9))) || (($t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'u8'(7, $t9))) || (($t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t13)) && $IsEqual'u8'(6, $t9))) || (($t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t13)) && $IsEqual'u8'(1, $t9))) || (($t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'u8'(5, $t9))) || ((!$t4 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'u8'(7, $t9))) || ((!$t4 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t13)) && $IsEqual'u8'(6, $t9))) || ((!$t4 && $ResourceExists($1_Diem_Preburn'#0'_$memory, $t13)) && $IsEqual'u8'(1, $t9))) || ((!$t4 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'u8'(5, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
    assume {:print "$at(11,61957,62075)"} true;
    assume {:print "$track_abort(29,9):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
L5:

    // modifies global<DesignatedDealer::Dealer>($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DesignatedDealer_Dealer';
        $1_DesignatedDealer_Dealer_$memory := $ResourceUpdate($1_DesignatedDealer_Dealer_$memory, $t13, $temp_0'$1_DesignatedDealer_Dealer');
    } else {
        $1_DesignatedDealer_Dealer_$memory := $ResourceRemove($1_DesignatedDealer_Dealer_$memory, $t13);
    }

    // modifies global<Event::EventHandleGenerator>($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t13, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t13);
    }

    // modifies global<Diem::PreburnQueue<#0>>($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t13, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t13);
    }

    // modifies global<Diem::PreburnQueue<XUS::XUS>>($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'';
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t13, $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'');
    } else {
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t13);
    }

    // assume exists<DesignatedDealer::Dealer>($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118
    assume $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t13);

    // opaque end: DesignatedDealer::publish_designated_dealer_credential<#0>($t10, $t0, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1343:9+118

    // assume Identical($t17, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:562:9+44
    assume {:print "$at(26,25164,25208)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t10));

    // assume Identical($t18, select Roles::RoleId.role_id(global<Roles::RoleId>($t17))) at /home/ying/diem/language/diem-framework/modules/Roles.move:564:9+43
    assume {:print "$at(26,25285,25328)"} true;
    assume ($t18 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)));

    // assume Identical($t19, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t19 == $1_Signer_spec_address_of($t0));

    // assume Identical($t20, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:562:9+44
    assume {:print "$at(26,25164,25208)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t10));

    // assume Identical($t21, select Roles::RoleId.role_id(global<Roles::RoleId>($t20))) at /home/ying/diem/language/diem-framework/modules/Roles.move:564:9+43
    assume {:print "$at(26,25285,25328)"} true;
    assume ($t21 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)));

    // DualAttestation::publish_credential($t10, $t0, $t3) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1344:9+81
    assume {:print "$at(11,62085,62166)"} true;
    call $1_DualAttestation_publish_credential($t10, $t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(11,62085,62166)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1345:9+46
    // >> opaque call: DiemAccount::make_account($t6, $t2)
    assume {:print "$at(11,62176,62222)"} true;

    // assume Identical($t22, Signer::$address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1106:9+55
    assume {:print "$at(11,49292,49347)"} true;
    assume ($t22 == $1_Signer_$address_of($t10));

    // assume Identical($t23, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1117:9+94
    assume {:print "$at(11,50033,50127)"} true;
    assume ($t23 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t24, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2211:9+44
    assume {:print "$at(11,100936,100980)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t10));

    // assume Identical($t25, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2241:9+44
    assume {:print "$at(11,102524,102568)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t10));

    // assert exists<Roles::RoleId>($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assert {:msg "assert_failed(11,49790,49839): precondition does not hold at this call"}
      $ResourceExists($1_Roles_RoleId_$memory, $t22);

    // opaque begin: DiemAccount::make_account($t10, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49

    // assume Identical($t26, Or(Or(Or(Or(Eq<address>($t22, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq<address>($t22, CoreAddresses::$CORE_CODE_ADDRESS())), exists<AccountFreezing::FreezingBit>($t22)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume ($t26 == (((($IsEqual'address'($t22, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) || $IsEqual'address'($t22, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t22)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t26) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    if ($t26) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
L8:

    // assume Or(Or(Or(Or(And(Eq<address>($t22, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq(7, $t9)), And(Eq<address>($t22, CoreAddresses::$CORE_CODE_ADDRESS()), Eq(7, $t9))), And(exists<AccountFreezing::FreezingBit>($t22), Eq(6, $t9))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))), Eq(5, $t9))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume ((((($IsEqual'address'($t22, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t9)) || ($IsEqual'address'($t22, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t9))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t22) && $IsEqual'u8'(6, $t9))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t9))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'u8'(7, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assume {:print "$track_abort(29,9):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
L7:

    // modifies global<DiemAccount::DiemAccount>($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t22, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t22);
    }

    // modifies global<Event::EventHandleGenerator>($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t22, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t22);
    }

    // modifies global<AccountFreezing::FreezingBit>($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t22, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t22);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume Identical($t27, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1118:9+104
    assume {:print "$at(11,50136,50240)"} true;
    assume ($t27 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t28, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t28 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t29, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t10), Roles::spec_get_role_id(Signer::spec_address_of($t10)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t29 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t10), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t10))));

    // assume exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume DiemAccount::$exists_at($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t22);

    // assume AccountFreezing::spec_account_is_not_frozen($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t22);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t27, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t23, select DiemAccount::AccountOperationsCapability.creation_events($t23))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t27, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t23, $creation_events#$1_DiemAccount_AccountOperationsCapability($t23)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t22);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t22);

    // assume Identical($t30, $t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t30 == $t29);

    // assume Identical($t31, $t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t31 == $t28);

    // emit_event($t30, $t31) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1345:9+46
    assume {:print "$at(11,62176,62222)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t31, $t30);

    // opaque end: DiemAccount::make_account($t10, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;

    // assume Identical($t32, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:9+60
    assume {:print "$at(11,45382,45442)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t10));

    // DiemAccount::add_currencies_for_account<#0>($t10, $t4) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1346:9+73
    assume {:print "$at(11,62232,62305)"} true;
    call $1_DiemAccount_add_currencies_for_account'#0'($t10, $t4);
    if ($abort_flag) {
        assume {:print "$at(11,62232,62305)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1347:5+1
    assume {:print "$at(11,62310,62311)"} true;
L1:

    // assume Identical($t33, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t33 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t34, pack DiemAccount::CreateAccountEvent($t1, Roles::spec_get_role_id($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t34 == $1_DiemAccount_CreateAccountEvent($t1, $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $t1)));

    // assert Not(exists[@487]<Roles::RoleId>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1361:9+84
    assume {:print "$at(11,62794,62878)"} true;
    assert {:msg "assert_failed(11,62794,62878): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#487, $t1);

    // assert Not(exists[@488]<DesignatedDealer::Dealer>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1362:9+95
    assume {:print "$at(11,62887,62982)"} true;
    assert {:msg "assert_failed(11,62887,62982): function does not abort under this condition"}
      !$ResourceExists($1_DesignatedDealer_Dealer_$memory#488, $t1);

    // assert Not(Not(exists[@487]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#487, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@487]<Roles::RoleId>($t6)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#487, $t6)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(And($t4, Diem::$is_synthetic_currency[@489]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:125:9+80
    assume {:print "$at(9,5130,5210)"} true;
    assert {:msg "assert_failed(9,5130,5210): function does not abort under this condition"}
      !($t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#489));

    // assert Not(And($t4, exists[@490]<Diem::PreburnQueue<XUS::XUS>>($t1))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:126:9+87
    assume {:print "$at(9,5219,5306)"} true;
    assert {:msg "assert_failed(9,5219,5306): function does not abort under this condition"}
      !($t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#490, $t1));

    // assert Not(And($t4, exists[@491]<Diem::Preburn<XUS::XUS>>($t1))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:127:9+78
    assume {:print "$at(9,5315,5393)"} true;
    assert {:msg "assert_failed(9,5315,5393): function does not abort under this condition"}
      !($t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#491, $t1));

    // assert Not(And($t4, Not(Diem::spec_is_currency[@489]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !($t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#489));

    // assert Not(And(Not($t4), Diem::$is_synthetic_currency[@492]<#0>())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:125:9+80
    assume {:print "$at(9,5130,5210)"} true;
    assert {:msg "assert_failed(9,5130,5210): function does not abort under this condition"}
      !(!$t4 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#492));

    // assert Not(And(Not($t4), exists[@493]<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:126:9+87
    assume {:print "$at(9,5219,5306)"} true;
    assert {:msg "assert_failed(9,5219,5306): function does not abort under this condition"}
      !(!$t4 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#493, $t1));

    // assert Not(And(Not($t4), exists[@494]<Diem::Preburn<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:127:9+78
    assume {:print "$at(9,5315,5393)"} true;
    assert {:msg "assert_failed(9,5315,5393): function does not abort under this condition"}
      !(!$t4 && $ResourceExists($1_Diem_Preburn'#0'_$memory#494, $t1));

    // assert Not(And(Not($t4), Not(Diem::spec_is_currency[@492]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !(!$t4 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#492));

    // assert Not(Not(Diem::spec_is_currency[@492]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#492);

    // assert Not(And(And($t4, Not(exists[@495]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@489]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !(($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#495, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#489));

    // assert Not(And(And($t4, Not(exists[@496]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@497]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !(($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#496, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#497));

    // assert Not(Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1127:9+85
    assume {:print "$at(11,50697,50782)"} true;
    assert {:msg "assert_failed(11,50697,50782): function does not abort under this condition"}
      !$IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS());

    // assert Not(Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1128:9+83
    assume {:print "$at(11,50791,50874)"} true;
    assert {:msg "assert_failed(11,50791,50874): function does not abort under this condition"}
      !$IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS());

    // assert Not(exists[@498]<AccountFreezing::FreezingBit>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1129:9+84
    assume {:print "$at(11,50883,50967)"} true;
    assert {:msg "assert_failed(11,50883,50967): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#498, $t1);

    // assert Not(And(DiemTimestamp::$is_genesis[@499](), Not(exists[@500]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1132:9+165
    assume {:print "$at(11,51142,51307)"} true;
    assert {:msg "assert_failed(11,51142,51307): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#499) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#500, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert Not(Neq<num>(Add(16, Len<u8>($t2)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1176:9+72
    assume {:print "$at(11,53276,53348)"} true;
    assert {:msg "assert_failed(11,53276,53348): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t2)), 32);

    // assert exists<DesignatedDealer::Dealer>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1371:9+62
    assume {:print "$at(11,63455,63517)"} true;
    assert {:msg "assert_failed(11,63455,63517): post-condition does not hold"}
      $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t1);

    // assert DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1372:9+39
    assume {:print "$at(11,63526,63565)"} true;
    assert {:msg "assert_failed(11,63526,63565): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert Roles::spec_has_designated_dealer_role_addr($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1373:9+73
    assume {:print "$at(11,63574,63647)"} true;
    assert {:msg "assert_failed(11,63574,63647): post-condition does not hold"}
      $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, $t1);

    // assert exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // assert Eq<DiemAccount::Balance<#0>>(global<DiemAccount::Balance<#0>>($t1), pack DiemAccount::Balance<#0>(pack Diem::Diem<#0>(0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_Balance'#0''($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t1), $1_DiemAccount_Balance'#0'($1_Diem_Diem'#0'(0)));

    // assert Implies(And($t4, Not(exists<DiemAccount::Balance<XUS::XUS>>($t1))), exists<DiemAccount::Balance<XUS::XUS>>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      (($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1));

    // assert Implies(And($t4, Not(exists<DiemAccount::Balance<XUS::XUS>>($t1))), Eq<DiemAccount::Balance<XUS::XUS>>(global<DiemAccount::Balance<XUS::XUS>>($t1), pack DiemAccount::Balance<XUS::XUS>(pack Diem::Diem<XUS::XUS>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      (($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1), $1_DiemAccount_Balance'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(0))));

    // assert Implies(And($t4, Not(exists<DiemAccount::Balance<XDX::XDX>>($t1))), exists<DiemAccount::Balance<XDX::XDX>>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      (($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1));

    // assert Implies(And($t4, Not(exists<DiemAccount::Balance<XDX::XDX>>($t1))), Eq<DiemAccount::Balance<XDX::XDX>>(global<DiemAccount::Balance<XDX::XDX>>($t1), pack DiemAccount::Balance<XDX::XDX>(pack Diem::Diem<XDX::XDX>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      (($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1), $1_DiemAccount_Balance'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(0))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@501](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@501]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#501, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#501, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@502]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@502]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#502, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#502, addr))))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t34, $t33)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1146:9+20
    assume {:print "$at(11,51882,51902)"} true;
    assert {:msg "assert_failed(11,51882,51902): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t33, $t34); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t34, $t33)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:5+186
    assume {:print "$at(11,62317,62503)"} true;
    assert {:msg "assert_failed(11,62317,62503): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t33, $t34); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:5+186
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1347:5+1
    assume {:print "$at(11,62310,62311)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(exists[@487]<Roles::RoleId>($t1), exists[@488]<DesignatedDealer::Dealer>($t1)), Not(exists[@487]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@487]<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), And($t4, Diem::$is_synthetic_currency[@489]<XUS::XUS>())), And($t4, exists[@490]<Diem::PreburnQueue<XUS::XUS>>($t1))), And($t4, exists[@491]<Diem::Preburn<XUS::XUS>>($t1))), And($t4, Not(Diem::spec_is_currency[@489]<XUS::XUS>()))), And(Not($t4), Diem::$is_synthetic_currency[@492]<#0>())), And(Not($t4), exists[@493]<Diem::PreburnQueue<#0>>($t1))), And(Not($t4), exists[@494]<Diem::Preburn<#0>>($t1))), And(Not($t4), Not(Diem::spec_is_currency[@492]<#0>()))), Not(Diem::spec_is_currency[@492]<#0>())), And(And($t4, Not(exists[@495]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@489]<XUS::XUS>()))), And(And($t4, Not(exists[@496]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@497]<XDX::XDX>()))), Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]())), Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]())), exists[@498]<AccountFreezing::FreezingBit>($t1)), And(DiemTimestamp::$is_genesis[@499](), Not(exists[@500]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))), Neq<num>(Add(16, Len<u8>($t2)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:5+186
    assume {:print "$at(11,62317,62503)"} true;
    assert {:msg "assert_failed(11,62317,62503): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((($ResourceExists($1_Roles_RoleId_$memory#487, $t1) || $ResourceExists($1_DesignatedDealer_Dealer_$memory#488, $t1)) || !$ResourceExists($1_Roles_RoleId_$memory#487, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#487, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || ($t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#489))) || ($t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#490, $t1))) || ($t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#491, $t1))) || ($t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#489))) || (!$t4 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#492))) || (!$t4 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#493, $t1))) || (!$t4 && $ResourceExists($1_Diem_Preburn'#0'_$memory#494, $t1))) || (!$t4 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#492))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#492)) || (($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#495, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#489))) || (($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#496, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#497))) || $IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS())) || $IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#498, $t1)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#499) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#500, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t2)), 32));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(exists[@487]<Roles::RoleId>($t1), Eq(6, $t9)), And(exists[@488]<DesignatedDealer::Dealer>($t1), Eq(6, $t9))), And(Not(exists[@487]<Roles::RoleId>($t6)), Eq(5, $t9))), And(Neq<u64>(select Roles::RoleId.role_id(global[@487]<Roles::RoleId>($t6)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t9))), And(And($t4, Diem::$is_synthetic_currency[@489]<XUS::XUS>()), Eq(7, $t9))), And(And($t4, exists[@490]<Diem::PreburnQueue<XUS::XUS>>($t1)), Eq(6, $t9))), And(And($t4, exists[@491]<Diem::Preburn<XUS::XUS>>($t1)), Eq(1, $t9))), And(And($t4, Not(Diem::spec_is_currency[@489]<XUS::XUS>())), Eq(5, $t9))), And(And(Not($t4), Diem::$is_synthetic_currency[@492]<#0>()), Eq(7, $t9))), And(And(Not($t4), exists[@493]<Diem::PreburnQueue<#0>>($t1)), Eq(6, $t9))), And(And(Not($t4), exists[@494]<Diem::Preburn<#0>>($t1)), Eq(1, $t9))), And(And(Not($t4), Not(Diem::spec_is_currency[@492]<#0>())), Eq(5, $t9))), And(Not(Diem::spec_is_currency[@492]<#0>()), Eq(5, $t9))), And(And(And($t4, Not(exists[@495]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@489]<XUS::XUS>())), Eq(5, $t9))), And(And(And($t4, Not(exists[@496]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@497]<XDX::XDX>())), Eq(5, $t9))), And(Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]()), Eq(7, $t9))), And(Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]()), Eq(7, $t9))), And(exists[@498]<AccountFreezing::FreezingBit>($t1), Eq(6, $t9))), And(And(DiemTimestamp::$is_genesis[@499](), Not(exists[@500]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))), Eq(5, $t9))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:5+186
    assert {:msg "assert_failed(11,62317,62503): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((($ResourceExists($1_Roles_RoleId_$memory#487, $t1) && $IsEqual'u8'(6, $t9)) || ($ResourceExists($1_DesignatedDealer_Dealer_$memory#488, $t1) && $IsEqual'u8'(6, $t9))) || (!$ResourceExists($1_Roles_RoleId_$memory#487, $t6) && $IsEqual'u8'(5, $t9))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#487, $t6)), 1) && $IsEqual'u8'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t9))) || (($t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#489)) && $IsEqual'u8'(7, $t9))) || (($t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#490, $t1)) && $IsEqual'u8'(6, $t9))) || (($t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#491, $t1)) && $IsEqual'u8'(1, $t9))) || (($t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#489)) && $IsEqual'u8'(5, $t9))) || ((!$t4 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#492)) && $IsEqual'u8'(7, $t9))) || ((!$t4 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#493, $t1)) && $IsEqual'u8'(6, $t9))) || ((!$t4 && $ResourceExists($1_Diem_Preburn'#0'_$memory#494, $t1)) && $IsEqual'u8'(1, $t9))) || ((!$t4 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#492)) && $IsEqual'u8'(5, $t9))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#492) && $IsEqual'u8'(5, $t9))) || ((($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#495, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#489)) && $IsEqual'u8'(5, $t9))) || ((($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#496, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#497)) && $IsEqual'u8'(5, $t9))) || ($IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t9))) || ($IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t9))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#498, $t1) && $IsEqual'u8'(6, $t9))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#499) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#500, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t9))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'u8'(7, $t9)));

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:5+186
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_diem_root_account [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
procedure {:timeLimit 40} $1_DiemAccount_create_diem_root_account$verify(_$t0: Vec (int)) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: $1_AccountLimits_AccountLimitMutationCapability;
    var $t21: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t22: $1_DiemAccount_AccountOperationsCapability;
    var $t23: int;
    var $t24: bool;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent';
    var $t29: $1_DiemAccount_DiemWriteSetManager;
    var $t30: int;
    var $t31: $1_DiemAccount_AccountOperationsCapability;
    var $t32: int;
    var $t33: int;
    var $t34: bool;
    var $t35: $1_DiemAccount_AccountOperationsCapability;
    var $t36: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t37: $1_DiemAccount_CreateAccountEvent;
    var $t38: $1_DiemAccount_CreateAccountEvent;
    var $t39: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t40: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t41: $1_DiemAccount_CreateAccountEvent;
    var $t0: Vec (int);
    var $1_SlidingNonce_SlidingNonce_$modifies: [int]bool;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $1_Event_EventHandleGenerator_$modifies: [int]bool;
    var $1_AccountFreezing_FreezingBit_$modifies: [int]bool;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $1_DiemAccount_AccountOperationsCapability_$modifies: [int]bool;
    var $1_DiemAccount_DiemWriteSetManager_$modifies: [int]bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'$1_SlidingNonce_SlidingNonce': $1_SlidingNonce_SlidingNonce;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_SlidingNonce_SlidingNonce_$memory#389: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_DiemAccount_AccountOperationsCapability_$memory#390: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemWriteSetManager_$memory#391: $Memory $1_DiemAccount_DiemWriteSetManager;
    var $1_AccountFreezing_FreezingBit_$memory#392: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#393: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Roles_RoleId_$memory#394: $Memory $1_Roles_RoleId;
    var $1_DiemAccount_DiemAccount_$memory#395: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_AccountOperationsCapability_$memory#636: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemWriteSetManager_$memory#637: $Memory $1_DiemAccount_DiemWriteSetManager;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,53705,55014)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    assume $IsValid'vec'u8''($t0);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume Identical($t6, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1227:9+49
    assume {:print "$at(11,55369,55418)"} true;
    assume ($t6 == $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Identical($t7, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1251:9+49
    assume {:print "$at(11,56713,56762)"} true;
    assume ($t7 == $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume CanModify<Event::EventHandleGenerator>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1228:9+54
    assume {:print "$at(11,55427,55481)"} true;
    assume $1_Event_EventHandleGenerator_$modifies[$t6];

    // assume CanModify<DiemAccount::DiemAccount>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1229:9+38
    assume {:print "$at(11,55490,55528)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t6];

    // assume CanModify<DiemAccount::AccountOperationsCapability>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1230:9+54
    assume {:print "$at(11,55537,55591)"} true;
    assume $1_DiemAccount_AccountOperationsCapability_$modifies[$t6];

    // assume CanModify<DiemAccount::DiemWriteSetManager>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1231:9+46
    assume {:print "$at(11,55600,55646)"} true;
    assume $1_DiemAccount_DiemWriteSetManager_$modifies[$t6];

    // assume CanModify<SlidingNonce::SlidingNonce>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1232:9+53
    assume {:print "$at(11,55655,55708)"} true;
    assume $1_SlidingNonce_SlidingNonce_$modifies[$t6];

    // assume CanModify<Roles::RoleId>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1233:9+40
    assume {:print "$at(11,55717,55757)"} true;
    assume $1_Roles_RoleId_$modifies[$t6];

    // assume CanModify<AccountFreezing::FreezingBit>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1234:9+55
    assume {:print "$at(11,55766,55821)"} true;
    assume $1_AccountFreezing_FreezingBit_$modifies[$t6];

    // assume CanModify<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    assume {:print "$at(26,7701,7731)"} true;
    assume $1_Roles_RoleId_$modifies[$1_CoreAddresses_$DIEM_ROOT_ADDRESS()];

    // @393 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#393 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @389 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_SlidingNonce_SlidingNonce_$memory#389 := $1_SlidingNonce_SlidingNonce_$memory;

    // @394 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_Roles_RoleId_$memory#394 := $1_Roles_RoleId_$memory;

    // @392 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_AccountFreezing_FreezingBit_$memory#392 := $1_AccountFreezing_FreezingBit_$memory;

    // @395 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemAccount_DiemAccount_$memory#395 := $1_DiemAccount_DiemAccount_$memory;

    // @390 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemAccount_AccountOperationsCapability_$memory#390 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @391 := save_mem(DiemAccount::DiemWriteSetManager) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemAccount_DiemWriteSetManager_$memory#391 := $1_DiemAccount_DiemWriteSetManager_$memory;

    // trace_local[auth_key_prefix]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1
    assume {:print "$at(11,53705,53706)"} true;
    assume {:print "$track_local(29,10,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1187:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(11,53825,53856)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1187:9+31

    // assume Identical($t8, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1187:9+31
    assume ($t8 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t8) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1187:9+31
    if ($t8) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1187:9+31
L7:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1187:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1187:9+31
    assume {:print "$at(11,53825,53856)"} true;
    assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1187:9+31
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1187:9+31
L6:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1187:9+31

    // $t10 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1188:40+34
    assume {:print "$at(11,53897,53931)"} true;
    call $t10 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,53897,53931)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t11 := DiemAccount::create_signer($t10) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1188:26+49
    call $t11 := $1_DiemAccount_create_signer($t10);
    if ($abort_flag) {
        assume {:print "$at(11,53883,53932)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;
        goto L5;
    }

    // trace_local[dr_account]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1188:13+10
    assume {:print "$track_local(29,10,1):", $t11} $t11 == $t11;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1189:9+44
    // >> opaque call: CoreAddresses::assert_diem_root($t7)
    assume {:print "$at(11,53942,53986)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1189:9+44

    // assume Identical($t12, Neq<address>(Signer::spec_address_of($t11), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1189:9+44
    assume ($t12 == !$IsEqual'address'($1_Signer_spec_address_of($t11), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t12) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1189:9+44
    if ($t12) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1189:9+44
L9:

    // assume And(Neq<address>(Signer::spec_address_of($t11), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1189:9+44
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t11), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1189:9+44
    assume {:print "$at(11,53942,53986)"} true;
    assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1189:9+44
    goto L5;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1189:9+44
L8:

    // opaque end: CoreAddresses::assert_diem_root($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1189:9+44

    // assert CanModify<Roles::RoleId>(Signer::$address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1190:9+40
    assume {:print "$at(11,53996,54036)"} true;
    assert {:msg "assert_failed(11,53996,54036): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t11)];

    // Roles::grant_diem_root_role($t11) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1190:9+40
    call $1_Roles_grant_diem_root_role($t11);
    if ($abort_flag) {
        assume {:print "$at(11,53996,54036)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;
        goto L5;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34
    // >> opaque call: SlidingNonce::publish($t7)
    assume {:print "$at(11,54046,54080)"} true;

    // assert CanModify<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34
    assert {:msg "assert_failed(11,54046,54080): caller does not have permission to modify `SlidingNonce::SlidingNonce` at given address"}
      $1_SlidingNonce_SlidingNonce_$modifies[$1_Signer_spec_address_of($t11)];

    // opaque begin: SlidingNonce::publish($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34

    // assume Identical($t13, exists<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t11))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34
    assume ($t13 == $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t11)));

    // if ($t13) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34
    if ($t13) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34
L11:

    // assume And(exists<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t11)), Eq(6, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34
    assume ($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t11)) && $IsEqual'u8'(6, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34
    assume {:print "$at(11,54046,54080)"} true;
    assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34
    goto L5;

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34
L10:

    // modifies global<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_SlidingNonce_SlidingNonce';
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceUpdate($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t11), $temp_0'$1_SlidingNonce_SlidingNonce');
    } else {
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceRemove($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t11));
    }

    // assume exists<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34
    assume $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t11));

    // opaque end: SlidingNonce::publish($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1191:9+34

    // Event::publish_generator($t11) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1192:9+37
    assume {:print "$at(11,54090,54127)"} true;
    call $1_Event_publish_generator($t11);
    if ($abort_flag) {
        assume {:print "$at(11,54090,54127)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t14 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1195:50+34
    assume {:print "$at(11,54195,54229)"} true;
    call $t14 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,54195,54229)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t15 := exists<DiemAccount::AccountOperationsCapability>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1195:14+6
    $t15 := $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t14);

    // $t16 := !($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1195:13+1
    call $t16 := $Not($t15);

    // $t17 := 22 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1196:39+30
    assume {:print "$at(11,54270,54300)"} true;
    $t17 := 22;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1196:13+57
    // >> opaque call: $t12 := Errors::already_published($t11)

    // $t18 := opaque begin: Errors::already_published($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1196:13+57

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1196:13+57
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1196:13+57
    assume $IsEqual'u64'($t18, 6);

    // $t18 := opaque end: Errors::already_published($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1196:13+57

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1194:9+173
    assume {:print "$at(11,54138,54311)"} true;
    assume {:print "$track_local(29,10,3):", $t18} $t18 == $t18;

    // trace_local[tmp#$2]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1194:9+173
    assume {:print "$track_local(29,10,2):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1194:9+173
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1194:9+173
L1:

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1194:9+173
    assume {:print "$at(11,54138,54311)"} true;
    assume {:print "$track_abort(29,10):", $t18} $t18 == $t18;

    // $t9 := move($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1194:9+173
    $t9 := $t18;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1194:9+173
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1199:13+11
    assume {:print "$at(11,54342,54353)"} true;
L0:

    // assume Identical($t19, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t19 == $1_Signer_spec_address_of($t11));

    // $t20 := AccountLimits::grant_mutation_capability($t11) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1201:29+53
    assume {:print "$at(11,54425,54478)"} true;
    call $t20 := $1_AccountLimits_grant_mutation_capability($t11);
    if ($abort_flag) {
        assume {:print "$at(11,54425,54478)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t21 := Event::new_event_handle<DiemAccount::CreateAccountEvent>($t11) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1202:34+56
    assume {:print "$at(11,54513,54569)"} true;
    call $t21 := $1_Event_new_event_handle'$1_DiemAccount_CreateAccountEvent'($t11);
    if ($abort_flag) {
        assume {:print "$at(11,54513,54569)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t22 := pack DiemAccount::AccountOperationsCapability($t20, $t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1200:13+217
    assume {:print "$at(11,54367,54584)"} true;
    $t22 := $1_DiemAccount_AccountOperationsCapability($t20, $t21);

    // assert CanModify<DiemAccount::AccountOperationsCapability>($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1198:9+7
    assume {:print "$at(11,54321,54328)"} true;
    assert {:msg "assert_failed(11,54321,54328): caller does not have permission to modify `DiemAccount::AccountOperationsCapability` at given address"}
      $1_DiemAccount_AccountOperationsCapability_$modifies[$t11];

    // @636 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:5+1309
    // state save for global update invariants
    assume {:print "$at(11,53705,55014)"} true;
    $1_DiemAccount_AccountOperationsCapability_$memory#636 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // move_to<DiemAccount::AccountOperationsCapability>($t22, $t11) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1198:9+7
    assume {:print "$at(11,54321,54328)"} true;
    if ($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $t11, $t22);
    }
    if ($abort_flag) {
        assume {:print "$at(11,54321,54328)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;
        goto L5;
    }

    // assert Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume {:print "$at(11,104358,104486)"} true;
    assert {:msg "assert_failed(11,104358,104486): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert Implies(exists[@636]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2297:9+186
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2297:9+186
    assume {:print "$at(11,104992,105178)"} true;
    assert {:msg "assert_failed(11,104992,105178): global memory invariant does not hold"}
      ($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#636, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // $t23 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1206:42+34
    assume {:print "$at(11,54653,54687)"} true;
    call $t23 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,54653,54687)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t24 := exists<DiemAccount::DiemWriteSetManager>($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1206:14+6
    $t24 := $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $t23);

    // $t25 := !($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1206:13+1
    call $t25 := $Not($t24);

    // $t26 := 23 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1207:39+17
    assume {:print "$at(11,54728,54745)"} true;
    $t26 := 23;
    assume $IsValid'u64'($t26);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1207:13+44
    // >> opaque call: $t20 := Errors::already_published($t19)

    // $t27 := opaque begin: Errors::already_published($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1207:13+44

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1207:13+44
    assume $IsValid'u64'($t27);

    // assume Eq<u64>($t27, 6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1207:13+44
    assume $IsEqual'u64'($t27, 6);

    // $t27 := opaque end: Errors::already_published($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1207:13+44

    // trace_local[tmp#$5]($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1205:9+152
    assume {:print "$at(11,54604,54756)"} true;
    assume {:print "$track_local(29,10,5):", $t27} $t27 == $t27;

    // trace_local[tmp#$4]($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1205:9+152
    assume {:print "$track_local(29,10,4):", $t25} $t25 == $t25;

    // if ($t25) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1205:9+152
    if ($t25) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1205:9+152
L3:

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1205:9+152
    assume {:print "$at(11,54604,54756)"} true;
    assume {:print "$track_abort(29,10):", $t27} $t27 == $t27;

    // $t9 := move($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1205:9+152
    $t9 := $t27;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1205:9+152
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1210:13+11
    assume {:print "$at(11,54787,54798)"} true;
L2:

    // $t28 := Event::new_event_handle<DiemAccount::AdminTransactionEvent>($t11) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1212:33+65
    assume {:print "$at(11,54866,54931)"} true;
    call $t28 := $1_Event_new_event_handle'$1_DiemAccount_AdminTransactionEvent'($t11);
    if ($abort_flag) {
        assume {:print "$at(11,54866,54931)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t29 := pack DiemAccount::DiemWriteSetManager($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1211:13+134
    assume {:print "$at(11,54812,54946)"} true;
    $t29 := $1_DiemAccount_DiemWriteSetManager($t28);

    // assert CanModify<DiemAccount::DiemWriteSetManager>($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1209:9+7
    assume {:print "$at(11,54766,54773)"} true;
    assert {:msg "assert_failed(11,54766,54773): caller does not have permission to modify `DiemAccount::DiemWriteSetManager` at given address"}
      $1_DiemAccount_DiemWriteSetManager_$modifies[$t11];

    // @637 := save_mem(DiemAccount::DiemWriteSetManager) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2297:9+186
    // state save for global update invariants
    assume {:print "$at(11,104992,105178)"} true;
    $1_DiemAccount_DiemWriteSetManager_$memory#637 := $1_DiemAccount_DiemWriteSetManager_$memory;

    // move_to<DiemAccount::DiemWriteSetManager>($t29, $t11) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1209:9+7
    assume {:print "$at(11,54766,54773)"} true;
    if ($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemAccount_DiemWriteSetManager_$memory := $ResourceUpdate($1_DiemAccount_DiemWriteSetManager_$memory, $t11, $t29);
    }
    if ($abort_flag) {
        assume {:print "$at(11,54766,54773)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;
        goto L5;
    }

    // assert Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume {:print "$at(11,104557,104677)"} true;
    assert {:msg "assert_failed(11,104557,104677): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert Implies(exists[@637]<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2301:9+182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2301:9+182
    assume {:print "$at(11,105260,105442)"} true;
    assert {:msg "assert_failed(11,105260,105442): global memory invariant does not hold"}
      ($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory#637, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    // >> opaque call: DiemAccount::make_account($t7, $t0)
    assume {:print "$at(11,54966,55008)"} true;

    // assume Identical($t30, Signer::$address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1106:9+55
    assume {:print "$at(11,49292,49347)"} true;
    assume ($t30 == $1_Signer_$address_of($t11));

    // assume Identical($t31, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1117:9+94
    assume {:print "$at(11,50033,50127)"} true;
    assume ($t31 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t32, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2211:9+44
    assume {:print "$at(11,100936,100980)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t11));

    // assume Identical($t33, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2241:9+44
    assume {:print "$at(11,102524,102568)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t11));

    // assert exists<Roles::RoleId>($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assert {:msg "assert_failed(11,49790,49839): precondition does not hold at this call"}
      $ResourceExists($1_Roles_RoleId_$memory, $t30);

    // assert CanModify<DiemAccount::DiemAccount>($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    assume {:print "$at(11,54966,55008)"} true;
    assert {:msg "assert_failed(11,54966,55008): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t30];

    // assert CanModify<Event::EventHandleGenerator>($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    assert {:msg "assert_failed(11,54966,55008): caller does not have permission to modify `Event::EventHandleGenerator` at given address"}
      $1_Event_EventHandleGenerator_$modifies[$t30];

    // assert CanModify<AccountFreezing::FreezingBit>($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    assert {:msg "assert_failed(11,54966,55008): caller does not have permission to modify `AccountFreezing::FreezingBit` at given address"}
      $1_AccountFreezing_FreezingBit_$modifies[$t30];

    // assert CanModify<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    assert {:msg "assert_failed(11,54966,55008): caller does not have permission to modify `DiemAccount::AccountOperationsCapability` at given address"}
      $1_DiemAccount_AccountOperationsCapability_$modifies[$1_CoreAddresses_$DIEM_ROOT_ADDRESS()];

    // opaque begin: DiemAccount::make_account($t11, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42

    // assume Identical($t34, Or(Or(Or(Or(Eq<address>($t30, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq<address>($t30, CoreAddresses::$CORE_CODE_ADDRESS())), exists<AccountFreezing::FreezingBit>($t30)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())))), Neq<num>(Add(16, Len<u8>($t0)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    assume ($t34 == (((($IsEqual'address'($t30, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) || $IsEqual'address'($t30, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t30)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t0)), 32)));

    // if ($t34) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    if ($t34) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
L13:

    // assume Or(Or(Or(Or(And(Eq<address>($t30, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq(7, $t9)), And(Eq<address>($t30, CoreAddresses::$CORE_CODE_ADDRESS()), Eq(7, $t9))), And(exists<AccountFreezing::FreezingBit>($t30), Eq(6, $t9))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))), Eq(5, $t9))), And(Neq<num>(Add(16, Len<u8>($t0)), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    assume ((((($IsEqual'address'($t30, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t9)) || ($IsEqual'address'($t30, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t9))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t30) && $IsEqual'u8'(6, $t9))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t9))) || (!$IsEqual'num'((16 + LenVec($t0)), 32) && $IsEqual'u8'(7, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    assume {:print "$at(11,54966,55008)"} true;
    assume {:print "$track_abort(29,10):", $t9} $t9 == $t9;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    goto L5;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
L12:

    // modifies global<DiemAccount::DiemAccount>($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t30, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t30);
    }

    // modifies global<Event::EventHandleGenerator>($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t30, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t30);
    }

    // modifies global<AccountFreezing::FreezingBit>($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t30, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t30);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume Identical($t35, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1118:9+104
    assume {:print "$at(11,50136,50240)"} true;
    assume ($t35 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t36, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t36 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t37, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t11), Roles::spec_get_role_id(Signer::spec_address_of($t11)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t37 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t11), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t11))));

    // assume exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume DiemAccount::$exists_at($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30);

    // assume AccountFreezing::spec_account_is_not_frozen($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t30);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t35, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t31, select DiemAccount::AccountOperationsCapability.creation_events($t31))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t35, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t31, $creation_events#$1_DiemAccount_AccountOperationsCapability($t31)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t30);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t30);

    // assume Identical($t38, $t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t38 == $t37);

    // assume Identical($t39, $t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t39 == $t36);

    // emit_event($t38, $t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1215:9+42
    assume {:print "$at(11,54966,55008)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t39, $t38);

    // opaque end: DiemAccount::make_account($t11, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1216:5+1
    assume {:print "$at(11,55013,55014)"} true;
L4:

    // assume Identical($t40, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t40 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t41, pack DiemAccount::CreateAccountEvent(CoreAddresses::$DIEM_ROOT_ADDRESS(), Roles::spec_get_role_id(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t41 == $1_DiemAccount_CreateAccountEvent($1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assert Not(exists[@389]<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1240:9+124
    assume {:print "$at(11,56083,56207)"} true;
    assert {:msg "assert_failed(11,56083,56207): function does not abort under this condition"}
      !$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#389, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(exists[@390]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1242:9+125
    assume {:print "$at(11,56216,56341)"} true;
    assert {:msg "assert_failed(11,56216,56341): function does not abort under this condition"}
      !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#390, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(exists[@391]<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1244:9+117
    assume {:print "$at(11,56350,56467)"} true;
    assert {:msg "assert_failed(11,56350,56467): function does not abort under this condition"}
      !$ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory#391, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(exists[@392]<AccountFreezing::FreezingBit>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1246:9+126
    assume {:print "$at(11,56476,56602)"} true;
    assert {:msg "assert_failed(11,56476,56602): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#392, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(Not(DiemTimestamp::$is_genesis[@393]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:142:9+51
    assume {:print "$at(17,5802,5853)"} true;
    assert {:msg "assert_failed(17,5802,5853): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#393);

    // assert Not(exists[@394]<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/Roles.move:179:9+62
    assume {:print "$at(26,7535,7597)"} true;
    assert {:msg "assert_failed(26,7535,7597): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#394, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(Neq<num>(Add(16, Len<u8>($t0)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1176:9+72
    assume {:print "$at(11,53276,53348)"} true;
    assert {:msg "assert_failed(11,53276,53348): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t0)), 32);

    // assert exists<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Roles.move:180:9+29
    assume {:print "$at(26,7606,7635)"} true;
    assert {:msg "assert_failed(26,7606,7635): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS())), 0) at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+48
    assume {:print "$at(26,7644,7692)"} true;
    assert {:msg "assert_failed(26,7644,7692): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())), 0);

    // assert exists<DiemAccount::AccountOperationsCapability>($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1252:9+53
    assume {:print "$at(11,56771,56824)"} true;
    assert {:msg "assert_failed(11,56771,56824): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t7);

    // assert exists<DiemAccount::DiemWriteSetManager>($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1253:9+45
    assume {:print "$at(11,56833,56878)"} true;
    assert {:msg "assert_failed(11,56833,56878): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $t7);

    // assert exists<SlidingNonce::SlidingNonce>($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1254:9+52
    assume {:print "$at(11,56887,56939)"} true;
    assert {:msg "assert_failed(11,56887,56939): post-condition does not hold"}
      $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $t7);

    // assert Roles::spec_has_diem_root_role_addr($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1255:9+53
    assume {:print "$at(11,56948,57001)"} true;
    assert {:msg "assert_failed(11,56948,57001): post-condition does not hold"}
      $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, $t7);

    // assert DiemAccount::$exists_at($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1256:9+27
    assume {:print "$at(11,57010,57037)"} true;
    assert {:msg "assert_failed(11,57010,57037): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t7);

    // assert AccountFreezing::spec_account_is_not_frozen($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1257:9+61
    assume {:print "$at(11,57046,57107)"} true;
    assert {:msg "assert_failed(11,57046,57107): post-condition does not hold"}
      $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t7);

    // assert DiemAccount::spec_holds_own_key_rotation_cap($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1258:9+49
    assume {:print "$at(11,57116,57165)"} true;
    assert {:msg "assert_failed(11,57116,57165): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t7);

    // assert DiemAccount::spec_holds_own_withdraw_cap($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1259:9+45
    assume {:print "$at(11,57174,57219)"} true;
    assert {:msg "assert_failed(11,57174,57219): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t7);

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@395](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@395]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#395, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#395, addr)))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t41, $t40)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1146:9+20
    assume {:print "$at(11,51882,51902)"} true;
    assert {:msg "assert_failed(11,51882,51902): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t40, $t41); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t41, $t40)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1218:5+291
    assume {:print "$at(11,55020,55311)"} true;
    assert {:msg "assert_failed(11,55020,55311): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t40, $t41); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1218:5+291
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1216:5+1
    assume {:print "$at(11,55013,55014)"} true;
L5:

    // assert Or(Or(Or(Or(Or(Or(exists[@389]<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), exists[@390]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())), exists[@391]<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())), exists[@392]<AccountFreezing::FreezingBit>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Not(DiemTimestamp::$is_genesis[@393]())), exists[@394]<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Neq<num>(Add(16, Len<u8>($t0)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1218:5+291
    assume {:print "$at(11,55020,55311)"} true;
    assert {:msg "assert_failed(11,55020,55311): abort not covered by any of the `aborts_if` clauses"}
      (((((($ResourceExists($1_SlidingNonce_SlidingNonce_$memory#389, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#390, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory#391, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#392, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#393)) || $ResourceExists($1_Roles_RoleId_$memory#394, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$IsEqual'num'((16 + LenVec($t0)), 32));

    // assert Or(Or(Or(Or(Or(Or(And(exists[@389]<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(6, $t9)), And(exists[@390]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(6, $t9))), And(exists[@391]<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(6, $t9))), And(exists[@392]<AccountFreezing::FreezingBit>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(6, $t9))), And(Not(DiemTimestamp::$is_genesis[@393]()), Eq(1, $t9))), And(exists[@394]<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(6, $t9))), And(Neq<num>(Add(16, Len<u8>($t0)), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1218:5+291
    assert {:msg "assert_failed(11,55020,55311): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((($ResourceExists($1_SlidingNonce_SlidingNonce_$memory#389, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t9)) || ($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#390, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t9))) || ($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory#391, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t9))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#392, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t9))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#393) && $IsEqual'u8'(1, $t9))) || ($ResourceExists($1_Roles_RoleId_$memory#394, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t9))) || (!$IsEqual'num'((16 + LenVec($t0)), 32) && $IsEqual'u8'(7, $t9)));

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1218:5+291
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_parent_vasp_account [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
procedure {:timeLimit 40} $1_DiemAccount_create_parent_vasp_account$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: Vec (int), _$t4: bool) returns ()
{
    // declare local variables
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: $1_DiemAccount_AccountOperationsCapability;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: $1_DiemAccount_AccountOperationsCapability;
    var $t29: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t30: $1_DiemAccount_CreateAccountEvent;
    var $t31: $1_DiemAccount_CreateAccountEvent;
    var $t32: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t33: int;
    var $t34: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t35: $1_DiemAccount_CreateAccountEvent;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Roles_RoleId_$memory#453: $Memory $1_Roles_RoleId;
    var $1_VASP_ChildVASP_$memory#454: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#455: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#456: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemId_DiemIdDomains_$memory#457: $Memory $1_DiemId_DiemIdDomains;
    var $1_Diem_CurrencyInfo'#0'_$memory#458: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#459: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#460: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#461: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#462: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#463: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#464: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#465: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#466: $Memory $1_DiemAccount_Balance'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,64189,65076)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:234:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume $IsValid'bool'($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemId::DiemIdDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<DiemId::DiemIdDomain>(select DiemId::DiemIdDomains.domains($rsc))): Le(Len<u8>(select DiemId::DiemIdDomain.domain(Index(select DiemId::DiemIdDomains.domains($rsc), i))), 63), forall i: Range(0, Len<DiemId::DiemIdDomain>(select DiemId::DiemIdDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<DiemId::DiemIdDomain>(select DiemId::DiemIdDomains.domains($rsc))): Neq<DiemId::DiemIdDomain>(Index(select DiemId::DiemIdDomains.domains($rsc), i), Index(select DiemId::DiemIdDomains.domains($rsc), j))), forall $elem: select DiemId::DiemIdDomains.domains($rsc): Le(Len<u8>(select DiemId::DiemIdDomain.domain($elem)), 63))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_DiemId_DiemIdDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemId_DiemIdDomains_$memory, $a_0);
    (($IsValid'$1_DiemId_DiemIdDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_DiemId_DiemIdDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_DiemId_DiemIdDomain(ReadVec($domains#$1_DiemId_DiemIdDomains($rsc), i))) <= 63))))) && (var $range_3 := $Range(0, LenVec($domains#$1_DiemId_DiemIdDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_DiemId_DiemIdDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_DiemId_DiemIdDomain'(ReadVec($domains#$1_DiemId_DiemIdDomains($rsc), i), ReadVec($domains#$1_DiemId_DiemIdDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_DiemId_DiemIdDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_DiemId_DiemIdDomain($elem)) <= 63))))))))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+887
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // @456 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    assume {:print "$at(11,64189,64190)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#456 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @453 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_Roles_RoleId_$memory#453 := $1_Roles_RoleId_$memory;

    // @460 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#460 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @462 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#462 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @458 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#458 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @454 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_VASP_ChildVASP_$memory#454 := $1_VASP_ChildVASP_$memory;

    // @455 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_VASP_ParentVASP_$memory#455 := $1_VASP_ParentVASP_$memory;

    // @457 := save_mem(DiemId::DiemIdDomains) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_DiemId_DiemIdDomains_$memory#457 := $1_DiemId_DiemIdDomains_$memory;

    // @463 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_AccountFreezing_FreezingBit_$memory#463 := $1_AccountFreezing_FreezingBit_$memory;

    // @465 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_DiemAccount_DiemAccount_$memory#465 := $1_DiemAccount_DiemAccount_$memory;

    // @464 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_DiemAccount_AccountOperationsCapability_$memory#464 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @459 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#459 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @461 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#461 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // @466 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    $1_DiemAccount_Balance'#0'_$memory#466 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[creator_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    assume {:print "$track_local(29,11,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    assume {:print "$track_local(29,11,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    assume {:print "$track_local(29,11,2):", $t2} $t2 == $t2;

    // trace_local[human_name]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    assume {:print "$track_local(29,11,3):", $t3} $t3 == $t3;

    // trace_local[add_all_currencies]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1383:5+1
    assume {:print "$track_local(29,11,4):", $t4} $t4 == $t4;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1390:9+50
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(11,64492,64542)"} true;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1390:9+50
    assume {:print "$at(11,64492,64542)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1390:9+50
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t8) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1390:9+50
    if ($t8) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1390:9+50
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1390:9+50
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'u8'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1) && $IsEqual'u8'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1390:9+50
    assume {:print "$at(11,64492,64542)"} true;
    assume {:print "$track_abort(29,11):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1390:9+50
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1390:9+50
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1390:9+50

    // $t10 := DiemAccount::create_signer($t1) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1391:27+34
    assume {:print "$at(11,64570,64604)"} true;
    call $t10 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(11,64570,64604)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,11):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[new_account]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1391:13+11
    assume {:print "$track_local(29,11,5):", $t10} $t10 == $t10;

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // Roles::new_parent_vasp_role($t0, $t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1392:9+58
    assume {:print "$at(11,64614,64672)"} true;
    call $1_Roles_new_parent_vasp_role($t0, $t10);
    if ($abort_flag) {
        assume {:print "$at(11,64614,64672)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,11):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t13, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/VASP.move:58:9+46
    assume {:print "$at(33,2573,2619)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t10));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t10));

    // VASP::publish_parent_vasp_credential($t10, $t0) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1393:9+67
    assume {:print "$at(11,64682,64749)"} true;
    call $1_VASP_publish_parent_vasp_credential($t10, $t0);
    if ($abort_flag) {
        assume {:print "$at(11,64682,64749)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,11):", $t9} $t9 == $t9;
        goto L2;
    }

    // Event::publish_generator($t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1394:9+38
    assume {:print "$at(11,64759,64797)"} true;
    call $1_Event_publish_generator($t10);
    if ($abort_flag) {
        assume {:print "$at(11,64759,64797)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,11):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t16, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:562:9+44
    assume {:print "$at(26,25164,25208)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t10));

    // assume Identical($t17, select Roles::RoleId.role_id(global<Roles::RoleId>($t16))) at /home/ying/diem/language/diem-framework/modules/Roles.move:564:9+43
    assume {:print "$at(26,25285,25328)"} true;
    assume ($t17 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)));

    // assume Identical($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t18 == $1_Signer_spec_address_of($t0));

    // assume Identical($t19, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:562:9+44
    assume {:print "$at(26,25164,25208)"} true;
    assume ($t19 == $1_Signer_spec_address_of($t10));

    // assume Identical($t20, select Roles::RoleId.role_id(global<Roles::RoleId>($t19))) at /home/ying/diem/language/diem-framework/modules/Roles.move:564:9+43
    assume {:print "$at(26,25285,25328)"} true;
    assume ($t20 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t19)));

    // DualAttestation::publish_credential($t10, $t0, $t3) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1395:9+78
    assume {:print "$at(11,64807,64885)"} true;
    call $1_DualAttestation_publish_credential($t10, $t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(11,64807,64885)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,11):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t21, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemId.move:95:9+54
    assume {:print "$at(15,3546,3600)"} true;
    assume ($t21 == $1_Signer_spec_address_of($t10));

    // assume Identical($t22, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:542:9+44
    assume {:print "$at(26,24309,24353)"} true;
    assume ($t22 == $1_Signer_spec_address_of($t10));

    // DiemId::publish_diem_id_domains($t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1396:9+45
    assume {:print "$at(11,64895,64940)"} true;
    call $1_DiemId_publish_diem_id_domains($t10);
    if ($abort_flag) {
        assume {:print "$at(11,64895,64940)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,11):", $t9} $t9 == $t9;
        goto L2;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:9+43
    // >> opaque call: DiemAccount::make_account($t6, $t2)
    assume {:print "$at(11,64950,64993)"} true;

    // assume Identical($t23, Signer::$address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1106:9+55
    assume {:print "$at(11,49292,49347)"} true;
    assume ($t23 == $1_Signer_$address_of($t10));

    // assume Identical($t24, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1117:9+94
    assume {:print "$at(11,50033,50127)"} true;
    assume ($t24 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t25, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2211:9+44
    assume {:print "$at(11,100936,100980)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t10));

    // assume Identical($t26, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2241:9+44
    assume {:print "$at(11,102524,102568)"} true;
    assume ($t26 == $1_Signer_spec_address_of($t10));

    // assert exists<Roles::RoleId>($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assert {:msg "assert_failed(11,49790,49839): precondition does not hold at this call"}
      $ResourceExists($1_Roles_RoleId_$memory, $t23);

    // opaque begin: DiemAccount::make_account($t10, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49

    // assume Identical($t27, Or(Or(Or(Or(Eq<address>($t23, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq<address>($t23, CoreAddresses::$CORE_CODE_ADDRESS())), exists<AccountFreezing::FreezingBit>($t23)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume ($t27 == (((($IsEqual'address'($t23, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) || $IsEqual'address'($t23, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t23)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t27) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    if ($t27) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
L6:

    // assume Or(Or(Or(Or(And(Eq<address>($t23, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq(7, $t9)), And(Eq<address>($t23, CoreAddresses::$CORE_CODE_ADDRESS()), Eq(7, $t9))), And(exists<AccountFreezing::FreezingBit>($t23), Eq(6, $t9))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))), Eq(5, $t9))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume ((((($IsEqual'address'($t23, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t9)) || ($IsEqual'address'($t23, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t9))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t23) && $IsEqual'u8'(6, $t9))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t9))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'u8'(7, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assume {:print "$track_abort(29,11):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
L5:

    // modifies global<DiemAccount::DiemAccount>($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t23, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t23);
    }

    // modifies global<Event::EventHandleGenerator>($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t23, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t23);
    }

    // modifies global<AccountFreezing::FreezingBit>($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t23, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t23);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume Identical($t28, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1118:9+104
    assume {:print "$at(11,50136,50240)"} true;
    assume ($t28 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t29, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t29 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t30, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t10), Roles::spec_get_role_id(Signer::spec_address_of($t10)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t30 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t10), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t10))));

    // assume exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume DiemAccount::$exists_at($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t23);

    // assume AccountFreezing::spec_account_is_not_frozen($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t23);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t28, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t24, select DiemAccount::AccountOperationsCapability.creation_events($t24))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t28, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t24, $creation_events#$1_DiemAccount_AccountOperationsCapability($t24)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t23);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t23);

    // assume Identical($t31, $t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t31 == $t30);

    // assume Identical($t32, $t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t32 == $t29);

    // emit_event($t31, $t32) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:9+43
    assume {:print "$at(11,64950,64993)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t32, $t31);

    // opaque end: DiemAccount::make_account($t10, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;

    // assume Identical($t33, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:9+60
    assume {:print "$at(11,45382,45442)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t10));

    // DiemAccount::add_currencies_for_account<#0>($t10, $t4) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1398:9+67
    assume {:print "$at(11,65003,65070)"} true;
    call $1_DiemAccount_add_currencies_for_account'#0'($t10, $t4);
    if ($abort_flag) {
        assume {:print "$at(11,65003,65070)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,11):", $t9} $t9 == $t9;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1399:5+1
    assume {:print "$at(11,65075,65076)"} true;
L1:

    // assume Identical($t34, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t34 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t35, pack DiemAccount::CreateAccountEvent($t1, Roles::spec_get_role_id($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t35 == $1_DiemAccount_CreateAccountEvent($t1, $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $t1)));

    // assert Not(exists[@453]<Roles::RoleId>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1415:9+84
    assume {:print "$at(11,65694,65778)"} true;
    assert {:msg "assert_failed(11,65694,65778): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#453, $t1);

    // assert Not(VASP::$is_vasp[@454, @455]($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1416:9+76
    assume {:print "$at(11,65787,65863)"} true;
    assert {:msg "assert_failed(11,65787,65863): function does not abort under this condition"}
      !$1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#454, $1_VASP_ParentVASP_$memory#455, $t1);

    // assert Not(Not(DiemTimestamp::$is_operating[@456]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#456);

    // assert Not(Not(exists[@453]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#453, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@453]<Roles::RoleId>($t6)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#453, $t6)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(DiemId::$has_diem_id_domains[@457]($t1)) at /home/ying/diem/language/diem-framework/modules/DiemId.move:102:9+72
    assume {:print "$at(15,3850,3922)"} true;
    assert {:msg "assert_failed(15,3850,3922): function does not abort under this condition"}
      !$1_DiemId_$has_diem_id_domains($1_DiemId_DiemIdDomains_$memory#457, $t1);

    // assert Not(Not(Diem::spec_is_currency[@458]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#458);

    // assert Not(And(And($t4, Not(exists[@459]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@460]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !(($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#459, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#460));

    // assert Not(And(And($t4, Not(exists[@461]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@462]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !(($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#461, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#462));

    // assert Not(Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1127:9+85
    assume {:print "$at(11,50697,50782)"} true;
    assert {:msg "assert_failed(11,50697,50782): function does not abort under this condition"}
      !$IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS());

    // assert Not(Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1128:9+83
    assume {:print "$at(11,50791,50874)"} true;
    assert {:msg "assert_failed(11,50791,50874): function does not abort under this condition"}
      !$IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS());

    // assert Not(exists[@463]<AccountFreezing::FreezingBit>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1129:9+84
    assume {:print "$at(11,50883,50967)"} true;
    assert {:msg "assert_failed(11,50883,50967): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#463, $t1);

    // assert Not(And(DiemTimestamp::$is_genesis[@456](), Not(exists[@464]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1132:9+165
    assume {:print "$at(11,51142,51307)"} true;
    assert {:msg "assert_failed(11,51142,51307): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#456) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#464, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert Not(Neq<num>(Add(16, Len<u8>($t2)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1176:9+72
    assume {:print "$at(11,53276,53348)"} true;
    assert {:msg "assert_failed(11,53276,53348): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t2)), 32);

    // assert DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1424:9+39
    assume {:print "$at(11,66198,66237)"} true;
    assert {:msg "assert_failed(11,66198,66237): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert Roles::spec_has_parent_VASP_role_addr($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1425:9+67
    assume {:print "$at(11,66246,66313)"} true;
    assert {:msg "assert_failed(11,66246,66313): post-condition does not hold"}
      $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, $t1);

    // assert VASP::$is_parent($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:65:9+29
    assume {:print "$at(33,2839,2868)"} true;
    assert {:msg "assert_failed(33,2839,2868): post-condition does not hold"}
      $1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t1);

    // assert Eq<u64>(VASP::spec_num_children($t1), 0) at /home/ying/diem/language/diem-framework/modules/VASP.move:66:9+42
    assume {:print "$at(33,2877,2919)"} true;
    assert {:msg "assert_failed(33,2877,2919): post-condition does not hold"}
      $IsEqual'u64'($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory, $t1), 0);

    // assert exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // assert Eq<DiemAccount::Balance<#0>>(global<DiemAccount::Balance<#0>>($t1), pack DiemAccount::Balance<#0>(pack Diem::Diem<#0>(0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_Balance'#0''($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t1), $1_DiemAccount_Balance'#0'($1_Diem_Diem'#0'(0)));

    // assert Implies(And($t4, Not(exists<DiemAccount::Balance<XUS::XUS>>($t1))), exists<DiemAccount::Balance<XUS::XUS>>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      (($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1));

    // assert Implies(And($t4, Not(exists<DiemAccount::Balance<XUS::XUS>>($t1))), Eq<DiemAccount::Balance<XUS::XUS>>(global<DiemAccount::Balance<XUS::XUS>>($t1), pack DiemAccount::Balance<XUS::XUS>(pack Diem::Diem<XUS::XUS>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      (($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1), $1_DiemAccount_Balance'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(0))));

    // assert Implies(And($t4, Not(exists<DiemAccount::Balance<XDX::XDX>>($t1))), exists<DiemAccount::Balance<XDX::XDX>>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:9+37
    assume {:print "$at(11,71328,71365)"} true;
    assert {:msg "assert_failed(11,71328,71365): post-condition does not hold"}
      (($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1));

    // assert Implies(And($t4, Not(exists<DiemAccount::Balance<XDX::XDX>>($t1))), Eq<DiemAccount::Balance<XDX::XDX>>(global<DiemAccount::Balance<XDX::XDX>>($t1), pack DiemAccount::Balance<XDX::XDX>(pack Diem::Diem<XDX::XDX>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:9+101
    assume {:print "$at(11,71374,71475)"} true;
    assert {:msg "assert_failed(11,71374,71475): post-condition does not hold"}
      (($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1), $1_DiemAccount_Balance'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(0))));

    // assert exists<DiemId::DiemIdDomains>($t1) at /home/ying/diem/language/diem-framework/modules/DiemId.move:106:9+41
    assume {:print "$at(15,4011,4052)"} true;
    assert {:msg "assert_failed(15,4011,4052): post-condition does not hold"}
      $ResourceExists($1_DiemId_DiemIdDomains_$memory, $t1);

    // assert Vector::$is_empty<DiemId::DiemIdDomain>(select DiemId::DiemIdDomains.domains(global<DiemId::DiemIdDomains>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemId.move:107:9+67
    assume {:print "$at(15,4061,4128)"} true;
    assert {:msg "assert_failed(15,4061,4128): post-condition does not hold"}
      $1_Vector_$is_empty'$1_DiemId_DiemIdDomain'($domains#$1_DiemId_DiemIdDomains($ResourceValue($1_DiemId_DiemIdDomains_$memory, $t1)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@465](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@465]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#465, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#465, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@466]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@466]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#466, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#466, addr))))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t35, $t34)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1146:9+20
    assume {:print "$at(11,51882,51902)"} true;
    assert {:msg "assert_failed(11,51882,51902): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t34, $t35); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t35, $t34)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1401:5+184
    assume {:print "$at(11,65082,65266)"} true;
    assert {:msg "assert_failed(11,65082,65266): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t34, $t35); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1401:5+184
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1399:5+1
    assume {:print "$at(11,65075,65076)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(exists[@453]<Roles::RoleId>($t1), VASP::$is_vasp[@454, @455]($t1)), Not(DiemTimestamp::$is_operating[@456]())), Not(exists[@453]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@453]<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), DiemId::$has_diem_id_domains[@457]($t1)), Not(Diem::spec_is_currency[@458]<#0>())), And(And($t4, Not(exists[@459]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@460]<XUS::XUS>()))), And(And($t4, Not(exists[@461]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@462]<XDX::XDX>()))), Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]())), Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]())), exists[@463]<AccountFreezing::FreezingBit>($t1)), And(DiemTimestamp::$is_genesis[@456](), Not(exists[@464]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))), Neq<num>(Add(16, Len<u8>($t2)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1401:5+184
    assume {:print "$at(11,65082,65266)"} true;
    assert {:msg "assert_failed(11,65082,65266): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((($ResourceExists($1_Roles_RoleId_$memory#453, $t1) || $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#454, $1_VASP_ParentVASP_$memory#455, $t1)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#456)) || !$ResourceExists($1_Roles_RoleId_$memory#453, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#453, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || $1_DiemId_$has_diem_id_domains($1_DiemId_DiemIdDomains_$memory#457, $t1)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#458)) || (($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#459, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#460))) || (($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#461, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#462))) || $IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS())) || $IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#463, $t1)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#456) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#464, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t2)), 32));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(exists[@453]<Roles::RoleId>($t1), Eq(6, $t9)), And(VASP::$is_vasp[@454, @455]($t1), Eq(6, $t9))), And(Not(DiemTimestamp::$is_operating[@456]()), Eq(1, $t9))), And(Not(exists[@453]<Roles::RoleId>($t6)), Eq(5, $t9))), And(Neq<u64>(select Roles::RoleId.role_id(global[@453]<Roles::RoleId>($t6)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t9))), And(DiemId::$has_diem_id_domains[@457]($t1), Eq(6, $t9))), And(Not(Diem::spec_is_currency[@458]<#0>()), Eq(5, $t9))), And(And(And($t4, Not(exists[@459]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@460]<XUS::XUS>())), Eq(5, $t9))), And(And(And($t4, Not(exists[@461]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@462]<XDX::XDX>())), Eq(5, $t9))), And(Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]()), Eq(7, $t9))), And(Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]()), Eq(7, $t9))), And(exists[@463]<AccountFreezing::FreezingBit>($t1), Eq(6, $t9))), And(And(DiemTimestamp::$is_genesis[@456](), Not(exists[@464]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))), Eq(5, $t9))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1401:5+184
    assert {:msg "assert_failed(11,65082,65266): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((($ResourceExists($1_Roles_RoleId_$memory#453, $t1) && $IsEqual'u8'(6, $t9)) || ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#454, $1_VASP_ParentVASP_$memory#455, $t1) && $IsEqual'u8'(6, $t9))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#456) && $IsEqual'u8'(1, $t9))) || (!$ResourceExists($1_Roles_RoleId_$memory#453, $t6) && $IsEqual'u8'(5, $t9))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#453, $t6)), 1) && $IsEqual'u8'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t9))) || ($1_DiemId_$has_diem_id_domains($1_DiemId_DiemIdDomains_$memory#457, $t1) && $IsEqual'u8'(6, $t9))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#458) && $IsEqual'u8'(5, $t9))) || ((($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#459, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#460)) && $IsEqual'u8'(5, $t9))) || ((($t4 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#461, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#462)) && $IsEqual'u8'(5, $t9))) || ($IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t9))) || ($IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t9))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#463, $t1) && $IsEqual'u8'(6, $t9))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#456) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#464, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t9))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'u8'(7, $t9)));

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1401:5+184
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_treasury_compliance_account [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
procedure {:timeLimit 40} $1_DiemAccount_create_treasury_compliance_account$verify(_$t0: int, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $1_DiemAccount_AccountOperationsCapability;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $1_DiemAccount_AccountOperationsCapability;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: $1_DiemAccount_AccountOperationsCapability;
    var $t24: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t25: $1_DiemAccount_CreateAccountEvent;
    var $t26: $1_DiemAccount_CreateAccountEvent;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t28: $1_DiemAccount_AccountOperationsCapability;
    var $t29: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t30: $1_DiemAccount_CreateAccountEvent;
    var $t0: int;
    var $t1: Vec (int);
    var $1_SlidingNonce_SlidingNonce_$modifies: [int]bool;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $1_Event_EventHandleGenerator_$modifies: [int]bool;
    var $1_DiemId_DiemIdDomainManager_$modifies: [int]bool;
    var $1_AccountFreezing_FreezingBit_$modifies: [int]bool;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $1_DiemAccount_AccountOperationsCapability_$modifies: [int]bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'$1_SlidingNonce_SlidingNonce': $1_SlidingNonce_SlidingNonce;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'u8'': Vec (int);
    var $1_SlidingNonce_SlidingNonce_$memory#396: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_DiemId_DiemIdDomainManager_$memory#397: $Memory $1_DiemId_DiemIdDomainManager;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#398: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Roles_RoleId_$memory#399: $Memory $1_Roles_RoleId;
    var $1_AccountFreezing_FreezingBit_$memory#400: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#401: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#402: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,57553,58217)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    assume $IsValid'vec'u8''($t1);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemId::DiemIdDomainManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    assume (forall $a_0: int :: {$ResourceValue($1_DiemId_DiemIdDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemId_DiemIdDomainManager_$memory, $a_0);
    ($IsValid'$1_DiemId_DiemIdDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+664
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume Identical($t4, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1282:9+59
    assume {:print "$at(11,58295,58354)"} true;
    assume ($t4 == $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assume Identical($t5, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1288:9+94
    assume {:print "$at(11,58687,58781)"} true;
    assume ($t5 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t6, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1295:9+59
    assume {:print "$at(11,59274,59333)"} true;
    assume ($t6 == $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1315:9+59
    assume {:print "$at(11,60508,60567)"} true;
    assume ($t8 == $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assume CanModify<DiemAccount::DiemAccount>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1296:9+38
    assume {:print "$at(11,59342,59380)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t6];

    // assume CanModify<SlidingNonce::SlidingNonce>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1297:9+53
    assume {:print "$at(11,59389,59442)"} true;
    assume $1_SlidingNonce_SlidingNonce_$modifies[$t6];

    // assume CanModify<Roles::RoleId>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1298:9+40
    assume {:print "$at(11,59451,59491)"} true;
    assume $1_Roles_RoleId_$modifies[$t6];

    // assume CanModify<AccountFreezing::FreezingBit>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1299:9+55
    assume {:print "$at(11,59500,59555)"} true;
    assume $1_AccountFreezing_FreezingBit_$modifies[$t6];

    // assume CanModify<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1300:9+81
    assume {:print "$at(11,59564,59645)"} true;
    assume $1_DiemAccount_AccountOperationsCapability_$modifies[$1_CoreAddresses_$DIEM_ROOT_ADDRESS()];

    // assume CanModify<Event::EventHandleGenerator>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1302:9+91
    assume {:print "$at(11,59743,59834)"} true;
    assume $1_Event_EventHandleGenerator_$modifies[$1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()];

    // assume CanModify<DiemId::DiemIdDomainManager>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1303:9+54
    assume {:print "$at(11,59843,59897)"} true;
    assume $1_DiemId_DiemIdDomainManager_$modifies[$t6];

    // assume CanModify<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    assume {:print "$at(26,7701,7731)"} true;
    assume $1_Roles_RoleId_$modifies[$1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()];

    // @398 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#398 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @396 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_SlidingNonce_SlidingNonce_$memory#396 := $1_SlidingNonce_SlidingNonce_$memory;

    // @399 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_Roles_RoleId_$memory#399 := $1_Roles_RoleId_$memory;

    // @397 := save_mem(DiemId::DiemIdDomainManager) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemId_DiemIdDomainManager_$memory#397 := $1_DiemId_DiemIdDomainManager_$memory;

    // @400 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_AccountFreezing_FreezingBit_$memory#400 := $1_AccountFreezing_FreezingBit_$memory;

    // @402 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemAccount_DiemAccount_$memory#402 := $1_DiemAccount_DiemAccount_$memory;

    // @401 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemAccount_AccountOperationsCapability_$memory#401 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+1
    assume {:print "$at(11,57553,57554)"} true;
    assume {:print "$track_local(29,13,0):", $t0} $t0 == $t0;

    // trace_local[auth_key_prefix]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1266:5+1
    assume {:print "$track_local(29,13,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1270:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(11,57712,57743)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1270:9+31

    // assume Identical($t9, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1270:9+31
    assume ($t9 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t9) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1270:9+31
    if ($t9) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1270:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1270:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1270:9+31
    assume {:print "$at(11,57712,57743)"} true;
    assume {:print "$track_abort(29,13):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1270:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1270:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1270:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1271:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(11,57753,57788)"} true;

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1271:9+35
    assume {:print "$at(11,57753,57788)"} true;

    // assume Identical($t12, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t11))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1271:9+35
    assume ($t12 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t11)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t12) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1271:9+35
    if ($t12) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1271:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t10)), And(Not(exists<Roles::RoleId>($t11)), Eq(5, $t10))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 0), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1271:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t10)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t11) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 0) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1271:9+35
    assume {:print "$at(11,57753,57788)"} true;
    assume {:print "$track_abort(29,13):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1271:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1271:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1271:9+35

    // $t13 := CoreAddresses::TREASURY_COMPLIANCE_ADDRESS() on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1272:35+44
    assume {:print "$at(11,57824,57868)"} true;
    call $t13 := $1_CoreAddresses_TREASURY_COMPLIANCE_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,57824,57868)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,13):", $t10} $t10 == $t10;
        goto L2;
    }

    // trace_local[new_account_address]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1272:13+19
    assume {:print "$track_local(29,13,3):", $t13} $t13 == $t13;

    // $t14 := DiemAccount::create_signer($t13) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1273:27+34
    assume {:print "$at(11,57896,57930)"} true;
    call $t14 := $1_DiemAccount_create_signer($t13);
    if ($abort_flag) {
        assume {:print "$at(11,57896,57930)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,13):", $t10} $t10 == $t10;
        goto L2;
    }

    // trace_local[new_account]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1273:13+11
    assume {:print "$track_local(29,13,2):", $t14} $t14 == $t14;

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Roles::RoleId>(Signer::$address_of($t14)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1274:9+63
    assume {:print "$at(11,57940,58003)"} true;
    assert {:msg "assert_failed(11,57940,58003): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t14)];

    // Roles::grant_treasury_compliance_role($t14, $t0) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1274:9+63
    call $1_Roles_grant_treasury_compliance_role($t14, $t0);
    if ($abort_flag) {
        assume {:print "$at(11,57940,58003)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,13):", $t10} $t10 == $t10;
        goto L2;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35
    // >> opaque call: SlidingNonce::publish($t5)
    assume {:print "$at(11,58013,58048)"} true;

    // assert CanModify<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t14)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35
    assert {:msg "assert_failed(11,58013,58048): caller does not have permission to modify `SlidingNonce::SlidingNonce` at given address"}
      $1_SlidingNonce_SlidingNonce_$modifies[$1_Signer_spec_address_of($t14)];

    // opaque begin: SlidingNonce::publish($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35

    // assume Identical($t16, exists<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t14))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35
    assume ($t16 == $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t14)));

    // if ($t16) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35
    if ($t16) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35
L8:

    // assume And(exists<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t14)), Eq(6, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35
    assume ($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t14)) && $IsEqual'u8'(6, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35
    assume {:print "$at(11,58013,58048)"} true;
    assume {:print "$track_abort(29,13):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35
L7:

    // modifies global<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t14)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_SlidingNonce_SlidingNonce';
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceUpdate($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t14), $temp_0'$1_SlidingNonce_SlidingNonce');
    } else {
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceRemove($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t14));
    }

    // assume exists<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t14)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35
    assume $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t14));

    // opaque end: SlidingNonce::publish($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1275:9+35

    // Event::publish_generator($t14) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1276:9+38
    assume {:print "$at(11,58058,58096)"} true;
    call $1_Event_publish_generator($t14);
    if ($abort_flag) {
        assume {:print "$at(11,58058,58096)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,13):", $t10} $t10 == $t10;
        goto L2;
    }

    // assume Identical($t17, Signer::spec_address_of($t14)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t14));

    // assert CanModify<DiemId::DiemIdDomainManager>(Signer::spec_address_of($t14)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1277:9+52
    assume {:print "$at(11,58106,58158)"} true;
    assert {:msg "assert_failed(11,58106,58158): caller does not have permission to modify `DiemId::DiemIdDomainManager` at given address"}
      $1_DiemId_DiemIdDomainManager_$modifies[$1_Signer_spec_address_of($t14)];

    // DiemId::publish_diem_id_domain_manager($t14) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1277:9+52
    call $1_DiemId_publish_diem_id_domain_manager($t14);
    if ($abort_flag) {
        assume {:print "$at(11,58106,58158)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,13):", $t10} $t10 == $t10;
        goto L2;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    // >> opaque call: DiemAccount::make_account($t5, $t1)
    assume {:print "$at(11,58168,58211)"} true;

    // assume Identical($t18, Signer::$address_of($t14)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1106:9+55
    assume {:print "$at(11,49292,49347)"} true;
    assume ($t18 == $1_Signer_$address_of($t14));

    // assume Identical($t19, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1117:9+94
    assume {:print "$at(11,50033,50127)"} true;
    assume ($t19 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t20, Signer::spec_address_of($t14)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2211:9+44
    assume {:print "$at(11,100936,100980)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t14));

    // assume Identical($t21, Signer::spec_address_of($t14)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2241:9+44
    assume {:print "$at(11,102524,102568)"} true;
    assume ($t21 == $1_Signer_spec_address_of($t14));

    // assert exists<Roles::RoleId>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assert {:msg "assert_failed(11,49790,49839): precondition does not hold at this call"}
      $ResourceExists($1_Roles_RoleId_$memory, $t18);

    // assert CanModify<DiemAccount::DiemAccount>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    assume {:print "$at(11,58168,58211)"} true;
    assert {:msg "assert_failed(11,58168,58211): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t18];

    // assert CanModify<Event::EventHandleGenerator>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    assert {:msg "assert_failed(11,58168,58211): caller does not have permission to modify `Event::EventHandleGenerator` at given address"}
      $1_Event_EventHandleGenerator_$modifies[$t18];

    // assert CanModify<AccountFreezing::FreezingBit>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    assert {:msg "assert_failed(11,58168,58211): caller does not have permission to modify `AccountFreezing::FreezingBit` at given address"}
      $1_AccountFreezing_FreezingBit_$modifies[$t18];

    // assert CanModify<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    assert {:msg "assert_failed(11,58168,58211): caller does not have permission to modify `DiemAccount::AccountOperationsCapability` at given address"}
      $1_DiemAccount_AccountOperationsCapability_$modifies[$1_CoreAddresses_$DIEM_ROOT_ADDRESS()];

    // opaque begin: DiemAccount::make_account($t14, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43

    // assume Identical($t22, Or(Or(Or(Or(Eq<address>($t18, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq<address>($t18, CoreAddresses::$CORE_CODE_ADDRESS())), exists<AccountFreezing::FreezingBit>($t18)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())))), Neq<num>(Add(16, Len<u8>($t1)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    assume ($t22 == (((($IsEqual'address'($t18, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) || $IsEqual'address'($t18, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t18)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t1)), 32)));

    // if ($t22) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    if ($t22) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
L10:

    // assume Or(Or(Or(Or(And(Eq<address>($t18, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq(7, $t10)), And(Eq<address>($t18, CoreAddresses::$CORE_CODE_ADDRESS()), Eq(7, $t10))), And(exists<AccountFreezing::FreezingBit>($t18), Eq(6, $t10))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))), Eq(5, $t10))), And(Neq<num>(Add(16, Len<u8>($t1)), 32), Eq(7, $t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    assume ((((($IsEqual'address'($t18, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t10)) || ($IsEqual'address'($t18, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t10))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t18) && $IsEqual'u8'(6, $t10))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'num'((16 + LenVec($t1)), 32) && $IsEqual'u8'(7, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    assume {:print "$at(11,58168,58211)"} true;
    assume {:print "$track_abort(29,13):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    goto L2;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
L9:

    // modifies global<DiemAccount::DiemAccount>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t18, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t18);
    }

    // modifies global<Event::EventHandleGenerator>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t18, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t18);
    }

    // modifies global<AccountFreezing::FreezingBit>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t18, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t18);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume Identical($t23, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1118:9+104
    assume {:print "$at(11,50136,50240)"} true;
    assume ($t23 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t24, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t24 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t25, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t14), Roles::spec_get_role_id(Signer::spec_address_of($t14)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t25 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t14), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t14))));

    // assume exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume DiemAccount::$exists_at($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume AccountFreezing::spec_account_is_not_frozen($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t18);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t23, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t19, select DiemAccount::AccountOperationsCapability.creation_events($t19))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t23, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t19, $creation_events#$1_DiemAccount_AccountOperationsCapability($t19)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume Identical($t26, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t26 == $t25);

    // assume Identical($t27, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t27 == $t24);

    // emit_event($t26, $t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1278:9+43
    assume {:print "$at(11,58168,58211)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t27, $t26);

    // opaque end: DiemAccount::make_account($t14, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1279:5+1
    assume {:print "$at(11,58216,58217)"} true;
L1:

    // assume Identical($t28, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1289:9+104
    assume {:print "$at(11,58790,58894)"} true;
    assume ($t28 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t29, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t29 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t30, pack DiemAccount::CreateAccountEvent(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS(), Roles::spec_get_role_id(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t30 == $1_DiemAccount_CreateAccountEvent($1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // assert Not(exists[@396]<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1310:9+134
    assume {:print "$at(11,60217,60351)"} true;
    assert {:msg "assert_failed(11,60217,60351): function does not abort under this condition"}
      !$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#396, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(DiemId::$tc_domain_manager_exists[@397]()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1312:9+76
    assume {:print "$at(11,60360,60436)"} true;
    assert {:msg "assert_failed(11,60360,60436): function does not abort under this condition"}
      !$1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory#397);

    // assert Not(Not(DiemTimestamp::$is_genesis[@398]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:142:9+51
    assume {:print "$at(17,5802,5853)"} true;
    assert {:msg "assert_failed(17,5802,5853): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#398);

    // assert Not(exists[@399]<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/Roles.move:179:9+62
    assume {:print "$at(26,7535,7597)"} true;
    assert {:msg "assert_failed(26,7535,7597): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#399, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Not(exists[@399]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:528:9+59
    assume {:print "$at(26,23704,23763)"} true;
    assert {:msg "assert_failed(26,23704,23763): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#399, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@399]<Roles::RoleId>($t7)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:529:9+87
    assume {:print "$at(26,23772,23859)"} true;
    assert {:msg "assert_failed(26,23772,23859): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#399, $t7)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:70:9+108
    assume {:print "$at(8,2901,3009)"} true;
    assert {:msg "assert_failed(8,2901,3009): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(Eq<address>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[](), CoreAddresses::$VM_RESERVED_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1127:9+85
    assume {:print "$at(11,50697,50782)"} true;
    assert {:msg "assert_failed(11,50697,50782): function does not abort under this condition"}
      !$IsEqual'address'($1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $1_CoreAddresses_$VM_RESERVED_ADDRESS());

    // assert Not(Eq<address>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[](), CoreAddresses::$CORE_CODE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1128:9+83
    assume {:print "$at(11,50791,50874)"} true;
    assert {:msg "assert_failed(11,50791,50874): function does not abort under this condition"}
      !$IsEqual'address'($1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $1_CoreAddresses_$CORE_CODE_ADDRESS());

    // assert Not(exists[@400]<AccountFreezing::FreezingBit>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1129:9+84
    assume {:print "$at(11,50883,50967)"} true;
    assert {:msg "assert_failed(11,50883,50967): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#400, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(And(DiemTimestamp::$is_genesis[@398](), Not(exists[@401]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1132:9+165
    assume {:print "$at(11,51142,51307)"} true;
    assert {:msg "assert_failed(11,51142,51307): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#398) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#401, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert Not(Neq<num>(Add(16, Len<u8>($t1)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1176:9+72
    assume {:print "$at(11,53276,53348)"} true;
    assert {:msg "assert_failed(11,53276,53348): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t1)), 32);

    // assert Not(DiemId::$tc_domain_manager_exists[@397]()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1292:9+76
    assume {:print "$at(11,59125,59201)"} true;
    assert {:msg "assert_failed(11,59125,59201): function does not abort under this condition"}
      !$1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory#397);

    // assert exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1301:9+80
    assume {:print "$at(11,59654,59734)"} true;
    assert {:msg "assert_failed(11,59654,59734): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert exists<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Roles.move:180:9+29
    assume {:print "$at(26,7606,7635)"} true;
    assert {:msg "assert_failed(26,7606,7635): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), 1) at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+48
    assume {:print "$at(26,7644,7692)"} true;
    assert {:msg "assert_failed(26,7644,7692): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())), 1);

    // assert Roles::spec_has_treasury_compliance_role_addr($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1316:9+63
    assume {:print "$at(11,60576,60639)"} true;
    assert {:msg "assert_failed(11,60576,60639): post-condition does not hold"}
      $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, $t8);

    // assert DiemAccount::$exists_at($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1317:9+27
    assume {:print "$at(11,60648,60675)"} true;
    assert {:msg "assert_failed(11,60648,60675): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t8);

    // assert exists<SlidingNonce::SlidingNonce>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1318:9+52
    assume {:print "$at(11,60684,60736)"} true;
    assert {:msg "assert_failed(11,60684,60736): post-condition does not hold"}
      $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $t8);

    // assert AccountFreezing::spec_account_is_not_frozen($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1319:9+61
    assume {:print "$at(11,60745,60806)"} true;
    assert {:msg "assert_failed(11,60745,60806): post-condition does not hold"}
      $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t8);

    // assert DiemAccount::spec_holds_own_key_rotation_cap($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1320:9+49
    assume {:print "$at(11,60815,60864)"} true;
    assert {:msg "assert_failed(11,60815,60864): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t8);

    // assert DiemAccount::spec_holds_own_withdraw_cap($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1321:9+45
    assume {:print "$at(11,60873,60918)"} true;
    assert {:msg "assert_failed(11,60873,60918): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t8);

    // assert exists<DiemId::DiemIdDomainManager>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1322:9+53
    assume {:print "$at(11,60927,60980)"} true;
    assert {:msg "assert_failed(11,60927,60980): post-condition does not hold"}
      $ResourceExists($1_DiemId_DiemIdDomainManager_$memory, $t8);

    // assert Eq<DiemAccount::AccountOperationsCapability>($t28, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t5, select DiemAccount::AccountOperationsCapability.creation_events($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1290:9+112
    assume {:print "$at(11,58903,59015)"} true;
    assert {:msg "assert_failed(11,58903,59015): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t28, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t5, $creation_events#$1_DiemAccount_AccountOperationsCapability($t5)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@402](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@402]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#402, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#402, addr)))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t30, $t29)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1146:9+20
    assume {:print "$at(11,51882,51902)"} true;
    assert {:msg "assert_failed(11,51882,51902): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t29, $t30); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t30, $t29)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1280:5+985
    assume {:print "$at(11,58222,59207)"} true;
    assert {:msg "assert_failed(11,58222,59207): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t29, $t30); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1280:5+985
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1279:5+1
    assume {:print "$at(11,58216,58217)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(exists[@396]<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), DiemId::$tc_domain_manager_exists[@397]()), Not(DiemTimestamp::$is_genesis[@398]())), exists[@399]<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Not(exists[@399]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@399]<Roles::RoleId>($t7)), 0)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Eq<address>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[](), CoreAddresses::$VM_RESERVED_ADDRESS[]())), Eq<address>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[](), CoreAddresses::$CORE_CODE_ADDRESS[]())), exists[@400]<AccountFreezing::FreezingBit>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), And(DiemTimestamp::$is_genesis[@398](), Not(exists[@401]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))), Neq<num>(Add(16, Len<u8>($t1)), 32)), DiemId::$tc_domain_manager_exists[@397]()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1280:5+985
    assume {:print "$at(11,58222,59207)"} true;
    assert {:msg "assert_failed(11,58222,59207): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((($ResourceExists($1_SlidingNonce_SlidingNonce_$memory#396, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) || $1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory#397)) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#398)) || $ResourceExists($1_Roles_RoleId_$memory#399, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_Roles_RoleId_$memory#399, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#399, $t7)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $IsEqual'address'($1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $1_CoreAddresses_$VM_RESERVED_ADDRESS())) || $IsEqual'address'($1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#400, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#398) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#401, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t1)), 32)) || $1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory#397));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(exists[@396]<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(6, $t10)), And(DiemId::$tc_domain_manager_exists[@397](), Eq(6, $t10))), And(Not(DiemTimestamp::$is_genesis[@398]()), Eq(1, $t10))), And(exists[@399]<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(6, $t10))), And(Not(exists[@399]<Roles::RoleId>($t7)), Eq(5, $t10))), And(Neq<u64>(select Roles::RoleId.role_id(global[@399]<Roles::RoleId>($t7)), 0), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(2, $t10))), And(Eq<address>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[](), CoreAddresses::$VM_RESERVED_ADDRESS[]()), Eq(7, $t10))), And(Eq<address>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[](), CoreAddresses::$CORE_CODE_ADDRESS[]()), Eq(7, $t10))), And(exists[@400]<AccountFreezing::FreezingBit>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(6, $t10))), And(And(DiemTimestamp::$is_genesis[@398](), Not(exists[@401]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))), Eq(5, $t10))), And(Neq<num>(Add(16, Len<u8>($t1)), 32), Eq(7, $t10))), And(DiemId::$tc_domain_manager_exists[@397](), Eq(6, $t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1280:5+985
    assert {:msg "assert_failed(11,58222,59207): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((($ResourceExists($1_SlidingNonce_SlidingNonce_$memory#396, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t10)) || ($1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory#397) && $IsEqual'u8'(6, $t10))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#398) && $IsEqual'u8'(1, $t10))) || ($ResourceExists($1_Roles_RoleId_$memory#399, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t10))) || (!$ResourceExists($1_Roles_RoleId_$memory#399, $t7) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#399, $t7)), 0) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t10))) || ($IsEqual'address'($1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t10))) || ($IsEqual'address'($1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t10))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#400, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t10))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#398) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#401, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'num'((16 + LenVec($t1)), 32) && $IsEqual'u8'(7, $t10))) || ($1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory#397) && $IsEqual'u8'(6, $t10)));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1280:5+985
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_validator_account [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
procedure {:timeLimit 40} $1_DiemAccount_create_validator_account$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: Vec (int)) returns ()
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: $1_DiemAccount_AccountOperationsCapability;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: $1_DiemAccount_AccountOperationsCapability;
    var $t19: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t20: $1_DiemAccount_CreateAccountEvent;
    var $t21: $1_DiemAccount_CreateAccountEvent;
    var $t22: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t23: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t24: $1_DiemAccount_CreateAccountEvent;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'u8'': Vec (int);
    var $1_ValidatorConfig_ValidatorConfig_$memory#383: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_Roles_RoleId_$memory#384: $Memory $1_Roles_RoleId;
    var $1_AccountFreezing_FreezingBit_$memory#385: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#386: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemAccount_AccountOperationsCapability_$memory#387: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#388: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,96050,96717)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    assume $IsValid'vec'u8''($t3);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+667
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume CanModify<Roles::RoleId>($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    assume {:print "$at(26,7701,7731)"} true;
    assume $1_Roles_RoleId_$modifies[$t1];

    // @386 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#386 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @384 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_Roles_RoleId_$memory#384 := $1_Roles_RoleId_$memory;

    // @383 := save_mem(ValidatorConfig::ValidatorConfig) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_ValidatorConfig_ValidatorConfig_$memory#383 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @385 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_AccountFreezing_FreezingBit_$memory#385 := $1_AccountFreezing_FreezingBit_$memory;

    // @388 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemAccount_DiemAccount_$memory#388 := $1_DiemAccount_DiemAccount_$memory;

    // @387 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemAccount_AccountOperationsCapability_$memory#387 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+1
    assume {:print "$at(11,96050,96051)"} true;
    assume {:print "$track_local(29,14,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+1
    assume {:print "$track_local(29,14,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+1
    assume {:print "$track_local(29,14,2):", $t2} $t2 == $t2;

    // trace_local[human_name]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2107:5+1
    assume {:print "$track_local(29,14,3):", $t3} $t3 == $t3;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2113:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(11,96276,96311)"} true;

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2113:9+35
    assume {:print "$at(11,96276,96311)"} true;

    // assume Identical($t7, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2113:9+35
    assume ($t7 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2113:9+35
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2113:9+35
L4:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8)), And(Not(exists<Roles::RoleId>($t6)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2113:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0) && $IsEqual'u8'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2113:9+35
    assume {:print "$at(11,96276,96311)"} true;
    assume {:print "$track_abort(29,14):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2113:9+35
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2113:9+35
L3:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2113:9+35

    // $t9 := DiemAccount::create_signer($t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2114:27+34
    assume {:print "$at(11,96339,96373)"} true;
    call $t9 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(11,96339,96373)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[new_account]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2114:13+11
    assume {:print "$track_local(29,14,4):", $t9} $t9 == $t9;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Roles::RoleId>(Signer::$address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2116:9+51
    assume {:print "$at(11,96487,96538)"} true;
    assert {:msg "assert_failed(11,96487,96538): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t9)];

    // Roles::new_validator_role($t0, $t9) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2116:9+51
    call $1_Roles_new_validator_role($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(11,96487,96538)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // Event::publish_generator($t9) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2117:9+38
    assume {:print "$at(11,96548,96586)"} true;
    call $1_Event_publish_generator($t9);
    if ($abort_flag) {
        assume {:print "$at(11,96548,96586)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // ValidatorConfig::publish($t9, $t0, $t3) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2118:9+62
    assume {:print "$at(11,96596,96658)"} true;
    call $1_ValidatorConfig_publish($t9, $t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(11,96596,96658)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2119:9+43
    // >> opaque call: DiemAccount::make_account($t5, $t2)
    assume {:print "$at(11,96668,96711)"} true;

    // assume Identical($t13, Signer::$address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1106:9+55
    assume {:print "$at(11,49292,49347)"} true;
    assume ($t13 == $1_Signer_$address_of($t9));

    // assume Identical($t14, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1117:9+94
    assume {:print "$at(11,50033,50127)"} true;
    assume ($t14 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t15, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2211:9+44
    assume {:print "$at(11,100936,100980)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t9));

    // assume Identical($t16, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2241:9+44
    assume {:print "$at(11,102524,102568)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t9));

    // assert exists<Roles::RoleId>($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assert {:msg "assert_failed(11,49790,49839): precondition does not hold at this call"}
      $ResourceExists($1_Roles_RoleId_$memory, $t13);

    // opaque begin: DiemAccount::make_account($t9, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49

    // assume Identical($t17, Or(Or(Or(Or(Eq<address>($t13, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq<address>($t13, CoreAddresses::$CORE_CODE_ADDRESS())), exists<AccountFreezing::FreezingBit>($t13)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume ($t17 == (((($IsEqual'address'($t13, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) || $IsEqual'address'($t13, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t13)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t17) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    if ($t17) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
L6:

    // assume Or(Or(Or(Or(And(Eq<address>($t13, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq(7, $t8)), And(Eq<address>($t13, CoreAddresses::$CORE_CODE_ADDRESS()), Eq(7, $t8))), And(exists<AccountFreezing::FreezingBit>($t13), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume ((((($IsEqual'address'($t13, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t8)) || ($IsEqual'address'($t13, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t13) && $IsEqual'u8'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'u8'(7, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assume {:print "$track_abort(29,14):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
L5:

    // modifies global<DiemAccount::DiemAccount>($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t13, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t13);
    }

    // modifies global<Event::EventHandleGenerator>($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t13, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t13);
    }

    // modifies global<AccountFreezing::FreezingBit>($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t13, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t13);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume Identical($t18, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1118:9+104
    assume {:print "$at(11,50136,50240)"} true;
    assume ($t18 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t19, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t19 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t20, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t9), Roles::spec_get_role_id(Signer::spec_address_of($t9)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t20 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t9), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t9))));

    // assume exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume DiemAccount::$exists_at($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t13);

    // assume AccountFreezing::spec_account_is_not_frozen($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t13);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t18, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t14, select DiemAccount::AccountOperationsCapability.creation_events($t14))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t18, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t14, $creation_events#$1_DiemAccount_AccountOperationsCapability($t14)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t13);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t13);

    // assume Identical($t21, $t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t21 == $t20);

    // assume Identical($t22, $t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t22 == $t19);

    // emit_event($t21, $t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2119:9+43
    assume {:print "$at(11,96668,96711)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t22, $t21);

    // opaque end: DiemAccount::make_account($t9, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2120:5+1
    assume {:print "$at(11,96716,96717)"} true;
L1:

    // assume Identical($t23, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t23 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t24, pack DiemAccount::CreateAccountEvent($t1, Roles::spec_get_role_id($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t24 == $1_DiemAccount_CreateAccountEvent($t1, $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $t1)));

    // assert Not(ValidatorConfig::$exists_config[@383]($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2136:9+93
    assume {:print "$at(11,97283,97376)"} true;
    assert {:msg "assert_failed(11,97283,97376): function does not abort under this condition"}
      !$1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory#383, $t1);

    // assert Not(Not(exists[@384]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:528:9+59
    assume {:print "$at(26,23704,23763)"} true;
    assert {:msg "assert_failed(26,23704,23763): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#384, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@384]<Roles::RoleId>($t5)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:529:9+87
    assume {:print "$at(26,23772,23859)"} true;
    assert {:msg "assert_failed(26,23772,23859): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#384, $t5)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:70:9+108
    assume {:print "$at(8,2901,3009)"} true;
    assert {:msg "assert_failed(8,2901,3009): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1127:9+85
    assume {:print "$at(11,50697,50782)"} true;
    assert {:msg "assert_failed(11,50697,50782): function does not abort under this condition"}
      !$IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS());

    // assert Not(Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1128:9+83
    assume {:print "$at(11,50791,50874)"} true;
    assert {:msg "assert_failed(11,50791,50874): function does not abort under this condition"}
      !$IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS());

    // assert Not(exists[@385]<AccountFreezing::FreezingBit>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1129:9+84
    assume {:print "$at(11,50883,50967)"} true;
    assert {:msg "assert_failed(11,50883,50967): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#385, $t1);

    // assert Not(And(DiemTimestamp::$is_genesis[@386](), Not(exists[@387]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1132:9+165
    assume {:print "$at(11,51142,51307)"} true;
    assert {:msg "assert_failed(11,51142,51307): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#386) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#387, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert Not(Neq<num>(Add(16, Len<u8>($t2)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1176:9+72
    assume {:print "$at(11,53276,53348)"} true;
    assert {:msg "assert_failed(11,53276,53348): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t2)), 32);

    // assert Not(Not(DiemTimestamp::$is_operating[@386]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#386);

    // assert Not(exists[@384]<Roles::RoleId>($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:179:9+62
    assume {:print "$at(26,7535,7597)"} true;
    assert {:msg "assert_failed(26,7535,7597): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#384, $t1);

    // assert DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2143:9+39
    assume {:print "$at(11,97645,97684)"} true;
    assert {:msg "assert_failed(11,97645,97684): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert ValidatorConfig::$exists_config($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2144:9+60
    assume {:print "$at(11,97693,97753)"} true;
    assert {:msg "assert_failed(11,97693,97753): post-condition does not hold"}
      $1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, $t1);

    // assert exists<Roles::RoleId>($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:180:9+29
    assume {:print "$at(26,7606,7635)"} true;
    assert {:msg "assert_failed(26,7606,7635): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $t1);

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t1)), 3) at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+48
    assume {:print "$at(26,7644,7692)"} true;
    assert {:msg "assert_failed(26,7644,7692): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t1)), 3);

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@388](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@388]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#388, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#388, addr)))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t24, $t23)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1146:9+20
    assume {:print "$at(11,51882,51902)"} true;
    assert {:msg "assert_failed(11,51882,51902): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t23, $t24); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t24, $t23)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2122:5+166
    assume {:print "$at(11,96723,96889)"} true;
    assert {:msg "assert_failed(11,96723,96889): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t23, $t24); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2122:5+166
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2120:5+1
    assume {:print "$at(11,96716,96717)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(ValidatorConfig::$exists_config[@383]($t1), Not(exists[@384]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@384]<Roles::RoleId>($t5)), 0)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]())), Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]())), exists[@385]<AccountFreezing::FreezingBit>($t1)), And(DiemTimestamp::$is_genesis[@386](), Not(exists[@387]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))), Neq<num>(Add(16, Len<u8>($t2)), 32)), Not(DiemTimestamp::$is_operating[@386]())), exists[@384]<Roles::RoleId>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2122:5+166
    assume {:print "$at(11,96723,96889)"} true;
    assert {:msg "assert_failed(11,96723,96889): abort not covered by any of the `aborts_if` clauses"}
      (((((((((($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory#383, $t1) || !$ResourceExists($1_Roles_RoleId_$memory#384, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#384, $t5)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS())) || $IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#385, $t1)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#386) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#387, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t2)), 32)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#386)) || $ResourceExists($1_Roles_RoleId_$memory#384, $t1));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(ValidatorConfig::$exists_config[@383]($t1), Eq(6, $t8)), And(Not(exists[@384]<Roles::RoleId>($t5)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@384]<Roles::RoleId>($t5)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(2, $t8))), And(Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]()), Eq(7, $t8))), And(Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]()), Eq(7, $t8))), And(exists[@385]<AccountFreezing::FreezingBit>($t1), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis[@386](), Not(exists[@387]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t8))), And(Not(DiemTimestamp::$is_operating[@386]()), Eq(1, $t8))), And(exists[@384]<Roles::RoleId>($t1), Eq(6, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2122:5+166
    assert {:msg "assert_failed(11,96723,96889): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory#383, $t1) && $IsEqual'u8'(6, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory#384, $t5) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#384, $t5)), 0) && $IsEqual'u8'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8))) || ($IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t8))) || ($IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#385, $t1) && $IsEqual'u8'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#386) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#387, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'u8'(7, $t8))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#386) && $IsEqual'u8'(1, $t8))) || ($ResourceExists($1_Roles_RoleId_$memory#384, $t1) && $IsEqual'u8'(6, $t8)));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2122:5+166
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_validator_operator_account [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
procedure {:timeLimit 40} $1_DiemAccount_create_validator_operator_account$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: Vec (int)) returns ()
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: $1_DiemAccount_AccountOperationsCapability;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: $1_DiemAccount_AccountOperationsCapability;
    var $t20: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t21: $1_DiemAccount_CreateAccountEvent;
    var $t22: $1_DiemAccount_CreateAccountEvent;
    var $t23: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'u8'': Vec (int);
    var $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory#377: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
    var $1_Roles_RoleId_$memory#378: $Memory $1_Roles_RoleId;
    var $1_AccountFreezing_FreezingBit_$memory#379: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#380: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemAccount_AccountOperationsCapability_$memory#381: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#382: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,97809,98503)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    assume $IsValid'vec'u8''($t3);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+694
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume CanModify<Roles::RoleId>($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    assume {:print "$at(26,7701,7731)"} true;
    assume $1_Roles_RoleId_$modifies[$t1];

    // @380 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#380 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @378 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_Roles_RoleId_$memory#378 := $1_Roles_RoleId_$memory;

    // @377 := save_mem(ValidatorOperatorConfig::ValidatorOperatorConfig) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory#377 := $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory;

    // @379 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_AccountFreezing_FreezingBit_$memory#379 := $1_AccountFreezing_FreezingBit_$memory;

    // @382 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemAccount_DiemAccount_$memory#382 := $1_DiemAccount_DiemAccount_$memory;

    // @381 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_DiemAccount_AccountOperationsCapability_$memory#381 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+1
    assume {:print "$at(11,97809,97810)"} true;
    assume {:print "$track_local(29,15,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+1
    assume {:print "$track_local(29,15,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+1
    assume {:print "$track_local(29,15,2):", $t2} $t2 == $t2;

    // trace_local[human_name]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2148:5+1
    assume {:print "$track_local(29,15,3):", $t3} $t3 == $t3;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2154:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(11,98044,98079)"} true;

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2154:9+35
    assume {:print "$at(11,98044,98079)"} true;

    // assume Identical($t7, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2154:9+35
    assume ($t7 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2154:9+35
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2154:9+35
L4:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8)), And(Not(exists<Roles::RoleId>($t6)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2154:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0) && $IsEqual'u8'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2154:9+35
    assume {:print "$at(11,98044,98079)"} true;
    assume {:print "$track_abort(29,15):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2154:9+35
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2154:9+35
L3:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2154:9+35

    // $t9 := DiemAccount::create_signer($t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2155:27+34
    assume {:print "$at(11,98107,98141)"} true;
    call $t9 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(11,98107,98141)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,15):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[new_account]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2155:13+11
    assume {:print "$track_local(29,15,4):", $t9} $t9 == $t9;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Roles::RoleId>(Signer::$address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2157:9+60
    assume {:print "$at(11,98256,98316)"} true;
    assert {:msg "assert_failed(11,98256,98316): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t9)];

    // Roles::new_validator_operator_role($t0, $t9) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2157:9+60
    call $1_Roles_new_validator_operator_role($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(11,98256,98316)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,15):", $t8} $t8 == $t8;
        goto L2;
    }

    // Event::publish_generator($t9) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2158:9+38
    assume {:print "$at(11,98326,98364)"} true;
    call $1_Event_publish_generator($t9);
    if ($abort_flag) {
        assume {:print "$at(11,98326,98364)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,15):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // ValidatorOperatorConfig::publish($t9, $t0, $t3) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2159:9+70
    assume {:print "$at(11,98374,98444)"} true;
    call $1_ValidatorOperatorConfig_publish($t9, $t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(11,98374,98444)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,15):", $t8} $t8 == $t8;
        goto L2;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2160:9+43
    // >> opaque call: DiemAccount::make_account($t5, $t2)
    assume {:print "$at(11,98454,98497)"} true;

    // assume Identical($t14, Signer::$address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1106:9+55
    assume {:print "$at(11,49292,49347)"} true;
    assume ($t14 == $1_Signer_$address_of($t9));

    // assume Identical($t15, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1117:9+94
    assume {:print "$at(11,50033,50127)"} true;
    assume ($t15 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t16, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2211:9+44
    assume {:print "$at(11,100936,100980)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t9));

    // assume Identical($t17, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2241:9+44
    assume {:print "$at(11,102524,102568)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t9));

    // assert exists<Roles::RoleId>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assert {:msg "assert_failed(11,49790,49839): precondition does not hold at this call"}
      $ResourceExists($1_Roles_RoleId_$memory, $t14);

    // opaque begin: DiemAccount::make_account($t9, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49

    // assume Identical($t18, Or(Or(Or(Or(Eq<address>($t14, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq<address>($t14, CoreAddresses::$CORE_CODE_ADDRESS())), exists<AccountFreezing::FreezingBit>($t14)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume ($t18 == (((($IsEqual'address'($t14, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) || $IsEqual'address'($t14, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t14)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t18) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    if ($t18) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
L6:

    // assume Or(Or(Or(Or(And(Eq<address>($t14, CoreAddresses::$VM_RESERVED_ADDRESS()), Eq(7, $t8)), And(Eq<address>($t14, CoreAddresses::$CORE_CODE_ADDRESS()), Eq(7, $t8))), And(exists<AccountFreezing::FreezingBit>($t14), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume ((((($IsEqual'address'($t14, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t8)) || ($IsEqual'address'($t14, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t14) && $IsEqual'u8'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'u8'(7, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assume {:print "$track_abort(29,15):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
L5:

    // modifies global<DiemAccount::DiemAccount>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t14, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t14);
    }

    // modifies global<Event::EventHandleGenerator>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t14, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t14);
    }

    // modifies global<AccountFreezing::FreezingBit>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t14, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t14);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume Identical($t19, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1118:9+104
    assume {:print "$at(11,50136,50240)"} true;
    assume ($t19 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t20, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t20 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t21, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t9), Roles::spec_get_role_id(Signer::spec_address_of($t9)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t21 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t9), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t9))));

    // assume exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume DiemAccount::$exists_at($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t14);

    // assume AccountFreezing::spec_account_is_not_frozen($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t14);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t19, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t15, select DiemAccount::AccountOperationsCapability.creation_events($t15))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t19, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t15, $creation_events#$1_DiemAccount_AccountOperationsCapability($t15)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t14);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t14);

    // assume Identical($t22, $t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t22 == $t21);

    // assume Identical($t23, $t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume ($t23 == $t20);

    // emit_event($t22, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2160:9+43
    assume {:print "$at(11,98454,98497)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t23, $t22);

    // opaque end: DiemAccount::make_account($t9, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2161:5+1
    assume {:print "$at(11,98502,98503)"} true;
L1:

    // assert Not(ValidatorOperatorConfig::$has_validator_operator_config[@377]($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2176:9+117
    assume {:print "$at(11,99077,99194)"} true;
    assert {:msg "assert_failed(11,99077,99194): function does not abort under this condition"}
      !$1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory#377, $t1);

    // assert Not(Not(exists[@378]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:528:9+59
    assume {:print "$at(26,23704,23763)"} true;
    assert {:msg "assert_failed(26,23704,23763): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#378, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@378]<Roles::RoleId>($t5)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:529:9+87
    assume {:print "$at(26,23772,23859)"} true;
    assert {:msg "assert_failed(26,23772,23859): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#378, $t5)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:70:9+108
    assume {:print "$at(8,2901,3009)"} true;
    assert {:msg "assert_failed(8,2901,3009): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1127:9+85
    assume {:print "$at(11,50697,50782)"} true;
    assert {:msg "assert_failed(11,50697,50782): function does not abort under this condition"}
      !$IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS());

    // assert Not(Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1128:9+83
    assume {:print "$at(11,50791,50874)"} true;
    assert {:msg "assert_failed(11,50791,50874): function does not abort under this condition"}
      !$IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS());

    // assert Not(exists[@379]<AccountFreezing::FreezingBit>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1129:9+84
    assume {:print "$at(11,50883,50967)"} true;
    assert {:msg "assert_failed(11,50883,50967): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#379, $t1);

    // assert Not(And(DiemTimestamp::$is_genesis[@380](), Not(exists[@381]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1132:9+165
    assume {:print "$at(11,51142,51307)"} true;
    assert {:msg "assert_failed(11,51142,51307): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#380) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#381, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert Not(Neq<num>(Add(16, Len<u8>($t2)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1176:9+72
    assume {:print "$at(11,53276,53348)"} true;
    assert {:msg "assert_failed(11,53276,53348): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t2)), 32);

    // assert Not(Not(DiemTimestamp::$is_operating[@380]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#380);

    // assert Not(exists[@378]<Roles::RoleId>($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:179:9+62
    assume {:print "$at(26,7535,7597)"} true;
    assert {:msg "assert_failed(26,7535,7597): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#378, $t1);

    // assert DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2182:9+39
    assume {:print "$at(11,99409,99448)"} true;
    assert {:msg "assert_failed(11,99409,99448): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert ValidatorOperatorConfig::$has_validator_operator_config($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2183:9+84
    assume {:print "$at(11,99457,99541)"} true;
    assert {:msg "assert_failed(11,99457,99541): post-condition does not hold"}
      $1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $t1);

    // assert exists<Roles::RoleId>($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:180:9+29
    assume {:print "$at(26,7606,7635)"} true;
    assert {:msg "assert_failed(26,7606,7635): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $t1);

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t1)), 4) at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+48
    assume {:print "$at(26,7644,7692)"} true;
    assert {:msg "assert_failed(26,7644,7692): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t1)), 4);

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@382](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@382]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#382, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#382, addr)))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2161:5+1
    assume {:print "$at(11,98502,98503)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(ValidatorOperatorConfig::$has_validator_operator_config[@377]($t1), Not(exists[@378]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@378]<Roles::RoleId>($t5)), 0)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]())), Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]())), exists[@379]<AccountFreezing::FreezingBit>($t1)), And(DiemTimestamp::$is_genesis[@380](), Not(exists[@381]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))), Neq<num>(Add(16, Len<u8>($t2)), 32)), Not(DiemTimestamp::$is_operating[@380]())), exists[@378]<Roles::RoleId>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2163:5+157
    assume {:print "$at(11,98509,98666)"} true;
    assert {:msg "assert_failed(11,98509,98666): abort not covered by any of the `aborts_if` clauses"}
      (((((((((($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory#377, $t1) || !$ResourceExists($1_Roles_RoleId_$memory#378, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#378, $t5)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS())) || $IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#379, $t1)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#380) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#381, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t2)), 32)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#380)) || $ResourceExists($1_Roles_RoleId_$memory#378, $t1));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(ValidatorOperatorConfig::$has_validator_operator_config[@377]($t1), Eq(6, $t8)), And(Not(exists[@378]<Roles::RoleId>($t5)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@378]<Roles::RoleId>($t5)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(2, $t8))), And(Eq<address>($t1, CoreAddresses::$VM_RESERVED_ADDRESS[]()), Eq(7, $t8))), And(Eq<address>($t1, CoreAddresses::$CORE_CODE_ADDRESS[]()), Eq(7, $t8))), And(exists[@379]<AccountFreezing::FreezingBit>($t1), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis[@380](), Not(exists[@381]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t8))), And(Not(DiemTimestamp::$is_operating[@380]()), Eq(1, $t8))), And(exists[@378]<Roles::RoleId>($t1), Eq(6, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2163:5+157
    assert {:msg "assert_failed(11,98509,98666): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory#377, $t1) && $IsEqual'u8'(6, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory#378, $t5) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#378, $t5)), 0) && $IsEqual'u8'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8))) || ($IsEqual'address'($t1, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t8))) || ($IsEqual'address'($t1, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#379, $t1) && $IsEqual'u8'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#380) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#381, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'u8'(7, $t8))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#380) && $IsEqual'u8'(1, $t8))) || ($ResourceExists($1_Roles_RoleId_$memory#378, $t1) && $IsEqual'u8'(6, $t8)));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2163:5+157
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun DiemAccount::delegated_key_rotation_capability [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+247
procedure {:inline 1} $1_DiemAccount_delegated_key_rotation_capability(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_DiemAccount_DiemAccount;
    var $t8: $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $t9: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+1
    assume {:print "$at(11,72867,72868)"} true;
    assume {:print "$track_local(29,16,0):", $t0} $t0 == $t0;

    // $t3 := DiemAccount::exists_at($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:16+15
    assume {:print "$at(11,72975,72990)"} true;
    call $t3 := $1_DiemAccount_exists_at($t0);
    if ($abort_flag) {
        assume {:print "$at(11,72975,72990)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,16):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:55+8
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31
    // >> opaque call: $t5 := Errors::not_published($t4)

    // $t6 := opaque begin: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31
    assume $IsValid'u64'($t6);

    // assume Eq<u64>($t6, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31
    assume $IsEqual'u64'($t6, 5);

    // $t6 := opaque end: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31

    // trace_local[tmp#$2]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    assume {:print "$track_local(29,16,2):", $t6} $t6 == $t6;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    assume {:print "$track_local(29,16,1):", $t3} $t3 == $t3;

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
L1:

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    assume {:print "$at(11,72968,73024)"} true;
    assume {:print "$track_abort(29,16):", $t6} $t6 == $t6;

    // $t4 := move($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    $t4 := $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:53+4
    assume {:print "$at(11,73078,73082)"} true;
L0:

    // $t7 := get_global<DiemAccount::DiemAccount>($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:26+13
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(11,73051,73064)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,16):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t8 := get_field<DiemAccount::DiemAccount>.key_rotation_capability($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:25+57
    $t8 := $key_rotation_capability#$1_DiemAccount_DiemAccount($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74
    // >> opaque call: $t8 := Option::is_none<DiemAccount::KeyRotationCapability>($t7)

    // $t9 := opaque begin: Option::is_none<DiemAccount::KeyRotationCapability>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74
    assume $IsValid'bool'($t9);

    // assume Eq<bool>($t9, Option::$is_none<DiemAccount::KeyRotationCapability>($t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74
    assume $IsEqual'bool'($t9, $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($t8));

    // $t9 := opaque end: Option::is_none<DiemAccount::KeyRotationCapability>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74
    assume {:print "$track_return(29,16,0):", $t9} $t9 == $t9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1575:5+1
    assume {:print "$at(11,73113,73114)"} true;
L2:

    // return $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1575:5+1
    $ret0 := $t9;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1575:5+1
L3:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1575:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun DiemAccount::delegated_key_rotation_capability [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+247
procedure {:timeLimit 40} $1_DiemAccount_delegated_key_rotation_capability$verify(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_DiemAccount_DiemAccount;
    var $t8: $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $t9: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#140: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,72867,73114)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+247
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+247
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // @140 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+1
    $1_DiemAccount_DiemAccount_$memory#140 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+1
    assume {:print "$track_local(29,16,0):", $t0} $t0 == $t0;

    // $t3 := DiemAccount::exists_at($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:16+15
    assume {:print "$at(11,72975,72990)"} true;
    call $t3 := $1_DiemAccount_exists_at($t0);
    if ($abort_flag) {
        assume {:print "$at(11,72975,72990)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,16):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:55+8
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31
    // >> opaque call: $t5 := Errors::not_published($t4)

    // $t6 := opaque begin: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31
    assume $IsValid'u64'($t6);

    // assume Eq<u64>($t6, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31
    assume $IsEqual'u64'($t6, 5);

    // $t6 := opaque end: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31

    // trace_local[tmp#$2]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    assume {:print "$track_local(29,16,2):", $t6} $t6 == $t6;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    assume {:print "$track_local(29,16,1):", $t3} $t3 == $t3;

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
L1:

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    assume {:print "$at(11,72968,73024)"} true;
    assume {:print "$track_abort(29,16):", $t6} $t6 == $t6;

    // $t4 := move($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    $t4 := $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:53+4
    assume {:print "$at(11,73078,73082)"} true;
L0:

    // $t7 := get_global<DiemAccount::DiemAccount>($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:26+13
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(11,73051,73064)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,16):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t8 := get_field<DiemAccount::DiemAccount>.key_rotation_capability($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:25+57
    $t8 := $key_rotation_capability#$1_DiemAccount_DiemAccount($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74
    // >> opaque call: $t8 := Option::is_none<DiemAccount::KeyRotationCapability>($t7)

    // $t9 := opaque begin: Option::is_none<DiemAccount::KeyRotationCapability>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74
    assume $IsValid'bool'($t9);

    // assume Eq<bool>($t9, Option::$is_none<DiemAccount::KeyRotationCapability>($t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74
    assume $IsEqual'bool'($t9, $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($t8));

    // $t9 := opaque end: Option::is_none<DiemAccount::KeyRotationCapability>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74
    assume {:print "$track_return(29,16,0):", $t9} $t9 == $t9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1575:5+1
    assume {:print "$at(11,73113,73114)"} true;
L2:

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@140]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@140](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#140, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#140, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@140]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@140]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#140, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#140, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@140](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@140]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#140, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#140, addr)))));

    // return $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    $ret0 := $t9;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1575:5+1
    assume {:print "$at(11,73113,73114)"} true;
L3:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1575:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun DiemAccount::delegated_withdraw_capability [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+239
procedure {:inline 1} $1_DiemAccount_delegated_withdraw_capability(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_DiemAccount_DiemAccount;
    var $t8: $1_Option_Option'$1_DiemAccount_WithdrawCapability';
    var $t9: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+1
    assume {:print "$at(11,73203,73204)"} true;
    assume {:print "$track_local(29,17,0):", $t0} $t0 == $t0;

    // $t3 := DiemAccount::exists_at($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:16+15
    assume {:print "$at(11,73307,73322)"} true;
    call $t3 := $1_DiemAccount_exists_at($t0);
    if ($abort_flag) {
        assume {:print "$at(11,73307,73322)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,17):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:55+8
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:33+31
    // >> opaque call: $t5 := Errors::not_published($t4)

    // $t6 := opaque begin: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:33+31

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:33+31
    assume $IsValid'u64'($t6);

    // assume Eq<u64>($t6, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:33+31
    assume $IsEqual'u64'($t6, 5);

    // $t6 := opaque end: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:33+31

    // trace_local[tmp#$2]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
    assume {:print "$track_local(29,17,2):", $t6} $t6 == $t6;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
    assume {:print "$track_local(29,17,1):", $t3} $t3 == $t3;

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
L1:

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
    assume {:print "$at(11,73300,73356)"} true;
    assume {:print "$track_abort(29,17):", $t6} $t6 == $t6;

    // $t4 := move($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
    $t4 := $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:53+4
    assume {:print "$at(11,73410,73414)"} true;
L0:

    // $t7 := get_global<DiemAccount::DiemAccount>($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:26+13
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(11,73383,73396)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,17):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t8 := get_field<DiemAccount::DiemAccount>.withdraw_capability($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:25+53
    $t8 := $withdraw_capability#$1_DiemAccount_DiemAccount($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:9+70
    // >> opaque call: $t8 := Option::is_none<DiemAccount::WithdrawCapability>($t7)

    // $t9 := opaque begin: Option::is_none<DiemAccount::WithdrawCapability>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:9+70

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:9+70
    assume $IsValid'bool'($t9);

    // assume Eq<bool>($t9, Option::$is_none<DiemAccount::WithdrawCapability>($t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:9+70
    assume $IsEqual'bool'($t9, $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($t8));

    // $t9 := opaque end: Option::is_none<DiemAccount::WithdrawCapability>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:9+70

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:9+70
    assume {:print "$track_return(29,17,0):", $t9} $t9 == $t9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1582:5+1
    assume {:print "$at(11,73441,73442)"} true;
L2:

    // return $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1582:5+1
    $ret0 := $t9;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1582:5+1
L3:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1582:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun DiemAccount::delegated_withdraw_capability [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+239
procedure {:timeLimit 40} $1_DiemAccount_delegated_withdraw_capability$verify(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_DiemAccount_DiemAccount;
    var $t8: $1_Option_Option'$1_DiemAccount_WithdrawCapability';
    var $t9: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#138: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+239
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,73203,73442)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+239
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+239
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+239
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+239
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+239
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+239
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // @138 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+1
    $1_DiemAccount_DiemAccount_$memory#138 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1578:5+1
    assume {:print "$track_local(29,17,0):", $t0} $t0 == $t0;

    // $t3 := DiemAccount::exists_at($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:16+15
    assume {:print "$at(11,73307,73322)"} true;
    call $t3 := $1_DiemAccount_exists_at($t0);
    if ($abort_flag) {
        assume {:print "$at(11,73307,73322)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,17):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:55+8
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:33+31
    // >> opaque call: $t5 := Errors::not_published($t4)

    // $t6 := opaque begin: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:33+31

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:33+31
    assume $IsValid'u64'($t6);

    // assume Eq<u64>($t6, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:33+31
    assume $IsEqual'u64'($t6, 5);

    // $t6 := opaque end: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:33+31

    // trace_local[tmp#$2]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
    assume {:print "$track_local(29,17,2):", $t6} $t6 == $t6;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
    assume {:print "$track_local(29,17,1):", $t3} $t3 == $t3;

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
L1:

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
    assume {:print "$at(11,73300,73356)"} true;
    assume {:print "$track_abort(29,17):", $t6} $t6 == $t6;

    // $t4 := move($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
    $t4 := $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1580:9+56
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:53+4
    assume {:print "$at(11,73410,73414)"} true;
L0:

    // $t7 := get_global<DiemAccount::DiemAccount>($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:26+13
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(11,73383,73396)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,17):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t8 := get_field<DiemAccount::DiemAccount>.withdraw_capability($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:25+53
    $t8 := $withdraw_capability#$1_DiemAccount_DiemAccount($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:9+70
    // >> opaque call: $t8 := Option::is_none<DiemAccount::WithdrawCapability>($t7)

    // $t9 := opaque begin: Option::is_none<DiemAccount::WithdrawCapability>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:9+70

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:9+70
    assume $IsValid'bool'($t9);

    // assume Eq<bool>($t9, Option::$is_none<DiemAccount::WithdrawCapability>($t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:9+70
    assume $IsEqual'bool'($t9, $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($t8));

    // $t9 := opaque end: Option::is_none<DiemAccount::WithdrawCapability>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:9+70

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1581:9+70
    assume {:print "$track_return(29,17,0):", $t9} $t9 == $t9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1582:5+1
    assume {:print "$at(11,73441,73442)"} true;
L2:

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@138]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@138](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#138, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#138, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@138]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@138]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#138, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#138, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@138](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@138]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#138, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#138, addr)))));

    // return $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    $ret0 := $t9;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1582:5+1
    assume {:print "$at(11,73441,73442)"} true;
L3:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1582:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun DiemAccount::epilogue [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
procedure {:timeLimit 40} $1_DiemAccount_epilogue$verify(_$t0: int, _$t1: int, _$t2: int, _$t3: int, _$t4: int) returns ()
{
    // declare local variables
    var $t5: int;
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#222: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,91108,91519)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    assume $IsValid'u64'($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+411
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // @222 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+1
    $1_DiemAccount_DiemAccount_$memory#222 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+1
    assume {:print "$track_local(29,19,0):", $t0} $t0 == $t0;

    // trace_local[txn_sequence_number]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+1
    assume {:print "$track_local(29,19,1):", $t1} $t1 == $t1;

    // trace_local[txn_gas_price]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+1
    assume {:print "$track_local(29,19,2):", $t2} $t2 == $t2;

    // trace_local[txn_max_gas_units]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+1
    assume {:print "$track_local(29,19,3):", $t3} $t3 == $t3;

    // trace_local[gas_units_remaining]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1993:5+1
    assume {:print "$track_local(29,19,4):", $t4} $t4 == $t4;

    // DiemAccount::epilogue_common<#0>($t0, $t1, $t2, $t3, $t4) on_abort goto L2 with $t5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2000:9+179
    assume {:print "$at(11,91334,91513)"} true;
    call $1_DiemAccount_epilogue_common'#0'($t0, $t1, $t2, $t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(11,91334,91513)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,19):", $t5} $t5 == $t5;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2007:5+1
    assume {:print "$at(11,91518,91519)"} true;
L1:

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@222](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@222]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#222, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#222, addr)))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2007:5+1
    assume {:print "$at(11,91518,91519)"} true;
L2:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2007:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun DiemAccount::epilogue_common<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
procedure {:inline 1} $1_DiemAccount_epilogue_common'$1_XUS_XUS'(_$t0: int, _$t1: int, _$t2: int, _$t3: int, _$t4: int) returns ()
{
    // declare local variables
    var $t5: $Mutation ($1_Diem_Diem'$1_XUS_XUS');
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($1_DiemAccount_DiemAccount);
    var $t9: $Mutation ($1_DiemAccount_Balance'$1_XUS_XUS');
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: bool;
    var $t38: int;
    var $t39: int;
    var $t40: $Mutation ($1_DiemAccount_DiemAccount);
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: bool;
    var $t49: int;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: $Mutation (int);
    var $t54: int;
    var $t55: bool;
    var $t56: $Mutation ($1_DiemAccount_Balance'$1_XUS_XUS');
    var $t57: $Mutation ($1_Diem_Diem'$1_XUS_XUS');
    var $t58: $1_Diem_Diem'$1_XUS_XUS';
    var $t59: int;
    var $t60: bool;
    var $t61: int;
    var $t62: int;
    var $t63: $1_Diem_Diem'$1_XUS_XUS';
    var $t64: $1_Diem_Diem'$1_XUS_XUS';
    var $t65: bool;
    var $t66: $1_Diem_Diem'$1_XUS_XUS';
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'': $1_DiemAccount_Balance'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t40));
    assume IsEmptyVec(p#$Mutation($t53));
    assume IsEmptyVec(p#$Mutation($t56));
    assume IsEmptyVec(p#$Mutation($t57));

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$at(11,91525,91526)"} true;
    assume {:print "$track_local(29,20,0):", $t0} $t0 == $t0;

    // trace_local[txn_sequence_number]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,1):", $t1} $t1 == $t1;

    // trace_local[txn_gas_price]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,2):", $t2} $t2 == $t2;

    // trace_local[txn_max_gas_units]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,3):", $t3} $t3 == $t3;

    // trace_local[gas_units_remaining]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,4):", $t4} $t4 == $t4;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27
    // >> opaque call: $t23 := Signer::address_of($t0)
    assume {:print "$at(11,91772,91799)"} true;

    // $t23 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27
    assume $IsValid'address'($t23);

    // assume Eq<address>($t23, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27
    assume $IsEqual'address'($t23, $1_Signer_spec_address_of($t0));

    // $t23 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27

    // trace_local[sender]($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:13+6
    assume {:print "$track_local(29,20,7):", $t23} $t23 == $t23;

    // $t24 := >=($t3, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:34+2
    assume {:print "$at(11,91991,91993)"} true;
    call $t24 := $Ge($t3, $t4);

    // $t25 := 20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:83+4
    $t25 := 20;
    assume $IsValid'u64'($t25);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30
    // >> opaque call: $t26 := Errors::invalid_argument($t25)

    // $t26 := opaque begin: Errors::invalid_argument($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30
    assume $IsEqual'u64'($t26, 7);

    // $t26 := opaque end: Errors::invalid_argument($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30

    // trace_local[tmp#$11]($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    assume {:print "$track_local(29,20,11):", $t26} $t26 == $t26;

    // trace_local[tmp#$10]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    assume {:print "$track_local(29,20,10):", $t24} $t24 == $t24;

    // if ($t24) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    if ($t24) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
L1:

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    assume {:print "$at(11,91966,92046)"} true;
    assume {:print "$track_abort(29,20):", $t26} $t26 == $t26;

    // $t27 := move($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    $t27 := $t26;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    goto L16;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2021:24+17
    assume {:print "$at(11,92071,92088)"} true;
L0:

    // $t28 := -($t3, $t4) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2021:42+1
    call $t28 := $Sub($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(11,92089,92090)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // trace_local[gas_used]($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2021:13+8
    assume {:print "$track_local(29,20,6):", $t28} $t28 == $t28;

    // $t29 := (u128)($t2) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:13+23
    assume {:print "$at(11,92301,92324)"} true;
    call $t29 := $CastU128($t2);
    if ($abort_flag) {
        assume {:print "$at(11,92301,92324)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t30 := (u128)($t28) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:39+18
    call $t30 := $CastU128($t28);
    if ($abort_flag) {
        assume {:print "$at(11,92327,92345)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t31 := *($t29, $t30) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:37+1
    call $t31 := $MulU128($t29, $t30);
    if ($abort_flag) {
        assume {:print "$at(11,92325,92326)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t32 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:61+7
    $t32 := 18446744073709551615;
    assume $IsValid'u128'($t32);

    // $t33 := <=($t31, $t32) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:58+2
    call $t33 := $Le($t31, $t32);

    // $t34 := 20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:36+4
    assume {:print "$at(11,92393,92397)"} true;
    $t34 := 20;
    assume $IsValid'u64'($t34);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28
    // >> opaque call: $t34 := Errors::limit_exceeded($t33)

    // $t35 := opaque begin: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28

    // assume WellFormed($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28
    assume $IsValid'u64'($t35);

    // assume Eq<u64>($t35, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28
    assume $IsEqual'u64'($t35, 8);

    // $t35 := opaque end: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28

    // trace_local[tmp#$13]($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    assume {:print "$at(11,92281,92408)"} true;
    assume {:print "$track_local(29,20,13):", $t35} $t35 == $t35;

    // trace_local[tmp#$12]($t33) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    assume {:print "$track_local(29,20,12):", $t33} $t33 == $t33;

    // if ($t33) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    if ($t33) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
L3:

    // trace_abort($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    assume {:print "$at(11,92281,92408)"} true;
    assume {:print "$track_abort(29,20):", $t35} $t35 == $t35;

    // $t27 := move($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    $t27 := $t35;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    goto L16;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2029:38+13
    assume {:print "$at(11,92447,92460)"} true;
L2:

    // $t36 := *($t2, $t28) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2029:52+1
    call $t36 := $MulU64($t2, $t28);
    if ($abort_flag) {
        assume {:print "$at(11,92461,92462)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // trace_local[transaction_fee_amount]($t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2029:13+22
    assume {:print "$track_local(29,20,22):", $t36} $t36 == $t36;

    // $t37 := DiemAccount::exists_at($t23) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:16+17
    assume {:print "$at(11,92630,92647)"} true;
    call $t37 := $1_DiemAccount_exists_at($t23);
    if ($abort_flag) {
        assume {:print "$at(11,92630,92647)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t38 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:57+8
    $t38 := 0;
    assume $IsValid'u64'($t38);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31
    // >> opaque call: $t38 := Errors::not_published($t37)

    // $t39 := opaque begin: Errors::not_published($t38) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31

    // assume WellFormed($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31
    assume $IsValid'u64'($t39);

    // assume Eq<u64>($t39, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31
    assume $IsEqual'u64'($t39, 5);

    // $t39 := opaque end: Errors::not_published($t38) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31

    // trace_local[tmp#$15]($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    assume {:print "$track_local(29,20,15):", $t39} $t39 == $t39;

    // trace_local[tmp#$14]($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    assume {:print "$track_local(29,20,14):", $t37} $t37 == $t37;

    // if ($t37) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    if ($t37) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
L5:

    // trace_abort($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    assume {:print "$at(11,92623,92681)"} true;
    assume {:print "$track_abort(29,20):", $t39} $t39 == $t39;

    // $t27 := move($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    $t27 := $t39;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    goto L16;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2034:61+6
    assume {:print "$at(11,92743,92749)"} true;
L4:

    // $t40 := borrow_global<DiemAccount::DiemAccount>($t23) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2034:30+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t40 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(11,92712,92729)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // trace_local[sender_account]($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2034:13+14
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t40);
    assume {:print "$track_local(29,20,8):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t41 := get_field<DiemAccount::DiemAccount>.sequence_number($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2039:13+30
    assume {:print "$at(11,92927,92957)"} true;
    $t41 := $sequence_number#$1_DiemAccount_DiemAccount($Dereference($t40));

    // $t42 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2039:47+7
    $t42 := 18446744073709551615;
    assume $IsValid'u128'($t42);

    // $t43 := (u64)($t42) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2039:46+16
    call $t43 := $CastU64($t42);
    if ($abort_flag) {
        assume {:print "$at(11,92960,92976)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t44 := <($t41, $t43) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2039:44+1
    call $t44 := $Lt($t41, $t43);

    // $t45 := 1011 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:36+33
    assume {:print "$at(11,93013,93046)"} true;
    $t45 := 1011;
    assume $IsValid'u64'($t45);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57
    // >> opaque call: $t45 := Errors::limit_exceeded($t44)

    // $t46 := opaque begin: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57
    assume $IsValid'u64'($t46);

    // assume Eq<u64>($t46, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57
    assume $IsEqual'u64'($t46, 8);

    // $t46 := opaque end: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57

    // trace_local[tmp#$17]($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    assume {:print "$at(11,92907,93057)"} true;
    assume {:print "$track_local(29,20,17):", $t46} $t46 == $t46;

    // trace_local[tmp#$16]($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    assume {:print "$track_local(29,20,16):", $t44} $t44 == $t44;

    // if ($t44) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    if ($t44) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
L7:

    // pack_ref_deep($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150

    // destroy($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150

    // trace_abort($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    assume {:print "$at(11,92907,93057)"} true;
    assume {:print "$track_abort(29,20):", $t46} $t46 == $t46;

    // $t27 := move($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    $t27 := $t46;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    goto L16;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2046:13+14
    assume {:print "$at(11,93248,93262)"} true;
L6:

    // $t47 := get_field<DiemAccount::DiemAccount>.sequence_number($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2046:13+30
    $t47 := $sequence_number#$1_DiemAccount_DiemAccount($Dereference($t40));

    // $t48 := ==($t47, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2046:44+2
    $t48 := $IsEqual'u64'($t47, $t1);

    // $t49 := 1003 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:38+33
    assume {:print "$at(11,93340,93373)"} true;
    $t49 := 1003;
    assume $IsValid'u64'($t49);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59
    // >> opaque call: $t49 := Errors::invalid_argument($t48)

    // $t50 := opaque begin: Errors::invalid_argument($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59

    // assume WellFormed($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59
    assume $IsValid'u64'($t50);

    // assume Eq<u64>($t50, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59
    assume $IsEqual'u64'($t50, 7);

    // $t50 := opaque end: Errors::invalid_argument($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59

    // trace_local[tmp#$19]($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    assume {:print "$at(11,93228,93384)"} true;
    assume {:print "$track_local(29,20,19):", $t50} $t50 == $t50;

    // trace_local[tmp#$18]($t48) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    assume {:print "$track_local(29,20,18):", $t48} $t48 == $t48;

    // if ($t48) goto L8 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    if ($t48) { goto L8; } else { goto L9; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
L9:

    // pack_ref_deep($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156

    // destroy($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156

    // trace_abort($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    assume {:print "$at(11,93228,93384)"} true;
    assume {:print "$track_abort(29,20):", $t50} $t50 == $t50;

    // $t27 := move($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    $t27 := $t50;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    goto L16;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:42+19
    assume {:print "$at(11,93615,93634)"} true;
L8:

    // $t51 := 1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:64+1
    $t51 := 1;
    assume $IsValid'u64'($t51);

    // $t52 := +($t1, $t51) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:62+1
    call $t52 := $AddU64($t1, $t51);
    if ($abort_flag) {
        assume {:print "$at(11,93635,93636)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t53 := borrow_field<DiemAccount::DiemAccount>.sequence_number($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+30
    $t53 := $ChildMutation($t40, 5, $sequence_number#$1_DiemAccount_DiemAccount($Dereference($t40)));

    // write_ref($t53, $t52) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+56
    $t53 := $UpdateMutation($t53, $t52);

    // write_back[Reference($t40).sequence_number]($t53) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+56
    $t40 := $UpdateMutation($t40, $Update'$1_DiemAccount_DiemAccount'_sequence_number($Dereference($t40), $Dereference($t53)));

    // pack_ref_deep($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+56

    // write_back[DiemAccount::DiemAccount@]($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+56
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t40),
        $Dereference($t40));

    // $t54 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:38+1
    assume {:print "$at(11,93678,93679)"} true;
    $t54 := 0;
    assume $IsValid'u64'($t54);

    // $t55 := >($t36, $t54) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:36+1
    call $t55 := $Gt($t36, $t54);

    // if ($t55) goto L10 else goto L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:9+751
    if ($t55) { goto L10; } else { goto L11; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:9+751
L11:

    // goto L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:9+751
    goto L12;

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2057:68+6
    assume {:print "$at(11,93868,93874)"} true;
L10:

    // $t56 := borrow_global<DiemAccount::Balance<#0>>($t23) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2057:34+17
    if (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t56 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(11,93834,93851)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // trace_local[sender_balance]($t56) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2057:17+14
    $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'' := $Dereference($t56);
    assume {:print "$track_local(29,20,9):", $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS''} $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'' == $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'';

    // $t57 := borrow_field<DiemAccount::Balance<#0>>.coin($t56) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2058:24+24
    assume {:print "$at(11,93900,93924)"} true;
    $t57 := $ChildMutation($t56, 0, $coin#$1_DiemAccount_Balance'$1_XUS_XUS'($Dereference($t56)));

    // trace_local[coin]($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2058:17+4
    $temp_0'$1_Diem_Diem'$1_XUS_XUS'' := $Dereference($t57);
    assume {:print "$track_local(29,20,5):", $temp_0'$1_Diem_Diem'$1_XUS_XUS''} $temp_0'$1_Diem_Diem'$1_XUS_XUS'' == $temp_0'$1_Diem_Diem'$1_XUS_XUS'';

    // $t58 := read_ref($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2062:55+4
    assume {:print "$at(11,94113,94117)"} true;
    $t58 := $Dereference($t57);

    // $t59 := Diem::value<#0>($t58) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2062:43+17
    call $t59 := $1_Diem_value'$1_XUS_XUS'($t58);
    if ($abort_flag) {
        assume {:print "$at(11,94101,94118)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t60 := <=($t36, $t59) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2062:40+2
    call $t60 := $Le($t36, $t59);

    // $t61 := 1005 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:40+30
    assume {:print "$at(11,94159,94189)"} true;
    $t61 := 1005;
    assume $IsValid'u64'($t61);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54
    // >> opaque call: $t61 := Errors::limit_exceeded($t60)

    // $t62 := opaque begin: Errors::limit_exceeded($t61) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54

    // assume WellFormed($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54
    assume $IsValid'u64'($t62);

    // assume Eq<u64>($t62, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54
    assume $IsEqual'u64'($t62, 8);

    // $t62 := opaque end: Errors::limit_exceeded($t61) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54

    // trace_local[tmp#$21]($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    assume {:print "$at(11,94051,94204)"} true;
    assume {:print "$track_local(29,20,21):", $t62} $t62 == $t62;

    // trace_local[tmp#$20]($t60) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    assume {:print "$track_local(29,20,20):", $t60} $t60 == $t60;

    // if ($t60) goto L13 else goto L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    if ($t60) { goto L13; } else { goto L19; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
L14:

    // destroy($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153

    // trace_abort($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    assume {:print "$at(11,94051,94204)"} true;
    assume {:print "$track_abort(29,20):", $t62} $t62 == $t62;

    // $t27 := move($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    $t27 := $t62;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    goto L16;

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:52+4
    assume {:print "$at(11,94360,94364)"} true;
L13:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    // >> opaque call: $t62 := Diem::withdraw<#0>($t56, $t35)

    // $t63 := opaque begin: Diem::withdraw<#0>($t57, $t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44

    // $t64 := read_ref($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    $t64 := $Dereference($t57);

    // assume Identical($t65, Lt(select Diem::Diem.value($t57), $t36)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume ($t65 == ($value#$1_Diem_Diem'$1_XUS_XUS'($Dereference($t57)) < $t36));

    // if ($t65) goto L20 else goto L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    if ($t65) { goto L20; } else { goto L17; }

    // label L18 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
L18:

    // assume And(Lt(select Diem::Diem.value($t57), $t36), Eq(8, $t27)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume (($value#$1_Diem_Diem'$1_XUS_XUS'($Dereference($t57)) < $t36) && $IsEqual'u8'(8, $t27));

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume {:print "$at(11,94345,94389)"} true;
    assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    goto L16;

    // label L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
L17:

    // havoc[mut]($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    havoc $temp_0'$1_Diem_Diem'$1_XUS_XUS'';
    $t57 := $UpdateMutation($t57, $temp_0'$1_Diem_Diem'$1_XUS_XUS'');
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($Dereference($t57));

    // assume WellFormed($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($Dereference($t57));

    // assume WellFormed($t63) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($t63);

    // assume Eq<u64>(select Diem::Diem.value($t57), Sub(select Diem::Diem.value($t64), $t36)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($Dereference($t57)), ($value#$1_Diem_Diem'$1_XUS_XUS'($t64) - $t36));

    // assume Eq<u64>(select Diem::Diem.value($t63), $t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($t63), $t36);

    // $t63 := opaque end: Diem::withdraw<#0>($t57, $t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44

    // write_back[Reference($t56).coin]($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    $t56 := $UpdateMutation($t56, $Update'$1_DiemAccount_Balance'$1_XUS_XUS''_coin($Dereference($t56), $Dereference($t57)));

    // write_back[DiemAccount::Balance<#0>@]($t56) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t56),
        $Dereference($t56));

    // assume Identical($t66, select TransactionFee::TransactionFee.balance(TransactionFee::spec_transaction_fee<#0>())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:88:9+52
    assume {:print "$at(31,3250,3302)"} true;
    assume ($t66 == $balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'($1_TransactionFee_spec_transaction_fee'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory)));

    // TransactionFee::pay_fee<#0>($t63) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:13+69
    assume {:print "$at(11,94321,94390)"} true;
    call $1_TransactionFee_pay_fee'$1_XUS_XUS'($t63);
    if ($abort_flag) {
        assume {:print "$at(11,94321,94390)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:9+751
    assume {:print "$at(11,93649,94400)"} true;
L12:

    // label L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2069:5+1
    assume {:print "$at(11,94405,94406)"} true;
L15:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2069:5+1
    return;

    // label L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2069:5+1
L16:

    // abort($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2069:5+1
    $abort_code := $t27;
    $abort_flag := true;
    return;

    // label L19 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L19:

    // destroy($t56) at <internal>:1:1+10

    // goto L14 at <internal>:1:1+10
    goto L14;

    // label L20 at <internal>:1:1+10
L20:

    // destroy($t56) at <internal>:1:1+10

    // goto L18 at <internal>:1:1+10
    goto L18;

}

// fun DiemAccount::epilogue_common<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
procedure {:inline 1} $1_DiemAccount_epilogue_common'#0'(_$t0: int, _$t1: int, _$t2: int, _$t3: int, _$t4: int) returns ()
{
    // declare local variables
    var $t5: $Mutation ($1_Diem_Diem'#0');
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($1_DiemAccount_DiemAccount);
    var $t9: $Mutation ($1_DiemAccount_Balance'#0');
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: bool;
    var $t38: int;
    var $t39: int;
    var $t40: $Mutation ($1_DiemAccount_DiemAccount);
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: bool;
    var $t49: int;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: $Mutation (int);
    var $t54: int;
    var $t55: bool;
    var $t56: $Mutation ($1_DiemAccount_Balance'#0');
    var $t57: $Mutation ($1_Diem_Diem'#0');
    var $t58: $1_Diem_Diem'#0';
    var $t59: int;
    var $t60: bool;
    var $t61: int;
    var $t62: int;
    var $t63: $1_Diem_Diem'#0';
    var $t64: $1_Diem_Diem'#0';
    var $t65: bool;
    var $t66: $1_Diem_Diem'#0';
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t40));
    assume IsEmptyVec(p#$Mutation($t53));
    assume IsEmptyVec(p#$Mutation($t56));
    assume IsEmptyVec(p#$Mutation($t57));

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$at(11,91525,91526)"} true;
    assume {:print "$track_local(29,20,0):", $t0} $t0 == $t0;

    // trace_local[txn_sequence_number]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,1):", $t1} $t1 == $t1;

    // trace_local[txn_gas_price]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,2):", $t2} $t2 == $t2;

    // trace_local[txn_max_gas_units]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,3):", $t3} $t3 == $t3;

    // trace_local[gas_units_remaining]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,4):", $t4} $t4 == $t4;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27
    // >> opaque call: $t23 := Signer::address_of($t0)
    assume {:print "$at(11,91772,91799)"} true;

    // $t23 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27
    assume $IsValid'address'($t23);

    // assume Eq<address>($t23, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27
    assume $IsEqual'address'($t23, $1_Signer_spec_address_of($t0));

    // $t23 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27

    // trace_local[sender]($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:13+6
    assume {:print "$track_local(29,20,7):", $t23} $t23 == $t23;

    // $t24 := >=($t3, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:34+2
    assume {:print "$at(11,91991,91993)"} true;
    call $t24 := $Ge($t3, $t4);

    // $t25 := 20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:83+4
    $t25 := 20;
    assume $IsValid'u64'($t25);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30
    // >> opaque call: $t26 := Errors::invalid_argument($t25)

    // $t26 := opaque begin: Errors::invalid_argument($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30
    assume $IsEqual'u64'($t26, 7);

    // $t26 := opaque end: Errors::invalid_argument($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30

    // trace_local[tmp#$11]($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    assume {:print "$track_local(29,20,11):", $t26} $t26 == $t26;

    // trace_local[tmp#$10]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    assume {:print "$track_local(29,20,10):", $t24} $t24 == $t24;

    // if ($t24) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    if ($t24) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
L1:

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    assume {:print "$at(11,91966,92046)"} true;
    assume {:print "$track_abort(29,20):", $t26} $t26 == $t26;

    // $t27 := move($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    $t27 := $t26;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    goto L16;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2021:24+17
    assume {:print "$at(11,92071,92088)"} true;
L0:

    // $t28 := -($t3, $t4) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2021:42+1
    call $t28 := $Sub($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(11,92089,92090)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // trace_local[gas_used]($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2021:13+8
    assume {:print "$track_local(29,20,6):", $t28} $t28 == $t28;

    // $t29 := (u128)($t2) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:13+23
    assume {:print "$at(11,92301,92324)"} true;
    call $t29 := $CastU128($t2);
    if ($abort_flag) {
        assume {:print "$at(11,92301,92324)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t30 := (u128)($t28) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:39+18
    call $t30 := $CastU128($t28);
    if ($abort_flag) {
        assume {:print "$at(11,92327,92345)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t31 := *($t29, $t30) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:37+1
    call $t31 := $MulU128($t29, $t30);
    if ($abort_flag) {
        assume {:print "$at(11,92325,92326)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t32 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:61+7
    $t32 := 18446744073709551615;
    assume $IsValid'u128'($t32);

    // $t33 := <=($t31, $t32) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:58+2
    call $t33 := $Le($t31, $t32);

    // $t34 := 20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:36+4
    assume {:print "$at(11,92393,92397)"} true;
    $t34 := 20;
    assume $IsValid'u64'($t34);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28
    // >> opaque call: $t34 := Errors::limit_exceeded($t33)

    // $t35 := opaque begin: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28

    // assume WellFormed($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28
    assume $IsValid'u64'($t35);

    // assume Eq<u64>($t35, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28
    assume $IsEqual'u64'($t35, 8);

    // $t35 := opaque end: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28

    // trace_local[tmp#$13]($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    assume {:print "$at(11,92281,92408)"} true;
    assume {:print "$track_local(29,20,13):", $t35} $t35 == $t35;

    // trace_local[tmp#$12]($t33) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    assume {:print "$track_local(29,20,12):", $t33} $t33 == $t33;

    // if ($t33) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    if ($t33) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
L3:

    // trace_abort($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    assume {:print "$at(11,92281,92408)"} true;
    assume {:print "$track_abort(29,20):", $t35} $t35 == $t35;

    // $t27 := move($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    $t27 := $t35;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    goto L16;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2029:38+13
    assume {:print "$at(11,92447,92460)"} true;
L2:

    // $t36 := *($t2, $t28) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2029:52+1
    call $t36 := $MulU64($t2, $t28);
    if ($abort_flag) {
        assume {:print "$at(11,92461,92462)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // trace_local[transaction_fee_amount]($t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2029:13+22
    assume {:print "$track_local(29,20,22):", $t36} $t36 == $t36;

    // $t37 := DiemAccount::exists_at($t23) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:16+17
    assume {:print "$at(11,92630,92647)"} true;
    call $t37 := $1_DiemAccount_exists_at($t23);
    if ($abort_flag) {
        assume {:print "$at(11,92630,92647)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t38 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:57+8
    $t38 := 0;
    assume $IsValid'u64'($t38);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31
    // >> opaque call: $t38 := Errors::not_published($t37)

    // $t39 := opaque begin: Errors::not_published($t38) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31

    // assume WellFormed($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31
    assume $IsValid'u64'($t39);

    // assume Eq<u64>($t39, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31
    assume $IsEqual'u64'($t39, 5);

    // $t39 := opaque end: Errors::not_published($t38) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31

    // trace_local[tmp#$15]($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    assume {:print "$track_local(29,20,15):", $t39} $t39 == $t39;

    // trace_local[tmp#$14]($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    assume {:print "$track_local(29,20,14):", $t37} $t37 == $t37;

    // if ($t37) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    if ($t37) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
L5:

    // trace_abort($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    assume {:print "$at(11,92623,92681)"} true;
    assume {:print "$track_abort(29,20):", $t39} $t39 == $t39;

    // $t27 := move($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    $t27 := $t39;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    goto L16;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2034:61+6
    assume {:print "$at(11,92743,92749)"} true;
L4:

    // $t40 := borrow_global<DiemAccount::DiemAccount>($t23) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2034:30+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t40 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(11,92712,92729)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // trace_local[sender_account]($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2034:13+14
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t40);
    assume {:print "$track_local(29,20,8):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t41 := get_field<DiemAccount::DiemAccount>.sequence_number($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2039:13+30
    assume {:print "$at(11,92927,92957)"} true;
    $t41 := $sequence_number#$1_DiemAccount_DiemAccount($Dereference($t40));

    // $t42 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2039:47+7
    $t42 := 18446744073709551615;
    assume $IsValid'u128'($t42);

    // $t43 := (u64)($t42) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2039:46+16
    call $t43 := $CastU64($t42);
    if ($abort_flag) {
        assume {:print "$at(11,92960,92976)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t44 := <($t41, $t43) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2039:44+1
    call $t44 := $Lt($t41, $t43);

    // $t45 := 1011 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:36+33
    assume {:print "$at(11,93013,93046)"} true;
    $t45 := 1011;
    assume $IsValid'u64'($t45);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57
    // >> opaque call: $t45 := Errors::limit_exceeded($t44)

    // $t46 := opaque begin: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57
    assume $IsValid'u64'($t46);

    // assume Eq<u64>($t46, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57
    assume $IsEqual'u64'($t46, 8);

    // $t46 := opaque end: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57

    // trace_local[tmp#$17]($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    assume {:print "$at(11,92907,93057)"} true;
    assume {:print "$track_local(29,20,17):", $t46} $t46 == $t46;

    // trace_local[tmp#$16]($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    assume {:print "$track_local(29,20,16):", $t44} $t44 == $t44;

    // if ($t44) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    if ($t44) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
L7:

    // pack_ref_deep($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150

    // destroy($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150

    // trace_abort($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    assume {:print "$at(11,92907,93057)"} true;
    assume {:print "$track_abort(29,20):", $t46} $t46 == $t46;

    // $t27 := move($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    $t27 := $t46;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    goto L16;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2046:13+14
    assume {:print "$at(11,93248,93262)"} true;
L6:

    // $t47 := get_field<DiemAccount::DiemAccount>.sequence_number($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2046:13+30
    $t47 := $sequence_number#$1_DiemAccount_DiemAccount($Dereference($t40));

    // $t48 := ==($t47, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2046:44+2
    $t48 := $IsEqual'u64'($t47, $t1);

    // $t49 := 1003 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:38+33
    assume {:print "$at(11,93340,93373)"} true;
    $t49 := 1003;
    assume $IsValid'u64'($t49);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59
    // >> opaque call: $t49 := Errors::invalid_argument($t48)

    // $t50 := opaque begin: Errors::invalid_argument($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59

    // assume WellFormed($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59
    assume $IsValid'u64'($t50);

    // assume Eq<u64>($t50, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59
    assume $IsEqual'u64'($t50, 7);

    // $t50 := opaque end: Errors::invalid_argument($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59

    // trace_local[tmp#$19]($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    assume {:print "$at(11,93228,93384)"} true;
    assume {:print "$track_local(29,20,19):", $t50} $t50 == $t50;

    // trace_local[tmp#$18]($t48) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    assume {:print "$track_local(29,20,18):", $t48} $t48 == $t48;

    // if ($t48) goto L8 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    if ($t48) { goto L8; } else { goto L9; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
L9:

    // pack_ref_deep($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156

    // destroy($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156

    // trace_abort($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    assume {:print "$at(11,93228,93384)"} true;
    assume {:print "$track_abort(29,20):", $t50} $t50 == $t50;

    // $t27 := move($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    $t27 := $t50;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    goto L16;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:42+19
    assume {:print "$at(11,93615,93634)"} true;
L8:

    // $t51 := 1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:64+1
    $t51 := 1;
    assume $IsValid'u64'($t51);

    // $t52 := +($t1, $t51) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:62+1
    call $t52 := $AddU64($t1, $t51);
    if ($abort_flag) {
        assume {:print "$at(11,93635,93636)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t53 := borrow_field<DiemAccount::DiemAccount>.sequence_number($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+30
    $t53 := $ChildMutation($t40, 5, $sequence_number#$1_DiemAccount_DiemAccount($Dereference($t40)));

    // write_ref($t53, $t52) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+56
    $t53 := $UpdateMutation($t53, $t52);

    // write_back[Reference($t40).sequence_number]($t53) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+56
    $t40 := $UpdateMutation($t40, $Update'$1_DiemAccount_DiemAccount'_sequence_number($Dereference($t40), $Dereference($t53)));

    // pack_ref_deep($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+56

    // write_back[DiemAccount::DiemAccount@]($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+56
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t40),
        $Dereference($t40));

    // $t54 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:38+1
    assume {:print "$at(11,93678,93679)"} true;
    $t54 := 0;
    assume $IsValid'u64'($t54);

    // $t55 := >($t36, $t54) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:36+1
    call $t55 := $Gt($t36, $t54);

    // if ($t55) goto L10 else goto L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:9+751
    if ($t55) { goto L10; } else { goto L11; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:9+751
L11:

    // goto L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:9+751
    goto L12;

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2057:68+6
    assume {:print "$at(11,93868,93874)"} true;
L10:

    // $t56 := borrow_global<DiemAccount::Balance<#0>>($t23) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2057:34+17
    if (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t56 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(11,93834,93851)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // trace_local[sender_balance]($t56) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2057:17+14
    $temp_0'$1_DiemAccount_Balance'#0'' := $Dereference($t56);
    assume {:print "$track_local(29,20,9):", $temp_0'$1_DiemAccount_Balance'#0''} $temp_0'$1_DiemAccount_Balance'#0'' == $temp_0'$1_DiemAccount_Balance'#0'';

    // $t57 := borrow_field<DiemAccount::Balance<#0>>.coin($t56) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2058:24+24
    assume {:print "$at(11,93900,93924)"} true;
    $t57 := $ChildMutation($t56, 0, $coin#$1_DiemAccount_Balance'#0'($Dereference($t56)));

    // trace_local[coin]($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2058:17+4
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t57);
    assume {:print "$track_local(29,20,5):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // $t58 := read_ref($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2062:55+4
    assume {:print "$at(11,94113,94117)"} true;
    $t58 := $Dereference($t57);

    // $t59 := Diem::value<#0>($t58) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2062:43+17
    call $t59 := $1_Diem_value'#0'($t58);
    if ($abort_flag) {
        assume {:print "$at(11,94101,94118)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t60 := <=($t36, $t59) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2062:40+2
    call $t60 := $Le($t36, $t59);

    // $t61 := 1005 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:40+30
    assume {:print "$at(11,94159,94189)"} true;
    $t61 := 1005;
    assume $IsValid'u64'($t61);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54
    // >> opaque call: $t61 := Errors::limit_exceeded($t60)

    // $t62 := opaque begin: Errors::limit_exceeded($t61) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54

    // assume WellFormed($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54
    assume $IsValid'u64'($t62);

    // assume Eq<u64>($t62, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54
    assume $IsEqual'u64'($t62, 8);

    // $t62 := opaque end: Errors::limit_exceeded($t61) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54

    // trace_local[tmp#$21]($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    assume {:print "$at(11,94051,94204)"} true;
    assume {:print "$track_local(29,20,21):", $t62} $t62 == $t62;

    // trace_local[tmp#$20]($t60) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    assume {:print "$track_local(29,20,20):", $t60} $t60 == $t60;

    // if ($t60) goto L13 else goto L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    if ($t60) { goto L13; } else { goto L19; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
L14:

    // destroy($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153

    // trace_abort($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    assume {:print "$at(11,94051,94204)"} true;
    assume {:print "$track_abort(29,20):", $t62} $t62 == $t62;

    // $t27 := move($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    $t27 := $t62;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    goto L16;

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:52+4
    assume {:print "$at(11,94360,94364)"} true;
L13:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    // >> opaque call: $t62 := Diem::withdraw<#0>($t56, $t35)

    // $t63 := opaque begin: Diem::withdraw<#0>($t57, $t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44

    // $t64 := read_ref($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    $t64 := $Dereference($t57);

    // assume Identical($t65, Lt(select Diem::Diem.value($t57), $t36)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume ($t65 == ($value#$1_Diem_Diem'#0'($Dereference($t57)) < $t36));

    // if ($t65) goto L20 else goto L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    if ($t65) { goto L20; } else { goto L17; }

    // label L18 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
L18:

    // assume And(Lt(select Diem::Diem.value($t57), $t36), Eq(8, $t27)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume (($value#$1_Diem_Diem'#0'($Dereference($t57)) < $t36) && $IsEqual'u8'(8, $t27));

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume {:print "$at(11,94345,94389)"} true;
    assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    goto L16;

    // label L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
L17:

    // havoc[mut]($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t57 := $UpdateMutation($t57, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t57));

    // assume WellFormed($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t57));

    // assume WellFormed($t63) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume $IsValid'$1_Diem_Diem'#0''($t63);

    // assume Eq<u64>(select Diem::Diem.value($t57), Sub(select Diem::Diem.value($t64), $t36)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t57)), ($value#$1_Diem_Diem'#0'($t64) - $t36));

    // assume Eq<u64>(select Diem::Diem.value($t63), $t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t63), $t36);

    // $t63 := opaque end: Diem::withdraw<#0>($t57, $t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44

    // write_back[Reference($t56).coin]($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    $t56 := $UpdateMutation($t56, $Update'$1_DiemAccount_Balance'#0''_coin($Dereference($t56), $Dereference($t57)));

    // write_back[DiemAccount::Balance<#0>@]($t56) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $GlobalLocationAddress($t56),
        $Dereference($t56));

    // assume Identical($t66, select TransactionFee::TransactionFee.balance(TransactionFee::spec_transaction_fee<#0>())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:88:9+52
    assume {:print "$at(31,3250,3302)"} true;
    assume ($t66 == $balance#$1_TransactionFee_TransactionFee'#0'($1_TransactionFee_spec_transaction_fee'#0'($1_TransactionFee_TransactionFee'#0'_$memory)));

    // TransactionFee::pay_fee<#0>($t63) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:13+69
    assume {:print "$at(11,94321,94390)"} true;
    call $1_TransactionFee_pay_fee'#0'($t63);
    if ($abort_flag) {
        assume {:print "$at(11,94321,94390)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:9+751
    assume {:print "$at(11,93649,94400)"} true;
L12:

    // label L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2069:5+1
    assume {:print "$at(11,94405,94406)"} true;
L15:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2069:5+1
    return;

    // label L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2069:5+1
L16:

    // abort($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2069:5+1
    $abort_code := $t27;
    $abort_flag := true;
    return;

    // label L19 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L19:

    // destroy($t56) at <internal>:1:1+10

    // goto L14 at <internal>:1:1+10
    goto L14;

    // label L20 at <internal>:1:1+10
L20:

    // destroy($t56) at <internal>:1:1+10

    // goto L18 at <internal>:1:1+10
    goto L18;

}

// fun DiemAccount::epilogue_common [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
procedure {:timeLimit 40} $1_DiemAccount_epilogue_common$verify(_$t0: int, _$t1: int, _$t2: int, _$t3: int, _$t4: int) returns ()
{
    // declare local variables
    var $t5: $Mutation ($1_Diem_Diem'#0');
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($1_DiemAccount_DiemAccount);
    var $t9: $Mutation ($1_DiemAccount_Balance'#0');
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: bool;
    var $t38: int;
    var $t39: int;
    var $t40: $Mutation ($1_DiemAccount_DiemAccount);
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: bool;
    var $t49: int;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: $Mutation (int);
    var $t54: int;
    var $t55: bool;
    var $t56: $Mutation ($1_DiemAccount_Balance'#0');
    var $t57: $Mutation ($1_Diem_Diem'#0');
    var $t58: $1_Diem_Diem'#0';
    var $t59: int;
    var $t60: bool;
    var $t61: int;
    var $t62: int;
    var $t63: $1_Diem_Diem'#0';
    var $t64: $1_Diem_Diem'#0';
    var $t65: bool;
    var $t66: $1_Diem_Diem'#0';
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#191: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#632: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t40));
    assume IsEmptyVec(p#$Mutation($t53));
    assume IsEmptyVec(p#$Mutation($t56));
    assume IsEmptyVec(p#$Mutation($t57));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,91525,94406)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    assume $IsValid'u64'($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // @191 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    $1_DiemAccount_DiemAccount_$memory#191 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,0):", $t0} $t0 == $t0;

    // trace_local[txn_sequence_number]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,1):", $t1} $t1 == $t1;

    // trace_local[txn_gas_price]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,2):", $t2} $t2 == $t2;

    // trace_local[txn_max_gas_units]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,3):", $t3} $t3 == $t3;

    // trace_local[gas_units_remaining]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+1
    assume {:print "$track_local(29,20,4):", $t4} $t4 == $t4;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27
    // >> opaque call: $t23 := Signer::address_of($t0)
    assume {:print "$at(11,91772,91799)"} true;

    // $t23 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27
    assume $IsValid'address'($t23);

    // assume Eq<address>($t23, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27
    assume $IsEqual'address'($t23, $1_Signer_spec_address_of($t0));

    // $t23 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:22+27

    // trace_local[sender]($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2016:13+6
    assume {:print "$track_local(29,20,7):", $t23} $t23 == $t23;

    // $t24 := >=($t3, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:34+2
    assume {:print "$at(11,91991,91993)"} true;
    call $t24 := $Ge($t3, $t4);

    // $t25 := 20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:83+4
    $t25 := 20;
    assume $IsValid'u64'($t25);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30
    // >> opaque call: $t26 := Errors::invalid_argument($t25)

    // $t26 := opaque begin: Errors::invalid_argument($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30
    assume $IsEqual'u64'($t26, 7);

    // $t26 := opaque end: Errors::invalid_argument($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:58+30

    // trace_local[tmp#$11]($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    assume {:print "$track_local(29,20,11):", $t26} $t26 == $t26;

    // trace_local[tmp#$10]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    assume {:print "$track_local(29,20,10):", $t24} $t24 == $t24;

    // if ($t24) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    if ($t24) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
L1:

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    assume {:print "$at(11,91966,92046)"} true;
    assume {:print "$track_abort(29,20):", $t26} $t26 == $t26;

    // $t27 := move($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    $t27 := $t26;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2020:9+80
    goto L16;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2021:24+17
    assume {:print "$at(11,92071,92088)"} true;
L0:

    // $t28 := -($t3, $t4) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2021:42+1
    call $t28 := $Sub($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(11,92089,92090)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // trace_local[gas_used]($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2021:13+8
    assume {:print "$track_local(29,20,6):", $t28} $t28 == $t28;

    // $t29 := (u128)($t2) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:13+23
    assume {:print "$at(11,92301,92324)"} true;
    call $t29 := $CastU128($t2);
    if ($abort_flag) {
        assume {:print "$at(11,92301,92324)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t30 := (u128)($t28) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:39+18
    call $t30 := $CastU128($t28);
    if ($abort_flag) {
        assume {:print "$at(11,92327,92345)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t31 := *($t29, $t30) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:37+1
    call $t31 := $MulU128($t29, $t30);
    if ($abort_flag) {
        assume {:print "$at(11,92325,92326)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t32 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:61+7
    $t32 := 18446744073709551615;
    assume $IsValid'u128'($t32);

    // $t33 := <=($t31, $t32) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2026:58+2
    call $t33 := $Le($t31, $t32);

    // $t34 := 20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:36+4
    assume {:print "$at(11,92393,92397)"} true;
    $t34 := 20;
    assume $IsValid'u64'($t34);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28
    // >> opaque call: $t34 := Errors::limit_exceeded($t33)

    // $t35 := opaque begin: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28

    // assume WellFormed($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28
    assume $IsValid'u64'($t35);

    // assume Eq<u64>($t35, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28
    assume $IsEqual'u64'($t35, 8);

    // $t35 := opaque end: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2027:13+28

    // trace_local[tmp#$13]($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    assume {:print "$at(11,92281,92408)"} true;
    assume {:print "$track_local(29,20,13):", $t35} $t35 == $t35;

    // trace_local[tmp#$12]($t33) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    assume {:print "$track_local(29,20,12):", $t33} $t33 == $t33;

    // if ($t33) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    if ($t33) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
L3:

    // trace_abort($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    assume {:print "$at(11,92281,92408)"} true;
    assume {:print "$track_abort(29,20):", $t35} $t35 == $t35;

    // $t27 := move($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    $t27 := $t35;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2025:9+127
    goto L16;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2029:38+13
    assume {:print "$at(11,92447,92460)"} true;
L2:

    // $t36 := *($t2, $t28) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2029:52+1
    call $t36 := $MulU64($t2, $t28);
    if ($abort_flag) {
        assume {:print "$at(11,92461,92462)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // trace_local[transaction_fee_amount]($t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2029:13+22
    assume {:print "$track_local(29,20,22):", $t36} $t36 == $t36;

    // $t37 := DiemAccount::exists_at($t23) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:16+17
    assume {:print "$at(11,92630,92647)"} true;
    call $t37 := $1_DiemAccount_exists_at($t23);
    if ($abort_flag) {
        assume {:print "$at(11,92630,92647)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t38 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:57+8
    $t38 := 0;
    assume $IsValid'u64'($t38);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31
    // >> opaque call: $t38 := Errors::not_published($t37)

    // $t39 := opaque begin: Errors::not_published($t38) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31

    // assume WellFormed($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31
    assume $IsValid'u64'($t39);

    // assume Eq<u64>($t39, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31
    assume $IsEqual'u64'($t39, 5);

    // $t39 := opaque end: Errors::not_published($t38) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:35+31

    // trace_local[tmp#$15]($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    assume {:print "$track_local(29,20,15):", $t39} $t39 == $t39;

    // trace_local[tmp#$14]($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    assume {:print "$track_local(29,20,14):", $t37} $t37 == $t37;

    // if ($t37) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    if ($t37) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
L5:

    // trace_abort($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    assume {:print "$at(11,92623,92681)"} true;
    assume {:print "$track_abort(29,20):", $t39} $t39 == $t39;

    // $t27 := move($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    $t27 := $t39;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2033:9+58
    goto L16;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2034:61+6
    assume {:print "$at(11,92743,92749)"} true;
L4:

    // $t40 := borrow_global<DiemAccount::DiemAccount>($t23) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2034:30+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t40 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(11,92712,92729)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // trace_local[sender_account]($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2034:13+14
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t40);
    assume {:print "$track_local(29,20,8):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t41 := get_field<DiemAccount::DiemAccount>.sequence_number($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2039:13+30
    assume {:print "$at(11,92927,92957)"} true;
    $t41 := $sequence_number#$1_DiemAccount_DiemAccount($Dereference($t40));

    // $t42 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2039:47+7
    $t42 := 18446744073709551615;
    assume $IsValid'u128'($t42);

    // $t43 := (u64)($t42) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2039:46+16
    call $t43 := $CastU64($t42);
    if ($abort_flag) {
        assume {:print "$at(11,92960,92976)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t44 := <($t41, $t43) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2039:44+1
    call $t44 := $Lt($t41, $t43);

    // $t45 := 1011 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:36+33
    assume {:print "$at(11,93013,93046)"} true;
    $t45 := 1011;
    assume $IsValid'u64'($t45);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57
    // >> opaque call: $t45 := Errors::limit_exceeded($t44)

    // $t46 := opaque begin: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57
    assume $IsValid'u64'($t46);

    // assume Eq<u64>($t46, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57
    assume $IsEqual'u64'($t46, 8);

    // $t46 := opaque end: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2040:13+57

    // trace_local[tmp#$17]($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    assume {:print "$at(11,92907,93057)"} true;
    assume {:print "$track_local(29,20,17):", $t46} $t46 == $t46;

    // trace_local[tmp#$16]($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    assume {:print "$track_local(29,20,16):", $t44} $t44 == $t44;

    // if ($t44) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    if ($t44) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
L7:

    // assert Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($t40))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assume {:print "$at(44,561,585)"} true;
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t40)))) <= 1);

    // assert Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($t40))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t40)))) <= 1);

    // destroy($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    assume {:print "$at(11,92907,93057)"} true;

    // trace_abort($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    assume {:print "$at(11,92907,93057)"} true;
    assume {:print "$track_abort(29,20):", $t46} $t46 == $t46;

    // $t27 := move($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    $t27 := $t46;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2038:9+150
    goto L16;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2046:13+14
    assume {:print "$at(11,93248,93262)"} true;
L6:

    // $t47 := get_field<DiemAccount::DiemAccount>.sequence_number($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2046:13+30
    $t47 := $sequence_number#$1_DiemAccount_DiemAccount($Dereference($t40));

    // $t48 := ==($t47, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2046:44+2
    $t48 := $IsEqual'u64'($t47, $t1);

    // $t49 := 1003 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:38+33
    assume {:print "$at(11,93340,93373)"} true;
    $t49 := 1003;
    assume $IsValid'u64'($t49);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59
    // >> opaque call: $t49 := Errors::invalid_argument($t48)

    // $t50 := opaque begin: Errors::invalid_argument($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59

    // assume WellFormed($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59
    assume $IsValid'u64'($t50);

    // assume Eq<u64>($t50, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59
    assume $IsEqual'u64'($t50, 7);

    // $t50 := opaque end: Errors::invalid_argument($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2047:13+59

    // trace_local[tmp#$19]($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    assume {:print "$at(11,93228,93384)"} true;
    assume {:print "$track_local(29,20,19):", $t50} $t50 == $t50;

    // trace_local[tmp#$18]($t48) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    assume {:print "$track_local(29,20,18):", $t48} $t48 == $t48;

    // if ($t48) goto L8 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    if ($t48) { goto L8; } else { goto L9; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
L9:

    // assert Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($t40))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assume {:print "$at(44,561,585)"} true;
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t40)))) <= 1);

    // assert Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($t40))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t40)))) <= 1);

    // destroy($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    assume {:print "$at(11,93228,93384)"} true;

    // trace_abort($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    assume {:print "$at(11,93228,93384)"} true;
    assume {:print "$track_abort(29,20):", $t50} $t50 == $t50;

    // $t27 := move($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    $t27 := $t50;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2045:9+156
    goto L16;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:42+19
    assume {:print "$at(11,93615,93634)"} true;
L8:

    // $t51 := 1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:64+1
    $t51 := 1;
    assume $IsValid'u64'($t51);

    // $t52 := +($t1, $t51) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:62+1
    call $t52 := $AddU64($t1, $t51);
    if ($abort_flag) {
        assume {:print "$at(11,93635,93636)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t53 := borrow_field<DiemAccount::DiemAccount>.sequence_number($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+30
    $t53 := $ChildMutation($t40, 5, $sequence_number#$1_DiemAccount_DiemAccount($Dereference($t40)));

    // write_ref($t53, $t52) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+56
    $t53 := $UpdateMutation($t53, $t52);

    // write_back[Reference($t40).sequence_number]($t53) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+56
    $t40 := $UpdateMutation($t40, $Update'$1_DiemAccount_DiemAccount'_sequence_number($Dereference($t40), $Dereference($t53)));

    // assert Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($t40))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assume {:print "$at(44,561,585)"} true;
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t40)))) <= 1);

    // assert Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($t40))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t40)))) <= 1);

    // @632 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2009:5+2881
    // state save for global update invariants
    assume {:print "$at(11,91525,94406)"} true;
    $1_DiemAccount_DiemAccount_$memory#632 := $1_DiemAccount_DiemAccount_$memory;

    // write_back[DiemAccount::DiemAccount@]($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2053:9+56
    assume {:print "$at(11,93582,93638)"} true;
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t40),
        $Dereference($t40));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,100705,100852)"} true;
    assert {:msg "assert_failed(11,100705,100852): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume {:print "$at(11,102296,102446)"} true;
    assert {:msg "assert_failed(11,102296,102446): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@632](addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    assume {:print "$at(11,104197,104279)"} true;
    assert {:msg "assert_failed(11,104197,104279): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#632, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume {:print "$at(11,105582,105664)"} true;
    assert {:msg "assert_failed(11,105582,105664): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(11,106721,106818)"} true;
    assert {:msg "assert_failed(11,106721,106818): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assert And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume {:print "$at(11,106916,107031)"} true;
    assert {:msg "assert_failed(11,106916,107031): global memory invariant does not hold"}
      (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // $t54 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:38+1
    assume {:print "$at(11,93678,93679)"} true;
    $t54 := 0;
    assume $IsValid'u64'($t54);

    // $t55 := >($t36, $t54) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:36+1
    call $t55 := $Gt($t36, $t54);

    // if ($t55) goto L10 else goto L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:9+751
    if ($t55) { goto L10; } else { goto L11; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:9+751
L11:

    // goto L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:9+751
    goto L12;

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2057:68+6
    assume {:print "$at(11,93868,93874)"} true;
L10:

    // $t56 := borrow_global<DiemAccount::Balance<#0>>($t23) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2057:34+17
    if (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t56 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(11,93834,93851)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // trace_local[sender_balance]($t56) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2057:17+14
    $temp_0'$1_DiemAccount_Balance'#0'' := $Dereference($t56);
    assume {:print "$track_local(29,20,9):", $temp_0'$1_DiemAccount_Balance'#0''} $temp_0'$1_DiemAccount_Balance'#0'' == $temp_0'$1_DiemAccount_Balance'#0'';

    // $t57 := borrow_field<DiemAccount::Balance<#0>>.coin($t56) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2058:24+24
    assume {:print "$at(11,93900,93924)"} true;
    $t57 := $ChildMutation($t56, 0, $coin#$1_DiemAccount_Balance'#0'($Dereference($t56)));

    // trace_local[coin]($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2058:17+4
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t57);
    assume {:print "$track_local(29,20,5):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // $t58 := read_ref($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2062:55+4
    assume {:print "$at(11,94113,94117)"} true;
    $t58 := $Dereference($t57);

    // $t59 := Diem::value<#0>($t58) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2062:43+17
    call $t59 := $1_Diem_value'#0'($t58);
    if ($abort_flag) {
        assume {:print "$at(11,94101,94118)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // $t60 := <=($t36, $t59) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2062:40+2
    call $t60 := $Le($t36, $t59);

    // $t61 := 1005 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:40+30
    assume {:print "$at(11,94159,94189)"} true;
    $t61 := 1005;
    assume $IsValid'u64'($t61);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54
    // >> opaque call: $t61 := Errors::limit_exceeded($t60)

    // $t62 := opaque begin: Errors::limit_exceeded($t61) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54

    // assume WellFormed($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54
    assume $IsValid'u64'($t62);

    // assume Eq<u64>($t62, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54
    assume $IsEqual'u64'($t62, 8);

    // $t62 := opaque end: Errors::limit_exceeded($t61) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2063:17+54

    // trace_local[tmp#$21]($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    assume {:print "$at(11,94051,94204)"} true;
    assume {:print "$track_local(29,20,21):", $t62} $t62 == $t62;

    // trace_local[tmp#$20]($t60) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    assume {:print "$track_local(29,20,20):", $t60} $t60 == $t60;

    // if ($t60) goto L13 else goto L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    if ($t60) { goto L13; } else { goto L19; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
L14:

    // destroy($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153

    // trace_abort($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    assume {:print "$at(11,94051,94204)"} true;
    assume {:print "$track_abort(29,20):", $t62} $t62 == $t62;

    // $t27 := move($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    $t27 := $t62;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2061:13+153
    goto L16;

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:52+4
    assume {:print "$at(11,94360,94364)"} true;
L13:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    // >> opaque call: $t62 := Diem::withdraw<#0>($t56, $t35)

    // $t63 := opaque begin: Diem::withdraw<#0>($t57, $t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44

    // $t64 := read_ref($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    $t64 := $Dereference($t57);

    // assume Identical($t65, Lt(select Diem::Diem.value($t57), $t36)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume ($t65 == ($value#$1_Diem_Diem'#0'($Dereference($t57)) < $t36));

    // if ($t65) goto L20 else goto L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    if ($t65) { goto L20; } else { goto L17; }

    // label L18 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
L18:

    // assume And(Lt(select Diem::Diem.value($t57), $t36), Eq(8, $t27)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume (($value#$1_Diem_Diem'#0'($Dereference($t57)) < $t36) && $IsEqual'u8'(8, $t27));

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume {:print "$at(11,94345,94389)"} true;
    assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    goto L16;

    // label L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
L17:

    // havoc[mut]($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t57 := $UpdateMutation($t57, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t57));

    // assume WellFormed($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t57));

    // assume WellFormed($t63) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume $IsValid'$1_Diem_Diem'#0''($t63);

    // assume Eq<u64>(select Diem::Diem.value($t57), Sub(select Diem::Diem.value($t64), $t36)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t57)), ($value#$1_Diem_Diem'#0'($t64) - $t36));

    // assume Eq<u64>(select Diem::Diem.value($t63), $t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t63), $t36);

    // $t63 := opaque end: Diem::withdraw<#0>($t57, $t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44

    // write_back[Reference($t56).coin]($t57) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    $t56 := $UpdateMutation($t56, $Update'$1_DiemAccount_Balance'#0''_coin($Dereference($t56), $Dereference($t57)));

    // write_back[DiemAccount::Balance<#0>@]($t56) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:37+44
    $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $GlobalLocationAddress($t56),
        $Dereference($t56));

    // assume Identical($t66, select TransactionFee::TransactionFee.balance(TransactionFee::spec_transaction_fee<#0>())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:88:9+52
    assume {:print "$at(31,3250,3302)"} true;
    assume ($t66 == $balance#$1_TransactionFee_TransactionFee'#0'($1_TransactionFee_spec_transaction_fee'#0'($1_TransactionFee_TransactionFee'#0'_$memory)));

    // TransactionFee::pay_fee<#0>($t63) on_abort goto L16 with $t27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2067:13+69
    assume {:print "$at(11,94321,94390)"} true;
    call $1_TransactionFee_pay_fee'#0'($t63);
    if ($abort_flag) {
        assume {:print "$at(11,94321,94390)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(29,20):", $t27} $t27 == $t27;
        goto L16;
    }

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2055:9+751
    assume {:print "$at(11,93649,94400)"} true;
L12:

    // label L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2069:5+1
    assume {:print "$at(11,94405,94406)"} true;
L15:

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@191](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@191]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#191, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#191, addr)))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    return;

    // label L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2069:5+1
    assume {:print "$at(11,94405,94406)"} true;
L16:

    // abort($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2069:5+1
    $abort_code := $t27;
    $abort_flag := true;
    return;

    // label L19 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L19:

    // destroy($t56) at <internal>:1:1+10

    // goto L14 at <internal>:1:1+10
    goto L14;

    // label L20 at <internal>:1:1+10
L20:

    // destroy($t56) at <internal>:1:1+10

    // goto L18 at <internal>:1:1+10
    goto L18;

}

// fun DiemAccount::extract_key_rotation_capability [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+649
procedure {:inline 1} $1_DiemAccount_extract_key_rotation_capability(_$t0: int) returns ($ret0: $1_DiemAccount_KeyRotationCapability)
{
    // declare local variables
    var $t1: $Mutation ($1_DiemAccount_DiemAccount);
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($1_DiemAccount_DiemAccount);
    var $t18: $Mutation ($1_Option_Option'$1_DiemAccount_KeyRotationCapability');
    var $t19: $1_DiemAccount_KeyRotationCapability;
    var $t20: $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $t21: bool;
    var $t0: int;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'': $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));

    // bytecode translation starts here
    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:966:9+52
    assume {:print "$at(11,43116,43168)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+1
    assume {:print "$at(11,42222,42223)"} true;
    assume {:print "$track_local(29,22,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27
    // >> opaque call: $t7 := Signer::address_of($t0)
    assume {:print "$at(11,42363,42390)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27

    // trace_local[account_address]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:13+15
    assume {:print "$track_local(29,22,2):", $t8} $t8 == $t8;

    // $t9 := DiemAccount::delegated_key_rotation_capability($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:953:14+50
    assume {:print "$at(11,42515,42565)"} true;
    call $t9 := $1_DiemAccount_delegated_key_rotation_capability($t8);
    if ($abort_flag) {
        assume {:print "$at(11,42515,42565)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,22):", $t10} $t10 == $t10;
        goto L5;
    }

    // $t11 := !($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:953:13+1
    call $t11 := $Not($t9);

    // $t12 := 9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:35+42
    assume {:print "$at(11,42601,42643)"} true;
    $t12 := 9;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65
    // >> opaque call: $t11 := Errors::invalid_state($t10)

    // $t13 := opaque begin: Errors::invalid_state($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65
    assume $IsEqual'u64'($t13, 1);

    // $t13 := opaque end: Errors::invalid_state($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65

    // trace_local[tmp#$4]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    assume {:print "$at(11,42494,42654)"} true;
    assume {:print "$track_local(29,22,4):", $t13} $t13 == $t13;

    // trace_local[tmp#$3]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    assume {:print "$track_local(29,22,3):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
L1:

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    assume {:print "$at(11,42494,42654)"} true;
    assume {:print "$track_abort(29,22):", $t13} $t13 == $t13;

    // $t10 := move($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    $t10 := $t13;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:26+15
    assume {:print "$at(11,42681,42696)"} true;
L0:

    // $t14 := DiemAccount::exists_at($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:16+26
    call $t14 := $1_DiemAccount_exists_at($t8);
    if ($abort_flag) {
        assume {:print "$at(11,42671,42697)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,22):", $t10} $t10 == $t10;
        goto L5;
    }

    // $t15 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:66+8
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31
    // >> opaque call: $t14 := Errors::not_published($t13)

    // $t16 := opaque begin: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31
    assume $IsEqual'u64'($t16, 5);

    // $t16 := opaque end: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31

    // trace_local[tmp#$6]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    assume {:print "$track_local(29,22,6):", $t16} $t16 == $t16;

    // trace_local[tmp#$5]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    assume {:print "$track_local(29,22,5):", $t14} $t14 == $t14;

    // if ($t14) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    if ($t14) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
L3:

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    assume {:print "$at(11,42664,42731)"} true;
    assume {:print "$track_abort(29,22):", $t16} $t16 == $t16;

    // $t10 := move($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    $t10 := $t16;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:54+15
    assume {:print "$at(11,42786,42801)"} true;
L2:

    // $t17 := borrow_global<DiemAccount::DiemAccount>($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:23+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(11,42755,42772)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,22):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[account#1788]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:13+7
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t17);
    assume {:print "$track_local(29,22,1):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t18 := borrow_field<DiemAccount::DiemAccount>.key_rotation_capability($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:25+36
    assume {:print "$at(11,42828,42864)"} true;
    $t18 := $ChildMutation($t17, 2, $key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t17)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    // >> opaque call: $t17 := Option::extract<DiemAccount::KeyRotationCapability>($t16)

    // $t19 := opaque begin: Option::extract<DiemAccount::KeyRotationCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53

    // $t20 := read_ref($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    $t20 := $Dereference($t18);

    // assume Identical($t21, Option::$is_none<DiemAccount::KeyRotationCapability>($t18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume ($t21 == $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($Dereference($t18)));

    // if ($t21) goto L8 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    if ($t21) { goto L8; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
L7:

    // assume And(Option::$is_none<DiemAccount::KeyRotationCapability>($t18), Eq(7, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume ($1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($Dereference($t18)) && $IsEqual'u8'(7, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume {:print "$at(11,42812,42865)"} true;
    assume {:print "$track_abort(29,22):", $t10} $t10 == $t10;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
L6:

    // havoc[mut]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    havoc $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'';
    $t18 := $UpdateMutation($t18, $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'');
    assume $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t18));

    // assume And(WellFormed($t18), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec($t18)), 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume ($IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t18)) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($Dereference($t18))) <= 1));

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume $IsValid'$1_DiemAccount_KeyRotationCapability'($t19);

    // assume Eq<DiemAccount::KeyRotationCapability>($t19, Option::$borrow<DiemAccount::KeyRotationCapability>($t20)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume $IsEqual'$1_DiemAccount_KeyRotationCapability'($t19, $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($t20));

    // assume Option::$is_none<DiemAccount::KeyRotationCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($Dereference($t18));

    // $t19 := opaque end: Option::extract<DiemAccount::KeyRotationCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53

    // write_back[Reference($t17).key_rotation_capability]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    $t17 := $UpdateMutation($t17, $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability($Dereference($t17), $Dereference($t18)));

    // pack_ref_deep($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53

    // write_back[DiemAccount::DiemAccount@]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // trace_return[0]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume {:print "$track_return(29,22,0):", $t19} $t19 == $t19;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:959:5+1
    assume {:print "$at(11,42870,42871)"} true;
L4:

    // return $t19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:959:5+1
    $ret0 := $t19;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:959:5+1
L5:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:959:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t17) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// fun DiemAccount::extract_key_rotation_capability [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+649
procedure {:timeLimit 40} $1_DiemAccount_extract_key_rotation_capability$verify(_$t0: int) returns ($ret0: $1_DiemAccount_KeyRotationCapability)
{
    // declare local variables
    var $t1: $Mutation ($1_DiemAccount_DiemAccount);
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($1_DiemAccount_DiemAccount);
    var $t18: $Mutation ($1_Option_Option'$1_DiemAccount_KeyRotationCapability');
    var $t19: $1_DiemAccount_KeyRotationCapability;
    var $t20: $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $t21: bool;
    var $t0: int;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'': $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#213: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#634: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+649
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,42222,42871)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+649
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+649
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+649
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+649
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+649
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+649
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:966:9+52
    assume {:print "$at(11,43116,43168)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // @213 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+1
    assume {:print "$at(11,42222,42223)"} true;
    $1_DiemAccount_DiemAccount_$memory#213 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+1
    assume {:print "$track_local(29,22,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27
    // >> opaque call: $t7 := Signer::address_of($t0)
    assume {:print "$at(11,42363,42390)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27

    // trace_local[account_address]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:13+15
    assume {:print "$track_local(29,22,2):", $t8} $t8 == $t8;

    // $t9 := DiemAccount::delegated_key_rotation_capability($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:953:14+50
    assume {:print "$at(11,42515,42565)"} true;
    call $t9 := $1_DiemAccount_delegated_key_rotation_capability($t8);
    if ($abort_flag) {
        assume {:print "$at(11,42515,42565)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,22):", $t10} $t10 == $t10;
        goto L5;
    }

    // $t11 := !($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:953:13+1
    call $t11 := $Not($t9);

    // $t12 := 9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:35+42
    assume {:print "$at(11,42601,42643)"} true;
    $t12 := 9;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65
    // >> opaque call: $t11 := Errors::invalid_state($t10)

    // $t13 := opaque begin: Errors::invalid_state($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65
    assume $IsEqual'u64'($t13, 1);

    // $t13 := opaque end: Errors::invalid_state($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65

    // trace_local[tmp#$4]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    assume {:print "$at(11,42494,42654)"} true;
    assume {:print "$track_local(29,22,4):", $t13} $t13 == $t13;

    // trace_local[tmp#$3]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    assume {:print "$track_local(29,22,3):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
L1:

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    assume {:print "$at(11,42494,42654)"} true;
    assume {:print "$track_abort(29,22):", $t13} $t13 == $t13;

    // $t10 := move($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    $t10 := $t13;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:26+15
    assume {:print "$at(11,42681,42696)"} true;
L0:

    // $t14 := DiemAccount::exists_at($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:16+26
    call $t14 := $1_DiemAccount_exists_at($t8);
    if ($abort_flag) {
        assume {:print "$at(11,42671,42697)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,22):", $t10} $t10 == $t10;
        goto L5;
    }

    // $t15 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:66+8
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31
    // >> opaque call: $t14 := Errors::not_published($t13)

    // $t16 := opaque begin: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31
    assume $IsEqual'u64'($t16, 5);

    // $t16 := opaque end: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31

    // trace_local[tmp#$6]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    assume {:print "$track_local(29,22,6):", $t16} $t16 == $t16;

    // trace_local[tmp#$5]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    assume {:print "$track_local(29,22,5):", $t14} $t14 == $t14;

    // if ($t14) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    if ($t14) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
L3:

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    assume {:print "$at(11,42664,42731)"} true;
    assume {:print "$track_abort(29,22):", $t16} $t16 == $t16;

    // $t10 := move($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    $t10 := $t16;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:54+15
    assume {:print "$at(11,42786,42801)"} true;
L2:

    // $t17 := borrow_global<DiemAccount::DiemAccount>($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:23+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(11,42755,42772)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,22):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[account#1788]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:13+7
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t17);
    assume {:print "$track_local(29,22,1):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t18 := borrow_field<DiemAccount::DiemAccount>.key_rotation_capability($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:25+36
    assume {:print "$at(11,42828,42864)"} true;
    $t18 := $ChildMutation($t17, 2, $key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t17)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    // >> opaque call: $t17 := Option::extract<DiemAccount::KeyRotationCapability>($t16)

    // $t19 := opaque begin: Option::extract<DiemAccount::KeyRotationCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53

    // $t20 := read_ref($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    $t20 := $Dereference($t18);

    // assume Identical($t21, Option::$is_none<DiemAccount::KeyRotationCapability>($t18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume ($t21 == $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($Dereference($t18)));

    // if ($t21) goto L8 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    if ($t21) { goto L8; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
L7:

    // assume And(Option::$is_none<DiemAccount::KeyRotationCapability>($t18), Eq(7, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume ($1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($Dereference($t18)) && $IsEqual'u8'(7, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume {:print "$at(11,42812,42865)"} true;
    assume {:print "$track_abort(29,22):", $t10} $t10 == $t10;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
L6:

    // havoc[mut]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    havoc $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'';
    $t18 := $UpdateMutation($t18, $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'');
    assume $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t18));

    // assume And(WellFormed($t18), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec($t18)), 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume ($IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t18)) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($Dereference($t18))) <= 1));

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume $IsValid'$1_DiemAccount_KeyRotationCapability'($t19);

    // assume Eq<DiemAccount::KeyRotationCapability>($t19, Option::$borrow<DiemAccount::KeyRotationCapability>($t20)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume $IsEqual'$1_DiemAccount_KeyRotationCapability'($t19, $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($t20));

    // assume Option::$is_none<DiemAccount::KeyRotationCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($Dereference($t18));

    // $t19 := opaque end: Option::extract<DiemAccount::KeyRotationCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53

    // write_back[Reference($t17).key_rotation_capability]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    $t17 := $UpdateMutation($t17, $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability($Dereference($t17), $Dereference($t18)));

    // assert Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($t17))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assume {:print "$at(44,561,585)"} true;
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t17)))) <= 1);

    // assert Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($t17))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t17)))) <= 1);

    // @634 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+649
    // state save for global update invariants
    assume {:print "$at(11,42222,42871)"} true;
    $1_DiemAccount_DiemAccount_$memory#634 := $1_DiemAccount_DiemAccount_$memory;

    // write_back[DiemAccount::DiemAccount@]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume {:print "$at(11,42812,42865)"} true;
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,100705,100852)"} true;
    assert {:msg "assert_failed(11,100705,100852): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume {:print "$at(11,102296,102446)"} true;
    assert {:msg "assert_failed(11,102296,102446): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@634](addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    assume {:print "$at(11,104197,104279)"} true;
    assert {:msg "assert_failed(11,104197,104279): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#634, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume {:print "$at(11,105582,105664)"} true;
    assert {:msg "assert_failed(11,105582,105664): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(11,106721,106818)"} true;
    assert {:msg "assert_failed(11,106721,106818): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assert And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume {:print "$at(11,106916,107031)"} true;
    assert {:msg "assert_failed(11,106916,107031): global memory invariant does not hold"}
      (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // trace_return[0]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume {:print "$at(11,42812,42865)"} true;
    assume {:print "$track_return(29,22,0):", $t19} $t19 == $t19;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:959:5+1
    assume {:print "$at(11,42870,42871)"} true;
L4:

    // assert Not(Not(DiemAccount::$exists_at[@213]($t7))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:967:9+62
    assume {:print "$at(11,43177,43239)"} true;
    assert {:msg "assert_failed(11,43177,43239): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#213, $t7);

    // assert Not(DiemAccount::$delegated_key_rotation_capability[@213](Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:972:9+105
    assume {:print "$at(11,43392,43497)"} true;
    assert {:msg "assert_failed(11,43392,43497): function does not abort under this condition"}
      !$1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory#213, $1_Signer_spec_address_of($t0));

    // assert DiemAccount::$delegated_key_rotation_capability(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:976:9+76
    assume {:print "$at(11,43591,43667)"} true;
    assert {:msg "assert_failed(11,43591,43667): post-condition does not hold"}
      $1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t0));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@213]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@213](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#213, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#213, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@213]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@213]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#213, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#213, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@213](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@213]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#213, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#213, addr)))));

    // return $t19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    $ret0 := $t19;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:959:5+1
    assume {:print "$at(11,42870,42871)"} true;
L5:

    // assert Or(Not(DiemAccount::$exists_at[@213]($t7)), DiemAccount::$delegated_key_rotation_capability[@213](Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:960:5+151
    assume {:print "$at(11,42876,43027)"} true;
    assert {:msg "assert_failed(11,42876,43027): abort not covered by any of the `aborts_if` clauses"}
      (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#213, $t7) || $1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory#213, $1_Signer_spec_address_of($t0)));

    // assert Or(And(Not(DiemAccount::$exists_at[@213]($t7)), Eq(5, $t10)), And(DiemAccount::$delegated_key_rotation_capability[@213](Signer::spec_address_of[]($t0)), Eq(1, $t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:960:5+151
    assert {:msg "assert_failed(11,42876,43027): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#213, $t7) && $IsEqual'u8'(5, $t10)) || ($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory#213, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(1, $t10)));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:960:5+151
    $abort_code := $t10;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t17) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// fun DiemAccount::extract_withdraw_capability [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:5+618
procedure {:timeLimit 40} $1_DiemAccount_extract_withdraw_capability$verify(_$t0: int) returns ($ret0: $1_DiemAccount_WithdrawCapability)
{
    // declare local variables
    var $t1: $Mutation ($1_DiemAccount_DiemAccount);
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($1_DiemAccount_DiemAccount);
    var $t18: $Mutation ($1_Option_Option'$1_DiemAccount_WithdrawCapability');
    var $t19: $1_DiemAccount_WithdrawCapability;
    var $t20: $1_Option_Option'$1_DiemAccount_WithdrawCapability';
    var $t21: bool;
    var $t0: int;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'$1_Option_Option'$1_DiemAccount_WithdrawCapability'': $1_Option_Option'$1_DiemAccount_WithdrawCapability';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#212: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#633: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:5+618
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,32381,32999)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:5+618
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:5+618
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:5+618
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:5+618
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:746:17+6
    assume {:print "$at(11,33522,33528)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:746:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:739:9+50
    assume {:print "$at(11,33071,33121)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume CanModify<DiemAccount::DiemAccount>($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:740:9+42
    assume {:print "$at(11,33130,33172)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t7];

    // @212 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:740:9+42
    $1_DiemAccount_DiemAccount_$memory#212 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[sender]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:5+1
    assume {:print "$at(11,32381,32382)"} true;
    assume {:print "$track_local(29,23,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:726:27+26
    // >> opaque call: $t7 := Signer::address_of($t0)
    assume {:print "$at(11,32520,32546)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:726:27+26

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:726:27+26
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:726:27+26
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:726:27+26

    // trace_local[sender_addr]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:726:13+11
    assume {:print "$track_local(29,23,2):", $t8} $t8 == $t8;

    // $t9 := DiemAccount::delegated_withdraw_capability($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:729:14+42
    assume {:print "$at(11,32667,32709)"} true;
    call $t9 := $1_DiemAccount_delegated_withdraw_capability($t8);
    if ($abort_flag) {
        assume {:print "$at(11,32667,32709)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,23):", $t10} $t10 == $t10;
        goto L5;
    }

    // $t11 := !($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:729:13+1
    call $t11 := $Not($t9);

    // $t12 := 7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:730:35+38
    assume {:print "$at(11,32745,32783)"} true;
    $t12 := 7;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:730:13+61
    // >> opaque call: $t11 := Errors::invalid_state($t10)

    // $t13 := opaque begin: Errors::invalid_state($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:730:13+61

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:730:13+61
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:730:13+61
    assume $IsEqual'u64'($t13, 1);

    // $t13 := opaque end: Errors::invalid_state($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:730:13+61

    // trace_local[tmp#$4]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:728:9+148
    assume {:print "$at(11,32646,32794)"} true;
    assume {:print "$track_local(29,23,4):", $t13} $t13 == $t13;

    // trace_local[tmp#$3]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:728:9+148
    assume {:print "$track_local(29,23,3):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:728:9+148
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:728:9+148
L1:

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:728:9+148
    assume {:print "$at(11,32646,32794)"} true;
    assume {:print "$track_abort(29,23):", $t13} $t13 == $t13;

    // $t10 := move($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:728:9+148
    $t10 := $t13;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:728:9+148
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:26+11
    assume {:print "$at(11,32821,32832)"} true;
L0:

    // $t14 := DiemAccount::exists_at($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:16+22
    call $t14 := $1_DiemAccount_exists_at($t8);
    if ($abort_flag) {
        assume {:print "$at(11,32811,32833)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,23):", $t10} $t10 == $t10;
        goto L5;
    }

    // $t15 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:62+8
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:40+31
    // >> opaque call: $t14 := Errors::not_published($t13)

    // $t16 := opaque begin: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:40+31

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:40+31
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:40+31
    assume $IsEqual'u64'($t16, 5);

    // $t16 := opaque end: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:40+31

    // trace_local[tmp#$6]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:9+63
    assume {:print "$track_local(29,23,6):", $t16} $t16 == $t16;

    // trace_local[tmp#$5]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:9+63
    assume {:print "$track_local(29,23,5):", $t14} $t14 == $t14;

    // if ($t14) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:9+63
    if ($t14) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:9+63
L3:

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:9+63
    assume {:print "$at(11,32804,32867)"} true;
    assume {:print "$track_abort(29,23):", $t16} $t16 == $t16;

    // $t10 := move($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:9+63
    $t10 := $t16;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:732:9+63
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:733:54+11
    assume {:print "$at(11,32922,32933)"} true;
L2:

    // assert CanModify<DiemAccount::DiemAccount>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:733:23+17
    assert {:msg "assert_failed(11,32891,32908): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t8];

    // $t17 := borrow_global<DiemAccount::DiemAccount>($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:733:23+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(11,32891,32908)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,23):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[account]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:733:13+7
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t17);
    assume {:print "$track_local(29,23,1):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t18 := borrow_field<DiemAccount::DiemAccount>.withdraw_capability($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:25+32
    assume {:print "$at(11,32960,32992)"} true;
    $t18 := $ChildMutation($t17, 1, $withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t17)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    // >> opaque call: $t17 := Option::extract<DiemAccount::WithdrawCapability>($t16)

    // $t19 := opaque begin: Option::extract<DiemAccount::WithdrawCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49

    // $t20 := read_ref($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    $t20 := $Dereference($t18);

    // assume Identical($t21, Option::$is_none<DiemAccount::WithdrawCapability>($t18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    assume ($t21 == $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($Dereference($t18)));

    // if ($t21) goto L8 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    if ($t21) { goto L8; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
L7:

    // assume And(Option::$is_none<DiemAccount::WithdrawCapability>($t18), Eq(7, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    assume ($1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($Dereference($t18)) && $IsEqual'u8'(7, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    assume {:print "$at(11,32944,32993)"} true;
    assume {:print "$track_abort(29,23):", $t10} $t10 == $t10;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
L6:

    // havoc[mut]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    havoc $temp_0'$1_Option_Option'$1_DiemAccount_WithdrawCapability'';
    $t18 := $UpdateMutation($t18, $temp_0'$1_Option_Option'$1_DiemAccount_WithdrawCapability'');
    assume $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($Dereference($t18));

    // assume And(WellFormed($t18), Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec($t18)), 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    assume ($IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($Dereference($t18)) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($Dereference($t18))) <= 1));

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t19);

    // assume Eq<DiemAccount::WithdrawCapability>($t19, Option::$borrow<DiemAccount::WithdrawCapability>($t20)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t19, $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'($t20));

    // assume Option::$is_none<DiemAccount::WithdrawCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    assume $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($Dereference($t18));

    // $t19 := opaque end: Option::extract<DiemAccount::WithdrawCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49

    // write_back[Reference($t17).withdraw_capability]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    $t17 := $UpdateMutation($t17, $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($Dereference($t17), $Dereference($t18)));

    // assert Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($t17))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assume {:print "$at(44,561,585)"} true;
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t17)))) <= 1);

    // assert Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($t17))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t17)))) <= 1);

    // @633 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:5+618
    // state save for global update invariants
    assume {:print "$at(11,32381,32999)"} true;
    $1_DiemAccount_DiemAccount_$memory#633 := $1_DiemAccount_DiemAccount_$memory;

    // write_back[DiemAccount::DiemAccount@]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    assume {:print "$at(11,32944,32993)"} true;
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,100705,100852)"} true;
    assert {:msg "assert_failed(11,100705,100852): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume {:print "$at(11,102296,102446)"} true;
    assert {:msg "assert_failed(11,102296,102446): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@633](addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    assume {:print "$at(11,104197,104279)"} true;
    assert {:msg "assert_failed(11,104197,104279): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#633, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume {:print "$at(11,105582,105664)"} true;
    assert {:msg "assert_failed(11,105582,105664): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(11,106721,106818)"} true;
    assert {:msg "assert_failed(11,106721,106818): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assert And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume {:print "$at(11,106916,107031)"} true;
    assert {:msg "assert_failed(11,106916,107031): global memory invariant does not hold"}
      (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // trace_return[0]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:734:9+49
    assume {:print "$at(11,32944,32993)"} true;
    assume {:print "$track_return(29,23,0):", $t19} $t19 == $t19;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:735:5+1
    assume {:print "$at(11,32998,32999)"} true;
L4:

    // assert Not(Not(DiemAccount::$exists_at[@212]($t7))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:751:9+61
    assume {:print "$at(11,33651,33712)"} true;
    assert {:msg "assert_failed(11,33651,33712): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#212, $t7);

    // assert Not(DiemAccount::spec_holds_delegated_withdraw_capability[@212]($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:752:9+91
    assume {:print "$at(11,33721,33812)"} true;
    assert {:msg "assert_failed(11,33721,33812): function does not abort under this condition"}
      !$1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#212, $t7);

    // assert exists<DiemAccount::DiemAccount>($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:742:9+41
    assume {:print "$at(11,33238,33279)"} true;
    assert {:msg "assert_failed(11,33238,33279): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t7);

    // assert Eq<DiemAccount::WithdrawCapability>($t19, DiemAccount::spec_get_withdraw_cap[@212]($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:743:9+58
    assume {:print "$at(11,33288,33346)"} true;
    assert {:msg "assert_failed(11,33288,33346): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_WithdrawCapability'($t19, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#212, $t7));

    // assert Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t7), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@212]<DiemAccount::DiemAccount>($t7), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:744:9+150
    assume {:print "$at(11,33355,33505)"} true;
    assert {:msg "assert_failed(11,33355,33505): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t7), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#212, $t7), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assert Eq<address>(select DiemAccount::WithdrawCapability.account_address($t19), $t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:746:9+46
    assume {:print "$at(11,33514,33560)"} true;
    assert {:msg "assert_failed(11,33514,33560): post-condition does not hold"}
      $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t19), $t7);

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@212]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@212](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#212, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#212, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@212]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@212]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#212, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#212, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@212](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@212]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#212, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#212, addr)))));

    // return $t19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    $ret0 := $t19;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:735:5+1
    assume {:print "$at(11,32998,32999)"} true;
L5:

    // assert Or(Not(DiemAccount::$exists_at[@212]($t7)), DiemAccount::spec_holds_delegated_withdraw_capability[@212]($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:737:5+561
    assume {:print "$at(11,33005,33566)"} true;
    assert {:msg "assert_failed(11,33005,33566): abort not covered by any of the `aborts_if` clauses"}
      (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#212, $t7) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#212, $t7));

    // assert Or(And(Not(DiemAccount::$exists_at[@212]($t7)), Eq(5, $t10)), And(DiemAccount::spec_holds_delegated_withdraw_capability[@212]($t7), Eq(1, $t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:737:5+561
    assert {:msg "assert_failed(11,33005,33566): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#212, $t7) && $IsEqual'u8'(5, $t10)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#212, $t7) && $IsEqual'u8'(1, $t10)));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:737:5+561
    $abort_code := $t10;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t17) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// fun DiemAccount::has_published_account_limits<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:236:5+256
procedure {:inline 1} $1_DiemAccount_has_published_account_limits'#0'(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:236:5+1
    assume {:print "$at(11,10532,10533)"} true;
    assume {:print "$track_local(29,24,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:13+19
    // >> opaque call: $t2 := VASP::is_vasp($t0)
    assume {:print "$at(11,10614,10633)"} true;

    // $t2 := opaque begin: VASP::is_vasp($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:13+19

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:13+19
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, VASP::$is_vasp($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:13+19
    assume $IsEqual'bool'($t2, $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t0));

    // $t2 := opaque end: VASP::is_vasp($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:13+19

    // if ($t2) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    if ($t2) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:238:45+4
    assume {:print "$at(11,10681,10685)"} true;
L0:

    // $t3 := VASP::has_account_limits<#0>($t0) on_abort goto L5 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:238:13+37
    call $t3 := $1_VASP_has_account_limits'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,10649,10686)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,24):", $t4} $t4 == $t4;
        goto L5;
    }

    // $t1 := $t3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    assume {:print "$at(11,10610,10782)"} true;
    $t1 := $t3;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    assume {:print "$track_local(29,24,1):", $t3} $t3 == $t3;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:241:56+4
    assume {:print "$at(11,10767,10771)"} true;
L2:

    // $t5 := AccountLimits::has_window_published<#0>($t0) on_abort goto L5 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:241:13+48
    call $t5 := $1_AccountLimits_has_window_published'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,10724,10772)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,24):", $t4} $t4 == $t4;
        goto L5;
    }

    // $t1 := $t5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    assume {:print "$at(11,10610,10782)"} true;
    $t1 := $t5;

    // trace_local[tmp#$1]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    assume {:print "$track_local(29,24,1):", $t5} $t5 == $t5;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
L3:

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    assume {:print "$track_return(29,24,0):", $t1} $t1 == $t1;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:243:5+1
    assume {:print "$at(11,10787,10788)"} true;
L4:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:243:5+1
    $ret0 := $t1;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:243:5+1
L5:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:243:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun DiemAccount::has_published_account_limits [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:236:5+256
procedure {:timeLimit 40} $1_DiemAccount_has_published_account_limits$verify(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_DiemAccount_DiemAccount_$memory#155: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#156: $Memory $1_DiemAccount_Balance'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:236:5+256
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:234:9+151
    assume {:print "$at(11,10532,10788)"} true;
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:236:5+256
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:236:5+256
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:236:5+256
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:236:5+256
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // @155 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:236:5+1
    $1_DiemAccount_DiemAccount_$memory#155 := $1_DiemAccount_DiemAccount_$memory;

    // @156 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:236:5+1
    $1_DiemAccount_Balance'#0'_$memory#156 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:236:5+1
    assume {:print "$track_local(29,24,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:13+19
    // >> opaque call: $t2 := VASP::is_vasp($t0)
    assume {:print "$at(11,10614,10633)"} true;

    // $t2 := opaque begin: VASP::is_vasp($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:13+19

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:13+19
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, VASP::$is_vasp($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:13+19
    assume $IsEqual'bool'($t2, $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t0));

    // $t2 := opaque end: VASP::is_vasp($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:13+19

    // if ($t2) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    if ($t2) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:238:45+4
    assume {:print "$at(11,10681,10685)"} true;
L0:

    // $t3 := VASP::has_account_limits<#0>($t0) on_abort goto L5 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:238:13+37
    call $t3 := $1_VASP_has_account_limits'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,10649,10686)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,24):", $t4} $t4 == $t4;
        goto L5;
    }

    // $t1 := $t3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    assume {:print "$at(11,10610,10782)"} true;
    $t1 := $t3;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    assume {:print "$track_local(29,24,1):", $t3} $t3 == $t3;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:241:56+4
    assume {:print "$at(11,10767,10771)"} true;
L2:

    // $t5 := AccountLimits::has_window_published<#0>($t0) on_abort goto L5 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:241:13+48
    call $t5 := $1_AccountLimits_has_window_published'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,10724,10772)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,24):", $t4} $t4 == $t4;
        goto L5;
    }

    // $t1 := $t5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    assume {:print "$at(11,10610,10782)"} true;
    $t1 := $t5;

    // trace_local[tmp#$1]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    assume {:print "$track_local(29,24,1):", $t5} $t5 == $t5;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
L3:

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:237:9+172
    assume {:print "$track_return(29,24,0):", $t1} $t1 == $t1;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:243:5+1
    assume {:print "$at(11,10787,10788)"} true;
L4:

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@155](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@155]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#155, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#155, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@156]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@156]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#156, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#156, addr))))));

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    $ret0 := $t1;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:243:5+1
    assume {:print "$at(11,10787,10788)"} true;
L5:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:243:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun DiemAccount::key_rotation_capability_address [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1590:5+118
procedure {:timeLimit 40} $1_DiemAccount_key_rotation_capability_address$verify(_$t0: $1_DiemAccount_KeyRotationCapability) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'address': int;
    var $1_DiemAccount_DiemAccount_$memory#92: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1590:5+118
    assume {:print "$at(11,73745,73863)"} true;
    assume $IsValid'$1_DiemAccount_KeyRotationCapability'($t0);

    // @92 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1590:5+1
    $1_DiemAccount_DiemAccount_$memory#92 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1590:5+1
    assume {:print "$track_local(29,26,0):", $t0} $t0 == $t0;

    // $t1 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1591:9+20
    assume {:print "$at(11,73837,73857)"} true;
    $t1 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1591:9+20
    assume {:print "$track_return(29,26,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1592:5+1
    assume {:print "$at(11,73862,73863)"} true;
L1:

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@92]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@92](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#92, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#92, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@92]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@92]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#92, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#92, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@92](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@92]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#92, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#92, addr)))));

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    $ret0 := $t1;
    return;

}

// fun DiemAccount::make_account [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
procedure {:timeLimit 40} $1_DiemAccount_make_account$verify(_$t0: int, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: $1_DiemAccount_AccountOperationsCapability;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: Vec (int);
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: $Mutation ($1_DiemAccount_AccountOperationsCapability);
    var $t33: $Mutation ($1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent');
    var $t34: int;
    var $t35: $1_DiemAccount_CreateAccountEvent;
    var $t36: $1_DiemAccount_WithdrawCapability;
    var $t37: $1_Option_Option'$1_DiemAccount_WithdrawCapability';
    var $t38: $1_DiemAccount_KeyRotationCapability;
    var $t39: $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $t40: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t41: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t42: int;
    var $t43: $1_DiemAccount_DiemAccount;
    var $t44: $1_DiemAccount_AccountOperationsCapability;
    var $t45: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t46: $1_DiemAccount_CreateAccountEvent;
    var $t0: int;
    var $t1: Vec (int);
    var $1_Event_EventHandleGenerator_$modifies: [int]bool;
    var $1_AccountFreezing_FreezingBit_$modifies: [int]bool;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $1_DiemAccount_AccountOperationsCapability_$modifies: [int]bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_AccountFreezing_FreezingBit_$memory#280: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#281: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemAccount_AccountOperationsCapability_$memory#282: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#283: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#635: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t32));
    assume IsEmptyVec(p#$Mutation($t33));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(11,46962,49236)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    assume $IsValid'vec'u8''($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume Identical($t10, Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1106:9+55
    assume {:print "$at(11,49292,49347)"} true;
    assume ($t10 == $1_Signer_$address_of($t0));

    // assume Identical($t11, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1117:9+94
    assume {:print "$at(11,50033,50127)"} true;
    assume ($t11 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2211:9+44
    assume {:print "$at(11,100936,100980)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2241:9+44
    assume {:print "$at(11,102524,102568)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // assume exists<Roles::RoleId>($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1113:9+49
    assume {:print "$at(11,49790,49839)"} true;
    assume $ResourceExists($1_Roles_RoleId_$memory, $t10);

    // assume CanModify<DiemAccount::DiemAccount>($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1107:9+47
    assume {:print "$at(11,49356,49403)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t10];

    // assume CanModify<Event::EventHandleGenerator>($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1108:9+63
    assume {:print "$at(11,49412,49475)"} true;
    assume $1_Event_EventHandleGenerator_$modifies[$t10];

    // assume CanModify<AccountFreezing::FreezingBit>($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1109:9+64
    assume {:print "$at(11,49484,49548)"} true;
    assume $1_AccountFreezing_FreezingBit_$modifies[$t10];

    // assume CanModify<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1110:9+81
    assume {:print "$at(11,49557,49638)"} true;
    assume $1_DiemAccount_AccountOperationsCapability_$modifies[$1_CoreAddresses_$DIEM_ROOT_ADDRESS()];

    // @281 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1110:9+81
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#281 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @280 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1110:9+81
    $1_AccountFreezing_FreezingBit_$memory#280 := $1_AccountFreezing_FreezingBit_$memory;

    // @283 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1110:9+81
    $1_DiemAccount_DiemAccount_$memory#283 := $1_DiemAccount_DiemAccount_$memory;

    // @282 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1110:9+81
    $1_DiemAccount_AccountOperationsCapability_$memory#282 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // trace_local[new_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+1
    assume {:print "$at(11,46962,46963)"} true;
    assume {:print "$track_local(29,27,0):", $t0} $t0 == $t0;

    // trace_local[auth_key_prefix]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+1
    assume {:print "$track_local(29,27,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1057:32+31
    // >> opaque call: $t10 := Signer::address_of($t0)
    assume {:print "$at(11,47123,47154)"} true;

    // $t14 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1057:32+31

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1057:32+31
    assume $IsValid'address'($t14);

    // assume Eq<address>($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1057:32+31
    assume $IsEqual'address'($t14, $1_Signer_spec_address_of($t0));

    // $t14 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1057:32+31

    // trace_local[new_account_addr]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1057:13+16
    assume {:print "$track_local(29,27,3):", $t14} $t14 == $t14;

    // $t15 := CoreAddresses::VM_RESERVED_ADDRESS() on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1060:33+36
    assume {:print "$at(11,47268,47304)"} true;
    call $t15 := $1_CoreAddresses_VM_RESERVED_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,47268,47304)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,27):", $t16} $t16 == $t16;
        goto L7;
    }

    // $t17 := !=($t14, $t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1060:30+2
    $t17 := !$IsEqual'address'($t14, $t15);

    // $t18 := 10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1061:38+29
    assume {:print "$at(11,47343,47372)"} true;
    $t18 := 10;
    assume $IsValid'u64'($t18);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1061:13+55
    // >> opaque call: $t14 := Errors::invalid_argument($t13)

    // $t19 := opaque begin: Errors::invalid_argument($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1061:13+55

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1061:13+55
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1061:13+55
    assume $IsEqual'u64'($t19, 7);

    // $t19 := opaque end: Errors::invalid_argument($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1061:13+55

    // trace_local[tmp#$5]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1059:9+155
    assume {:print "$at(11,47228,47383)"} true;
    assume {:print "$track_local(29,27,5):", $t19} $t19 == $t19;

    // trace_local[tmp#$4]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1059:9+155
    assume {:print "$track_local(29,27,4):", $t17} $t17 == $t17;

    // if ($t17) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1059:9+155
    if ($t17) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1059:9+155
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1059:9+155

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1059:9+155
    assume {:print "$at(11,47228,47383)"} true;
    assume {:print "$track_abort(29,27):", $t19} $t19 == $t19;

    // $t16 := move($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1059:9+155
    $t16 := $t19;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1059:9+155
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1064:13+16
    assume {:print "$at(11,47413,47429)"} true;
L0:

    // $t20 := CoreAddresses::CORE_CODE_ADDRESS() on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1064:33+34
    call $t20 := $1_CoreAddresses_CORE_CODE_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,47433,47467)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,27):", $t16} $t16 == $t16;
        goto L7;
    }

    // $t21 := !=($t14, $t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1064:30+2
    $t21 := !$IsEqual'address'($t14, $t20);

    // $t22 := 24 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1065:38+27
    assume {:print "$at(11,47506,47533)"} true;
    $t22 := 24;
    assume $IsValid'u64'($t22);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1065:13+53
    // >> opaque call: $t18 := Errors::invalid_argument($t17)

    // $t23 := opaque begin: Errors::invalid_argument($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1065:13+53

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1065:13+53
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1065:13+53
    assume $IsEqual'u64'($t23, 7);

    // $t23 := opaque end: Errors::invalid_argument($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1065:13+53

    // trace_local[tmp#$7]($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1063:9+151
    assume {:print "$at(11,47393,47544)"} true;
    assume {:print "$track_local(29,27,7):", $t23} $t23 == $t23;

    // trace_local[tmp#$6]($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1063:9+151
    assume {:print "$track_local(29,27,6):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1063:9+151
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1063:9+151
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1063:9+151

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1063:9+151
    assume {:print "$at(11,47393,47544)"} true;
    assume {:print "$track_abort(29,27):", $t23} $t23 == $t23;

    // $t16 := move($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1063:9+151
    $t16 := $t23;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1063:9+151
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:60+11
    assume {:print "$at(11,47647,47658)"} true;
L2:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:34+55
    // >> opaque call: $t19 := DiemAccount::create_authentication_key($t0, $t1)

    // $t24 := opaque begin: DiemAccount::create_authentication_key($t0, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:34+55

    // assume Identical($t25, Neq<num>(Add(16, Len<u8>($t1)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:34+55
    assume ($t25 == !$IsEqual'num'((16 + LenVec($t1)), 32));

    // if ($t25) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:34+55
    if ($t25) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:34+55
L9:

    // assume And(Neq<num>(Add(16, Len<u8>($t1)), 32), Eq(7, $t16)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:34+55
    assume (!$IsEqual'num'((16 + LenVec($t1)), 32) && $IsEqual'u8'(7, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:34+55
    assume {:print "$at(11,47621,47676)"} true;
    assume {:print "$track_abort(29,27):", $t16} $t16 == $t16;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:34+55
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:34+55
L8:

    // assume WellFormed($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:34+55
    assume $IsValid'vec'u8''($t24);

    // assume And(Eq<vector<u8>>($t24, DiemAccount::spec_abstract_create_authentication_key($t1)), Eq<num>(Len<u8>($t24), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:34+55
    assume ($IsEqual'vec'u8''($t24, $1_DiemAccount_spec_abstract_create_authentication_key($t1)) && $IsEqual'num'(LenVec($t24), 32));

    // $t24 := opaque end: DiemAccount::create_authentication_key($t0, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:34+55

    // trace_local[authentication_key]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1069:13+18
    assume {:print "$track_local(29,27,2):", $t24} $t24 == $t24;

    // assume Identical($t26, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:75:9+44
    assume {:print "$at(4,2739,2783)"} true;
    assume ($t26 == $1_Signer_spec_address_of($t0));

    // assert CanModify<AccountFreezing::FreezingBit>($t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1072:9+36
    assume {:print "$at(11,47758,47794)"} true;
    assert {:msg "assert_failed(11,47758,47794): caller does not have permission to modify `AccountFreezing::FreezingBit` at given address"}
      $1_AccountFreezing_FreezingBit_$modifies[$t26];

    // AccountFreezing::create($t0) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1072:9+36
    call $1_AccountFreezing_create($t0);
    if ($abort_flag) {
        assume {:print "$at(11,47758,47794)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,27):", $t16} $t16 == $t16;
        goto L7;
    }

    // $t27 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1076:49+34
    assume {:print "$at(11,47995,48029)"} true;
    call $t27 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,47995,48029)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,27):", $t16} $t16 == $t16;
        goto L7;
    }

    // $t28 := exists<DiemAccount::AccountOperationsCapability>($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1076:13+6
    $t28 := $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t27);

    // $t29 := 22 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1077:35+30
    assume {:print "$at(11,48066,48096)"} true;
    $t29 := 22;
    assume $IsValid'u64'($t29);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1077:13+53
    // >> opaque call: $t23 := Errors::not_published($t22)

    // $t30 := opaque begin: Errors::not_published($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1077:13+53

    // assume WellFormed($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1077:13+53
    assume $IsValid'u64'($t30);

    // assume Eq<u64>($t30, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1077:13+53
    assume $IsEqual'u64'($t30, 5);

    // $t30 := opaque end: Errors::not_published($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1077:13+53

    // trace_local[tmp#$9]($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1075:9+168
    assume {:print "$at(11,47939,48107)"} true;
    assume {:print "$track_local(29,27,9):", $t30} $t30 == $t30;

    // trace_local[tmp#$8]($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1075:9+168
    assume {:print "$track_local(29,27,8):", $t28} $t28 == $t28;

    // if ($t28) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1075:9+168
    if ($t28) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1075:9+168
L5:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1075:9+168

    // trace_abort($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1075:9+168
    assume {:print "$at(11,47939,48107)"} true;
    assume {:print "$track_abort(29,27):", $t30} $t30 == $t30;

    // $t16 := move($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1075:9+168
    $t16 := $t30;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1075:9+168
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1081:65+34
    assume {:print "$at(11,48239,48273)"} true;
L4:

    // $t31 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1081:65+34
    call $t31 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,48239,48273)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,27):", $t16} $t16 == $t16;
        goto L7;
    }

    // assert CanModify<DiemAccount::AccountOperationsCapability>($t31) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1081:18+17
    assert {:msg "assert_failed(11,48192,48209): caller does not have permission to modify `DiemAccount::AccountOperationsCapability` at given address"}
      $1_DiemAccount_AccountOperationsCapability_$modifies[$t31];

    // $t32 := borrow_global<DiemAccount::AccountOperationsCapability>($t31) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1081:18+17
    if (!$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t31)) {
        call $ExecFailureAbort();
    } else {
        $t32 := $Mutation($Global($t31), EmptyVec(), $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $t31));
    }
    if ($abort_flag) {
        assume {:print "$at(11,48192,48209)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,27):", $t16} $t16 == $t16;
        goto L7;
    }

    // $t33 := borrow_field<DiemAccount::AccountOperationsCapability>.creation_events($t32) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1081:13+103
    $t33 := $ChildMutation($t32, 1, $creation_events#$1_DiemAccount_AccountOperationsCapability($Dereference($t32)));

    // $t34 := Roles::get_role_id($t14) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1082:70+36
    assume {:print "$at(11,48361,48397)"} true;
    call $t34 := $1_Roles_get_role_id($t14);
    if ($abort_flag) {
        assume {:print "$at(11,48361,48397)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,27):", $t16} $t16 == $t16;
        goto L7;
    }

    // $t35 := pack DiemAccount::CreateAccountEvent($t14, $t34) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1082:13+95
    $t35 := $1_DiemAccount_CreateAccountEvent($t14, $t34);

    // Event::emit_event<DiemAccount::CreateAccountEvent>($t33, $t35) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1080:9+254
    assume {:print "$at(11,48156,48410)"} true;
    call $t33 := $1_Event_emit_event'$1_DiemAccount_CreateAccountEvent'($t33, $t35);
    if ($abort_flag) {
        assume {:print "$at(11,48156,48410)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,27):", $t16} $t16 == $t16;
        goto L7;
    }

    // $t36 := pack DiemAccount::WithdrawCapability($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1091:21+96
    assume {:print "$at(11,48716,48812)"} true;
    $t36 := $1_DiemAccount_WithdrawCapability($t14);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1090:38+131
    // >> opaque call: $t30 := Option::some<DiemAccount::WithdrawCapability>($t29)
    assume {:print "$at(11,48682,48813)"} true;

    // $t37 := opaque begin: Option::some<DiemAccount::WithdrawCapability>($t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1090:38+131

    // assume And(WellFormed($t37), Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec($t37)), 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1090:38+131
    assume ($IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($t37) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($t37)) <= 1));

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>($t37, Option::spec_some<DiemAccount::WithdrawCapability>($t36)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1090:38+131
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($t37, $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t36));

    // $t37 := opaque end: Option::some<DiemAccount::WithdrawCapability>($t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1090:38+131

    // $t38 := pack DiemAccount::KeyRotationCapability($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1095:21+99
    assume {:print "$at(11,48890,48989)"} true;
    $t38 := $1_DiemAccount_KeyRotationCapability($t14);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1094:42+134
    // >> opaque call: $t32 := Option::some<DiemAccount::KeyRotationCapability>($t31)
    assume {:print "$at(11,48856,48990)"} true;

    // $t39 := opaque begin: Option::some<DiemAccount::KeyRotationCapability>($t38) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1094:42+134

    // assume And(WellFormed($t39), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec($t39)), 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1094:42+134
    assume ($IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($t39) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($t39)) <= 1));

    // assume Eq<Option::Option<DiemAccount::KeyRotationCapability>>($t39, Option::spec_some<DiemAccount::KeyRotationCapability>($t38)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1094:42+134
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($t39, $1_Option_spec_some'$1_DiemAccount_KeyRotationCapability'($t38));

    // $t39 := opaque end: Option::some<DiemAccount::KeyRotationCapability>($t38) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1094:42+134

    // $t40 := Event::new_event_handle<DiemAccount::ReceivedPaymentEvent>($t0) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1098:34+58
    assume {:print "$at(11,49025,49083)"} true;
    call $t40 := $1_Event_new_event_handle'$1_DiemAccount_ReceivedPaymentEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,49025,49083)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,27):", $t16} $t16 == $t16;
        goto L7;
    }

    // $t41 := Event::new_event_handle<DiemAccount::SentPaymentEvent>($t0) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1099:30+54
    assume {:print "$at(11,49114,49168)"} true;
    call $t41 := $1_Event_new_event_handle'$1_DiemAccount_SentPaymentEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,49114,49168)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,27):", $t16} $t16 == $t16;
        goto L7;
    }

    // $t42 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1100:34+1
    assume {:print "$at(11,49203,49204)"} true;
    $t42 := 0;
    assume $IsValid'u64'($t42);

    // $t43 := pack DiemAccount::DiemAccount($t24, $t37, $t39, $t40, $t41, $t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1088:13+624
    assume {:print "$at(11,48595,49219)"} true;
    $t43 := $1_DiemAccount_DiemAccount($t24, $t37, $t39, $t40, $t41, $t42);

    // assert CanModify<DiemAccount::DiemAccount>($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1086:9+7
    assume {:print "$at(11,48549,48556)"} true;
    assert {:msg "assert_failed(11,48549,48556): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t0];

    // @635 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1053:5+2274
    // state save for global update invariants
    assume {:print "$at(11,46962,49236)"} true;
    $1_DiemAccount_DiemAccount_$memory#635 := $1_DiemAccount_DiemAccount_$memory;

    // move_to<DiemAccount::DiemAccount>($t43, $t0) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1086:9+7
    assume {:print "$at(11,48549,48556)"} true;
    if ($ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t0, $t43);
    }
    if ($abort_flag) {
        assume {:print "$at(11,48549,48556)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,27):", $t16} $t16 == $t16;
        goto L7;
    }

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,100705,100852)"} true;
    assert {:msg "assert_failed(11,100705,100852): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume {:print "$at(11,102296,102446)"} true;
    assert {:msg "assert_failed(11,102296,102446): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@635](addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    assume {:print "$at(11,104197,104279)"} true;
    assert {:msg "assert_failed(11,104197,104279): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#635, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume {:print "$at(11,105582,105664)"} true;
    assert {:msg "assert_failed(11,105582,105664): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(11,106721,106818)"} true;
    assert {:msg "assert_failed(11,106721,106818): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assert And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume {:print "$at(11,106916,107031)"} true;
    assert {:msg "assert_failed(11,106916,107031): global memory invariant does not hold"}
      (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1103:5+1
    assume {:print "$at(11,49235,49236)"} true;
L6:

    // assume Identical($t44, global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1118:9+104
    assume {:print "$at(11,50136,50240)"} true;
    assume ($t44 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t45, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1141:9+106
    assume {:print "$at(11,51604,51710)"} true;
    assume ($t45 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t46, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t0), Roles::spec_get_role_id(Signer::spec_address_of($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1142:9+154
    assume {:print "$at(11,51719,51873)"} true;
    assume ($t46 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t0), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t0))));

    // assert Not(Eq<address>($t10, CoreAddresses::$VM_RESERVED_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1127:9+85
    assume {:print "$at(11,50697,50782)"} true;
    assert {:msg "assert_failed(11,50697,50782): function does not abort under this condition"}
      !$IsEqual'address'($t10, $1_CoreAddresses_$VM_RESERVED_ADDRESS());

    // assert Not(Eq<address>($t10, CoreAddresses::$CORE_CODE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1128:9+83
    assume {:print "$at(11,50791,50874)"} true;
    assert {:msg "assert_failed(11,50791,50874): function does not abort under this condition"}
      !$IsEqual'address'($t10, $1_CoreAddresses_$CORE_CODE_ADDRESS());

    // assert Not(exists[@280]<AccountFreezing::FreezingBit>($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1129:9+84
    assume {:print "$at(11,50883,50967)"} true;
    assert {:msg "assert_failed(11,50883,50967): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#280, $t10);

    // assert Not(And(DiemTimestamp::$is_genesis[@281](), Not(exists[@282]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1132:9+165
    assume {:print "$at(11,51142,51307)"} true;
    assert {:msg "assert_failed(11,51142,51307): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#281) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#282, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert Not(Neq<num>(Add(16, Len<u8>($t1)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1176:9+72
    assume {:print "$at(11,53276,53348)"} true;
    assert {:msg "assert_failed(11,53276,53348): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t1)), 32);

    // assert exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1111:9+80
    assume {:print "$at(11,49647,49727)"} true;
    assert {:msg "assert_failed(11,49647,49727): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert DiemAccount::$exists_at($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1115:9+36
    assume {:print "$at(11,49909,49945)"} true;
    assert {:msg "assert_failed(11,49909,49945): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t10);

    // assert AccountFreezing::spec_account_is_not_frozen($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1116:9+70
    assume {:print "$at(11,49954,50024)"} true;
    assert {:msg "assert_failed(11,49954,50024): post-condition does not hold"}
      $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t10);

    // assert Eq<DiemAccount::AccountOperationsCapability>($t44, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t11, select DiemAccount::AccountOperationsCapability.creation_events($t11))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1119:9+112
    assume {:print "$at(11,50249,50361)"} true;
    assert {:msg "assert_failed(11,50249,50361): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t44, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t11, $creation_events#$1_DiemAccount_AccountOperationsCapability($t11)));

    // assert DiemAccount::spec_holds_own_key_rotation_cap($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1120:9+58
    assume {:print "$at(11,50370,50428)"} true;
    assert {:msg "assert_failed(11,50370,50428): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t10);

    // assert DiemAccount::spec_holds_own_withdraw_cap($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1121:9+54
    assume {:print "$at(11,50437,50491)"} true;
    assert {:msg "assert_failed(11,50437,50491): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t10);

    // assert DiemAccount::spec_holds_own_key_rotation_cap($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2212:9+46
    assume {:print "$at(11,100989,101035)"} true;
    assert {:msg "assert_failed(11,100989,101035): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t12);

    // assert DiemAccount::spec_holds_own_withdraw_cap($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2242:9+42
    assume {:print "$at(11,102577,102619)"} true;
    assert {:msg "assert_failed(11,102577,102619): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t13);

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@283](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@283]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#283, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#283, addr)))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t46, $t45)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1146:9+20
    assume {:print "$at(11,51882,51902)"} true;
    assert {:msg "assert_failed(11,51882,51902): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t45, $t46); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t46, $t45)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1104:5+1349
    assume {:print "$at(11,49241,50590)"} true;
    assert {:msg "assert_failed(11,49241,50590): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t45, $t46); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1104:5+1349
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1103:5+1
    assume {:print "$at(11,49235,49236)"} true;
L7:

    // assert Or(Or(Or(Or(Eq<address>($t10, CoreAddresses::$VM_RESERVED_ADDRESS[]()), Eq<address>($t10, CoreAddresses::$CORE_CODE_ADDRESS[]())), exists[@280]<AccountFreezing::FreezingBit>($t10)), And(DiemTimestamp::$is_genesis[@281](), Not(exists[@282]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))), Neq<num>(Add(16, Len<u8>($t1)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1104:5+1349
    assume {:print "$at(11,49241,50590)"} true;
    assert {:msg "assert_failed(11,49241,50590): abort not covered by any of the `aborts_if` clauses"}
      (((($IsEqual'address'($t10, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) || $IsEqual'address'($t10, $1_CoreAddresses_$CORE_CODE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#280, $t10)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#281) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#282, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))) || !$IsEqual'num'((16 + LenVec($t1)), 32));

    // assert Or(Or(Or(Or(And(Eq<address>($t10, CoreAddresses::$VM_RESERVED_ADDRESS[]()), Eq(7, $t16)), And(Eq<address>($t10, CoreAddresses::$CORE_CODE_ADDRESS[]()), Eq(7, $t16))), And(exists[@280]<AccountFreezing::FreezingBit>($t10), Eq(6, $t16))), And(And(DiemTimestamp::$is_genesis[@281](), Not(exists[@282]<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))), Eq(5, $t16))), And(Neq<num>(Add(16, Len<u8>($t1)), 32), Eq(7, $t16))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1104:5+1349
    assert {:msg "assert_failed(11,49241,50590): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((($IsEqual'address'($t10, $1_CoreAddresses_$VM_RESERVED_ADDRESS()) && $IsEqual'u8'(7, $t16)) || ($IsEqual'address'($t10, $1_CoreAddresses_$CORE_CODE_ADDRESS()) && $IsEqual'u8'(7, $t16))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#280, $t10) && $IsEqual'u8'(6, $t16))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#281) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#282, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'num'((16 + LenVec($t1)), 32) && $IsEqual'u8'(7, $t16)));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1104:5+1349
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun DiemAccount::module_prologue [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
procedure {:timeLimit 40} $1_DiemAccount_module_prologue$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: int, _$t4: int, _$t5: int, _$t6: int) returns ()
{
    // declare local variables
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Roles_RoleId_$memory#360: $Memory $1_Roles_RoleId;
    var $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#361: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
    var $1_ChainId_ChainId_$memory#362: $Memory $1_ChainId_ChainId;
    var $1_DiemAccount_DiemAccount_$memory#363: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountFreezing_FreezingBit_$memory#364: $Memory $1_AccountFreezing_FreezingBit;
    var $1_TransactionFee_TransactionFee'#0'_$memory#365: $Memory $1_TransactionFee_TransactionFee'#0';
    var $1_DiemAccount_Balance'#0'_$memory#366: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#367: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,74286,74977)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume $IsValid'u64'($t5);

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume $IsValid'u8'($t6);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+691
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1629:9+57
    assume {:print "$at(11,75013,75070)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, Mul($t3, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1630:9+60
    assume {:print "$at(11,75079,75139)"} true;
    assume ($t10 == ($t3 * $t4));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1644:9+57
    assume {:print "$at(11,75594,75651)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // @367 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    assume {:print "$at(11,74286,74287)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#367 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @360 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    $1_Roles_RoleId_$memory#360 := $1_Roles_RoleId_$memory;

    // @361 := save_mem(DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#361 := $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory;

    // @365 := save_mem(TransactionFee::TransactionFee<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    $1_TransactionFee_TransactionFee'#0'_$memory#365 := $1_TransactionFee_TransactionFee'#0'_$memory;

    // @362 := save_mem(ChainId::ChainId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    $1_ChainId_ChainId_$memory#362 := $1_ChainId_ChainId_$memory;

    // @364 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    $1_AccountFreezing_FreezingBit_$memory#364 := $1_AccountFreezing_FreezingBit_$memory;

    // @363 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    $1_DiemAccount_DiemAccount_$memory#363 := $1_DiemAccount_DiemAccount_$memory;

    // @366 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    $1_DiemAccount_Balance'#0'_$memory#366 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[sender]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    assume {:print "$track_local(29,28,0):", $t0} $t0 == $t0;

    // trace_local[txn_sequence_number]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    assume {:print "$track_local(29,28,1):", $t1} $t1 == $t1;

    // trace_local[txn_public_key]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    assume {:print "$track_local(29,28,2):", $t2} $t2 == $t2;

    // trace_local[txn_gas_price]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    assume {:print "$track_local(29,28,3):", $t3} $t3 == $t3;

    // trace_local[txn_max_gas_units]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    assume {:print "$track_local(29,28,4):", $t4} $t4 == $t4;

    // trace_local[txn_expiration_time]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    assume {:print "$track_local(29,28,5):", $t5} $t5 == $t5;

    // trace_local[chain_id]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1604:5+1
    assume {:print "$track_local(29,28,6):", $t6} $t6 == $t6;

    // $t12 := DiemTransactionPublishingOption::is_module_allowed($t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1614:13+59
    assume {:print "$at(11,74597,74656)"} true;
    call $t12 := $1_DiemTransactionPublishingOption_is_module_allowed($t0);
    if ($abort_flag) {
        assume {:print "$at(11,74597,74656)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(29,28):", $t13} $t13 == $t13;
        goto L3;
    }

    // $t14 := 1009 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1615:35+28
    assume {:print "$at(11,74692,74720)"} true;
    $t14 := 1009;
    assume $IsValid'u64'($t14);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1615:13+51
    // >> opaque call: $t11 := Errors::invalid_state($t10)

    // $t15 := opaque begin: Errors::invalid_state($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1615:13+51

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1615:13+51
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1615:13+51
    assume $IsEqual'u64'($t15, 1);

    // $t15 := opaque end: Errors::invalid_state($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1615:13+51

    // trace_local[tmp#$8]($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1613:9+155
    assume {:print "$at(11,74577,74732)"} true;
    assume {:print "$track_local(29,28,8):", $t15} $t15 == $t15;

    // trace_local[tmp#$7]($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1613:9+155
    assume {:print "$track_local(29,28,7):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1613:9+155
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1613:9+155
L1:

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1613:9+155
    assume {:print "$at(11,74577,74732)"} true;
    assume {:print "$track_abort(29,28):", $t15} $t15 == $t15;

    // $t13 := move($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1613:9+155
    $t13 := $t15;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1613:9+155
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1619:13+7
    assume {:print "$at(11,74779,74786)"} true;
L0:

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1947:9+57
    assume {:print "$at(11,88304,88361)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // assume Identical($t17, Mul($t3, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1948:9+60
    assume {:print "$at(11,88370,88430)"} true;
    assume ($t17 == ($t3 * $t4));

    // DiemAccount::prologue_common<#0>($t0, $t1, $t2, $t3, $t4, $t5, $t6) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1618:9+228
    assume {:print "$at(11,74743,74971)"} true;
    call $1_DiemAccount_prologue_common'#0'($t0, $t1, $t2, $t3, $t4, $t5, $t6);
    if ($abort_flag) {
        assume {:print "$at(11,74743,74971)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(29,28):", $t13} $t13 == $t13;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1627:5+1
    assume {:print "$at(11,74976,74977)"} true;
L2:

    // assert Not(Not(DiemTransactionPublishingOption::spec_is_module_allowed[@360, @361]($t0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1656:9+102
    assume {:print "$at(11,76096,76198)"} true;
    assert {:msg "assert_failed(11,76096,76198): function does not abort under this condition"}
      !!$1_DiemTransactionPublishingOption_spec_is_module_allowed($1_Roles_RoleId_$memory#360, $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#361, $t0);

    // assert Not(Neq<u8>($t6, ChainId::spec_get_chain_id[@362]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1964:9+81
    assume {:print "$at(11,89008,89089)"} true;
    assert {:msg "assert_failed(11,89008,89089): function does not abort under this condition"}
      !!$IsEqual'u8'($t6, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#362));

    // assert Not(Not(DiemAccount::$exists_at[@363]($t11))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1966:9+71
    assume {:print "$at(11,89140,89211)"} true;
    assert {:msg "assert_failed(11,89140,89211): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#363, $t11);

    // assert Not(AccountFreezing::spec_account_is_frozen[@364]($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1968:9+97
    assume {:print "$at(11,89262,89359)"} true;
    assert {:msg "assert_failed(11,89262,89359): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#364, $t11);

    // assert Not(Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@363]<DiemAccount::DiemAccount>($t11)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1970:9+133
    assume {:print "$at(11,89410,89543)"} true;
    assert {:msg "assert_failed(11,89410,89543): function does not abort under this condition"}
      !!$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#363, $t11)));

    // assert Not(Gt($t10, 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1972:9+70
    assume {:print "$at(11,89594,89664)"} true;
    assert {:msg "assert_failed(11,89594,89664): function does not abort under this condition"}
      !($t10 > 18446744073709551615);

    // assert Not(And(Gt($t10, 0), Not(TransactionFee::$is_coin_initialized[@365]<#0>()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1974:9+113
    assume {:print "$at(11,89715,89828)"} true;
    assert {:msg "assert_failed(11,89715,89828): function does not abort under this condition"}
      !(($t10 > 0) && !$1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory#365));

    // assert Not(And(Gt($t10, 0), Not(exists[@366]<DiemAccount::Balance<#0>>($t11)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1976:9+111
    assume {:print "$at(11,89879,89990)"} true;
    assert {:msg "assert_failed(11,89879,89990): function does not abort under this condition"}
      !(($t10 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#366, $t11));

    // assert Not(And(Gt($t10, 0), Lt(DiemAccount::$balance[@366]<#0>($t11), $t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1978:9+124
    assume {:print "$at(11,90041,90165)"} true;
    assert {:msg "assert_failed(11,90041,90165): function does not abort under this condition"}
      !(($t10 > 0) && ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#366, $t11) < $t10));

    // assert Not(Ge(DiemTimestamp::spec_now_seconds[@367](), $t5)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1980:9+105
    assume {:print "$at(11,90216,90321)"} true;
    assert {:msg "assert_failed(11,90216,90321): function does not abort under this condition"}
      !($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#367) >= $t5);

    // assert Not(Ge($t1, 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1982:9+69
    assume {:print "$at(11,90374,90443)"} true;
    assert {:msg "assert_failed(11,90374,90443): function does not abort under this condition"}
      !($t1 >= 18446744073709551615);

    // assert Not(Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@363]<DiemAccount::DiemAccount>($t11)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1984:9+118
    assume {:print "$at(11,90495,90613)"} true;
    assert {:msg "assert_failed(11,90495,90613): function does not abort under this condition"}
      !($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#363, $t11)));

    // assert Not(Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@363]<DiemAccount::DiemAccount>($t11)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1986:9+118
    assume {:print "$at(11,90665,90783)"} true;
    assert {:msg "assert_failed(11,90665,90783): function does not abort under this condition"}
      !($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#363, $t11)));

    // assert Not(Not(DiemTimestamp::$is_operating[@367]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#367);

    // assert Not(And(DiemTimestamp::$is_genesis[@367](), Not(exists[@361]<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:104:9+101
    assume {:print "$at(13,3930,4031)"} true;
    assert {:msg "assert_failed(13,3930,4031): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#367) && !$ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#361, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1635:9+36
    assume {:print "$at(11,75302,75338)"} true;
    assert {:msg "assert_failed(11,75302,75338): post-condition does not hold"}
      $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@363](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@363]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#363, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#363, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@366]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@366]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#366, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#366, addr))))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1627:5+1
    assume {:print "$at(11,74976,74977)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemTransactionPublishingOption::spec_is_module_allowed[@360, @361]($t0)), Neq<u8>($t6, ChainId::spec_get_chain_id[@362]())), Not(DiemAccount::$exists_at[@363]($t11))), AccountFreezing::spec_account_is_frozen[@364]($t11)), Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@363]<DiemAccount::DiemAccount>($t11)))), Gt($t10, 18446744073709551615)), And(Gt($t10, 0), Not(TransactionFee::$is_coin_initialized[@365]<#0>()))), And(Gt($t10, 0), Not(exists[@366]<DiemAccount::Balance<#0>>($t11)))), And(Gt($t10, 0), Lt(DiemAccount::$balance[@366]<#0>($t11), $t10))), Ge(DiemTimestamp::spec_now_seconds[@367](), $t5)), Ge($t1, 18446744073709551615)), Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@363]<DiemAccount::DiemAccount>($t11)))), Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@363]<DiemAccount::DiemAccount>($t11)))), Not(DiemTimestamp::$is_operating[@367]())), And(DiemTimestamp::$is_genesis[@367](), Not(exists[@361]<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1628:5+362
    assume {:print "$at(11,74982,75344)"} true;
    assert {:msg "assert_failed(11,74982,75344): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((!$1_DiemTransactionPublishingOption_spec_is_module_allowed($1_Roles_RoleId_$memory#360, $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#361, $t0) || !$IsEqual'u8'($t6, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#362))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#363, $t11)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#364, $t11)) || !$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#363, $t11)))) || ($t10 > 18446744073709551615)) || (($t10 > 0) && !$1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory#365))) || (($t10 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#366, $t11))) || (($t10 > 0) && ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#366, $t11) < $t10))) || ($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#367) >= $t5)) || ($t1 >= 18446744073709551615)) || ($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#363, $t11)))) || ($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#363, $t11)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#367)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#367) && !$ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#361, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemTransactionPublishingOption::spec_is_module_allowed[@360, @361]($t0)), Eq(1, $t13)), And(Neq<u8>($t6, ChainId::spec_get_chain_id[@362]()), Eq(7, $t13))), And(Not(DiemAccount::$exists_at[@363]($t11)), Eq(7, $t13))), And(AccountFreezing::spec_account_is_frozen[@364]($t11), Eq(1, $t13))), And(Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@363]<DiemAccount::DiemAccount>($t11))), Eq(7, $t13))), And(Gt($t10, 18446744073709551615), Eq(7, $t13))), And(And(Gt($t10, 0), Not(TransactionFee::$is_coin_initialized[@365]<#0>())), Eq(7, $t13))), And(And(Gt($t10, 0), Not(exists[@366]<DiemAccount::Balance<#0>>($t11))), Eq(7, $t13))), And(And(Gt($t10, 0), Lt(DiemAccount::$balance[@366]<#0>($t11), $t10)), Eq(7, $t13))), And(Ge(DiemTimestamp::spec_now_seconds[@367](), $t5), Eq(7, $t13))), And(Ge($t1, 18446744073709551615), Eq(8, $t13))), And(Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@363]<DiemAccount::DiemAccount>($t11))), Eq(7, $t13))), And(Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@363]<DiemAccount::DiemAccount>($t11))), Eq(7, $t13))), And(Not(DiemTimestamp::$is_operating[@367]()), Eq(1, $t13))), And(And(DiemTimestamp::$is_genesis[@367](), Not(exists[@361]<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))), Eq(5, $t13))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1628:5+362
    assert {:msg "assert_failed(11,74982,75344): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((!$1_DiemTransactionPublishingOption_spec_is_module_allowed($1_Roles_RoleId_$memory#360, $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#361, $t0) && $IsEqual'u8'(1, $t13)) || (!$IsEqual'u8'($t6, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#362)) && $IsEqual'u8'(7, $t13))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#363, $t11) && $IsEqual'u8'(7, $t13))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#364, $t11) && $IsEqual'u8'(1, $t13))) || (!$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#363, $t11))) && $IsEqual'u8'(7, $t13))) || (($t10 > 18446744073709551615) && $IsEqual'u8'(7, $t13))) || ((($t10 > 0) && !$1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory#365)) && $IsEqual'u8'(7, $t13))) || ((($t10 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#366, $t11)) && $IsEqual'u8'(7, $t13))) || ((($t10 > 0) && ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#366, $t11) < $t10)) && $IsEqual'u8'(7, $t13))) || (($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#367) >= $t5) && $IsEqual'u8'(7, $t13))) || (($t1 >= 18446744073709551615) && $IsEqual'u8'(8, $t13))) || (($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#363, $t11))) && $IsEqual'u8'(7, $t13))) || (($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#363, $t11))) && $IsEqual'u8'(7, $t13))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#367) && $IsEqual'u8'(1, $t13))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#367) && !$ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#361, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t13)));

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1628:5+362
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun DiemAccount::multi_agent_script_prologue [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
procedure {:timeLimit 40} $1_DiemAccount_multi_agent_script_prologue$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: Vec (int), _$t4: Vec (Vec (int)), _$t5: int, _$t6: int, _$t7: int, _$t8: int) returns ()
{
    // declare local variables
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $1_DiemAccount_DiemAccount;
    var $t13: Vec (int);
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: $1_DiemAccount_DiemAccount;
    var $t37: Vec (int);
    var $t38: Vec (int);
    var $t39: bool;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: int;
    var $t45: int;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: Vec (Vec (int));
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'address'': Vec (int);
    var $temp_0'vec'u8'': Vec (int);
    var $temp_0'vec'vec'u8''': Vec (Vec (int));
    var $1_DiemAccount_DiemAccount_$memory#300: $Memory $1_DiemAccount_DiemAccount;
    var $1_ChainId_ChainId_$memory#301: $Memory $1_ChainId_ChainId;
    var $1_AccountFreezing_FreezingBit_$memory#302: $Memory $1_AccountFreezing_FreezingBit;
    var $1_TransactionFee_TransactionFee'#0'_$memory#303: $Memory $1_TransactionFee_TransactionFee'#0';
    var $1_DiemAccount_Balance'#0'_$memory#304: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#305: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;
    $t7 := _$t7;
    $t8 := _$t8;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,80010,82551)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume $IsValid'vec'address''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume $IsValid'vec'vec'u8'''($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume $IsValid'u64'($t5);

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume $IsValid'u64'($t6);

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume $IsValid'u64'($t7);

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume $IsValid'u8'($t8);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+2541
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1824:9+57
    assume {:print "$at(11,82600,82657)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // assume Identical($t21, Mul($t5, $t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1825:9+60
    assume {:print "$at(11,82666,82726)"} true;
    assume ($t21 == ($t5 * $t6));

    // assume Identical($t22, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1842:9+57
    assume {:print "$at(11,83325,83382)"} true;
    assume ($t22 == $1_Signer_spec_address_of($t0));

    // assume Identical($t23, Len<address>($t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1846:9+60
    assume {:print "$at(11,83634,83694)"} true;
    assume ($t23 == LenVec($t3));

    // @305 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    assume {:print "$at(11,80010,80011)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#305 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @303 := save_mem(TransactionFee::TransactionFee<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    $1_TransactionFee_TransactionFee'#0'_$memory#303 := $1_TransactionFee_TransactionFee'#0'_$memory;

    // @301 := save_mem(ChainId::ChainId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    $1_ChainId_ChainId_$memory#301 := $1_ChainId_ChainId_$memory;

    // @302 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    $1_AccountFreezing_FreezingBit_$memory#302 := $1_AccountFreezing_FreezingBit_$memory;

    // @300 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    $1_DiemAccount_DiemAccount_$memory#300 := $1_DiemAccount_DiemAccount_$memory;

    // @304 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    $1_DiemAccount_Balance'#0'_$memory#304 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[sender]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    assume {:print "$track_local(29,29,0):", $t0} $t0 == $t0;

    // trace_local[txn_sequence_number]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    assume {:print "$track_local(29,29,1):", $t1} $t1 == $t1;

    // trace_local[txn_sender_public_key]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    assume {:print "$track_local(29,29,2):", $t2} $t2 == $t2;

    // trace_local[secondary_signer_addresses]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    assume {:print "$track_local(29,29,3):", $t3} $t3 == $t3;

    // trace_local[secondary_signer_public_key_hashes]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    assume {:print "$track_local(29,29,4):", $t4} $t4 == $t4;

    // trace_local[txn_gas_price]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    assume {:print "$track_local(29,29,5):", $t5} $t5 == $t5;

    // trace_local[txn_max_gas_units]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    assume {:print "$track_local(29,29,6):", $t6} $t6 == $t6;

    // trace_local[txn_expiration_time]($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    assume {:print "$track_local(29,29,7):", $t7} $t7 == $t7;

    // trace_local[chain_id]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1761:5+1
    assume {:print "$track_local(29,29,8):", $t8} $t8 == $t8;

    // $t24 := Vector::length<address>($t3) on_abort goto L12 with $t25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1773:37+43
    assume {:print "$at(11,80466,80509)"} true;
    call $t24 := $1_Vector_length'address'($t3);
    if ($abort_flag) {
        assume {:print "$at(11,80466,80509)"} true;
        $t25 := $abort_code;
        assume {:print "$track_abort(29,29):", $t25} $t25 == $t25;
        goto L12;
    }

    // trace_local[num_secondary_signers]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1773:13+21
    assume {:print "$track_local(29,29,10):", $t24} $t24 == $t24;

    // $t26 := Vector::length<vector<u8>>($t4) on_abort goto L12 with $t25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1777:13+51
    assume {:print "$at(11,80623,80674)"} true;
    call $t26 := $1_Vector_length'vec'u8''($t4);
    if ($abort_flag) {
        assume {:print "$at(11,80623,80674)"} true;
        $t25 := $abort_code;
        assume {:print "$track_abort(29,29):", $t25} $t25 == $t25;
        goto L12;
    }

    // $t27 := ==($t26, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1777:65+2
    $t27 := $IsEqual'u64'($t26, $t24);

    // $t28 := 1013 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1778:38+49
    assume {:print "$at(11,80738,80787)"} true;
    $t28 := 1013;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1778:13+75
    // >> opaque call: $t24 := Errors::invalid_argument($t23)

    // $t29 := opaque begin: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1778:13+75

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1778:13+75
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1778:13+75
    assume $IsEqual'u64'($t29, 7);

    // $t29 := opaque end: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1778:13+75

    // trace_local[tmp#$15]($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1776:9+196
    assume {:print "$at(11,80603,80799)"} true;
    assume {:print "$track_local(29,29,15):", $t29} $t29 == $t29;

    // trace_local[tmp#$14]($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1776:9+196
    assume {:print "$track_local(29,29,14):", $t27} $t27 == $t27;

    // if ($t27) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1776:9+196
    if ($t27) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1776:9+196
L1:

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1776:9+196
    assume {:print "$at(11,80603,80799)"} true;
    assume {:print "$track_abort(29,29):", $t29} $t29 == $t29;

    // $t25 := move($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1776:9+196
    $t25 := $t29;

    // goto L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1776:9+196
    goto L12;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1781:17+1
    assume {:print "$at(11,80818,80819)"} true;
L0:

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1781:17+1
    $t30 := 0;
    assume $IsValid'u64'($t30);

    // trace_local[i]($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1781:13+1
    assume {:print "$track_local(29,29,9):", $t30} $t30 == $t30;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1783:13+276
    assume {:print "$at(11,80850,81126)"} true;
L9:

    // assert forall j: Range(0, $t30): DiemAccount::$exists_at(Index($t3, j)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1784:17+66
    assume {:print "$at(11,80873,80939)"} true;
    assert {:msg "assert_failed(11,80873,80939): base case of the loop invariant does not hold"}
      (var $range_0 := $Range(0, $t30); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, ReadVec($t3, j))))));

    // assert forall j: Range(0, $t30): Eq<vector<u8>>(Index($t4, j), select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(Index($t3, j)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    assume {:print "$at(11,80956,81112)"} true;
    assert {:msg "assert_failed(11,80956,81112): base case of the loop invariant does not hold"}
      (var $range_0 := $Range(0, $t30); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    ($IsEqual'vec'u8''(ReadVec($t4, j), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, ReadVec($t3, j))))))));

    // havoc[val]($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t30;
    assume $IsValid'u64'($t30);

    // havoc[val]($t31) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t31;
    assume $IsValid'bool'($t31);

    // havoc[val]($t32) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t32;
    assume $IsValid'address'($t32);

    // havoc[val]($t33) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t33;
    assume $IsValid'bool'($t33);

    // havoc[val]($t34) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t34;
    assume $IsValid'u64'($t34);

    // havoc[val]($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t35;
    assume $IsValid'u64'($t35);

    // havoc[val]($t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t36;
    assume $IsValid'$1_DiemAccount_DiemAccount'($t36);

    // havoc[val]($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t37;
    assume $IsValid'vec'u8''($t37);

    // havoc[val]($t38) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t38;
    assume $IsValid'vec'u8''($t38);

    // havoc[val]($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t39;
    assume $IsValid'bool'($t39);

    // havoc[val]($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t40;
    assume $IsValid'u64'($t40);

    // havoc[val]($t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t41;
    assume $IsValid'u64'($t41);

    // havoc[val]($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t42;
    assume $IsValid'u64'($t42);

    // havoc[val]($t43) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    havoc $t43;
    assume $IsValid'u64'($t43);

    // assume Not(AbortFlag()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    assume !$abort_flag;

    // assume forall j: Range(0, $t30): DiemAccount::$exists_at(Index($t3, j)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1784:17+66
    assume {:print "$at(11,80873,80939)"} true;
    assume (var $range_0 := $Range(0, $t30); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, ReadVec($t3, j))))));

    // assume forall j: Range(0, $t30): Eq<vector<u8>>(Index($t4, j), select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(Index($t3, j)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    assume {:print "$at(11,80956,81112)"} true;
    assume (var $range_0 := $Range(0, $t30); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    ($IsEqual'vec'u8''(ReadVec($t4, j), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, ReadVec($t3, j))))))));

    // $t31 := <($t30, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1788:16+1
    assume {:print "$at(11,81143,81144)"} true;
    call $t31 := $Lt($t30, $t24);

    // if ($t31) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1782:9+1159
    assume {:print "$at(11,80829,81988)"} true;
    if ($t31) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1782:9+1159
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1782:9+1159
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1792:53+27
    assume {:print "$at(11,81304,81331)"} true;
L2:

    // $t32 := Vector::borrow<address>($t3, $t30) on_abort goto L12 with $t25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1792:38+46
    call $t32 := $1_Vector_borrow'address'($t3, $t30);
    if ($abort_flag) {
        assume {:print "$at(11,81289,81335)"} true;
        $t25 := $abort_code;
        assume {:print "$track_abort(29,29):", $t25} $t25 == $t25;
        goto L12;
    }

    // trace_local[secondary_address]($t32) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1792:17+17
    assume {:print "$track_local(29,29,11):", $t32} $t32 == $t32;

    // $t33 := DiemAccount::exists_at($t32) on_abort goto L12 with $t25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:20+28
    assume {:print "$at(11,81356,81384)"} true;
    call $t33 := $1_DiemAccount_exists_at($t32);
    if ($abort_flag) {
        assume {:print "$at(11,81356,81384)"} true;
        $t25 := $abort_code;
        assume {:print "$track_abort(29,29):", $t25} $t25 == $t25;
        goto L12;
    }

    // $t34 := 1004 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:75+21
    $t34 := 1004;
    assume $IsValid'u64'($t34);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:50+47
    // >> opaque call: $t30 := Errors::invalid_argument($t29)

    // $t35 := opaque begin: Errors::invalid_argument($t34) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:50+47

    // assume WellFormed($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:50+47
    assume $IsValid'u64'($t35);

    // assume Eq<u64>($t35, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:50+47
    assume $IsEqual'u64'($t35, 7);

    // $t35 := opaque end: Errors::invalid_argument($t34) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:50+47

    // trace_local[tmp#$17]($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:13+85
    assume {:print "$track_local(29,29,17):", $t35} $t35 == $t35;

    // trace_local[tmp#$16]($t33) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:13+85
    assume {:print "$track_local(29,29,16):", $t33} $t33 == $t33;

    // if ($t33) goto L5 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:13+85
    if ($t33) { goto L5; } else { goto L6; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:13+85
L6:

    // trace_abort($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:13+85
    assume {:print "$at(11,81349,81434)"} true;
    assume {:print "$track_abort(29,29):", $t35} $t35 == $t35;

    // $t25 := move($t35) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:13+85
    $t25 := $t35;

    // goto L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1793:13+85
    goto L12;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1797:61+17
    assume {:print "$at(11,81646,81663)"} true;
L5:

    // $t36 := get_global<DiemAccount::DiemAccount>($t32) on_abort goto L12 with $t25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1797:34+13
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t32)) {
        call $ExecFailureAbort();
    } else {
        $t36 := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t32);
    }
    if ($abort_flag) {
        assume {:print "$at(11,81619,81632)"} true;
        $t25 := $abort_code;
        assume {:print "$track_abort(29,29):", $t25} $t25 == $t25;
        goto L12;
    }

    // trace_local[signer_account]($t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1797:17+14
    assume {:print "$track_local(29,29,12):", $t36} $t36 == $t36;

    // $t37 := Vector::borrow<vector<u8>>($t4, $t30) on_abort goto L12 with $t25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1798:43+54
    assume {:print "$at(11,81708,81762)"} true;
    call $t37 := $1_Vector_borrow'vec'u8''($t4, $t30);
    if ($abort_flag) {
        assume {:print "$at(11,81708,81762)"} true;
        $t25 := $abort_code;
        assume {:print "$track_abort(29,29):", $t25} $t25 == $t25;
        goto L12;
    }

    // trace_local[signer_public_key_hash]($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1798:17+22
    assume {:print "$track_local(29,29,13):", $t37} $t37 == $t37;

    // $t38 := get_field<DiemAccount::DiemAccount>.authentication_key($t36) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1800:44+34
    assume {:print "$at(11,81827,81861)"} true;
    $t38 := $authentication_key#$1_DiemAccount_DiemAccount($t36);

    // $t39 := ==($t37, $t38) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1800:40+2
    $t39 := $IsEqual'vec'u8''($t37, $t38);

    // $t40 := 1001 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1801:42+34
    assume {:print "$at(11,81904,81938)"} true;
    $t40 := 1001;
    assume $IsValid'u64'($t40);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1801:17+60
    // >> opaque call: $t36 := Errors::invalid_argument($t35)

    // $t41 := opaque begin: Errors::invalid_argument($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1801:17+60

    // assume WellFormed($t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1801:17+60
    assume $IsValid'u64'($t41);

    // assume Eq<u64>($t41, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1801:17+60
    assume $IsEqual'u64'($t41, 7);

    // $t41 := opaque end: Errors::invalid_argument($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1801:17+60

    // trace_local[tmp#$19]($t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1799:13+178
    assume {:print "$at(11,81776,81954)"} true;
    assume {:print "$track_local(29,29,19):", $t41} $t41 == $t41;

    // trace_local[tmp#$18]($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1799:13+178
    assume {:print "$track_local(29,29,18):", $t39} $t39 == $t39;

    // if ($t39) goto L7 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1799:13+178
    if ($t39) { goto L7; } else { goto L8; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1799:13+178
L8:

    // trace_abort($t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1799:13+178
    assume {:print "$at(11,81776,81954)"} true;
    assume {:print "$track_abort(29,29):", $t41} $t41 == $t41;

    // $t25 := move($t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1799:13+178
    $t25 := $t41;

    // goto L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1799:13+178
    goto L12;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1803:17+1
    assume {:print "$at(11,81972,81973)"} true;
L7:

    // $t42 := 1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1803:21+1
    $t42 := 1;
    assume $IsValid'u64'($t42);

    // $t43 := +($t30, $t42) on_abort goto L12 with $t25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1803:19+1
    call $t43 := $AddU64($t30, $t42);
    if ($abort_flag) {
        assume {:print "$at(11,81974,81975)"} true;
        $t25 := $abort_code;
        assume {:print "$track_abort(29,29):", $t25} $t25 == $t25;
        goto L12;
    }

    // trace_local[i]($t43) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1803:13+1
    assume {:print "$track_local(29,29,9):", $t43} $t43 == $t43;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1803:22+1
    goto L10;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1806:9+300
    assume {:print "$at(11,81999,82299)"} true;
L4:

    // assert forall j: Range(0, $t24): DiemAccount::$exists_at(Index($t3, j)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1807:13+86
    assume {:print "$at(11,82018,82104)"} true;
    assert {:msg "assert_failed(11,82018,82104): unknown assertion failed"}
      (var $range_0 := $Range(0, $t24); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, ReadVec($t3, j))))));

    // assert forall j: Range(0, $t24): Eq<vector<u8>>(Index($t4, j), select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(Index($t3, j)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1808:13+172
    assume {:print "$at(11,82117,82289)"} true;
    assert {:msg "assert_failed(11,82117,82289): unknown assertion failed"}
      (var $range_0 := $Range(0, $t24); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    ($IsEqual'vec'u8''(ReadVec($t4, j), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, ReadVec($t3, j))))))));

    // assume Identical($t44, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1947:9+57
    assume {:print "$at(11,88304,88361)"} true;
    assume ($t44 == $1_Signer_spec_address_of($t0));

    // assume Identical($t45, Mul($t5, $t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1948:9+60
    assume {:print "$at(11,88370,88430)"} true;
    assume ($t45 == ($t5 * $t6));

    // DiemAccount::prologue_common<#0>($t0, $t1, $t2, $t5, $t6, $t7, $t8) on_abort goto L12 with $t25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1812:9+235
    assume {:print "$at(11,82310,82545)"} true;
    call $1_DiemAccount_prologue_common'#0'($t0, $t1, $t2, $t5, $t6, $t7, $t8);
    if ($abort_flag) {
        assume {:print "$at(11,82310,82545)"} true;
        $t25 := $abort_code;
        assume {:print "$track_abort(29,29):", $t25} $t25 == $t25;
        goto L12;
    }

    // goto L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1812:9+235
    goto L11;

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1806:9+300
    // Loop invariant checking block for the loop started with header: L9
    assume {:print "$at(11,81999,82299)"} true;
L10:

    // assert forall j: Range(0, $t43): DiemAccount::$exists_at(Index($t3, j)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1784:17+66
    assume {:print "$at(11,80873,80939)"} true;
    assert {:msg "assert_failed(11,80873,80939): induction case of the loop invariant does not hold"}
      (var $range_0 := $Range(0, $t43); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, ReadVec($t3, j))))));

    // assert forall j: Range(0, $t43): Eq<vector<u8>>(Index($t4, j), select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(Index($t3, j)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    assume {:print "$at(11,80956,81112)"} true;
    assert {:msg "assert_failed(11,80956,81112): induction case of the loop invariant does not hold"}
      (var $range_0 := $Range(0, $t43); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    ($IsEqual'vec'u8''(ReadVec($t4, j), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, ReadVec($t3, j))))))));

    // stop() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1785:17+156
    assume false;
    return;

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1821:5+1
    assume {:print "$at(11,82550,82551)"} true;
L11:

    // assert Not(Neq<num>(Len<address>($t3), Len<vector<u8>>($t4))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1844:9+127
    assume {:print "$at(11,83498,83625)"} true;
    assert {:msg "assert_failed(11,83498,83625): function does not abort under this condition"}
      !!$IsEqual'num'(LenVec($t3), LenVec($t4));

    // assert Not(exists i: Range(0, $t23): Not(DiemAccount::$exists_at[@300](Index($t3, i)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1847:9+132
    assume {:print "$at(11,83703,83835)"} true;
    assert {:msg "assert_failed(11,83703,83835): function does not abort under this condition"}
      !(var $range_0 := $Range(0, $t23); (exists $i_1: int :: $InRange($range_0, $i_1) && (var i := $i_1;
    (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#300, ReadVec($t3, i))))));

    // assert Not(exists i: Range(0, $t23): Neq<vector<u8>>(Index($t4, i), select DiemAccount::DiemAccount.authentication_key(global[@300]<DiemAccount::DiemAccount>(Index($t3, i))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1849:9+209
    assume {:print "$at(11,83844,84053)"} true;
    assert {:msg "assert_failed(11,83844,84053): function does not abort under this condition"}
      !(var $range_0 := $Range(0, $t23); (exists $i_1: int :: $InRange($range_0, $i_1) && (var i := $i_1;
    (!$IsEqual'vec'u8''(ReadVec($t4, i), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, ReadVec($t3, i))))))));

    // assert Not(Neq<u8>($t8, ChainId::spec_get_chain_id[@301]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1964:9+81
    assume {:print "$at(11,89008,89089)"} true;
    assert {:msg "assert_failed(11,89008,89089): function does not abort under this condition"}
      !!$IsEqual'u8'($t8, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#301));

    // assert Not(Not(DiemAccount::$exists_at[@300]($t22))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1966:9+71
    assume {:print "$at(11,89140,89211)"} true;
    assert {:msg "assert_failed(11,89140,89211): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#300, $t22);

    // assert Not(AccountFreezing::spec_account_is_frozen[@302]($t22)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1968:9+97
    assume {:print "$at(11,89262,89359)"} true;
    assert {:msg "assert_failed(11,89262,89359): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#302, $t22);

    // assert Not(Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@300]<DiemAccount::DiemAccount>($t22)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1970:9+133
    assume {:print "$at(11,89410,89543)"} true;
    assert {:msg "assert_failed(11,89410,89543): function does not abort under this condition"}
      !!$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, $t22)));

    // assert Not(Gt($t21, 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1972:9+70
    assume {:print "$at(11,89594,89664)"} true;
    assert {:msg "assert_failed(11,89594,89664): function does not abort under this condition"}
      !($t21 > 18446744073709551615);

    // assert Not(And(Gt($t21, 0), Not(TransactionFee::$is_coin_initialized[@303]<#0>()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1974:9+113
    assume {:print "$at(11,89715,89828)"} true;
    assert {:msg "assert_failed(11,89715,89828): function does not abort under this condition"}
      !(($t21 > 0) && !$1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory#303));

    // assert Not(And(Gt($t21, 0), Not(exists[@304]<DiemAccount::Balance<#0>>($t22)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1976:9+111
    assume {:print "$at(11,89879,89990)"} true;
    assert {:msg "assert_failed(11,89879,89990): function does not abort under this condition"}
      !(($t21 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#304, $t22));

    // assert Not(And(Gt($t21, 0), Lt(DiemAccount::$balance[@304]<#0>($t22), $t21))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1978:9+124
    assume {:print "$at(11,90041,90165)"} true;
    assert {:msg "assert_failed(11,90041,90165): function does not abort under this condition"}
      !(($t21 > 0) && ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#304, $t22) < $t21));

    // assert Not(Ge(DiemTimestamp::spec_now_seconds[@305](), $t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1980:9+105
    assume {:print "$at(11,90216,90321)"} true;
    assert {:msg "assert_failed(11,90216,90321): function does not abort under this condition"}
      !($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#305) >= $t7);

    // assert Not(Ge($t1, 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1982:9+69
    assume {:print "$at(11,90374,90443)"} true;
    assert {:msg "assert_failed(11,90374,90443): function does not abort under this condition"}
      !($t1 >= 18446744073709551615);

    // assert Not(Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@300]<DiemAccount::DiemAccount>($t22)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1984:9+118
    assume {:print "$at(11,90495,90613)"} true;
    assert {:msg "assert_failed(11,90495,90613): function does not abort under this condition"}
      !($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, $t22)));

    // assert Not(Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@300]<DiemAccount::DiemAccount>($t22)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1986:9+118
    assume {:print "$at(11,90665,90783)"} true;
    assert {:msg "assert_failed(11,90665,90783): function does not abort under this condition"}
      !($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, $t22)));

    // assert Not(Not(DiemTimestamp::$is_operating[@305]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#305);

    // assert DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1830:9+36
    assume {:print "$at(11,82898,82934)"} true;
    assert {:msg "assert_failed(11,82898,82934): post-condition does not hold"}
      $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@300](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@300]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#300, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@304]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@304]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#304, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#304, addr))))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    return;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1821:5+1
    assume {:print "$at(11,82550,82551)"} true;
L12:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Neq<num>(Len<address>($t3), Len<vector<u8>>($t4)), exists i: Range(0, $t23): Not(DiemAccount::$exists_at[@300](Index($t3, i)))), exists i: Range(0, $t23): Neq<vector<u8>>(Index($t4, i), select DiemAccount::DiemAccount.authentication_key(global[@300]<DiemAccount::DiemAccount>(Index($t3, i))))), Neq<u8>($t8, ChainId::spec_get_chain_id[@301]())), Not(DiemAccount::$exists_at[@300]($t22))), AccountFreezing::spec_account_is_frozen[@302]($t22)), Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@300]<DiemAccount::DiemAccount>($t22)))), Gt($t21, 18446744073709551615)), And(Gt($t21, 0), Not(TransactionFee::$is_coin_initialized[@303]<#0>()))), And(Gt($t21, 0), Not(exists[@304]<DiemAccount::Balance<#0>>($t22)))), And(Gt($t21, 0), Lt(DiemAccount::$balance[@304]<#0>($t22), $t21))), Ge(DiemTimestamp::spec_now_seconds[@305](), $t7)), Ge($t1, 18446744073709551615)), Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@300]<DiemAccount::DiemAccount>($t22)))), Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@300]<DiemAccount::DiemAccount>($t22)))), Not(DiemTimestamp::$is_operating[@305]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1823:5+383
    assume {:print "$at(11,82557,82940)"} true;
    assert {:msg "assert_failed(11,82557,82940): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((!$IsEqual'num'(LenVec($t3), LenVec($t4)) || (var $range_0 := $Range(0, $t23); (exists $i_1: int :: $InRange($range_0, $i_1) && (var i := $i_1;
    (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#300, ReadVec($t3, i))))))) || (var $range_2 := $Range(0, $t23); (exists $i_3: int :: $InRange($range_2, $i_3) && (var i := $i_3;
    (!$IsEqual'vec'u8''(ReadVec($t4, i), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, ReadVec($t3, i))))))))) || !$IsEqual'u8'($t8, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#301))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#300, $t22)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#302, $t22)) || !$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, $t22)))) || ($t21 > 18446744073709551615)) || (($t21 > 0) && !$1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory#303))) || (($t21 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#304, $t22))) || (($t21 > 0) && ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#304, $t22) < $t21))) || ($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#305) >= $t7)) || ($t1 >= 18446744073709551615)) || ($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, $t22)))) || ($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, $t22)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#305));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Neq<num>(Len<address>($t3), Len<vector<u8>>($t4)), Eq(7, $t25)), And(exists i: Range(0, $t23): Not(DiemAccount::$exists_at[@300](Index($t3, i))), Eq(7, $t25))), And(exists i: Range(0, $t23): Neq<vector<u8>>(Index($t4, i), select DiemAccount::DiemAccount.authentication_key(global[@300]<DiemAccount::DiemAccount>(Index($t3, i)))), Eq(7, $t25))), And(Neq<u8>($t8, ChainId::spec_get_chain_id[@301]()), Eq(7, $t25))), And(Not(DiemAccount::$exists_at[@300]($t22)), Eq(7, $t25))), And(AccountFreezing::spec_account_is_frozen[@302]($t22), Eq(1, $t25))), And(Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@300]<DiemAccount::DiemAccount>($t22))), Eq(7, $t25))), And(Gt($t21, 18446744073709551615), Eq(7, $t25))), And(And(Gt($t21, 0), Not(TransactionFee::$is_coin_initialized[@303]<#0>())), Eq(7, $t25))), And(And(Gt($t21, 0), Not(exists[@304]<DiemAccount::Balance<#0>>($t22))), Eq(7, $t25))), And(And(Gt($t21, 0), Lt(DiemAccount::$balance[@304]<#0>($t22), $t21)), Eq(7, $t25))), And(Ge(DiemTimestamp::spec_now_seconds[@305](), $t7), Eq(7, $t25))), And(Ge($t1, 18446744073709551615), Eq(8, $t25))), And(Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@300]<DiemAccount::DiemAccount>($t22))), Eq(7, $t25))), And(Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@300]<DiemAccount::DiemAccount>($t22))), Eq(7, $t25))), And(Not(DiemTimestamp::$is_operating[@305]()), Eq(1, $t25))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1823:5+383
    assert {:msg "assert_failed(11,82557,82940): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((!$IsEqual'num'(LenVec($t3), LenVec($t4)) && $IsEqual'u8'(7, $t25)) || ((var $range_0 := $Range(0, $t23); (exists $i_1: int :: $InRange($range_0, $i_1) && (var i := $i_1;
    (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#300, ReadVec($t3, i)))))) && $IsEqual'u8'(7, $t25))) || ((var $range_2 := $Range(0, $t23); (exists $i_3: int :: $InRange($range_2, $i_3) && (var i := $i_3;
    (!$IsEqual'vec'u8''(ReadVec($t4, i), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, ReadVec($t3, i)))))))) && $IsEqual'u8'(7, $t25))) || (!$IsEqual'u8'($t8, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#301)) && $IsEqual'u8'(7, $t25))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#300, $t22) && $IsEqual'u8'(7, $t25))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#302, $t22) && $IsEqual'u8'(1, $t25))) || (!$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, $t22))) && $IsEqual'u8'(7, $t25))) || (($t21 > 18446744073709551615) && $IsEqual'u8'(7, $t25))) || ((($t21 > 0) && !$1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory#303)) && $IsEqual'u8'(7, $t25))) || ((($t21 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#304, $t22)) && $IsEqual'u8'(7, $t25))) || ((($t21 > 0) && ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#304, $t22) < $t21)) && $IsEqual'u8'(7, $t25))) || (($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#305) >= $t7) && $IsEqual'u8'(7, $t25))) || (($t1 >= 18446744073709551615) && $IsEqual'u8'(8, $t25))) || (($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, $t22))) && $IsEqual'u8'(7, $t25))) || (($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#300, $t22))) && $IsEqual'u8'(7, $t25))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#305) && $IsEqual'u8'(1, $t25)));

    // abort($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1823:5+383
    $abort_code := $t25;
    $abort_flag := true;
    return;

}

// fun DiemAccount::pay_by_signers [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
procedure {:timeLimit 40} $1_DiemAccount_pay_by_signers$verify(_$t0: $1_DiemAccount_WithdrawCapability, _$t1: int, _$t2: int, _$t3: Vec (int)) returns ()
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t8: $1_DiemAccount_ReceivedPaymentEvent;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t11: $1_DiemAccount_SentPaymentEvent;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t18: $1_DiemAccount_SentPaymentEvent;
    var $t19: $1_Diem_Diem'#0';
    var $t20: int;
    var $t21: Vec (int);
    var $t22: bool;
    var $t23: int;
    var $t24: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t25: $1_DiemAccount_ReceivedPaymentEvent;
    var $t26: $1_FixedPoint32_FixedPoint32;
    var $t27: bool;
    var $t28: $1_DiemAccount_ReceivedPaymentEvent;
    var $t29: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t0: $1_DiemAccount_WithdrawCapability;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $1_DiemAccount_Balance'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_Balance'#0'_$memory#609: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#610: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'#0'_$memory#611: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#612: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#613: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#615: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#616: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_AccountFreezing_FreezingBit_$memory#617: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#618: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#621: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#622: $Memory $1_DiemAccount_Balance'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,36259,36760)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:234:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume $IsValid'vec'u8''($t3);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+501
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t5, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:631:9+32
    assume {:print "$at(11,28125,28157)"} true;
    assume ($t5 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t6, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:903:9+32
    assume {:print "$at(11,40158,40190)"} true;
    assume ($t6 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t7, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:408:9+56
    assume {:print "$at(11,17877,17933)"} true;
    assume ($t7 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))));

    // assume Identical($t8, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), select DiemAccount::WithdrawCapability.account_address($t0), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:409:9+165
    assume {:print "$at(11,17942,18107)"} true;
    assume ($t8 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $account_address#$1_DiemAccount_WithdrawCapability($t0), $t3));

    // assume Identical($t9, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:650:9+32
    assume {:print "$at(11,29045,29077)"} true;
    assume ($t9 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t10, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:651:9+52
    assume {:print "$at(11,29086,29138)"} true;
    assume ($t10 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t0))));

    // assume Identical($t11, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<#0>(), Signer::spec_address_of($t1), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:652:9+161
    assume {:print "$at(11,29147,29308)"} true;
    assume ($t11 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $1_Signer_spec_address_of($t1), $t3));

    // assume CanModify<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:846:9+36
    assume {:print "$at(11,37363,37399)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$account_address#$1_DiemAccount_WithdrawCapability($t0)];

    // assume CanModify<DiemAccount::DiemAccount>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:847:9+36
    assume {:print "$at(11,37408,37444)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$1_Signer_spec_address_of($t1)];

    // assume CanModify<DiemAccount::Balance<#0>>(select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:848:9+39
    assume {:print "$at(11,37453,37492)"} true;
    assume $1_DiemAccount_Balance'#0'_$modifies[$account_address#$1_DiemAccount_WithdrawCapability($t0)];

    // assume CanModify<DiemAccount::Balance<#0>>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:849:9+39
    assume {:print "$at(11,37501,37540)"} true;
    assume $1_DiemAccount_Balance'#0'_$modifies[$1_Signer_spec_address_of($t1)];

    // assume CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address(select DiemAccount::WithdrawCapability.account_address($t0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:850:9+80
    assume {:print "$at(11,37549,37629)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t0))];

    // assume CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    assume {:print "$at(11,37638,37718)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))];

    // @614 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @616 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_Diem_CurrencyInfo'#0'_$memory#616 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @615 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_AccountLimits_LimitsDefinition'#0'_$memory#615 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @611 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_AccountLimits_Window'#0'_$memory#611 := $1_AccountLimits_Window'#0'_$memory;

    // @612 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_VASP_ChildVASP_$memory#612 := $1_VASP_ChildVASP_$memory;

    // @613 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_VASP_ParentVASP_$memory#613 := $1_VASP_ParentVASP_$memory;

    // @617 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_AccountFreezing_FreezingBit_$memory#617 := $1_AccountFreezing_FreezingBit_$memory;

    // @610 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_DiemAccount_DiemAccount_$memory#610 := $1_DiemAccount_DiemAccount_$memory;

    // @618 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_DiemAccount_AccountOperationsCapability_$memory#618 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @609 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_DiemAccount_Balance'#0'_$memory#609 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+1
    assume {:print "$at(11,36259,36260)"} true;
    assume {:print "$track_local(29,30,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+1
    assume {:print "$track_local(29,30,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+1
    assume {:print "$track_local(29,30,2):", $t2} $t2 == $t2;

    // trace_local[metadata]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:806:5+1
    assume {:print "$track_local(29,30,3):", $t3} $t3 == $t3;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:812:29+25
    // >> opaque call: $t5 := Signer::address_of($t1)
    assume {:print "$at(11,36504,36529)"} true;

    // $t12 := opaque begin: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:812:29+25

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:812:29+25
    assume $IsValid'address'($t12);

    // assume Eq<address>($t12, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:812:29+25
    assume $IsEqual'address'($t12, $1_Signer_spec_address_of($t1));

    // $t12 := opaque end: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:812:29+25

    // trace_local[payee_address]($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:812:13+13
    assume {:print "$track_local(29,30,4):", $t12} $t12 == $t12;

    // $t13 := get_field<DiemAccount::WithdrawCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:814:14+20
    assume {:print "$at(11,36568,36588)"} true;
    $t13 := $account_address#$1_DiemAccount_WithdrawCapability($t0);

    // assume Identical($t14, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:611:9+32
    assume {:print "$at(11,27036,27068)"} true;
    assume ($t14 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t15, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:631:9+32
    assume {:print "$at(11,28125,28157)"} true;
    assume ($t15 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t16, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:650:9+32
    assume {:print "$at(11,29045,29077)"} true;
    assume ($t16 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t17, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t16))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:651:9+52
    assume {:print "$at(11,29086,29138)"} true;
    assume ($t17 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t16)));

    // assume Identical($t18, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t12, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:652:9+161
    assume {:print "$at(11,29147,29308)"} true;
    assume ($t18 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t12, $t3));

    // assert CanModify<DiemAccount::Balance<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:816:13+56
    assume {:print "$at(11,36629,36685)"} true;
    assert {:msg "assert_failed(11,36629,36685): caller does not have permission to modify `DiemAccount::Balance<#0>` at given address"}
      $1_DiemAccount_Balance'#0'_$modifies[$t14];

    // assert CanModify<DiemAccount::DiemAccount>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:816:13+56
    assert {:msg "assert_failed(11,36629,36685): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t14];

    // assert CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t14)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:816:13+56
    assert {:msg "assert_failed(11,36629,36685): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14)];

    // $t19 := DiemAccount::withdraw_from<#0>($t0, $t12, $t2, $t3) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:816:13+56
    call $t19 := $1_DiemAccount_withdraw_from'#0'($t0, $t12, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(11,36629,36685)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(29,30):", $t20} $t20 == $t20;
        goto L2;
    }

    // $t21 := [] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:818:13+3
    assume {:print "$at(11,36721,36724)"} true;
    $t21 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t21);

    // $t22 := false at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:819:13+5
    assume {:print "$at(11,36738,36743)"} true;
    $t22 := false;
    assume $IsValid'bool'($t22);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    // >> opaque call: DiemAccount::deposit<#0>($t6, $t5, $t7, $t3, $t8, $t9)
    assume {:print "$at(11,36539,36753)"} true;

    // assume Identical($t23, select Diem::Diem.value($t19)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:358:9+30
    assume {:print "$at(11,15804,15834)"} true;
    assume ($t23 == $value#$1_Diem_Diem'#0'($t19));

    // assume Identical($t24, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:408:9+56
    assume {:print "$at(11,17877,17933)"} true;
    assume ($t24 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12)));

    // assume Identical($t25, pack DiemAccount::ReceivedPaymentEvent($t23, Diem::spec_currency_code<#0>(), $t13, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:409:9+165
    assume {:print "$at(11,17942,18107)"} true;
    assume ($t25 == $1_DiemAccount_ReceivedPaymentEvent($t23, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t13, $t3));

    // assume Identical($t26, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1377:9+59
    assume {:print "$at(10,65833,65892)"} true;
    assume ($t26 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert CanModify<DiemAccount::Balance<#0>>($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume {:print "$at(11,36539,36753)"} true;
    assert {:msg "assert_failed(11,36539,36753): caller does not have permission to modify `DiemAccount::Balance<#0>` at given address"}
      $1_DiemAccount_Balance'#0'_$modifies[$t12];

    // assert CanModify<DiemAccount::DiemAccount>($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assert {:msg "assert_failed(11,36539,36753): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t12];

    // assert CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assert {:msg "assert_failed(11,36539,36753): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12)];

    // opaque begin: DiemAccount::deposit<#0>($t13, $t12, $t19, $t3, $t21, $t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214

    // assume Identical($t27, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<#0>>($t12)), Not(DiemAccount::$exists_at($t12))), Eq<u64>($t23, 0)), And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t23, VASP::spec_parent_address($t12))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), $t23), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), $t23), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<#0>())), AccountFreezing::spec_account_is_frozen($t12)), Gt(Add(DiemAccount::$balance<#0>($t12), $t23), MaxU64())), And($t22, And(Eq<num>(Len<u8>($t21), 0), Not(DualAttestation::spec_is_published())))), And($t22, And(Eq<num>(Len<u8>($t21), 0), Not(Diem::spec_is_currency<#0>())))), And($t22, And(Eq<num>(Len<u8>($t21), 0), Gt(FixedPoint32::spec_multiply_u64($t23, $t26), 18446744073709551615)))), And($t22, And(Or(Neq<num>(Len<u8>($t21), 0), DualAttestation::spec_dual_attestation_required<#0>($t13, $t12, $t23)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t12)))))), And($t22, And(Or(Neq<num>(Len<u8>($t21), 0), DualAttestation::spec_dual_attestation_required<#0>($t13, $t12, $t23)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t12)))))), And($t22, And(Or(Neq<num>(Len<u8>($t21), 0), DualAttestation::spec_dual_attestation_required<#0>($t13, $t12, $t23)), Not(DualAttestation::spec_signature_is_valid($t13, $t12, $t21, $t3, $t23))))), And($t22, And(Or(Neq<num>(Len<u8>($t21), 0), DualAttestation::spec_dual_attestation_required<#0>($t13, $t12, $t23)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t12))))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume ($t27 == ((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t12) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t12)) || $IsEqual'u64'($t23, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t23, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12)))) + $t23) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12)))) + $t23) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t12)) || (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t12) + $t23) > $MAX_U64)) || ($t22 && ($IsEqual'num'(LenVec($t21), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)))) || ($t22 && ($IsEqual'num'(LenVec($t21), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)))) || ($t22 && ($IsEqual'num'(LenVec($t21), 0) && ($1_FixedPoint32_spec_multiply_u64($t23, $t26) > 18446744073709551615)))) || ($t22 && ((!$IsEqual'num'(LenVec($t21), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t13, $t12, $t23)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12)))))) || ($t22 && ((!$IsEqual'num'(LenVec($t21), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t13, $t12, $t23)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12)))))) || ($t22 && ((!$IsEqual'num'(LenVec($t21), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t13, $t12, $t23)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t13, $t12, $t21, $t3, $t23)))) || ($t22 && ((!$IsEqual'num'(LenVec($t21), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t13, $t12, $t23)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))))));

    // if ($t27) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    if ($t27) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
L4:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<#0>>($t12)), Eq(7, $t20)), And(Not(DiemAccount::$exists_at($t12)), Eq(5, $t20))), And(Eq<u64>($t23, 0), Eq(7, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t23, VASP::spec_parent_address($t12)))), Eq(8, $t20))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), $t23), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), $t23), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12))))), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t13, $t12, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t20))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20))), And(AccountFreezing::spec_account_is_frozen($t12), Eq(1, $t20))), And(Gt(Add(DiemAccount::$balance<#0>($t12), $t23), MaxU64()), Eq(8, $t20))), And(And($t22, And(Eq<num>(Len<u8>($t21), 0), Not(DualAttestation::spec_is_published()))), Eq(5, $t20))), And(And($t22, And(Eq<num>(Len<u8>($t21), 0), Not(Diem::spec_is_currency<#0>()))), Eq(5, $t20))), And(And($t22, And(Eq<num>(Len<u8>($t21), 0), Gt(FixedPoint32::spec_multiply_u64($t23, $t26), 18446744073709551615))), Eq(8, $t20))), And(And($t22, And(Or(Neq<num>(Len<u8>($t21), 0), DualAttestation::spec_dual_attestation_required<#0>($t13, $t12, $t23)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t12))))), Eq(1, $t20))), And(And($t22, And(Or(Neq<num>(Len<u8>($t21), 0), DualAttestation::spec_dual_attestation_required<#0>($t13, $t12, $t23)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t12))))), Eq(1, $t20))), And(And($t22, And(Or(Neq<num>(Len<u8>($t21), 0), DualAttestation::spec_dual_attestation_required<#0>($t13, $t12, $t23)), Not(DualAttestation::spec_signature_is_valid($t13, $t12, $t21, $t3, $t23)))), Eq(7, $t20))), And(And($t22, And(Or(Neq<num>(Len<u8>($t21), 0), DualAttestation::spec_dual_attestation_required<#0>($t13, $t12, $t23)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t12))))), Eq(5, $t20))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume (((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t12) && $IsEqual'u8'(7, $t20)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t12) && $IsEqual'u8'(5, $t20))) || ($IsEqual'u64'($t23, 0) && $IsEqual'u8'(7, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t23, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))) && $IsEqual'u8'(8, $t20))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))))) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12)))) + $t23) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12)))) + $t23) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))))) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t13, $t12, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'u8'(1, $t20))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t20))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t12) && $IsEqual'u8'(1, $t20))) || ((($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t12) + $t23) > $MAX_U64) && $IsEqual'u8'(8, $t20))) || (($t22 && ($IsEqual'num'(LenVec($t21), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) && $IsEqual'u8'(5, $t20))) || (($t22 && ($IsEqual'num'(LenVec($t21), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))) && $IsEqual'u8'(5, $t20))) || (($t22 && ($IsEqual'num'(LenVec($t21), 0) && ($1_FixedPoint32_spec_multiply_u64($t23, $t26) > 18446744073709551615))) && $IsEqual'u8'(8, $t20))) || (($t22 && ((!$IsEqual'num'(LenVec($t21), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t13, $t12, $t23)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))))) && $IsEqual'u8'(1, $t20))) || (($t22 && ((!$IsEqual'num'(LenVec($t21), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t13, $t12, $t23)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12))))) && $IsEqual'u8'(1, $t20))) || (($t22 && ((!$IsEqual'num'(LenVec($t21), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t13, $t12, $t23)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t13, $t12, $t21, $t3, $t23))) && $IsEqual'u8'(7, $t20))) || (($t22 && ((!$IsEqual'num'(LenVec($t21), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t13, $t12, $t23)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12)))) && $IsEqual'u8'(5, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume {:print "$at(11,36539,36753)"} true;
    assume {:print "$track_abort(29,30):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
L3:

    // @621 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    $1_DiemAccount_DiemAccount_$memory#621 := $1_DiemAccount_DiemAccount_$memory;

    // @622 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    $1_DiemAccount_Balance'#0'_$memory#622 := $1_DiemAccount_Balance'#0'_$memory;

    // modifies global<DiemAccount::Balance<#0>>($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t12, $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $t12);
    }

    // modifies global<DiemAccount::DiemAccount>($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t12, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t12);
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t12));
    }

    // assume exists<DiemAccount::DiemAccount>($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t12);

    // assume exists<DiemAccount::Balance<#0>>($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t12);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t12)), select DiemAccount::DiemAccount.withdraw_capability(global[@621]<DiemAccount::DiemAccount>($t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#621, $t12)));

    // assume Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>($t12)), select DiemAccount::DiemAccount.authentication_key(global[@621]<DiemAccount::DiemAccount>($t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#621, $t12)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t12)), select DiemAccount::DiemAccount.sent_events(global[@621]<DiemAccount::DiemAccount>($t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#621, $t12)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t12)), select DiemAccount::DiemAccount.received_events(global[@621]<DiemAccount::DiemAccount>($t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#621, $t12)));

    // assume Eq<u64>(DiemAccount::$balance<#0>($t12), Add(DiemAccount::$balance[@622]<#0>($t12), $t23)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t12), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#622, $t12) + $t23));

    // assume Identical($t28, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume ($t28 == $t25);

    // assume Identical($t29, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    assume ($t29 == $t24);

    // emit_event($t28, $t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t29, $t28);

    // opaque end: DiemAccount::deposit<#0>($t13, $t12, $t19, $t3, $t21, $t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:813:9+214

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:821:5+1
    assume {:print "$at(11,36759,36760)"} true;
L1:

    // assert Not(Not(exists[@609]<DiemAccount::Balance<#0>>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:372:9+71
    assume {:print "$at(11,16433,16504)"} true;
    assert {:msg "assert_failed(11,16433,16504): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#609, $1_Signer_spec_address_of($t1));

    // assert Not(Not(DiemAccount::$exists_at[@610](Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:373:9+55
    assume {:print "$at(11,16513,16568)"} true;
    assert {:msg "assert_failed(11,16513,16568): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#610, $1_Signer_spec_address_of($t1));

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:386:9+52
    assume {:print "$at(11,16976,17028)"} true;
    assert {:msg "assert_failed(11,16976,17028): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), Not(AccountLimits::spec_update_deposit_limits[@614, @615, @611]<#0>($t2, VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:392:9+238
    assume {:print "$at(11,17269,17507)"} true;
    assert {:msg "assert_failed(11,17269,17507): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $1_AccountLimits_Window'#0'_$memory#611, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1))));

    // assert Not(Not(DiemTimestamp::$is_operating[@614]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), Not(exists[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1)))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4079,4148)"} true;
    assert {:msg "assert_failed(5,4079,4148): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), Not(exists[@615]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1)))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:360:9+98
    assume {:print "$at(5,16437,16535)"} true;
    assert {:msg "assert_failed(5,16437,16535): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1))))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@614, @615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:370:9+102
    assume {:print "$at(5,16932,17034)"} true;
    assert {:msg "assert_failed(5,16932,17034): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@614, @615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+104
    assume {:print "$at(5,17043,17147)"} true;
    assert {:msg "assert_failed(5,17043,17147): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_start(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1)))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:291:9+102
    assume {:print "$at(5,13064,13166)"} true;
    assert {:msg "assert_failed(5,13064,13166): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Not(DiemTimestamp::$is_operating[@614]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614)));

    // assert Not(Not(Diem::spec_is_currency[@616]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#616);

    // assert Not(AccountFreezing::spec_account_is_frozen[@617](Signer::spec_address_of[]($t1))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:181:9+69
    assume {:print "$at(4,7220,7289)"} true;
    assert {:msg "assert_failed(4,7220,7289): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#617, $1_Signer_spec_address_of($t1));

    // assert Not(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1)), Gt(Add(DiemAccount::$balance[@609]<#0>(Signer::spec_address_of[]($t1)), $t2), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:378:9+81
    assume {:print "$at(11,16677,16758)"} true;
    assert {:msg "assert_failed(11,16677,16758): function does not abort under this condition"}
      !(!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#609, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64));

    // assert Not(Not(DiemAccount::$exists_at[@610](select DiemAccount::WithdrawCapability.account_address($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:635:9+55
    assume {:print "$at(11,28367,28422)"} true;
    assert {:msg "assert_failed(11,28367,28422): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#610, $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assert Not(Not(exists[@609]<DiemAccount::Balance<#0>>(select DiemAccount::WithdrawCapability.account_address($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:636:9+68
    assume {:print "$at(11,28431,28499)"} true;
    assert {:msg "assert_failed(11,28431,28499): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#609, $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assert Not(Not(DiemTimestamp::$is_operating[@614]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614);

    // assert Not(Not(Diem::spec_is_currency[@616]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#616);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@618]()), Not(AccountLimits::spec_update_withdrawal_limits[@614, @615, @611]<#0>($t2, VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:561:9+308
    assume {:print "$at(11,24943,25251)"} true;
    assert {:msg "assert_failed(11,24943,25251): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#618) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $1_AccountLimits_Window'#0'_$memory#611, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@609]<DiemAccount::Balance<#0>>(select DiemAccount::WithdrawCapability.account_address($t0)))), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:575:11+66
    assume {:print "$at(11,25561,25627)"} true;
    assert {:msg "assert_failed(11,25561,25627): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#609, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) < $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@614]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614);

    // assert Not(AccountFreezing::spec_account_is_frozen[@617](select DiemAccount::WithdrawCapability.account_address($t0))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:181:9+69
    assume {:print "$at(4,7220,7289)"} true;
    assert {:msg "assert_failed(4,7220,7289): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#617, $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), Not(exists[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0)))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4079,4148)"} true;
    assert {:msg "assert_failed(5,4079,4148): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), Not(exists[@615]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0)))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:444:9+96
    assume {:print "$at(5,20782,20878)"} true;
    assert {:msg "assert_failed(5,20782,20878): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0))))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@614, @615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), $t2), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:454:9+99
    assume {:print "$at(5,21264,21363)"} true;
    assert {:msg "assert_failed(5,21264,21363): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0))))) + $t2) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), Gt(Add(select AccountLimits::Window.window_start(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0)))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:291:9+102
    assume {:print "$at(5,13064,13166)"} true;
    assert {:msg "assert_failed(5,13064,13166): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), Not(DiemTimestamp::$is_operating[@614]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614)));

    // assert DiemAccount::$exists_at(select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:852:9+25
    assume {:print "$at(11,37727,37752)"} true;
    assert {:msg "assert_failed(11,37727,37752): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assert DiemAccount::$exists_at(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:853:9+25
    assume {:print "$at(11,37761,37786)"} true;
    assert {:msg "assert_failed(11,37761,37786): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1));

    // assert exists<DiemAccount::Balance<#0>>(select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:854:9+38
    assume {:print "$at(11,37795,37833)"} true;
    assert {:msg "assert_failed(11,37795,37833): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assert exists<DiemAccount::Balance<#0>>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:855:9+38
    assume {:print "$at(11,37842,37880)"} true;
    assert {:msg "assert_failed(11,37842,37880): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t1));

    // assert Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t0))), select DiemAccount::DiemAccount.withdraw_capability(global[@610]<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:856:9+122
    assume {:print "$at(11,37889,38011)"} true;
    assert {:msg "assert_failed(11,37889,38011): post-condition does not hold"}
      $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t0))), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#610, $account_address#$1_DiemAccount_WithdrawCapability($t0))));

    // assert Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t0))), select DiemAccount::DiemAccount.sent_events(global[@610]<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:858:9+149
    assume {:print "$at(11,38020,38169)"} true;
    assert {:msg "assert_failed(11,38020,38169): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t0))), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#610, $account_address#$1_DiemAccount_WithdrawCapability($t0))));

    // assert Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t0))), select DiemAccount::DiemAccount.received_events(global[@610]<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:860:9+157
    assume {:print "$at(11,38178,38335)"} true;
    assert {:msg "assert_failed(11,38178,38335): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t0))), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#610, $account_address#$1_DiemAccount_WithdrawCapability($t0))));

    // assert Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1))), select DiemAccount::DiemAccount.sent_events(global[@610]<DiemAccount::DiemAccount>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:862:9+149
    assume {:print "$at(11,38344,38493)"} true;
    assert {:msg "assert_failed(11,38344,38493): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#610, $1_Signer_spec_address_of($t1))));

    // assert Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1))), select DiemAccount::DiemAccount.received_events(global[@610]<DiemAccount::DiemAccount>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:864:9+157
    assume {:print "$at(11,38502,38659)"} true;
    assert {:msg "assert_failed(11,38502,38659): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#610, $1_Signer_spec_address_of($t1))));

    // assert Implies(Eq<address>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<#0>(select DiemAccount::WithdrawCapability.account_address($t0)), DiemAccount::$balance[@609]<#0>(select DiemAccount::WithdrawCapability.account_address($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:894:9+79
    assume {:print "$at(11,39724,39803)"} true;
    assert {:msg "assert_failed(11,39724,39803): post-condition does not hold"}
      ($IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t0)), $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#609, $account_address#$1_DiemAccount_WithdrawCapability($t0))));

    // assert Implies(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<#0>(select DiemAccount::WithdrawCapability.account_address($t0)), Sub(DiemAccount::$balance[@609]<#0>(select DiemAccount::WithdrawCapability.account_address($t0)), $t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:895:9+88
    assume {:print "$at(11,39812,39900)"} true;
    assert {:msg "assert_failed(11,39812,39900): post-condition does not hold"}
      (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t0)), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#609, $account_address#$1_DiemAccount_WithdrawCapability($t0)) - $t2)));

    // assert Implies(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<#0>(Signer::spec_address_of($t1)), Add(DiemAccount::$balance[@609]<#0>(Signer::spec_address_of[]($t1)), $t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:896:9+88
    assume {:print "$at(11,39909,39997)"} true;
    assert {:msg "assert_failed(11,39909,39997): post-condition does not hold"}
      (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t1)), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#609, $1_Signer_spec_address_of($t1)) + $t2)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@610](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@610]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#610, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#610, addr)))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t8, $t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:415:9+20
    assume {:print "$at(11,18116,18136)"} true;
    assert {:msg "assert_failed(11,18116,18136): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t7, $t8); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t8, $t7), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+20
    assume {:print "$at(11,29317,29337)"} true;
    assert {:msg "assert_failed(11,29317,29337): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t7, $t8), $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t8, $t7), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:831:5+206
    assume {:print "$at(11,36992,37198)"} true;
    assert {:msg "assert_failed(11,36992,37198): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t7, $t8), $t10, $t11); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:831:5+206
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:821:5+1
    assume {:print "$at(11,36759,36760)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@609]<DiemAccount::Balance<#0>>(Signer::spec_address_of[]($t1))), Not(DiemAccount::$exists_at[@610](Signer::spec_address_of[]($t1)))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), Not(AccountLimits::spec_update_deposit_limits[@614, @615, @611]<#0>($t2, VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1)))))), Not(DiemTimestamp::$is_operating[@614]())), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), Not(exists[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1)))))), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), Not(exists[@615]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1)))))))), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@614, @615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@614, @615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_start(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1)))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Not(DiemTimestamp::$is_operating[@614]())))), Not(Diem::spec_is_currency[@616]<#0>())), AccountFreezing::spec_account_is_frozen[@617](Signer::spec_address_of[]($t1))), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1)), Gt(Add(DiemAccount::$balance[@609]<#0>(Signer::spec_address_of[]($t1)), $t2), MaxU64()))), Not(DiemAccount::$exists_at[@610](select DiemAccount::WithdrawCapability.account_address($t0)))), Not(exists[@609]<DiemAccount::Balance<#0>>(select DiemAccount::WithdrawCapability.account_address($t0)))), Not(DiemTimestamp::$is_operating[@614]())), Not(Diem::spec_is_currency[@616]<#0>())), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@618]()), Not(AccountLimits::spec_update_withdrawal_limits[@614, @615, @611]<#0>($t2, VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@609]<DiemAccount::Balance<#0>>(select DiemAccount::WithdrawCapability.account_address($t0)))), $t2)), Not(DiemTimestamp::$is_operating[@614]())), AccountFreezing::spec_account_is_frozen[@617](select DiemAccount::WithdrawCapability.account_address($t0))), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), Not(exists[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0)))))), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), Not(exists[@615]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0)))))))), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@614, @615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), Gt(Add(select AccountLimits::Window.window_start(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0)))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), Not(DiemTimestamp::$is_operating[@614]())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:831:5+206
    assume {:print "$at(11,36992,37198)"} true;
    assert {:msg "assert_failed(11,36992,37198): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#609, $1_Signer_spec_address_of($t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#610, $1_Signer_spec_address_of($t1))) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $1_AccountLimits_Window'#0'_$memory#611, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1))))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1))))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#616)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#617, $1_Signer_spec_address_of($t1))) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#609, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#610, $account_address#$1_DiemAccount_WithdrawCapability($t0))) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#609, $account_address#$1_DiemAccount_WithdrawCapability($t0))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#616)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#618) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $1_AccountLimits_Window'#0'_$memory#611, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))))) || ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#609, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#617, $account_address#$1_DiemAccount_WithdrawCapability($t0))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0))))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0))))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@609]<DiemAccount::Balance<#0>>(Signer::spec_address_of[]($t1))), Eq(7, $t20)), And(Not(DiemAccount::$exists_at[@610](Signer::spec_address_of[]($t1))), Eq(5, $t20))), And(Eq<u64>($t2, 0), Eq(7, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), Not(AccountLimits::spec_update_deposit_limits[@614, @615, @611]<#0>($t2, VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Eq(8, $t20))), And(Not(DiemTimestamp::$is_operating[@614]()), Eq(1, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), Not(exists[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), Not(exists[@615]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@614, @615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), $t2), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@614, @615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), $t2), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_start(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1)))))), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](Signer::spec_address_of[]($t1))))), Not(DiemTimestamp::$is_operating[@614]()))), Eq(1, $t20))), And(Not(Diem::spec_is_currency[@616]<#0>()), Eq(5, $t20))), And(AccountFreezing::spec_account_is_frozen[@617](Signer::spec_address_of[]($t1)), Eq(1, $t20))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1)), Gt(Add(DiemAccount::$balance[@609]<#0>(Signer::spec_address_of[]($t1)), $t2), MaxU64())), Eq(8, $t20))), And(Not(DiemAccount::$exists_at[@610](select DiemAccount::WithdrawCapability.account_address($t0))), Eq(5, $t20))), And(Not(exists[@609]<DiemAccount::Balance<#0>>(select DiemAccount::WithdrawCapability.account_address($t0))), Eq(5, $t20))), And(Not(DiemTimestamp::$is_operating[@614]()), Eq(1, $t20))), And(Not(Diem::spec_is_currency[@616]<#0>()), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@618]()), Not(AccountLimits::spec_update_withdrawal_limits[@614, @615, @611]<#0>($t2, VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0)))))), Eq(8, $t20))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@609]<DiemAccount::Balance<#0>>(select DiemAccount::WithdrawCapability.account_address($t0)))), $t2), Eq(8, $t20))), And(Not(DiemTimestamp::$is_operating[@614]()), Eq(1, $t20))), And(AccountFreezing::spec_account_is_frozen[@617](select DiemAccount::WithdrawCapability.account_address($t0)), Eq(1, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), Not(exists[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), Not(exists[@615]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@614, @615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), $t2), 18446744073709551615))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), Gt(Add(select AccountLimits::Window.window_start(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0)))))), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account[@611, @612, @613]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@615]<#0>(global[@611]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@612, @613](select DiemAccount::WithdrawCapability.account_address($t0))))), Not(DiemTimestamp::$is_operating[@614]()))), Eq(1, $t20))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:831:5+206
    assert {:msg "assert_failed(11,36992,37198): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#609, $1_Signer_spec_address_of($t1)) && $IsEqual'u8'(7, $t20)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#610, $1_Signer_spec_address_of($t1)) && $IsEqual'u8'(5, $t20))) || ($IsEqual'u64'($t2, 0) && $IsEqual'u8'(7, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $1_AccountLimits_Window'#0'_$memory#611, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && $IsEqual'u8'(8, $t20))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614) && $IsEqual'u8'(1, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))))) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))))) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614))) && $IsEqual'u8'(1, $t20))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#616) && $IsEqual'u8'(5, $t20))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#617, $1_Signer_spec_address_of($t1)) && $IsEqual'u8'(1, $t20))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#609, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64)) && $IsEqual'u8'(8, $t20))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#610, $account_address#$1_DiemAccount_WithdrawCapability($t0)) && $IsEqual'u8'(5, $t20))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#609, $account_address#$1_DiemAccount_WithdrawCapability($t0)) && $IsEqual'u8'(5, $t20))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614) && $IsEqual'u8'(1, $t20))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#616) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#618) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $1_AccountLimits_Window'#0'_$memory#611, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0))))) && $IsEqual'u8'(8, $t20))) || (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#609, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) < $t2) && $IsEqual'u8'(8, $t20))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614) && $IsEqual'u8'(1, $t20))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#617, $account_address#$1_DiemAccount_WithdrawCapability($t0)) && $IsEqual'u8'(1, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))))) && $IsEqual'u8'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614, $1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0))))) + $t2) > 18446744073709551615))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))))) > $MAX_U64))) && $IsEqual'u8'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0), $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#615, $ResourceValue($1_AccountLimits_Window'#0'_$memory#611, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#612, $1_VASP_ParentVASP_$memory#613, $account_address#$1_DiemAccount_WithdrawCapability($t0)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#614))) && $IsEqual'u8'(1, $t20)));

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:831:5+206
    $abort_code := $t20;
    $abort_flag := true;
    return;

}

// fun DiemAccount::pay_from [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
procedure {:timeLimit 40} $1_DiemAccount_pay_from$verify(_$t0: $1_DiemAccount_WithdrawCapability, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: Vec (int)) returns ()
{
    // declare local variables
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t9: $1_DiemAccount_ReceivedPaymentEvent;
    var $t10: int;
    var $t11: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t12: $1_DiemAccount_SentPaymentEvent;
    var $t13: $1_FixedPoint32_FixedPoint32;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t19: $1_DiemAccount_SentPaymentEvent;
    var $t20: $1_Diem_Diem'#0';
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t25: $1_DiemAccount_ReceivedPaymentEvent;
    var $t26: $1_FixedPoint32_FixedPoint32;
    var $t27: bool;
    var $t28: $1_DiemAccount_ReceivedPaymentEvent;
    var $t29: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t0: $1_DiemAccount_WithdrawCapability;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $1_DiemAccount_Balance'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_Balance'#0'_$memory#593: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#594: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'#0'_$memory#595: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#596: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#597: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#599: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#600: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_AccountFreezing_FreezingBit_$memory#601: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#602: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DualAttestation_Limit_$memory#603: $Memory $1_DualAttestation_Limit;
    var $1_DualAttestation_Credential_$memory#604: $Memory $1_DualAttestation_Credential;
    var $1_DiemAccount_DiemAccount_$memory#607: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#608: $Memory $1_DiemAccount_Balance'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,35420,35897)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:234:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume $IsValid'vec'u8''($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+477
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t5, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:826:9+32
    assume {:print "$at(11,36814,36846)"} true;
    assume ($t5 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t6, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:631:9+32
    assume {:print "$at(11,28125,28157)"} true;
    assume ($t6 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t7, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:903:9+32
    assume {:print "$at(11,40158,40190)"} true;
    assume ($t7 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t8, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:408:9+56
    assume {:print "$at(11,17877,17933)"} true;
    assume ($t8 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t9, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t7, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:409:9+165
    assume {:print "$at(11,17942,18107)"} true;
    assume ($t9 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t7, $t3));

    // assume Identical($t10, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:650:9+32
    assume {:print "$at(11,29045,29077)"} true;
    assume ($t10 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t11, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:651:9+52
    assume {:print "$at(11,29086,29138)"} true;
    assume ($t11 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t10)));

    // assume Identical($t12, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:652:9+161
    assume {:print "$at(11,29147,29308)"} true;
    assume ($t12 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $t3));

    // assume Identical($t13, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1377:9+59
    assume {:print "$at(10,65833,65892)"} true;
    assume ($t13 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume CanModify<DiemAccount::DiemAccount>($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:846:9+36
    assume {:print "$at(11,37363,37399)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t5];

    // assume CanModify<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:847:9+36
    assume {:print "$at(11,37408,37444)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t1];

    // assume CanModify<DiemAccount::Balance<#0>>($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:848:9+39
    assume {:print "$at(11,37453,37492)"} true;
    assume $1_DiemAccount_Balance'#0'_$modifies[$t5];

    // assume CanModify<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:849:9+39
    assume {:print "$at(11,37501,37540)"} true;
    assume $1_DiemAccount_Balance'#0'_$modifies[$t1];

    // assume CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t5)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:850:9+80
    assume {:print "$at(11,37549,37629)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t5)];

    // assume CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    assume {:print "$at(11,37638,37718)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)];

    // @598 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @600 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_Diem_CurrencyInfo'#0'_$memory#600 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @599 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_AccountLimits_LimitsDefinition'#0'_$memory#599 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @595 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_AccountLimits_Window'#0'_$memory#595 := $1_AccountLimits_Window'#0'_$memory;

    // @596 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_VASP_ChildVASP_$memory#596 := $1_VASP_ChildVASP_$memory;

    // @597 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_VASP_ParentVASP_$memory#597 := $1_VASP_ParentVASP_$memory;

    // @604 := save_mem(DualAttestation::Credential) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_DualAttestation_Credential_$memory#604 := $1_DualAttestation_Credential_$memory;

    // @603 := save_mem(DualAttestation::Limit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_DualAttestation_Limit_$memory#603 := $1_DualAttestation_Limit_$memory;

    // @601 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_AccountFreezing_FreezingBit_$memory#601 := $1_AccountFreezing_FreezingBit_$memory;

    // @594 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_DiemAccount_DiemAccount_$memory#594 := $1_DiemAccount_DiemAccount_$memory;

    // @602 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_DiemAccount_AccountOperationsCapability_$memory#602 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @593 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:851:9+80
    $1_DiemAccount_Balance'#0'_$memory#593 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+1
    assume {:print "$at(11,35420,35421)"} true;
    assume {:print "$track_local(29,31,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+1
    assume {:print "$track_local(29,31,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+1
    assume {:print "$track_local(29,31,2):", $t2} $t2 == $t2;

    // trace_local[metadata]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+1
    assume {:print "$track_local(29,31,3):", $t3} $t3 == $t3;

    // trace_local[metadata_signature]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:785:5+1
    assume {:print "$track_local(29,31,4):", $t4} $t4 == $t4;

    // $t14 := get_field<DiemAccount::WithdrawCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:793:14+20
    assume {:print "$at(11,35707,35727)"} true;
    $t14 := $account_address#$1_DiemAccount_WithdrawCapability($t0);

    // assume Identical($t15, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:611:9+32
    assume {:print "$at(11,27036,27068)"} true;
    assume ($t15 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t16, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:631:9+32
    assume {:print "$at(11,28125,28157)"} true;
    assume ($t16 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t17, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:650:9+32
    assume {:print "$at(11,29045,29077)"} true;
    assume ($t17 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t18, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t17))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:651:9+52
    assume {:print "$at(11,29086,29138)"} true;
    assume ($t18 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t17)));

    // assume Identical($t19, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:652:9+161
    assume {:print "$at(11,29147,29308)"} true;
    assume ($t19 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $t3));

    // assert CanModify<DiemAccount::Balance<#0>>($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:795:13+48
    assume {:print "$at(11,35760,35808)"} true;
    assert {:msg "assert_failed(11,35760,35808): caller does not have permission to modify `DiemAccount::Balance<#0>` at given address"}
      $1_DiemAccount_Balance'#0'_$modifies[$t15];

    // assert CanModify<DiemAccount::DiemAccount>($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:795:13+48
    assert {:msg "assert_failed(11,35760,35808): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t15];

    // assert CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:795:13+48
    assert {:msg "assert_failed(11,35760,35808): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t15)];

    // $t20 := DiemAccount::withdraw_from<#0>($t0, $t1, $t2, $t3) on_abort goto L2 with $t21 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:795:13+48
    call $t20 := $1_DiemAccount_withdraw_from'#0'($t0, $t1, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(11,35760,35808)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(29,31):", $t21} $t21 == $t21;
        goto L2;
    }

    // $t22 := true at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:798:13+4
    assume {:print "$at(11,35876,35880)"} true;
    $t22 := true;
    assume $IsValid'bool'($t22);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    // >> opaque call: DiemAccount::deposit<#0>($t5, $t1, $t6, $t3, $t4, $t7)
    assume {:print "$at(11,35678,35890)"} true;

    // assume Identical($t23, select Diem::Diem.value($t20)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:358:9+30
    assume {:print "$at(11,15804,15834)"} true;
    assume ($t23 == $value#$1_Diem_Diem'#0'($t20));

    // assume Identical($t24, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:408:9+56
    assume {:print "$at(11,17877,17933)"} true;
    assume ($t24 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t25, pack DiemAccount::ReceivedPaymentEvent($t23, Diem::spec_currency_code<#0>(), $t14, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:409:9+165
    assume {:print "$at(11,17942,18107)"} true;
    assume ($t25 == $1_DiemAccount_ReceivedPaymentEvent($t23, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t14, $t3));

    // assume Identical($t26, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1377:9+59
    assume {:print "$at(10,65833,65892)"} true;
    assume ($t26 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert CanModify<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume {:print "$at(11,35678,35890)"} true;
    assert {:msg "assert_failed(11,35678,35890): caller does not have permission to modify `DiemAccount::Balance<#0>` at given address"}
      $1_DiemAccount_Balance'#0'_$modifies[$t1];

    // assert CanModify<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assert {:msg "assert_failed(11,35678,35890): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t1];

    // assert CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assert {:msg "assert_failed(11,35678,35890): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)];

    // opaque begin: DiemAccount::deposit<#0>($t14, $t1, $t20, $t3, $t4, $t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212

    // assume Identical($t27, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<#0>>($t1)), Not(DiemAccount::$exists_at($t1))), Eq<u64>($t23, 0)), And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t23, VASP::spec_parent_address($t1))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t23), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t23), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<#0>())), AccountFreezing::spec_account_is_frozen($t1)), Gt(Add(DiemAccount::$balance<#0>($t1), $t23), MaxU64())), And($t22, And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published())))), And($t22, And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency<#0>())))), And($t22, And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64($t23, $t26), 18446744073709551615)))), And($t22, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t14, $t1, $t23)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))))), And($t22, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t14, $t1, $t23)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))))), And($t22, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t14, $t1, $t23)), Not(DualAttestation::spec_signature_is_valid($t14, $t1, $t4, $t3, $t23))))), And($t22, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t14, $t1, $t23)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1))))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume ($t27 == ((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1)) || $IsEqual'u64'($t23, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t23, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t23) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t23) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1)) || (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1) + $t23) > $MAX_U64)) || ($t22 && ($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)))) || ($t22 && ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)))) || ($t22 && ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t23, $t26) > 18446744073709551615)))) || ($t22 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t14, $t1, $t23)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($t22 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t14, $t1, $t23)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($t22 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t14, $t1, $t23)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t14, $t1, $t4, $t3, $t23)))) || ($t22 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t14, $t1, $t23)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))));

    // if ($t27) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    if ($t27) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
L4:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<#0>>($t1)), Eq(7, $t21)), And(Not(DiemAccount::$exists_at($t1)), Eq(5, $t21))), And(Eq<u64>($t23, 0), Eq(7, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t23, VASP::spec_parent_address($t1)))), Eq(8, $t21))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))))), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t23), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t23), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t14, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t21))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t21))), And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t21))), And(Gt(Add(DiemAccount::$balance<#0>($t1), $t23), MaxU64()), Eq(8, $t21))), And(And($t22, And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published()))), Eq(5, $t21))), And(And($t22, And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency<#0>()))), Eq(5, $t21))), And(And($t22, And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64($t23, $t26), 18446744073709551615))), Eq(8, $t21))), And(And($t22, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t14, $t1, $t23)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), Eq(1, $t21))), And(And($t22, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t14, $t1, $t23)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), Eq(1, $t21))), And(And($t22, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t14, $t1, $t23)), Not(DualAttestation::spec_signature_is_valid($t14, $t1, $t4, $t3, $t23)))), Eq(7, $t21))), And(And($t22, And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t14, $t1, $t23)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1))))), Eq(5, $t21))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume (((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1) && $IsEqual'u8'(7, $t21)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1) && $IsEqual'u8'(5, $t21))) || ($IsEqual'u64'($t23, 0) && $IsEqual'u8'(7, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t23, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'u8'(8, $t21))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'u8'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'u8'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t23) > $MAX_U64))) && $IsEqual'u8'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t23) > $MAX_U64))) && $IsEqual'u8'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64))) && $IsEqual'u8'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'u8'(1, $t21))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t21))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'u8'(1, $t21))) || ((($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1) + $t23) > $MAX_U64) && $IsEqual'u8'(8, $t21))) || (($t22 && ($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) && $IsEqual'u8'(5, $t21))) || (($t22 && ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))) && $IsEqual'u8'(5, $t21))) || (($t22 && ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t23, $t26) > 18446744073709551615))) && $IsEqual'u8'(8, $t21))) || (($t22 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t14, $t1, $t23)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'u8'(1, $t21))) || (($t22 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t14, $t1, $t23)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'u8'(1, $t21))) || (($t22 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t14, $t1, $t23)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t14, $t1, $t4, $t3, $t23))) && $IsEqual'u8'(7, $t21))) || (($t22 && ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t14, $t1, $t23)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'u8'(5, $t21)));

    // trace_abort($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume {:print "$at(11,35678,35890)"} true;
    assume {:print "$track_abort(29,31):", $t21} $t21 == $t21;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
L3:

    // @607 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    $1_DiemAccount_DiemAccount_$memory#607 := $1_DiemAccount_DiemAccount_$memory;

    // @608 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    $1_DiemAccount_Balance'#0'_$memory#608 := $1_DiemAccount_Balance'#0'_$memory;

    // modifies global<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t1, $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $t1);
    }

    // modifies global<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t1, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t1);
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));
    }

    // assume exists<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t1);

    // assume exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.withdraw_capability(global[@607]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#607, $t1)));

    // assume Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.authentication_key(global[@607]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#607, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@607]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#607, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@607]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#607, $t1)));

    // assume Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@608]<#0>($t1), $t23)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#608, $t1) + $t23));

    // assume Identical($t28, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume ($t28 == $t25);

    // assume Identical($t29, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    assume ($t29 == $t24);

    // emit_event($t28, $t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t29, $t28);

    // opaque end: DiemAccount::deposit<#0>($t14, $t1, $t20, $t3, $t4, $t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:792:9+212

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:800:5+1
    assume {:print "$at(11,35896,35897)"} true;
L1:

    // assert Not(Not(exists[@593]<DiemAccount::Balance<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:372:9+71
    assume {:print "$at(11,16433,16504)"} true;
    assert {:msg "assert_failed(11,16433,16504): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#593, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@594]($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:373:9+55
    assume {:print "$at(11,16513,16568)"} true;
    assert {:msg "assert_failed(11,16513,16568): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#594, $t1);

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:386:9+52
    assume {:print "$at(11,16976,17028)"} true;
    assert {:msg "assert_failed(11,16976,17028): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@598, @599, @595]<#0>($t2, VASP::spec_parent_address[@596, @597]($t1))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:392:9+238
    assume {:print "$at(11,17269,17507)"} true;
    assert {:msg "assert_failed(11,17269,17507): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $1_AccountLimits_Window'#0'_$memory#595, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)));

    // assert Not(Not(DiemTimestamp::$is_operating[@598]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), Not(exists[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4079,4148)"} true;
    assert {:msg "assert_failed(5,4079,4148): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), Not(exists[@599]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:360:9+98
    assume {:print "$at(5,16437,16535)"} true;
    assert {:msg "assert_failed(5,16437,16535): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@598, @599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:370:9+102
    assume {:print "$at(5,16932,17034)"} true;
    assert {:msg "assert_failed(5,16932,17034): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@598, @599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+104
    assume {:print "$at(5,17043,17147)"} true;
    assert {:msg "assert_failed(5,17043,17147): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:291:9+102
    assume {:print "$at(5,13064,13166)"} true;
    assert {:msg "assert_failed(5,13064,13166): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Not(DiemTimestamp::$is_operating[@598]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598)));

    // assert Not(Not(Diem::spec_is_currency[@600]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#600);

    // assert Not(AccountFreezing::spec_account_is_frozen[@601]($t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:181:9+69
    assume {:print "$at(4,7220,7289)"} true;
    assert {:msg "assert_failed(4,7220,7289): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#601, $t1);

    // assert Not(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t0), $t1), Gt(Add(DiemAccount::$balance[@593]<#0>($t1), $t2), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:378:9+81
    assume {:print "$at(11,16677,16758)"} true;
    assert {:msg "assert_failed(11,16677,16758): function does not abort under this condition"}
      !(!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t0), $t1) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#593, $t1) + $t2) > $MAX_U64));

    // assert Not(Not(DiemAccount::$exists_at[@594]($t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:635:9+55
    assume {:print "$at(11,28367,28422)"} true;
    assert {:msg "assert_failed(11,28367,28422): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#594, $t6);

    // assert Not(Not(exists[@593]<DiemAccount::Balance<#0>>($t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:636:9+68
    assume {:print "$at(11,28431,28499)"} true;
    assert {:msg "assert_failed(11,28431,28499): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#593, $t6);

    // assert Not(Not(DiemTimestamp::$is_operating[@598]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598);

    // assert Not(Not(Diem::spec_is_currency[@600]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#600);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@602]()), Not(AccountLimits::spec_update_withdrawal_limits[@598, @599, @595]<#0>($t2, VASP::spec_parent_address[@596, @597]($t6)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:561:9+308
    assume {:print "$at(11,24943,25251)"} true;
    assert {:msg "assert_failed(11,24943,25251): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#602) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $1_AccountLimits_Window'#0'_$memory#595, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@593]<DiemAccount::Balance<#0>>($t6))), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:575:11+66
    assume {:print "$at(11,25561,25627)"} true;
    assert {:msg "assert_failed(11,25561,25627): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#593, $t6))) < $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@598]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598);

    // assert Not(AccountFreezing::spec_account_is_frozen[@601]($t6)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:181:9+69
    assume {:print "$at(4,7220,7289)"} true;
    assert {:msg "assert_failed(4,7220,7289): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#601, $t6);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), Not(exists[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4079,4148)"} true;
    assert {:msg "assert_failed(5,4079,4148): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), Not(exists[@599]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:444:9+96
    assume {:print "$at(5,20782,20878)"} true;
    assert {:msg "assert_failed(5,20782,20878): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@598, @599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), $t2), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:454:9+99
    assume {:print "$at(5,21264,21363)"} true;
    assert {:msg "assert_failed(5,21264,21363): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6)))) + $t2) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), Gt(Add(select AccountLimits::Window.window_start(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:291:9+102
    assume {:print "$at(5,13064,13166)"} true;
    assert {:msg "assert_failed(5,13064,13166): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), Not(DiemTimestamp::$is_operating[@598]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598)));

    // assert Not(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@603]()))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:336:9+58
    assume {:print "$at(21,14585,14643)"} true;
    assert {:msg "assert_failed(21,14585,14643): function does not abort under this condition"}
      !($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#603));

    // assert Not(And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@600]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#600));

    // assert Not(And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t2, $t13), 18446744073709551615))) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:77:9+83
    assume {:print "$at(42,3513,3596)"} true;
    assert {:msg "assert_failed(42,3513,3596): function does not abort under this condition"}
      !($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t13) > 18446744073709551615));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@600, @596, @597, @603]<#0>($t5, $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@604](DualAttestation::spec_credential_address[@596, @597]($t1))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:419:9+114
    assume {:print "$at(21,18345,18459)"} true;
    assert {:msg "assert_failed(21,18345,18459): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#600, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Limit_$memory#603, $t5, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#604, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@600, @596, @597, @603]<#0>($t5, $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@604](DualAttestation::spec_credential_address[@596, @597]($t1))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:420:9+101
    assume {:print "$at(21,18468,18569)"} true;
    assert {:msg "assert_failed(21,18468,18569): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#600, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Limit_$memory#603, $t5, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#604, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@600, @596, @597, @603]<#0>($t5, $t1, $t2)), Not(DualAttestation::spec_signature_is_valid[@596, @597, @604]($t5, $t1, $t4, $t3, $t2)))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:421:9+136
    assume {:print "$at(21,18578,18714)"} true;
    assert {:msg "assert_failed(21,18578,18714): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#600, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Limit_$memory#603, $t5, $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Credential_$memory#604, $t5, $t1, $t4, $t3, $t2));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@600, @596, @597, @603]<#0>($t5, $t1, $t2)), Not(DualAttestation::spec_has_credential[@604](DualAttestation::spec_credential_address[@596, @597]($t1))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:153:9+64
    assume {:print "$at(21,6882,6946)"} true;
    assert {:msg "assert_failed(21,6882,6946): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#600, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Limit_$memory#603, $t5, $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#604, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)));

    // assert DiemAccount::$exists_at($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:852:9+25
    assume {:print "$at(11,37727,37752)"} true;
    assert {:msg "assert_failed(11,37727,37752): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t5);

    // assert DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:853:9+25
    assume {:print "$at(11,37761,37786)"} true;
    assert {:msg "assert_failed(11,37761,37786): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert exists<DiemAccount::Balance<#0>>($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:854:9+38
    assume {:print "$at(11,37795,37833)"} true;
    assert {:msg "assert_failed(11,37795,37833): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t5);

    // assert exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:855:9+38
    assume {:print "$at(11,37842,37880)"} true;
    assert {:msg "assert_failed(11,37842,37880): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // assert Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t5)), select DiemAccount::DiemAccount.withdraw_capability(global[@594]<DiemAccount::DiemAccount>($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:856:9+122
    assume {:print "$at(11,37889,38011)"} true;
    assert {:msg "assert_failed(11,37889,38011): post-condition does not hold"}
      $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t5)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#594, $t5)));

    // assert Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t5)), select DiemAccount::DiemAccount.sent_events(global[@594]<DiemAccount::DiemAccount>($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:858:9+149
    assume {:print "$at(11,38020,38169)"} true;
    assert {:msg "assert_failed(11,38020,38169): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t5)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#594, $t5)));

    // assert Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t5)), select DiemAccount::DiemAccount.received_events(global[@594]<DiemAccount::DiemAccount>($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:860:9+157
    assume {:print "$at(11,38178,38335)"} true;
    assert {:msg "assert_failed(11,38178,38335): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t5)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#594, $t5)));

    // assert Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@594]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:862:9+149
    assume {:print "$at(11,38344,38493)"} true;
    assert {:msg "assert_failed(11,38344,38493): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#594, $t1)));

    // assert Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@594]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:864:9+157
    assume {:print "$at(11,38502,38659)"} true;
    assert {:msg "assert_failed(11,38502,38659): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#594, $t1)));

    // assert Implies(Eq<address>($t6, $t1), Eq<u64>(DiemAccount::$balance<#0>($t6), DiemAccount::$balance[@593]<#0>($t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:894:9+79
    assume {:print "$at(11,39724,39803)"} true;
    assert {:msg "assert_failed(11,39724,39803): post-condition does not hold"}
      ($IsEqual'address'($t6, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t6), $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#593, $t6)));

    // assert Implies(Neq<address>($t6, $t1), Eq<u64>(DiemAccount::$balance<#0>($t6), Sub(DiemAccount::$balance[@593]<#0>($t6), $t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:895:9+88
    assume {:print "$at(11,39812,39900)"} true;
    assert {:msg "assert_failed(11,39812,39900): post-condition does not hold"}
      (!$IsEqual'address'($t6, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t6), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#593, $t6) - $t2)));

    // assert Implies(Neq<address>($t6, $t1), Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@593]<#0>($t1), $t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:896:9+88
    assume {:print "$at(11,39909,39997)"} true;
    assert {:msg "assert_failed(11,39909,39997): post-condition does not hold"}
      (!$IsEqual'address'($t6, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#593, $t1) + $t2)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@594](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@594]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#594, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#594, addr)))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t9, $t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:415:9+20
    assume {:print "$at(11,18116,18136)"} true;
    assert {:msg "assert_failed(11,18116,18136): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t9, $t8), $t12, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+20
    assume {:print "$at(11,29317,29337)"} true;
    assert {:msg "assert_failed(11,29317,29337): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9), $t11, $t12); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t9, $t8), $t12, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:823:5+220
    assume {:print "$at(11,36766,36986)"} true;
    assert {:msg "assert_failed(11,36766,36986): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9), $t11, $t12); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:823:5+220
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:800:5+1
    assume {:print "$at(11,35896,35897)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@593]<DiemAccount::Balance<#0>>($t1)), Not(DiemAccount::$exists_at[@594]($t1))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@598, @599, @595]<#0>($t2, VASP::spec_parent_address[@596, @597]($t1))))), Not(DiemTimestamp::$is_operating[@598]())), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), Not(exists[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1))))), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), Not(exists[@599]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1))))))), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@598, @599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@598, @599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Not(DiemTimestamp::$is_operating[@598]())))), Not(Diem::spec_is_currency[@600]<#0>())), AccountFreezing::spec_account_is_frozen[@601]($t1)), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t0), $t1), Gt(Add(DiemAccount::$balance[@593]<#0>($t1), $t2), MaxU64()))), Not(DiemAccount::$exists_at[@594]($t6))), Not(exists[@593]<DiemAccount::Balance<#0>>($t6))), Not(DiemTimestamp::$is_operating[@598]())), Not(Diem::spec_is_currency[@600]<#0>())), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@602]()), Not(AccountLimits::spec_update_withdrawal_limits[@598, @599, @595]<#0>($t2, VASP::spec_parent_address[@596, @597]($t6)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@593]<DiemAccount::Balance<#0>>($t6))), $t2)), Not(DiemTimestamp::$is_operating[@598]())), AccountFreezing::spec_account_is_frozen[@601]($t6)), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), Not(exists[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6))))), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), Not(exists[@599]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6))))))), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@598, @599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), Gt(Add(select AccountLimits::Window.window_start(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), Not(DiemTimestamp::$is_operating[@598]())))), And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@603]()))), And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@600]<#0>()))), And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t2, $t13), 18446744073709551615))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@600, @596, @597, @603]<#0>($t5, $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@604](DualAttestation::spec_credential_address[@596, @597]($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@600, @596, @597, @603]<#0>($t5, $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@604](DualAttestation::spec_credential_address[@596, @597]($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@600, @596, @597, @603]<#0>($t5, $t1, $t2)), Not(DualAttestation::spec_signature_is_valid[@596, @597, @604]($t5, $t1, $t4, $t3, $t2)))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@600, @596, @597, @603]<#0>($t5, $t1, $t2)), Not(DualAttestation::spec_has_credential[@604](DualAttestation::spec_credential_address[@596, @597]($t1))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:823:5+220
    assume {:print "$at(11,36766,36986)"} true;
    assert {:msg "assert_failed(11,36766,36986): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#593, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#594, $t1)) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $1_AccountLimits_Window'#0'_$memory#595, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#600)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#601, $t1)) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t0), $t1) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#593, $t1) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#594, $t6)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#593, $t6)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#600)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#602) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $1_AccountLimits_Window'#0'_$memory#595, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))))) || ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#593, $t6))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#601, $t6)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598)))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#603))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#600))) || ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t13) > 18446744073709551615))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#600, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Limit_$memory#603, $t5, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#604, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#600, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Limit_$memory#603, $t5, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#604, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#600, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Limit_$memory#603, $t5, $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Credential_$memory#604, $t5, $t1, $t4, $t3, $t2))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#600, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Limit_$memory#603, $t5, $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#604, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@593]<DiemAccount::Balance<#0>>($t1)), Eq(7, $t21)), And(Not(DiemAccount::$exists_at[@594]($t1)), Eq(5, $t21))), And(Eq<u64>($t2, 0), Eq(7, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@598, @599, @595]<#0>($t2, VASP::spec_parent_address[@596, @597]($t1)))), Eq(8, $t21))), And(Not(DiemTimestamp::$is_operating[@598]()), Eq(1, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), Not(exists[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), Not(exists[@599]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))))), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@598, @599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), $t2), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@598, @599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), $t2), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1))))), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>(select DiemAccount::WithdrawCapability.account_address($t0), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t1)))), Not(DiemTimestamp::$is_operating[@598]()))), Eq(1, $t21))), And(Not(Diem::spec_is_currency[@600]<#0>()), Eq(5, $t21))), And(AccountFreezing::spec_account_is_frozen[@601]($t1), Eq(1, $t21))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t0), $t1), Gt(Add(DiemAccount::$balance[@593]<#0>($t1), $t2), MaxU64())), Eq(8, $t21))), And(Not(DiemAccount::$exists_at[@594]($t6)), Eq(5, $t21))), And(Not(exists[@593]<DiemAccount::Balance<#0>>($t6)), Eq(5, $t21))), And(Not(DiemTimestamp::$is_operating[@598]()), Eq(1, $t21))), And(Not(Diem::spec_is_currency[@600]<#0>()), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@602]()), Not(AccountLimits::spec_update_withdrawal_limits[@598, @599, @595]<#0>($t2, VASP::spec_parent_address[@596, @597]($t6))))), Eq(8, $t21))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@593]<DiemAccount::Balance<#0>>($t6))), $t2), Eq(8, $t21))), And(Not(DiemTimestamp::$is_operating[@598]()), Eq(1, $t21))), And(AccountFreezing::spec_account_is_frozen[@601]($t6), Eq(1, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), Not(exists[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), Not(exists[@599]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))))), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@598, @599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), $t2), 18446744073709551615))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), Gt(Add(select AccountLimits::Window.window_start(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6))))), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@595, @596, @597]<#0>($t6, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@599]<#0>(global[@595]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@596, @597]($t6)))), Not(DiemTimestamp::$is_operating[@598]()))), Eq(1, $t21))), And(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@603]())), Eq(5, $t21))), And(And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@600]<#0>())), Eq(5, $t21))), And(And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t2, $t13), 18446744073709551615)), Eq(8, $t21))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@600, @596, @597, @603]<#0>($t5, $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@604](DualAttestation::spec_credential_address[@596, @597]($t1)))), Eq(1, $t21))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@600, @596, @597, @603]<#0>($t5, $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@604](DualAttestation::spec_credential_address[@596, @597]($t1)))), Eq(1, $t21))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@600, @596, @597, @603]<#0>($t5, $t1, $t2)), Not(DualAttestation::spec_signature_is_valid[@596, @597, @604]($t5, $t1, $t4, $t3, $t2))), Eq(7, $t21))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@600, @596, @597, @603]<#0>($t5, $t1, $t2)), Not(DualAttestation::spec_has_credential[@604](DualAttestation::spec_credential_address[@596, @597]($t1)))), Eq(5, $t21))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:823:5+220
    assert {:msg "assert_failed(11,36766,36986): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#593, $t1) && $IsEqual'u8'(7, $t21)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#594, $t1) && $IsEqual'u8'(5, $t21))) || ($IsEqual'u64'($t2, 0) && $IsEqual'u8'(7, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $1_AccountLimits_Window'#0'_$memory#595, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && $IsEqual'u8'(8, $t21))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598) && $IsEqual'u8'(1, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && $IsEqual'u8'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))))) && $IsEqual'u8'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'u8'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'u8'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))))) > $MAX_U64))) && $IsEqual'u8'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $account_address#$1_DiemAccount_WithdrawCapability($t0), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598))) && $IsEqual'u8'(1, $t21))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#600) && $IsEqual'u8'(5, $t21))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#601, $t1) && $IsEqual'u8'(1, $t21))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t0), $t1) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#593, $t1) + $t2) > $MAX_U64)) && $IsEqual'u8'(8, $t21))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#594, $t6) && $IsEqual'u8'(5, $t21))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#593, $t6) && $IsEqual'u8'(5, $t21))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598) && $IsEqual'u8'(1, $t21))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#600) && $IsEqual'u8'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#602) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $1_AccountLimits_Window'#0'_$memory#595, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6)))) && $IsEqual'u8'(8, $t21))) || (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#593, $t6))) < $t2) && $IsEqual'u8'(8, $t21))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598) && $IsEqual'u8'(1, $t21))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#601, $t6) && $IsEqual'u8'(1, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) && $IsEqual'u8'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))))) && $IsEqual'u8'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598, $1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6)))) + $t2) > 18446744073709551615))) && $IsEqual'u8'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))))) > $MAX_U64))) && $IsEqual'u8'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#599, $ResourceValue($1_AccountLimits_Window'#0'_$memory#595, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t6))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#598))) && $IsEqual'u8'(1, $t21))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#603)) && $IsEqual'u8'(5, $t21))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#600)) && $IsEqual'u8'(5, $t21))) || (($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t13) > 18446744073709551615)) && $IsEqual'u8'(8, $t21))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#600, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Limit_$memory#603, $t5, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#604, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)))) && $IsEqual'u8'(1, $t21))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#600, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Limit_$memory#603, $t5, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#604, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1)))) && $IsEqual'u8'(1, $t21))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#600, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Limit_$memory#603, $t5, $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Credential_$memory#604, $t5, $t1, $t4, $t3, $t2)) && $IsEqual'u8'(7, $t21))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#600, $1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $1_DualAttestation_Limit_$memory#603, $t5, $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#604, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#596, $1_VASP_ParentVASP_$memory#597, $t1))) && $IsEqual'u8'(5, $t21)));

    // abort($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:823:5+220
    $abort_code := $t21;
    $abort_flag := true;
    return;

}

// fun DiemAccount::prologue_common<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
procedure {:inline 1} $1_DiemAccount_prologue_common'$1_XUS_XUS'(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: int, _$t4: int, _$t5: int, _$t6: int) returns ()
{
    // declare local variables
    var $t7: int;
    var $t8: int;
    var $t9: $1_DiemAccount_DiemAccount;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t30: bool;
    var $t31: int;
    var $t32: bool;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: bool;
    var $t41: int;
    var $t42: int;
    var $t43: bool;
    var $t44: int;
    var $t45: int;
    var $t46: bool;
    var $t47: bool;
    var $t48: int;
    var $t49: int;
    var $t50: $1_DiemAccount_DiemAccount;
    var $t51: Vec (int);
    var $t52: Vec (int);
    var $t53: bool;
    var $t54: int;
    var $t55: int;
    var $t56: int;
    var $t57: int;
    var $t58: int;
    var $t59: int;
    var $t60: bool;
    var $t61: int;
    var $t62: int;
    var $t63: int;
    var $t64: int;
    var $t65: bool;
    var $t66: bool;
    var $t67: int;
    var $t68: int;
    var $t69: bool;
    var $t70: int;
    var $t71: int;
    var $t72: int;
    var $t73: bool;
    var $t74: int;
    var $t75: int;
    var $t76: int;
    var $t77: bool;
    var $t78: bool;
    var $t79: int;
    var $t80: int;
    var $t81: int;
    var $t82: int;
    var $t83: bool;
    var $t84: int;
    var $t85: int;
    var $t86: int;
    var $t87: bool;
    var $t88: int;
    var $t89: int;
    var $t90: int;
    var $t91: bool;
    var $t92: int;
    var $t93: int;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;

    // bytecode translation starts here
    // assume Identical($t35, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1947:9+57
    assume {:print "$at(11,88304,88361)"} true;
    assume ($t35 == $1_Signer_spec_address_of($t0));

    // assume Identical($t36, Mul($t3, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1948:9+60
    assume {:print "$at(11,88370,88430)"} true;
    assume ($t36 == ($t3 * $t4));

    // trace_local[sender]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$at(11,84404,84405)"} true;
    assume {:print "$track_local(29,33,0):", $t0} $t0 == $t0;

    // trace_local[txn_sequence_number]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,1):", $t1} $t1 == $t1;

    // trace_local[txn_public_key]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,2):", $t2} $t2 == $t2;

    // trace_local[txn_gas_price]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,3):", $t3} $t3 == $t3;

    // trace_local[txn_max_gas_units]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,4):", $t4} $t4 == $t4;

    // trace_local[txn_expiration_time_seconds]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,5):", $t5} $t5 == $t5;

    // trace_local[chain_id]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,6):", $t6} $t6 == $t6;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26
    // >> opaque call: $t35 := Signer::address_of($t0)
    assume {:print "$at(11,84729,84755)"} true;

    // $t37 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26

    // assume WellFormed($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26
    assume $IsValid'address'($t37);

    // assume Eq<address>($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26
    assume $IsEqual'address'($t37, $1_Signer_spec_address_of($t0));

    // $t37 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26

    // trace_local[transaction_sender]($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:13+18
    assume {:print "$track_local(29,33,34):", $t37} $t37 == $t37;

    // $t38 := ChainId::get() on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:16+14
    assume {:print "$at(11,84882,84896)"} true;
    call $t38 := $1_ChainId_get();
    if ($abort_flag) {
        assume {:print "$at(11,84882,84896)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t40 := ==($t38, $t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:31+2
    $t40 := $IsEqual'u8'($t38, $t6);

    // $t41 := 1007 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:69+22
    $t41 := 1007;
    assume $IsValid'u64'($t41);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48
    // >> opaque call: $t39 := Errors::invalid_argument($t38)

    // $t42 := opaque begin: Errors::invalid_argument($t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48

    // assume WellFormed($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48
    assume $IsValid'u64'($t42);

    // assume Eq<u64>($t42, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48
    assume $IsEqual'u64'($t42, 7);

    // $t42 := opaque end: Errors::invalid_argument($t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48

    // trace_local[tmp#$11]($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    assume {:print "$track_local(29,33,11):", $t42} $t42 == $t42;

    // trace_local[tmp#$10]($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    assume {:print "$track_local(29,33,10):", $t40} $t40 == $t40;

    // if ($t40) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    if ($t40) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
L1:

    // trace_abort($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    assume {:print "$at(11,84875,84959)"} true;
    assume {:print "$track_abort(29,33):", $t42} $t42 == $t42;

    // $t39 := move($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    $t39 := $t42;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    goto L27;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:26+18
    assume {:print "$at(11,85058,85076)"} true;
L0:

    // $t43 := DiemAccount::exists_at($t37) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:16+29
    call $t43 := $1_DiemAccount_exists_at($t37);
    if ($abort_flag) {
        assume {:print "$at(11,85048,85077)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t44 := 1004 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:72+21
    $t44 := 1004;
    assume $IsValid'u64'($t44);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47
    // >> opaque call: $t42 := Errors::invalid_argument($t41)

    // $t45 := opaque begin: Errors::invalid_argument($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47

    // assume WellFormed($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47
    assume $IsValid'u64'($t45);

    // assume Eq<u64>($t45, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47
    assume $IsEqual'u64'($t45, 7);

    // $t45 := opaque end: Errors::invalid_argument($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47

    // trace_local[tmp#$13]($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    assume {:print "$track_local(29,33,13):", $t45} $t45 == $t45;

    // trace_local[tmp#$12]($t43) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    assume {:print "$track_local(29,33,12):", $t43} $t43 == $t43;

    // if ($t43) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    if ($t43) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
L3:

    // trace_abort($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    assume {:print "$at(11,85041,85127)"} true;
    assume {:print "$track_abort(29,33):", $t45} $t45 == $t45;

    // $t39 := move($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    $t39 := $t45;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    goto L27;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:49+18
    assume {:print "$at(11,85299,85317)"} true;
L2:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54
    // >> opaque call: $t43 := AccountFreezing::account_is_frozen($t35)

    // $t46 := opaque begin: AccountFreezing::account_is_frozen($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54
    assume $IsValid'bool'($t46);

    // assume Eq<bool>($t46, AccountFreezing::spec_account_is_frozen($t37)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54
    assume $IsEqual'bool'($t46, $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t37));

    // $t46 := opaque end: AccountFreezing::account_is_frozen($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54

    // $t47 := !($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:13+1
    call $t47 := $Not($t46);

    // $t48 := 1000 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:35+24
    assume {:print "$at(11,85354,85378)"} true;
    $t48 := 1000;
    assume $IsValid'u64'($t48);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47
    // >> opaque call: $t46 := Errors::invalid_state($t45)

    // $t49 := opaque begin: Errors::invalid_state($t48) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47

    // assume WellFormed($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47
    assume $IsValid'u64'($t49);

    // assume Eq<u64>($t49, 1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47
    assume $IsEqual'u64'($t49, 1);

    // $t49 := opaque end: Errors::invalid_state($t48) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47

    // trace_local[tmp#$15]($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    assume {:print "$at(11,85243,85389)"} true;
    assume {:print "$track_local(29,33,15):", $t49} $t49 == $t49;

    // trace_local[tmp#$14]($t47) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    assume {:print "$track_local(29,33,14):", $t47} $t47 == $t47;

    // if ($t47) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    if ($t47) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
L5:

    // trace_abort($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    assume {:print "$at(11,85243,85389)"} true;
    assume {:print "$track_abort(29,33):", $t49} $t49 == $t49;

    // $t39 := move($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    $t39 := $t49;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    goto L27;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1883:57+18
    assume {:print "$at(11,85497,85515)"} true;
L4:

    // $t50 := get_global<DiemAccount::DiemAccount>($t37) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1883:30+13
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t37)) {
        call $ExecFailureAbort();
    } else {
        $t50 := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t37);
    }
    if ($abort_flag) {
        assume {:print "$at(11,85470,85483)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // trace_local[sender_account]($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1883:13+14
    assume {:print "$track_local(29,33,9):", $t50} $t50 == $t50;

    // $t51 := Hash::sha3_256($t2) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1887:13+30
    assume {:print "$at(11,85649,85679)"} true;
    call $t51 := $1_Hash_sha3_256($t2);
    if ($abort_flag) {
        assume {:print "$at(11,85649,85679)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t52 := get_field<DiemAccount::DiemAccount>.authentication_key($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1887:48+34
    $t52 := $authentication_key#$1_DiemAccount_DiemAccount($t50);

    // $t53 := ==($t51, $t52) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1887:44+2
    $t53 := $IsEqual'vec'u8''($t51, $t52);

    // $t54 := 1001 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:38+34
    assume {:print "$at(11,85757,85791)"} true;
    $t54 := 1001;
    assume $IsValid'u64'($t54);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60
    // >> opaque call: $t52 := Errors::invalid_argument($t51)

    // $t55 := opaque begin: Errors::invalid_argument($t54) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60

    // assume WellFormed($t55) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60
    assume $IsValid'u64'($t55);

    // assume Eq<u64>($t55, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60
    assume $IsEqual'u64'($t55, 7);

    // $t55 := opaque end: Errors::invalid_argument($t54) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60

    // trace_local[tmp#$17]($t55) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    assume {:print "$at(11,85629,85803)"} true;
    assume {:print "$track_local(29,33,17):", $t55} $t55 == $t55;

    // trace_local[tmp#$16]($t53) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    assume {:print "$track_local(29,33,16):", $t53} $t53 == $t53;

    // if ($t53) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    if ($t53) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
L7:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174

    // trace_abort($t55) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    assume {:print "$at(11,85629,85803)"} true;
    assume {:print "$track_abort(29,33):", $t55} $t55 == $t55;

    // $t39 := move($t55) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    $t39 := $t55;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    goto L27;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:14+13
    assume {:print "$at(11,85920,85933)"} true;
L6:

    // $t56 := (u128)($t3) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:13+23
    call $t56 := $CastU128($t3);
    if ($abort_flag) {
        assume {:print "$at(11,85919,85942)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t57 := (u128)($t4) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:39+27
    call $t57 := $CastU128($t4);
    if ($abort_flag) {
        assume {:print "$at(11,85945,85972)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t58 := *($t56, $t57) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:37+1
    call $t58 := $MulU128($t56, $t57);
    if ($abort_flag) {
        assume {:print "$at(11,85943,85944)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t59 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:70+7
    $t59 := 18446744073709551615;
    assume $IsValid'u128'($t59);

    // $t60 := <=($t58, $t59) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:67+2
    call $t60 := $Le($t58, $t59);

    // $t61 := 1005 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:38+30
    assume {:print "$at(11,86022,86052)"} true;
    $t61 := 1005;
    assume $IsValid'u64'($t61);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56
    // >> opaque call: $t59 := Errors::invalid_argument($t58)

    // $t62 := opaque begin: Errors::invalid_argument($t61) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56

    // assume WellFormed($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56
    assume $IsValid'u64'($t62);

    // assume Eq<u64>($t62, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56
    assume $IsEqual'u64'($t62, 7);

    // $t62 := opaque end: Errors::invalid_argument($t61) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56

    // trace_local[tmp#$19]($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    assume {:print "$at(11,85899,86064)"} true;
    assume {:print "$track_local(29,33,19):", $t62} $t62 == $t62;

    // trace_local[tmp#$18]($t60) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    assume {:print "$track_local(29,33,18):", $t60} $t60 == $t60;

    // if ($t60) goto L8 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    if ($t60) { goto L8; } else { goto L9; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
L9:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165

    // trace_abort($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    assume {:print "$at(11,85899,86064)"} true;
    assume {:print "$track_abort(29,33):", $t62} $t62 == $t62;

    // $t39 := move($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    $t39 := $t62;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    goto L27;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1897:35+13
    assume {:print "$at(11,86101,86114)"} true;
L8:

    // $t63 := *($t3, $t4) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1897:49+1
    call $t63 := $MulU64($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(11,86115,86116)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // trace_local[max_transaction_fee]($t63) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1897:13+19
    assume {:print "$track_local(29,33,8):", $t63} $t63 == $t63;

    // $t64 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:35+1
    assume {:print "$at(11,86236,86237)"} true;
    $t64 := 0;
    assume $IsValid'u64'($t64);

    // $t65 := >($t63, $t64) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:33+1
    call $t65 := $Gt($t63, $t64);

    // if ($t65) goto L10 else goto L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:9+854
    if ($t65) { goto L10; } else { goto L11; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:9+854
L11:

    // goto L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:9+854
    goto L12;

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1903:17+44
    assume {:print "$at(11,86352,86396)"} true;
L10:

    // $t66 := TransactionFee::is_coin_initialized<#0>() on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1903:17+44
    call $t66 := $1_TransactionFee_is_coin_initialized'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(11,86352,86396)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t67 := 1012 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:42+38
    assume {:print "$at(11,86439,86477)"} true;
    $t67 := 1012;
    assume $IsValid'u64'($t67);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64
    // >> opaque call: $t65 := Errors::invalid_argument($t64)

    // $t68 := opaque begin: Errors::invalid_argument($t67) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64

    // assume WellFormed($t68) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64
    assume $IsValid'u64'($t68);

    // assume Eq<u64>($t68, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64
    assume $IsEqual'u64'($t68, 7);

    // $t68 := opaque end: Errors::invalid_argument($t67) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64

    // trace_local[tmp#$21]($t68) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    assume {:print "$at(11,86328,86492)"} true;
    assume {:print "$track_local(29,33,21):", $t68} $t68 == $t68;

    // trace_local[tmp#$20]($t66) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    assume {:print "$track_local(29,33,20):", $t66} $t66 == $t66;

    // if ($t66) goto L13 else goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    if ($t66) { goto L13; } else { goto L14; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
L14:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164

    // trace_abort($t68) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    assume {:print "$at(11,86328,86492)"} true;
    assume {:print "$track_abort(29,33):", $t68} $t68 == $t68;

    // $t39 := move($t68) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    $t39 := $t68;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    goto L27;

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1908:40+18
    assume {:print "$at(11,86630,86648)"} true;
L13:

    // $t69 := exists<DiemAccount::Balance<#0>>($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1908:17+6
    $t69 := $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t37);

    // $t70 := 1005 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:42+30
    assume {:print "$at(11,86692,86722)"} true;
    $t70 := 1005;
    assume $IsValid'u64'($t70);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56
    // >> opaque call: $t68 := Errors::invalid_argument($t67)

    // $t71 := opaque begin: Errors::invalid_argument($t70) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56

    // assume WellFormed($t71) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56
    assume $IsValid'u64'($t71);

    // assume Eq<u64>($t71, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56
    assume $IsEqual'u64'($t71, 7);

    // $t71 := opaque end: Errors::invalid_argument($t70) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56

    // trace_local[tmp#$23]($t71) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    assume {:print "$at(11,86583,86737)"} true;
    assume {:print "$track_local(29,33,23):", $t71} $t71 == $t71;

    // trace_local[tmp#$22]($t69) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    assume {:print "$track_local(29,33,22):", $t69} $t69 == $t69;

    // if ($t69) goto L15 else goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    if ($t69) { goto L15; } else { goto L16; }

    // label L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
L16:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154

    // trace_abort($t71) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    assume {:print "$at(11,86583,86737)"} true;
    assume {:print "$track_abort(29,33):", $t71} $t71 == $t71;

    // $t39 := move($t71) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    $t39 := $t71;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    goto L27;

    // label L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1911:49+18
    assume {:print "$at(11,86787,86805)"} true;
L15:

    // $t72 := DiemAccount::balance<#0>($t37) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1911:34+34
    call $t72 := $1_DiemAccount_balance'$1_XUS_XUS'($t37);
    if ($abort_flag) {
        assume {:print "$at(11,86772,86806)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // trace_local[balance_amount]($t72) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1911:17+14
    assume {:print "$track_local(29,33,7):", $t72} $t72 == $t72;

    // $t73 := >=($t72, $t63) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1914:32+2
    assume {:print "$at(11,86943,86945)"} true;
    call $t73 := $Ge($t72, $t63);

    // $t74 := 1005 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:42+30
    assume {:print "$at(11,87008,87038)"} true;
    $t74 := 1005;
    assume $IsValid'u64'($t74);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56
    // >> opaque call: $t72 := Errors::invalid_argument($t71)

    // $t75 := opaque begin: Errors::invalid_argument($t74) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56

    // assume WellFormed($t75) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56
    assume $IsValid'u64'($t75);

    // assume Eq<u64>($t75, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56
    assume $IsEqual'u64'($t75, 7);

    // $t75 := opaque end: Errors::invalid_argument($t74) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56

    // trace_local[tmp#$25]($t75) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    assume {:print "$at(11,86904,87053)"} true;
    assume {:print "$track_local(29,33,25):", $t75} $t75 == $t75;

    // trace_local[tmp#$24]($t73) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    assume {:print "$track_local(29,33,24):", $t73} $t73 == $t73;

    // if ($t73) goto L12 else goto L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    if ($t73) { goto L12; } else { goto L17; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
L17:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149

    // trace_abort($t75) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    assume {:print "$at(11,86904,87053)"} true;
    assume {:print "$track_abort(29,33):", $t75} $t75 == $t75;

    // $t39 := move($t75) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    $t39 := $t75;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    goto L27;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume {:print "$at(11,87156,87184)"} true;
L12:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    // >> opaque call: $t73 := DiemTimestamp::now_seconds()

    // $t76 := opaque begin: DiemTimestamp::now_seconds() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28

    // assume Identical($t77, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume ($t77 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t77) goto L29 else goto L28 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    if ($t77) { goto L29; } else { goto L28; }

    // label L29 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
L29:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t39)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t39));

    // trace_abort($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume {:print "$at(11,87156,87184)"} true;
    assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    goto L27;

    // label L28 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
L28:

    // assume WellFormed($t76) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume $IsValid'u64'($t76);

    // assume Eq<u64>($t76, Div(DiemTimestamp::spec_now_microseconds(), 1000000)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume $IsEqual'u64'($t76, ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) div 1000000));

    // $t76 := opaque end: DiemTimestamp::now_seconds() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28

    // $t78 := <($t76, $t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:42+1
    call $t78 := $Lt($t76, $t5);

    // $t79 := 1006 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:38+29
    assume {:print "$at(11,87253,87282)"} true;
    $t79 := 1006;
    assume $IsValid'u64'($t79);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55
    // >> opaque call: $t76 := Errors::invalid_argument($t75)

    // $t80 := opaque begin: Errors::invalid_argument($t79) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55

    // assume WellFormed($t80) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55
    assume $IsValid'u64'($t80);

    // assume Eq<u64>($t80, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55
    assume $IsEqual'u64'($t80, 7);

    // $t80 := opaque end: Errors::invalid_argument($t79) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55

    // trace_local[tmp#$27]($t80) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    assume {:print "$at(11,87136,87293)"} true;
    assume {:print "$track_local(29,33,27):", $t80} $t80 == $t80;

    // trace_local[tmp#$26]($t78) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    assume {:print "$track_local(29,33,26):", $t78} $t78 == $t78;

    // if ($t78) goto L18 else goto L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    if ($t78) { goto L18; } else { goto L19; }

    // label L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
L19:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157

    // trace_abort($t80) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    assume {:print "$at(11,87136,87293)"} true;
    assume {:print "$track_abort(29,33):", $t80} $t80 == $t80;

    // $t39 := move($t80) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    $t39 := $t80;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    goto L27;

    // label L18 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1927:14+19
    assume {:print "$at(11,87409,87428)"} true;
L18:

    // $t81 := (u128)($t1) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1927:13+29
    call $t81 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(11,87408,87437)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t82 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1927:45+7
    $t82 := 18446744073709551615;
    assume $IsValid'u128'($t82);

    // $t83 := <($t81, $t82) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1927:43+1
    call $t83 := $Lt($t81, $t82);

    // $t84 := 1011 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:36+33
    assume {:print "$at(11,87484,87517)"} true;
    $t84 := 1011;
    assume $IsValid'u64'($t84);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57
    // >> opaque call: $t81 := Errors::limit_exceeded($t80)

    // $t85 := opaque begin: Errors::limit_exceeded($t84) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57

    // assume WellFormed($t85) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57
    assume $IsValid'u64'($t85);

    // assume Eq<u64>($t85, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57
    assume $IsEqual'u64'($t85, 8);

    // $t85 := opaque end: Errors::limit_exceeded($t84) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57

    // trace_local[tmp#$29]($t85) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    assume {:print "$at(11,87388,87528)"} true;
    assume {:print "$track_local(29,33,29):", $t85} $t85 == $t85;

    // trace_local[tmp#$28]($t83) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    assume {:print "$track_local(29,33,28):", $t83} $t83 == $t83;

    // if ($t83) goto L20 else goto L21 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    if ($t83) { goto L20; } else { goto L21; }

    // label L21 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
L21:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140

    // trace_abort($t85) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    assume {:print "$at(11,87388,87528)"} true;
    assume {:print "$track_abort(29,33):", $t85} $t85 == $t85;

    // $t39 := move($t85) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    $t39 := $t85;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    goto L27;

    // label L20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1933:13+19
    assume {:print "$at(11,87651,87670)"} true;
L20:

    // $t86 := get_field<DiemAccount::DiemAccount>.sequence_number($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1933:36+30
    $t86 := $sequence_number#$1_DiemAccount_DiemAccount($t50);

    // $t87 := >=($t1, $t86) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1933:33+2
    call $t87 := $Ge($t1, $t86);

    // $t88 := 1002 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:38+33
    assume {:print "$at(11,87743,87776)"} true;
    $t88 := 1002;
    assume $IsValid'u64'($t88);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59
    // >> opaque call: $t85 := Errors::invalid_argument($t84)

    // $t89 := opaque begin: Errors::invalid_argument($t88) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59

    // assume WellFormed($t89) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59
    assume $IsValid'u64'($t89);

    // assume Eq<u64>($t89, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59
    assume $IsEqual'u64'($t89, 7);

    // $t89 := opaque end: Errors::invalid_argument($t88) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59

    // trace_local[tmp#$31]($t89) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    assume {:print "$at(11,87631,87787)"} true;
    assume {:print "$track_local(29,33,31):", $t89} $t89 == $t89;

    // trace_local[tmp#$30]($t87) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    assume {:print "$track_local(29,33,30):", $t87} $t87 == $t87;

    // if ($t87) goto L22 else goto L23 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    if ($t87) { goto L22; } else { goto L23; }

    // label L23 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
L23:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156

    // trace_abort($t89) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    assume {:print "$at(11,87631,87787)"} true;
    assume {:print "$track_abort(29,33):", $t89} $t89 == $t89;

    // $t39 := move($t89) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    $t39 := $t89;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    goto L27;

    // label L22 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1940:13+19
    assume {:print "$at(11,87980,87999)"} true;
L22:

    // $t90 := get_field<DiemAccount::DiemAccount>.sequence_number($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1940:36+30
    $t90 := $sequence_number#$1_DiemAccount_DiemAccount($t50);

    // $t91 := ==($t1, $t90) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1940:33+2
    $t91 := $IsEqual'u64'($t1, $t90);

    // $t92 := 1003 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:38+33
    assume {:print "$at(11,88072,88105)"} true;
    $t92 := 1003;
    assume $IsValid'u64'($t92);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59
    // >> opaque call: $t89 := Errors::invalid_argument($t88)

    // $t93 := opaque begin: Errors::invalid_argument($t92) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59

    // assume WellFormed($t93) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59
    assume $IsValid'u64'($t93);

    // assume Eq<u64>($t93, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59
    assume $IsEqual'u64'($t93, 7);

    // $t93 := opaque end: Errors::invalid_argument($t92) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59

    // trace_local[tmp#$33]($t93) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    assume {:print "$at(11,87960,88116)"} true;
    assume {:print "$track_local(29,33,33):", $t93} $t93 == $t93;

    // trace_local[tmp#$32]($t91) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    assume {:print "$track_local(29,33,32):", $t91} $t91 == $t91;

    // if ($t91) goto L24 else goto L25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    if ($t91) { goto L24; } else { goto L25; }

    // label L25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
L25:

    // trace_abort($t93) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    assume {:print "$at(11,87960,88116)"} true;
    assume {:print "$track_abort(29,33):", $t93} $t93 == $t93;

    // $t39 := move($t93) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    $t39 := $t93;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    goto L27;

    // label L24 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1942:10+1
    assume {:print "$at(11,88116,88117)"} true;
L24:

    // label L26 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1945:5+1
    assume {:print "$at(11,88267,88268)"} true;
L26:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1945:5+1
    return;

    // label L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1945:5+1
L27:

    // abort($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1945:5+1
    $abort_code := $t39;
    $abort_flag := true;
    return;

}

// fun DiemAccount::prologue_common<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
procedure {:inline 1} $1_DiemAccount_prologue_common'#0'(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: int, _$t4: int, _$t5: int, _$t6: int) returns ()
{
    // declare local variables
    var $t7: int;
    var $t8: int;
    var $t9: $1_DiemAccount_DiemAccount;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t30: bool;
    var $t31: int;
    var $t32: bool;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: bool;
    var $t41: int;
    var $t42: int;
    var $t43: bool;
    var $t44: int;
    var $t45: int;
    var $t46: bool;
    var $t47: bool;
    var $t48: int;
    var $t49: int;
    var $t50: $1_DiemAccount_DiemAccount;
    var $t51: Vec (int);
    var $t52: Vec (int);
    var $t53: bool;
    var $t54: int;
    var $t55: int;
    var $t56: int;
    var $t57: int;
    var $t58: int;
    var $t59: int;
    var $t60: bool;
    var $t61: int;
    var $t62: int;
    var $t63: int;
    var $t64: int;
    var $t65: bool;
    var $t66: bool;
    var $t67: int;
    var $t68: int;
    var $t69: bool;
    var $t70: int;
    var $t71: int;
    var $t72: int;
    var $t73: bool;
    var $t74: int;
    var $t75: int;
    var $t76: int;
    var $t77: bool;
    var $t78: bool;
    var $t79: int;
    var $t80: int;
    var $t81: int;
    var $t82: int;
    var $t83: bool;
    var $t84: int;
    var $t85: int;
    var $t86: int;
    var $t87: bool;
    var $t88: int;
    var $t89: int;
    var $t90: int;
    var $t91: bool;
    var $t92: int;
    var $t93: int;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;

    // bytecode translation starts here
    // assume Identical($t35, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1947:9+57
    assume {:print "$at(11,88304,88361)"} true;
    assume ($t35 == $1_Signer_spec_address_of($t0));

    // assume Identical($t36, Mul($t3, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1948:9+60
    assume {:print "$at(11,88370,88430)"} true;
    assume ($t36 == ($t3 * $t4));

    // trace_local[sender]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$at(11,84404,84405)"} true;
    assume {:print "$track_local(29,33,0):", $t0} $t0 == $t0;

    // trace_local[txn_sequence_number]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,1):", $t1} $t1 == $t1;

    // trace_local[txn_public_key]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,2):", $t2} $t2 == $t2;

    // trace_local[txn_gas_price]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,3):", $t3} $t3 == $t3;

    // trace_local[txn_max_gas_units]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,4):", $t4} $t4 == $t4;

    // trace_local[txn_expiration_time_seconds]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,5):", $t5} $t5 == $t5;

    // trace_local[chain_id]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,6):", $t6} $t6 == $t6;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26
    // >> opaque call: $t35 := Signer::address_of($t0)
    assume {:print "$at(11,84729,84755)"} true;

    // $t37 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26

    // assume WellFormed($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26
    assume $IsValid'address'($t37);

    // assume Eq<address>($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26
    assume $IsEqual'address'($t37, $1_Signer_spec_address_of($t0));

    // $t37 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26

    // trace_local[transaction_sender]($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:13+18
    assume {:print "$track_local(29,33,34):", $t37} $t37 == $t37;

    // $t38 := ChainId::get() on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:16+14
    assume {:print "$at(11,84882,84896)"} true;
    call $t38 := $1_ChainId_get();
    if ($abort_flag) {
        assume {:print "$at(11,84882,84896)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t40 := ==($t38, $t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:31+2
    $t40 := $IsEqual'u8'($t38, $t6);

    // $t41 := 1007 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:69+22
    $t41 := 1007;
    assume $IsValid'u64'($t41);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48
    // >> opaque call: $t39 := Errors::invalid_argument($t38)

    // $t42 := opaque begin: Errors::invalid_argument($t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48

    // assume WellFormed($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48
    assume $IsValid'u64'($t42);

    // assume Eq<u64>($t42, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48
    assume $IsEqual'u64'($t42, 7);

    // $t42 := opaque end: Errors::invalid_argument($t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48

    // trace_local[tmp#$11]($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    assume {:print "$track_local(29,33,11):", $t42} $t42 == $t42;

    // trace_local[tmp#$10]($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    assume {:print "$track_local(29,33,10):", $t40} $t40 == $t40;

    // if ($t40) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    if ($t40) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
L1:

    // trace_abort($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    assume {:print "$at(11,84875,84959)"} true;
    assume {:print "$track_abort(29,33):", $t42} $t42 == $t42;

    // $t39 := move($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    $t39 := $t42;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    goto L27;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:26+18
    assume {:print "$at(11,85058,85076)"} true;
L0:

    // $t43 := DiemAccount::exists_at($t37) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:16+29
    call $t43 := $1_DiemAccount_exists_at($t37);
    if ($abort_flag) {
        assume {:print "$at(11,85048,85077)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t44 := 1004 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:72+21
    $t44 := 1004;
    assume $IsValid'u64'($t44);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47
    // >> opaque call: $t42 := Errors::invalid_argument($t41)

    // $t45 := opaque begin: Errors::invalid_argument($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47

    // assume WellFormed($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47
    assume $IsValid'u64'($t45);

    // assume Eq<u64>($t45, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47
    assume $IsEqual'u64'($t45, 7);

    // $t45 := opaque end: Errors::invalid_argument($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47

    // trace_local[tmp#$13]($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    assume {:print "$track_local(29,33,13):", $t45} $t45 == $t45;

    // trace_local[tmp#$12]($t43) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    assume {:print "$track_local(29,33,12):", $t43} $t43 == $t43;

    // if ($t43) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    if ($t43) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
L3:

    // trace_abort($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    assume {:print "$at(11,85041,85127)"} true;
    assume {:print "$track_abort(29,33):", $t45} $t45 == $t45;

    // $t39 := move($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    $t39 := $t45;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    goto L27;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:49+18
    assume {:print "$at(11,85299,85317)"} true;
L2:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54
    // >> opaque call: $t43 := AccountFreezing::account_is_frozen($t35)

    // $t46 := opaque begin: AccountFreezing::account_is_frozen($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54
    assume $IsValid'bool'($t46);

    // assume Eq<bool>($t46, AccountFreezing::spec_account_is_frozen($t37)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54
    assume $IsEqual'bool'($t46, $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t37));

    // $t46 := opaque end: AccountFreezing::account_is_frozen($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54

    // $t47 := !($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:13+1
    call $t47 := $Not($t46);

    // $t48 := 1000 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:35+24
    assume {:print "$at(11,85354,85378)"} true;
    $t48 := 1000;
    assume $IsValid'u64'($t48);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47
    // >> opaque call: $t46 := Errors::invalid_state($t45)

    // $t49 := opaque begin: Errors::invalid_state($t48) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47

    // assume WellFormed($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47
    assume $IsValid'u64'($t49);

    // assume Eq<u64>($t49, 1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47
    assume $IsEqual'u64'($t49, 1);

    // $t49 := opaque end: Errors::invalid_state($t48) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47

    // trace_local[tmp#$15]($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    assume {:print "$at(11,85243,85389)"} true;
    assume {:print "$track_local(29,33,15):", $t49} $t49 == $t49;

    // trace_local[tmp#$14]($t47) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    assume {:print "$track_local(29,33,14):", $t47} $t47 == $t47;

    // if ($t47) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    if ($t47) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
L5:

    // trace_abort($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    assume {:print "$at(11,85243,85389)"} true;
    assume {:print "$track_abort(29,33):", $t49} $t49 == $t49;

    // $t39 := move($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    $t39 := $t49;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    goto L27;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1883:57+18
    assume {:print "$at(11,85497,85515)"} true;
L4:

    // $t50 := get_global<DiemAccount::DiemAccount>($t37) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1883:30+13
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t37)) {
        call $ExecFailureAbort();
    } else {
        $t50 := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t37);
    }
    if ($abort_flag) {
        assume {:print "$at(11,85470,85483)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // trace_local[sender_account]($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1883:13+14
    assume {:print "$track_local(29,33,9):", $t50} $t50 == $t50;

    // $t51 := Hash::sha3_256($t2) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1887:13+30
    assume {:print "$at(11,85649,85679)"} true;
    call $t51 := $1_Hash_sha3_256($t2);
    if ($abort_flag) {
        assume {:print "$at(11,85649,85679)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t52 := get_field<DiemAccount::DiemAccount>.authentication_key($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1887:48+34
    $t52 := $authentication_key#$1_DiemAccount_DiemAccount($t50);

    // $t53 := ==($t51, $t52) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1887:44+2
    $t53 := $IsEqual'vec'u8''($t51, $t52);

    // $t54 := 1001 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:38+34
    assume {:print "$at(11,85757,85791)"} true;
    $t54 := 1001;
    assume $IsValid'u64'($t54);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60
    // >> opaque call: $t52 := Errors::invalid_argument($t51)

    // $t55 := opaque begin: Errors::invalid_argument($t54) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60

    // assume WellFormed($t55) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60
    assume $IsValid'u64'($t55);

    // assume Eq<u64>($t55, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60
    assume $IsEqual'u64'($t55, 7);

    // $t55 := opaque end: Errors::invalid_argument($t54) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60

    // trace_local[tmp#$17]($t55) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    assume {:print "$at(11,85629,85803)"} true;
    assume {:print "$track_local(29,33,17):", $t55} $t55 == $t55;

    // trace_local[tmp#$16]($t53) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    assume {:print "$track_local(29,33,16):", $t53} $t53 == $t53;

    // if ($t53) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    if ($t53) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
L7:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174

    // trace_abort($t55) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    assume {:print "$at(11,85629,85803)"} true;
    assume {:print "$track_abort(29,33):", $t55} $t55 == $t55;

    // $t39 := move($t55) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    $t39 := $t55;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    goto L27;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:14+13
    assume {:print "$at(11,85920,85933)"} true;
L6:

    // $t56 := (u128)($t3) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:13+23
    call $t56 := $CastU128($t3);
    if ($abort_flag) {
        assume {:print "$at(11,85919,85942)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t57 := (u128)($t4) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:39+27
    call $t57 := $CastU128($t4);
    if ($abort_flag) {
        assume {:print "$at(11,85945,85972)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t58 := *($t56, $t57) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:37+1
    call $t58 := $MulU128($t56, $t57);
    if ($abort_flag) {
        assume {:print "$at(11,85943,85944)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t59 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:70+7
    $t59 := 18446744073709551615;
    assume $IsValid'u128'($t59);

    // $t60 := <=($t58, $t59) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:67+2
    call $t60 := $Le($t58, $t59);

    // $t61 := 1005 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:38+30
    assume {:print "$at(11,86022,86052)"} true;
    $t61 := 1005;
    assume $IsValid'u64'($t61);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56
    // >> opaque call: $t59 := Errors::invalid_argument($t58)

    // $t62 := opaque begin: Errors::invalid_argument($t61) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56

    // assume WellFormed($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56
    assume $IsValid'u64'($t62);

    // assume Eq<u64>($t62, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56
    assume $IsEqual'u64'($t62, 7);

    // $t62 := opaque end: Errors::invalid_argument($t61) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56

    // trace_local[tmp#$19]($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    assume {:print "$at(11,85899,86064)"} true;
    assume {:print "$track_local(29,33,19):", $t62} $t62 == $t62;

    // trace_local[tmp#$18]($t60) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    assume {:print "$track_local(29,33,18):", $t60} $t60 == $t60;

    // if ($t60) goto L8 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    if ($t60) { goto L8; } else { goto L9; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
L9:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165

    // trace_abort($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    assume {:print "$at(11,85899,86064)"} true;
    assume {:print "$track_abort(29,33):", $t62} $t62 == $t62;

    // $t39 := move($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    $t39 := $t62;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    goto L27;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1897:35+13
    assume {:print "$at(11,86101,86114)"} true;
L8:

    // $t63 := *($t3, $t4) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1897:49+1
    call $t63 := $MulU64($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(11,86115,86116)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // trace_local[max_transaction_fee]($t63) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1897:13+19
    assume {:print "$track_local(29,33,8):", $t63} $t63 == $t63;

    // $t64 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:35+1
    assume {:print "$at(11,86236,86237)"} true;
    $t64 := 0;
    assume $IsValid'u64'($t64);

    // $t65 := >($t63, $t64) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:33+1
    call $t65 := $Gt($t63, $t64);

    // if ($t65) goto L10 else goto L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:9+854
    if ($t65) { goto L10; } else { goto L11; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:9+854
L11:

    // goto L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:9+854
    goto L12;

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1903:17+44
    assume {:print "$at(11,86352,86396)"} true;
L10:

    // $t66 := TransactionFee::is_coin_initialized<#0>() on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1903:17+44
    call $t66 := $1_TransactionFee_is_coin_initialized'#0'();
    if ($abort_flag) {
        assume {:print "$at(11,86352,86396)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t67 := 1012 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:42+38
    assume {:print "$at(11,86439,86477)"} true;
    $t67 := 1012;
    assume $IsValid'u64'($t67);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64
    // >> opaque call: $t65 := Errors::invalid_argument($t64)

    // $t68 := opaque begin: Errors::invalid_argument($t67) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64

    // assume WellFormed($t68) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64
    assume $IsValid'u64'($t68);

    // assume Eq<u64>($t68, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64
    assume $IsEqual'u64'($t68, 7);

    // $t68 := opaque end: Errors::invalid_argument($t67) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64

    // trace_local[tmp#$21]($t68) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    assume {:print "$at(11,86328,86492)"} true;
    assume {:print "$track_local(29,33,21):", $t68} $t68 == $t68;

    // trace_local[tmp#$20]($t66) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    assume {:print "$track_local(29,33,20):", $t66} $t66 == $t66;

    // if ($t66) goto L13 else goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    if ($t66) { goto L13; } else { goto L14; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
L14:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164

    // trace_abort($t68) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    assume {:print "$at(11,86328,86492)"} true;
    assume {:print "$track_abort(29,33):", $t68} $t68 == $t68;

    // $t39 := move($t68) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    $t39 := $t68;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    goto L27;

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1908:40+18
    assume {:print "$at(11,86630,86648)"} true;
L13:

    // $t69 := exists<DiemAccount::Balance<#0>>($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1908:17+6
    $t69 := $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t37);

    // $t70 := 1005 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:42+30
    assume {:print "$at(11,86692,86722)"} true;
    $t70 := 1005;
    assume $IsValid'u64'($t70);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56
    // >> opaque call: $t68 := Errors::invalid_argument($t67)

    // $t71 := opaque begin: Errors::invalid_argument($t70) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56

    // assume WellFormed($t71) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56
    assume $IsValid'u64'($t71);

    // assume Eq<u64>($t71, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56
    assume $IsEqual'u64'($t71, 7);

    // $t71 := opaque end: Errors::invalid_argument($t70) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56

    // trace_local[tmp#$23]($t71) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    assume {:print "$at(11,86583,86737)"} true;
    assume {:print "$track_local(29,33,23):", $t71} $t71 == $t71;

    // trace_local[tmp#$22]($t69) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    assume {:print "$track_local(29,33,22):", $t69} $t69 == $t69;

    // if ($t69) goto L15 else goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    if ($t69) { goto L15; } else { goto L16; }

    // label L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
L16:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154

    // trace_abort($t71) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    assume {:print "$at(11,86583,86737)"} true;
    assume {:print "$track_abort(29,33):", $t71} $t71 == $t71;

    // $t39 := move($t71) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    $t39 := $t71;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    goto L27;

    // label L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1911:49+18
    assume {:print "$at(11,86787,86805)"} true;
L15:

    // $t72 := DiemAccount::balance<#0>($t37) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1911:34+34
    call $t72 := $1_DiemAccount_balance'#0'($t37);
    if ($abort_flag) {
        assume {:print "$at(11,86772,86806)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // trace_local[balance_amount]($t72) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1911:17+14
    assume {:print "$track_local(29,33,7):", $t72} $t72 == $t72;

    // $t73 := >=($t72, $t63) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1914:32+2
    assume {:print "$at(11,86943,86945)"} true;
    call $t73 := $Ge($t72, $t63);

    // $t74 := 1005 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:42+30
    assume {:print "$at(11,87008,87038)"} true;
    $t74 := 1005;
    assume $IsValid'u64'($t74);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56
    // >> opaque call: $t72 := Errors::invalid_argument($t71)

    // $t75 := opaque begin: Errors::invalid_argument($t74) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56

    // assume WellFormed($t75) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56
    assume $IsValid'u64'($t75);

    // assume Eq<u64>($t75, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56
    assume $IsEqual'u64'($t75, 7);

    // $t75 := opaque end: Errors::invalid_argument($t74) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56

    // trace_local[tmp#$25]($t75) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    assume {:print "$at(11,86904,87053)"} true;
    assume {:print "$track_local(29,33,25):", $t75} $t75 == $t75;

    // trace_local[tmp#$24]($t73) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    assume {:print "$track_local(29,33,24):", $t73} $t73 == $t73;

    // if ($t73) goto L12 else goto L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    if ($t73) { goto L12; } else { goto L17; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
L17:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149

    // trace_abort($t75) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    assume {:print "$at(11,86904,87053)"} true;
    assume {:print "$track_abort(29,33):", $t75} $t75 == $t75;

    // $t39 := move($t75) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    $t39 := $t75;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    goto L27;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume {:print "$at(11,87156,87184)"} true;
L12:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    // >> opaque call: $t73 := DiemTimestamp::now_seconds()

    // $t76 := opaque begin: DiemTimestamp::now_seconds() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28

    // assume Identical($t77, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume ($t77 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t77) goto L29 else goto L28 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    if ($t77) { goto L29; } else { goto L28; }

    // label L29 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
L29:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t39)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t39));

    // trace_abort($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume {:print "$at(11,87156,87184)"} true;
    assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    goto L27;

    // label L28 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
L28:

    // assume WellFormed($t76) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume $IsValid'u64'($t76);

    // assume Eq<u64>($t76, Div(DiemTimestamp::spec_now_microseconds(), 1000000)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume $IsEqual'u64'($t76, ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) div 1000000));

    // $t76 := opaque end: DiemTimestamp::now_seconds() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28

    // $t78 := <($t76, $t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:42+1
    call $t78 := $Lt($t76, $t5);

    // $t79 := 1006 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:38+29
    assume {:print "$at(11,87253,87282)"} true;
    $t79 := 1006;
    assume $IsValid'u64'($t79);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55
    // >> opaque call: $t76 := Errors::invalid_argument($t75)

    // $t80 := opaque begin: Errors::invalid_argument($t79) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55

    // assume WellFormed($t80) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55
    assume $IsValid'u64'($t80);

    // assume Eq<u64>($t80, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55
    assume $IsEqual'u64'($t80, 7);

    // $t80 := opaque end: Errors::invalid_argument($t79) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55

    // trace_local[tmp#$27]($t80) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    assume {:print "$at(11,87136,87293)"} true;
    assume {:print "$track_local(29,33,27):", $t80} $t80 == $t80;

    // trace_local[tmp#$26]($t78) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    assume {:print "$track_local(29,33,26):", $t78} $t78 == $t78;

    // if ($t78) goto L18 else goto L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    if ($t78) { goto L18; } else { goto L19; }

    // label L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
L19:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157

    // trace_abort($t80) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    assume {:print "$at(11,87136,87293)"} true;
    assume {:print "$track_abort(29,33):", $t80} $t80 == $t80;

    // $t39 := move($t80) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    $t39 := $t80;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    goto L27;

    // label L18 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1927:14+19
    assume {:print "$at(11,87409,87428)"} true;
L18:

    // $t81 := (u128)($t1) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1927:13+29
    call $t81 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(11,87408,87437)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t82 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1927:45+7
    $t82 := 18446744073709551615;
    assume $IsValid'u128'($t82);

    // $t83 := <($t81, $t82) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1927:43+1
    call $t83 := $Lt($t81, $t82);

    // $t84 := 1011 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:36+33
    assume {:print "$at(11,87484,87517)"} true;
    $t84 := 1011;
    assume $IsValid'u64'($t84);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57
    // >> opaque call: $t81 := Errors::limit_exceeded($t80)

    // $t85 := opaque begin: Errors::limit_exceeded($t84) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57

    // assume WellFormed($t85) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57
    assume $IsValid'u64'($t85);

    // assume Eq<u64>($t85, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57
    assume $IsEqual'u64'($t85, 8);

    // $t85 := opaque end: Errors::limit_exceeded($t84) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57

    // trace_local[tmp#$29]($t85) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    assume {:print "$at(11,87388,87528)"} true;
    assume {:print "$track_local(29,33,29):", $t85} $t85 == $t85;

    // trace_local[tmp#$28]($t83) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    assume {:print "$track_local(29,33,28):", $t83} $t83 == $t83;

    // if ($t83) goto L20 else goto L21 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    if ($t83) { goto L20; } else { goto L21; }

    // label L21 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
L21:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140

    // trace_abort($t85) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    assume {:print "$at(11,87388,87528)"} true;
    assume {:print "$track_abort(29,33):", $t85} $t85 == $t85;

    // $t39 := move($t85) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    $t39 := $t85;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    goto L27;

    // label L20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1933:13+19
    assume {:print "$at(11,87651,87670)"} true;
L20:

    // $t86 := get_field<DiemAccount::DiemAccount>.sequence_number($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1933:36+30
    $t86 := $sequence_number#$1_DiemAccount_DiemAccount($t50);

    // $t87 := >=($t1, $t86) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1933:33+2
    call $t87 := $Ge($t1, $t86);

    // $t88 := 1002 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:38+33
    assume {:print "$at(11,87743,87776)"} true;
    $t88 := 1002;
    assume $IsValid'u64'($t88);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59
    // >> opaque call: $t85 := Errors::invalid_argument($t84)

    // $t89 := opaque begin: Errors::invalid_argument($t88) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59

    // assume WellFormed($t89) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59
    assume $IsValid'u64'($t89);

    // assume Eq<u64>($t89, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59
    assume $IsEqual'u64'($t89, 7);

    // $t89 := opaque end: Errors::invalid_argument($t88) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59

    // trace_local[tmp#$31]($t89) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    assume {:print "$at(11,87631,87787)"} true;
    assume {:print "$track_local(29,33,31):", $t89} $t89 == $t89;

    // trace_local[tmp#$30]($t87) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    assume {:print "$track_local(29,33,30):", $t87} $t87 == $t87;

    // if ($t87) goto L22 else goto L23 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    if ($t87) { goto L22; } else { goto L23; }

    // label L23 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
L23:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156

    // trace_abort($t89) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    assume {:print "$at(11,87631,87787)"} true;
    assume {:print "$track_abort(29,33):", $t89} $t89 == $t89;

    // $t39 := move($t89) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    $t39 := $t89;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    goto L27;

    // label L22 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1940:13+19
    assume {:print "$at(11,87980,87999)"} true;
L22:

    // $t90 := get_field<DiemAccount::DiemAccount>.sequence_number($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1940:36+30
    $t90 := $sequence_number#$1_DiemAccount_DiemAccount($t50);

    // $t91 := ==($t1, $t90) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1940:33+2
    $t91 := $IsEqual'u64'($t1, $t90);

    // $t92 := 1003 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:38+33
    assume {:print "$at(11,88072,88105)"} true;
    $t92 := 1003;
    assume $IsValid'u64'($t92);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59
    // >> opaque call: $t89 := Errors::invalid_argument($t88)

    // $t93 := opaque begin: Errors::invalid_argument($t92) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59

    // assume WellFormed($t93) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59
    assume $IsValid'u64'($t93);

    // assume Eq<u64>($t93, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59
    assume $IsEqual'u64'($t93, 7);

    // $t93 := opaque end: Errors::invalid_argument($t92) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59

    // trace_local[tmp#$33]($t93) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    assume {:print "$at(11,87960,88116)"} true;
    assume {:print "$track_local(29,33,33):", $t93} $t93 == $t93;

    // trace_local[tmp#$32]($t91) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    assume {:print "$track_local(29,33,32):", $t91} $t91 == $t91;

    // if ($t91) goto L24 else goto L25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    if ($t91) { goto L24; } else { goto L25; }

    // label L25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
L25:

    // trace_abort($t93) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    assume {:print "$at(11,87960,88116)"} true;
    assume {:print "$track_abort(29,33):", $t93} $t93 == $t93;

    // $t39 := move($t93) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    $t39 := $t93;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    goto L27;

    // label L24 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1942:10+1
    assume {:print "$at(11,88116,88117)"} true;
L24:

    // label L26 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1945:5+1
    assume {:print "$at(11,88267,88268)"} true;
L26:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1945:5+1
    return;

    // label L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1945:5+1
L27:

    // abort($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1945:5+1
    $abort_code := $t39;
    $abort_flag := true;
    return;

}

// fun DiemAccount::prologue_common [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
procedure {:timeLimit 40} $1_DiemAccount_prologue_common$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: int, _$t4: int, _$t5: int, _$t6: int) returns ()
{
    // declare local variables
    var $t7: int;
    var $t8: int;
    var $t9: $1_DiemAccount_DiemAccount;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t30: bool;
    var $t31: int;
    var $t32: bool;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: bool;
    var $t41: int;
    var $t42: int;
    var $t43: bool;
    var $t44: int;
    var $t45: int;
    var $t46: bool;
    var $t47: bool;
    var $t48: int;
    var $t49: int;
    var $t50: $1_DiemAccount_DiemAccount;
    var $t51: Vec (int);
    var $t52: Vec (int);
    var $t53: bool;
    var $t54: int;
    var $t55: int;
    var $t56: int;
    var $t57: int;
    var $t58: int;
    var $t59: int;
    var $t60: bool;
    var $t61: int;
    var $t62: int;
    var $t63: int;
    var $t64: int;
    var $t65: bool;
    var $t66: bool;
    var $t67: int;
    var $t68: int;
    var $t69: bool;
    var $t70: int;
    var $t71: int;
    var $t72: int;
    var $t73: bool;
    var $t74: int;
    var $t75: int;
    var $t76: int;
    var $t77: bool;
    var $t78: bool;
    var $t79: int;
    var $t80: int;
    var $t81: int;
    var $t82: int;
    var $t83: bool;
    var $t84: int;
    var $t85: int;
    var $t86: int;
    var $t87: bool;
    var $t88: int;
    var $t89: int;
    var $t90: int;
    var $t91: bool;
    var $t92: int;
    var $t93: int;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_ChainId_ChainId_$memory#268: $Memory $1_ChainId_ChainId;
    var $1_DiemAccount_DiemAccount_$memory#269: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountFreezing_FreezingBit_$memory#270: $Memory $1_AccountFreezing_FreezingBit;
    var $1_TransactionFee_TransactionFee'#0'_$memory#271: $Memory $1_TransactionFee_TransactionFee'#0';
    var $1_DiemAccount_Balance'#0'_$memory#272: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#273: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,84404,88268)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume $IsValid'u64'($t5);

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume $IsValid'u8'($t6);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+3864
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t35, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1947:9+57
    assume {:print "$at(11,88304,88361)"} true;
    assume ($t35 == $1_Signer_spec_address_of($t0));

    // assume Identical($t36, Mul($t3, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1948:9+60
    assume {:print "$at(11,88370,88430)"} true;
    assume ($t36 == ($t3 * $t4));

    // @273 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$at(11,84404,84405)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#273 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @271 := save_mem(TransactionFee::TransactionFee<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    $1_TransactionFee_TransactionFee'#0'_$memory#271 := $1_TransactionFee_TransactionFee'#0'_$memory;

    // @268 := save_mem(ChainId::ChainId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    $1_ChainId_ChainId_$memory#268 := $1_ChainId_ChainId_$memory;

    // @270 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    $1_AccountFreezing_FreezingBit_$memory#270 := $1_AccountFreezing_FreezingBit_$memory;

    // @269 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    $1_DiemAccount_DiemAccount_$memory#269 := $1_DiemAccount_DiemAccount_$memory;

    // @272 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    $1_DiemAccount_Balance'#0'_$memory#272 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[sender]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,0):", $t0} $t0 == $t0;

    // trace_local[txn_sequence_number]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,1):", $t1} $t1 == $t1;

    // trace_local[txn_public_key]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,2):", $t2} $t2 == $t2;

    // trace_local[txn_gas_price]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,3):", $t3} $t3 == $t3;

    // trace_local[txn_max_gas_units]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,4):", $t4} $t4 == $t4;

    // trace_local[txn_expiration_time_seconds]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,5):", $t5} $t5 == $t5;

    // trace_local[chain_id]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1859:5+1
    assume {:print "$track_local(29,33,6):", $t6} $t6 == $t6;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26
    // >> opaque call: $t35 := Signer::address_of($t0)
    assume {:print "$at(11,84729,84755)"} true;

    // $t37 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26

    // assume WellFormed($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26
    assume $IsValid'address'($t37);

    // assume Eq<address>($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26
    assume $IsEqual'address'($t37, $1_Signer_spec_address_of($t0));

    // $t37 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:34+26

    // trace_local[transaction_sender]($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1868:13+18
    assume {:print "$track_local(29,33,34):", $t37} $t37 == $t37;

    // $t38 := ChainId::get() on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:16+14
    assume {:print "$at(11,84882,84896)"} true;
    call $t38 := $1_ChainId_get();
    if ($abort_flag) {
        assume {:print "$at(11,84882,84896)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t40 := ==($t38, $t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:31+2
    $t40 := $IsEqual'u8'($t38, $t6);

    // $t41 := 1007 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:69+22
    $t41 := 1007;
    assume $IsValid'u64'($t41);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48
    // >> opaque call: $t39 := Errors::invalid_argument($t38)

    // $t42 := opaque begin: Errors::invalid_argument($t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48

    // assume WellFormed($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48
    assume $IsValid'u64'($t42);

    // assume Eq<u64>($t42, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48
    assume $IsEqual'u64'($t42, 7);

    // $t42 := opaque end: Errors::invalid_argument($t41) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:44+48

    // trace_local[tmp#$11]($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    assume {:print "$track_local(29,33,11):", $t42} $t42 == $t42;

    // trace_local[tmp#$10]($t40) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    assume {:print "$track_local(29,33,10):", $t40} $t40 == $t40;

    // if ($t40) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    if ($t40) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
L1:

    // trace_abort($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    assume {:print "$at(11,84875,84959)"} true;
    assume {:print "$track_abort(29,33):", $t42} $t42 == $t42;

    // $t39 := move($t42) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    $t39 := $t42;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1871:9+84
    goto L27;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:26+18
    assume {:print "$at(11,85058,85076)"} true;
L0:

    // $t43 := DiemAccount::exists_at($t37) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:16+29
    call $t43 := $1_DiemAccount_exists_at($t37);
    if ($abort_flag) {
        assume {:print "$at(11,85048,85077)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t44 := 1004 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:72+21
    $t44 := 1004;
    assume $IsValid'u64'($t44);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47
    // >> opaque call: $t42 := Errors::invalid_argument($t41)

    // $t45 := opaque begin: Errors::invalid_argument($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47

    // assume WellFormed($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47
    assume $IsValid'u64'($t45);

    // assume Eq<u64>($t45, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47
    assume $IsEqual'u64'($t45, 7);

    // $t45 := opaque end: Errors::invalid_argument($t44) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:47+47

    // trace_local[tmp#$13]($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    assume {:print "$track_local(29,33,13):", $t45} $t45 == $t45;

    // trace_local[tmp#$12]($t43) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    assume {:print "$track_local(29,33,12):", $t43} $t43 == $t43;

    // if ($t43) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    if ($t43) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
L3:

    // trace_abort($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    assume {:print "$at(11,85041,85127)"} true;
    assume {:print "$track_abort(29,33):", $t45} $t45 == $t45;

    // $t39 := move($t45) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    $t39 := $t45;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1874:9+86
    goto L27;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:49+18
    assume {:print "$at(11,85299,85317)"} true;
L2:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54
    // >> opaque call: $t43 := AccountFreezing::account_is_frozen($t35)

    // $t46 := opaque begin: AccountFreezing::account_is_frozen($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54
    assume $IsValid'bool'($t46);

    // assume Eq<bool>($t46, AccountFreezing::spec_account_is_frozen($t37)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54
    assume $IsEqual'bool'($t46, $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t37));

    // $t46 := opaque end: AccountFreezing::account_is_frozen($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:14+54

    // $t47 := !($t46) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1878:13+1
    call $t47 := $Not($t46);

    // $t48 := 1000 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:35+24
    assume {:print "$at(11,85354,85378)"} true;
    $t48 := 1000;
    assume $IsValid'u64'($t48);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47
    // >> opaque call: $t46 := Errors::invalid_state($t45)

    // $t49 := opaque begin: Errors::invalid_state($t48) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47

    // assume WellFormed($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47
    assume $IsValid'u64'($t49);

    // assume Eq<u64>($t49, 1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47
    assume $IsEqual'u64'($t49, 1);

    // $t49 := opaque end: Errors::invalid_state($t48) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1879:13+47

    // trace_local[tmp#$15]($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    assume {:print "$at(11,85243,85389)"} true;
    assume {:print "$track_local(29,33,15):", $t49} $t49 == $t49;

    // trace_local[tmp#$14]($t47) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    assume {:print "$track_local(29,33,14):", $t47} $t47 == $t47;

    // if ($t47) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    if ($t47) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
L5:

    // trace_abort($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    assume {:print "$at(11,85243,85389)"} true;
    assume {:print "$track_abort(29,33):", $t49} $t49 == $t49;

    // $t39 := move($t49) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    $t39 := $t49;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1877:9+146
    goto L27;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1883:57+18
    assume {:print "$at(11,85497,85515)"} true;
L4:

    // $t50 := get_global<DiemAccount::DiemAccount>($t37) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1883:30+13
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t37)) {
        call $ExecFailureAbort();
    } else {
        $t50 := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t37);
    }
    if ($abort_flag) {
        assume {:print "$at(11,85470,85483)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // trace_local[sender_account]($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1883:13+14
    assume {:print "$track_local(29,33,9):", $t50} $t50 == $t50;

    // $t51 := Hash::sha3_256($t2) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1887:13+30
    assume {:print "$at(11,85649,85679)"} true;
    call $t51 := $1_Hash_sha3_256($t2);
    if ($abort_flag) {
        assume {:print "$at(11,85649,85679)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t52 := get_field<DiemAccount::DiemAccount>.authentication_key($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1887:48+34
    $t52 := $authentication_key#$1_DiemAccount_DiemAccount($t50);

    // $t53 := ==($t51, $t52) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1887:44+2
    $t53 := $IsEqual'vec'u8''($t51, $t52);

    // $t54 := 1001 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:38+34
    assume {:print "$at(11,85757,85791)"} true;
    $t54 := 1001;
    assume $IsValid'u64'($t54);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60
    // >> opaque call: $t52 := Errors::invalid_argument($t51)

    // $t55 := opaque begin: Errors::invalid_argument($t54) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60

    // assume WellFormed($t55) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60
    assume $IsValid'u64'($t55);

    // assume Eq<u64>($t55, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60
    assume $IsEqual'u64'($t55, 7);

    // $t55 := opaque end: Errors::invalid_argument($t54) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1888:13+60

    // trace_local[tmp#$17]($t55) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    assume {:print "$at(11,85629,85803)"} true;
    assume {:print "$track_local(29,33,17):", $t55} $t55 == $t55;

    // trace_local[tmp#$16]($t53) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    assume {:print "$track_local(29,33,16):", $t53} $t53 == $t53;

    // if ($t53) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    if ($t53) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
L7:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174

    // trace_abort($t55) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    assume {:print "$at(11,85629,85803)"} true;
    assume {:print "$track_abort(29,33):", $t55} $t55 == $t55;

    // $t39 := move($t55) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    $t39 := $t55;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1886:9+174
    goto L27;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:14+13
    assume {:print "$at(11,85920,85933)"} true;
L6:

    // $t56 := (u128)($t3) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:13+23
    call $t56 := $CastU128($t3);
    if ($abort_flag) {
        assume {:print "$at(11,85919,85942)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t57 := (u128)($t4) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:39+27
    call $t57 := $CastU128($t4);
    if ($abort_flag) {
        assume {:print "$at(11,85945,85972)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t58 := *($t56, $t57) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:37+1
    call $t58 := $MulU128($t56, $t57);
    if ($abort_flag) {
        assume {:print "$at(11,85943,85944)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t59 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:70+7
    $t59 := 18446744073709551615;
    assume $IsValid'u128'($t59);

    // $t60 := <=($t58, $t59) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1893:67+2
    call $t60 := $Le($t58, $t59);

    // $t61 := 1005 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:38+30
    assume {:print "$at(11,86022,86052)"} true;
    $t61 := 1005;
    assume $IsValid'u64'($t61);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56
    // >> opaque call: $t59 := Errors::invalid_argument($t58)

    // $t62 := opaque begin: Errors::invalid_argument($t61) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56

    // assume WellFormed($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56
    assume $IsValid'u64'($t62);

    // assume Eq<u64>($t62, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56
    assume $IsEqual'u64'($t62, 7);

    // $t62 := opaque end: Errors::invalid_argument($t61) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1894:13+56

    // trace_local[tmp#$19]($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    assume {:print "$at(11,85899,86064)"} true;
    assume {:print "$track_local(29,33,19):", $t62} $t62 == $t62;

    // trace_local[tmp#$18]($t60) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    assume {:print "$track_local(29,33,18):", $t60} $t60 == $t60;

    // if ($t60) goto L8 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    if ($t60) { goto L8; } else { goto L9; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
L9:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165

    // trace_abort($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    assume {:print "$at(11,85899,86064)"} true;
    assume {:print "$track_abort(29,33):", $t62} $t62 == $t62;

    // $t39 := move($t62) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    $t39 := $t62;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1892:9+165
    goto L27;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1897:35+13
    assume {:print "$at(11,86101,86114)"} true;
L8:

    // $t63 := *($t3, $t4) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1897:49+1
    call $t63 := $MulU64($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(11,86115,86116)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // trace_local[max_transaction_fee]($t63) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1897:13+19
    assume {:print "$track_local(29,33,8):", $t63} $t63 == $t63;

    // $t64 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:35+1
    assume {:print "$at(11,86236,86237)"} true;
    $t64 := 0;
    assume $IsValid'u64'($t64);

    // $t65 := >($t63, $t64) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:33+1
    call $t65 := $Gt($t63, $t64);

    // if ($t65) goto L10 else goto L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:9+854
    if ($t65) { goto L10; } else { goto L11; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:9+854
L11:

    // goto L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1900:9+854
    goto L12;

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1903:17+44
    assume {:print "$at(11,86352,86396)"} true;
L10:

    // $t66 := TransactionFee::is_coin_initialized<#0>() on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1903:17+44
    call $t66 := $1_TransactionFee_is_coin_initialized'#0'();
    if ($abort_flag) {
        assume {:print "$at(11,86352,86396)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t67 := 1012 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:42+38
    assume {:print "$at(11,86439,86477)"} true;
    $t67 := 1012;
    assume $IsValid'u64'($t67);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64
    // >> opaque call: $t65 := Errors::invalid_argument($t64)

    // $t68 := opaque begin: Errors::invalid_argument($t67) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64

    // assume WellFormed($t68) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64
    assume $IsValid'u64'($t68);

    // assume Eq<u64>($t68, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64
    assume $IsEqual'u64'($t68, 7);

    // $t68 := opaque end: Errors::invalid_argument($t67) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1904:17+64

    // trace_local[tmp#$21]($t68) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    assume {:print "$at(11,86328,86492)"} true;
    assume {:print "$track_local(29,33,21):", $t68} $t68 == $t68;

    // trace_local[tmp#$20]($t66) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    assume {:print "$track_local(29,33,20):", $t66} $t66 == $t66;

    // if ($t66) goto L13 else goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    if ($t66) { goto L13; } else { goto L14; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
L14:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164

    // trace_abort($t68) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    assume {:print "$at(11,86328,86492)"} true;
    assume {:print "$track_abort(29,33):", $t68} $t68 == $t68;

    // $t39 := move($t68) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    $t39 := $t68;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1902:13+164
    goto L27;

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1908:40+18
    assume {:print "$at(11,86630,86648)"} true;
L13:

    // $t69 := exists<DiemAccount::Balance<#0>>($t37) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1908:17+6
    $t69 := $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t37);

    // $t70 := 1005 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:42+30
    assume {:print "$at(11,86692,86722)"} true;
    $t70 := 1005;
    assume $IsValid'u64'($t70);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56
    // >> opaque call: $t68 := Errors::invalid_argument($t67)

    // $t71 := opaque begin: Errors::invalid_argument($t70) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56

    // assume WellFormed($t71) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56
    assume $IsValid'u64'($t71);

    // assume Eq<u64>($t71, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56
    assume $IsEqual'u64'($t71, 7);

    // $t71 := opaque end: Errors::invalid_argument($t70) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1909:17+56

    // trace_local[tmp#$23]($t71) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    assume {:print "$at(11,86583,86737)"} true;
    assume {:print "$track_local(29,33,23):", $t71} $t71 == $t71;

    // trace_local[tmp#$22]($t69) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    assume {:print "$track_local(29,33,22):", $t69} $t69 == $t69;

    // if ($t69) goto L15 else goto L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    if ($t69) { goto L15; } else { goto L16; }

    // label L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
L16:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154

    // trace_abort($t71) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    assume {:print "$at(11,86583,86737)"} true;
    assume {:print "$track_abort(29,33):", $t71} $t71 == $t71;

    // $t39 := move($t71) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    $t39 := $t71;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1907:13+154
    goto L27;

    // label L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1911:49+18
    assume {:print "$at(11,86787,86805)"} true;
L15:

    // $t72 := DiemAccount::balance<#0>($t37) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1911:34+34
    call $t72 := $1_DiemAccount_balance'#0'($t37);
    if ($abort_flag) {
        assume {:print "$at(11,86772,86806)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // trace_local[balance_amount]($t72) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1911:17+14
    assume {:print "$track_local(29,33,7):", $t72} $t72 == $t72;

    // $t73 := >=($t72, $t63) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1914:32+2
    assume {:print "$at(11,86943,86945)"} true;
    call $t73 := $Ge($t72, $t63);

    // $t74 := 1005 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:42+30
    assume {:print "$at(11,87008,87038)"} true;
    $t74 := 1005;
    assume $IsValid'u64'($t74);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56
    // >> opaque call: $t72 := Errors::invalid_argument($t71)

    // $t75 := opaque begin: Errors::invalid_argument($t74) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56

    // assume WellFormed($t75) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56
    assume $IsValid'u64'($t75);

    // assume Eq<u64>($t75, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56
    assume $IsEqual'u64'($t75, 7);

    // $t75 := opaque end: Errors::invalid_argument($t74) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1915:17+56

    // trace_local[tmp#$25]($t75) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    assume {:print "$at(11,86904,87053)"} true;
    assume {:print "$track_local(29,33,25):", $t75} $t75 == $t75;

    // trace_local[tmp#$24]($t73) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    assume {:print "$track_local(29,33,24):", $t73} $t73 == $t73;

    // if ($t73) goto L12 else goto L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    if ($t73) { goto L12; } else { goto L17; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
L17:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149

    // trace_abort($t75) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    assume {:print "$at(11,86904,87053)"} true;
    assume {:print "$track_abort(29,33):", $t75} $t75 == $t75;

    // $t39 := move($t75) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    $t39 := $t75;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1913:13+149
    goto L27;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume {:print "$at(11,87156,87184)"} true;
L12:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    // >> opaque call: $t73 := DiemTimestamp::now_seconds()

    // $t76 := opaque begin: DiemTimestamp::now_seconds() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28

    // assume Identical($t77, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume ($t77 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t77) goto L29 else goto L28 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    if ($t77) { goto L29; } else { goto L28; }

    // label L29 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
L29:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t39)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t39));

    // trace_abort($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume {:print "$at(11,87156,87184)"} true;
    assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    goto L27;

    // label L28 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
L28:

    // assume WellFormed($t76) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume $IsValid'u64'($t76);

    // assume Eq<u64>($t76, Div(DiemTimestamp::spec_now_microseconds(), 1000000)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28
    assume $IsEqual'u64'($t76, ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) div 1000000));

    // $t76 := opaque end: DiemTimestamp::now_seconds() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:13+28

    // $t78 := <($t76, $t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1921:42+1
    call $t78 := $Lt($t76, $t5);

    // $t79 := 1006 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:38+29
    assume {:print "$at(11,87253,87282)"} true;
    $t79 := 1006;
    assume $IsValid'u64'($t79);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55
    // >> opaque call: $t76 := Errors::invalid_argument($t75)

    // $t80 := opaque begin: Errors::invalid_argument($t79) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55

    // assume WellFormed($t80) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55
    assume $IsValid'u64'($t80);

    // assume Eq<u64>($t80, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55
    assume $IsEqual'u64'($t80, 7);

    // $t80 := opaque end: Errors::invalid_argument($t79) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1922:13+55

    // trace_local[tmp#$27]($t80) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    assume {:print "$at(11,87136,87293)"} true;
    assume {:print "$track_local(29,33,27):", $t80} $t80 == $t80;

    // trace_local[tmp#$26]($t78) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    assume {:print "$track_local(29,33,26):", $t78} $t78 == $t78;

    // if ($t78) goto L18 else goto L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    if ($t78) { goto L18; } else { goto L19; }

    // label L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
L19:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157

    // trace_abort($t80) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    assume {:print "$at(11,87136,87293)"} true;
    assume {:print "$track_abort(29,33):", $t80} $t80 == $t80;

    // $t39 := move($t80) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    $t39 := $t80;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1920:9+157
    goto L27;

    // label L18 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1927:14+19
    assume {:print "$at(11,87409,87428)"} true;
L18:

    // $t81 := (u128)($t1) on_abort goto L27 with $t39 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1927:13+29
    call $t81 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(11,87408,87437)"} true;
        $t39 := $abort_code;
        assume {:print "$track_abort(29,33):", $t39} $t39 == $t39;
        goto L27;
    }

    // $t82 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1927:45+7
    $t82 := 18446744073709551615;
    assume $IsValid'u128'($t82);

    // $t83 := <($t81, $t82) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1927:43+1
    call $t83 := $Lt($t81, $t82);

    // $t84 := 1011 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:36+33
    assume {:print "$at(11,87484,87517)"} true;
    $t84 := 1011;
    assume $IsValid'u64'($t84);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57
    // >> opaque call: $t81 := Errors::limit_exceeded($t80)

    // $t85 := opaque begin: Errors::limit_exceeded($t84) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57

    // assume WellFormed($t85) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57
    assume $IsValid'u64'($t85);

    // assume Eq<u64>($t85, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57
    assume $IsEqual'u64'($t85, 8);

    // $t85 := opaque end: Errors::limit_exceeded($t84) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1928:13+57

    // trace_local[tmp#$29]($t85) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    assume {:print "$at(11,87388,87528)"} true;
    assume {:print "$track_local(29,33,29):", $t85} $t85 == $t85;

    // trace_local[tmp#$28]($t83) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    assume {:print "$track_local(29,33,28):", $t83} $t83 == $t83;

    // if ($t83) goto L20 else goto L21 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    if ($t83) { goto L20; } else { goto L21; }

    // label L21 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
L21:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140

    // trace_abort($t85) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    assume {:print "$at(11,87388,87528)"} true;
    assume {:print "$track_abort(29,33):", $t85} $t85 == $t85;

    // $t39 := move($t85) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    $t39 := $t85;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1926:9+140
    goto L27;

    // label L20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1933:13+19
    assume {:print "$at(11,87651,87670)"} true;
L20:

    // $t86 := get_field<DiemAccount::DiemAccount>.sequence_number($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1933:36+30
    $t86 := $sequence_number#$1_DiemAccount_DiemAccount($t50);

    // $t87 := >=($t1, $t86) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1933:33+2
    call $t87 := $Ge($t1, $t86);

    // $t88 := 1002 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:38+33
    assume {:print "$at(11,87743,87776)"} true;
    $t88 := 1002;
    assume $IsValid'u64'($t88);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59
    // >> opaque call: $t85 := Errors::invalid_argument($t84)

    // $t89 := opaque begin: Errors::invalid_argument($t88) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59

    // assume WellFormed($t89) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59
    assume $IsValid'u64'($t89);

    // assume Eq<u64>($t89, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59
    assume $IsEqual'u64'($t89, 7);

    // $t89 := opaque end: Errors::invalid_argument($t88) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1934:13+59

    // trace_local[tmp#$31]($t89) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    assume {:print "$at(11,87631,87787)"} true;
    assume {:print "$track_local(29,33,31):", $t89} $t89 == $t89;

    // trace_local[tmp#$30]($t87) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    assume {:print "$track_local(29,33,30):", $t87} $t87 == $t87;

    // if ($t87) goto L22 else goto L23 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    if ($t87) { goto L22; } else { goto L23; }

    // label L23 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
L23:

    // destroy($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156

    // trace_abort($t89) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    assume {:print "$at(11,87631,87787)"} true;
    assume {:print "$track_abort(29,33):", $t89} $t89 == $t89;

    // $t39 := move($t89) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    $t39 := $t89;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1932:9+156
    goto L27;

    // label L22 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1940:13+19
    assume {:print "$at(11,87980,87999)"} true;
L22:

    // $t90 := get_field<DiemAccount::DiemAccount>.sequence_number($t50) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1940:36+30
    $t90 := $sequence_number#$1_DiemAccount_DiemAccount($t50);

    // $t91 := ==($t1, $t90) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1940:33+2
    $t91 := $IsEqual'u64'($t1, $t90);

    // $t92 := 1003 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:38+33
    assume {:print "$at(11,88072,88105)"} true;
    $t92 := 1003;
    assume $IsValid'u64'($t92);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59
    // >> opaque call: $t89 := Errors::invalid_argument($t88)

    // $t93 := opaque begin: Errors::invalid_argument($t92) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59

    // assume WellFormed($t93) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59
    assume $IsValid'u64'($t93);

    // assume Eq<u64>($t93, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59
    assume $IsEqual'u64'($t93, 7);

    // $t93 := opaque end: Errors::invalid_argument($t92) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1941:13+59

    // trace_local[tmp#$33]($t93) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    assume {:print "$at(11,87960,88116)"} true;
    assume {:print "$track_local(29,33,33):", $t93} $t93 == $t93;

    // trace_local[tmp#$32]($t91) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    assume {:print "$track_local(29,33,32):", $t91} $t91 == $t91;

    // if ($t91) goto L24 else goto L25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    if ($t91) { goto L24; } else { goto L25; }

    // label L25 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
L25:

    // trace_abort($t93) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    assume {:print "$at(11,87960,88116)"} true;
    assume {:print "$track_abort(29,33):", $t93} $t93 == $t93;

    // $t39 := move($t93) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    $t39 := $t93;

    // goto L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1939:9+156
    goto L27;

    // label L24 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1942:10+1
    assume {:print "$at(11,88116,88117)"} true;
L24:

    // label L26 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1945:5+1
    assume {:print "$at(11,88267,88268)"} true;
L26:

    // assert Not(Neq<u8>($t6, ChainId::spec_get_chain_id[@268]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1964:9+81
    assume {:print "$at(11,89008,89089)"} true;
    assert {:msg "assert_failed(11,89008,89089): function does not abort under this condition"}
      !!$IsEqual'u8'($t6, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#268));

    // assert Not(Not(DiemAccount::$exists_at[@269]($t35))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1966:9+71
    assume {:print "$at(11,89140,89211)"} true;
    assert {:msg "assert_failed(11,89140,89211): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#269, $t35);

    // assert Not(AccountFreezing::spec_account_is_frozen[@270]($t35)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1968:9+97
    assume {:print "$at(11,89262,89359)"} true;
    assert {:msg "assert_failed(11,89262,89359): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#270, $t35);

    // assert Not(Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@269]<DiemAccount::DiemAccount>($t35)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1970:9+133
    assume {:print "$at(11,89410,89543)"} true;
    assert {:msg "assert_failed(11,89410,89543): function does not abort under this condition"}
      !!$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#269, $t35)));

    // assert Not(Gt($t36, 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1972:9+70
    assume {:print "$at(11,89594,89664)"} true;
    assert {:msg "assert_failed(11,89594,89664): function does not abort under this condition"}
      !($t36 > 18446744073709551615);

    // assert Not(And(Gt($t36, 0), Not(TransactionFee::$is_coin_initialized[@271]<#0>()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1974:9+113
    assume {:print "$at(11,89715,89828)"} true;
    assert {:msg "assert_failed(11,89715,89828): function does not abort under this condition"}
      !(($t36 > 0) && !$1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory#271));

    // assert Not(And(Gt($t36, 0), Not(exists[@272]<DiemAccount::Balance<#0>>($t35)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1976:9+111
    assume {:print "$at(11,89879,89990)"} true;
    assert {:msg "assert_failed(11,89879,89990): function does not abort under this condition"}
      !(($t36 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#272, $t35));

    // assert Not(And(Gt($t36, 0), Lt(DiemAccount::$balance[@272]<#0>($t35), $t36))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1978:9+124
    assume {:print "$at(11,90041,90165)"} true;
    assert {:msg "assert_failed(11,90041,90165): function does not abort under this condition"}
      !(($t36 > 0) && ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#272, $t35) < $t36));

    // assert Not(Ge(DiemTimestamp::spec_now_seconds[@273](), $t5)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1980:9+105
    assume {:print "$at(11,90216,90321)"} true;
    assert {:msg "assert_failed(11,90216,90321): function does not abort under this condition"}
      !($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#273) >= $t5);

    // assert Not(Ge($t1, 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1982:9+69
    assume {:print "$at(11,90374,90443)"} true;
    assert {:msg "assert_failed(11,90374,90443): function does not abort under this condition"}
      !($t1 >= 18446744073709551615);

    // assert Not(Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@269]<DiemAccount::DiemAccount>($t35)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1984:9+118
    assume {:print "$at(11,90495,90613)"} true;
    assert {:msg "assert_failed(11,90495,90613): function does not abort under this condition"}
      !($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#269, $t35)));

    // assert Not(Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@269]<DiemAccount::DiemAccount>($t35)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1986:9+118
    assume {:print "$at(11,90665,90783)"} true;
    assert {:msg "assert_failed(11,90665,90783): function does not abort under this condition"}
      !($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#269, $t35)));

    // assert Not(Not(DiemTimestamp::$is_operating[@273]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#273);

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@269](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@269]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#269, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#269, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@272]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@272]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#272, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#272, addr))))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    return;

    // label L27 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1945:5+1
    assume {:print "$at(11,88267,88268)"} true;
L27:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Neq<u8>($t6, ChainId::spec_get_chain_id[@268]()), Not(DiemAccount::$exists_at[@269]($t35))), AccountFreezing::spec_account_is_frozen[@270]($t35)), Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@269]<DiemAccount::DiemAccount>($t35)))), Gt($t36, 18446744073709551615)), And(Gt($t36, 0), Not(TransactionFee::$is_coin_initialized[@271]<#0>()))), And(Gt($t36, 0), Not(exists[@272]<DiemAccount::Balance<#0>>($t35)))), And(Gt($t36, 0), Lt(DiemAccount::$balance[@272]<#0>($t35), $t36))), Ge(DiemTimestamp::spec_now_seconds[@273](), $t5)), Ge($t1, 18446744073709551615)), Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@269]<DiemAccount::DiemAccount>($t35)))), Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@269]<DiemAccount::DiemAccount>($t35)))), Not(DiemTimestamp::$is_operating[@273]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1946:5+287
    assume {:print "$at(11,88273,88560)"} true;
    assert {:msg "assert_failed(11,88273,88560): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((!$IsEqual'u8'($t6, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#268)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#269, $t35)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#270, $t35)) || !$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#269, $t35)))) || ($t36 > 18446744073709551615)) || (($t36 > 0) && !$1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory#271))) || (($t36 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#272, $t35))) || (($t36 > 0) && ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#272, $t35) < $t36))) || ($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#273) >= $t5)) || ($t1 >= 18446744073709551615)) || ($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#269, $t35)))) || ($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#269, $t35)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#273));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Neq<u8>($t6, ChainId::spec_get_chain_id[@268]()), Eq(7, $t39)), And(Not(DiemAccount::$exists_at[@269]($t35)), Eq(7, $t39))), And(AccountFreezing::spec_account_is_frozen[@270]($t35), Eq(1, $t39))), And(Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@269]<DiemAccount::DiemAccount>($t35))), Eq(7, $t39))), And(Gt($t36, 18446744073709551615), Eq(7, $t39))), And(And(Gt($t36, 0), Not(TransactionFee::$is_coin_initialized[@271]<#0>())), Eq(7, $t39))), And(And(Gt($t36, 0), Not(exists[@272]<DiemAccount::Balance<#0>>($t35))), Eq(7, $t39))), And(And(Gt($t36, 0), Lt(DiemAccount::$balance[@272]<#0>($t35), $t36)), Eq(7, $t39))), And(Ge(DiemTimestamp::spec_now_seconds[@273](), $t5), Eq(7, $t39))), And(Ge($t1, 18446744073709551615), Eq(8, $t39))), And(Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@269]<DiemAccount::DiemAccount>($t35))), Eq(7, $t39))), And(Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@269]<DiemAccount::DiemAccount>($t35))), Eq(7, $t39))), And(Not(DiemTimestamp::$is_operating[@273]()), Eq(1, $t39))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1946:5+287
    assert {:msg "assert_failed(11,88273,88560): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((!$IsEqual'u8'($t6, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#268)) && $IsEqual'u8'(7, $t39)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#269, $t35) && $IsEqual'u8'(7, $t39))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#270, $t35) && $IsEqual'u8'(1, $t39))) || (!$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#269, $t35))) && $IsEqual'u8'(7, $t39))) || (($t36 > 18446744073709551615) && $IsEqual'u8'(7, $t39))) || ((($t36 > 0) && !$1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory#271)) && $IsEqual'u8'(7, $t39))) || ((($t36 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#272, $t35)) && $IsEqual'u8'(7, $t39))) || ((($t36 > 0) && ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#272, $t35) < $t36)) && $IsEqual'u8'(7, $t39))) || (($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#273) >= $t5) && $IsEqual'u8'(7, $t39))) || (($t1 >= 18446744073709551615) && $IsEqual'u8'(8, $t39))) || (($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#269, $t35))) && $IsEqual'u8'(7, $t39))) || (($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#269, $t35))) && $IsEqual'u8'(7, $t39))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#273) && $IsEqual'u8'(1, $t39)));

    // abort($t39) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1946:5+287
    $abort_code := $t39;
    $abort_flag := true;
    return;

}

// fun DiemAccount::restore_key_rotation_capability [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+323
procedure {:inline 1} $1_DiemAccount_restore_key_rotation_capability(_$t0: $1_DiemAccount_KeyRotationCapability) returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_DiemAccount_DiemAccount);
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation ($1_DiemAccount_DiemAccount);
    var $t11: $Mutation ($1_Option_Option'$1_DiemAccount_KeyRotationCapability');
    var $t12: bool;
    var $t0: $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'': $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t11));

    // bytecode translation starts here
    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+1
    assume {:print "$at(11,43761,43762)"} true;
    assume {:print "$track_local(29,34,0):", $t0} $t0 == $t0;

    // $t4 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:26+19
    assume {:print "$at(11,43884,43903)"} true;
    $t4 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t5 := DiemAccount::exists_at($t4) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:16+30
    call $t5 := $1_DiemAccount_exists_at($t4);
    if ($abort_flag) {
        assume {:print "$at(11,43874,43904)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,34):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t7 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:70+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31
    // >> opaque call: $t7 := Errors::not_published($t6)

    // $t8 := opaque begin: Errors::not_published($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31
    assume $IsEqual'u64'($t8, 5);

    // $t8 := opaque end: Errors::not_published($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31

    // trace_local[tmp#$3]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    assume {:print "$track_local(29,34,3):", $t8} $t8 == $t8;

    // trace_local[tmp#$2]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    assume {:print "$track_local(29,34,2):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
L1:

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    assume {:print "$at(11,43867,43938)"} true;
    assume {:print "$track_abort(29,34):", $t8} $t8 == $t8;

    // $t6 := move($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    $t6 := $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:54+3
    assume {:print "$at(11,43993,43996)"} true;
L0:

    // $t9 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:54+19
    $t9 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t10 := borrow_global<DiemAccount::DiemAccount>($t9) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:23+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t9)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t9), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t9));
    }
    if ($abort_flag) {
        assume {:print "$at(11,43962,43979)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,34):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_local[account]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:13+7
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t10);
    assume {:print "$track_local(29,34,1):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t11 := borrow_field<DiemAccount::DiemAccount>.key_rotation_capability($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:22+36
    assume {:print "$at(11,44036,44072)"} true;
    $t11 := $ChildMutation($t10, 2, $key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t10)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    // >> opaque call: Option::fill<DiemAccount::KeyRotationCapability>($t10, $t0)

    // opaque begin: Option::fill<DiemAccount::KeyRotationCapability>($t11, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55

    // assume Identical($t12, Option::$is_some<DiemAccount::KeyRotationCapability>($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume ($t12 == $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($Dereference($t11)));

    // if ($t12) goto L6 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    if ($t12) { goto L6; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
L5:

    // assume And(Option::$is_some<DiemAccount::KeyRotationCapability>($t11), Eq(7, $t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume ($1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($Dereference($t11)) && $IsEqual'u8'(7, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume {:print "$at(11,44023,44078)"} true;
    assume {:print "$track_abort(29,34):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
L4:

    // havoc[mut]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    havoc $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'';
    $t11 := $UpdateMutation($t11, $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'');
    assume $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t11));

    // assume And(WellFormed($t11), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec($t11)), 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume ($IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t11)) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($Dereference($t11))) <= 1));

    // assume Option::$is_some<DiemAccount::KeyRotationCapability>($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($Dereference($t11));

    // assume Eq<DiemAccount::KeyRotationCapability>(Option::$borrow<DiemAccount::KeyRotationCapability>($t11), $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume $IsEqual'$1_DiemAccount_KeyRotationCapability'($1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($Dereference($t11)), $t0);

    // opaque end: Option::fill<DiemAccount::KeyRotationCapability>($t11, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55

    // write_back[Reference($t10).key_rotation_capability]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    $t10 := $UpdateMutation($t10, $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability($Dereference($t10), $Dereference($t11)));

    // pack_ref_deep($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55

    // write_back[DiemAccount::DiemAccount@]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:985:5+1
    assume {:print "$at(11,44083,44084)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:985:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:985:5+1
L3:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:985:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

    // label L6 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L6:

    // destroy($t10) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun DiemAccount::restore_key_rotation_capability [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+323
procedure {:timeLimit 40} $1_DiemAccount_restore_key_rotation_capability$verify(_$t0: $1_DiemAccount_KeyRotationCapability) returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_DiemAccount_DiemAccount);
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation ($1_DiemAccount_DiemAccount);
    var $t11: $Mutation ($1_Option_Option'$1_DiemAccount_KeyRotationCapability');
    var $t12: bool;
    var $t0: $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'': $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#136: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#630: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t11));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+323
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,43761,44084)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+323
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+323
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+323
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+323
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+323
    assume $IsValid'$1_DiemAccount_KeyRotationCapability'($t0);

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+323
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // @136 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+1
    $1_DiemAccount_DiemAccount_$memory#136 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+1
    assume {:print "$track_local(29,34,0):", $t0} $t0 == $t0;

    // $t4 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:26+19
    assume {:print "$at(11,43884,43903)"} true;
    $t4 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t5 := DiemAccount::exists_at($t4) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:16+30
    call $t5 := $1_DiemAccount_exists_at($t4);
    if ($abort_flag) {
        assume {:print "$at(11,43874,43904)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,34):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t7 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:70+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31
    // >> opaque call: $t7 := Errors::not_published($t6)

    // $t8 := opaque begin: Errors::not_published($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31
    assume $IsEqual'u64'($t8, 5);

    // $t8 := opaque end: Errors::not_published($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31

    // trace_local[tmp#$3]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    assume {:print "$track_local(29,34,3):", $t8} $t8 == $t8;

    // trace_local[tmp#$2]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    assume {:print "$track_local(29,34,2):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
L1:

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    assume {:print "$at(11,43867,43938)"} true;
    assume {:print "$track_abort(29,34):", $t8} $t8 == $t8;

    // $t6 := move($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    $t6 := $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:54+3
    assume {:print "$at(11,43993,43996)"} true;
L0:

    // $t9 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:54+19
    $t9 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t10 := borrow_global<DiemAccount::DiemAccount>($t9) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:23+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t9)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t9), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t9));
    }
    if ($abort_flag) {
        assume {:print "$at(11,43962,43979)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,34):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_local[account]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:13+7
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t10);
    assume {:print "$track_local(29,34,1):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t11 := borrow_field<DiemAccount::DiemAccount>.key_rotation_capability($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:22+36
    assume {:print "$at(11,44036,44072)"} true;
    $t11 := $ChildMutation($t10, 2, $key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t10)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    // >> opaque call: Option::fill<DiemAccount::KeyRotationCapability>($t10, $t0)

    // opaque begin: Option::fill<DiemAccount::KeyRotationCapability>($t11, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55

    // assume Identical($t12, Option::$is_some<DiemAccount::KeyRotationCapability>($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume ($t12 == $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($Dereference($t11)));

    // if ($t12) goto L6 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    if ($t12) { goto L6; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
L5:

    // assume And(Option::$is_some<DiemAccount::KeyRotationCapability>($t11), Eq(7, $t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume ($1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($Dereference($t11)) && $IsEqual'u8'(7, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume {:print "$at(11,44023,44078)"} true;
    assume {:print "$track_abort(29,34):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
L4:

    // havoc[mut]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    havoc $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'';
    $t11 := $UpdateMutation($t11, $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'');
    assume $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t11));

    // assume And(WellFormed($t11), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec($t11)), 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume ($IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t11)) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($Dereference($t11))) <= 1));

    // assume Option::$is_some<DiemAccount::KeyRotationCapability>($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($Dereference($t11));

    // assume Eq<DiemAccount::KeyRotationCapability>(Option::$borrow<DiemAccount::KeyRotationCapability>($t11), $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume $IsEqual'$1_DiemAccount_KeyRotationCapability'($1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($Dereference($t11)), $t0);

    // opaque end: Option::fill<DiemAccount::KeyRotationCapability>($t11, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55

    // write_back[Reference($t10).key_rotation_capability]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    $t10 := $UpdateMutation($t10, $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability($Dereference($t10), $Dereference($t11)));

    // assert Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($t10))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assume {:print "$at(44,561,585)"} true;
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t10)))) <= 1);

    // assert Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($t10))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t10)))) <= 1);

    // @630 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+323
    // state save for global update invariants
    assume {:print "$at(11,43761,44084)"} true;
    $1_DiemAccount_DiemAccount_$memory#630 := $1_DiemAccount_DiemAccount_$memory;

    // write_back[DiemAccount::DiemAccount@]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume {:print "$at(11,44023,44078)"} true;
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,100705,100852)"} true;
    assert {:msg "assert_failed(11,100705,100852): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume {:print "$at(11,102296,102446)"} true;
    assert {:msg "assert_failed(11,102296,102446): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@630](addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    assume {:print "$at(11,104197,104279)"} true;
    assert {:msg "assert_failed(11,104197,104279): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#630, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume {:print "$at(11,105582,105664)"} true;
    assert {:msg "assert_failed(11,105582,105664): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(11,106721,106818)"} true;
    assert {:msg "assert_failed(11,106721,106818): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assert And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume {:print "$at(11,106916,107031)"} true;
    assert {:msg "assert_failed(11,106916,107031): global memory invariant does not hold"}
      (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:985:5+1
    assume {:print "$at(11,44083,44084)"} true;
L2:

    // assert Not(Not(DiemAccount::$exists_at[@136](select DiemAccount::KeyRotationCapability.account_address($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:992:9+69
    assume {:print "$at(11,44340,44409)"} true;
    assert {:msg "assert_failed(11,44340,44409): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#136, $account_address#$1_DiemAccount_KeyRotationCapability($t0));

    // assert Not(Not(DiemAccount::$delegated_key_rotation_capability[@136](select DiemAccount::KeyRotationCapability.account_address($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:993:9+96
    assume {:print "$at(11,44418,44514)"} true;
    assert {:msg "assert_failed(11,44418,44514): function does not abort under this condition"}
      !!$1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory#136, $account_address#$1_DiemAccount_KeyRotationCapability($t0));

    // assert DiemAccount::spec_holds_own_key_rotation_cap(select DiemAccount::KeyRotationCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:997:9+61
    assume {:print "$at(11,44619,44680)"} true;
    assert {:msg "assert_failed(11,44619,44680): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_KeyRotationCapability($t0));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@136]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@136]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#136, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#136, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@136](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@136]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#136, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#136, addr)))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:985:5+1
    assume {:print "$at(11,44083,44084)"} true;
L3:

    // assert Or(Not(DiemAccount::$exists_at[@136](select DiemAccount::KeyRotationCapability.account_address($t0))), Not(DiemAccount::$delegated_key_rotation_capability[@136](select DiemAccount::KeyRotationCapability.account_address($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:986:5+151
    assume {:print "$at(11,44089,44240)"} true;
    assert {:msg "assert_failed(11,44089,44240): abort not covered by any of the `aborts_if` clauses"}
      (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#136, $account_address#$1_DiemAccount_KeyRotationCapability($t0)) || !$1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory#136, $account_address#$1_DiemAccount_KeyRotationCapability($t0)));

    // assert Or(And(Not(DiemAccount::$exists_at[@136](select DiemAccount::KeyRotationCapability.account_address($t0))), Eq(5, $t6)), And(Not(DiemAccount::$delegated_key_rotation_capability[@136](select DiemAccount::KeyRotationCapability.account_address($t0))), Eq(7, $t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:986:5+151
    assert {:msg "assert_failed(11,44089,44240): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#136, $account_address#$1_DiemAccount_KeyRotationCapability($t0)) && $IsEqual'u8'(5, $t6)) || (!$1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory#136, $account_address#$1_DiemAccount_KeyRotationCapability($t0)) && $IsEqual'u8'(7, $t6)));

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:986:5+151
    $abort_code := $t6;
    $abort_flag := true;
    return;

    // label L6 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L6:

    // destroy($t10) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun DiemAccount::restore_withdraw_capability [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:756:5+618
procedure {:timeLimit 40} $1_DiemAccount_restore_withdraw_capability$verify(_$t0: $1_DiemAccount_WithdrawCapability) returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_DiemAccount_DiemAccount);
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($1_DiemAccount_DiemAccount);
    var $t18: $Mutation ($1_Option_Option'$1_DiemAccount_WithdrawCapability');
    var $t19: bool;
    var $t0: $1_DiemAccount_WithdrawCapability;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'$1_Option_Option'$1_DiemAccount_WithdrawCapability'': $1_Option_Option'$1_DiemAccount_WithdrawCapability';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#178: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#631: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:756:5+618
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,33902,34520)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:756:5+618
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:756:5+618
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:756:5+618
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:756:5+618
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:756:5+618
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t0);

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:756:5+618
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume Identical($t6, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:771:9+35
    assume {:print "$at(11,34592,34627)"} true;
    assume ($t6 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume CanModify<DiemAccount::DiemAccount>($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:772:9+39
    assume {:print "$at(11,34636,34675)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t6];

    // @178 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:772:9+39
    $1_DiemAccount_DiemAccount_$memory#178 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:756:5+1
    assume {:print "$at(11,33902,33903)"} true;
    assume {:print "$track_local(29,35,0):", $t0} $t0 == $t0;

    // $t7 := get_field<DiemAccount::WithdrawCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:26+19
    assume {:print "$at(11,34018,34037)"} true;
    $t7 := $account_address#$1_DiemAccount_WithdrawCapability($t0);

    // $t8 := DiemAccount::exists_at($t7) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:16+30
    call $t8 := $1_DiemAccount_exists_at($t7);
    if ($abort_flag) {
        assume {:print "$at(11,34008,34038)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,35):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t10 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:70+8
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:48+31
    // >> opaque call: $t9 := Errors::not_published($t8)

    // $t11 := opaque begin: Errors::not_published($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:48+31

    // assume WellFormed($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:48+31
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:48+31
    assume $IsEqual'u64'($t11, 5);

    // $t11 := opaque end: Errors::not_published($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:48+31

    // trace_local[tmp#$3]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+71
    assume {:print "$track_local(29,35,3):", $t11} $t11 == $t11;

    // trace_local[tmp#$2]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+71
    assume {:print "$track_local(29,35,2):", $t8} $t8 == $t8;

    // if ($t8) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+71
    if ($t8) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+71
L1:

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+71
    assume {:print "$at(11,34001,34072)"} true;
    assume {:print "$track_abort(29,35):", $t11} $t11 == $t11;

    // $t9 := move($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+71
    $t9 := $t11;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+71
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:762:43+3
    assume {:print "$at(11,34277,34280)"} true;
L0:

    // $t12 := get_field<DiemAccount::WithdrawCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:762:43+19
    $t12 := $account_address#$1_DiemAccount_WithdrawCapability($t0);

    // $t13 := DiemAccount::delegated_withdraw_capability($t12) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:762:13+50
    call $t13 := $1_DiemAccount_delegated_withdraw_capability($t12);
    if ($abort_flag) {
        assume {:print "$at(11,34247,34297)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,35):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t14 := 11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:763:35+34
    assume {:print "$at(11,34333,34367)"} true;
    $t14 := 11;
    assume $IsValid'u64'($t14);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:763:13+57
    // >> opaque call: $t13 := Errors::invalid_state($t12)

    // $t15 := opaque begin: Errors::invalid_state($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:763:13+57

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:763:13+57
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:763:13+57
    assume $IsEqual'u64'($t15, 1);

    // $t15 := opaque end: Errors::invalid_state($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:763:13+57

    // trace_local[tmp#$5]($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:761:9+151
    assume {:print "$at(11,34227,34378)"} true;
    assume {:print "$track_local(29,35,5):", $t15} $t15 == $t15;

    // trace_local[tmp#$4]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:761:9+151
    assume {:print "$track_local(29,35,4):", $t13} $t13 == $t13;

    // if ($t13) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:761:9+151
    if ($t13) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:761:9+151
L3:

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:761:9+151
    assume {:print "$at(11,34227,34378)"} true;
    assume {:print "$track_abort(29,35):", $t15} $t15 == $t15;

    // $t9 := move($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:761:9+151
    $t9 := $t15;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:761:9+151
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:765:54+3
    assume {:print "$at(11,34433,34436)"} true;
L2:

    // $t16 := get_field<DiemAccount::WithdrawCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:765:54+19
    $t16 := $account_address#$1_DiemAccount_WithdrawCapability($t0);

    // assert CanModify<DiemAccount::DiemAccount>($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:765:23+17
    assert {:msg "assert_failed(11,34402,34419): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t16];

    // $t17 := borrow_global<DiemAccount::DiemAccount>($t16) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:765:23+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t16)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t16), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t16));
    }
    if ($abort_flag) {
        assume {:print "$at(11,34402,34419)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,35):", $t9} $t9 == $t9;
        goto L5;
    }

    // trace_local[account]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:765:13+7
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t17);
    assume {:print "$track_local(29,35,1):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t18 := borrow_field<DiemAccount::DiemAccount>.withdraw_capability($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:22+32
    assume {:print "$at(11,34476,34508)"} true;
    $t18 := $ChildMutation($t17, 1, $withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t17)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
    // >> opaque call: Option::fill<DiemAccount::WithdrawCapability>($t16, $t0)

    // opaque begin: Option::fill<DiemAccount::WithdrawCapability>($t18, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51

    // assume Identical($t19, Option::$is_some<DiemAccount::WithdrawCapability>($t18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
    assume ($t19 == $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'($Dereference($t18)));

    // if ($t19) goto L8 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
    if ($t19) { goto L8; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
L7:

    // assume And(Option::$is_some<DiemAccount::WithdrawCapability>($t18), Eq(7, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
    assume ($1_Option_$is_some'$1_DiemAccount_WithdrawCapability'($Dereference($t18)) && $IsEqual'u8'(7, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
    assume {:print "$at(11,34463,34514)"} true;
    assume {:print "$track_abort(29,35):", $t9} $t9 == $t9;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
L6:

    // havoc[mut]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
    havoc $temp_0'$1_Option_Option'$1_DiemAccount_WithdrawCapability'';
    $t18 := $UpdateMutation($t18, $temp_0'$1_Option_Option'$1_DiemAccount_WithdrawCapability'');
    assume $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($Dereference($t18));

    // assume And(WellFormed($t18), Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec($t18)), 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
    assume ($IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($Dereference($t18)) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($Dereference($t18))) <= 1));

    // assume Option::$is_some<DiemAccount::WithdrawCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
    assume $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'($Dereference($t18));

    // assume Eq<DiemAccount::WithdrawCapability>(Option::$borrow<DiemAccount::WithdrawCapability>($t18), $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($1_Option_$borrow'$1_DiemAccount_WithdrawCapability'($Dereference($t18)), $t0);

    // opaque end: Option::fill<DiemAccount::WithdrawCapability>($t18, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51

    // write_back[Reference($t17).withdraw_capability]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
    $t17 := $UpdateMutation($t17, $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($Dereference($t17), $Dereference($t18)));

    // assert Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($t17))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assume {:print "$at(44,561,585)"} true;
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t17)))) <= 1);

    // assert Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($t17))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t17)))) <= 1);

    // @631 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:756:5+618
    // state save for global update invariants
    assume {:print "$at(11,33902,34520)"} true;
    $1_DiemAccount_DiemAccount_$memory#631 := $1_DiemAccount_DiemAccount_$memory;

    // write_back[DiemAccount::DiemAccount@]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:766:9+51
    assume {:print "$at(11,34463,34514)"} true;
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,100705,100852)"} true;
    assert {:msg "assert_failed(11,100705,100852): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume {:print "$at(11,102296,102446)"} true;
    assert {:msg "assert_failed(11,102296,102446): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@631](addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    assume {:print "$at(11,104197,104279)"} true;
    assert {:msg "assert_failed(11,104197,104279): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#631, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume {:print "$at(11,105582,105664)"} true;
    assert {:msg "assert_failed(11,105582,105664): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(11,106721,106818)"} true;
    assert {:msg "assert_failed(11,106721,106818): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assert And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume {:print "$at(11,106916,107031)"} true;
    assert {:msg "assert_failed(11,106916,107031): global memory invariant does not hold"}
      (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:767:5+1
    assume {:print "$at(11,34519,34520)"} true;
L4:

    // assert Not(Not(DiemAccount::$exists_at[@178]($t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:775:9+58
    assume {:print "$at(11,34840,34898)"} true;
    assert {:msg "assert_failed(11,34840,34898): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#178, $t6);

    // assert Not(Not(DiemAccount::$delegated_withdraw_capability[@178]($t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:776:9+78
    assume {:print "$at(11,34907,34985)"} true;
    assert {:msg "assert_failed(11,34907,34985): function does not abort under this condition"}
      !!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#178, $t6);

    // assert Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t6), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@178]<DiemAccount::DiemAccount>($t6), Option::spec_some<DiemAccount::WithdrawCapability>($t0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:773:9+147
    assume {:print "$at(11,34684,34831)"} true;
    assert {:msg "assert_failed(11,34684,34831): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t6), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#178, $t6), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t0)));

    // assert DiemAccount::spec_holds_own_withdraw_cap($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+46
    assume {:print "$at(11,34994,35040)"} true;
    assert {:msg "assert_failed(11,34994,35040): post-condition does not hold"}
      $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t6);

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@178]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@178](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#178, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#178, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@178](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@178]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#178, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#178, addr)))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:767:5+1
    assume {:print "$at(11,34519,34520)"} true;
L5:

    // assert Or(Not(DiemAccount::$exists_at[@178]($t6)), Not(DiemAccount::$delegated_withdraw_capability[@178]($t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:769:5+520
    assume {:print "$at(11,34526,35046)"} true;
    assert {:msg "assert_failed(11,34526,35046): abort not covered by any of the `aborts_if` clauses"}
      (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#178, $t6) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#178, $t6));

    // assert Or(And(Not(DiemAccount::$exists_at[@178]($t6)), Eq(5, $t9)), And(Not(DiemAccount::$delegated_withdraw_capability[@178]($t6)), Eq(1, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:769:5+520
    assert {:msg "assert_failed(11,34526,35046): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#178, $t6) && $IsEqual'u8'(5, $t9)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#178, $t6) && $IsEqual'u8'(1, $t9)));

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:769:5+520
    $abort_code := $t9;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t17) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// fun DiemAccount::rotate_authentication_key [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+612
procedure {:inline 1} $1_DiemAccount_rotate_authentication_key(_$t0: $1_DiemAccount_KeyRotationCapability, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_DiemAccount_DiemAccount);
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($1_DiemAccount_DiemAccount);
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $Mutation (Vec (int));
    var $t0: $1_DiemAccount_KeyRotationCapability;
    var $t1: Vec (int);
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t19));

    // bytecode translation starts here
    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+1
    assume {:print "$at(11,40375,40376)"} true;
    assume {:print "$track_local(29,36,0):", $t0} $t0 == $t0;

    // trace_local[new_authentication_key]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+1
    assume {:print "$track_local(29,36,1):", $t1} $t1 == $t1;

    // $t7 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:26+19
    assume {:print "$at(11,40549,40568)"} true;
    $t7 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t8 := DiemAccount::exists_at($t7) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:16+30
    call $t8 := $1_DiemAccount_exists_at($t7);
    if ($abort_flag) {
        assume {:print "$at(11,40539,40569)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,36):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t10 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:70+8
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31
    // >> opaque call: $t10 := Errors::not_published($t9)

    // $t11 := opaque begin: Errors::not_published($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31

    // assume WellFormed($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31
    assume $IsEqual'u64'($t11, 5);

    // $t11 := opaque end: Errors::not_published($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31

    // trace_local[tmp#$4]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    assume {:print "$track_local(29,36,4):", $t11} $t11 == $t11;

    // trace_local[tmp#$3]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    assume {:print "$track_local(29,36,3):", $t8} $t8 == $t8;

    // if ($t8) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    if ($t8) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    assume {:print "$at(11,40532,40603)"} true;
    assume {:print "$track_abort(29,36):", $t11} $t11 == $t11;

    // $t9 := move($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    $t9 := $t11;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:70+3
    assume {:print "$at(11,40674,40677)"} true;
L0:

    // $t12 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:70+19
    $t12 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t13 := borrow_global<DiemAccount::DiemAccount>($t12) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:39+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t12)) {
        call $ExecFailureAbort();
    } else {
        $t13 := $Mutation($Global($t12), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12));
    }
    if ($abort_flag) {
        assume {:print "$at(11,40643,40660)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,36):", $t9} $t9 == $t9;
        goto L5;
    }

    // trace_local[sender_account_resource]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:13+23
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t13);
    assume {:print "$track_local(29,36,2):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t14 := Vector::length<u8>($t1) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:917:13+39
    assume {:print "$at(11,40779,40818)"} true;
    call $t14 := $1_Vector_length'u8'($t1);
    if ($abort_flag) {
        assume {:print "$at(11,40779,40818)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,36):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t15 := 32 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:917:56+2
    $t15 := 32;
    assume $IsValid'u64'($t15);

    // $t16 := ==($t14, $t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:917:53+2
    $t16 := $IsEqual'u64'($t14, $t15);

    // $t17 := 8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:38+29
    assume {:print "$at(11,40863,40892)"} true;
    $t17 := 8;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55
    // >> opaque call: $t17 := Errors::invalid_argument($t16)

    // $t18 := opaque begin: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55
    assume $IsEqual'u64'($t18, 7);

    // $t18 := opaque end: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55

    // trace_local[tmp#$6]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    assume {:print "$at(11,40759,40903)"} true;
    assume {:print "$track_local(29,36,6):", $t18} $t18 == $t18;

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    assume {:print "$track_local(29,36,5):", $t16} $t16 == $t16;

    // if ($t16) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    if ($t16) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
L3:

    // pack_ref_deep($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144

    // destroy($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    assume {:print "$at(11,40759,40903)"} true;
    assume {:print "$track_abort(29,36):", $t18} $t18 == $t18;

    // $t9 := move($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    $t9 := $t18;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:54+22
    assume {:print "$at(11,40958,40980)"} true;
L2:

    // $t19 := borrow_field<DiemAccount::DiemAccount>.authentication_key($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+42
    $t19 := $ChildMutation($t13, 0, $authentication_key#$1_DiemAccount_DiemAccount($Dereference($t13)));

    // write_ref($t19, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+67
    $t19 := $UpdateMutation($t19, $t1);

    // write_back[Reference($t13).authentication_key]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+67
    $t13 := $UpdateMutation($t13, $Update'$1_DiemAccount_DiemAccount'_authentication_key($Dereference($t13), $Dereference($t19)));

    // pack_ref_deep($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+67

    // write_back[DiemAccount::DiemAccount@]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+67
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t13),
        $Dereference($t13));

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:921:5+1
    assume {:print "$at(11,40986,40987)"} true;
L4:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:921:5+1
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:921:5+1
L5:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:921:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun DiemAccount::rotate_authentication_key [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+612
procedure {:timeLimit 40} $1_DiemAccount_rotate_authentication_key$verify(_$t0: $1_DiemAccount_KeyRotationCapability, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_DiemAccount_DiemAccount);
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($1_DiemAccount_DiemAccount);
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $Mutation (Vec (int));
    var $t0: $1_DiemAccount_KeyRotationCapability;
    var $t1: Vec (int);
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_DiemAccount_$memory#119: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#629: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t19));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+612
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,40375,40987)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+612
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+612
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+612
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+612
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+612
    assume $IsValid'$1_DiemAccount_KeyRotationCapability'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+612
    assume $IsValid'vec'u8''($t1);

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+612
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // @119 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+1
    $1_DiemAccount_DiemAccount_$memory#119 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+1
    assume {:print "$track_local(29,36,0):", $t0} $t0 == $t0;

    // trace_local[new_authentication_key]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+1
    assume {:print "$track_local(29,36,1):", $t1} $t1 == $t1;

    // $t7 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:26+19
    assume {:print "$at(11,40549,40568)"} true;
    $t7 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t8 := DiemAccount::exists_at($t7) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:16+30
    call $t8 := $1_DiemAccount_exists_at($t7);
    if ($abort_flag) {
        assume {:print "$at(11,40539,40569)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,36):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t10 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:70+8
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31
    // >> opaque call: $t10 := Errors::not_published($t9)

    // $t11 := opaque begin: Errors::not_published($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31

    // assume WellFormed($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31
    assume $IsEqual'u64'($t11, 5);

    // $t11 := opaque end: Errors::not_published($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31

    // trace_local[tmp#$4]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    assume {:print "$track_local(29,36,4):", $t11} $t11 == $t11;

    // trace_local[tmp#$3]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    assume {:print "$track_local(29,36,3):", $t8} $t8 == $t8;

    // if ($t8) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    if ($t8) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    assume {:print "$at(11,40532,40603)"} true;
    assume {:print "$track_abort(29,36):", $t11} $t11 == $t11;

    // $t9 := move($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    $t9 := $t11;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:70+3
    assume {:print "$at(11,40674,40677)"} true;
L0:

    // $t12 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:70+19
    $t12 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t13 := borrow_global<DiemAccount::DiemAccount>($t12) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:39+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t12)) {
        call $ExecFailureAbort();
    } else {
        $t13 := $Mutation($Global($t12), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12));
    }
    if ($abort_flag) {
        assume {:print "$at(11,40643,40660)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,36):", $t9} $t9 == $t9;
        goto L5;
    }

    // trace_local[sender_account_resource]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:13+23
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t13);
    assume {:print "$track_local(29,36,2):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t14 := Vector::length<u8>($t1) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:917:13+39
    assume {:print "$at(11,40779,40818)"} true;
    call $t14 := $1_Vector_length'u8'($t1);
    if ($abort_flag) {
        assume {:print "$at(11,40779,40818)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,36):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t15 := 32 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:917:56+2
    $t15 := 32;
    assume $IsValid'u64'($t15);

    // $t16 := ==($t14, $t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:917:53+2
    $t16 := $IsEqual'u64'($t14, $t15);

    // $t17 := 8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:38+29
    assume {:print "$at(11,40863,40892)"} true;
    $t17 := 8;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55
    // >> opaque call: $t17 := Errors::invalid_argument($t16)

    // $t18 := opaque begin: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55
    assume $IsEqual'u64'($t18, 7);

    // $t18 := opaque end: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55

    // trace_local[tmp#$6]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    assume {:print "$at(11,40759,40903)"} true;
    assume {:print "$track_local(29,36,6):", $t18} $t18 == $t18;

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    assume {:print "$track_local(29,36,5):", $t16} $t16 == $t16;

    // if ($t16) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    if ($t16) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
L3:

    // assert Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($t13))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assume {:print "$at(44,561,585)"} true;
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t13)))) <= 1);

    // assert Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($t13))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t13)))) <= 1);

    // destroy($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    assume {:print "$at(11,40759,40903)"} true;

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    assume {:print "$at(11,40759,40903)"} true;
    assume {:print "$track_abort(29,36):", $t18} $t18 == $t18;

    // $t9 := move($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    $t9 := $t18;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:54+22
    assume {:print "$at(11,40958,40980)"} true;
L2:

    // $t19 := borrow_field<DiemAccount::DiemAccount>.authentication_key($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+42
    $t19 := $ChildMutation($t13, 0, $authentication_key#$1_DiemAccount_DiemAccount($Dereference($t13)));

    // write_ref($t19, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+67
    $t19 := $UpdateMutation($t19, $t1);

    // write_back[Reference($t13).authentication_key]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+67
    $t13 := $UpdateMutation($t13, $Update'$1_DiemAccount_DiemAccount'_authentication_key($Dereference($t13), $Dereference($t19)));

    // assert Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($t13))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assume {:print "$at(44,561,585)"} true;
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t13)))) <= 1);

    // assert Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($t13))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t13)))) <= 1);

    // @629 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+612
    // state save for global update invariants
    assume {:print "$at(11,40375,40987)"} true;
    $1_DiemAccount_DiemAccount_$memory#629 := $1_DiemAccount_DiemAccount_$memory;

    // write_back[DiemAccount::DiemAccount@]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+67
    assume {:print "$at(11,40913,40980)"} true;
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t13),
        $Dereference($t13));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,100705,100852)"} true;
    assert {:msg "assert_failed(11,100705,100852): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume {:print "$at(11,102296,102446)"} true;
    assert {:msg "assert_failed(11,102296,102446): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@629](addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2281:9+82
    assume {:print "$at(11,104197,104279)"} true;
    assert {:msg "assert_failed(11,104197,104279): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#629, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume {:print "$at(11,105582,105664)"} true;
    assert {:msg "assert_failed(11,105582,105664): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume {:print "$at(11,106721,106818)"} true;
    assert {:msg "assert_failed(11,106721,106818): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assert And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume {:print "$at(11,106916,107031)"} true;
    assert {:msg "assert_failed(11,106916,107031): global memory invariant does not hold"}
      (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:921:5+1
    assume {:print "$at(11,40986,40987)"} true;
L4:

    // assert Not(Not(DiemAccount::$exists_at[@119](select DiemAccount::KeyRotationCapability.account_address($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:930:9+69
    assume {:print "$at(11,41337,41406)"} true;
    assert {:msg "assert_failed(11,41337,41406): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#119, $account_address#$1_DiemAccount_KeyRotationCapability($t0));

    // assert Not(Neq<num>(Len<u8>($t1), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:931:9+74
    assume {:print "$at(11,41415,41489)"} true;
    assert {:msg "assert_failed(11,41415,41489): function does not abort under this condition"}
      !!$IsEqual'num'(LenVec($t1), 32);

    // assert Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(select DiemAccount::KeyRotationCapability.account_address($t0))), $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:936:9+79
    assume {:print "$at(11,41620,41699)"} true;
    assert {:msg "assert_failed(11,41620,41699): post-condition does not hold"}
      $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_KeyRotationCapability($t0))), $t1);

    // assert forall addr: TypeDomain<address>() where And(Neq<address>(addr, select DiemAccount::KeyRotationCapability.account_address($t0)), DiemAccount::$exists_at[@119](addr)): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@119]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:943:9+198
    assume {:print "$at(11,41915,42113)"} true;
    assert {:msg "assert_failed(11,41915,42113): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$IsEqual'address'(addr, $account_address#$1_DiemAccount_KeyRotationCapability($t0)) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#119, addr)))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#119, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@119]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@119](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#119, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#119, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@119]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@119]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#119, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#119, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:921:5+1
    assume {:print "$at(11,40986,40987)"} true;
L5:

    // assert Or(Not(DiemAccount::$exists_at[@119](select DiemAccount::KeyRotationCapability.account_address($t0))), Neq<num>(Len<u8>($t1), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:922:5+205
    assume {:print "$at(11,40992,41197)"} true;
    assert {:msg "assert_failed(11,40992,41197): abort not covered by any of the `aborts_if` clauses"}
      (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#119, $account_address#$1_DiemAccount_KeyRotationCapability($t0)) || !$IsEqual'num'(LenVec($t1), 32));

    // assert Or(And(Not(DiemAccount::$exists_at[@119](select DiemAccount::KeyRotationCapability.account_address($t0))), Eq(5, $t9)), And(Neq<num>(Len<u8>($t1), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:922:5+205
    assert {:msg "assert_failed(11,40992,41197): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#119, $account_address#$1_DiemAccount_KeyRotationCapability($t0)) && $IsEqual'u8'(5, $t9)) || (!$IsEqual'num'(LenVec($t1), 32) && $IsEqual'u8'(7, $t9)));

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:922:5+205
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun DiemAccount::script_prologue [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
procedure {:timeLimit 40} $1_DiemAccount_script_prologue$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: int, _$t4: int, _$t5: int, _$t6: int, _$t7: Vec (int)) returns ()
{
    // declare local variables
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: Vec (int);
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Roles_RoleId_$memory#351: $Memory $1_Roles_RoleId;
    var $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#352: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
    var $1_DiemTransactionPublishingOption_HaltAllTransactions_$memory#353: $Memory $1_DiemTransactionPublishingOption_HaltAllTransactions;
    var $1_ChainId_ChainId_$memory#354: $Memory $1_ChainId_ChainId;
    var $1_DiemAccount_DiemAccount_$memory#355: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountFreezing_FreezingBit_$memory#356: $Memory $1_AccountFreezing_FreezingBit;
    var $1_TransactionFee_TransactionFee'#0'_$memory#357: $Memory $1_TransactionFee_TransactionFee'#0';
    var $1_DiemAccount_Balance'#0'_$memory#358: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#359: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;
    $t7 := _$t7;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,76254,76992)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume $IsValid'u64'($t5);

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume $IsValid'u8'($t6);

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume $IsValid'vec'u8''($t7);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemTransactionPublishingOption::HaltAllTransactions>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTransactionPublishingOption_HaltAllTransactions_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTransactionPublishingOption_HaltAllTransactions_$memory, $a_0);
    ($IsValid'$1_DiemTransactionPublishingOption_HaltAllTransactions'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+738
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1686:9+57
    assume {:print "$at(11,77028,77085)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Mul($t3, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1687:9+60
    assume {:print "$at(11,77094,77154)"} true;
    assume ($t11 == ($t3 * $t4));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1702:9+57
    assume {:print "$at(11,77641,77698)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // @359 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    assume {:print "$at(11,76254,76255)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#359 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @351 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    $1_Roles_RoleId_$memory#351 := $1_Roles_RoleId_$memory;

    // @352 := save_mem(DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#352 := $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory;

    // @357 := save_mem(TransactionFee::TransactionFee<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    $1_TransactionFee_TransactionFee'#0'_$memory#357 := $1_TransactionFee_TransactionFee'#0'_$memory;

    // @353 := save_mem(DiemTransactionPublishingOption::HaltAllTransactions) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    $1_DiemTransactionPublishingOption_HaltAllTransactions_$memory#353 := $1_DiemTransactionPublishingOption_HaltAllTransactions_$memory;

    // @354 := save_mem(ChainId::ChainId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    $1_ChainId_ChainId_$memory#354 := $1_ChainId_ChainId_$memory;

    // @356 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    $1_AccountFreezing_FreezingBit_$memory#356 := $1_AccountFreezing_FreezingBit_$memory;

    // @355 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    $1_DiemAccount_DiemAccount_$memory#355 := $1_DiemAccount_DiemAccount_$memory;

    // @358 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    $1_DiemAccount_Balance'#0'_$memory#358 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[sender]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    assume {:print "$track_local(29,37,0):", $t0} $t0 == $t0;

    // trace_local[txn_sequence_number]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    assume {:print "$track_local(29,37,1):", $t1} $t1 == $t1;

    // trace_local[txn_public_key]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    assume {:print "$track_local(29,37,2):", $t2} $t2 == $t2;

    // trace_local[txn_gas_price]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    assume {:print "$track_local(29,37,3):", $t3} $t3 == $t3;

    // trace_local[txn_max_gas_units]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    assume {:print "$track_local(29,37,4):", $t4} $t4 == $t4;

    // trace_local[txn_expiration_time]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    assume {:print "$track_local(29,37,5):", $t5} $t5 == $t5;

    // trace_local[chain_id]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    assume {:print "$track_local(29,37,6):", $t6} $t6 == $t6;

    // trace_local[script_hash]($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1660:5+1
    assume {:print "$track_local(29,37,7):", $t7} $t7 == $t7;

    // $t13 := DiemTransactionPublishingOption::is_script_allowed($t0, $t7) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1671:13+73
    assume {:print "$at(11,76598,76671)"} true;
    call $t13 := $1_DiemTransactionPublishingOption_is_script_allowed($t0, $t7);
    if ($abort_flag) {
        assume {:print "$at(11,76598,76671)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(29,37):", $t14} $t14 == $t14;
        goto L3;
    }

    // $t15 := 1008 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1672:35+28
    assume {:print "$at(11,76707,76735)"} true;
    $t15 := 1008;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1672:13+51
    // >> opaque call: $t12 := Errors::invalid_state($t11)

    // $t16 := opaque begin: Errors::invalid_state($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1672:13+51

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1672:13+51
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1672:13+51
    assume $IsEqual'u64'($t16, 1);

    // $t16 := opaque end: Errors::invalid_state($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1672:13+51

    // trace_local[tmp#$9]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1670:9+169
    assume {:print "$at(11,76578,76747)"} true;
    assume {:print "$track_local(29,37,9):", $t16} $t16 == $t16;

    // trace_local[tmp#$8]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1670:9+169
    assume {:print "$track_local(29,37,8):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1670:9+169
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1670:9+169
L1:

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1670:9+169
    assume {:print "$at(11,76578,76747)"} true;
    assume {:print "$track_abort(29,37):", $t16} $t16 == $t16;

    // $t14 := move($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1670:9+169
    $t14 := $t16;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1670:9+169
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1676:13+7
    assume {:print "$at(11,76794,76801)"} true;
L0:

    // assume Identical($t17, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1947:9+57
    assume {:print "$at(11,88304,88361)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t0));

    // assume Identical($t18, Mul($t3, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1948:9+60
    assume {:print "$at(11,88370,88430)"} true;
    assume ($t18 == ($t3 * $t4));

    // DiemAccount::prologue_common<#0>($t0, $t1, $t2, $t3, $t4, $t5, $t6) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1675:9+228
    assume {:print "$at(11,76758,76986)"} true;
    call $1_DiemAccount_prologue_common'#0'($t0, $t1, $t2, $t3, $t4, $t5, $t6);
    if ($abort_flag) {
        assume {:print "$at(11,76758,76986)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(29,37):", $t14} $t14 == $t14;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1684:5+1
    assume {:print "$at(11,76991,76992)"} true;
L2:

    // assert Not(Not(DiemTransactionPublishingOption::spec_is_script_allowed[@351, @352, @353]($t0, $t7))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1707:9+115
    assume {:print "$at(11,77963,78078)"} true;
    assert {:msg "assert_failed(11,77963,78078): function does not abort under this condition"}
      !!$1_DiemTransactionPublishingOption_spec_is_script_allowed($1_Roles_RoleId_$memory#351, $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#352, $1_DiemTransactionPublishingOption_HaltAllTransactions_$memory#353, $t0, $t7);

    // assert Not(Neq<u8>($t6, ChainId::spec_get_chain_id[@354]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1964:9+81
    assume {:print "$at(11,89008,89089)"} true;
    assert {:msg "assert_failed(11,89008,89089): function does not abort under this condition"}
      !!$IsEqual'u8'($t6, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#354));

    // assert Not(Not(DiemAccount::$exists_at[@355]($t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1966:9+71
    assume {:print "$at(11,89140,89211)"} true;
    assert {:msg "assert_failed(11,89140,89211): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#355, $t12);

    // assert Not(AccountFreezing::spec_account_is_frozen[@356]($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1968:9+97
    assume {:print "$at(11,89262,89359)"} true;
    assert {:msg "assert_failed(11,89262,89359): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#356, $t12);

    // assert Not(Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@355]<DiemAccount::DiemAccount>($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1970:9+133
    assume {:print "$at(11,89410,89543)"} true;
    assert {:msg "assert_failed(11,89410,89543): function does not abort under this condition"}
      !!$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#355, $t12)));

    // assert Not(Gt($t11, 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1972:9+70
    assume {:print "$at(11,89594,89664)"} true;
    assert {:msg "assert_failed(11,89594,89664): function does not abort under this condition"}
      !($t11 > 18446744073709551615);

    // assert Not(And(Gt($t11, 0), Not(TransactionFee::$is_coin_initialized[@357]<#0>()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1974:9+113
    assume {:print "$at(11,89715,89828)"} true;
    assert {:msg "assert_failed(11,89715,89828): function does not abort under this condition"}
      !(($t11 > 0) && !$1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory#357));

    // assert Not(And(Gt($t11, 0), Not(exists[@358]<DiemAccount::Balance<#0>>($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1976:9+111
    assume {:print "$at(11,89879,89990)"} true;
    assert {:msg "assert_failed(11,89879,89990): function does not abort under this condition"}
      !(($t11 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#358, $t12));

    // assert Not(And(Gt($t11, 0), Lt(DiemAccount::$balance[@358]<#0>($t12), $t11))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1978:9+124
    assume {:print "$at(11,90041,90165)"} true;
    assert {:msg "assert_failed(11,90041,90165): function does not abort under this condition"}
      !(($t11 > 0) && ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#358, $t12) < $t11));

    // assert Not(Ge(DiemTimestamp::spec_now_seconds[@359](), $t5)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1980:9+105
    assume {:print "$at(11,90216,90321)"} true;
    assert {:msg "assert_failed(11,90216,90321): function does not abort under this condition"}
      !($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#359) >= $t5);

    // assert Not(Ge($t1, 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1982:9+69
    assume {:print "$at(11,90374,90443)"} true;
    assert {:msg "assert_failed(11,90374,90443): function does not abort under this condition"}
      !($t1 >= 18446744073709551615);

    // assert Not(Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@355]<DiemAccount::DiemAccount>($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1984:9+118
    assume {:print "$at(11,90495,90613)"} true;
    assert {:msg "assert_failed(11,90495,90613): function does not abort under this condition"}
      !($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#355, $t12)));

    // assert Not(Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@355]<DiemAccount::DiemAccount>($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1986:9+118
    assume {:print "$at(11,90665,90783)"} true;
    assert {:msg "assert_failed(11,90665,90783): function does not abort under this condition"}
      !($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#355, $t12)));

    // assert Not(Not(DiemTimestamp::$is_operating[@359]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#359);

    // assert Not(And(DiemTimestamp::$is_genesis[@359](), Not(exists[@352]<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:104:9+101
    assume {:print "$at(13,3930,4031)"} true;
    assert {:msg "assert_failed(13,3930,4031): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#359) && !$ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#352, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1692:9+36
    assume {:print "$at(11,77316,77352)"} true;
    assert {:msg "assert_failed(11,77316,77352): post-condition does not hold"}
      $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@355](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@355]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#355, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#355, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@358]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@358]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#358, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#358, addr))))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1684:5+1
    assume {:print "$at(11,76991,76992)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemTransactionPublishingOption::spec_is_script_allowed[@351, @352, @353]($t0, $t7)), Neq<u8>($t6, ChainId::spec_get_chain_id[@354]())), Not(DiemAccount::$exists_at[@355]($t12))), AccountFreezing::spec_account_is_frozen[@356]($t12)), Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@355]<DiemAccount::DiemAccount>($t12)))), Gt($t11, 18446744073709551615)), And(Gt($t11, 0), Not(TransactionFee::$is_coin_initialized[@357]<#0>()))), And(Gt($t11, 0), Not(exists[@358]<DiemAccount::Balance<#0>>($t12)))), And(Gt($t11, 0), Lt(DiemAccount::$balance[@358]<#0>($t12), $t11))), Ge(DiemTimestamp::spec_now_seconds[@359](), $t5)), Ge($t1, 18446744073709551615)), Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@355]<DiemAccount::DiemAccount>($t12)))), Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@355]<DiemAccount::DiemAccount>($t12)))), Not(DiemTimestamp::$is_operating[@359]())), And(DiemTimestamp::$is_genesis[@359](), Not(exists[@352]<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1685:5+361
    assume {:print "$at(11,76997,77358)"} true;
    assert {:msg "assert_failed(11,76997,77358): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((!$1_DiemTransactionPublishingOption_spec_is_script_allowed($1_Roles_RoleId_$memory#351, $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#352, $1_DiemTransactionPublishingOption_HaltAllTransactions_$memory#353, $t0, $t7) || !$IsEqual'u8'($t6, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#354))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#355, $t12)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#356, $t12)) || !$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#355, $t12)))) || ($t11 > 18446744073709551615)) || (($t11 > 0) && !$1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory#357))) || (($t11 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#358, $t12))) || (($t11 > 0) && ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#358, $t12) < $t11))) || ($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#359) >= $t5)) || ($t1 >= 18446744073709551615)) || ($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#355, $t12)))) || ($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#355, $t12)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#359)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#359) && !$ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#352, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemTransactionPublishingOption::spec_is_script_allowed[@351, @352, @353]($t0, $t7)), Eq(1, $t14)), And(Neq<u8>($t6, ChainId::spec_get_chain_id[@354]()), Eq(7, $t14))), And(Not(DiemAccount::$exists_at[@355]($t12)), Eq(7, $t14))), And(AccountFreezing::spec_account_is_frozen[@356]($t12), Eq(1, $t14))), And(Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@355]<DiemAccount::DiemAccount>($t12))), Eq(7, $t14))), And(Gt($t11, 18446744073709551615), Eq(7, $t14))), And(And(Gt($t11, 0), Not(TransactionFee::$is_coin_initialized[@357]<#0>())), Eq(7, $t14))), And(And(Gt($t11, 0), Not(exists[@358]<DiemAccount::Balance<#0>>($t12))), Eq(7, $t14))), And(And(Gt($t11, 0), Lt(DiemAccount::$balance[@358]<#0>($t12), $t11)), Eq(7, $t14))), And(Ge(DiemTimestamp::spec_now_seconds[@359](), $t5), Eq(7, $t14))), And(Ge($t1, 18446744073709551615), Eq(8, $t14))), And(Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@355]<DiemAccount::DiemAccount>($t12))), Eq(7, $t14))), And(Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@355]<DiemAccount::DiemAccount>($t12))), Eq(7, $t14))), And(Not(DiemTimestamp::$is_operating[@359]()), Eq(1, $t14))), And(And(DiemTimestamp::$is_genesis[@359](), Not(exists[@352]<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))), Eq(5, $t14))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1685:5+361
    assert {:msg "assert_failed(11,76997,77358): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((!$1_DiemTransactionPublishingOption_spec_is_script_allowed($1_Roles_RoleId_$memory#351, $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#352, $1_DiemTransactionPublishingOption_HaltAllTransactions_$memory#353, $t0, $t7) && $IsEqual'u8'(1, $t14)) || (!$IsEqual'u8'($t6, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#354)) && $IsEqual'u8'(7, $t14))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#355, $t12) && $IsEqual'u8'(7, $t14))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#356, $t12) && $IsEqual'u8'(1, $t14))) || (!$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#355, $t12))) && $IsEqual'u8'(7, $t14))) || (($t11 > 18446744073709551615) && $IsEqual'u8'(7, $t14))) || ((($t11 > 0) && !$1_TransactionFee_$is_coin_initialized'#0'($1_TransactionFee_TransactionFee'#0'_$memory#357)) && $IsEqual'u8'(7, $t14))) || ((($t11 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#358, $t12)) && $IsEqual'u8'(7, $t14))) || ((($t11 > 0) && ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#358, $t12) < $t11)) && $IsEqual'u8'(7, $t14))) || (($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#359) >= $t5) && $IsEqual'u8'(7, $t14))) || (($t1 >= 18446744073709551615) && $IsEqual'u8'(8, $t14))) || (($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#355, $t12))) && $IsEqual'u8'(7, $t14))) || (($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#355, $t12))) && $IsEqual'u8'(7, $t14))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#359) && $IsEqual'u8'(1, $t14))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#359) && !$ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory#352, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) && $IsEqual'u8'(5, $t14)));

    // abort($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1685:5+361
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun DiemAccount::sequence_number [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1559:5+211
procedure {:timeLimit 40} $1_DiemAccount_sequence_number$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_DiemAccount_DiemAccount;
    var $t8: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#110: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1559:5+211
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume {:print "$at(11,72289,72500)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1559:5+211
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1559:5+211
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1559:5+211
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1559:5+211
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1559:5+211
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1559:5+211
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // @110 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1559:5+1
    $1_DiemAccount_DiemAccount_$memory#110 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1559:5+1
    assume {:print "$track_local(29,38,0):", $t0} $t0 == $t0;

    // $t3 := DiemAccount::exists_at($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:16+15
    assume {:print "$at(11,72374,72389)"} true;
    call $t3 := $1_DiemAccount_exists_at($t0);
    if ($abort_flag) {
        assume {:print "$at(11,72374,72389)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,38):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:55+8
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:33+31
    // >> opaque call: $t5 := Errors::not_published($t4)

    // $t6 := opaque begin: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:33+31

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:33+31
    assume $IsValid'u64'($t6);

    // assume Eq<u64>($t6, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:33+31
    assume $IsEqual'u64'($t6, 5);

    // $t6 := opaque end: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:33+31

    // trace_local[tmp#$2]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:9+56
    assume {:print "$track_local(29,38,2):", $t6} $t6 == $t6;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:9+56
    assume {:print "$track_local(29,38,1):", $t3} $t3 == $t3;

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:9+56
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:9+56
L1:

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:9+56
    assume {:print "$at(11,72367,72423)"} true;
    assume {:print "$track_abort(29,38):", $t6} $t6 == $t6;

    // $t4 := move($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:9+56
    $t4 := $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1560:9+56
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1561:64+4
    assume {:print "$at(11,72488,72492)"} true;
L0:

    // $t7 := get_global<DiemAccount::DiemAccount>($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1561:37+13
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(11,72461,72474)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,38):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t8 := DiemAccount::sequence_number_for_account($t7) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1561:9+61
    call $t8 := $1_DiemAccount_sequence_number_for_account($t7);
    if ($abort_flag) {
        assume {:print "$at(11,72433,72494)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,38):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_return[0]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1561:9+61
    assume {:print "$track_return(29,38,0):", $t8} $t8 == $t8;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1562:5+1
    assume {:print "$at(11,72499,72500)"} true;
L2:

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@110]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@110](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#110, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#110, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@110]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@110]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#110, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#110, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@110](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@110]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#110, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#110, addr)))));

    // return $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    $ret0 := $t8;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1562:5+1
    assume {:print "$at(11,72499,72500)"} true;
L3:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1562:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun DiemAccount::sequence_number_for_account [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1554:5+99
procedure {:inline 1} $1_DiemAccount_sequence_number_for_account(_$t0: $1_DiemAccount_DiemAccount) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1554:5+1
    assume {:print "$at(11,72131,72132)"} true;
    assume {:print "$track_local(29,39,0):", $t0} $t0 == $t0;

    // $t1 := get_field<DiemAccount::DiemAccount>.sequence_number($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+23
    assume {:print "$at(11,72201,72224)"} true;
    $t1 := $sequence_number#$1_DiemAccount_DiemAccount($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+23
    assume {:print "$track_return(29,39,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1556:5+1
    assume {:print "$at(11,72229,72230)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1556:5+1
    $ret0 := $t1;
    return;

}

// fun DiemAccount::sequence_number_for_account [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1554:5+99
procedure {:timeLimit 40} $1_DiemAccount_sequence_number_for_account$verify(_$t0: $1_DiemAccount_DiemAccount) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#90: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($t0))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($t0))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1554:5+99
    assume {:print "$at(11,72131,72230)"} true;
    assume ($IsValid'$1_DiemAccount_DiemAccount'($t0) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($t0))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($t0))) <= 1)));

    // @90 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1554:5+1
    $1_DiemAccount_DiemAccount_$memory#90 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1554:5+1
    assume {:print "$track_local(29,39,0):", $t0} $t0 == $t0;

    // $t1 := get_field<DiemAccount::DiemAccount>.sequence_number($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+23
    assume {:print "$at(11,72201,72224)"} true;
    $t1 := $sequence_number#$1_DiemAccount_DiemAccount($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+23
    assume {:print "$track_return(29,39,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1556:5+1
    assume {:print "$at(11,72229,72230)"} true;
L1:

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@90]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@90](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#90, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#90, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@90]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@90]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#90, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#90, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@90](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@90]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#90, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#90, addr)))));

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    $ret0 := $t1;
    return;

}

// fun DiemAccount::should_track_limits_for_account [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:253:5+466
procedure {:timeLimit 40} $1_DiemAccount_should_track_limits_for_account$verify(_$t0: int, _$t1: int, _$t2: bool) returns ($ret0: bool)
{
    // declare local variables
    var $t3: bool;
    var $t4: bool;
    var $t5: bool;
    var $t6: bool;
    var $t7: bool;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: bool;
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t16: bool;
    var $t17: bool;
    var $t18: bool;
    var $t19: bool;
    var $t20: bool;
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_DiemAccount_DiemAccount_$memory#245: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#246: $Memory $1_DiemAccount_Balance'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:253:5+466
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:234:9+151
    assume {:print "$at(11,11314,11780)"} true;
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:269:17+6
    assume {:print "$at(11,11888,11894)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:269:17+6
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:269:17+6
    assume $IsValid'bool'($t2);

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:269:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:269:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:269:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // @245 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:253:5+1
    assume {:print "$at(11,11314,11315)"} true;
    $1_DiemAccount_DiemAccount_$memory#245 := $1_DiemAccount_DiemAccount_$memory;

    // @246 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:253:5+1
    $1_DiemAccount_Balance'#0'_$memory#246 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[payer]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:253:5+1
    assume {:print "$track_local(29,40,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:253:5+1
    assume {:print "$track_local(29,40,1):", $t1} $t1 == $t1;

    // trace_local[is_withdrawal]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:253:5+1
    assume {:print "$track_local(29,40,2):", $t2} $t2 == $t2;

    // if ($t2) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:256:9+327
    assume {:print "$at(11,11447,11774)"} true;
    if ($t2) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:256:9+327
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:256:9+327
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:49+5
    assume {:print "$at(11,11516,11521)"} true;
L0:

    // $t8 := DiemAccount::has_published_account_limits<#0>($t0) on_abort goto L21 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+42
    call $t8 := $1_DiemAccount_has_published_account_limits'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,11480,11522)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,40):", $t9} $t9 == $t9;
        goto L21;
    }

    // if ($t8) goto L3 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+78
    if ($t8) { goto L3; } else { goto L4; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+78
L4:

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+78
    goto L5;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:258:27+5
    assume {:print "$at(11,11552,11557)"} true;
L3:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:258:13+20
    // >> opaque call: $t9 := VASP::is_vasp($t0)

    // $t10 := opaque begin: VASP::is_vasp($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:258:13+20

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:258:13+20
    assume $IsValid'bool'($t10);

    // assume Eq<bool>($t10, VASP::$is_vasp($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:258:13+20
    assume $IsEqual'bool'($t10, $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t0));

    // $t10 := opaque end: VASP::is_vasp($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:258:13+20

    // $t3 := $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+78
    assume {:print "$at(11,11480,11558)"} true;
    $t3 := $t10;

    // trace_local[tmp#$3]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+78
    assume {:print "$track_local(29,40,3):", $t10} $t10 == $t10;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+78
    goto L6;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+78
L5:

    // $t11 := false at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+78
    $t11 := false;
    assume $IsValid'bool'($t11);

    // $t3 := $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+78
    $t3 := $t11;

    // trace_local[tmp#$3]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+78
    assume {:print "$track_local(29,40,3):", $t11} $t11 == $t11;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+78
L6:

    // if ($t3) goto L7 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+127
    if ($t3) { goto L7; } else { goto L8; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+127
L8:

    // goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+127
    goto L9;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:259:33+5
    assume {:print "$at(11,11594,11599)"} true;
L7:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:259:14+32
    // >> opaque call: $t11 := VASP::is_same_vasp($t0, $t1)

    // $t12 := opaque begin: VASP::is_same_vasp($t0, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:259:14+32

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:259:14+32
    assume $IsValid'bool'($t12);

    // assume Eq<bool>($t12, VASP::spec_is_same_vasp($t0, $t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:259:14+32
    assume $IsEqual'bool'($t12, $1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t0, $t1));

    // $t12 := opaque end: VASP::is_same_vasp($t0, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:259:14+32

    // $t13 := !($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:259:13+1
    call $t13 := $Not($t12);

    // $t4 := $t13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+127
    assume {:print "$at(11,11480,11607)"} true;
    $t4 := $t13;

    // trace_local[tmp#$4]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+127
    assume {:print "$track_local(29,40,4):", $t13} $t13 == $t13;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+127
    goto L10;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+127
L9:

    // $t14 := false at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+127
    $t14 := false;
    assume $IsValid'bool'($t14);

    // $t4 := $t14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+127
    $t4 := $t14;

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+127
    assume {:print "$track_local(29,40,4):", $t14} $t14 == $t14;

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:257:13+127
L10:

    // $t7 := $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:256:9+327
    assume {:print "$at(11,11447,11774)"} true;
    $t7 := $t4;

    // trace_local[tmp#$7]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:256:9+327
    assume {:print "$track_local(29,40,7):", $t4} $t4 == $t4;

    // goto L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:256:9+327
    goto L11;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:49+5
    assume {:print "$at(11,11673,11678)"} true;
L2:

    // $t15 := DiemAccount::has_published_account_limits<#0>($t1) on_abort goto L21 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+42
    call $t15 := $1_DiemAccount_has_published_account_limits'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(11,11637,11679)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,40):", $t9} $t9 == $t9;
        goto L21;
    }

    // if ($t15) goto L12 else goto L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+78
    if ($t15) { goto L12; } else { goto L13; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+78
L13:

    // goto L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+78
    goto L14;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:262:27+5
    assume {:print "$at(11,11709,11714)"} true;
L12:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:262:13+20
    // >> opaque call: $t15 := VASP::is_vasp($t1)

    // $t16 := opaque begin: VASP::is_vasp($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:262:13+20

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:262:13+20
    assume $IsValid'bool'($t16);

    // assume Eq<bool>($t16, VASP::$is_vasp($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:262:13+20
    assume $IsEqual'bool'($t16, $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));

    // $t16 := opaque end: VASP::is_vasp($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:262:13+20

    // $t5 := $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+78
    assume {:print "$at(11,11637,11715)"} true;
    $t5 := $t16;

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+78
    assume {:print "$track_local(29,40,5):", $t16} $t16 == $t16;

    // goto L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+78
    goto L15;

    // label L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+78
L14:

    // $t17 := false at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+78
    $t17 := false;
    assume $IsValid'bool'($t17);

    // $t5 := $t17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+78
    $t5 := $t17;

    // trace_local[tmp#$5]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+78
    assume {:print "$track_local(29,40,5):", $t17} $t17 == $t17;

    // label L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+78
L15:

    // if ($t5) goto L16 else goto L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+127
    if ($t5) { goto L16; } else { goto L17; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+127
L17:

    // goto L18 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+127
    goto L18;

    // label L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:263:33+5
    assume {:print "$at(11,11751,11756)"} true;
L16:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:263:14+32
    // >> opaque call: $t17 := VASP::is_same_vasp($t1, $t0)

    // $t18 := opaque begin: VASP::is_same_vasp($t1, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:263:14+32

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:263:14+32
    assume $IsValid'bool'($t18);

    // assume Eq<bool>($t18, VASP::spec_is_same_vasp($t1, $t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:263:14+32
    assume $IsEqual'bool'($t18, $1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t0));

    // $t18 := opaque end: VASP::is_same_vasp($t1, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:263:14+32

    // $t19 := !($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:263:13+1
    call $t19 := $Not($t18);

    // $t6 := $t19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+127
    assume {:print "$at(11,11637,11764)"} true;
    $t6 := $t19;

    // trace_local[tmp#$6]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+127
    assume {:print "$track_local(29,40,6):", $t19} $t19 == $t19;

    // goto L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+127
    goto L19;

    // label L18 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+127
L18:

    // $t20 := false at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+127
    $t20 := false;
    assume $IsValid'bool'($t20);

    // $t6 := $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+127
    $t6 := $t20;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+127
    assume {:print "$track_local(29,40,6):", $t20} $t20 == $t20;

    // label L19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:261:13+127
L19:

    // $t7 := $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:256:9+327
    assume {:print "$at(11,11447,11774)"} true;
    $t7 := $t6;

    // trace_local[tmp#$7]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:256:9+327
    assume {:print "$track_local(29,40,7):", $t6} $t6 == $t6;

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:256:9+327
L11:

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:256:9+327
    assume {:print "$track_return(29,40,0):", $t7} $t7 == $t7;

    // label L20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:265:5+1
    assume {:print "$at(11,11779,11780)"} true;
L20:

    // assert Not(false) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:268:9+16
    assume {:print "$at(11,11855,11871)"} true;
    assert {:msg "assert_failed(11,11855,11871): function does not abort under this condition"}
      !false;

    // assert Eq<bool>($t7, DiemAccount::spec_should_track_limits_for_account<#0>($t0, $t1, $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:269:9+91
    assume {:print "$at(11,11880,11971)"} true;
    assert {:msg "assert_failed(11,11880,11971): post-condition does not hold"}
      $IsEqual'bool'($t7, $1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t0, $t1, $t2));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@245](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@245]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#245, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#245, addr)))));

    // assert forall addr: TypeDomain<address>() where exists[@246]<DiemAccount::Balance<#0>>(addr): Ge(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>(addr))), select Diem::Diem.value(select DiemAccount::Balance.coin(global[@246]<DiemAccount::Balance<#0>>(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    assume {:print "$at(11,103917,104087)"} true;
    assert {:msg "assert_failed(11,103917,104087): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory#246, addr))  ==> (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))) >= $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#246, addr))))));

    // return $t7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2273:9+170
    $ret0 := $t7;
    return;

    // label L21 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:265:5+1
    assume {:print "$at(11,11779,11780)"} true;
L21:

    // assert false at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:266:5+192
    assume {:print "$at(11,11785,11977)"} true;
    assert {:msg "assert_failed(11,11785,11977): abort not covered by any of the `aborts_if` clauses"}
      false;

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:266:5+192
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun DiemAccount::withdraw_capability_address [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1585:5+111
procedure {:timeLimit 40} $1_DiemAccount_withdraw_capability_address$verify(_$t0: $1_DiemAccount_WithdrawCapability) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_DiemAccount_WithdrawCapability;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'address': int;
    var $1_DiemAccount_DiemAccount_$memory#89: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1585:5+111
    assume {:print "$at(11,73536,73647)"} true;
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t0);

    // @89 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1585:5+1
    $1_DiemAccount_DiemAccount_$memory#89 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1585:5+1
    assume {:print "$track_local(29,42,0):", $t0} $t0 == $t0;

    // $t1 := get_field<DiemAccount::WithdrawCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1586:9+20
    assume {:print "$at(11,73621,73641)"} true;
    $t1 := $account_address#$1_DiemAccount_WithdrawCapability($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1586:9+20
    assume {:print "$track_return(29,42,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1587:5+1
    assume {:print "$at(11,73646,73647)"} true;
L1:

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@89]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@89](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#89, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#89, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@89]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@89]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#89, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#89, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@89](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@89]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#89, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#89, addr)))));

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    $ret0 := $t1;
    return;

}

// fun DiemAccount::withdraw_from<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
procedure {:inline 1} $1_DiemAccount_withdraw_from'#0'(_$t0: $1_DiemAccount_WithdrawCapability, _$t1: int, _$t2: int, _$t3: Vec (int)) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t4: $Mutation ($1_DiemAccount_Balance'#0');
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t14: $1_DiemAccount_SentPaymentEvent;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation ($1_DiemAccount_Balance'#0');
    var $t25: $Mutation ($1_DiemAccount_DiemAccount);
    var $t26: $Mutation ($1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent');
    var $t27: Vec (int);
    var $t28: bool;
    var $t29: $1_DiemAccount_SentPaymentEvent;
    var $t30: $1_Diem_Diem'#0';
    var $t0: $1_DiemAccount_WithdrawCapability;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $1_DiemAccount_Balance'#0'_$modifies: [int]bool;
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t25));
    assume IsEmptyVec(p#$Mutation($t26));

    // bytecode translation starts here
    // assume Identical($t10, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:611:9+32
    assume {:print "$at(11,27036,27068)"} true;
    assume ($t10 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t11, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:631:9+32
    assume {:print "$at(11,28125,28157)"} true;
    assume ($t11 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t12, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:650:9+32
    assume {:print "$at(11,29045,29077)"} true;
    assume ($t12 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t13, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:651:9+52
    assume {:print "$at(11,29086,29138)"} true;
    assume ($t13 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12)));

    // assume Identical($t14, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:652:9+161
    assume {:print "$at(11,29147,29308)"} true;
    assume ($t14 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $t3));

    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1
    assume {:print "$at(11,25995,25996)"} true;
    assume {:print "$track_local(29,43,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1
    assume {:print "$track_local(29,43,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1
    assume {:print "$track_local(29,43,2):", $t2} $t2 == $t2;

    // trace_local[metadata]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1
    assume {:print "$track_local(29,43,3):", $t3} $t3 == $t3;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(11,26225,26258)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33

    // assume Identical($t15, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
    assume ($t15 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t15) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
    if ($t15) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
L7:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t16)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
    assume {:print "$at(11,26225,26258)"} true;
    assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
L6:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33

    // $t17 := get_field<DiemAccount::WithdrawCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:594:21+19
    assume {:print "$at(11,26280,26299)"} true;
    $t17 := $account_address#$1_DiemAccount_WithdrawCapability($t0);

    // trace_local[payer]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:594:13+5
    assume {:print "$track_local(29,43,5):", $t17} $t17 == $t17;

    // $t18 := DiemAccount::exists_at($t17) on_abort goto L5 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:16+16
    assume {:print "$at(11,26316,26332)"} true;
    call $t18 := $1_DiemAccount_exists_at($t17);
    if ($abort_flag) {
        assume {:print "$at(11,26316,26332)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;
        goto L5;
    }

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:56+8
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:34+31
    // >> opaque call: $t13 := Errors::not_published($t12)

    // $t20 := opaque begin: Errors::not_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:34+31

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:34+31
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:34+31
    assume $IsEqual'u64'($t20, 5);

    // $t20 := opaque end: Errors::not_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:34+31

    // trace_local[tmp#$7]($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
    assume {:print "$track_local(29,43,7):", $t20} $t20 == $t20;

    // trace_local[tmp#$6]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
    assume {:print "$track_local(29,43,6):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
L1:

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
    assume {:print "$at(11,26309,26366)"} true;
    assume {:print "$track_abort(29,43):", $t20} $t20 == $t20;

    // $t16 := move($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
    $t16 := $t20;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:39+5
    assume {:print "$at(11,26406,26411)"} true;
L0:

    // $t21 := exists<DiemAccount::Balance<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:16+6
    $t21 := $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t17);

    // $t22 := 19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:69+27
    $t22 := 19;
    assume $IsValid'u64'($t22);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:47+50
    // >> opaque call: $t16 := Errors::not_published($t15)

    // $t23 := opaque begin: Errors::not_published($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:47+50

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:47+50
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:47+50
    assume $IsEqual'u64'($t23, 5);

    // $t23 := opaque end: Errors::not_published($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:47+50

    // trace_local[tmp#$9]($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
    assume {:print "$track_local(29,43,9):", $t23} $t23 == $t23;

    // trace_local[tmp#$8]($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
    assume {:print "$track_local(29,43,8):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
L3:

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
    assume {:print "$at(11,26376,26465)"} true;
    assume {:print "$track_abort(29,43):", $t23} $t23 == $t23;

    // $t16 := move($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
    $t16 := $t23;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:597:65+5
    assume {:print "$at(11,26531,26536)"} true;
L2:

    // $t24 := borrow_global<DiemAccount::Balance<#0>>($t17) on_abort goto L5 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:597:31+17
    if (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t17)) {
        call $ExecFailureAbort();
    } else {
        $t24 := $Mutation($Global($t17), EmptyVec(), $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t17));
    }
    if ($abort_flag) {
        assume {:print "$at(11,26497,26514)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;
        goto L5;
    }

    // trace_local[account_balance]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:597:13+15
    $temp_0'$1_DiemAccount_Balance'#0'' := $Dereference($t24);
    assume {:print "$track_local(29,43,4):", $temp_0'$1_DiemAccount_Balance'#0''} $temp_0'$1_DiemAccount_Balance'#0'' == $temp_0'$1_DiemAccount_Balance'#0'';

    // $t25 := borrow_global<DiemAccount::DiemAccount>($t17) on_abort goto L5 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:600:18+17
    assume {:print "$at(11,26680,26697)"} true;
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t17)) {
        call $ExecFailureAbort();
    } else {
        $t25 := $Mutation($Global($t17), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t17));
    }
    if ($abort_flag) {
        assume {:print "$at(11,26680,26697)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;
        goto L5;
    }

    // $t26 := borrow_field<DiemAccount::DiemAccount>.sent_events($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:600:13+54
    $t26 := $ChildMutation($t25, 4, $sent_events#$1_DiemAccount_DiemAccount($Dereference($t25)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    // >> opaque call: $t20 := Diem::currency_code<#0>()
    assume {:print "$at(11,26817,26845)"} true;

    // $t27 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28

    // assume Identical($t28, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    assume ($t28 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t28) goto L10 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    if ($t28) { goto L10; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
L9:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    assume {:print "$at(11,26817,26845)"} true;
    assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    goto L5;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
L8:

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    assume $IsValid'vec'u8''($t27);

    // assume Eq<vector<u8>>($t27, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    assume $IsEqual'vec'u8''($t27, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t27 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28

    // $t29 := pack DiemAccount::SentPaymentEvent($t2, $t27, $t1, $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:601:13+165
    assume {:print "$at(11,26743,26908)"} true;
    $t29 := $1_DiemAccount_SentPaymentEvent($t2, $t27, $t1, $t3);

    // Event::emit_event<DiemAccount::SentPaymentEvent>($t26, $t29) on_abort goto L5 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:599:9+293
    assume {:print "$at(11,26626,26919)"} true;
    call $t26 := $1_Event_emit_event'$1_DiemAccount_SentPaymentEvent'($t26, $t29);
    if ($abort_flag) {
        assume {:print "$at(11,26626,26919)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;
        goto L5;
    }

    // pack_ref_deep($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:599:9+293

    // $t30 := DiemAccount::withdraw_from_balance<#0>($t17, $t1, $t24, $t2) on_abort goto L5 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:608:9+67
    assume {:print "$at(11,26929,26996)"} true;
    call $t30,$t24 := $1_DiemAccount_withdraw_from_balance'#0'($t17, $t1, $t24, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,26929,26996)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;
        goto L5;
    }

    // write_back[DiemAccount::Balance<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:608:9+67
    $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // trace_return[0]($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:608:9+67
    assume {:print "$track_return(29,43,0):", $t30} $t30 == $t30;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:609:5+1
    assume {:print "$at(11,27001,27002)"} true;
L4:

    // return $t30 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:609:5+1
    $ret0 := $t30;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:609:5+1
L5:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:609:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

    // label L10 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L10:

    // destroy($t24) at <internal>:1:1+10

    // destroy($t25) at <internal>:1:1+10

    // destroy($t26) at <internal>:1:1+10

    // goto L9 at <internal>:1:1+10
    goto L9;

}

// fun DiemAccount::withdraw_from [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
procedure {:timeLimit 40} $1_DiemAccount_withdraw_from$verify(_$t0: $1_DiemAccount_WithdrawCapability, _$t1: int, _$t2: int, _$t3: Vec (int)) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t4: $Mutation ($1_DiemAccount_Balance'#0');
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t14: $1_DiemAccount_SentPaymentEvent;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation ($1_DiemAccount_Balance'#0');
    var $t25: $Mutation ($1_DiemAccount_DiemAccount);
    var $t26: $Mutation ($1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent');
    var $t27: Vec (int);
    var $t28: bool;
    var $t29: $1_DiemAccount_SentPaymentEvent;
    var $t30: $1_Diem_Diem'#0';
    var $t0: $1_DiemAccount_WithdrawCapability;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $1_DiemAccount_DiemAccount_$modifies: [int]bool;
    var $1_DiemAccount_Balance'#0'_$modifies: [int]bool;
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_DiemAccount_$memory#503: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#504: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Diem_CurrencyInfo'#0'_$memory#506: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_AccountLimits_Window'#0'_$memory#507: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#508: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#509: $Memory $1_VASP_ParentVASP;
    var $1_DiemAccount_AccountOperationsCapability_$memory#510: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#511: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountFreezing_FreezingBit_$memory#512: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t25));
    assume IsEmptyVec(p#$Mutation($t26));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,25995,27002)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:234:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1007
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume {:print "$at(11,27819,27892)"} true;
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume $IsValid'vec'u8''($t3);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:623:17+73
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t10, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:611:9+32
    assume {:print "$at(11,27036,27068)"} true;
    assume ($t10 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t11, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:631:9+32
    assume {:print "$at(11,28125,28157)"} true;
    assume ($t11 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t12, select DiemAccount::WithdrawCapability.account_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:650:9+32
    assume {:print "$at(11,29045,29077)"} true;
    assume ($t12 == $account_address#$1_DiemAccount_WithdrawCapability($t0));

    // assume Identical($t13, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:651:9+52
    assume {:print "$at(11,29086,29138)"} true;
    assume ($t13 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12)));

    // assume Identical($t14, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:652:9+161
    assume {:print "$at(11,29147,29308)"} true;
    assume ($t14 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $t3));

    // assume CanModify<DiemAccount::Balance<#0>>($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:612:9+39
    assume {:print "$at(11,27077,27116)"} true;
    assume $1_DiemAccount_Balance'#0'_$modifies[$t10];

    // assume CanModify<DiemAccount::DiemAccount>($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:613:9+36
    assume {:print "$at(11,27125,27161)"} true;
    assume $1_DiemAccount_DiemAccount_$modifies[$t10];

    // assume CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:614:9+80
    assume {:print "$at(11,27170,27250)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t10)];

    // @505 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:614:9+80
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @506 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:614:9+80
    $1_Diem_CurrencyInfo'#0'_$memory#506 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @511 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:614:9+80
    $1_AccountLimits_LimitsDefinition'#0'_$memory#511 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @507 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:614:9+80
    $1_AccountLimits_Window'#0'_$memory#507 := $1_AccountLimits_Window'#0'_$memory;

    // @508 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:614:9+80
    $1_VASP_ChildVASP_$memory#508 := $1_VASP_ChildVASP_$memory;

    // @509 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:614:9+80
    $1_VASP_ParentVASP_$memory#509 := $1_VASP_ParentVASP_$memory;

    // @512 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:614:9+80
    $1_AccountFreezing_FreezingBit_$memory#512 := $1_AccountFreezing_FreezingBit_$memory;

    // @503 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:614:9+80
    $1_DiemAccount_DiemAccount_$memory#503 := $1_DiemAccount_DiemAccount_$memory;

    // @510 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:614:9+80
    $1_DiemAccount_AccountOperationsCapability_$memory#510 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @504 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:614:9+80
    $1_DiemAccount_Balance'#0'_$memory#504 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1
    assume {:print "$at(11,25995,25996)"} true;
    assume {:print "$track_local(29,43,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1
    assume {:print "$track_local(29,43,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1
    assume {:print "$track_local(29,43,2):", $t2} $t2 == $t2;

    // trace_local[metadata]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:587:5+1
    assume {:print "$track_local(29,43,3):", $t3} $t3 == $t3;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(11,26225,26258)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33

    // assume Identical($t15, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
    assume ($t15 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t15) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
    if ($t15) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
L7:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t16)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
    assume {:print "$at(11,26225,26258)"} true;
    assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33
L6:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:593:9+33

    // $t17 := get_field<DiemAccount::WithdrawCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:594:21+19
    assume {:print "$at(11,26280,26299)"} true;
    $t17 := $account_address#$1_DiemAccount_WithdrawCapability($t0);

    // trace_local[payer]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:594:13+5
    assume {:print "$track_local(29,43,5):", $t17} $t17 == $t17;

    // $t18 := DiemAccount::exists_at($t17) on_abort goto L5 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:16+16
    assume {:print "$at(11,26316,26332)"} true;
    call $t18 := $1_DiemAccount_exists_at($t17);
    if ($abort_flag) {
        assume {:print "$at(11,26316,26332)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;
        goto L5;
    }

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:56+8
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:34+31
    // >> opaque call: $t13 := Errors::not_published($t12)

    // $t20 := opaque begin: Errors::not_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:34+31

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:34+31
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:34+31
    assume $IsEqual'u64'($t20, 5);

    // $t20 := opaque end: Errors::not_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:34+31

    // trace_local[tmp#$7]($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
    assume {:print "$track_local(29,43,7):", $t20} $t20 == $t20;

    // trace_local[tmp#$6]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
    assume {:print "$track_local(29,43,6):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
L1:

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
    assume {:print "$at(11,26309,26366)"} true;
    assume {:print "$track_abort(29,43):", $t20} $t20 == $t20;

    // $t16 := move($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
    $t16 := $t20;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:595:9+57
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:39+5
    assume {:print "$at(11,26406,26411)"} true;
L0:

    // $t21 := exists<DiemAccount::Balance<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:16+6
    $t21 := $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t17);

    // $t22 := 19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:69+27
    $t22 := 19;
    assume $IsValid'u64'($t22);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:47+50
    // >> opaque call: $t16 := Errors::not_published($t15)

    // $t23 := opaque begin: Errors::not_published($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:47+50

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:47+50
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:47+50
    assume $IsEqual'u64'($t23, 5);

    // $t23 := opaque end: Errors::not_published($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:47+50

    // trace_local[tmp#$9]($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
    assume {:print "$track_local(29,43,9):", $t23} $t23 == $t23;

    // trace_local[tmp#$8]($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
    assume {:print "$track_local(29,43,8):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
L3:

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
    assume {:print "$at(11,26376,26465)"} true;
    assume {:print "$track_abort(29,43):", $t23} $t23 == $t23;

    // $t16 := move($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
    $t16 := $t23;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:596:9+89
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:597:65+5
    assume {:print "$at(11,26531,26536)"} true;
L2:

    // assert CanModify<DiemAccount::Balance<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:597:31+17
    assert {:msg "assert_failed(11,26497,26514): caller does not have permission to modify `DiemAccount::Balance<#0>` at given address"}
      $1_DiemAccount_Balance'#0'_$modifies[$t17];

    // $t24 := borrow_global<DiemAccount::Balance<#0>>($t17) on_abort goto L5 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:597:31+17
    if (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t17)) {
        call $ExecFailureAbort();
    } else {
        $t24 := $Mutation($Global($t17), EmptyVec(), $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t17));
    }
    if ($abort_flag) {
        assume {:print "$at(11,26497,26514)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;
        goto L5;
    }

    // trace_local[account_balance]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:597:13+15
    $temp_0'$1_DiemAccount_Balance'#0'' := $Dereference($t24);
    assume {:print "$track_local(29,43,4):", $temp_0'$1_DiemAccount_Balance'#0''} $temp_0'$1_DiemAccount_Balance'#0'' == $temp_0'$1_DiemAccount_Balance'#0'';

    // assert CanModify<DiemAccount::DiemAccount>($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:600:18+17
    assume {:print "$at(11,26680,26697)"} true;
    assert {:msg "assert_failed(11,26680,26697): caller does not have permission to modify `DiemAccount::DiemAccount` at given address"}
      $1_DiemAccount_DiemAccount_$modifies[$t17];

    // $t25 := borrow_global<DiemAccount::DiemAccount>($t17) on_abort goto L5 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:600:18+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t17)) {
        call $ExecFailureAbort();
    } else {
        $t25 := $Mutation($Global($t17), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t17));
    }
    if ($abort_flag) {
        assume {:print "$at(11,26680,26697)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;
        goto L5;
    }

    // $t26 := borrow_field<DiemAccount::DiemAccount>.sent_events($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:600:13+54
    $t26 := $ChildMutation($t25, 4, $sent_events#$1_DiemAccount_DiemAccount($Dereference($t25)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    // >> opaque call: $t20 := Diem::currency_code<#0>()
    assume {:print "$at(11,26817,26845)"} true;

    // $t27 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28

    // assume Identical($t28, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    assume ($t28 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t28) goto L10 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    if ($t28) { goto L10; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
L9:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    assume {:print "$at(11,26817,26845)"} true;
    assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    goto L5;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
L8:

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    assume $IsValid'vec'u8''($t27);

    // assume Eq<vector<u8>>($t27, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28
    assume $IsEqual'vec'u8''($t27, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t27 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:603:32+28

    // $t29 := pack DiemAccount::SentPaymentEvent($t2, $t27, $t1, $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:601:13+165
    assume {:print "$at(11,26743,26908)"} true;
    $t29 := $1_DiemAccount_SentPaymentEvent($t2, $t27, $t1, $t3);

    // Event::emit_event<DiemAccount::SentPaymentEvent>($t26, $t29) on_abort goto L5 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:599:9+293
    assume {:print "$at(11,26626,26919)"} true;
    call $t26 := $1_Event_emit_event'$1_DiemAccount_SentPaymentEvent'($t26, $t29);
    if ($abort_flag) {
        assume {:print "$at(11,26626,26919)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;
        goto L5;
    }

    // assert Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($t25))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assume {:print "$at(44,561,585)"} true;
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($Dereference($t25)))) <= 1);

    // assert Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($t25))), 1) at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    // data invariant at /home/ying/diem/language/move-stdlib/modules/Option.move:16:9+24
    assert {:msg "assert_failed(44,561,585): data invariant does not hold"}
      (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t25)))) <= 1);

    // assert CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:608:9+67
    assume {:print "$at(11,26929,26996)"} true;
    assert {:msg "assert_failed(11,26929,26996): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t17)];

    // $t30 := DiemAccount::withdraw_from_balance<#0>($t17, $t1, $t24, $t2) on_abort goto L5 with $t16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:608:9+67
    call $t30,$t24 := $1_DiemAccount_withdraw_from_balance'#0'($t17, $t1, $t24, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,26929,26996)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(29,43):", $t16} $t16 == $t16;
        goto L5;
    }

    // write_back[DiemAccount::Balance<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:608:9+67
    $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // trace_return[0]($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:608:9+67
    assume {:print "$track_return(29,43,0):", $t30} $t30 == $t30;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:609:5+1
    assume {:print "$at(11,27001,27002)"} true;
L4:

    // assert Not(Not(DiemAccount::$exists_at[@503]($t11))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:635:9+55
    assume {:print "$at(11,28367,28422)"} true;
    assert {:msg "assert_failed(11,28367,28422): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#503, $t11);

    // assert Not(Not(exists[@504]<DiemAccount::Balance<#0>>($t11))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:636:9+68
    assume {:print "$at(11,28431,28499)"} true;
    assert {:msg "assert_failed(11,28431,28499): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#504, $t11);

    // assert Not(Not(DiemTimestamp::$is_operating[@505]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505);

    // assert Not(Not(Diem::spec_is_currency[@506]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#506);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@510]()), Not(AccountLimits::spec_update_withdrawal_limits[@505, @511, @507]<#0>($t2, VASP::spec_parent_address[@508, @509]($t11)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:561:9+308
    assume {:print "$at(11,24943,25251)"} true;
    assert {:msg "assert_failed(11,24943,25251): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#510) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505, $1_AccountLimits_LimitsDefinition'#0'_$memory#511, $1_AccountLimits_Window'#0'_$memory#507, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@504]<DiemAccount::Balance<#0>>($t11))), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:575:11+66
    assume {:print "$at(11,25561,25627)"} true;
    assert {:msg "assert_failed(11,25561,25627): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#504, $t11))) < $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@505]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505);

    // assert Not(AccountFreezing::spec_account_is_frozen[@512]($t11)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:181:9+69
    assume {:print "$at(4,7220,7289)"} true;
    assert {:msg "assert_failed(4,7220,7289): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#512, $t11);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), Not(exists[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4079,4148)"} true;
    assert {:msg "assert_failed(5,4079,4148): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), Not(exists[@511]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:444:9+96
    assume {:print "$at(5,20782,20878)"} true;
    assert {:msg "assert_failed(5,20782,20878): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@505, @511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), $t2), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:454:9+99
    assume {:print "$at(5,21264,21363)"} true;
    assert {:msg "assert_failed(5,21264,21363): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505, $1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11)))) + $t2) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), Gt(Add(select AccountLimits::Window.window_start(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:291:9+102
    assume {:print "$at(5,13064,13166)"} true;
    assert {:msg "assert_failed(5,13064,13166): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), Not(DiemTimestamp::$is_operating[@505]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505)));

    // assert exists<DiemAccount::DiemAccount>($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:615:9+35
    assume {:print "$at(11,27259,27294)"} true;
    assert {:msg "assert_failed(11,27259,27294): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t10);

    // assert Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t10)), select DiemAccount::DiemAccount.withdraw_capability(global[@503]<DiemAccount::DiemAccount>($t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:616:9+130
    assume {:print "$at(11,27303,27433)"} true;
    assert {:msg "assert_failed(11,27303,27433): post-condition does not hold"}
      $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t10)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#503, $t10)));

    // assert Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t10)), select DiemAccount::DiemAccount.sent_events(global[@503]<DiemAccount::DiemAccount>($t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:618:9+149
    assume {:print "$at(11,27442,27591)"} true;
    assert {:msg "assert_failed(11,27442,27591): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t10)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#503, $t10)));

    // assert Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t10)), select DiemAccount::DiemAccount.received_events(global[@503]<DiemAccount::DiemAccount>($t10))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:620:9+157
    assume {:print "$at(11,27600,27757)"} true;
    assert {:msg "assert_failed(11,27600,27757): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t10)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#503, $t10)));

    // assert Eq<u64>(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t10))), Sub(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@504]<DiemAccount::Balance<#0>>($t10))), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:9+63
    assume {:print "$at(11,25777,25840)"} true;
    assert {:msg "assert_failed(11,25777,25840): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t10))), ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#504, $t10))) - $t2));

    // assert Eq<u64>(select Diem::Diem.value($t30), $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:582:9+31
    assume {:print "$at(11,25849,25880)"} true;
    assert {:msg "assert_failed(11,25849,25880): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t30), $t2);

    // assert forall addr: TypeDomain<address>() where And(exists[@504]<DiemAccount::Balance<#0>>(addr), Neq<address>(addr, select DiemAccount::WithdrawCapability.account_address($t0))): Eq<u64>(DiemAccount::$balance<#0>(addr), DiemAccount::$balance[@504]<#0>(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:642:9+163
    assume {:print "$at(11,28716,28879)"} true;
    assert {:msg "assert_failed(11,28716,28879): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_Balance'#0'_$memory#504, addr) && !$IsEqual'address'(addr, $account_address#$1_DiemAccount_WithdrawCapability($t0))))  ==> ($IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, addr), $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#504, addr))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@503](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@503]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#503, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#503, addr)))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t14, $t13)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+20
    assume {:print "$at(11,29317,29337)"} true;
    assert {:msg "assert_failed(11,29317,29337): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($EmptyEventStore, $t13, $t14); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t14, $t13)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:610:5+985
    assume {:print "$at(11,27007,27992)"} true;
    assert {:msg "assert_failed(11,27007,27992): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($EmptyEventStore, $t13, $t14); $EventStore__is_subset(actual, expected)));

    // return $t30 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:610:5+985
    $ret0 := $t30;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:609:5+1
    assume {:print "$at(11,27001,27002)"} true;
L5:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemAccount::$exists_at[@503]($t11)), Not(exists[@504]<DiemAccount::Balance<#0>>($t11))), Not(DiemTimestamp::$is_operating[@505]())), Not(Diem::spec_is_currency[@506]<#0>())), And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@510]()), Not(AccountLimits::spec_update_withdrawal_limits[@505, @511, @507]<#0>($t2, VASP::spec_parent_address[@508, @509]($t11)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@504]<DiemAccount::Balance<#0>>($t11))), $t2)), Not(DiemTimestamp::$is_operating[@505]())), AccountFreezing::spec_account_is_frozen[@512]($t11)), And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), Not(exists[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11))))), And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), Not(exists[@511]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11))))))), And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@505, @511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), Gt(Add(select AccountLimits::Window.window_start(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), Not(DiemTimestamp::$is_operating[@505]())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:610:5+985
    assume {:print "$at(11,27007,27992)"} true;
    assert {:msg "assert_failed(11,27007,27992): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#503, $t11) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#504, $t11)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#506)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#510) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505, $1_AccountLimits_LimitsDefinition'#0'_$memory#511, $1_AccountLimits_Window'#0'_$memory#507, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))))) || ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#504, $t11))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#512, $t11)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505, $1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemAccount::$exists_at[@503]($t11)), Eq(5, $t16)), And(Not(exists[@504]<DiemAccount::Balance<#0>>($t11)), Eq(5, $t16))), And(Not(DiemTimestamp::$is_operating[@505]()), Eq(1, $t16))), And(Not(Diem::spec_is_currency[@506]<#0>()), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@510]()), Not(AccountLimits::spec_update_withdrawal_limits[@505, @511, @507]<#0>($t2, VASP::spec_parent_address[@508, @509]($t11))))), Eq(8, $t16))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@504]<DiemAccount::Balance<#0>>($t11))), $t2), Eq(8, $t16))), And(Not(DiemTimestamp::$is_operating[@505]()), Eq(1, $t16))), And(AccountFreezing::spec_account_is_frozen[@512]($t11), Eq(1, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), Not(exists[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), Not(exists[@511]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@505, @511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), $t2), 18446744073709551615))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), Gt(Add(select AccountLimits::Window.window_start(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11))))), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@507, @508, @509]<#0>($t11, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@511]<#0>(global[@507]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@508, @509]($t11)))), Not(DiemTimestamp::$is_operating[@505]()))), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:610:5+985
    assert {:msg "assert_failed(11,27007,27992): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#503, $t11) && $IsEqual'u8'(5, $t16)) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#504, $t11) && $IsEqual'u8'(5, $t16))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505) && $IsEqual'u8'(1, $t16))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#506) && $IsEqual'u8'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#510) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505, $1_AccountLimits_LimitsDefinition'#0'_$memory#511, $1_AccountLimits_Window'#0'_$memory#507, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11)))) && $IsEqual'u8'(8, $t16))) || (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#504, $t11))) < $t2) && $IsEqual'u8'(8, $t16))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505) && $IsEqual'u8'(1, $t16))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#512, $t11) && $IsEqual'u8'(1, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) && $IsEqual'u8'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))))) && $IsEqual'u8'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505, $1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11)))) + $t2) > 18446744073709551615))) && $IsEqual'u8'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))))) > $MAX_U64))) && $IsEqual'u8'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#511, $ResourceValue($1_AccountLimits_Window'#0'_$memory#507, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#508, $1_VASP_ParentVASP_$memory#509, $t11))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#505))) && $IsEqual'u8'(1, $t16)));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:610:5+985
    $abort_code := $t16;
    $abort_flag := true;
    return;

    // label L10 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L10:

    // destroy($t24) at <internal>:1:1+10

    // destroy($t25) at <internal>:1:1+10

    // destroy($t26) at <internal>:1:1+10

    // goto L9 at <internal>:1:1+10
    goto L9;

}

// fun DiemAccount::withdraw_from_balance<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
procedure {:inline 1} $1_DiemAccount_withdraw_from_balance'#0'(_$t0: int, _$t1: int, _$t2: $Mutation ($1_DiemAccount_Balance'#0'), _$t3: int) returns ($ret0: $1_Diem_Diem'#0', $ret1: $Mutation ($1_DiemAccount_Balance'#0'))
{
    // declare local variables
    var $t4: bool;
    var $t5: $Mutation ($1_Diem_Diem'#0');
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: $1_DiemAccount_AccountOperationsCapability;
    var $t19: $1_AccountLimits_AccountLimitMutationCapability;
    var $t20: bool;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation ($1_Diem_Diem'#0');
    var $t25: $1_Diem_Diem'#0';
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: $1_Diem_Diem'#0';
    var $t31: $1_Diem_Diem'#0';
    var $t32: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($1_DiemAccount_Balance'#0');
    var $t3: int;
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'#0'_$memory#438: $Memory $1_AccountLimits_Window'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t24));

    // bytecode translation starts here
    // trace_local[payer]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1
    assume {:print "$at(11,23121,23122)"} true;
    assume {:print "$track_local(29,44,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1
    assume {:print "$track_local(29,44,1):", $t1} $t1 == $t1;

    // trace_local[balance]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1
    $temp_0'$1_DiemAccount_Balance'#0'' := $Dereference($t2);
    assume {:print "$track_local(29,44,2):", $temp_0'$1_DiemAccount_Balance'#0''} $temp_0'$1_DiemAccount_Balance'#0'' == $temp_0'$1_DiemAccount_Balance'#0'';

    // trace_local[amount]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1
    assume {:print "$track_local(29,44,3):", $t3} $t3 == $t3;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(11,23334,23367)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33

    // assume Identical($t10, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
    assume ($t10 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t10) goto L19 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
    if ($t10) { goto L19; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
L10:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t11));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
    assume {:print "$at(11,23334,23367)"} true;
    assume {:print "$track_abort(29,44):", $t11} $t11 == $t11;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
    goto L8;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
L9:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
    // >> opaque call: AccountFreezing::assert_not_frozen($t0)
    assume {:print "$at(11,23377,23418)"} true;

    // opaque begin: AccountFreezing::assert_not_frozen($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41

    // assume Identical($t12, AccountFreezing::spec_account_is_frozen($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
    assume ($t12 == $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t0));

    // if ($t12) goto L20 else goto L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
    if ($t12) { goto L20; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
L12:

    // assume And(AccountFreezing::spec_account_is_frozen($t0), Eq(1, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
    assume ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t0) && $IsEqual'u8'(1, $t11));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
    assume {:print "$at(11,23377,23418)"} true;
    assume {:print "$track_abort(29,44):", $t11} $t11 == $t11;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
    goto L8;

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
L11:

    // opaque end: AccountFreezing::assert_not_frozen($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41

    // $t13 := true at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:66+4
    assume {:print "$at(11,23613,23617)"} true;
    $t13 := true;
    assume $IsValid'bool'($t13);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:13+58
    // >> opaque call: $t11 := DiemAccount::should_track_limits_for_account<#0>($t0, $t1, $t10)

    // $t14 := opaque begin: DiemAccount::should_track_limits_for_account<#0>($t0, $t1, $t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:13+58

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:13+58
    assume $IsValid'bool'($t14);

    // assume Eq<bool>($t14, DiemAccount::spec_should_track_limits_for_account<#0>($t0, $t1, $t13)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:13+58
    assume $IsEqual'bool'($t14, $1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t0, $t1, $t13));

    // $t14 := opaque end: DiemAccount::should_track_limits_for_account<#0>($t0, $t1, $t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:13+58

    // if ($t14) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:9+443
    if ($t14) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:9+443
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:9+443
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:534:21+6
    assume {:print "$at(11,23721,23727)"} true;
L0:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    // >> opaque call: $t12 := VASP::parent_address($t0)
    assume {:print "$at(11,23749,23776)"} true;

    // $t15 := opaque begin: VASP::parent_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27

    // assume Identical($t16, And(Not(VASP::$is_parent($t0)), Not(VASP::$is_child($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    assume ($t16 == (!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t0) && !$1_VASP_$is_child($1_VASP_ChildVASP_$memory, $t0)));

    // if ($t16) goto L21 else goto L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    if ($t16) { goto L21; } else { goto L13; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
L14:

    // assume And(And(Not(VASP::$is_parent($t0)), Not(VASP::$is_child($t0))), Eq(7, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    assume ((!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t0) && !$1_VASP_$is_child($1_VASP_ChildVASP_$memory, $t0)) && $IsEqual'u8'(7, $t11));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    assume {:print "$at(11,23749,23776)"} true;
    assume {:print "$track_abort(29,44):", $t11} $t11 == $t11;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    goto L8;

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
L13:

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    assume $IsValid'address'($t15);

    // assume Eq<address>($t15, VASP::spec_parent_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    assume $IsEqual'address'($t15, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t0));

    // $t15 := opaque end: VASP::parent_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27

    // $t17 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L8 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:536:65+34
    assume {:print "$at(11,23842,23876)"} true;
    call $t17 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,23842,23876)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,44):", $t11} $t11 == $t11;
        goto L8;
    }

    // $t18 := get_global<DiemAccount::AccountOperationsCapability>($t17) on_abort goto L8 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:536:22+13
    if (!$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t17)) {
        call $ExecFailureAbort();
    } else {
        $t18 := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $t17);
    }
    if ($abort_flag) {
        assume {:print "$at(11,23799,23812)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,44):", $t11} $t11 == $t11;
        goto L8;
    }

    // $t19 := get_field<DiemAccount::AccountOperationsCapability>.limits_cap($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:536:21+90
    $t19 := $limits_cap#$1_DiemAccount_AccountOperationsCapability($t18);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    // >> opaque call: $t16 := AccountLimits::update_withdrawal_limits<#0>($t3, $t12, $t15)
    assume {:print "$at(11,23653,23902)"} true;

    // $t20 := opaque begin: AccountLimits::update_withdrawal_limits<#0>($t3, $t15, $t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249

    // assume Identical($t21, Or(Or(Or(Or(Not(exists<AccountLimits::Window<#0>>($t15)), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>($t15))))), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t15))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>($t15))), $t3), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t15))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>($t15)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>($t15)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t15))), Not(DiemTimestamp::$is_operating())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assume ($t21 == ((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t15) || !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15)))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15))) + $t3) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t21) goto L22 else goto L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    if ($t21) { goto L22; } else { goto L15; }

    // label L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
L16:

    // assume Or(Or(Or(Or(And(Not(exists<AccountLimits::Window<#0>>($t15)), Eq(5, $t11)), And(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>($t15)))), Eq(5, $t11))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t15))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>($t15))), $t3), 18446744073709551615)), Eq(8, $t11))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t15))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>($t15)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>($t15)))), MaxU64())), Eq(8, $t11))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t15))), Not(DiemTimestamp::$is_operating())), Eq(1, $t11))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assume (((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t15) && $IsEqual'u8'(5, $t11)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15))) && $IsEqual'u8'(5, $t11))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15))) + $t3) > 18446744073709551615)) && $IsEqual'u8'(8, $t11))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15)))) > $MAX_U64)) && $IsEqual'u8'(8, $t11))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'u8'(1, $t11)));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assume {:print "$at(11,23653,23902)"} true;
    assume {:print "$track_abort(29,44):", $t11} $t11 == $t11;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    goto L8;

    // label L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
L15:

    // @438 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    $1_AccountLimits_Window'#0'_$memory#438 := $1_AccountLimits_Window'#0'_$memory;

    // modifies global<AccountLimits::Window<#0>>($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $t15, $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $t15);
    }

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assume $IsValid'bool'($t20);

    // assume Eq<bool>($t20, AccountLimits::spec_withdrawal_limits_ok<#0>(global[@438]<AccountLimits::Window<#0>>($t15), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assume $IsEqual'bool'($t20, $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#438, $t15), $t3));

    // assume (if And($t20, Not(AccountLimits::spec_window_unrestricted<#0>(global[@438]<AccountLimits::Window<#0>>($t15)))) {Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t15), AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>(global[@438]<AccountLimits::Window<#0>>($t15)), $t3))} else {Or(Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t15), AccountLimits::spec_window_reset<#0>(global[@438]<AccountLimits::Window<#0>>($t15))), Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t15), global[@438]<AccountLimits::Window<#0>>($t15)))}) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assume if (($t20 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#438, $t15)))) then ($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15), $1_AccountLimits_spec_update_outflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#438, $t15)), $t3))) else (($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#438, $t15))) || $IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t15), $ResourceValue($1_AccountLimits_Window'#0'_$memory#438, $t15))));

    // $t20 := opaque end: AccountLimits::update_withdrawal_limits<#0>($t3, $t15, $t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249

    // trace_local[can_withdraw]($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:17+12
    assume {:print "$track_local(29,44,4):", $t20} $t20 == $t20;

    // $t22 := 6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:57+26
    assume {:print "$at(11,23960,23986)"} true;
    $t22 := 6;
    assume $IsValid'u64'($t22);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:34+50
    // >> opaque call: $t18 := Errors::limit_exceeded($t17)

    // $t23 := opaque begin: Errors::limit_exceeded($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:34+50

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:34+50
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:34+50
    assume $IsEqual'u64'($t23, 8);

    // $t23 := opaque end: Errors::limit_exceeded($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:34+50

    // trace_local[tmp#$7]($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
    assume {:print "$track_local(29,44,7):", $t23} $t23 == $t23;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
    assume {:print "$track_local(29,44,6):", $t20} $t20 == $t20;

    // if ($t20) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
    if ($t20) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
L3:

    // destroy($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
    assume {:print "$at(11,23916,23988)"} true;
    assume {:print "$track_abort(29,44):", $t23} $t23 == $t23;

    // $t11 := move($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
    $t11 := $t23;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
    goto L8;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:540:25+7
    assume {:print "$at(11,24025,24032)"} true;
L2:

    // $t24 := borrow_field<DiemAccount::Balance<#0>>.coin($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:540:20+17
    $t24 := $ChildMutation($t2, 0, $coin#$1_DiemAccount_Balance'#0'($Dereference($t2)));

    // trace_local[coin]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:540:13+4
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t24);
    assume {:print "$track_local(29,44,5):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // $t25 := read_ref($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:28+4
    assume {:print "$at(11,24147,24151)"} true;
    $t25 := $Dereference($t24);

    // $t26 := Diem::value<#0>($t25) on_abort goto L8 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:16+17
    call $t26 := $1_Diem_value'#0'($t25);
    if ($abort_flag) {
        assume {:print "$at(11,24135,24152)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,44):", $t11} $t11 == $t11;
        goto L8;
    }

    // $t27 := >=($t26, $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:34+2
    call $t27 := $Ge($t26, $t3);

    // $t28 := 5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:68+21
    $t28 := 5;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:45+45
    // >> opaque call: $t24 := Errors::limit_exceeded($t23)

    // $t29 := opaque begin: Errors::limit_exceeded($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:45+45

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:45+45
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:45+45
    assume $IsEqual'u64'($t29, 8);

    // $t29 := opaque end: Errors::limit_exceeded($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:45+45

    // trace_local[tmp#$9]($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
    assume {:print "$track_local(29,44,9):", $t29} $t29 == $t29;

    // trace_local[tmp#$8]($t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
    assume {:print "$track_local(29,44,8):", $t27} $t27 == $t27;

    // if ($t27) goto L4 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
    if ($t27) { goto L4; } else { goto L6; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
L5:

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
    assume {:print "$at(11,24128,24210)"} true;
    assume {:print "$track_abort(29,44):", $t29} $t29 == $t29;

    // $t11 := move($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
    $t11 := $t29;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
    goto L8;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:24+4
    assume {:print "$at(11,24235,24239)"} true;
L4:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    // >> opaque call: $t25 := Diem::withdraw<#0>($t19, $t3)

    // $t30 := opaque begin: Diem::withdraw<#0>($t24, $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28

    // $t31 := read_ref($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    $t31 := $Dereference($t24);

    // assume Identical($t32, Lt(select Diem::Diem.value($t24), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume ($t32 == ($value#$1_Diem_Diem'#0'($Dereference($t24)) < $t3));

    // if ($t32) goto L23 else goto L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    if ($t32) { goto L23; } else { goto L17; }

    // label L18 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
L18:

    // assume And(Lt(select Diem::Diem.value($t24), $t3), Eq(8, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume (($value#$1_Diem_Diem'#0'($Dereference($t24)) < $t3) && $IsEqual'u8'(8, $t11));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume {:print "$at(11,24220,24248)"} true;
    assume {:print "$track_abort(29,44):", $t11} $t11 == $t11;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    goto L8;

    // label L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
L17:

    // havoc[mut]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t24 := $UpdateMutation($t24, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t24));

    // assume WellFormed($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t24));

    // assume WellFormed($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume $IsValid'$1_Diem_Diem'#0''($t30);

    // assume Eq<u64>(select Diem::Diem.value($t24), Sub(select Diem::Diem.value($t31), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t24)), ($value#$1_Diem_Diem'#0'($t31) - $t3));

    // assume Eq<u64>(select Diem::Diem.value($t30), $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t30), $t3);

    // $t30 := opaque end: Diem::withdraw<#0>($t24, $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28

    // write_back[Reference($t2).coin]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    $t2 := $UpdateMutation($t2, $Update'$1_DiemAccount_Balance'#0''_coin($Dereference($t2), $Dereference($t24)));

    // trace_return[0]($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume {:print "$track_return(29,44,0):", $t30} $t30 == $t30;

    // trace_local[balance]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    $temp_0'$1_DiemAccount_Balance'#0'' := $Dereference($t2);
    assume {:print "$track_local(29,44,2):", $temp_0'$1_DiemAccount_Balance'#0''} $temp_0'$1_DiemAccount_Balance'#0'' == $temp_0'$1_DiemAccount_Balance'#0'';

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    goto L7;

    // label L6 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L6:

    // destroy($t2) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:544:5+1
    assume {:print "$at(11,24253,24254)"} true;
L7:

    // return $t30 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:544:5+1
    $ret0 := $t30;
    $ret1 := $t2;
    return;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:544:5+1
L8:

    // abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:544:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

    // label L19 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L19:

    // destroy($t2) at <internal>:1:1+10

    // goto L10 at <internal>:1:1+10
    goto L10;

    // label L20 at <internal>:1:1+10
L20:

    // destroy($t2) at <internal>:1:1+10

    // goto L12 at <internal>:1:1+10
    goto L12;

    // label L21 at <internal>:1:1+10
L21:

    // destroy($t2) at <internal>:1:1+10

    // goto L14 at <internal>:1:1+10
    goto L14;

    // label L22 at <internal>:1:1+10
L22:

    // destroy($t2) at <internal>:1:1+10

    // goto L16 at <internal>:1:1+10
    goto L16;

    // label L23 at <internal>:1:1+10
L23:

    // destroy($t2) at <internal>:1:1+10

    // goto L18 at <internal>:1:1+10
    goto L18;

}

// fun DiemAccount::withdraw_from_balance [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
procedure {:timeLimit 40} $1_DiemAccount_withdraw_from_balance$verify(_$t0: int, _$t1: int, _$t2: $Mutation ($1_DiemAccount_Balance'#0'), _$t3: int) returns ($ret0: $1_Diem_Diem'#0', $ret1: $Mutation ($1_DiemAccount_Balance'#0'))
{
    // declare local variables
    var $t4: bool;
    var $t5: $Mutation ($1_Diem_Diem'#0');
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $1_DiemAccount_Balance'#0';
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: $1_DiemAccount_AccountOperationsCapability;
    var $t20: $1_AccountLimits_AccountLimitMutationCapability;
    var $t21: bool;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: $Mutation ($1_Diem_Diem'#0');
    var $t26: $1_Diem_Diem'#0';
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t30: int;
    var $t31: $1_Diem_Diem'#0';
    var $t32: $1_Diem_Diem'#0';
    var $t33: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($1_DiemAccount_Balance'#0');
    var $t3: int;
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'#0'_$memory#421: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#422: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#423: $Memory $1_VASP_ParentVASP;
    var $1_DiemAccount_AccountOperationsCapability_$memory#424: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#426: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountFreezing_FreezingBit_$memory#427: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_DiemAccount_$memory#428: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'#0'_$memory#429: $Memory $1_AccountLimits_Window'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t25));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,23121,24254)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:234:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1133
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:548:17+33
    assume {:print "$at(11,24445,24478)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:548:17+33
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:548:17+33
    assume $IsValid'$1_DiemAccount_Balance'#0''($Dereference($t2));

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:548:17+33
    assume $IsValid'u64'($t3);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:548:17+33
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:548:17+33
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:548:17+33
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:548:17+33
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:548:17+33
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:548:17+33
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:548:17+33
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume CanModify<AccountLimits::Window<#0>>(VASP::spec_parent_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:546:9+80
    assume {:print "$at(11,24296,24376)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t0)];

    // @425 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:546:9+80
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @426 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:546:9+80
    $1_AccountLimits_LimitsDefinition'#0'_$memory#426 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @421 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:546:9+80
    $1_AccountLimits_Window'#0'_$memory#421 := $1_AccountLimits_Window'#0'_$memory;

    // @422 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:546:9+80
    $1_VASP_ChildVASP_$memory#422 := $1_VASP_ChildVASP_$memory;

    // @423 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:546:9+80
    $1_VASP_ParentVASP_$memory#423 := $1_VASP_ParentVASP_$memory;

    // @427 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:546:9+80
    $1_AccountFreezing_FreezingBit_$memory#427 := $1_AccountFreezing_FreezingBit_$memory;

    // @428 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:546:9+80
    $1_DiemAccount_DiemAccount_$memory#428 := $1_DiemAccount_DiemAccount_$memory;

    // @424 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:546:9+80
    $1_DiemAccount_AccountOperationsCapability_$memory#424 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // $t10 := read_ref($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:546:9+80
    $t10 := $Dereference($t2);

    // trace_local[payer]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1
    assume {:print "$at(11,23121,23122)"} true;
    assume {:print "$track_local(29,44,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1
    assume {:print "$track_local(29,44,1):", $t1} $t1 == $t1;

    // trace_local[balance]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1
    $temp_0'$1_DiemAccount_Balance'#0'' := $Dereference($t2);
    assume {:print "$track_local(29,44,2):", $temp_0'$1_DiemAccount_Balance'#0''} $temp_0'$1_DiemAccount_Balance'#0'' == $temp_0'$1_DiemAccount_Balance'#0'';

    // trace_local[amount]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:522:5+1
    assume {:print "$track_local(29,44,3):", $t3} $t3 == $t3;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
    // >> opaque call: DiemTimestamp::assert_operating()
    assume {:print "$at(11,23334,23367)"} true;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33

    // assume Identical($t11, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
    assume ($t11 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t11) goto L19 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
    if ($t11) { goto L19; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
L10:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t12));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
    assume {:print "$at(11,23334,23367)"} true;
    assume {:print "$track_abort(29,44):", $t12} $t12 == $t12;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
    goto L8;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33
L9:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:528:9+33

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
    // >> opaque call: AccountFreezing::assert_not_frozen($t0)
    assume {:print "$at(11,23377,23418)"} true;

    // opaque begin: AccountFreezing::assert_not_frozen($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41

    // assume Identical($t13, AccountFreezing::spec_account_is_frozen($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
    assume ($t13 == $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t0));

    // if ($t13) goto L20 else goto L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
    if ($t13) { goto L20; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
L12:

    // assume And(AccountFreezing::spec_account_is_frozen($t0), Eq(1, $t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
    assume ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t0) && $IsEqual'u8'(1, $t12));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
    assume {:print "$at(11,23377,23418)"} true;
    assume {:print "$track_abort(29,44):", $t12} $t12 == $t12;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
    goto L8;

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41
L11:

    // opaque end: AccountFreezing::assert_not_frozen($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:529:9+41

    // $t14 := true at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:66+4
    assume {:print "$at(11,23613,23617)"} true;
    $t14 := true;
    assume $IsValid'bool'($t14);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:13+58
    // >> opaque call: $t11 := DiemAccount::should_track_limits_for_account<#0>($t0, $t1, $t10)

    // $t15 := opaque begin: DiemAccount::should_track_limits_for_account<#0>($t0, $t1, $t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:13+58

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:13+58
    assume $IsValid'bool'($t15);

    // assume Eq<bool>($t15, DiemAccount::spec_should_track_limits_for_account<#0>($t0, $t1, $t14)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:13+58
    assume $IsEqual'bool'($t15, $1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t0, $t1, $t14));

    // $t15 := opaque end: DiemAccount::should_track_limits_for_account<#0>($t0, $t1, $t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:13+58

    // if ($t15) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:9+443
    if ($t15) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:9+443
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:532:9+443
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:534:21+6
    assume {:print "$at(11,23721,23727)"} true;
L0:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    // >> opaque call: $t12 := VASP::parent_address($t0)
    assume {:print "$at(11,23749,23776)"} true;

    // $t16 := opaque begin: VASP::parent_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27

    // assume Identical($t17, And(Not(VASP::$is_parent($t0)), Not(VASP::$is_child($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    assume ($t17 == (!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t0) && !$1_VASP_$is_child($1_VASP_ChildVASP_$memory, $t0)));

    // if ($t17) goto L21 else goto L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    if ($t17) { goto L21; } else { goto L13; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
L14:

    // assume And(And(Not(VASP::$is_parent($t0)), Not(VASP::$is_child($t0))), Eq(7, $t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    assume ((!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t0) && !$1_VASP_$is_child($1_VASP_ChildVASP_$memory, $t0)) && $IsEqual'u8'(7, $t12));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    assume {:print "$at(11,23749,23776)"} true;
    assume {:print "$track_abort(29,44):", $t12} $t12 == $t12;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    goto L8;

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
L13:

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    assume $IsValid'address'($t16);

    // assume Eq<address>($t16, VASP::spec_parent_address($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27
    assume $IsEqual'address'($t16, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t0));

    // $t16 := opaque end: VASP::parent_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:535:21+27

    // $t18 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L8 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:536:65+34
    assume {:print "$at(11,23842,23876)"} true;
    call $t18 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,23842,23876)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,44):", $t12} $t12 == $t12;
        goto L8;
    }

    // $t19 := get_global<DiemAccount::AccountOperationsCapability>($t18) on_abort goto L8 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:536:22+13
    if (!$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t18)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $t18);
    }
    if ($abort_flag) {
        assume {:print "$at(11,23799,23812)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,44):", $t12} $t12 == $t12;
        goto L8;
    }

    // $t20 := get_field<DiemAccount::AccountOperationsCapability>.limits_cap($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:536:21+90
    $t20 := $limits_cap#$1_DiemAccount_AccountOperationsCapability($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    // >> opaque call: $t16 := AccountLimits::update_withdrawal_limits<#0>($t3, $t12, $t15)
    assume {:print "$at(11,23653,23902)"} true;

    // assert CanModify<AccountLimits::Window<#0>>($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assert {:msg "assert_failed(11,23653,23902): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$t16];

    // $t21 := opaque begin: AccountLimits::update_withdrawal_limits<#0>($t3, $t16, $t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249

    // assume Identical($t22, Or(Or(Or(Or(Not(exists<AccountLimits::Window<#0>>($t16)), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>($t16))))), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t16))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>($t16))), $t3), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t16))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>($t16)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>($t16)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t16))), Not(DiemTimestamp::$is_operating())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assume ($t22 == ((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t16) || !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16)))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16))) + $t3) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t22) goto L22 else goto L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    if ($t22) { goto L22; } else { goto L15; }

    // label L16 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
L16:

    // assume Or(Or(Or(Or(And(Not(exists<AccountLimits::Window<#0>>($t16)), Eq(5, $t12)), And(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>($t16)))), Eq(5, $t12))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t16))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>($t16))), $t3), 18446744073709551615)), Eq(8, $t12))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t16))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>($t16)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>($t16)))), MaxU64())), Eq(8, $t12))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>($t16))), Not(DiemTimestamp::$is_operating())), Eq(1, $t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assume (((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t16) && $IsEqual'u8'(5, $t12)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16))) && $IsEqual'u8'(5, $t12))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16))) + $t3) > 18446744073709551615)) && $IsEqual'u8'(8, $t12))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16)))) > $MAX_U64)) && $IsEqual'u8'(8, $t12))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'u8'(1, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assume {:print "$at(11,23653,23902)"} true;
    assume {:print "$track_abort(29,44):", $t12} $t12 == $t12;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    goto L8;

    // label L15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
L15:

    // @429 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    $1_AccountLimits_Window'#0'_$memory#429 := $1_AccountLimits_Window'#0'_$memory;

    // modifies global<AccountLimits::Window<#0>>($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $t16, $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $t16);
    }

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assume $IsValid'bool'($t21);

    // assume Eq<bool>($t21, AccountLimits::spec_withdrawal_limits_ok<#0>(global[@429]<AccountLimits::Window<#0>>($t16), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assume $IsEqual'bool'($t21, $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#429, $t16), $t3));

    // assume (if And($t21, Not(AccountLimits::spec_window_unrestricted<#0>(global[@429]<AccountLimits::Window<#0>>($t16)))) {Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t16), AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>(global[@429]<AccountLimits::Window<#0>>($t16)), $t3))} else {Or(Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t16), AccountLimits::spec_window_reset<#0>(global[@429]<AccountLimits::Window<#0>>($t16))), Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t16), global[@429]<AccountLimits::Window<#0>>($t16)))}) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249
    assume if (($t21 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#429, $t16)))) then ($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16), $1_AccountLimits_spec_update_outflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#429, $t16)), $t3))) else (($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#429, $t16))) || $IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t16), $ResourceValue($1_AccountLimits_Window'#0'_$memory#429, $t16))));

    // $t21 := opaque end: AccountLimits::update_withdrawal_limits<#0>($t3, $t16, $t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:32+249

    // trace_local[can_withdraw]($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:533:17+12
    assume {:print "$track_local(29,44,4):", $t21} $t21 == $t21;

    // $t23 := 6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:57+26
    assume {:print "$at(11,23960,23986)"} true;
    $t23 := 6;
    assume $IsValid'u64'($t23);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:34+50
    // >> opaque call: $t18 := Errors::limit_exceeded($t17)

    // $t24 := opaque begin: Errors::limit_exceeded($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:34+50

    // assume WellFormed($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:34+50
    assume $IsValid'u64'($t24);

    // assume Eq<u64>($t24, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:34+50
    assume $IsEqual'u64'($t24, 8);

    // $t24 := opaque end: Errors::limit_exceeded($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:34+50

    // trace_local[tmp#$7]($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
    assume {:print "$track_local(29,44,7):", $t24} $t24 == $t24;

    // trace_local[tmp#$6]($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
    assume {:print "$track_local(29,44,6):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
L3:

    // destroy($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72

    // trace_abort($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
    assume {:print "$at(11,23916,23988)"} true;
    assume {:print "$track_abort(29,44):", $t24} $t24 == $t24;

    // $t12 := move($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
    $t12 := $t24;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:538:13+72
    goto L8;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:540:25+7
    assume {:print "$at(11,24025,24032)"} true;
L2:

    // $t25 := borrow_field<DiemAccount::Balance<#0>>.coin($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:540:20+17
    $t25 := $ChildMutation($t2, 0, $coin#$1_DiemAccount_Balance'#0'($Dereference($t2)));

    // trace_local[coin]($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:540:13+4
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t25);
    assume {:print "$track_local(29,44,5):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // $t26 := read_ref($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:28+4
    assume {:print "$at(11,24147,24151)"} true;
    $t26 := $Dereference($t25);

    // $t27 := Diem::value<#0>($t26) on_abort goto L8 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:16+17
    call $t27 := $1_Diem_value'#0'($t26);
    if ($abort_flag) {
        assume {:print "$at(11,24135,24152)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,44):", $t12} $t12 == $t12;
        goto L8;
    }

    // $t28 := >=($t27, $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:34+2
    call $t28 := $Ge($t27, $t3);

    // $t29 := 5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:68+21
    $t29 := 5;
    assume $IsValid'u64'($t29);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:45+45
    // >> opaque call: $t24 := Errors::limit_exceeded($t23)

    // $t30 := opaque begin: Errors::limit_exceeded($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:45+45

    // assume WellFormed($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:45+45
    assume $IsValid'u64'($t30);

    // assume Eq<u64>($t30, 8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:45+45
    assume $IsEqual'u64'($t30, 8);

    // $t30 := opaque end: Errors::limit_exceeded($t29) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:45+45

    // trace_local[tmp#$9]($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
    assume {:print "$track_local(29,44,9):", $t30} $t30 == $t30;

    // trace_local[tmp#$8]($t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
    assume {:print "$track_local(29,44,8):", $t28} $t28 == $t28;

    // if ($t28) goto L4 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
    if ($t28) { goto L4; } else { goto L6; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
L5:

    // destroy($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82

    // trace_abort($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
    assume {:print "$at(11,24128,24210)"} true;
    assume {:print "$track_abort(29,44):", $t30} $t30 == $t30;

    // $t12 := move($t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
    $t12 := $t30;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:542:9+82
    goto L8;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:24+4
    assume {:print "$at(11,24235,24239)"} true;
L4:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    // >> opaque call: $t25 := Diem::withdraw<#0>($t19, $t3)

    // $t31 := opaque begin: Diem::withdraw<#0>($t25, $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28

    // $t32 := read_ref($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    $t32 := $Dereference($t25);

    // assume Identical($t33, Lt(select Diem::Diem.value($t25), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume ($t33 == ($value#$1_Diem_Diem'#0'($Dereference($t25)) < $t3));

    // if ($t33) goto L23 else goto L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    if ($t33) { goto L23; } else { goto L17; }

    // label L18 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
L18:

    // assume And(Lt(select Diem::Diem.value($t25), $t3), Eq(8, $t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume (($value#$1_Diem_Diem'#0'($Dereference($t25)) < $t3) && $IsEqual'u8'(8, $t12));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume {:print "$at(11,24220,24248)"} true;
    assume {:print "$track_abort(29,44):", $t12} $t12 == $t12;

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    goto L8;

    // label L17 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
L17:

    // havoc[mut]($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t25 := $UpdateMutation($t25, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t25));

    // assume WellFormed($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t25));

    // assume WellFormed($t31) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume $IsValid'$1_Diem_Diem'#0''($t31);

    // assume Eq<u64>(select Diem::Diem.value($t25), Sub(select Diem::Diem.value($t32), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t25)), ($value#$1_Diem_Diem'#0'($t32) - $t3));

    // assume Eq<u64>(select Diem::Diem.value($t31), $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t31), $t3);

    // $t31 := opaque end: Diem::withdraw<#0>($t25, $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28

    // write_back[Reference($t2).coin]($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    $t2 := $UpdateMutation($t2, $Update'$1_DiemAccount_Balance'#0''_coin($Dereference($t2), $Dereference($t25)));

    // trace_return[0]($t31) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    assume {:print "$track_return(29,44,0):", $t31} $t31 == $t31;

    // trace_local[balance]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    $temp_0'$1_DiemAccount_Balance'#0'' := $Dereference($t2);
    assume {:print "$track_local(29,44,2):", $temp_0'$1_DiemAccount_Balance'#0''} $temp_0'$1_DiemAccount_Balance'#0'' == $temp_0'$1_DiemAccount_Balance'#0'';

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:543:9+28
    goto L7;

    // label L6 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L6:

    // destroy($t2) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:544:5+1
    assume {:print "$at(11,24253,24254)"} true;
L7:

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@424]()), Not(AccountLimits::spec_update_withdrawal_limits[@425, @426, @421]<#0>($t3, VASP::spec_parent_address[@422, @423]($t0)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:561:9+308
    assume {:print "$at(11,24943,25251)"} true;
    assert {:msg "assert_failed(11,24943,25251): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#424) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425, $1_AccountLimits_LimitsDefinition'#0'_$memory#426, $1_AccountLimits_Window'#0'_$memory#421, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin($t10)), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:575:11+66
    assume {:print "$at(11,25561,25627)"} true;
    assert {:msg "assert_failed(11,25561,25627): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($t10)) < $t3);

    // assert Not(Not(DiemTimestamp::$is_operating[@425]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425);

    // assert Not(AccountFreezing::spec_account_is_frozen[@427]($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:181:9+69
    assume {:print "$at(4,7220,7289)"} true;
    assert {:msg "assert_failed(4,7220,7289): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#427, $t0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), Not(exists[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4079,4148)"} true;
    assert {:msg "assert_failed(5,4079,4148): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), Not(exists[@426]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:444:9+96
    assume {:print "$at(5,20782,20878)"} true;
    assert {:msg "assert_failed(5,20782,20878): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@425, @426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), $t3), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:454:9+99
    assume {:print "$at(5,21264,21363)"} true;
    assert {:msg "assert_failed(5,21264,21363): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425, $1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0)))) + $t3) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), Gt(Add(select AccountLimits::Window.window_start(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:291:9+102
    assume {:print "$at(5,13064,13166)"} true;
    assert {:msg "assert_failed(5,13064,13166): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), Not(DiemTimestamp::$is_operating[@425]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425)));

    // assert Eq<u64>(select Diem::Diem.value(select DiemAccount::Balance.coin($t2)), Sub(select Diem::Diem.value(select DiemAccount::Balance.coin($t10)), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:9+63
    assume {:print "$at(11,25777,25840)"} true;
    assert {:msg "assert_failed(11,25777,25840): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($Dereference($t2))), ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($t10)) - $t3));

    // assert Eq<u64>(select Diem::Diem.value($t31), $t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:582:9+31
    assume {:print "$at(11,25849,25880)"} true;
    assert {:msg "assert_failed(11,25849,25880): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t31), $t3);

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@428](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@428]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#428, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#428, addr)))));

    // return $t31 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    $ret0 := $t31;
    $ret1 := $t2;
    return;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:544:5+1
    assume {:print "$at(11,24253,24254)"} true;
L8:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@424]()), Not(AccountLimits::spec_update_withdrawal_limits[@425, @426, @421]<#0>($t3, VASP::spec_parent_address[@422, @423]($t0))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin($t10)), $t3)), Not(DiemTimestamp::$is_operating[@425]())), AccountFreezing::spec_account_is_frozen[@427]($t0)), And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), Not(exists[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0))))), And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), Not(exists[@426]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0))))))), And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@425, @426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), $t3), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), Gt(Add(select AccountLimits::Window.window_start(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), Not(DiemTimestamp::$is_operating[@425]())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:545:5+226
    assume {:print "$at(11,24259,24485)"} true;
    assert {:msg "assert_failed(11,24259,24485): abort not covered by any of the `aborts_if` clauses"}
      ((((((((($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#424) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425, $1_AccountLimits_LimitsDefinition'#0'_$memory#426, $1_AccountLimits_Window'#0'_$memory#421, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0)))) || ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($t10)) < $t3)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#427, $t0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425, $1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0)))) + $t3) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(And(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@424]()), Not(AccountLimits::spec_update_withdrawal_limits[@425, @426, @421]<#0>($t3, VASP::spec_parent_address[@422, @423]($t0))))), Eq(8, $t12)), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin($t10)), $t3), Eq(8, $t12))), And(Not(DiemTimestamp::$is_operating[@425]()), Eq(1, $t12))), And(AccountFreezing::spec_account_is_frozen[@427]($t0), Eq(1, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), Not(exists[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), Eq(5, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), Not(exists[@426]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))))), Eq(5, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@425, @426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), $t3), 18446744073709551615))), Eq(8, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), Gt(Add(select AccountLimits::Window.window_start(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0))))), MaxU64()))), Eq(8, $t12))), And(And(DiemAccount::spec_should_track_limits_for_account[@421, @422, @423]<#0>($t0, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@426]<#0>(global[@421]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@422, @423]($t0)))), Not(DiemTimestamp::$is_operating[@425]()))), Eq(1, $t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:545:5+226
    assert {:msg "assert_failed(11,24259,24485): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#424) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425, $1_AccountLimits_LimitsDefinition'#0'_$memory#426, $1_AccountLimits_Window'#0'_$memory#421, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0)))) && $IsEqual'u8'(8, $t12)) || (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($t10)) < $t3) && $IsEqual'u8'(8, $t12))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425) && $IsEqual'u8'(1, $t12))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#427, $t0) && $IsEqual'u8'(1, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) && $IsEqual'u8'(5, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))))) && $IsEqual'u8'(5, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425, $1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0)))) + $t3) > 18446744073709551615))) && $IsEqual'u8'(8, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))))) > $MAX_U64))) && $IsEqual'u8'(8, $t12))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#426, $ResourceValue($1_AccountLimits_Window'#0'_$memory#421, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#422, $1_VASP_ParentVASP_$memory#423, $t0))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#425))) && $IsEqual'u8'(1, $t12)));

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:545:5+226
    $abort_code := $t12;
    $abort_flag := true;
    return;

    // label L19 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L19:

    // destroy($t2) at <internal>:1:1+10

    // goto L10 at <internal>:1:1+10
    goto L10;

    // label L20 at <internal>:1:1+10
L20:

    // destroy($t2) at <internal>:1:1+10

    // goto L12 at <internal>:1:1+10
    goto L12;

    // label L21 at <internal>:1:1+10
L21:

    // destroy($t2) at <internal>:1:1+10

    // goto L14 at <internal>:1:1+10
    goto L14;

    // label L22 at <internal>:1:1+10
L22:

    // destroy($t2) at <internal>:1:1+10

    // goto L16 at <internal>:1:1+10
    goto L16;

    // label L23 at <internal>:1:1+10
L23:

    // destroy($t2) at <internal>:1:1+10

    // goto L18 at <internal>:1:1+10
    goto L18;

}

// fun DiemAccount::writeset_epilogue [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
procedure {:timeLimit 40} $1_DiemAccount_writeset_epilogue$verify(_$t0: int, _$t1: int, _$t2: bool) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: $Mutation ($1_DiemAccount_DiemWriteSetManager);
    var $t9: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent';
    var $t10: $1_DiemAccount_AdminTransactionEvent;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($1_DiemAccount_DiemWriteSetManager);
    var $t14: $Mutation ($1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent');
    var $t15: int;
    var $t16: bool;
    var $t17: $1_DiemAccount_AdminTransactionEvent;
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: bool;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: $1_DiemConfig_Configuration;
    var $t31: int;
    var $t32: bool;
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'$1_DiemAccount_DiemWriteSetManager': $1_DiemAccount_DiemWriteSetManager;
    var $temp_0'$1_DiemConfig_Configuration': $1_DiemConfig_Configuration;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#376: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t14));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,94454,95636)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    assume $IsValid'bool'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DisableReconfiguration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DisableReconfiguration'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1182
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume Identical($t9, select DiemAccount::DiemWriteSetManager.upgrade_events(global<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2099:9+92
    assume {:print "$at(11,95757,95849)"} true;
    assume ($t9 == $upgrade_events#$1_DiemAccount_DiemWriteSetManager($ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Identical($t10, pack DiemAccount::AdminTransactionEvent(DiemTimestamp::spec_now_seconds())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2100:9+116
    assume {:print "$at(11,95858,95974)"} true;
    assume ($t10 == $1_DiemAccount_AdminTransactionEvent($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // @376 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1
    assume {:print "$at(11,94454,94455)"} true;
    $1_DiemAccount_DiemAccount_$memory#376 := $1_DiemAccount_DiemAccount_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1
    assume {:print "$track_local(29,45,0):", $t0} $t0 == $t0;

    // trace_local[txn_sequence_number]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1
    assume {:print "$track_local(29,45,1):", $t1} $t1 == $t1;

    // trace_local[should_trigger_reconfiguration]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2072:5+1
    assume {:print "$track_local(29,45,2):", $t2} $t2 == $t2;

    // trace_local[dr_account#1859]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2077:13+10
    assume {:print "$at(11,94656,94666)"} true;
    assume {:print "$track_local(29,45,3):", $t0} $t0 == $t0;

    // $t11 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L9 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2078:74+34
    assume {:print "$at(11,94755,94789)"} true;
    call $t11 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,94755,94789)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,45):", $t12} $t12 == $t12;
        goto L9;
    }

    // $t13 := borrow_global<DiemAccount::DiemWriteSetManager>($t11) on_abort goto L9 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2078:35+17
    if (!$ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t13 := $Mutation($Global($t11), EmptyVec(), $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $t11));
    }
    if ($abort_flag) {
        assume {:print "$at(11,94716,94733)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,45):", $t12} $t12 == $t12;
        goto L9;
    }

    // trace_local[writeset_events_ref]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2078:13+19
    $temp_0'$1_DiemAccount_DiemWriteSetManager' := $Dereference($t13);
    assume {:print "$track_local(29,45,8):", $temp_0'$1_DiemAccount_DiemWriteSetManager'} $temp_0'$1_DiemAccount_DiemWriteSetManager' == $temp_0'$1_DiemAccount_DiemWriteSetManager';

    // $t14 := borrow_field<DiemAccount::DiemWriteSetManager>.upgrade_events($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2080:13+39
    assume {:print "$at(11,94854,94893)"} true;
    $t14 := $ChildMutation($t13, 0, $upgrade_events#$1_DiemAccount_DiemWriteSetManager($Dereference($t13)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:63+28
    // >> opaque call: $t12 := DiemTimestamp::now_seconds()
    assume {:print "$at(11,94957,94985)"} true;

    // $t15 := opaque begin: DiemTimestamp::now_seconds() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:63+28

    // assume Identical($t16, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:63+28
    assume ($t16 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t16) goto L14 else goto L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:63+28
    if ($t16) { goto L14; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:63+28
L11:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:63+28
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t12));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:63+28
    assume {:print "$at(11,94957,94985)"} true;
    assume {:print "$track_abort(29,45):", $t12} $t12 == $t12;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:63+28
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:63+28
L10:

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:63+28
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, Div(DiemTimestamp::spec_now_microseconds(), 1000000)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:63+28
    assume $IsEqual'u64'($t15, ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) div 1000000));

    // $t15 := opaque end: DiemTimestamp::now_seconds() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:63+28

    // $t17 := pack DiemAccount::AdminTransactionEvent($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2081:13+80
    $t17 := $1_DiemAccount_AdminTransactionEvent($t15);

    // Event::emit_event<DiemAccount::AdminTransactionEvent>($t14, $t17) on_abort goto L9 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2079:9+198
    assume {:print "$at(11,94800,94998)"} true;
    call $t14 := $1_Event_emit_event'$1_DiemAccount_AdminTransactionEvent'($t14, $t17);
    if ($abort_flag) {
        assume {:print "$at(11,94800,94998)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,45):", $t12} $t12 == $t12;
        goto L9;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2086:13+30
    // >> opaque call: $t14 := Signer::address_of($t0)
    assume {:print "$at(11,95135,95165)"} true;

    // $t18 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2086:13+30

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2086:13+30
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2086:13+30
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t0));

    // $t18 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2086:13+30

    // $t19 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L9 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2086:47+34
    call $t19 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,95169,95203)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,45):", $t12} $t12 == $t12;
        goto L9;
    }

    // $t20 := ==($t18, $t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2086:44+2
    $t20 := $IsEqual'address'($t18, $t19);

    // $t21 := 1010 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2087:38+33
    assume {:print "$at(11,95242,95275)"} true;
    $t21 := 1010;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2087:13+59
    // >> opaque call: $t18 := Errors::invalid_argument($t17)

    // $t22 := opaque begin: Errors::invalid_argument($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2087:13+59

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2087:13+59
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2087:13+59
    assume $IsEqual'u64'($t22, 7);

    // $t22 := opaque end: Errors::invalid_argument($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2087:13+59

    // trace_local[tmp#$5]($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2085:9+171
    assume {:print "$at(11,95115,95286)"} true;
    assume {:print "$track_local(29,45,5):", $t22} $t22 == $t22;

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2085:9+171
    assume {:print "$track_local(29,45,4):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2085:9+171
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2085:9+171
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2085:9+171

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2085:9+171
    assume {:print "$at(11,95115,95286)"} true;
    assume {:print "$track_abort(29,45):", $t22} $t22 == $t22;

    // $t12 := move($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2085:9+171
    $t12 := $t22;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2085:9+171
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:42+10
    assume {:print "$at(11,95329,95339)"} true;
L0:

    // $t23 := Roles::has_diem_root_role($t0) on_abort goto L9 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:16+37
    call $t23 := $1_Roles_has_diem_root_role($t0);
    if ($abort_flag) {
        assume {:print "$at(11,95303,95340)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,45):", $t12} $t12 == $t12;
        goto L9;
    }

    // $t24 := 1010 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:80+33
    $t24 := 1010;
    assume $IsValid'u64'($t24);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:55+59
    // >> opaque call: $t21 := Errors::invalid_argument($t20)

    // $t25 := opaque begin: Errors::invalid_argument($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:55+59

    // assume WellFormed($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:55+59
    assume $IsValid'u64'($t25);

    // assume Eq<u64>($t25, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:55+59
    assume $IsEqual'u64'($t25, 7);

    // $t25 := opaque end: Errors::invalid_argument($t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:55+59

    // trace_local[tmp#$7]($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:9+106
    assume {:print "$track_local(29,45,7):", $t25} $t25 == $t25;

    // trace_local[tmp#$6]($t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:9+106
    assume {:print "$track_local(29,45,6):", $t23} $t23 == $t23;

    // if ($t23) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:9+106
    if ($t23) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:9+106
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:9+106

    // trace_abort($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:9+106
    assume {:print "$at(11,95296,95402)"} true;
    assume {:print "$track_abort(29,45):", $t25} $t25 == $t25;

    // $t12 := move($t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:9+106
    $t12 := $t25;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2089:9+106
    goto L9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2092:30+10
    assume {:print "$at(11,95508,95518)"} true;
L2:

    // $t26 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2092:63+1
    $t26 := 0;
    assume $IsValid'u64'($t26);

    // $t27 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2092:66+1
    $t27 := 0;
    assume $IsValid'u64'($t27);

    // $t28 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2092:69+1
    $t28 := 0;
    assume $IsValid'u64'($t28);

    // DiemAccount::epilogue_common<XUS::XUS>($t0, $t1, $t26, $t27, $t28) on_abort goto L9 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2092:9+62
    call $1_DiemAccount_epilogue_common'$1_XUS_XUS'($t0, $t1, $t26, $t27, $t28);
    if ($abort_flag) {
        assume {:print "$at(11,95487,95549)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,45):", $t12} $t12 == $t12;
        goto L9;
    }

    // if ($t2) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:9+71
    assume {:print "$at(11,95559,95630)"} true;
    if ($t2) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:9+71
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:9+71
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:69+10
L4:

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:45+35
    // >> opaque call: DiemConfig::reconfigure($t0)

    // assume Identical($t29, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t29 == $1_Signer_spec_address_of($t0));

    // assume Identical($t30, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t30 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t31, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t31 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // opaque begin: DiemConfig::reconfigure($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:45+35
    assume {:print "$at(11,95595,95630)"} true;

    // assume Identical($t32, Or(Or(Or(Not(exists<Roles::RoleId>($t29)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t29)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())), And(And(And(And(DiemTimestamp::$is_operating(), DiemConfig::$reconfiguration_enabled()), Gt(DiemTimestamp::spec_now_microseconds(), 0)), Lt(select DiemConfig::Configuration.epoch($t30), 18446744073709551615)), Lt($t31, select DiemConfig::Configuration.last_reconfiguration_time($t30))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:45+35
    assume ($t32 == (((!$ResourceExists($1_Roles_RoleId_$memory, $t29) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t29)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || (((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > 0)) && ($epoch#$1_DiemConfig_Configuration($t30) < 18446744073709551615)) && ($t31 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t30)))));

    // if ($t32) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:45+35
    if ($t32) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:45+35
L13:

    // assume Or(Or(Or(And(Not(exists<Roles::RoleId>($t29)), Eq(5, $t12)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t29)), 0), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t12))), And(And(And(And(And(DiemTimestamp::$is_operating(), DiemConfig::$reconfiguration_enabled()), Gt(DiemTimestamp::spec_now_microseconds(), 0)), Lt(select DiemConfig::Configuration.epoch($t30), 18446744073709551615)), Lt($t31, select DiemConfig::Configuration.last_reconfiguration_time($t30))), Eq(1, $t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:45+35
    assume ((((!$ResourceExists($1_Roles_RoleId_$memory, $t29) && $IsEqual'u8'(5, $t12)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t29)), 0) && $IsEqual'u8'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t12))) || ((((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > 0)) && ($epoch#$1_DiemConfig_Configuration($t30) < 18446744073709551615)) && ($t31 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t30))) && $IsEqual'u8'(1, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:45+35
    assume {:print "$at(11,95595,95630)"} true;
    assume {:print "$track_abort(29,45):", $t12} $t12 == $t12;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:45+35
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:45+35
L12:

    // modifies global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:45+35
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_Configuration';
        $1_DiemConfig_Configuration_$memory := $ResourceUpdate($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_Configuration');
    } else {
        $1_DiemConfig_Configuration_$memory := $ResourceRemove($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // opaque end: DiemConfig::reconfigure($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:45+35

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:9+71
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:9+71
L6:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:9+71

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2093:9+71
L7:

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2094:5+1
    assume {:print "$at(11,95635,95636)"} true;
L8:

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@376]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@376](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#376, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#376, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@376]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@376]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#376, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#376, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@376](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@376]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#376, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#376, addr)))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t10, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2103:9+20
    assume {:print "$at(11,95983,96003)"} true;
    assert {:msg "assert_failed(11,95983,96003): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'($EmptyEventStore, $t9, $t10); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t10, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2095:5+68
    assume {:print "$at(11,95641,95709)"} true;
    assert {:msg "assert_failed(11,95641,95709): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'($EmptyEventStore, $t9, $t10); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2095:5+68
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2094:5+1
    assume {:print "$at(11,95635,95636)"} true;
L9:

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2094:5+1
    $abort_code := $t12;
    $abort_flag := true;
    return;

    // label L14 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L14:

    // destroy($t14) at <internal>:1:1+10

    // goto L11 at <internal>:1:1+10
    goto L11;

}

// fun DiemAccount::writeset_prologue [verification] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
procedure {:timeLimit 40} $1_DiemAccount_writeset_prologue$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: int, _$t4: int) returns ()
{
    // declare local variables
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: int;
    var $t4: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Roles_RoleId_$memory#312: $Memory $1_Roles_RoleId;
    var $1_ChainId_ChainId_$memory#313: $Memory $1_ChainId_ChainId;
    var $1_DiemAccount_DiemAccount_$memory#314: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountFreezing_FreezingBit_$memory#315: $Memory $1_AccountFreezing_FreezingBit;
    var $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory#316: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#317: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#318: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(11,78136,78953)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    assume $IsValid'u8'($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+817
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1748:9+57
    assume {:print "$at(11,79389,79446)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // @318 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+1
    assume {:print "$at(11,78136,78137)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#318 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @312 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+1
    $1_Roles_RoleId_$memory#312 := $1_Roles_RoleId_$memory;

    // @316 := save_mem(TransactionFee::TransactionFee<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+1
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory#316 := $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory;

    // @313 := save_mem(ChainId::ChainId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+1
    $1_ChainId_ChainId_$memory#313 := $1_ChainId_ChainId_$memory;

    // @315 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+1
    $1_AccountFreezing_FreezingBit_$memory#315 := $1_AccountFreezing_FreezingBit_$memory;

    // @314 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+1
    $1_DiemAccount_DiemAccount_$memory#314 := $1_DiemAccount_DiemAccount_$memory;

    // @317 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+1
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#317 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // trace_local[sender]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+1
    assume {:print "$track_local(29,46,0):", $t0} $t0 == $t0;

    // trace_local[txn_sequence_number]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+1
    assume {:print "$track_local(29,46,1):", $t1} $t1 == $t1;

    // trace_local[txn_public_key]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+1
    assume {:print "$track_local(29,46,2):", $t2} $t2 == $t2;

    // trace_local[txn_expiration_time]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+1
    assume {:print "$track_local(29,46,3):", $t3} $t3 == $t3;

    // trace_local[chain_id]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1711:5+1
    assume {:print "$track_local(29,46,4):", $t4} $t4 == $t4;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1719:13+27
    // >> opaque call: $t9 := Signer::address_of($t0)
    assume {:print "$at(11,78375,78402)"} true;

    // $t10 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1719:13+27

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1719:13+27
    assume $IsValid'address'($t10);

    // assume Eq<address>($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1719:13+27
    assume $IsEqual'address'($t10, $1_Signer_spec_address_of($t0));

    // $t10 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1719:13+27

    // $t11 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L5 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1719:44+34
    call $t11 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(11,78406,78440)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,46):", $t12} $t12 == $t12;
        goto L5;
    }

    // $t13 := ==($t10, $t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1719:41+2
    $t13 := $IsEqual'address'($t10, $t11);

    // $t14 := 1010 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1720:38+33
    assume {:print "$at(11,78479,78512)"} true;
    $t14 := 1010;
    assume $IsValid'u64'($t14);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1720:13+59
    // >> opaque call: $t13 := Errors::invalid_argument($t12)

    // $t15 := opaque begin: Errors::invalid_argument($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1720:13+59

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1720:13+59
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1720:13+59
    assume $IsEqual'u64'($t15, 7);

    // $t15 := opaque end: Errors::invalid_argument($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1720:13+59

    // trace_local[tmp#$6]($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1718:9+168
    assume {:print "$at(11,78355,78523)"} true;
    assume {:print "$track_local(29,46,6):", $t15} $t15 == $t15;

    // trace_local[tmp#$5]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1718:9+168
    assume {:print "$track_local(29,46,5):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1718:9+168
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1718:9+168
L1:

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1718:9+168
    assume {:print "$at(11,78355,78523)"} true;
    assume {:print "$track_abort(29,46):", $t15} $t15 == $t15;

    // $t12 := move($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1718:9+168
    $t12 := $t15;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1718:9+168
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:42+7
    assume {:print "$at(11,78566,78573)"} true;
L0:

    // $t16 := Roles::has_diem_root_role($t0) on_abort goto L5 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:16+34
    call $t16 := $1_Roles_has_diem_root_role($t0);
    if ($abort_flag) {
        assume {:print "$at(11,78540,78574)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,46):", $t12} $t12 == $t12;
        goto L5;
    }

    // $t17 := 1010 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:77+33
    $t17 := 1010;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:52+59
    // >> opaque call: $t16 := Errors::invalid_argument($t15)

    // $t18 := opaque begin: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:52+59

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:52+59
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:52+59
    assume $IsEqual'u64'($t18, 7);

    // $t18 := opaque end: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:52+59

    // trace_local[tmp#$8]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:9+103
    assume {:print "$track_local(29,46,8):", $t18} $t18 == $t18;

    // trace_local[tmp#$7]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:9+103
    assume {:print "$track_local(29,46,7):", $t16} $t16 == $t16;

    // if ($t16) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:9+103
    if ($t16) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:9+103
L3:

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:9+103
    assume {:print "$at(11,78533,78636)"} true;
    assume {:print "$track_abort(29,46):", $t18} $t18 == $t18;

    // $t12 := move($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:9+103
    $t12 := $t18;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1722:9+103
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1726:13+7
    assume {:print "$at(11,78783,78790)"} true;
L2:

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1729:13+1
    assume {:print "$at(11,78865,78866)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1730:13+1
    assume {:print "$at(11,78880,78881)"} true;
    $t20 := 0;
    assume $IsValid'u64'($t20);

    // assume Identical($t21, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1947:9+57
    assume {:print "$at(11,88304,88361)"} true;
    assume ($t21 == $1_Signer_spec_address_of($t0));

    // assume Identical($t22, Mul($t19, $t20)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1948:9+60
    assume {:print "$at(11,88370,88430)"} true;
    assume ($t22 == ($t19 * $t20));

    // DiemAccount::prologue_common<XUS::XUS>($t0, $t1, $t2, $t19, $t20, $t3, $t4) on_abort goto L5 with $t12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1725:9+198
    assume {:print "$at(11,78749,78947)"} true;
    call $1_DiemAccount_prologue_common'$1_XUS_XUS'($t0, $t1, $t2, $t19, $t20, $t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(11,78749,78947)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(29,46):", $t12} $t12 == $t12;
        goto L5;
    }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1734:5+1
    assume {:print "$at(11,78952,78953)"} true;
L4:

    // assert Not(Neq<address>($t9, CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1750:9+97
    assume {:print "$at(11,79491,79588)"} true;
    assert {:msg "assert_failed(11,79491,79588): function does not abort under this condition"}
      !!$IsEqual'address'($t9, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(Not(Roles::spec_has_diem_root_role_addr[@312]($t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1753:9+97
    assume {:print "$at(11,79722,79819)"} true;
    assert {:msg "assert_failed(11,79722,79819): function does not abort under this condition"}
      !!$1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory#312, $t9);

    // assert Not(Neq<u8>($t4, ChainId::spec_get_chain_id[@313]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1964:9+81
    assume {:print "$at(11,89008,89089)"} true;
    assert {:msg "assert_failed(11,89008,89089): function does not abort under this condition"}
      !!$IsEqual'u8'($t4, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#313));

    // assert Not(Not(DiemAccount::$exists_at[@314]($t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1966:9+71
    assume {:print "$at(11,89140,89211)"} true;
    assert {:msg "assert_failed(11,89140,89211): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#314, $t9);

    // assert Not(AccountFreezing::spec_account_is_frozen[@315]($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1968:9+97
    assume {:print "$at(11,89262,89359)"} true;
    assert {:msg "assert_failed(11,89262,89359): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#315, $t9);

    // assert Not(Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@314]<DiemAccount::DiemAccount>($t9)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1970:9+133
    assume {:print "$at(11,89410,89543)"} true;
    assert {:msg "assert_failed(11,89410,89543): function does not abort under this condition"}
      !!$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#314, $t9)));

    // assert Not(Gt(0, 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1972:9+70
    assume {:print "$at(11,89594,89664)"} true;
    assert {:msg "assert_failed(11,89594,89664): function does not abort under this condition"}
      !(0 > 18446744073709551615);

    // assert Not(And(Gt(0, 0), Not(TransactionFee::$is_coin_initialized[@316]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1974:9+113
    assume {:print "$at(11,89715,89828)"} true;
    assert {:msg "assert_failed(11,89715,89828): function does not abort under this condition"}
      !((0 > 0) && !$1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory#316));

    // assert Not(And(Gt(0, 0), Not(exists[@317]<DiemAccount::Balance<XUS::XUS>>($t9)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1976:9+111
    assume {:print "$at(11,89879,89990)"} true;
    assert {:msg "assert_failed(11,89879,89990): function does not abort under this condition"}
      !((0 > 0) && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#317, $t9));

    // assert Not(And(Gt(0, 0), Lt(DiemAccount::$balance[@317]<XUS::XUS>($t9), 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1978:9+124
    assume {:print "$at(11,90041,90165)"} true;
    assert {:msg "assert_failed(11,90041,90165): function does not abort under this condition"}
      !((0 > 0) && ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#317, $t9) < 0));

    // assert Not(Ge(DiemTimestamp::spec_now_seconds[@318](), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1980:9+105
    assume {:print "$at(11,90216,90321)"} true;
    assert {:msg "assert_failed(11,90216,90321): function does not abort under this condition"}
      !($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#318) >= $t3);

    // assert Not(Ge($t1, 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1982:9+69
    assume {:print "$at(11,90374,90443)"} true;
    assert {:msg "assert_failed(11,90374,90443): function does not abort under this condition"}
      !($t1 >= 18446744073709551615);

    // assert Not(Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@314]<DiemAccount::DiemAccount>($t9)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1984:9+118
    assume {:print "$at(11,90495,90613)"} true;
    assert {:msg "assert_failed(11,90495,90613): function does not abort under this condition"}
      !($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#314, $t9)));

    // assert Not(Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@314]<DiemAccount::DiemAccount>($t9)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1986:9+118
    assume {:print "$at(11,90665,90783)"} true;
    assert {:msg "assert_failed(11,90665,90783): function does not abort under this condition"}
      !($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#314, $t9)));

    // assert Not(Not(DiemTimestamp::$is_operating[@318]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:162:9+53
    assume {:print "$at(17,6580,6633)"} true;
    assert {:msg "assert_failed(17,6580,6633): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#318);

    // assert DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1738:9+36
    assume {:print "$at(11,79085,79121)"} true;
    assert {:msg "assert_failed(11,79085,79121): post-condition does not hold"}
      $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // assert Roles::$has_diem_root_role($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1739:9+42
    assume {:print "$at(11,79130,79172)"} true;
    assert {:msg "assert_failed(11,79130,79172): post-condition does not hold"}
      $1_Roles_$has_diem_root_role($1_Roles_RoleId_$memory, $t0);

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@314]<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap[@314](addr))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Not(DiemAccount::spec_has_key_rotation_cap(addr)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2216:9+195
    assume {:print "$at(11,101154,101349)"} true;
    assert {:msg "assert_failed(11,101154,101349): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#314, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory#314, addr)) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || !$1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(Not(exists[@314]<DiemAccount::DiemAccount>(addr)), Option::$is_none[]<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global[@314]<DiemAccount::DiemAccount>(addr)))), Or(Not(exists<DiemAccount::DiemAccount>(addr)), Option::$is_none<DiemAccount::WithdrawCapability>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(addr))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2246:9+255
    assume {:print "$at(11,102732,102987)"} true;
    assert {:msg "assert_failed(11,102732,102987): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (((!$ResourceExists($1_DiemAccount_DiemAccount_$memory#314, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#314, addr)))) ==> (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, addr) || $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))))));

    // assert forall addr: TypeDomain<address>() where DiemAccount::$exists_at[@314](addr): Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>(addr)), select DiemAccount::DiemAccount.authentication_key(global[@314]<DiemAccount::DiemAccount>(addr))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    assume {:print "$at(11,103296,103463)"} true;
    assert {:msg "assert_failed(11,103296,103463): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#314, addr))  ==> ($IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#314, addr)))));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2259:9+167
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1734:5+1
    assume {:print "$at(11,78952,78953)"} true;
L5:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Neq<address>($t9, CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Not(Roles::spec_has_diem_root_role_addr[@312]($t9))), Neq<u8>($t4, ChainId::spec_get_chain_id[@313]())), Not(DiemAccount::$exists_at[@314]($t9))), AccountFreezing::spec_account_is_frozen[@315]($t9)), Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@314]<DiemAccount::DiemAccount>($t9)))), Gt(0, 18446744073709551615)), And(Gt(0, 0), Not(TransactionFee::$is_coin_initialized[@316]<XUS::XUS>()))), And(Gt(0, 0), Not(exists[@317]<DiemAccount::Balance<XUS::XUS>>($t9)))), And(Gt(0, 0), Lt(DiemAccount::$balance[@317]<XUS::XUS>($t9), 0))), Ge(DiemTimestamp::spec_now_seconds[@318](), $t3)), Ge($t1, 18446744073709551615)), Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@314]<DiemAccount::DiemAccount>($t9)))), Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@314]<DiemAccount::DiemAccount>($t9)))), Not(DiemTimestamp::$is_operating[@318]())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1736:5+219
    assume {:print "$at(11,78959,79178)"} true;
    assert {:msg "assert_failed(11,78959,79178): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((!$IsEqual'address'($t9, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory#312, $t9)) || !$IsEqual'u8'($t4, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#313))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#314, $t9)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#315, $t9)) || !$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#314, $t9)))) || (0 > 18446744073709551615)) || ((0 > 0) && !$1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory#316))) || ((0 > 0) && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#317, $t9))) || ((0 > 0) && ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#317, $t9) < 0))) || ($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#318) >= $t3)) || ($t1 >= 18446744073709551615)) || ($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#314, $t9)))) || ($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#314, $t9)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#318));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Neq<address>($t9, CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(7, $t12)), And(Not(Roles::spec_has_diem_root_role_addr[@312]($t9)), Eq(7, $t12))), And(Neq<u8>($t4, ChainId::spec_get_chain_id[@313]()), Eq(7, $t12))), And(Not(DiemAccount::$exists_at[@314]($t9)), Eq(7, $t12))), And(AccountFreezing::spec_account_is_frozen[@315]($t9), Eq(1, $t12))), And(Neq<vector<u8>>(Hash::$sha3_256[]($t2), select DiemAccount::DiemAccount.authentication_key(global[@314]<DiemAccount::DiemAccount>($t9))), Eq(7, $t12))), And(Gt(0, 18446744073709551615), Eq(7, $t12))), And(And(Gt(0, 0), Not(TransactionFee::$is_coin_initialized[@316]<XUS::XUS>())), Eq(7, $t12))), And(And(Gt(0, 0), Not(exists[@317]<DiemAccount::Balance<XUS::XUS>>($t9))), Eq(7, $t12))), And(And(Gt(0, 0), Lt(DiemAccount::$balance[@317]<XUS::XUS>($t9), 0)), Eq(7, $t12))), And(Ge(DiemTimestamp::spec_now_seconds[@318](), $t3), Eq(7, $t12))), And(Ge($t1, 18446744073709551615), Eq(8, $t12))), And(Lt($t1, select DiemAccount::DiemAccount.sequence_number(global[@314]<DiemAccount::DiemAccount>($t9))), Eq(7, $t12))), And(Gt($t1, select DiemAccount::DiemAccount.sequence_number(global[@314]<DiemAccount::DiemAccount>($t9))), Eq(7, $t12))), And(Not(DiemTimestamp::$is_operating[@318]()), Eq(1, $t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1736:5+219
    assert {:msg "assert_failed(11,78959,79178): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((!$IsEqual'address'($t9, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(7, $t12)) || (!$1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory#312, $t9) && $IsEqual'u8'(7, $t12))) || (!$IsEqual'u8'($t4, $1_ChainId_spec_get_chain_id($1_ChainId_ChainId_$memory#313)) && $IsEqual'u8'(7, $t12))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#314, $t9) && $IsEqual'u8'(7, $t12))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#315, $t9) && $IsEqual'u8'(1, $t12))) || (!$IsEqual'vec'u8''($1_Hash_$sha3_256($t2), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#314, $t9))) && $IsEqual'u8'(7, $t12))) || ((0 > 18446744073709551615) && $IsEqual'u8'(7, $t12))) || (((0 > 0) && !$1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory#316)) && $IsEqual'u8'(7, $t12))) || (((0 > 0) && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#317, $t9)) && $IsEqual'u8'(7, $t12))) || (((0 > 0) && ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#317, $t9) < 0)) && $IsEqual'u8'(7, $t12))) || (($1_DiemTimestamp_spec_now_seconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#318) >= $t3) && $IsEqual'u8'(7, $t12))) || (($t1 >= 18446744073709551615) && $IsEqual'u8'(8, $t12))) || (($t1 < $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#314, $t9))) && $IsEqual'u8'(7, $t12))) || (($t1 > $sequence_number#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#314, $t9))) && $IsEqual'u8'(7, $t12))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#318) && $IsEqual'u8'(1, $t12)));

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1736:5+219
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:600:10+105
function {:inline} $1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): Vec ($1_DiemSystem_ValidatorInfo) {
    $validators#$1_DiemSystem_DiemSystem($1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))
}

// struct DiemSystem::DiemSystem at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:51:5+198
type {:datatype} $1_DiemSystem_DiemSystem;
function {:constructor} $1_DiemSystem_DiemSystem($scheme: int, $validators: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem;
function {:inline} $Update'$1_DiemSystem_DiemSystem'_scheme(s: $1_DiemSystem_DiemSystem, x: int): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem(x, $validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $Update'$1_DiemSystem_DiemSystem'_validators(s: $1_DiemSystem_DiemSystem, x: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem($scheme#$1_DiemSystem_DiemSystem(s), x)
}
function $IsValid'$1_DiemSystem_DiemSystem'(s: $1_DiemSystem_DiemSystem): bool {
    $IsValid'u8'($scheme#$1_DiemSystem_DiemSystem(s))
      && $IsValid'vec'$1_DiemSystem_ValidatorInfo''($validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $IsEqual'$1_DiemSystem_DiemSystem'(s1: $1_DiemSystem_DiemSystem, s2: $1_DiemSystem_DiemSystem): bool {
    s1 == s2
}

// struct DiemSystem::CapabilityHolder at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:42:5+242
type {:datatype} $1_DiemSystem_CapabilityHolder;
function {:constructor} $1_DiemSystem_CapabilityHolder($cap: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder;
function {:inline} $Update'$1_DiemSystem_CapabilityHolder'_cap(s: $1_DiemSystem_CapabilityHolder, x: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder {
    $1_DiemSystem_CapabilityHolder(x)
}
function $IsValid'$1_DiemSystem_CapabilityHolder'(s: $1_DiemSystem_CapabilityHolder): bool {
    $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''($cap#$1_DiemSystem_CapabilityHolder(s))
}
function {:inline} $IsEqual'$1_DiemSystem_CapabilityHolder'(s1: $1_DiemSystem_CapabilityHolder, s2: $1_DiemSystem_CapabilityHolder): bool {
    s1 == s2
}
var $1_DiemSystem_CapabilityHolder_$memory: $Memory $1_DiemSystem_CapabilityHolder;

// struct DiemSystem::ValidatorInfo at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:21:5+600
type {:datatype} $1_DiemSystem_ValidatorInfo;
function {:constructor} $1_DiemSystem_ValidatorInfo($addr: int, $consensus_voting_power: int, $config: $1_ValidatorConfig_Config, $last_config_update_time: int): $1_DiemSystem_ValidatorInfo;
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_addr(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo(x, $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_consensus_voting_power(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), x, $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_config(s: $1_DiemSystem_ValidatorInfo, x: $1_ValidatorConfig_Config): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), x, $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_last_config_update_time(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), x)
}
function $IsValid'$1_DiemSystem_ValidatorInfo'(s: $1_DiemSystem_ValidatorInfo): bool {
    $IsValid'address'($addr#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'$1_ValidatorConfig_Config'($config#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $IsEqual'$1_DiemSystem_ValidatorInfo'(s1: $1_DiemSystem_ValidatorInfo, s2: $1_DiemSystem_ValidatorInfo): bool {
    s1 == s2
}

// fun DiemSystem::initialize_validator_set [baseline] at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:5+608
procedure {:inline 1} $1_DiemSystem_initialize_validator_set(_$t0: int) returns ()
{
    // declare local variables
    var $t1: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: Vec ($1_DiemSystem_ValidatorInfo);
    var $t12: $1_DiemSystem_DiemSystem;
    var $t13: int;
    var $t14: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: $1_DiemSystem_CapabilityHolder;
    var $t0: int;
    var $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$modifies: [int]bool;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'': $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'': $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemConfig_Configuration_$memory#253: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:120:9+50
    assume {:print "$at(16,5288,5338)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:5+1
    assume {:print "$at(16,4422,4423)"} true;
    assume {:print "$track_local(30,5,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(16,4504,4535)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31

    // assume Identical($t6, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
    assume ($t6 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
L5:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t7)) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
    assume {:print "$at(16,4504,4535)"} true;
    assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
L4:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(16,4545,4580)"} true;

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    assume {:print "$at(16,4545,4580)"} true;

    // assume Identical($t9, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t8))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t8)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    assume ($t9 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t8)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t9) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    if ($t9) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t7)), And(Not(exists<Roles::RoleId>($t8)), Eq(5, $t7))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t8)), 0), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t7)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t8) && $IsEqual'u8'(5, $t7))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)), 0) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    assume {:print "$at(16,4545,4580)"} true;
    assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35

    // $t10 := 0 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:106:25+1
    assume {:print "$at(16,4737,4738)"} true;
    $t10 := 0;
    assume $IsValid'u8'($t10);

    // $t11 := Vector::empty<DiemSystem::ValidatorInfo>() on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:107:29+15
    assume {:print "$at(16,4768,4783)"} true;
    call $t11 := $1_Vector_empty'$1_DiemSystem_ValidatorInfo'();
    if ($abort_flag) {
        assume {:print "$at(16,4768,4783)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t12 := pack DiemSystem::DiemSystem($t10, $t11) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:105:13+98
    assume {:print "$at(16,4700,4798)"} true;
    $t12 := $1_DiemSystem_DiemSystem($t10, $t11);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    // >> opaque call: $t7 := DiemConfig::publish_new_config_and_get_capability<DiemSystem::DiemSystem>($t0, $t6)
    assume {:print "$at(16,4601,4809)"} true;

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // $t14 := opaque begin: DiemConfig::publish_new_config_and_get_capability<DiemSystem::DiemSystem>($t0, $t12) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume {:print "$at(16,4601,4809)"} true;

    // assume Identical($t15, Or(Or(Or(Not(exists<Roles::RoleId>($t13)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())), exists<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume ($t15 == (((!$ResourceExists($1_Roles_RoleId_$memory, $t13) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t15) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    if ($t15) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
L9:

    // assume Or(Or(Or(And(Not(exists<Roles::RoleId>($t13)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 0), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t7))), And(exists<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t7))) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume ((((!$ResourceExists($1_Roles_RoleId_$memory, $t13) && $IsEqual'u8'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 0) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t7))) || ($ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume {:print "$at(16,4601,4809)"} true;
    assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
L8:

    // @253 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    $1_DiemConfig_Configuration_$memory#253 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'';
        $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'');
    } else {
        $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''($t14);

    // assume DiemConfig::spec_is_published<DiemSystem::DiemSystem>() at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume $1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory);

    // assume Eq<DiemSystem::DiemSystem>(DiemConfig::$get<DiemSystem::DiemSystem>(), $t12) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume $IsEqual'$1_DiemSystem_DiemSystem'($1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), $t12);

    // assume Eq<bool>(DiemConfig::spec_has_config[@253](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#253), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // $t14 := opaque end: DiemConfig::publish_new_config_and_get_capability<DiemSystem::DiemSystem>($t0, $t12) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208

    // trace_local[cap]($t14) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:13+3
    assume {:print "$track_local(30,5,1):", $t14} $t14 == $t14;

    // $t16 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:111:39+34
    assume {:print "$at(16,4865,4899)"} true;
    call $t16 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(16,4865,4899)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t17 := exists<DiemSystem::CapabilityHolder>($t16) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:111:14+6
    $t17 := $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, $t16);

    // $t18 := !($t17) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:111:13+1
    call $t18 := $Not($t17);

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:39+18
    assume {:print "$at(16,4940,4958)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:13+45
    // >> opaque call: $t12 := Errors::already_published($t11)

    // $t20 := opaque begin: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:13+45

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:13+45
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 6) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:13+45
    assume $IsEqual'u64'($t20, 6);

    // $t20 := opaque end: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:13+45

    // trace_local[tmp#$3]($t20) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
    assume {:print "$at(16,4819,4969)"} true;
    assume {:print "$track_local(30,5,3):", $t20} $t20 == $t20;

    // trace_local[tmp#$2]($t18) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
    assume {:print "$track_local(30,5,2):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
    assume {:print "$at(16,4819,4969)"} true;
    assume {:print "$track_abort(30,5):", $t20} $t20 == $t20;

    // $t7 := move($t20) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
    $t7 := $t20;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:114:17+10
    assume {:print "$at(16,4987,4997)"} true;
L0:

    // $t21 := pack DiemSystem::CapabilityHolder($t14) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:114:29+24
    $t21 := $1_DiemSystem_CapabilityHolder($t14);

    // move_to<DiemSystem::CapabilityHolder>($t21, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:114:9+7
    if ($ResourceExists($1_DiemSystem_CapabilityHolder_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemSystem_CapabilityHolder_$memory := $ResourceUpdate($1_DiemSystem_CapabilityHolder_$memory, $t0, $t21);
    }
    if ($abort_flag) {
        assume {:print "$at(16,4979,4986)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:115:5+1
    assume {:print "$at(16,5029,5030)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:115:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:115:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:115:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:57:5+100
function {:inline} $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata): bool {
    $ResourceExists($1_DiemBlock_BlockMetadata_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// struct DiemBlock::BlockMetadata at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:11:5+236
type {:datatype} $1_DiemBlock_BlockMetadata;
function {:constructor} $1_DiemBlock_BlockMetadata($height: int, $new_block_events: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata;
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_height(s: $1_DiemBlock_BlockMetadata, x: int): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata(x, $new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_new_block_events(s: $1_DiemBlock_BlockMetadata, x: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata($height#$1_DiemBlock_BlockMetadata(s), x)
}
function $IsValid'$1_DiemBlock_BlockMetadata'(s: $1_DiemBlock_BlockMetadata): bool {
    $IsValid'u64'($height#$1_DiemBlock_BlockMetadata(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''($new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $IsEqual'$1_DiemBlock_BlockMetadata'(s1: $1_DiemBlock_BlockMetadata, s2: $1_DiemBlock_BlockMetadata): bool {
    s1 == s2
}
var $1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata;

// struct DiemBlock::NewBlockEvent at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:18:5+234
type {:datatype} $1_DiemBlock_NewBlockEvent;
function {:constructor} $1_DiemBlock_NewBlockEvent($round: int, $proposer: int, $previous_block_votes: Vec (int), $time_microseconds: int): $1_DiemBlock_NewBlockEvent;
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_round(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent(x, $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_proposer(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), x, $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_previous_block_votes(s: $1_DiemBlock_NewBlockEvent, x: Vec (int)): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), x, $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_time_microseconds(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), x)
}
function $IsValid'$1_DiemBlock_NewBlockEvent'(s: $1_DiemBlock_NewBlockEvent): bool {
    $IsValid'u64'($round#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'address'($proposer#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'vec'address''($previous_block_votes#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'u64'($time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $IsEqual'$1_DiemBlock_NewBlockEvent'(s1: $1_DiemBlock_NewBlockEvent, s2: $1_DiemBlock_NewBlockEvent): bool {
    s1 == s2
}

// fun DiemBlock::is_initialized [baseline] at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:57:5+100
procedure {:inline 1} $1_DiemBlock_is_initialized() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:58:31+34
    assume {:print "$at(12,2071,2105)"} true;
    call $t0 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(12,2071,2105)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(31,3):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := exists<DiemBlock::BlockMetadata>($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:58:9+6
    $t2 := $ResourceExists($1_DiemBlock_BlockMetadata_$memory, $t0);

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:58:9+57
    assume {:print "$track_return(31,3,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:59:5+1
    assume {:print "$at(12,2111,2112)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:59:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:59:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:59:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun DiemBlock::initialize_block_metadata [baseline] at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:34:5+531
procedure {:inline 1} $1_DiemBlock_initialize_block_metadata(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent';
    var $t12: $1_DiemBlock_BlockMetadata;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:34:5+1
    assume {:print "$at(12,1100,1101)"} true;
    assume {:print "$track_local(31,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(12,1165,1196)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31

    // assume Identical($t3, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
    assume ($t3 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t3) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
    if ($t3) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
L5:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
    assume {:print "$at(12,1165,1196)"} true;
    assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
L4:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(12,1282,1322)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40

    // assume Identical($t5, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
    assume ($t5 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t5) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
    if ($t5) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
L7:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
    assume {:print "$at(12,1282,1322)"} true;
    assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
L6:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40

    // $t6 := DiemBlock::is_initialized() on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:17+16
    assume {:print "$at(12,1341,1357)"} true;
    call $t6 := $1_DiemBlock_is_initialized();
    if ($abort_flag) {
        assume {:print "$at(12,1341,1357)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t7 := !($t6) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:16+1
    call $t7 := $Not($t6);

    // $t8 := 0 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:61+15
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:35+42
    // >> opaque call: $t6 := Errors::already_published($t5)

    // $t9 := opaque begin: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:35+42

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:35+42
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 6) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:35+42
    assume $IsEqual'u64'($t9, 6);

    // $t9 := opaque end: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:35+42

    // trace_local[tmp#$2]($t9) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
    assume {:print "$track_local(31,2,2):", $t9} $t9 == $t9;

    // trace_local[tmp#$1]($t7) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
    assume {:print "$track_local(31,2,1):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
    assume {:print "$at(12,1333,1402)"} true;
    assume {:print "$track_abort(31,2):", $t9} $t9 == $t9;

    // $t4 := move($t9) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
    $t4 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:41:13+7
    assume {:print "$at(12,1448,1455)"} true;
L0:

    // $t10 := 0 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:43:25+1
    assume {:print "$at(12,1509,1510)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := Event::new_event_handle<DiemBlock::NewBlockEvent>($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:44:35+53
    assume {:print "$at(12,1546,1599)"} true;
    call $t11 := $1_Event_new_event_handle'$1_DiemBlock_NewBlockEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(12,1546,1599)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t12 := pack DiemBlock::BlockMetadata($t10, $t11) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:42:13+145
    assume {:print "$at(12,1469,1614)"} true;
    $t12 := $1_DiemBlock_BlockMetadata($t10, $t11);

    // move_to<DiemBlock::BlockMetadata>($t12, $t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:40:9+7
    assume {:print "$at(12,1412,1419)"} true;
    if ($ResourceExists($1_DiemBlock_BlockMetadata_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemBlock_BlockMetadata_$memory := $ResourceUpdate($1_DiemBlock_BlockMetadata_$memory, $t0, $t12);
    }
    if ($abort_flag) {
        assume {:print "$at(12,1412,1419)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:47:5+1
    assume {:print "$at(12,1630,1631)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:47:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:47:5+1
L3:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:47:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// struct DiemVMConfig::DiemVMConfig at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:16:5+120
type {:datatype} $1_DiemVMConfig_DiemVMConfig;
function {:constructor} $1_DiemVMConfig_DiemVMConfig($gas_schedule: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig;
function {:inline} $Update'$1_DiemVMConfig_DiemVMConfig'_gas_schedule(s: $1_DiemVMConfig_DiemVMConfig, x: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig {
    $1_DiemVMConfig_DiemVMConfig(x)
}
function $IsValid'$1_DiemVMConfig_DiemVMConfig'(s: $1_DiemVMConfig_DiemVMConfig): bool {
    $IsValid'$1_DiemVMConfig_GasSchedule'($gas_schedule#$1_DiemVMConfig_DiemVMConfig(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_DiemVMConfig'(s1: $1_DiemVMConfig_DiemVMConfig, s2: $1_DiemVMConfig_DiemVMConfig): bool {
    s1 == s2
}

// struct DiemVMConfig::GasConstants at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:38:5+1690
type {:datatype} $1_DiemVMConfig_GasConstants;
function {:constructor} $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost: int, $global_memory_per_byte_write_cost: int, $min_transaction_gas_units: int, $large_transaction_cutoff: int, $intrinsic_gas_per_byte: int, $maximum_number_of_gas_units: int, $min_price_per_gas_unit: int, $max_price_per_gas_unit: int, $max_transaction_size_in_bytes: int, $gas_unit_scaling_factor: int, $default_account_size: int): $1_DiemVMConfig_GasConstants;
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants(x, $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_write_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), x, $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_transaction_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), x, $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_large_transaction_cutoff(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), x, $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_intrinsic_gas_per_byte(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), x, $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_maximum_number_of_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), x, $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), x, $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_transaction_size_in_bytes(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_gas_unit_scaling_factor(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), x, $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_default_account_size(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), x)
}
function $IsValid'$1_DiemVMConfig_GasConstants'(s: $1_DiemVMConfig_GasConstants): bool {
    $IsValid'u64'($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasConstants'(s1: $1_DiemVMConfig_GasConstants, s2: $1_DiemVMConfig_GasConstants): bool {
    s1 == s2
}

// struct DiemVMConfig::GasSchedule at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:32:5+164
type {:datatype} $1_DiemVMConfig_GasSchedule;
function {:constructor} $1_DiemVMConfig_GasSchedule($instruction_schedule: Vec (int), $native_schedule: Vec (int), $gas_constants: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule;
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_instruction_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule(x, $native_schedule#$1_DiemVMConfig_GasSchedule(s), $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_native_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), x, $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_gas_constants(s: $1_DiemVMConfig_GasSchedule, x: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), $native_schedule#$1_DiemVMConfig_GasSchedule(s), x)
}
function $IsValid'$1_DiemVMConfig_GasSchedule'(s: $1_DiemVMConfig_GasSchedule): bool {
    $IsValid'vec'u8''($instruction_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'vec'u8''($native_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'$1_DiemVMConfig_GasConstants'($gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasSchedule'(s1: $1_DiemVMConfig_GasSchedule, s2: $1_DiemVMConfig_GasSchedule): bool {
    s1 == s2
}

// fun DiemVMConfig::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:76:5+1150
procedure {:inline 1} $1_DiemVMConfig_initialize(_$t0: int, _$t1: Vec (int), _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: $1_DiemVMConfig_GasConstants;
    var $t4: $1_DiemVMConfig_GasConstants;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_DiemVMConfig_GasConstants;
    var $t23: $1_DiemVMConfig_GasSchedule;
    var $t24: $1_DiemVMConfig_DiemVMConfig;
    var $t25: int;
    var $t26: bool;
    var $t0: int;
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'': $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'': $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemConfig_Configuration_$memory#330: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t4, pack DiemVMConfig::GasConstants(4, 9, 600, 600, 8, 4000000, 0, 10000, 4096, 1000, 800)) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:112:9+528
    assume {:print "$at(19,4597,5125)"} true;
    assume ($t4 == $1_DiemVMConfig_GasConstants(4, 9, 600, 600, 8, 4000000, 0, 10000, 4096, 1000, 800));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:76:5+1
    assume {:print "$at(19,3416,3417)"} true;
    assume {:print "$track_local(32,0,0):", $t0} $t0 == $t0;

    // trace_local[instruction_schedule]($t1) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:76:5+1
    assume {:print "$track_local(32,0,1):", $t1} $t1 == $t1;

    // trace_local[native_schedule]($t2) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:76:5+1
    assume {:print "$track_local(32,0,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(19,3563,3594)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31

    // assume Identical($t7, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
    assume ($t7 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t8)) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
    assume {:print "$at(19,3563,3594)"} true;
    assume {:print "$track_abort(32,0):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(19,3692,3727)"} true;

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    assume {:print "$at(19,3692,3727)"} true;

    // assume Identical($t10, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    assume ($t10 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t10) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    if ($t10) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8)), And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'u8'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    assume {:print "$at(19,3692,3727)"} true;
    assume {:print "$track_abort(32,0):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35

    // $t11 := 4 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:87:42+1
    assume {:print "$at(19,3814,3815)"} true;
    $t11 := 4;
    assume $IsValid'u64'($t11);

    // $t12 := 9 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:88:48+1
    assume {:print "$at(19,3864,3865)"} true;
    $t12 := 9;
    assume $IsValid'u64'($t12);

    // $t13 := 600 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:89:40+3
    assume {:print "$at(19,3906,3909)"} true;
    $t13 := 600;
    assume $IsValid'u64'($t13);

    // $t14 := 600 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:90:39+3
    assume {:print "$at(19,3949,3952)"} true;
    $t14 := 600;
    assume $IsValid'u64'($t14);

    // $t15 := 8 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:91:37+1
    assume {:print "$at(19,3990,3991)"} true;
    $t15 := 8;
    assume $IsValid'u64'($t15);

    // $t16 := 4000000 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:92:42+7
    assume {:print "$at(19,4034,4041)"} true;
    $t16 := 4000000;
    assume $IsValid'u64'($t16);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:93:37+1
    assume {:print "$at(19,4079,4080)"} true;
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := 10000 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:94:37+5
    assume {:print "$at(19,4118,4123)"} true;
    $t18 := 10000;
    assume $IsValid'u64'($t18);

    // $t19 := 4096 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:95:44+4
    assume {:print "$at(19,4168,4172)"} true;
    $t19 := 4096;
    assume $IsValid'u64'($t19);

    // $t20 := 1000 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:96:38+4
    assume {:print "$at(19,4211,4215)"} true;
    $t20 := 1000;
    assume $IsValid'u64'($t20);

    // $t21 := 800 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:35+3
    assume {:print "$at(19,4251,4254)"} true;
    $t21 := 800;
    assume $IsValid'u64'($t21);

    // $t22 := pack DiemVMConfig::GasConstants($t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:86:29+507
    assume {:print "$at(19,3758,4265)"} true;
    $t22 := $1_DiemVMConfig_GasConstants($t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21);

    // $t23 := pack DiemVMConfig::GasSchedule($t1, $t2, $t22) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:103:31+145
    assume {:print "$at(19,4389,4534)"} true;
    $t23 := $1_DiemVMConfig_GasSchedule($t1, $t2, $t22);

    // $t24 := pack DiemVMConfig::DiemVMConfig($t23) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:102:13+204
    assume {:print "$at(19,4344,4548)"} true;
    $t24 := $1_DiemVMConfig_DiemVMConfig($t23);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    // >> opaque call: DiemConfig::publish_new_config<DiemVMConfig::DiemVMConfig>($t0, $t17)
    assume {:print "$at(19,4276,4559)"} true;

    // assume Identical($t25, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t0));

    // opaque begin: DiemConfig::publish_new_config<DiemVMConfig::DiemVMConfig>($t0, $t24) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume {:print "$at(19,4276,4559)"} true;

    // assume Identical($t26, Or(Or(Or(Or(DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>(), exists<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(Signer::spec_address_of($t0))), Not(exists<Roles::RoleId>($t25))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume ($t26 == (((($1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t25)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t26) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    if ($t26) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
L8:

    // assume Or(Or(Or(Or(DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>(), exists<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(Signer::spec_address_of($t0))), And(Not(exists<Roles::RoleId>($t25)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume (((($1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t25) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 0) && $IsEqual'u8'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume {:print "$at(19,4276,4559)"} true;
    assume {:print "$track_abort(32,0):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
L7:

    // @330 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    $1_DiemConfig_Configuration_$memory#330 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'';
        $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'');
    } else {
        $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'';
        $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory := $ResourceUpdate($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'');
    } else {
        $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory := $ResourceRemove($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume exists<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_Signer_spec_address_of($t0));

    // assume DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>() at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory);

    // assume Eq<DiemVMConfig::DiemVMConfig>(DiemConfig::$get<DiemVMConfig::DiemVMConfig>(), $t24) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume $IsEqual'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_$get'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory), $t24);

    // assume Eq<bool>(DiemConfig::spec_has_config[@330](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#330), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::publish_new_config<DiemVMConfig::DiemVMConfig>($t0, $t24) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:110:5+1
    assume {:print "$at(19,4565,4566)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:110:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:110:5+1
L2:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:110:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// struct DiemVersion::DiemVersion at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:11:5+68
type {:datatype} $1_DiemVersion_DiemVersion;
function {:constructor} $1_DiemVersion_DiemVersion($major: int): $1_DiemVersion_DiemVersion;
function {:inline} $Update'$1_DiemVersion_DiemVersion'_major(s: $1_DiemVersion_DiemVersion, x: int): $1_DiemVersion_DiemVersion {
    $1_DiemVersion_DiemVersion(x)
}
function $IsValid'$1_DiemVersion_DiemVersion'(s: $1_DiemVersion_DiemVersion): bool {
    $IsValid'u64'($major#$1_DiemVersion_DiemVersion(s))
}
function {:inline} $IsEqual'$1_DiemVersion_DiemVersion'(s1: $1_DiemVersion_DiemVersion, s2: $1_DiemVersion_DiemVersion): bool {
    s1 == s2
}

// fun DiemVersion::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:5+298
procedure {:inline 1} $1_DiemVersion_initialize(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: $1_DiemVersion_DiemVersion;
    var $t9: int;
    var $t10: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'': $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'': $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemConfig_Configuration_$memory#324: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:5+1
    assume {:print "$at(20,615,616)"} true;
    assume {:print "$track_local(33,0,0):", $t0} $t0 == $t0;

    // trace_local[initial_version]($t1) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:5+1
    assume {:print "$track_local(33,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(20,690,721)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31

    // assume Identical($t4, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
    assume ($t4 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t4) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
    if ($t4) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t5)) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
    assume {:print "$at(20,690,721)"} true;
    assume {:print "$track_abort(33,0):", $t5} $t5 == $t5;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(20,731,766)"} true;

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    assume {:print "$at(20,731,766)"} true;

    // assume Identical($t7, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    assume ($t7 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t7) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    if ($t7) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t5)), And(Not(exists<Roles::RoleId>($t6)), Eq(5, $t5))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0), Eq(3, $t5))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t5))) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t5)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'u8'(5, $t5))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0) && $IsEqual'u8'(3, $t5))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t5)));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    assume {:print "$at(20,731,766)"} true;
    assume {:print "$track_abort(33,0):", $t5} $t5 == $t5;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35

    // $t8 := pack DiemVersion::DiemVersion($t1) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:24:13+38
    assume {:print "$at(20,857,895)"} true;
    $t8 := $1_DiemVersion_DiemVersion($t1);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    // >> opaque call: DiemConfig::publish_new_config<DiemVersion::DiemVersion>($t0, $t2)
    assume {:print "$at(20,776,906)"} true;

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: DiemConfig::publish_new_config<DiemVersion::DiemVersion>($t0, $t8) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume {:print "$at(20,776,906)"} true;

    // assume Identical($t10, Or(Or(Or(Or(DiemConfig::spec_is_published<DiemVersion::DiemVersion>(), exists<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(Signer::spec_address_of($t0))), Not(exists<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume ($t10 == (((($1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t10) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    if ($t10) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
L8:

    // assume Or(Or(Or(Or(DiemConfig::spec_is_published<DiemVersion::DiemVersion>(), exists<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(Signer::spec_address_of($t0))), And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t5))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(3, $t5))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t5))) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume (((($1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'u8'(5, $t5))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'u8'(3, $t5))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t5)));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume {:print "$at(20,776,906)"} true;
    assume {:print "$track_abort(33,0):", $t5} $t5 == $t5;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
L7:

    // @324 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    $1_DiemConfig_Configuration_$memory#324 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'';
        $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'');
    } else {
        $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'';
        $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory := $ResourceUpdate($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'');
    } else {
        $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory := $ResourceRemove($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume exists<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_Signer_spec_address_of($t0));

    // assume DiemConfig::spec_is_published<DiemVersion::DiemVersion>() at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory);

    // assume Eq<DiemVersion::DiemVersion>(DiemConfig::$get<DiemVersion::DiemVersion>(), $t8) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume $IsEqual'$1_DiemVersion_DiemVersion'($1_DiemConfig_$get'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory), $t8);

    // assume Eq<bool>(DiemConfig::spec_has_config[@324](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#324), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::publish_new_config<DiemVersion::DiemVersion>($t0, $t8) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:26:5+1
    assume {:print "$at(20,912,913)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:26:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:26:5+1
L2:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:26:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun Genesis::initialize [verification] at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
procedure {:timeLimit 40} $1_Genesis_initialize$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: Vec (int), _$t4: Vec (Vec (int)), _$t5: bool, _$t6: Vec (int), _$t7: Vec (int), _$t8: int, _$t9: int) returns ()
{
    // declare local variables
    var $t10: int;
    var $t11: $1_DiemAccount_KeyRotationCapability;
    var $t12: int;
    var $t13: $1_DiemAccount_KeyRotationCapability;
    var $t14: Vec (int);
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: bool;
    var $t24: $1_DiemConfig_Configuration;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: $1_DiemConfig_Configuration;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: $1_DiemConfig_Configuration;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: int;
    var $t45: int;
    var $t46: int;
    var $t47: $1_DiemAccount_KeyRotationCapability;
    var $t48: int;
    var $t49: $1_DiemAccount_KeyRotationCapability;
    var $t50: int;
    var $t51: int;
    var $t52: $1_DiemVMConfig_GasConstants;
    var $t53: int;
    var $t54: int;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: Vec (Vec (int));
    var $t5: bool;
    var $t6: Vec (int);
    var $t7: Vec (int);
    var $t8: int;
    var $t9: int;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_ChainId_ChainId': $1_ChainId_ChainId;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_DiemWriteSetManager': $1_DiemAccount_DiemWriteSetManager;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_DiemConfig_Configuration': $1_DiemConfig_Configuration;
    var $temp_0'$1_DiemId_DiemIdDomainManager': $1_DiemId_DiemIdDomainManager;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'$1_SlidingNonce_SlidingNonce': $1_SlidingNonce_SlidingNonce;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    var $temp_0'vec'vec'u8''': Vec (Vec (int));
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;
    $t7 := _$t7;
    $t8 := _$t8;
    $t9 := _$t9;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(22,873,3238)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:69:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:145:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): Roles::spec_can_hold_balance_addr(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): Roles::spec_can_hold_balance_addr(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume And(And(forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr)), forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume (((forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))) && (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:562:9+176
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:621:8+133
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Eq<u64>(select DiemSystem::ValidatorInfo.consensus_voting_power(Index(DiemSystem::spec_get_validators(), i1)), 1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:629:8+119
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($IsEqual'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)), 1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:131:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:219:9+90
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:72:9+89
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'vec'vec'u8'''($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'bool'($t5);

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'vec'u8''($t6);

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'vec'u8''($t7);

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'u8'($t8);

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'u64'($t9);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DisableReconfiguration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DisableReconfiguration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemId::DiemIdDomainManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemId_DiemIdDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemId_DiemIdDomainManager_$memory, $a_0);
    ($IsValid'$1_DiemId_DiemIdDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume DiemTimestamp::$is_genesis() at /home/ying/diem/language/diem-framework/modules/Genesis.move:197:9+37
    assume {:print "$at(22,8942,8979)"} true;
    assume $1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory);

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$at(22,873,874)"} true;
    assume {:print "$track_local(34,1,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,1):", $t1} $t1 == $t1;

    // trace_local[dr_auth_key]($t2) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,2):", $t2} $t2 == $t2;

    // trace_local[tc_auth_key]($t3) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,3):", $t3} $t3 == $t3;

    // trace_local[initial_script_allow_list]($t4) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,4):", $t4} $t4 == $t4;

    // trace_local[is_open_module]($t5) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,5):", $t5} $t5 == $t5;

    // trace_local[instruction_schedule]($t6) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,6):", $t6} $t6 == $t6;

    // trace_local[native_schedule]($t7) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,7):", $t7} $t7 == $t7;

    // trace_local[chain_id]($t8) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,8):", $t8} $t8 == $t8;

    // trace_local[initial_diem_version]($t9) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,9):", $t9} $t9 == $t9;

    // trace_local[dr_account#2046]($t0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:42:13+10
    assume {:print "$at(22,1252,1262)"} true;
    assume {:print "$track_local(34,1,10):", $t0} $t0 == $t0;

    // trace_local[tc_account#2047]($t1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:13+10
    assume {:print "$at(22,1290,1300)"} true;
    assume {:print "$track_local(34,1,12):", $t1} $t1 == $t1;

    // $t14 := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:45+35
    assume {:print "$at(22,1361,1396)"} true;
    $t14 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(0, 0, 0, 0), MakeVec4(0, 0, 0, 0)), MakeVec4(0, 0, 0, 0)), MakeVec4(0, 0, 0, 0));
    assume $IsValid'vec'u8''($t14);

    // nop at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    // >> opaque call: DiemAccount::initialize($t0, $t14)

    // assume Identical($t15, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1227:9+49
    assume {:print "$at(11,55369,55418)"} true;
    assume ($t15 == $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Identical($t16, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1251:9+49
    assume {:print "$at(11,56713,56762)"} true;
    assume ($t16 == $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Identical($t17, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1295:9+59
    assume {:print "$at(11,59274,59333)"} true;
    assume ($t17 == $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assume Identical($t18, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1315:9+59
    assume {:print "$at(11,60508,60567)"} true;
    assume ($t18 == $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // opaque begin: DiemAccount::initialize($t0, $t14) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume {:print "$at(22,1325,1397)"} true;

    // assume Identical($t19, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())), exists<AccountFreezing::FreezingBit>(CoreAddresses::$DIEM_ROOT_ADDRESS())), Not(DiemTimestamp::$is_genesis())), exists<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS())), Neq<num>(Add(16, Len<u8>($t14)), 32)), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), DiemId::$tc_domain_manager_exists()), Not(DiemTimestamp::$is_genesis())), exists<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), exists<AccountFreezing::FreezingBit>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume ($t19 == ((((((((((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$IsEqual'num'((16 + LenVec($t14)), 32)) || $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || $1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory)) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t19) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    if ($t19) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
L4:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t20)), And(exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t20))), And(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t20))), And(exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t20))), And(exists<AccountFreezing::FreezingBit>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t20))), And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t20))), And(exists<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t20))), And(Neq<num>(Add(16, Len<u8>($t14)), 32), Eq(7, $t20))), And(exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(6, $t20))), And(DiemId::$tc_domain_manager_exists(), Eq(6, $t20))), And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t20))), And(exists<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(6, $t20))), And(exists<AccountFreezing::FreezingBit>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(6, $t20))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume (((((((((((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t20)) || ($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t20))) || ($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t20))) || ($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t20))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t20))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20))) || ($ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t20))) || (!$IsEqual'num'((16 + LenVec($t14)), 32) && $IsEqual'u8'(7, $t20))) || ($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t20))) || ($1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory) && $IsEqual'u8'(6, $t20))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20))) || ($ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t20))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume {:print "$at(22,1325,1397)"} true;
    assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
L3:

    // modifies global<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());
    }

    // modifies global<Event::EventHandleGenerator>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t15, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t15);
    }

    // modifies global<DiemAccount::DiemAccount>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t15, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t15);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $t15, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $t15);
    }

    // modifies global<DiemAccount::DiemWriteSetManager>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemWriteSetManager';
        $1_DiemAccount_DiemWriteSetManager_$memory := $ResourceUpdate($1_DiemAccount_DiemWriteSetManager_$memory, $t15, $temp_0'$1_DiemAccount_DiemWriteSetManager');
    } else {
        $1_DiemAccount_DiemWriteSetManager_$memory := $ResourceRemove($1_DiemAccount_DiemWriteSetManager_$memory, $t15);
    }

    // modifies global<SlidingNonce::SlidingNonce>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_SlidingNonce_SlidingNonce';
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceUpdate($1_SlidingNonce_SlidingNonce_$memory, $t15, $temp_0'$1_SlidingNonce_SlidingNonce');
    } else {
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceRemove($1_SlidingNonce_SlidingNonce_$memory, $t15);
    }

    // modifies global<Roles::RoleId>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $t15, $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $t15);
    }

    // modifies global<AccountFreezing::FreezingBit>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t15, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t15);
    }

    // modifies global<DiemAccount::DiemAccount>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t17, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t17);
    }

    // modifies global<SlidingNonce::SlidingNonce>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_SlidingNonce_SlidingNonce';
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceUpdate($1_SlidingNonce_SlidingNonce_$memory, $t17, $temp_0'$1_SlidingNonce_SlidingNonce');
    } else {
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceRemove($1_SlidingNonce_SlidingNonce_$memory, $t17);
    }

    // modifies global<Roles::RoleId>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $t17, $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $t17);
    }

    // modifies global<AccountFreezing::FreezingBit>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t17, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t17);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<Event::EventHandleGenerator>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());
    }

    // modifies global<DiemId::DiemIdDomainManager>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemId_DiemIdDomainManager';
        $1_DiemId_DiemIdDomainManager_$memory := $ResourceUpdate($1_DiemId_DiemIdDomainManager_$memory, $t17, $temp_0'$1_DiemId_DiemIdDomainManager');
    } else {
        $1_DiemId_DiemIdDomainManager_$memory := $ResourceRemove($1_DiemId_DiemIdDomainManager_$memory, $t17);
    }

    // assume exists<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS())), 0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())), 0);

    // assume exists<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), 1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())), 1);

    // assume exists<DiemAccount::AccountOperationsCapability>($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t16);

    // assume exists<DiemAccount::DiemWriteSetManager>($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $t16);

    // assume exists<SlidingNonce::SlidingNonce>($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $t16);

    // assume Roles::spec_has_diem_root_role_addr($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, $t16);

    // assume DiemAccount::$exists_at($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t16);

    // assume AccountFreezing::spec_account_is_not_frozen($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t16);

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t16);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t16);

    // assume exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Roles::spec_has_treasury_compliance_role_addr($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, $t18);

    // assume DiemAccount::$exists_at($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume exists<SlidingNonce::SlidingNonce>($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $t18);

    // assume AccountFreezing::spec_account_is_not_frozen($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t18);

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume exists<DiemId::DiemIdDomainManager>($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_DiemId_DiemIdDomainManager_$memory, $t18);

    // opaque end: DiemAccount::initialize($t0, $t14) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72

    // nop at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    // >> opaque call: ChainId::initialize($t0, $t8)
    assume {:print "$at(22,1408,1449)"} true;

    // assume Identical($t21, Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/ChainId.move:28:9+45
    assume {:print "$at(7,1017,1062)"} true;
    assume ($t21 == $1_Signer_$address_of($t0));

    // opaque begin: ChainId::initialize($t0, $t8) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    assume {:print "$at(22,1408,1449)"} true;

    // assume Identical($t22, Or(Or(Not(DiemTimestamp::$is_genesis()), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())), exists<ChainId::ChainId>($t21))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    assume ($t22 == ((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_ChainId_ChainId_$memory, $t21)));

    // if ($t22) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
L6:

    // assume Or(Or(And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t20)), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t20))), And(exists<ChainId::ChainId>($t21), Eq(6, $t20))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    assume (((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20)) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t20))) || ($ResourceExists($1_ChainId_ChainId_$memory, $t21) && $IsEqual'u8'(6, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    assume {:print "$at(22,1408,1449)"} true;
    assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
L5:

    // modifies global<ChainId::ChainId>($t21) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_ChainId_ChainId';
        $1_ChainId_ChainId_$memory := $ResourceUpdate($1_ChainId_ChainId_$memory, $t21, $temp_0'$1_ChainId_ChainId');
    } else {
        $1_ChainId_ChainId_$memory := $ResourceRemove($1_ChainId_ChainId_$memory, $t21);
    }

    // assume exists<ChainId::ChainId>($t21) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    assume $ResourceExists($1_ChainId_ChainId_$memory, $t21);

    // opaque end: ChainId::initialize($t0, $t8) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41

    // nop at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    // >> opaque call: DiemConfig::initialize($t0)
    assume {:print "$at(22,1493,1527)"} true;

    // opaque begin: DiemConfig::initialize($t0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34

    // assume Identical($t23, Or(Or(DiemConfig::spec_has_config(), Not(DiemTimestamp::$is_genesis())), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    assume ($t23 == (($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t23) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    if ($t23) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
L8:

    // assume Or(Or(And(DiemConfig::spec_has_config(), Eq(6, $t20)), And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t20))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t20))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    assume ((($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory) && $IsEqual'u8'(6, $t20)) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    assume {:print "$at(22,1493,1527)"} true;
    assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
L7:

    // modifies global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_Configuration';
        $1_DiemConfig_Configuration_$memory := $ResourceUpdate($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_Configuration');
    } else {
        $1_DiemConfig_Configuration_$memory := $ResourceRemove($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<Event::EventHandleGenerator>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $1_Signer_spec_address_of($t0), $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $1_Signer_spec_address_of($t0));
    }

    // assume Identical($t24, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:85:9+81
    assume {:print "$at(13,3202,3283)"} true;
    assume ($t24 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume DiemConfig::spec_has_config() at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:85:9+81
    assume $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory);

    // assume Eq<u64>(select DiemConfig::Configuration.epoch($t24), 0) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:85:9+81
    assume $IsEqual'u64'($epoch#$1_DiemConfig_Configuration($t24), 0);

    // assume Eq<u64>(select DiemConfig::Configuration.last_reconfiguration_time($t24), 0) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:85:9+81
    assume $IsEqual'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration($t24), 0);

    // opaque end: DiemConfig::initialize($t0) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:85:9+81

    // assume Identical($t25, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t0));

    // assume Identical($t26, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t26 == $1_Signer_spec_address_of($t0));

    // Diem::initialize($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:53:9+28
    assume {:print "$at(22,1564,1592)"} true;
    call $1_Diem_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(22,1564,1592)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t27, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t27 == $1_Signer_spec_address_of($t1));

    // assume Identical($t28, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t28 == $1_Signer_spec_address_of($t0));

    // assume Identical($t29, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t29 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t30, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t30 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t31, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t31 == $1_Signer_spec_address_of($t1));

    // assume Identical($t32, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t0));

    // assume Identical($t33, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t1));

    // XUS::initialize($t0, $t1) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:56:9+39
    assume {:print "$at(22,1629,1668)"} true;
    call $1_XUS_initialize($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(22,1629,1668)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t34, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t34 == $1_Signer_spec_address_of($t0));

    // assume Identical($t35, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t35 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t36, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t36 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // assume Identical($t38, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t38 == $1_Signer_spec_address_of($t1));

    // XDX::initialize($t0, $t1) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:58:9+39
    assume {:print "$at(22,1679,1718)"} true;
    call $1_XDX_initialize($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(22,1679,1718)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t39, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:64:9+47
    assume {:print "$at(4,2284,2331)"} true;
    assume ($t39 == $1_Signer_spec_address_of($t0));

    // AccountFreezing::initialize($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:60:9+39
    assume {:print "$at(22,1729,1768)"} true;
    call $1_AccountFreezing_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(22,1729,1768)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t40, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t40 == $1_Signer_spec_address_of($t1));

    // TransactionFee::initialize($t1) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:61:9+38
    assume {:print "$at(22,1778,1816)"} true;
    call $1_TransactionFee_initialize($t1);
    if ($abort_flag) {
        assume {:print "$at(22,1778,1816)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t41, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:120:9+50
    assume {:print "$at(16,5288,5338)"} true;
    assume ($t41 == $1_Signer_spec_address_of($t0));

    // assume Identical($t42, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t42 == $1_Signer_spec_address_of($t0));

    // DiemSystem::initialize_validator_set($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:63:9+48
    assume {:print "$at(22,1827,1875)"} true;
    call $1_DiemSystem_initialize_validator_set($t0);
    if ($abort_flag) {
        assume {:print "$at(22,1827,1875)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t43, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t43 == $1_Signer_spec_address_of($t0));

    // assume Identical($t44, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t44 == $1_Signer_spec_address_of($t0));

    // DiemVersion::initialize($t0, $t9) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:64:9+57
    assume {:print "$at(22,1885,1942)"} true;
    call $1_DiemVersion_initialize($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(22,1885,1942)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t45, Mul(1000, Diem::spec_scaling_factor<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:501:9+86
    assume {:print "$at(21,22219,22305)"} true;
    assume ($t45 == (1000 * $1_Diem_spec_scaling_factor'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // DualAttestation::initialize($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:65:9+39
    assume {:print "$at(22,1952,1991)"} true;
    call $1_DualAttestation_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(22,1952,1991)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // DiemBlock::initialize_block_metadata($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:66:9+48
    assume {:print "$at(22,2001,2049)"} true;
    call $1_DiemBlock_initialize_block_metadata($t0);
    if ($abort_flag) {
        assume {:print "$at(22,2001,2049)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t46, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:966:9+52
    assume {:print "$at(11,43116,43168)"} true;
    assume ($t46 == $1_Signer_spec_address_of($t0));

    // $t47 := DiemAccount::extract_key_rotation_capability($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:70:33+56
    assume {:print "$at(22,2188,2244)"} true;
    call $t47 := $1_DiemAccount_extract_key_rotation_capability($t0);
    if ($abort_flag) {
        assume {:print "$at(22,2188,2244)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // trace_local[dr_rotate_key_cap]($t47) at /home/ying/diem/language/diem-framework/modules/Genesis.move:70:13+17
    assume {:print "$track_local(34,1,11):", $t47} $t47 == $t47;

    // DiemAccount::rotate_authentication_key($t47, $t2) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:71:9+71
    assume {:print "$at(22,2254,2325)"} true;
    call $1_DiemAccount_rotate_authentication_key($t47, $t2);
    if ($abort_flag) {
        assume {:print "$at(22,2254,2325)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // DiemAccount::restore_key_rotation_capability($t47) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:72:9+63
    assume {:print "$at(22,2335,2398)"} true;
    call $1_DiemAccount_restore_key_rotation_capability($t47);
    if ($abort_flag) {
        assume {:print "$at(22,2335,2398)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t48, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:966:9+52
    assume {:print "$at(11,43116,43168)"} true;
    assume ($t48 == $1_Signer_spec_address_of($t1));

    // $t49 := DiemAccount::extract_key_rotation_capability($t1) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:74:33+56
    assume {:print "$at(22,2433,2489)"} true;
    call $t49 := $1_DiemAccount_extract_key_rotation_capability($t1);
    if ($abort_flag) {
        assume {:print "$at(22,2433,2489)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // trace_local[tc_rotate_key_cap]($t49) at /home/ying/diem/language/diem-framework/modules/Genesis.move:74:13+17
    assume {:print "$track_local(34,1,13):", $t49} $t49 == $t49;

    // DiemAccount::rotate_authentication_key($t49, $t3) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:75:9+71
    assume {:print "$at(22,2499,2570)"} true;
    call $1_DiemAccount_rotate_authentication_key($t49, $t3);
    if ($abort_flag) {
        assume {:print "$at(22,2499,2570)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // DiemAccount::restore_key_rotation_capability($t49) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:76:9+63
    assume {:print "$at(22,2580,2643)"} true;
    call $1_DiemAccount_restore_key_rotation_capability($t49);
    if ($abort_flag) {
        assume {:print "$at(22,2580,2643)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t50, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t50 == $1_Signer_spec_address_of($t0));

    // assume Identical($t51, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t51 == $1_Signer_spec_address_of($t0));

    // DiemTransactionPublishingOption::initialize($t0, $t4, $t5) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:78:9+145
    assume {:print "$at(22,2654,2799)"} true;
    call $1_DiemTransactionPublishingOption_initialize($t0, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(22,2654,2799)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t52, pack DiemVMConfig::GasConstants(4, 9, 600, 600, 8, 4000000, 0, 10000, 4096, 1000, 800)) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:112:9+528
    assume {:print "$at(19,4597,5125)"} true;
    assume ($t52 == $1_DiemVMConfig_GasConstants(4, 9, 600, 600, 8, 4000000, 0, 10000, 4096, 1000, 800));

    // assume Identical($t53, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t53 == $1_Signer_spec_address_of($t0));

    // assume Identical($t54, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t54 == $1_Signer_spec_address_of($t0));

    // DiemVMConfig::initialize($t0, $t6, $t7) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:84:9+122
    assume {:print "$at(22,2810,2932)"} true;
    call $1_DiemVMConfig_initialize($t0, $t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(22,2810,2932)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // DiemTimestamp::set_time_has_started($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:93:9+47
    assume {:print "$at(22,3184,3231)"} true;
    call $1_DiemTimestamp_set_time_has_started($t0);
    if ($abort_flag) {
        assume {:print "$at(22,3184,3231)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Genesis.move:94:5+1
    assume {:print "$at(22,3237,3238)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Genesis.move:94:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Genesis.move:94:5+1
L2:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Genesis.move:94:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

}
