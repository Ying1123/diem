(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :strings-exp true)
(set-logic ALL)
; done setting options


(declare-datatypes ((T@$signer 0)) ((($signer (|$addr#$signer| Int) ) ) ))
(declare-datatypes ((T@$Location 0)) ((($Global (|a#$Global| Int) ) ($Local (|i#$Local| Int) ) ($Param (|i#$Param| Int) ) ) ))
(declare-datatypes ((T@$Mutation_3430 0)) ((($Mutation_3430 (|l#$Mutation_3430| T@$Location) (|p#$Mutation_3430| (Seq Int)) (|v#$Mutation_3430| Int) ) ) ))
(declare-datatypes ((T@$Mutation_11044 0)) ((($Mutation_11044 (|l#$Mutation_11044| T@$Location) (|p#$Mutation_11044| (Seq Int)) (|v#$Mutation_11044| (Seq Int)) ) ) ))
(declare-datatypes ((T@$Range 0)) ((($Range (|lb#$Range| Int) (|ub#$Range| Int) ) ) ))
(declare-fun $MAX_U8 () Int)
(declare-fun $MAX_U64 () Int)
(declare-fun $MAX_U128 () Int)
(declare-fun |$IsValid'u8'| (Int) Bool)
(declare-fun |$IsValid'u64'| (Int) Bool)
(declare-fun |$IsValid'u128'| (Int) Bool)
(declare-fun |$IsValid'num'| (Int) Bool)
(declare-fun |$IsValid'address'| (Int) Bool)
(declare-fun $InRange (T@$Range Int) Bool)
(declare-sort |T@[Int]Bool| 0)
(declare-fun $ConstMemoryDomain (Bool) |T@[Int]Bool|)
(declare-fun |lambda#0| (Bool) |T@[Int]Bool|)
(declare-fun $EXEC_FAILURE_CODE () Int)
(declare-fun $shl (Int Int) Int)
(declare-fun $shr (Int Int) Int)
(declare-fun |$IsValid'vec'u8''| ((Seq Int)) Bool)
(declare-fun |$IndexOfVec'u8'| ((Seq Int) Int) Int)
(declare-fun $1_Hash_sha2 ((Seq Int)) (Seq Int))
(declare-fun $1_Hash_sha3 ((Seq Int)) (Seq Int))
(declare-fun $1_Signature_$ed25519_validate_pubkey ((Seq Int)) Bool)
(declare-fun $1_Signature_$ed25519_verify ((Seq Int) (Seq Int) (Seq Int)) Bool)
(declare-fun ReverseVec_3283 ((Seq Int)) (Seq Int))
(declare-fun |Select__T@[Int]Bool_| (|T@[Int]Bool| Int) Bool)
(assert (= $MAX_U8 255))
(assert (= $MAX_U64 18446744073709551615))
(assert (= $MAX_U128 340282366920938463463374607431768211455))
(assert (forall ((v Int) ) (! (= (|$IsValid'u8'| v)  (and (>= v 0) (<= v $MAX_U8)))
 :qid |addressquantandybpl.160:23|
 :skolemid |4|
 :pattern ( (|$IsValid'u8'| v))
)))
(assert (forall ((v@@0 Int) ) (! (= (|$IsValid'u64'| v@@0)  (and (>= v@@0 0) (<= v@@0 $MAX_U64)))
 :qid |addressquantandybpl.164:24|
 :skolemid |5|
 :pattern ( (|$IsValid'u64'| v@@0))
)))
(assert (forall ((v@@1 Int) ) (! (= (|$IsValid'u128'| v@@1)  (and (>= v@@1 0) (<= v@@1 $MAX_U128)))
 :qid |addressquantandybpl.168:25|
 :skolemid |6|
 :pattern ( (|$IsValid'u128'| v@@1))
)))
(assert (forall ((v@@2 Int) ) (! (= (|$IsValid'num'| v@@2) true)
 :qid |addressquantandybpl.172:24|
 :skolemid |7|
 :pattern ( (|$IsValid'num'| v@@2))
)))
(assert (forall ((v@@3 Int) ) (! (= (|$IsValid'address'| v@@3) (>= v@@3 0))
 :qid |addressquantandybpl.176:28|
 :skolemid |8|
 :pattern ( (|$IsValid'address'| v@@3))
)))
(assert (forall ((r T@$Range) (i Int) ) (! (= ($InRange r i)  (and (<= (|lb#$Range| r) i) (< i (|ub#$Range| r))))
 :qid |addressquantandybpl.186:19|
 :skolemid |9|
 :pattern ( ($InRange r i))
)))
(assert (= ($ConstMemoryDomain false) (|lambda#0| false)))
(assert (= ($ConstMemoryDomain true) (|lambda#0| true)))
(assert (= $EXEC_FAILURE_CODE (- 0 1)))
(assert (forall ((src1 Int) (p Int) ) (! (= ($shl src1 p) (ite (= p 8) (* src1 256) (ite (= p 16) (* src1 65536) (ite (= p 32) (* src1 4294967296) (ite (= p 64) (* src1 18446744073709551616) (- 0 1))))))
 :qid |addressquantandybpl.452:15|
 :skolemid |13|
 :pattern ( ($shl src1 p))
)))
(assert (forall ((src1@@0 Int) (p@@0 Int) ) (! (= ($shr src1@@0 p@@0) (ite (= p@@0 8) (div src1@@0 256) (ite (= p@@0 16) (div src1@@0 65536) (ite (= p@@0 32) (div src1@@0 4294967296) (ite (= p@@0 64) (div src1@@0 18446744073709551616) (- 0 1))))))
 :qid |addressquantandybpl.461:15|
 :skolemid |14|
 :pattern ( ($shr src1@@0 p@@0))
)))
(assert (forall ((v@@4 (Seq Int)) ) (! (= (|$IsValid'vec'u8''| v@@4)  (and (|$IsValid'u64'| (seq.len v@@4)) (forall ((i@@0 Int) ) (!  (=> (and (>= i@@0 0) (< i@@0 (seq.len v@@4))) (|$IsValid'u8'| (seq.nth v@@4 i@@0)))
 :qid |addressquantandybpl.590:13|
 :skolemid |15|
))))
 :qid |addressquantandybpl.588:28|
 :skolemid |16|
 :pattern ( (|$IsValid'vec'u8''| v@@4))
)))
(assert (forall ((v@@5 (Seq Int)) (e Int) ) (! (let ((i@@1 (|$IndexOfVec'u8'| v@@5 e)))
(ite  (not (exists ((i@@2 Int) ) (!  (and (and (|$IsValid'u64'| i@@2) (and (>= i@@2 0) (< i@@2 (seq.len v@@5)))) (= (seq.nth v@@5 i@@2) e))
 :qid |addressquantandybpl.595:13|
 :skolemid |17|
))) (= i@@1 (- 0 1))  (and (and (and (|$IsValid'u64'| i@@1) (and (>= i@@1 0) (< i@@1 (seq.len v@@5)))) (= (seq.nth v@@5 i@@1) e)) (forall ((j Int) ) (!  (=> (and (and (|$IsValid'u64'| j) (>= j 0)) (< j i@@1)) (not (= (seq.nth v@@5 j) e)))
 :qid |addressquantandybpl.603:17|
 :skolemid |18|
)))))
 :qid |addressquantandybpl.599:15|
 :skolemid |19|
 :pattern ( (|$IndexOfVec'u8'| v@@5 e))
)))
(assert (forall ((v1 (Seq Int)) (v2 (Seq Int)) ) (! (= (= v1 v2) (= ($1_Hash_sha2 v1) ($1_Hash_sha2 v2)))
 :qid |addressquantandybpl.776:15|
 :skolemid |20|
 :pattern ( ($1_Hash_sha2 v1) ($1_Hash_sha2 v2))
)))
(assert (forall ((v1@@0 (Seq Int)) (v2@@0 (Seq Int)) ) (! (= (= v1@@0 v2@@0) (= ($1_Hash_sha3 v1@@0) ($1_Hash_sha3 v2@@0)))
 :qid |addressquantandybpl.792:15|
 :skolemid |21|
 :pattern ( ($1_Hash_sha3 v1@@0) ($1_Hash_sha3 v2@@0))
)))
(assert (forall ((k1 (Seq Int)) (k2 (Seq Int)) ) (!  (=> (= k1 k2) (= ($1_Signature_$ed25519_validate_pubkey k1) ($1_Signature_$ed25519_validate_pubkey k2)))
 :qid |addressquantandybpl.859:15|
 :skolemid |22|
 :pattern ( ($1_Signature_$ed25519_validate_pubkey k1) ($1_Signature_$ed25519_validate_pubkey k2))
)))
(assert (forall ((s1 (Seq Int)) (s2 (Seq Int)) (k1@@0 (Seq Int)) (k2@@0 (Seq Int)) (m1 (Seq Int)) (m2 (Seq Int)) ) (!  (=> (and (and (= s1 s2) (= k1@@0 k2@@0)) (= m1 m2)) (= ($1_Signature_$ed25519_verify s1 k1@@0 m1) ($1_Signature_$ed25519_verify s2 k2@@0 m2)))
 :qid |addressquantandybpl.862:15|
 :skolemid |23|
 :pattern ( ($1_Signature_$ed25519_verify s1 k1@@0 m1) ($1_Signature_$ed25519_verify s2 k2@@0 m2))
)))
(assert (forall ((v@@6 (Seq Int)) ) (! (let ((r@@0 (ReverseVec_3283 v@@6)))
 (and (= (seq.len r@@0) (seq.len v@@6)) (forall ((i@@3 Int) ) (!  (=> (and (>= i@@3 0) (< i@@3 (seq.len r@@0))) (= (seq.nth r@@0 i@@3) (seq.nth v@@6 (- (- (seq.len v@@6) i@@3) 1))))
 :qid |addressquantandybpl.67:18|
 :skolemid |0|
 :pattern ( (seq.nth r@@0 i@@3))
))))
 :qid |addressquantandybpl.64:32|
 :skolemid |1|
 :pattern ( (ReverseVec_3283 v@@6))
)))
(assert (forall ((|l#0| Bool) (i@@4 Int) ) (! (= (|Select__T@[Int]Bool_| (|lambda#0| |l#0|) i@@4) |l#0|)
 :qid |addressquantandybpl.245:54|
 :skolemid |24|
 :pattern ( (|Select__T@[Int]Bool_| (|lambda#0| |l#0|) i@@4))
)))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $abort_flag@0 () Bool)
(declare-fun inline$$AddU64$0$dst@2 () Int)
(declare-fun _$t0 () Int)
(declare-fun _$t1 () Int)
(declare-fun $abort_code@1 () Int)
(declare-fun inline$$AddU64$0$dst@0 () Int)
(declare-fun inline$$AddU64$0$dst@1 () Int)
(declare-fun $abort_code@0 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_add_two_number$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 24704) (let ((anon4_Else_correct  (=> (not $abort_flag@0) (=> (and (and (= inline$$AddU64$0$dst@2 inline$$AddU64$0$dst@2) (|$IsValid'u64'| 3)) (and (= 3 3) (= inline$$AddU64$0$dst@2 inline$$AddU64$0$dst@2))) (and (=> (= (ControlFlow 0 16800) (- 0 24929)) (not (> (+ _$t0 _$t1) $MAX_U64))) (=> (not (> (+ _$t0 _$t1) $MAX_U64)) (and (=> (= (ControlFlow 0 16800) (- 0 24942)) (= 3 3)) (=> (= 3 3) (=> (= (ControlFlow 0 16800) (- 0 24950)) (= inline$$AddU64$0$dst@2 (+ _$t0 _$t1)))))))))))
(let ((anon4_Then_correct  (=> $abort_flag@0 (=> (and (= $abort_code@1 $abort_code@1) (= (ControlFlow 0 16830) (- 0 24880))) (> (+ _$t0 _$t1) $MAX_U64)))))
(let ((inline$$AddU64$0$anon3_Then$1_correct  (=> (= $abort_flag@0 true) (=> (and (= $abort_code@1 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2 inline$$AddU64$0$dst@0)) (and (=> (= (ControlFlow 0 16718) 16830) anon4_Then_correct) (=> (= (ControlFlow 0 16718) 16800) anon4_Else_correct))))))
(let ((inline$$AddU64$0$anon3_Then_correct  (=> (and (> (+ _$t0 _$t1) $MAX_U64) (= (ControlFlow 0 16716) 16718)) inline$$AddU64$0$anon3_Then$1_correct)))
(let ((inline$$AddU64$0$anon3_Else_correct  (=> (>= $MAX_U64 (+ _$t0 _$t1)) (=> (and (and (= inline$$AddU64$0$dst@1 (+ _$t0 _$t1)) (= $abort_flag@0 false)) (and (= $abort_code@1 $abort_code@0) (= inline$$AddU64$0$dst@2 inline$$AddU64$0$dst@1))) (and (=> (= (ControlFlow 0 16664) 16830) anon4_Then_correct) (=> (= (ControlFlow 0 16664) 16800) anon4_Else_correct))))))
(let ((anon0$1_correct  (=> (and (and (|$IsValid'u64'| _$t0) (|$IsValid'u64'| _$t1)) (and (= _$t0 _$t0) (= _$t1 _$t1))) (and (=> (= (ControlFlow 0 16724) 16716) inline$$AddU64$0$anon3_Then_correct) (=> (= (ControlFlow 0 16724) 16664) inline$$AddU64$0$anon3_Else_correct)))))
(let ((anon0_correct  (=> (= (ControlFlow 0 24704) 16724) anon0$1_correct)))
anon0_correct))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $t4@0 () Bool)
(declare-fun _$t0@@0 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_arithmetic_ops$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 24984) (let ((anon5_Else_correct  (=> (not $t4@0) (=> (and (= 2 2) (= _$t0@@0 _$t0@@0)) (and (=> (= (ControlFlow 0 16990) (- 0 25112)) (= 2 (mod (div (* (- (+ 6 4) 1) 2) 3) 4))) (=> (= 2 (mod (div (* (- (+ 6 4) 1) 2) 3) 4)) (=> (= (ControlFlow 0 16990) (- 0 25140)) (= _$t0@@0 _$t0@@0))))))))
(let ((anon5_Then_correct true))
(let ((anon0$1_correct@@0  (=> (and (|$IsValid'u64'| _$t0@@0) (= _$t0@@0 _$t0@@0)) (=> (and (and (|$IsValid'u64'| 2) (= 2 2)) (and (|$IsValid'u64'| 2) (= $t4@0  (not (= 2 2))))) (and (=> (= (ControlFlow 0 16930) 17012) anon5_Then_correct) (=> (= (ControlFlow 0 16930) 16990) anon5_Else_correct))))))
(let ((anon0_correct@@0  (=> (= (ControlFlow 0 24984) 16930) anon0$1_correct@@0)))
anon0_correct@@0)))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun inline$$Not$0$dst@1 () Bool)
(declare-fun $t2@0 () Bool)
(declare-fun $t3@0 () Bool)
(declare-fun _$t0@@1 () Int)
(declare-fun _$t1@@0 () Int)
(declare-fun $t12@0 () Bool)
(declare-fun inline$$Le$0$dst@1 () Bool)
(declare-fun inline$$Lt$0$dst@1 () Bool)
(declare-fun inline$$Ge$0$dst@1 () Bool)
(declare-fun inline$$Gt$0$dst@1 () Bool)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_bool_ops$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 25159) (let ((anon11_Else_correct  (=> (not inline$$Not$0$dst@1) (=> (and (= $t2@0 $t2@0) (= $t3@0 $t3@0)) (and (=> (= (ControlFlow 0 17404) (- 0 25500)) (= $t2@0  (and (> _$t0@@1 _$t1@@0) (>= _$t0@@1 _$t1@@0)))) (=> (= $t2@0  (and (> _$t0@@1 _$t1@@0) (>= _$t0@@1 _$t1@@0))) (=> (= (ControlFlow 0 17404) (- 0 25516)) (= $t3@0  (or (< _$t0@@1 _$t1@@0) (<= _$t0@@1 _$t1@@0))))))))))
(let ((anon11_Then_correct true))
(let ((inline$$Not$0$anon0_correct  (=> (= inline$$Not$0$dst@1  (not $t12@0)) (and (=> (= (ControlFlow 0 17332) 17426) anon11_Then_correct) (=> (= (ControlFlow 0 17332) 17404) anon11_Else_correct)))))
(let ((L7_correct  (=> (= $t3@0 $t3@0) (=> (and (= $t12@0  (not (= $t2@0 $t3@0))) (= (ControlFlow 0 17338) 17332)) inline$$Not$0$anon0_correct))))
(let ((anon10_Else$1_correct  (=> (= inline$$Le$0$dst@1 inline$$Le$0$dst@1) (=> (and (= $t3@0 inline$$Le$0$dst@1) (= (ControlFlow 0 17284) 17338)) L7_correct))))
(let ((inline$$Le$0$anon0_correct  (=> (and (= inline$$Le$0$dst@1 (<= _$t0@@1 _$t1@@0)) (= (ControlFlow 0 17268) 17284)) anon10_Else$1_correct)))
(let ((anon10_Else_correct  (=> (and (not inline$$Lt$0$dst@1) (= (ControlFlow 0 17274) 17268)) inline$$Le$0$anon0_correct)))
(let ((anon10_Then_correct  (=> (and (and inline$$Lt$0$dst@1 (= true true)) (and (= $t3@0 true) (= (ControlFlow 0 17444) 17338))) L7_correct)))
(let ((inline$$Lt$0$anon0_correct  (=> (= inline$$Lt$0$dst@1 (< _$t0@@1 _$t1@@0)) (and (=> (= (ControlFlow 0 17214) 17444) anon10_Then_correct) (=> (= (ControlFlow 0 17214) 17274) anon10_Else_correct)))))
(let ((L3_correct  (=> (and (= $t2@0 $t2@0) (= (ControlFlow 0 17220) 17214)) inline$$Lt$0$anon0_correct)))
(let ((anon9_Then$1_correct  (=> (= inline$$Ge$0$dst@1 inline$$Ge$0$dst@1) (=> (and (= $t2@0 inline$$Ge$0$dst@1) (= (ControlFlow 0 17504) 17220)) L3_correct))))
(let ((inline$$Ge$0$anon0_correct  (=> (and (= inline$$Ge$0$dst@1 (>= _$t0@@1 _$t1@@0)) (= (ControlFlow 0 17488) 17504)) anon9_Then$1_correct)))
(let ((anon9_Then_correct  (=> (and inline$$Gt$0$dst@1 (= (ControlFlow 0 17494) 17488)) inline$$Ge$0$anon0_correct)))
(let ((anon9_Else_correct  (=> (and (and (not inline$$Gt$0$dst@1) (= false false)) (and (= $t2@0 false) (= (ControlFlow 0 17164) 17220))) L3_correct)))
(let ((inline$$Gt$0$anon0_correct  (=> (= inline$$Gt$0$dst@1 (> _$t0@@1 _$t1@@0)) (and (=> (= (ControlFlow 0 17136) 17494) anon9_Then_correct) (=> (= (ControlFlow 0 17136) 17164) anon9_Else_correct)))))
(let ((anon0$1_correct@@1  (=> (|$IsValid'u64'| _$t0@@1) (=> (and (and (|$IsValid'u64'| _$t1@@0) (= _$t0@@1 _$t0@@1)) (and (= _$t1@@0 _$t1@@0) (= (ControlFlow 0 17142) 17136))) inline$$Gt$0$anon0_correct))))
(let ((anon0_correct@@1  (=> (= (ControlFlow 0 25159) 17142) anon0$1_correct@@1)))
anon0_correct@@1))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun _$t1@@1 () Int)
(declare-fun $abort_flag@1 () Bool)
(declare-fun $abort_code@2 () Int)
(declare-fun $abort_flag@0@@0 () Bool)
(declare-fun $abort_code@1@@0 () Int)
(declare-fun inline$$Div$0$dst@2 () Int)
(declare-fun inline$$Mod$0$dst@2 () Int)
(declare-fun _$t0@@2 () Int)
(declare-fun inline$$Mod$0$dst@0 () Int)
(declare-fun inline$$Mod$0$dst@1 () Int)
(declare-fun inline$$Div$0$dst@0 () Int)
(declare-fun inline$$Div$0$dst@1 () Int)
(declare-fun $abort_code@0@@0 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_div$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 25544) (let ((L2_correct  (=> (= (ControlFlow 0 17962) (- 0 25868)) (= _$t1@@1 0))))
(let ((anon7_Then_correct  (=> $abort_flag@1 (=> (and (= $abort_code@2 $abort_code@2) (= (ControlFlow 0 17948) 17962)) L2_correct))))
(let ((anon6_Then_correct  (=> $abort_flag@0@@0 (=> (and (= $abort_code@1@@0 $abort_code@1@@0) (= (ControlFlow 0 17976) 17962)) L2_correct))))
(let ((anon7_Else_correct  (=> (not $abort_flag@1) (=> (and (= inline$$Div$0$dst@2 inline$$Div$0$dst@2) (= inline$$Mod$0$dst@2 inline$$Mod$0$dst@2)) (and (=> (= (ControlFlow 0 17934) (- 0 25834)) (not (= _$t1@@1 0))) (=> (not (= _$t1@@1 0)) (and (=> (= (ControlFlow 0 17934) (- 0 25844)) (= inline$$Div$0$dst@2 (div _$t0@@2 _$t1@@1))) (=> (= inline$$Div$0$dst@2 (div _$t0@@2 _$t1@@1)) (=> (= (ControlFlow 0 17934) (- 0 25854)) (= inline$$Mod$0$dst@2 (mod _$t0@@2 _$t1@@1)))))))))))
(let ((inline$$Mod$0$anon3_Then$1_correct  (=> (= $abort_code@2 $EXEC_FAILURE_CODE) (=> (and (= $abort_flag@1 true) (= inline$$Mod$0$dst@2 inline$$Mod$0$dst@0)) (and (=> (= (ControlFlow 0 17868) 17948) anon7_Then_correct) (=> (= (ControlFlow 0 17868) 17934) anon7_Else_correct))))))
(let ((inline$$Mod$0$anon3_Then_correct  (=> (and (= _$t1@@1 0) (= (ControlFlow 0 17866) 17868)) inline$$Mod$0$anon3_Then$1_correct)))
(let ((inline$$Mod$0$anon3_Else_correct  (=> (not (= _$t1@@1 0)) (=> (and (and (= inline$$Mod$0$dst@1 (mod _$t0@@2 _$t1@@1)) (= $abort_code@2 $abort_code@1@@0)) (and (= $abort_flag@1 $abort_flag@0@@0) (= inline$$Mod$0$dst@2 inline$$Mod$0$dst@1))) (and (=> (= (ControlFlow 0 17818) 17948) anon7_Then_correct) (=> (= (ControlFlow 0 17818) 17934) anon7_Else_correct))))))
(let ((anon6_Else_correct  (=> (not $abort_flag@0@@0) (and (=> (= (ControlFlow 0 17874) 17866) inline$$Mod$0$anon3_Then_correct) (=> (= (ControlFlow 0 17874) 17818) inline$$Mod$0$anon3_Else_correct)))))
(let ((inline$$Div$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@0 true) (=> (and (= $abort_code@1@@0 $EXEC_FAILURE_CODE) (= inline$$Div$0$dst@2 inline$$Div$0$dst@0)) (and (=> (= (ControlFlow 0 17721) 17976) anon6_Then_correct) (=> (= (ControlFlow 0 17721) 17874) anon6_Else_correct))))))
(let ((inline$$Div$0$anon3_Then_correct  (=> (and (= _$t1@@1 0) (= (ControlFlow 0 17719) 17721)) inline$$Div$0$anon3_Then$1_correct)))
(let ((inline$$Div$0$anon3_Else_correct  (=> (not (= _$t1@@1 0)) (=> (and (and (= inline$$Div$0$dst@1 (div _$t0@@2 _$t1@@1)) (= $abort_flag@0@@0 false)) (and (= $abort_code@1@@0 $abort_code@0@@0) (= inline$$Div$0$dst@2 inline$$Div$0$dst@1))) (and (=> (= (ControlFlow 0 17671) 17976) anon6_Then_correct) (=> (= (ControlFlow 0 17671) 17874) anon6_Else_correct))))))
(let ((anon0$1_correct@@2  (=> (and (and (|$IsValid'u64'| _$t0@@2) (|$IsValid'u64'| _$t1@@1)) (and (= _$t0@@2 _$t0@@2) (= _$t1@@1 _$t1@@1))) (and (=> (= (ControlFlow 0 17727) 17719) inline$$Div$0$anon3_Then_correct) (=> (= (ControlFlow 0 17727) 17671) inline$$Div$0$anon3_Else_correct)))))
(let ((anon0_correct@@2  (=> (= (ControlFlow 0 25544) 17727) anon0$1_correct@@2)))
anon0_correct@@2))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@1 () Bool)
(declare-fun inline$$Div$0$dst@2@@0 () Int)
(declare-fun $abort_code@1@@1 () Int)
(declare-fun inline$$Div$0$dst@0@@0 () Int)
(declare-fun inline$$Div$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@1 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_div_by_zero$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 25887) (let ((anon4_Else_correct@@0  (=> (not $abort_flag@0@@1) (=> (and (= inline$$Div$0$dst@2@@0 inline$$Div$0$dst@2@@0) (= (ControlFlow 0 18211) (- 0 26064))) (not true)))))
(let ((anon4_Then_correct@@0  (=> $abort_flag@0@@1 (=> (and (= $abort_code@1@@1 $abort_code@1@@1) (= (ControlFlow 0 18233) (- 0 26043))) true))))
(let ((inline$$Div$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@1 true) (=> (and (= $abort_code@1@@1 $EXEC_FAILURE_CODE) (= inline$$Div$0$dst@2@@0 inline$$Div$0$dst@0@@0)) (and (=> (= (ControlFlow 0 18181) 18233) anon4_Then_correct@@0) (=> (= (ControlFlow 0 18181) 18211) anon4_Else_correct@@0))))))
(let ((inline$$Div$0$anon3_Then_correct@@0  (=> (and (= 0 0) (= (ControlFlow 0 18179) 18181)) inline$$Div$0$anon3_Then$1_correct@@0)))
(let ((inline$$Div$0$anon3_Else_correct@@0  (=> (not (= 0 0)) (=> (and (and (= inline$$Div$0$dst@1@@0 (div 1 0)) (= $abort_flag@0@@1 false)) (and (= $abort_code@1@@1 $abort_code@0@@1) (= inline$$Div$0$dst@2@@0 inline$$Div$0$dst@1@@0))) (and (=> (= (ControlFlow 0 18131) 18233) anon4_Then_correct@@0) (=> (= (ControlFlow 0 18131) 18211) anon4_Else_correct@@0))))))
(let ((anon0$1_correct@@3  (=> (and (|$IsValid'u64'| 1) (|$IsValid'u64'| 0)) (and (=> (= (ControlFlow 0 18187) 18179) inline$$Div$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 18187) 18131) inline$$Div$0$anon3_Else_correct@@0)))))
(let ((anon0_correct@@3  (=> (= (ControlFlow 0 25887) 18187) anon0$1_correct@@3)))
anon0_correct@@3))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@2 () Bool)
(declare-fun inline$$Div$0$dst@2@@1 () Int)
(declare-fun _$t1@@2 () Int)
(declare-fun $abort_code@1@@2 () Int)
(declare-fun inline$$Div$0$dst@0@@1 () Int)
(declare-fun inline$$Div$0$dst@1@@1 () Int)
(declare-fun _$t0@@3 () Int)
(declare-fun $abort_code@0@@2 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_div_by_zero_u64$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 26080) (let ((anon4_Else_correct@@1  (=> (not $abort_flag@0@@2) (=> (and (= inline$$Div$0$dst@2@@1 inline$$Div$0$dst@2@@1) (= (ControlFlow 0 18482) (- 0 26267))) (not (= _$t1@@2 0))))))
(let ((anon4_Then_correct@@1  (=> $abort_flag@0@@2 (=> (and (= $abort_code@1@@2 $abort_code@1@@2) (= (ControlFlow 0 18508) (- 0 26243))) (= _$t1@@2 0)))))
(let ((inline$$Div$0$anon3_Then$1_correct@@1  (=> (= $abort_flag@0@@2 true) (=> (and (= $abort_code@1@@2 $EXEC_FAILURE_CODE) (= inline$$Div$0$dst@2@@1 inline$$Div$0$dst@0@@1)) (and (=> (= (ControlFlow 0 18448) 18508) anon4_Then_correct@@1) (=> (= (ControlFlow 0 18448) 18482) anon4_Else_correct@@1))))))
(let ((inline$$Div$0$anon3_Then_correct@@1  (=> (and (= _$t1@@2 0) (= (ControlFlow 0 18446) 18448)) inline$$Div$0$anon3_Then$1_correct@@1)))
(let ((inline$$Div$0$anon3_Else_correct@@1  (=> (not (= _$t1@@2 0)) (=> (and (and (= inline$$Div$0$dst@1@@1 (div _$t0@@3 _$t1@@2)) (= $abort_flag@0@@2 false)) (and (= $abort_code@1@@2 $abort_code@0@@2) (= inline$$Div$0$dst@2@@1 inline$$Div$0$dst@1@@1))) (and (=> (= (ControlFlow 0 18398) 18508) anon4_Then_correct@@1) (=> (= (ControlFlow 0 18398) 18482) anon4_Else_correct@@1))))))
(let ((anon0$1_correct@@4  (=> (and (and (|$IsValid'u64'| _$t0@@3) (|$IsValid'u64'| _$t1@@2)) (and (= _$t0@@3 _$t0@@3) (= _$t1@@2 _$t1@@2))) (and (=> (= (ControlFlow 0 18454) 18446) inline$$Div$0$anon3_Then_correct@@1) (=> (= (ControlFlow 0 18454) 18398) inline$$Div$0$anon3_Else_correct@@1)))))
(let ((anon0_correct@@4  (=> (= (ControlFlow 0 26080) 18454) anon0$1_correct@@4)))
anon0_correct@@4))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@3 () Bool)
(declare-fun inline$$Div$0$dst@2@@2 () Int)
(declare-fun $abort_code@1@@3 () Int)
(declare-fun inline$$Div$0$dst@0@@2 () Int)
(declare-fun _$t1@@3 () Int)
(declare-fun inline$$Div$0$dst@1@@2 () Int)
(declare-fun _$t0@@4 () Int)
(declare-fun $abort_code@0@@3 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_div_by_zero_u64_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 26286) (let ((anon4_Else_correct@@2  (=> (not $abort_flag@0@@3) (=> (and (= inline$$Div$0$dst@2@@2 inline$$Div$0$dst@2@@2) (= (ControlFlow 0 18753) (- 0 26470))) (not false)))))
(let ((anon4_Then_correct@@2  (=> $abort_flag@0@@3 (=> (and (= $abort_code@1@@3 $abort_code@1@@3) (= (ControlFlow 0 18775) (- 0 26449))) false))))
(let ((inline$$Div$0$anon3_Then$1_correct@@2  (=> (= $abort_flag@0@@3 true) (=> (and (= $abort_code@1@@3 $EXEC_FAILURE_CODE) (= inline$$Div$0$dst@2@@2 inline$$Div$0$dst@0@@2)) (and (=> (= (ControlFlow 0 18723) 18775) anon4_Then_correct@@2) (=> (= (ControlFlow 0 18723) 18753) anon4_Else_correct@@2))))))
(let ((inline$$Div$0$anon3_Then_correct@@2  (=> (and (= _$t1@@3 0) (= (ControlFlow 0 18721) 18723)) inline$$Div$0$anon3_Then$1_correct@@2)))
(let ((inline$$Div$0$anon3_Else_correct@@2  (=> (not (= _$t1@@3 0)) (=> (and (and (= inline$$Div$0$dst@1@@2 (div _$t0@@4 _$t1@@3)) (= $abort_flag@0@@3 false)) (and (= $abort_code@1@@3 $abort_code@0@@3) (= inline$$Div$0$dst@2@@2 inline$$Div$0$dst@1@@2))) (and (=> (= (ControlFlow 0 18673) 18775) anon4_Then_correct@@2) (=> (= (ControlFlow 0 18673) 18753) anon4_Else_correct@@2))))))
(let ((anon0$1_correct@@5  (=> (and (and (|$IsValid'u64'| _$t0@@4) (|$IsValid'u64'| _$t1@@3)) (and (= _$t0@@4 _$t0@@4) (= _$t1@@3 _$t1@@3))) (and (=> (= (ControlFlow 0 18729) 18721) inline$$Div$0$anon3_Then_correct@@2) (=> (= (ControlFlow 0 18729) 18673) inline$$Div$0$anon3_Else_correct@@2)))))
(let ((anon0_correct@@5  (=> (= (ControlFlow 0 26286) 18729) anon0$1_correct@@5)))
anon0_correct@@5))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 26286)))
(get-value ((ControlFlow 0 18729)))
(get-value ((ControlFlow 0 18721)))
(get-value ((ControlFlow 0 18723)))
(get-value ((ControlFlow 0 18775)))
(assert (not (= (ControlFlow 0 18775) (- 26449))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@4 () Bool)
(declare-fun inline$$AddU64$0$dst@2@@0 () Int)
(declare-fun _$t0@@5 () Int)
(declare-fun $abort_code@1@@4 () Int)
(declare-fun inline$$AddU64$0$dst@0@@0 () Int)
(declare-fun inline$$AddU64$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@4 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_f$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 26486) (let ((anon4_Else_correct@@3  (=> (and (not $abort_flag@0@@4) (= inline$$AddU64$0$dst@2@@0 inline$$AddU64$0$dst@2@@0)) (and (=> (= (ControlFlow 0 19050) (- 0 26681)) (not (> (+ _$t0@@5 1) $MAX_U64))) (=> (not (> (+ _$t0@@5 1) $MAX_U64)) (=> (= (ControlFlow 0 19050) (- 0 26695)) (= inline$$AddU64$0$dst@2@@0 (+ _$t0@@5 1))))))))
(let ((anon4_Then_correct@@3  (=> $abort_flag@0@@4 (=> (and (= $abort_code@1@@4 $abort_code@1@@4) (= (ControlFlow 0 19080) (- 0 26653))) (> (+ _$t0@@5 1) $MAX_U64)))))
(let ((inline$$AddU64$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@4 true) (=> (and (= $abort_code@1@@4 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2@@0 inline$$AddU64$0$dst@0@@0)) (and (=> (= (ControlFlow 0 19000) 19080) anon4_Then_correct@@3) (=> (= (ControlFlow 0 19000) 19050) anon4_Else_correct@@3))))))
(let ((inline$$AddU64$0$anon3_Then_correct@@0  (=> (and (> (+ _$t0@@5 1) $MAX_U64) (= (ControlFlow 0 18998) 19000)) inline$$AddU64$0$anon3_Then$1_correct@@0)))
(let ((inline$$AddU64$0$anon3_Else_correct@@0  (=> (>= $MAX_U64 (+ _$t0@@5 1)) (=> (and (and (= inline$$AddU64$0$dst@1@@0 (+ _$t0@@5 1)) (= $abort_flag@0@@4 false)) (and (= $abort_code@1@@4 $abort_code@0@@4) (= inline$$AddU64$0$dst@2@@0 inline$$AddU64$0$dst@1@@0))) (and (=> (= (ControlFlow 0 18946) 19080) anon4_Then_correct@@3) (=> (= (ControlFlow 0 18946) 19050) anon4_Else_correct@@3))))))
(let ((anon0$1_correct@@6  (=> (|$IsValid'u64'| _$t0@@5) (=> (and (= _$t0@@5 _$t0@@5) (|$IsValid'u64'| 1)) (and (=> (= (ControlFlow 0 19006) 18998) inline$$AddU64$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 19006) 18946) inline$$AddU64$0$anon3_Else_correct@@0))))))
(let ((anon0_correct@@6  (=> (= (ControlFlow 0 26486) 19006) anon0$1_correct@@6)))
anon0_correct@@6))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@5 () Bool)
(declare-fun inline$$AddU64$0$dst@2@@1 () Int)
(declare-fun _$t0@@6 () Int)
(declare-fun $abort_code@1@@5 () Int)
(declare-fun inline$$AddU64$0$dst@0@@1 () Int)
(declare-fun inline$$AddU64$0$dst@1@@1 () Int)
(declare-fun $abort_code@0@@5 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_g$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 26714) (let ((anon4_Else_correct@@4  (=> (and (not $abort_flag@0@@5) (= inline$$AddU64$0$dst@2@@1 inline$$AddU64$0$dst@2@@1)) (and (=> (= (ControlFlow 0 19355) (- 0 26909)) (not (> (+ _$t0@@6 2) $MAX_U64))) (=> (not (> (+ _$t0@@6 2) $MAX_U64)) (=> (= (ControlFlow 0 19355) (- 0 26923)) (= inline$$AddU64$0$dst@2@@1 (+ _$t0@@6 2))))))))
(let ((anon4_Then_correct@@4  (=> $abort_flag@0@@5 (=> (and (= $abort_code@1@@5 $abort_code@1@@5) (= (ControlFlow 0 19385) (- 0 26881))) (> (+ _$t0@@6 2) $MAX_U64)))))
(let ((inline$$AddU64$0$anon3_Then$1_correct@@1  (=> (= $abort_flag@0@@5 true) (=> (and (= $abort_code@1@@5 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2@@1 inline$$AddU64$0$dst@0@@1)) (and (=> (= (ControlFlow 0 19305) 19385) anon4_Then_correct@@4) (=> (= (ControlFlow 0 19305) 19355) anon4_Else_correct@@4))))))
(let ((inline$$AddU64$0$anon3_Then_correct@@1  (=> (and (> (+ _$t0@@6 2) $MAX_U64) (= (ControlFlow 0 19303) 19305)) inline$$AddU64$0$anon3_Then$1_correct@@1)))
(let ((inline$$AddU64$0$anon3_Else_correct@@1  (=> (>= $MAX_U64 (+ _$t0@@6 2)) (=> (and (and (= inline$$AddU64$0$dst@1@@1 (+ _$t0@@6 2)) (= $abort_flag@0@@5 false)) (and (= $abort_code@1@@5 $abort_code@0@@5) (= inline$$AddU64$0$dst@2@@1 inline$$AddU64$0$dst@1@@1))) (and (=> (= (ControlFlow 0 19251) 19385) anon4_Then_correct@@4) (=> (= (ControlFlow 0 19251) 19355) anon4_Else_correct@@4))))))
(let ((anon0$1_correct@@7  (=> (|$IsValid'u64'| _$t0@@6) (=> (and (= _$t0@@6 _$t0@@6) (|$IsValid'u64'| 2)) (and (=> (= (ControlFlow 0 19311) 19303) inline$$AddU64$0$anon3_Then_correct@@1) (=> (= (ControlFlow 0 19311) 19251) inline$$AddU64$0$anon3_Else_correct@@1))))))
(let ((anon0_correct@@7  (=> (= (ControlFlow 0 26714) 19311) anon0$1_correct@@7)))
anon0_correct@@7))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@3 () Bool)
(declare-fun $abort_code@2@@0 () Int)
(declare-fun $t2@0@@0 () Bool)
(declare-fun $t1@0 () Bool)
(declare-fun $abort_flag@1@@0 () Bool)
(declare-fun $abort_code@1@@6 () Int)
(declare-fun $t4@0@@0 () Int)
(declare-fun inline$$Not$0$dst@1@@0 () Bool)
(declare-fun $t15@0 () Bool)
(declare-fun _$t0@@7 () Bool)
(declare-fun $t10@0 () Bool)
(declare-fun inline$$42_TestArithmetic_f$0$$ret0@1 () Int)
(declare-fun $abort_flag@2 () Bool)
(declare-fun inline$$AddU64$1$dst@2 () Int)
(declare-fun inline$$42_TestArithmetic_f$0$$ret0@0 () Int)
(declare-fun inline$$AddU64$1$dst@0 () Int)
(declare-fun inline$$AddU64$1$dst@1 () Int)
(declare-fun $abort_code@0@@6 () Int)
(declare-fun inline$$42_TestArithmetic_g$0$$ret0@1 () Int)
(declare-fun $abort_flag@0@@6 () Bool)
(declare-fun inline$$AddU64$0$dst@2@@2 () Int)
(declare-fun inline$$42_TestArithmetic_g$0$$ret0@0 () Int)
(declare-fun inline$$AddU64$0$dst@0@@2 () Int)
(declare-fun inline$$AddU64$0$dst@1@@2 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_h$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 26942) (let ((L19_correct  (=> (= (ControlFlow 0 19982) (- 0 27690)) false)))
(let ((anon19_Then_correct  (=> $abort_flag@3 (=> (and (= $abort_code@2@@0 $abort_code@2@@0) (= (ControlFlow 0 20449) 19982)) L19_correct))))
(let ((anon24_Then_correct  (=> (and (and $t2@0@@0 (|$IsValid'u64'| 5)) (and (= 5 5) (= (ControlFlow 0 19972) 19982))) L19_correct)))
(let ((anon22_Then_correct  (=> (and (and $t1@0 (|$IsValid'u64'| 4)) (and (= 4 4) (= (ControlFlow 0 20028) 19982))) L19_correct)))
(let ((anon20_Then_correct  (=> $abort_flag@1@@0 (=> (and (= $abort_code@1@@6 $abort_code@1@@6) (= (ControlFlow 0 20068) 19982)) L19_correct))))
(let ((anon24_Else_correct  (=> (not $t2@0@@0) (=> (and (= $t4@0@@0 $t4@0@@0) (= (ControlFlow 0 19952) (- 0 27681))) (not false)))))
(let ((anon23_Else_correct  (=> (not inline$$Not$0$dst@1@@0) (=> (and (= false false) (= $t2@0@@0 false)) (and (=> (= (ControlFlow 0 19928) 19972) anon24_Then_correct) (=> (= (ControlFlow 0 19928) 19952) anon24_Else_correct))))))
(let ((anon23_Then_correct  (=> inline$$Not$0$dst@1@@0 (=> (and (and (|$IsValid'u64'| 5) (= $t15@0  (not (= $t4@0@@0 5)))) (and (= $t15@0 $t15@0) (= $t2@0@@0 $t15@0))) (and (=> (= (ControlFlow 0 20008) 19972) anon24_Then_correct) (=> (= (ControlFlow 0 20008) 19952) anon24_Else_correct))))))
(let ((inline$$Not$0$anon0_correct@@0  (=> (= inline$$Not$0$dst@1@@0  (not _$t0@@7)) (and (=> (= (ControlFlow 0 19900) 20008) anon23_Then_correct) (=> (= (ControlFlow 0 19900) 19928) anon23_Else_correct)))))
(let ((anon22_Else_correct  (=> (and (not $t1@0) (= (ControlFlow 0 19906) 19900)) inline$$Not$0$anon0_correct@@0)))
(let ((anon21_Else_correct  (=> (not _$t0@@7) (=> (and (= false false) (= $t1@0 false)) (and (=> (= (ControlFlow 0 19862) 20028) anon22_Then_correct) (=> (= (ControlFlow 0 19862) 19906) anon22_Else_correct))))))
(let ((anon21_Then_correct  (=> _$t0@@7 (=> (and (and (|$IsValid'u64'| 4) (= $t10@0  (not (= $t4@0@@0 4)))) (and (= $t10@0 $t10@0) (= $t1@0 $t10@0))) (and (=> (= (ControlFlow 0 20054) 20028) anon22_Then_correct) (=> (= (ControlFlow 0 20054) 19906) anon22_Else_correct))))))
(let ((anon19_Else_correct  (=> (not $abort_flag@3) (=> (and (= inline$$42_TestArithmetic_f$0$$ret0@1 inline$$42_TestArithmetic_f$0$$ret0@1) (= $t4@0@@0 inline$$42_TestArithmetic_f$0$$ret0@1)) (and (=> (= (ControlFlow 0 20435) 20054) anon21_Then_correct) (=> (= (ControlFlow 0 20435) 19862) anon21_Else_correct))))))
(let ((inline$$42_TestArithmetic_f$0$anon3_Else_correct  (=> (and (and (not $abort_flag@2) (= inline$$AddU64$1$dst@2 inline$$AddU64$1$dst@2)) (and (= inline$$42_TestArithmetic_f$0$$ret0@1 inline$$AddU64$1$dst@2) (= $abort_flag@3 $abort_flag@2))) (and (=> (= (ControlFlow 0 20395) 20449) anon19_Then_correct) (=> (= (ControlFlow 0 20395) 20435) anon19_Else_correct)))))
(let ((inline$$42_TestArithmetic_f$0$anon3_Then_correct  (=> (and (and $abort_flag@2 (= $abort_code@2@@0 $abort_code@2@@0)) (and (= inline$$42_TestArithmetic_f$0$$ret0@1 inline$$42_TestArithmetic_f$0$$ret0@0) (= $abort_flag@3 true))) (and (=> (= (ControlFlow 0 20413) 20449) anon19_Then_correct) (=> (= (ControlFlow 0 20413) 20435) anon19_Else_correct)))))
(let ((inline$$AddU64$1$anon3_Then$1_correct  (=> (= $abort_flag@2 true) (=> (and (= $abort_code@2@@0 $EXEC_FAILURE_CODE) (= inline$$AddU64$1$dst@2 inline$$AddU64$1$dst@0)) (and (=> (= (ControlFlow 0 20371) 20413) inline$$42_TestArithmetic_f$0$anon3_Then_correct) (=> (= (ControlFlow 0 20371) 20395) inline$$42_TestArithmetic_f$0$anon3_Else_correct))))))
(let ((inline$$AddU64$1$anon3_Then_correct  (=> (and (> (+ 3 1) $MAX_U64) (= (ControlFlow 0 20369) 20371)) inline$$AddU64$1$anon3_Then$1_correct)))
(let ((inline$$AddU64$1$anon3_Else_correct  (=> (>= $MAX_U64 (+ 3 1)) (=> (and (and (= inline$$AddU64$1$dst@1 (+ 3 1)) (= $abort_flag@2 false)) (and (= $abort_code@2@@0 $abort_code@0@@6) (= inline$$AddU64$1$dst@2 inline$$AddU64$1$dst@1))) (and (=> (= (ControlFlow 0 20317) 20413) inline$$42_TestArithmetic_f$0$anon3_Then_correct) (=> (= (ControlFlow 0 20317) 20395) inline$$42_TestArithmetic_f$0$anon3_Else_correct))))))
(let ((inline$$42_TestArithmetic_f$0$anon0_correct  (=> (and (= 3 3) (|$IsValid'u64'| 1)) (and (=> (= (ControlFlow 0 20377) 20369) inline$$AddU64$1$anon3_Then_correct) (=> (= (ControlFlow 0 20377) 20317) inline$$AddU64$1$anon3_Else_correct)))))
(let ((anon18_Then_correct  (=> (and _$t0@@7 (= (ControlFlow 0 20419) 20377)) inline$$42_TestArithmetic_f$0$anon0_correct)))
(let ((anon20_Else_correct  (=> (not $abort_flag@1@@0) (=> (and (= inline$$42_TestArithmetic_g$0$$ret0@1 inline$$42_TestArithmetic_g$0$$ret0@1) (= $t4@0@@0 inline$$42_TestArithmetic_g$0$$ret0@1)) (and (=> (= (ControlFlow 0 19840) 20054) anon21_Then_correct) (=> (= (ControlFlow 0 19840) 19862) anon21_Else_correct))))))
(let ((inline$$42_TestArithmetic_g$0$anon3_Else_correct  (=> (and (and (not $abort_flag@0@@6) (= inline$$AddU64$0$dst@2@@2 inline$$AddU64$0$dst@2@@2)) (and (= inline$$42_TestArithmetic_g$0$$ret0@1 inline$$AddU64$0$dst@2@@2) (= $abort_flag@1@@0 $abort_flag@0@@6))) (and (=> (= (ControlFlow 0 19798) 20068) anon20_Then_correct) (=> (= (ControlFlow 0 19798) 19840) anon20_Else_correct)))))
(let ((inline$$42_TestArithmetic_g$0$anon3_Then_correct  (=> (and (and $abort_flag@0@@6 (= $abort_code@1@@6 $abort_code@1@@6)) (and (= inline$$42_TestArithmetic_g$0$$ret0@1 inline$$42_TestArithmetic_g$0$$ret0@0) (= $abort_flag@1@@0 true))) (and (=> (= (ControlFlow 0 19816) 20068) anon20_Then_correct) (=> (= (ControlFlow 0 19816) 19840) anon20_Else_correct)))))
(let ((inline$$AddU64$0$anon3_Then$1_correct@@2  (=> (= $abort_flag@0@@6 true) (=> (and (= $abort_code@1@@6 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2@@2 inline$$AddU64$0$dst@0@@2)) (and (=> (= (ControlFlow 0 19774) 19816) inline$$42_TestArithmetic_g$0$anon3_Then_correct) (=> (= (ControlFlow 0 19774) 19798) inline$$42_TestArithmetic_g$0$anon3_Else_correct))))))
(let ((inline$$AddU64$0$anon3_Then_correct@@2  (=> (and (> (+ 3 2) $MAX_U64) (= (ControlFlow 0 19772) 19774)) inline$$AddU64$0$anon3_Then$1_correct@@2)))
(let ((inline$$AddU64$0$anon3_Else_correct@@2  (=> (>= $MAX_U64 (+ 3 2)) (=> (and (and (= inline$$AddU64$0$dst@1@@2 (+ 3 2)) (= $abort_flag@0@@6 false)) (and (= $abort_code@1@@6 $abort_code@0@@6) (= inline$$AddU64$0$dst@2@@2 inline$$AddU64$0$dst@1@@2))) (and (=> (= (ControlFlow 0 19720) 19816) inline$$42_TestArithmetic_g$0$anon3_Then_correct) (=> (= (ControlFlow 0 19720) 19798) inline$$42_TestArithmetic_g$0$anon3_Else_correct))))))
(let ((inline$$42_TestArithmetic_g$0$anon0_correct  (=> (and (= 3 3) (|$IsValid'u64'| 2)) (and (=> (= (ControlFlow 0 19780) 19772) inline$$AddU64$0$anon3_Then_correct@@2) (=> (= (ControlFlow 0 19780) 19720) inline$$AddU64$0$anon3_Else_correct@@2)))))
(let ((anon18_Else_correct  (=> (and (not _$t0@@7) (= (ControlFlow 0 19822) 19780)) inline$$42_TestArithmetic_g$0$anon0_correct)))
(let ((anon0$1_correct@@8  (=> (= _$t0@@7 _$t0@@7) (=> (and (|$IsValid'u64'| 3) (= 3 3)) (and (=> (= (ControlFlow 0 19469) 20419) anon18_Then_correct) (=> (= (ControlFlow 0 19469) 19822) anon18_Else_correct))))))
(let ((anon0_correct@@8  (=> (= (ControlFlow 0 26942) 19469) anon0$1_correct@@8)))
anon0_correct@@8)))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@1@@1 () Bool)
(declare-fun inline$$AddU64$0$dst@2@@3 () Int)
(declare-fun _$t0@@8 () Int)
(declare-fun _$t1@@4 () Int)
(declare-fun _$t2 () Int)
(declare-fun $abort_code@2@@1 () Int)
(declare-fun inline$$AddU64$0$dst@0@@3 () Int)
(declare-fun inline$$MulU64$0$dst@2 () Int)
(declare-fun inline$$AddU64$0$dst@1@@3 () Int)
(declare-fun $abort_code@1@@7 () Int)
(declare-fun $abort_flag@0@@7 () Bool)
(declare-fun inline$$MulU64$0$dst@0 () Int)
(declare-fun inline$$MulU64$0$dst@1 () Int)
(declare-fun $abort_code@0@@7 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_multiple_ops$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 27710) (let ((anon7_Else_correct@@0  (=> (not $abort_flag@1@@1) (=> (and (= inline$$AddU64$0$dst@2@@3 inline$$AddU64$0$dst@2@@3) (= (ControlFlow 0 20893) (- 0 28018))) (= inline$$AddU64$0$dst@2@@3 (+ _$t0@@8 (* _$t1@@4 _$t2)))))))
(let ((anon7_Then_correct@@0 true))
(let ((inline$$AddU64$0$anon3_Then$1_correct@@3  (=> (= $abort_code@2@@1 $EXEC_FAILURE_CODE) (=> (and (= $abort_flag@1@@1 true) (= inline$$AddU64$0$dst@2@@3 inline$$AddU64$0$dst@0@@3)) (and (=> (= (ControlFlow 0 20853) 20907) anon7_Then_correct@@0) (=> (= (ControlFlow 0 20853) 20893) anon7_Else_correct@@0))))))
(let ((inline$$AddU64$0$anon3_Then_correct@@3  (=> (and (> (+ _$t0@@8 inline$$MulU64$0$dst@2) $MAX_U64) (= (ControlFlow 0 20851) 20853)) inline$$AddU64$0$anon3_Then$1_correct@@3)))
(let ((inline$$AddU64$0$anon3_Else_correct@@3  (=> (>= $MAX_U64 (+ _$t0@@8 inline$$MulU64$0$dst@2)) (=> (and (and (= inline$$AddU64$0$dst@1@@3 (+ _$t0@@8 inline$$MulU64$0$dst@2)) (= $abort_code@2@@1 $abort_code@1@@7)) (and (= $abort_flag@1@@1 $abort_flag@0@@7) (= inline$$AddU64$0$dst@2@@3 inline$$AddU64$0$dst@1@@3))) (and (=> (= (ControlFlow 0 20799) 20907) anon7_Then_correct@@0) (=> (= (ControlFlow 0 20799) 20893) anon7_Else_correct@@0))))))
(let ((anon6_Else_correct@@0  (=> (not $abort_flag@0@@7) (and (=> (= (ControlFlow 0 20859) 20851) inline$$AddU64$0$anon3_Then_correct@@3) (=> (= (ControlFlow 0 20859) 20799) inline$$AddU64$0$anon3_Else_correct@@3)))))
(let ((anon6_Then_correct@@0 true))
(let ((inline$$MulU64$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@7 true) (=> (and (= $abort_code@1@@7 $EXEC_FAILURE_CODE) (= inline$$MulU64$0$dst@2 inline$$MulU64$0$dst@0)) (and (=> (= (ControlFlow 0 20692) 20927) anon6_Then_correct@@0) (=> (= (ControlFlow 0 20692) 20859) anon6_Else_correct@@0))))))
(let ((inline$$MulU64$0$anon3_Then_correct  (=> (and (> (* _$t1@@4 _$t2) $MAX_U64) (= (ControlFlow 0 20690) 20692)) inline$$MulU64$0$anon3_Then$1_correct)))
(let ((inline$$MulU64$0$anon3_Else_correct  (=> (>= $MAX_U64 (* _$t1@@4 _$t2)) (=> (and (and (= inline$$MulU64$0$dst@1 (* _$t1@@4 _$t2)) (= $abort_flag@0@@7 false)) (and (= $abort_code@1@@7 $abort_code@0@@7) (= inline$$MulU64$0$dst@2 inline$$MulU64$0$dst@1))) (and (=> (= (ControlFlow 0 20638) 20927) anon6_Then_correct@@0) (=> (= (ControlFlow 0 20638) 20859) anon6_Else_correct@@0))))))
(let ((anon0$1_correct@@9  (=> (and (|$IsValid'u64'| _$t0@@8) (|$IsValid'u64'| _$t1@@4)) (=> (and (and (|$IsValid'u64'| _$t2) (= _$t0@@8 _$t0@@8)) (and (= _$t1@@4 _$t1@@4) (= _$t2 _$t2))) (and (=> (= (ControlFlow 0 20698) 20690) inline$$MulU64$0$anon3_Then_correct) (=> (= (ControlFlow 0 20698) 20638) inline$$MulU64$0$anon3_Else_correct))))))
(let ((anon0_correct@@9  (=> (= (ControlFlow 0 27710) 20698) anon0$1_correct@@9)))
anon0_correct@@9)))))))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@8 () Bool)
(declare-fun inline$$AddU128$0$dst@2 () Int)
(declare-fun _$t0@@9 () Int)
(declare-fun _$t1@@5 () Int)
(declare-fun $abort_code@1@@8 () Int)
(declare-fun inline$$AddU128$0$dst@0 () Int)
(declare-fun inline$$AddU128$0$dst@1 () Int)
(declare-fun $abort_code@0@@8 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u128_add$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 28046) (let ((anon4_Else_correct@@5  (=> (not $abort_flag@0@@8) (=> (and (= inline$$AddU128$0$dst@2 inline$$AddU128$0$dst@2) (= (ControlFlow 0 21194) (- 0 28242))) (not (> (+ _$t0@@9 _$t1@@5) $MAX_U128))))))
(let ((anon4_Then_correct@@5  (=> $abort_flag@0@@8 (=> (and (= $abort_code@1@@8 $abort_code@1@@8) (= (ControlFlow 0 21224) (- 0 28215))) (> (+ _$t0@@9 _$t1@@5) $MAX_U128)))))
(let ((inline$$AddU128$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@8 true) (=> (and (= $abort_code@1@@8 $EXEC_FAILURE_CODE) (= inline$$AddU128$0$dst@2 inline$$AddU128$0$dst@0)) (and (=> (= (ControlFlow 0 21156) 21224) anon4_Then_correct@@5) (=> (= (ControlFlow 0 21156) 21194) anon4_Else_correct@@5))))))
(let ((inline$$AddU128$0$anon3_Then_correct  (=> (and (> (+ _$t0@@9 _$t1@@5) $MAX_U128) (= (ControlFlow 0 21154) 21156)) inline$$AddU128$0$anon3_Then$1_correct)))
(let ((inline$$AddU128$0$anon3_Else_correct  (=> (>= $MAX_U128 (+ _$t0@@9 _$t1@@5)) (=> (and (and (= inline$$AddU128$0$dst@1 (+ _$t0@@9 _$t1@@5)) (= $abort_flag@0@@8 false)) (and (= $abort_code@1@@8 $abort_code@0@@8) (= inline$$AddU128$0$dst@2 inline$$AddU128$0$dst@1))) (and (=> (= (ControlFlow 0 21102) 21224) anon4_Then_correct@@5) (=> (= (ControlFlow 0 21102) 21194) anon4_Else_correct@@5))))))
(let ((anon0$1_correct@@10  (=> (and (and (|$IsValid'u128'| _$t0@@9) (|$IsValid'u128'| _$t1@@5)) (and (= _$t0@@9 _$t0@@9) (= _$t1@@5 _$t1@@5))) (and (=> (= (ControlFlow 0 21162) 21154) inline$$AddU128$0$anon3_Then_correct) (=> (= (ControlFlow 0 21162) 21102) inline$$AddU128$0$anon3_Else_correct)))))
(let ((anon0_correct@@10  (=> (= (ControlFlow 0 28046) 21162) anon0$1_correct@@10)))
anon0_correct@@10))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@9 () Bool)
(declare-fun inline$$AddU128$0$dst@2@@0 () Int)
(declare-fun $abort_code@1@@9 () Int)
(declare-fun inline$$AddU128$0$dst@0@@0 () Int)
(declare-fun _$t0@@10 () Int)
(declare-fun _$t1@@6 () Int)
(declare-fun inline$$AddU128$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@9 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u128_add_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 28264) (let ((anon4_Else_correct@@6  (=> (not $abort_flag@0@@9) (=> (and (= inline$$AddU128$0$dst@2@@0 inline$$AddU128$0$dst@2@@0) (= (ControlFlow 0 21483) (- 0 28454))) (not false)))))
(let ((anon4_Then_correct@@6  (=> $abort_flag@0@@9 (=> (and (= $abort_code@1@@9 $abort_code@1@@9) (= (ControlFlow 0 21505) (- 0 28433))) false))))
(let ((inline$$AddU128$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@9 true) (=> (and (= $abort_code@1@@9 $EXEC_FAILURE_CODE) (= inline$$AddU128$0$dst@2@@0 inline$$AddU128$0$dst@0@@0)) (and (=> (= (ControlFlow 0 21453) 21505) anon4_Then_correct@@6) (=> (= (ControlFlow 0 21453) 21483) anon4_Else_correct@@6))))))
(let ((inline$$AddU128$0$anon3_Then_correct@@0  (=> (and (> (+ _$t0@@10 _$t1@@6) $MAX_U128) (= (ControlFlow 0 21451) 21453)) inline$$AddU128$0$anon3_Then$1_correct@@0)))
(let ((inline$$AddU128$0$anon3_Else_correct@@0  (=> (>= $MAX_U128 (+ _$t0@@10 _$t1@@6)) (=> (and (and (= inline$$AddU128$0$dst@1@@0 (+ _$t0@@10 _$t1@@6)) (= $abort_flag@0@@9 false)) (and (= $abort_code@1@@9 $abort_code@0@@9) (= inline$$AddU128$0$dst@2@@0 inline$$AddU128$0$dst@1@@0))) (and (=> (= (ControlFlow 0 21399) 21505) anon4_Then_correct@@6) (=> (= (ControlFlow 0 21399) 21483) anon4_Else_correct@@6))))))
(let ((anon0$1_correct@@11  (=> (and (and (|$IsValid'u128'| _$t0@@10) (|$IsValid'u128'| _$t1@@6)) (and (= _$t0@@10 _$t0@@10) (= _$t1@@6 _$t1@@6))) (and (=> (= (ControlFlow 0 21459) 21451) inline$$AddU128$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 21459) 21399) inline$$AddU128$0$anon3_Else_correct@@0)))))
(let ((anon0_correct@@11  (=> (= (ControlFlow 0 28264) 21459) anon0$1_correct@@11)))
anon0_correct@@11))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 28264)))
(get-value ((ControlFlow 0 21459)))
(get-value ((ControlFlow 0 21451)))
(get-value ((ControlFlow 0 21453)))
(get-value ((ControlFlow 0 21505)))
(assert (not (= (ControlFlow 0 21505) (- 28433))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@10 () Bool)
(declare-fun inline$$MulU128$0$dst@2 () Int)
(declare-fun _$t0@@11 () Int)
(declare-fun _$t1@@7 () Int)
(declare-fun $abort_code@1@@10 () Int)
(declare-fun inline$$MulU128$0$dst@0 () Int)
(declare-fun inline$$MulU128$0$dst@1 () Int)
(declare-fun $abort_code@0@@10 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u128_mul$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 28471) (let ((anon4_Else_correct@@7  (=> (not $abort_flag@0@@10) (=> (and (= inline$$MulU128$0$dst@2 inline$$MulU128$0$dst@2) (= (ControlFlow 0 21772) (- 0 28667))) (not (> (* _$t0@@11 _$t1@@7) $MAX_U128))))))
(let ((anon4_Then_correct@@7  (=> $abort_flag@0@@10 (=> (and (= $abort_code@1@@10 $abort_code@1@@10) (= (ControlFlow 0 21802) (- 0 28640))) (> (* _$t0@@11 _$t1@@7) $MAX_U128)))))
(let ((inline$$MulU128$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@10 true) (=> (and (= $abort_code@1@@10 $EXEC_FAILURE_CODE) (= inline$$MulU128$0$dst@2 inline$$MulU128$0$dst@0)) (and (=> (= (ControlFlow 0 21734) 21802) anon4_Then_correct@@7) (=> (= (ControlFlow 0 21734) 21772) anon4_Else_correct@@7))))))
(let ((inline$$MulU128$0$anon3_Then_correct  (=> (and (> (* _$t0@@11 _$t1@@7) $MAX_U128) (= (ControlFlow 0 21732) 21734)) inline$$MulU128$0$anon3_Then$1_correct)))
(let ((inline$$MulU128$0$anon3_Else_correct  (=> (>= $MAX_U128 (* _$t0@@11 _$t1@@7)) (=> (and (and (= inline$$MulU128$0$dst@1 (* _$t0@@11 _$t1@@7)) (= $abort_flag@0@@10 false)) (and (= $abort_code@1@@10 $abort_code@0@@10) (= inline$$MulU128$0$dst@2 inline$$MulU128$0$dst@1))) (and (=> (= (ControlFlow 0 21680) 21802) anon4_Then_correct@@7) (=> (= (ControlFlow 0 21680) 21772) anon4_Else_correct@@7))))))
(let ((anon0$1_correct@@12  (=> (and (and (|$IsValid'u128'| _$t0@@11) (|$IsValid'u128'| _$t1@@7)) (and (= _$t0@@11 _$t0@@11) (= _$t1@@7 _$t1@@7))) (and (=> (= (ControlFlow 0 21740) 21732) inline$$MulU128$0$anon3_Then_correct) (=> (= (ControlFlow 0 21740) 21680) inline$$MulU128$0$anon3_Else_correct)))))
(let ((anon0_correct@@12  (=> (= (ControlFlow 0 28471) 21740) anon0$1_correct@@12)))
anon0_correct@@12))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@11 () Bool)
(declare-fun inline$$MulU128$0$dst@2@@0 () Int)
(declare-fun $abort_code@1@@11 () Int)
(declare-fun inline$$MulU128$0$dst@0@@0 () Int)
(declare-fun _$t0@@12 () Int)
(declare-fun _$t1@@8 () Int)
(declare-fun inline$$MulU128$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@11 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u128_mul_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 28689) (let ((anon4_Else_correct@@8  (=> (not $abort_flag@0@@11) (=> (and (= inline$$MulU128$0$dst@2@@0 inline$$MulU128$0$dst@2@@0) (= (ControlFlow 0 22061) (- 0 28879))) (not false)))))
(let ((anon4_Then_correct@@8  (=> $abort_flag@0@@11 (=> (and (= $abort_code@1@@11 $abort_code@1@@11) (= (ControlFlow 0 22083) (- 0 28858))) false))))
(let ((inline$$MulU128$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@11 true) (=> (and (= $abort_code@1@@11 $EXEC_FAILURE_CODE) (= inline$$MulU128$0$dst@2@@0 inline$$MulU128$0$dst@0@@0)) (and (=> (= (ControlFlow 0 22031) 22083) anon4_Then_correct@@8) (=> (= (ControlFlow 0 22031) 22061) anon4_Else_correct@@8))))))
(let ((inline$$MulU128$0$anon3_Then_correct@@0  (=> (and (> (* _$t0@@12 _$t1@@8) $MAX_U128) (= (ControlFlow 0 22029) 22031)) inline$$MulU128$0$anon3_Then$1_correct@@0)))
(let ((inline$$MulU128$0$anon3_Else_correct@@0  (=> (>= $MAX_U128 (* _$t0@@12 _$t1@@8)) (=> (and (and (= inline$$MulU128$0$dst@1@@0 (* _$t0@@12 _$t1@@8)) (= $abort_flag@0@@11 false)) (and (= $abort_code@1@@11 $abort_code@0@@11) (= inline$$MulU128$0$dst@2@@0 inline$$MulU128$0$dst@1@@0))) (and (=> (= (ControlFlow 0 21977) 22083) anon4_Then_correct@@8) (=> (= (ControlFlow 0 21977) 22061) anon4_Else_correct@@8))))))
(let ((anon0$1_correct@@13  (=> (and (and (|$IsValid'u128'| _$t0@@12) (|$IsValid'u128'| _$t1@@8)) (and (= _$t0@@12 _$t0@@12) (= _$t1@@8 _$t1@@8))) (and (=> (= (ControlFlow 0 22037) 22029) inline$$MulU128$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 22037) 21977) inline$$MulU128$0$anon3_Else_correct@@0)))))
(let ((anon0_correct@@13  (=> (= (ControlFlow 0 28689) 22037) anon0$1_correct@@13)))
anon0_correct@@13))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 28689)))
(get-value ((ControlFlow 0 22037)))
(get-value ((ControlFlow 0 22029)))
(get-value ((ControlFlow 0 22031)))
(get-value ((ControlFlow 0 22083)))
(assert (not (= (ControlFlow 0 22083) (- 28858))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@12 () Bool)
(declare-fun inline$$AddU64$0$dst@2@@4 () Int)
(declare-fun _$t0@@13 () Int)
(declare-fun _$t1@@9 () Int)
(declare-fun $abort_code@1@@12 () Int)
(declare-fun inline$$AddU64$0$dst@0@@4 () Int)
(declare-fun inline$$AddU64$0$dst@1@@4 () Int)
(declare-fun $abort_code@0@@12 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u64_add$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 28896) (let ((anon4_Else_correct@@9  (=> (not $abort_flag@0@@12) (=> (and (= inline$$AddU64$0$dst@2@@4 inline$$AddU64$0$dst@2@@4) (= (ControlFlow 0 22350) (- 0 29092))) (not (> (+ _$t0@@13 _$t1@@9) $MAX_U64))))))
(let ((anon4_Then_correct@@9  (=> $abort_flag@0@@12 (=> (and (= $abort_code@1@@12 $abort_code@1@@12) (= (ControlFlow 0 22380) (- 0 29065))) (> (+ _$t0@@13 _$t1@@9) $MAX_U64)))))
(let ((inline$$AddU64$0$anon3_Then$1_correct@@4  (=> (= $abort_flag@0@@12 true) (=> (and (= $abort_code@1@@12 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2@@4 inline$$AddU64$0$dst@0@@4)) (and (=> (= (ControlFlow 0 22312) 22380) anon4_Then_correct@@9) (=> (= (ControlFlow 0 22312) 22350) anon4_Else_correct@@9))))))
(let ((inline$$AddU64$0$anon3_Then_correct@@4  (=> (and (> (+ _$t0@@13 _$t1@@9) $MAX_U64) (= (ControlFlow 0 22310) 22312)) inline$$AddU64$0$anon3_Then$1_correct@@4)))
(let ((inline$$AddU64$0$anon3_Else_correct@@4  (=> (>= $MAX_U64 (+ _$t0@@13 _$t1@@9)) (=> (and (and (= inline$$AddU64$0$dst@1@@4 (+ _$t0@@13 _$t1@@9)) (= $abort_flag@0@@12 false)) (and (= $abort_code@1@@12 $abort_code@0@@12) (= inline$$AddU64$0$dst@2@@4 inline$$AddU64$0$dst@1@@4))) (and (=> (= (ControlFlow 0 22258) 22380) anon4_Then_correct@@9) (=> (= (ControlFlow 0 22258) 22350) anon4_Else_correct@@9))))))
(let ((anon0$1_correct@@14  (=> (and (and (|$IsValid'u64'| _$t0@@13) (|$IsValid'u64'| _$t1@@9)) (and (= _$t0@@13 _$t0@@13) (= _$t1@@9 _$t1@@9))) (and (=> (= (ControlFlow 0 22318) 22310) inline$$AddU64$0$anon3_Then_correct@@4) (=> (= (ControlFlow 0 22318) 22258) inline$$AddU64$0$anon3_Else_correct@@4)))))
(let ((anon0_correct@@14  (=> (= (ControlFlow 0 28896) 22318) anon0$1_correct@@14)))
anon0_correct@@14))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@13 () Bool)
(declare-fun inline$$AddU64$0$dst@2@@5 () Int)
(declare-fun $abort_code@1@@13 () Int)
(declare-fun inline$$AddU64$0$dst@0@@5 () Int)
(declare-fun _$t0@@14 () Int)
(declare-fun _$t1@@10 () Int)
(declare-fun inline$$AddU64$0$dst@1@@5 () Int)
(declare-fun $abort_code@0@@13 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u64_add_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 29114) (let ((anon4_Else_correct@@10  (=> (not $abort_flag@0@@13) (=> (and (= inline$$AddU64$0$dst@2@@5 inline$$AddU64$0$dst@2@@5) (= (ControlFlow 0 22639) (- 0 29304))) (not false)))))
(let ((anon4_Then_correct@@10  (=> $abort_flag@0@@13 (=> (and (= $abort_code@1@@13 $abort_code@1@@13) (= (ControlFlow 0 22661) (- 0 29283))) false))))
(let ((inline$$AddU64$0$anon3_Then$1_correct@@5  (=> (= $abort_flag@0@@13 true) (=> (and (= $abort_code@1@@13 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2@@5 inline$$AddU64$0$dst@0@@5)) (and (=> (= (ControlFlow 0 22609) 22661) anon4_Then_correct@@10) (=> (= (ControlFlow 0 22609) 22639) anon4_Else_correct@@10))))))
(let ((inline$$AddU64$0$anon3_Then_correct@@5  (=> (and (> (+ _$t0@@14 _$t1@@10) $MAX_U64) (= (ControlFlow 0 22607) 22609)) inline$$AddU64$0$anon3_Then$1_correct@@5)))
(let ((inline$$AddU64$0$anon3_Else_correct@@5  (=> (>= $MAX_U64 (+ _$t0@@14 _$t1@@10)) (=> (and (and (= inline$$AddU64$0$dst@1@@5 (+ _$t0@@14 _$t1@@10)) (= $abort_flag@0@@13 false)) (and (= $abort_code@1@@13 $abort_code@0@@13) (= inline$$AddU64$0$dst@2@@5 inline$$AddU64$0$dst@1@@5))) (and (=> (= (ControlFlow 0 22555) 22661) anon4_Then_correct@@10) (=> (= (ControlFlow 0 22555) 22639) anon4_Else_correct@@10))))))
(let ((anon0$1_correct@@15  (=> (and (and (|$IsValid'u64'| _$t0@@14) (|$IsValid'u64'| _$t1@@10)) (and (= _$t0@@14 _$t0@@14) (= _$t1@@10 _$t1@@10))) (and (=> (= (ControlFlow 0 22615) 22607) inline$$AddU64$0$anon3_Then_correct@@5) (=> (= (ControlFlow 0 22615) 22555) inline$$AddU64$0$anon3_Else_correct@@5)))))
(let ((anon0_correct@@15  (=> (= (ControlFlow 0 29114) 22615) anon0$1_correct@@15)))
anon0_correct@@15))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 29114)))
(get-value ((ControlFlow 0 22615)))
(get-value ((ControlFlow 0 22607)))
(get-value ((ControlFlow 0 22609)))
(get-value ((ControlFlow 0 22661)))
(assert (not (= (ControlFlow 0 22661) (- 29283))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@14 () Bool)
(declare-fun inline$$MulU64$0$dst@2@@0 () Int)
(declare-fun _$t0@@15 () Int)
(declare-fun _$t1@@11 () Int)
(declare-fun $abort_code@1@@14 () Int)
(declare-fun inline$$MulU64$0$dst@0@@0 () Int)
(declare-fun inline$$MulU64$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@14 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u64_mul$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 29321) (let ((anon4_Else_correct@@11  (=> (not $abort_flag@0@@14) (=> (and (= inline$$MulU64$0$dst@2@@0 inline$$MulU64$0$dst@2@@0) (= (ControlFlow 0 22928) (- 0 29517))) (not (> (* _$t0@@15 _$t1@@11) $MAX_U64))))))
(let ((anon4_Then_correct@@11  (=> $abort_flag@0@@14 (=> (and (= $abort_code@1@@14 $abort_code@1@@14) (= (ControlFlow 0 22958) (- 0 29490))) (> (* _$t0@@15 _$t1@@11) $MAX_U64)))))
(let ((inline$$MulU64$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@14 true) (=> (and (= $abort_code@1@@14 $EXEC_FAILURE_CODE) (= inline$$MulU64$0$dst@2@@0 inline$$MulU64$0$dst@0@@0)) (and (=> (= (ControlFlow 0 22890) 22958) anon4_Then_correct@@11) (=> (= (ControlFlow 0 22890) 22928) anon4_Else_correct@@11))))))
(let ((inline$$MulU64$0$anon3_Then_correct@@0  (=> (and (> (* _$t0@@15 _$t1@@11) $MAX_U64) (= (ControlFlow 0 22888) 22890)) inline$$MulU64$0$anon3_Then$1_correct@@0)))
(let ((inline$$MulU64$0$anon3_Else_correct@@0  (=> (>= $MAX_U64 (* _$t0@@15 _$t1@@11)) (=> (and (and (= inline$$MulU64$0$dst@1@@0 (* _$t0@@15 _$t1@@11)) (= $abort_flag@0@@14 false)) (and (= $abort_code@1@@14 $abort_code@0@@14) (= inline$$MulU64$0$dst@2@@0 inline$$MulU64$0$dst@1@@0))) (and (=> (= (ControlFlow 0 22836) 22958) anon4_Then_correct@@11) (=> (= (ControlFlow 0 22836) 22928) anon4_Else_correct@@11))))))
(let ((anon0$1_correct@@16  (=> (and (and (|$IsValid'u64'| _$t0@@15) (|$IsValid'u64'| _$t1@@11)) (and (= _$t0@@15 _$t0@@15) (= _$t1@@11 _$t1@@11))) (and (=> (= (ControlFlow 0 22896) 22888) inline$$MulU64$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 22896) 22836) inline$$MulU64$0$anon3_Else_correct@@0)))))
(let ((anon0_correct@@16  (=> (= (ControlFlow 0 29321) 22896) anon0$1_correct@@16)))
anon0_correct@@16))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@15 () Bool)
(declare-fun inline$$MulU64$0$dst@2@@1 () Int)
(declare-fun $abort_code@1@@15 () Int)
(declare-fun inline$$MulU64$0$dst@0@@1 () Int)
(declare-fun _$t0@@16 () Int)
(declare-fun _$t1@@12 () Int)
(declare-fun inline$$MulU64$0$dst@1@@1 () Int)
(declare-fun $abort_code@0@@15 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u64_mul_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 29539) (let ((anon4_Else_correct@@12  (=> (not $abort_flag@0@@15) (=> (and (= inline$$MulU64$0$dst@2@@1 inline$$MulU64$0$dst@2@@1) (= (ControlFlow 0 23217) (- 0 29729))) (not false)))))
(let ((anon4_Then_correct@@12  (=> $abort_flag@0@@15 (=> (and (= $abort_code@1@@15 $abort_code@1@@15) (= (ControlFlow 0 23239) (- 0 29708))) false))))
(let ((inline$$MulU64$0$anon3_Then$1_correct@@1  (=> (= $abort_flag@0@@15 true) (=> (and (= $abort_code@1@@15 $EXEC_FAILURE_CODE) (= inline$$MulU64$0$dst@2@@1 inline$$MulU64$0$dst@0@@1)) (and (=> (= (ControlFlow 0 23187) 23239) anon4_Then_correct@@12) (=> (= (ControlFlow 0 23187) 23217) anon4_Else_correct@@12))))))
(let ((inline$$MulU64$0$anon3_Then_correct@@1  (=> (and (> (* _$t0@@16 _$t1@@12) $MAX_U64) (= (ControlFlow 0 23185) 23187)) inline$$MulU64$0$anon3_Then$1_correct@@1)))
(let ((inline$$MulU64$0$anon3_Else_correct@@1  (=> (>= $MAX_U64 (* _$t0@@16 _$t1@@12)) (=> (and (and (= inline$$MulU64$0$dst@1@@1 (* _$t0@@16 _$t1@@12)) (= $abort_flag@0@@15 false)) (and (= $abort_code@1@@15 $abort_code@0@@15) (= inline$$MulU64$0$dst@2@@1 inline$$MulU64$0$dst@1@@1))) (and (=> (= (ControlFlow 0 23133) 23239) anon4_Then_correct@@12) (=> (= (ControlFlow 0 23133) 23217) anon4_Else_correct@@12))))))
(let ((anon0$1_correct@@17  (=> (and (and (|$IsValid'u64'| _$t0@@16) (|$IsValid'u64'| _$t1@@12)) (and (= _$t0@@16 _$t0@@16) (= _$t1@@12 _$t1@@12))) (and (=> (= (ControlFlow 0 23193) 23185) inline$$MulU64$0$anon3_Then_correct@@1) (=> (= (ControlFlow 0 23193) 23133) inline$$MulU64$0$anon3_Else_correct@@1)))))
(let ((anon0_correct@@17  (=> (= (ControlFlow 0 29539) 23193) anon0$1_correct@@17)))
anon0_correct@@17))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 29539)))
(get-value ((ControlFlow 0 23193)))
(get-value ((ControlFlow 0 23185)))
(get-value ((ControlFlow 0 23187)))
(get-value ((ControlFlow 0 23239)))
(assert (not (= (ControlFlow 0 23239) (- 29708))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@16 () Bool)
(declare-fun inline$$AddU8$0$dst@2 () Int)
(declare-fun _$t0@@17 () Int)
(declare-fun _$t1@@13 () Int)
(declare-fun $abort_code@1@@16 () Int)
(declare-fun inline$$AddU8$0$dst@0 () Int)
(declare-fun inline$$AddU8$0$dst@1 () Int)
(declare-fun $abort_code@0@@16 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u8_add$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 29746) (let ((anon4_Else_correct@@13  (=> (not $abort_flag@0@@16) (=> (and (= inline$$AddU8$0$dst@2 inline$$AddU8$0$dst@2) (= (ControlFlow 0 23506) (- 0 29942))) (not (> (+ _$t0@@17 _$t1@@13) $MAX_U8))))))
(let ((anon4_Then_correct@@13  (=> $abort_flag@0@@16 (=> (and (= $abort_code@1@@16 $abort_code@1@@16) (= (ControlFlow 0 23536) (- 0 29915))) (> (+ _$t0@@17 _$t1@@13) $MAX_U8)))))
(let ((inline$$AddU8$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@16 true) (=> (and (= $abort_code@1@@16 $EXEC_FAILURE_CODE) (= inline$$AddU8$0$dst@2 inline$$AddU8$0$dst@0)) (and (=> (= (ControlFlow 0 23468) 23536) anon4_Then_correct@@13) (=> (= (ControlFlow 0 23468) 23506) anon4_Else_correct@@13))))))
(let ((inline$$AddU8$0$anon3_Then_correct  (=> (and (> (+ _$t0@@17 _$t1@@13) $MAX_U8) (= (ControlFlow 0 23466) 23468)) inline$$AddU8$0$anon3_Then$1_correct)))
(let ((inline$$AddU8$0$anon3_Else_correct  (=> (>= $MAX_U8 (+ _$t0@@17 _$t1@@13)) (=> (and (and (= inline$$AddU8$0$dst@1 (+ _$t0@@17 _$t1@@13)) (= $abort_flag@0@@16 false)) (and (= $abort_code@1@@16 $abort_code@0@@16) (= inline$$AddU8$0$dst@2 inline$$AddU8$0$dst@1))) (and (=> (= (ControlFlow 0 23414) 23536) anon4_Then_correct@@13) (=> (= (ControlFlow 0 23414) 23506) anon4_Else_correct@@13))))))
(let ((anon0$1_correct@@18  (=> (and (and (|$IsValid'u8'| _$t0@@17) (|$IsValid'u8'| _$t1@@13)) (and (= _$t0@@17 _$t0@@17) (= _$t1@@13 _$t1@@13))) (and (=> (= (ControlFlow 0 23474) 23466) inline$$AddU8$0$anon3_Then_correct) (=> (= (ControlFlow 0 23474) 23414) inline$$AddU8$0$anon3_Else_correct)))))
(let ((anon0_correct@@18  (=> (= (ControlFlow 0 29746) 23474) anon0$1_correct@@18)))
anon0_correct@@18))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@17 () Bool)
(declare-fun inline$$AddU8$0$dst@2@@0 () Int)
(declare-fun $abort_code@1@@17 () Int)
(declare-fun inline$$AddU8$0$dst@0@@0 () Int)
(declare-fun _$t0@@18 () Int)
(declare-fun _$t1@@14 () Int)
(declare-fun inline$$AddU8$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@17 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u8_add_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 29964) (let ((anon4_Else_correct@@14  (=> (not $abort_flag@0@@17) (=> (and (= inline$$AddU8$0$dst@2@@0 inline$$AddU8$0$dst@2@@0) (= (ControlFlow 0 23795) (- 0 30154))) (not false)))))
(let ((anon4_Then_correct@@14  (=> $abort_flag@0@@17 (=> (and (= $abort_code@1@@17 $abort_code@1@@17) (= (ControlFlow 0 23817) (- 0 30133))) false))))
(let ((inline$$AddU8$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@17 true) (=> (and (= $abort_code@1@@17 $EXEC_FAILURE_CODE) (= inline$$AddU8$0$dst@2@@0 inline$$AddU8$0$dst@0@@0)) (and (=> (= (ControlFlow 0 23765) 23817) anon4_Then_correct@@14) (=> (= (ControlFlow 0 23765) 23795) anon4_Else_correct@@14))))))
(let ((inline$$AddU8$0$anon3_Then_correct@@0  (=> (and (> (+ _$t0@@18 _$t1@@14) $MAX_U8) (= (ControlFlow 0 23763) 23765)) inline$$AddU8$0$anon3_Then$1_correct@@0)))
(let ((inline$$AddU8$0$anon3_Else_correct@@0  (=> (>= $MAX_U8 (+ _$t0@@18 _$t1@@14)) (=> (and (and (= inline$$AddU8$0$dst@1@@0 (+ _$t0@@18 _$t1@@14)) (= $abort_flag@0@@17 false)) (and (= $abort_code@1@@17 $abort_code@0@@17) (= inline$$AddU8$0$dst@2@@0 inline$$AddU8$0$dst@1@@0))) (and (=> (= (ControlFlow 0 23711) 23817) anon4_Then_correct@@14) (=> (= (ControlFlow 0 23711) 23795) anon4_Else_correct@@14))))))
(let ((anon0$1_correct@@19  (=> (and (and (|$IsValid'u8'| _$t0@@18) (|$IsValid'u8'| _$t1@@14)) (and (= _$t0@@18 _$t0@@18) (= _$t1@@14 _$t1@@14))) (and (=> (= (ControlFlow 0 23771) 23763) inline$$AddU8$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 23771) 23711) inline$$AddU8$0$anon3_Else_correct@@0)))))
(let ((anon0_correct@@19  (=> (= (ControlFlow 0 29964) 23771) anon0$1_correct@@19)))
anon0_correct@@19))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 29964)))
(get-value ((ControlFlow 0 23771)))
(get-value ((ControlFlow 0 23763)))
(get-value ((ControlFlow 0 23765)))
(get-value ((ControlFlow 0 23817)))
(assert (not (= (ControlFlow 0 23817) (- 30133))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@18 () Bool)
(declare-fun inline$$MulU8$0$dst@2 () Int)
(declare-fun _$t0@@19 () Int)
(declare-fun _$t1@@15 () Int)
(declare-fun $abort_code@1@@18 () Int)
(declare-fun inline$$MulU8$0$dst@0 () Int)
(declare-fun inline$$MulU8$0$dst@1 () Int)
(declare-fun $abort_code@0@@18 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u8_mul$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 30171) (let ((anon4_Else_correct@@15  (=> (not $abort_flag@0@@18) (=> (and (= inline$$MulU8$0$dst@2 inline$$MulU8$0$dst@2) (= (ControlFlow 0 24084) (- 0 30367))) (not (> (* _$t0@@19 _$t1@@15) $MAX_U8))))))
(let ((anon4_Then_correct@@15  (=> $abort_flag@0@@18 (=> (and (= $abort_code@1@@18 $abort_code@1@@18) (= (ControlFlow 0 24114) (- 0 30340))) (> (* _$t0@@19 _$t1@@15) $MAX_U8)))))
(let ((inline$$MulU8$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@18 true) (=> (and (= $abort_code@1@@18 $EXEC_FAILURE_CODE) (= inline$$MulU8$0$dst@2 inline$$MulU8$0$dst@0)) (and (=> (= (ControlFlow 0 24046) 24114) anon4_Then_correct@@15) (=> (= (ControlFlow 0 24046) 24084) anon4_Else_correct@@15))))))
(let ((inline$$MulU8$0$anon3_Then_correct  (=> (and (> (* _$t0@@19 _$t1@@15) $MAX_U8) (= (ControlFlow 0 24044) 24046)) inline$$MulU8$0$anon3_Then$1_correct)))
(let ((inline$$MulU8$0$anon3_Else_correct  (=> (>= $MAX_U8 (* _$t0@@19 _$t1@@15)) (=> (and (and (= inline$$MulU8$0$dst@1 (* _$t0@@19 _$t1@@15)) (= $abort_flag@0@@18 false)) (and (= $abort_code@1@@18 $abort_code@0@@18) (= inline$$MulU8$0$dst@2 inline$$MulU8$0$dst@1))) (and (=> (= (ControlFlow 0 23992) 24114) anon4_Then_correct@@15) (=> (= (ControlFlow 0 23992) 24084) anon4_Else_correct@@15))))))
(let ((anon0$1_correct@@20  (=> (and (and (|$IsValid'u8'| _$t0@@19) (|$IsValid'u8'| _$t1@@15)) (and (= _$t0@@19 _$t0@@19) (= _$t1@@15 _$t1@@15))) (and (=> (= (ControlFlow 0 24052) 24044) inline$$MulU8$0$anon3_Then_correct) (=> (= (ControlFlow 0 24052) 23992) inline$$MulU8$0$anon3_Else_correct)))))
(let ((anon0_correct@@20  (=> (= (ControlFlow 0 30171) 24052) anon0$1_correct@@20)))
anon0_correct@@20))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@19 () Bool)
(declare-fun inline$$MulU8$0$dst@2@@0 () Int)
(declare-fun $abort_code@1@@19 () Int)
(declare-fun inline$$MulU8$0$dst@0@@0 () Int)
(declare-fun _$t0@@20 () Int)
(declare-fun _$t1@@16 () Int)
(declare-fun inline$$MulU8$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@19 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u8_mul_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 30389) (let ((anon4_Else_correct@@16  (=> (not $abort_flag@0@@19) (=> (and (= inline$$MulU8$0$dst@2@@0 inline$$MulU8$0$dst@2@@0) (= (ControlFlow 0 24373) (- 0 30579))) (not false)))))
(let ((anon4_Then_correct@@16  (=> $abort_flag@0@@19 (=> (and (= $abort_code@1@@19 $abort_code@1@@19) (= (ControlFlow 0 24395) (- 0 30558))) false))))
(let ((inline$$MulU8$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@19 true) (=> (and (= $abort_code@1@@19 $EXEC_FAILURE_CODE) (= inline$$MulU8$0$dst@2@@0 inline$$MulU8$0$dst@0@@0)) (and (=> (= (ControlFlow 0 24343) 24395) anon4_Then_correct@@16) (=> (= (ControlFlow 0 24343) 24373) anon4_Else_correct@@16))))))
(let ((inline$$MulU8$0$anon3_Then_correct@@0  (=> (and (> (* _$t0@@20 _$t1@@16) $MAX_U8) (= (ControlFlow 0 24341) 24343)) inline$$MulU8$0$anon3_Then$1_correct@@0)))
(let ((inline$$MulU8$0$anon3_Else_correct@@0  (=> (>= $MAX_U8 (* _$t0@@20 _$t1@@16)) (=> (and (and (= inline$$MulU8$0$dst@1@@0 (* _$t0@@20 _$t1@@16)) (= $abort_flag@0@@19 false)) (and (= $abort_code@1@@19 $abort_code@0@@19) (= inline$$MulU8$0$dst@2@@0 inline$$MulU8$0$dst@1@@0))) (and (=> (= (ControlFlow 0 24289) 24395) anon4_Then_correct@@16) (=> (= (ControlFlow 0 24289) 24373) anon4_Else_correct@@16))))))
(let ((anon0$1_correct@@21  (=> (and (and (|$IsValid'u8'| _$t0@@20) (|$IsValid'u8'| _$t1@@16)) (and (= _$t0@@20 _$t0@@20) (= _$t1@@16 _$t1@@16))) (and (=> (= (ControlFlow 0 24349) 24341) inline$$MulU8$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 24349) 24289) inline$$MulU8$0$anon3_Else_correct@@0)))))
(let ((anon0_correct@@21  (=> (= (ControlFlow 0 30389) 24349) anon0$1_correct@@21)))
anon0_correct@@21))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 30389)))
(get-value ((ControlFlow 0 24349)))
(get-value ((ControlFlow 0 24341)))
(get-value ((ControlFlow 0 24343)))
(get-value ((ControlFlow 0 24395)))
(assert (not (= (ControlFlow 0 24395) (- 30558))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@20 () Bool)
(declare-fun inline$$Sub$0$dst@2 () Int)
(declare-fun $abort_code@1@@20 () Int)
(declare-fun inline$$Sub$0$dst@0 () Int)
(declare-fun inline$$Sub$0$dst@1 () Int)
(declare-fun $abort_code@0@@20 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_underflow$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 30594) (let ((anon4_Else_correct@@17  (=> (not $abort_flag@0@@20) (=> (and (= inline$$Sub$0$dst@2 inline$$Sub$0$dst@2) (= (ControlFlow 0 24626) (- 0 30766))) (not true)))))
(let ((anon4_Then_correct@@17  (=> $abort_flag@0@@20 (=> (and (= $abort_code@1@@20 $abort_code@1@@20) (= (ControlFlow 0 24648) (- 0 30745))) true))))
(let ((inline$$Sub$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@20 true) (=> (and (= $abort_code@1@@20 $EXEC_FAILURE_CODE) (= inline$$Sub$0$dst@2 inline$$Sub$0$dst@0)) (and (=> (= (ControlFlow 0 24596) 24648) anon4_Then_correct@@17) (=> (= (ControlFlow 0 24596) 24626) anon4_Else_correct@@17))))))
(let ((inline$$Sub$0$anon3_Then_correct  (=> (and (< 0 1) (= (ControlFlow 0 24594) 24596)) inline$$Sub$0$anon3_Then$1_correct)))
(let ((inline$$Sub$0$anon3_Else_correct  (=> (<= 1 0) (=> (and (and (= inline$$Sub$0$dst@1 (- 0 1)) (= $abort_flag@0@@20 false)) (and (= $abort_code@1@@20 $abort_code@0@@20) (= inline$$Sub$0$dst@2 inline$$Sub$0$dst@1))) (and (=> (= (ControlFlow 0 24546) 24648) anon4_Then_correct@@17) (=> (= (ControlFlow 0 24546) 24626) anon4_Else_correct@@17))))))
(let ((anon0$1_correct@@22  (=> (and (|$IsValid'u64'| 0) (|$IsValid'u64'| 1)) (and (=> (= (ControlFlow 0 24602) 24594) inline$$Sub$0$anon3_Then_correct) (=> (= (ControlFlow 0 24602) 24546) inline$$Sub$0$anon3_Else_correct)))))
(let ((anon0_correct@@22  (=> (= (ControlFlow 0 30594) 24602) anon0$1_correct@@22)))
anon0_correct@@22))))))))
))
(check-sat)
(pop 1)
; Valid
