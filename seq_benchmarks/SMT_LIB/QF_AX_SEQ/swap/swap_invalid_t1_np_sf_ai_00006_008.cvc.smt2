(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_101 () (Seq Element))
(declare-fun a_103 () (Seq Element))
(declare-fun a_105 () (Seq Element))
(declare-fun a_107 () (Seq Element))
(declare-fun a_109 () (Seq Element))
(declare-fun a_111 () (Seq Element))
(declare-fun a_67 () (Seq Element))
(declare-fun a_69 () (Seq Element))
(declare-fun a_71 () (Seq Element))
(declare-fun a_73 () (Seq Element))
(declare-fun a_75 () (Seq Element))
(declare-fun a_77 () (Seq Element))
(declare-fun a_79 () (Seq Element))
(declare-fun a_81 () (Seq Element))
(declare-fun a_83 () (Seq Element))
(declare-fun a_85 () (Seq Element))
(declare-fun a_87 () (Seq Element))
(declare-fun a_89 () (Seq Element))
(declare-fun a_90 () (Seq Element))
(declare-fun a_91 () (Seq Element))
(declare-fun a_93 () (Seq Element))
(declare-fun a_95 () (Seq Element))
(declare-fun a_97 () (Seq Element))
(declare-fun a_99 () (Seq Element))
(declare-fun e_100 () Element)
(declare-fun e_102 () Element)
(declare-fun e_104 () Element)
(declare-fun e_106 () Element)
(declare-fun e_108 () Element)
(declare-fun e_110 () Element)
(declare-fun e_66 () Element)
(declare-fun e_68 () Element)
(declare-fun e_70 () Element)
(declare-fun e_72 () Element)
(declare-fun e_74 () Element)
(declare-fun e_76 () Element)
(declare-fun e_78 () Element)
(declare-fun e_80 () Element)
(declare-fun e_82 () Element)
(declare-fun e_84 () Element)
(declare-fun e_86 () Element)
(declare-fun e_88 () Element)
(declare-fun e_92 () Element)
(declare-fun e_94 () Element)
(declare-fun e_96 () Element)
(declare-fun e_98 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(assert (= a_101 (seq.update a_99 i0 (seq.unit e_100))))
(assert (= a_103 (seq.update a_101 i2 (seq.unit e_102))))
(assert (= a_105 (seq.update a_103 i3 (seq.unit e_104))))
(assert (= a_107 (seq.update a_105 i4 (seq.unit e_106))))
(assert (= a_109 (seq.update a_107 i5 (seq.unit e_108))))
(assert (= a_111 (seq.update a_109 i2 (seq.unit e_110))))
(assert (= a_67 (seq.update a1 i1 (seq.unit e_66))))
(assert (= a_69 (seq.update a_67 i0 (seq.unit e_68))))
(assert (= a_71 (seq.update a_69 i4 (seq.unit e_70))))
(assert (= a_73 (seq.update a_71 i5 (seq.unit e_72))))
(assert (= a_75 (seq.update a_73 i2 (seq.unit e_74))))
(assert (= a_77 (seq.update a_75 i4 (seq.unit e_76))))
(assert (= a_79 (seq.update a_77 i0 (seq.unit e_78))))
(assert (= a_81 (seq.update a_79 i2 (seq.unit e_80))))
(assert (= a_83 (seq.update a_81 i4 (seq.unit e_82))))
(assert (= a_85 (seq.update a_83 i3 (seq.unit e_84))))
(assert (= a_87 (seq.update a_85 i1 (seq.unit e_86))))
(assert (= a_89 (seq.update a_87 i5 (seq.unit e_88))))
(assert (= a_90 (seq.update a1 i0 (seq.unit e_68))))
(assert (= a_91 (seq.update a_90 i1 (seq.unit e_66))))
(assert (= a_93 (seq.update a_91 i4 (seq.unit e_92))))
(assert (= a_95 (seq.update a_93 i5 (seq.unit e_94))))
(assert (= a_97 (seq.update a_95 i4 (seq.unit e_96))))
(assert (= a_99 (seq.update a_97 i2 (seq.unit e_98))))
(assert (= e_100 (seq.nth a_99 i2)))
(assert (= e_102 (seq.nth a_99 i0)))
(assert (= e_104 (seq.nth a_103 i4)))
(assert (= e_106 (seq.nth a_103 i3)))
(assert (= e_108 (seq.nth a_107 i2)))
(assert (= e_110 (seq.nth a_107 i5)))
(assert (= e_66 (seq.nth a1 i0)))
(assert (= e_68 (seq.nth a1 i1)))
(assert (= e_70 (seq.nth a_69 i5)))
(assert (= e_72 (seq.nth a_69 i4)))
(assert (= e_74 (seq.nth a_73 i4)))
(assert (= e_76 (seq.nth a_73 i2)))
(assert (= e_78 (seq.nth a_77 i2)))
(assert (= e_80 (seq.nth a_77 i0)))
(assert (= e_82 (seq.nth a_81 i3)))
(assert (= e_84 (seq.nth a_81 i4)))
(assert (= e_86 (seq.nth a_85 i5)))
(assert (= e_88 (seq.nth a_85 i1)))
(assert (= e_92 (seq.nth a_91 i5)))
(assert (= e_94 (seq.nth a_91 i4)))
(assert (= e_96 (seq.nth a_95 i2)))
(assert (= e_98 (seq.nth a_95 i4)))
(assert (not (= a_89 a_111)))
(check-sat)
(exit)
