(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :strings-exp true)
(set-logic ALL)
; done setting options


(declare-datatypes ((T@$Location 0)) ((($Global (|a#$Global| Int) ) ($Local (|i#$Local| Int) ) ($Param (|i#$Param| Int) ) ) ))
(declare-datatypes ((T@$Mutation_3430 0)) ((($Mutation_3430 (|l#$Mutation_3430| T@$Location) (|p#$Mutation_3430| (Seq Int)) (|v#$Mutation_3430| Int) ) ) ))
(declare-datatypes ((T@$Mutation_8682 0)) ((($Mutation_8682 (|l#$Mutation_8682| T@$Location) (|p#$Mutation_8682| (Seq Int)) (|v#$Mutation_8682| (Seq Int)) ) ) ))
(declare-datatypes ((T@$Range 0)) ((($Range (|lb#$Range| Int) (|ub#$Range| Int) ) ) ))
(declare-fun $MAX_U8 () Int)
(declare-fun $MAX_U64 () Int)
(declare-fun $MAX_U128 () Int)
(declare-fun |$IsValid'u8'| (Int) Bool)
(declare-fun |$IsValid'u64'| (Int) Bool)
(declare-fun |$IsValid'u128'| (Int) Bool)
(declare-fun |$IsValid'num'| (Int) Bool)
(declare-fun |$IsValid'address'| (Int) Bool)
(declare-fun $InRange (T@$Range Int) Bool)
(declare-sort |T@[Int]Bool| 0)
(declare-fun $ConstMemoryDomain (Bool) |T@[Int]Bool|)
(declare-fun |lambda#0| (Bool) |T@[Int]Bool|)
(declare-fun $EXEC_FAILURE_CODE () Int)
(declare-fun $shl (Int Int) Int)
(declare-fun $shr (Int Int) Int)
(declare-fun |$IsValid'vec'u8''| ((Seq Int)) Bool)
(declare-fun |$IndexOfVec'u8'| ((Seq Int) Int) Int)
(declare-fun $1_Hash_sha2 ((Seq Int)) (Seq Int))
(declare-fun $1_Hash_sha3 ((Seq Int)) (Seq Int))
(declare-fun $1_Signature_$ed25519_validate_pubkey ((Seq Int)) Bool)
(declare-fun $1_Signature_$ed25519_verify ((Seq Int) (Seq Int) (Seq Int)) Bool)
(declare-fun ReverseVec_3283 ((Seq Int)) (Seq Int))
(declare-fun |Select__T@[Int]Bool_| (|T@[Int]Bool| Int) Bool)
(assert (= $MAX_U8 255))
(assert (= $MAX_U64 18446744073709551615))
(assert (= $MAX_U128 340282366920938463463374607431768211455))
(assert (forall ((v Int) ) (! (= (|$IsValid'u8'| v)  (and (>= v 0) (<= v $MAX_U8)))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.160:23|
 :skolemid |4|
 :pattern ( (|$IsValid'u8'| v))
)))
(assert (forall ((v@@0 Int) ) (! (= (|$IsValid'u64'| v@@0)  (and (>= v@@0 0) (<= v@@0 $MAX_U64)))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.164:24|
 :skolemid |5|
 :pattern ( (|$IsValid'u64'| v@@0))
)))
(assert (forall ((v@@1 Int) ) (! (= (|$IsValid'u128'| v@@1)  (and (>= v@@1 0) (<= v@@1 $MAX_U128)))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.168:25|
 :skolemid |6|
 :pattern ( (|$IsValid'u128'| v@@1))
)))
(assert (forall ((v@@2 Int) ) (! (= (|$IsValid'num'| v@@2) true)
 :qid |abortsifwithcodeSmtSeqcvc4bpl.172:24|
 :skolemid |7|
 :pattern ( (|$IsValid'num'| v@@2))
)))
(assert (forall ((v@@3 Int) ) (! (= (|$IsValid'address'| v@@3) (>= v@@3 0))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.176:28|
 :skolemid |8|
 :pattern ( (|$IsValid'address'| v@@3))
)))
(assert (forall ((r T@$Range) (i Int) ) (! (= ($InRange r i)  (and (<= (|lb#$Range| r) i) (< i (|ub#$Range| r))))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.186:19|
 :skolemid |9|
 :pattern ( ($InRange r i))
)))
(assert (= ($ConstMemoryDomain false) (|lambda#0| false)))
(assert (= ($ConstMemoryDomain true) (|lambda#0| true)))
(assert (= $EXEC_FAILURE_CODE (- 0 1)))
(assert (forall ((src1 Int) (p Int) ) (! (= ($shl src1 p) (ite (= p 8) (* src1 256) (ite (= p 16) (* src1 65536) (ite (= p 32) (* src1 4294967296) (ite (= p 64) (* src1 18446744073709551616) (- 0 1))))))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.452:15|
 :skolemid |13|
 :pattern ( ($shl src1 p))
)))
(assert (forall ((src1@@0 Int) (p@@0 Int) ) (! (= ($shr src1@@0 p@@0) (ite (= p@@0 8) (div src1@@0 256) (ite (= p@@0 16) (div src1@@0 65536) (ite (= p@@0 32) (div src1@@0 4294967296) (ite (= p@@0 64) (div src1@@0 18446744073709551616) (- 0 1))))))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.461:15|
 :skolemid |14|
 :pattern ( ($shr src1@@0 p@@0))
)))
(assert (forall ((v@@4 (Seq Int)) ) (! (= (|$IsValid'vec'u8''| v@@4)  (and (|$IsValid'u64'| (seq.len v@@4)) (forall ((i@@0 Int) ) (!  (=> (and (>= i@@0 0) (< i@@0 (seq.len v@@4))) (|$IsValid'u8'| (seq.nth v@@4 i@@0)))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.590:13|
 :skolemid |15|
))))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.588:28|
 :skolemid |16|
 :pattern ( (|$IsValid'vec'u8''| v@@4))
)))
(assert (forall ((v@@5 (Seq Int)) (e Int) ) (! (let ((i@@1 (|$IndexOfVec'u8'| v@@5 e)))
(ite  (not (exists ((i@@2 Int) ) (!  (and (and (|$IsValid'u64'| i@@2) (and (>= i@@2 0) (< i@@2 (seq.len v@@5)))) (= (seq.nth v@@5 i@@2) e))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.595:13|
 :skolemid |17|
))) (= i@@1 (- 0 1))  (and (and (and (|$IsValid'u64'| i@@1) (and (>= i@@1 0) (< i@@1 (seq.len v@@5)))) (= (seq.nth v@@5 i@@1) e)) (forall ((j Int) ) (!  (=> (and (and (|$IsValid'u64'| j) (>= j 0)) (< j i@@1)) (not (= (seq.nth v@@5 j) e)))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.603:17|
 :skolemid |18|
)))))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.599:15|
 :skolemid |19|
 :pattern ( (|$IndexOfVec'u8'| v@@5 e))
)))
(assert (forall ((v1 (Seq Int)) (v2 (Seq Int)) ) (! (= (= v1 v2) (= ($1_Hash_sha2 v1) ($1_Hash_sha2 v2)))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.776:15|
 :skolemid |20|
 :pattern ( ($1_Hash_sha2 v1) ($1_Hash_sha2 v2))
)))
(assert (forall ((v1@@0 (Seq Int)) (v2@@0 (Seq Int)) ) (! (= (= v1@@0 v2@@0) (= ($1_Hash_sha3 v1@@0) ($1_Hash_sha3 v2@@0)))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.792:15|
 :skolemid |21|
 :pattern ( ($1_Hash_sha3 v1@@0) ($1_Hash_sha3 v2@@0))
)))
(assert (forall ((k1 (Seq Int)) (k2 (Seq Int)) ) (!  (=> (= k1 k2) (= ($1_Signature_$ed25519_validate_pubkey k1) ($1_Signature_$ed25519_validate_pubkey k2)))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.839:15|
 :skolemid |22|
 :pattern ( ($1_Signature_$ed25519_validate_pubkey k1) ($1_Signature_$ed25519_validate_pubkey k2))
)))
(assert (forall ((s1 (Seq Int)) (s2 (Seq Int)) (k1@@0 (Seq Int)) (k2@@0 (Seq Int)) (m1 (Seq Int)) (m2 (Seq Int)) ) (!  (=> (and (and (= s1 s2) (= k1@@0 k2@@0)) (= m1 m2)) (= ($1_Signature_$ed25519_verify s1 k1@@0 m1) ($1_Signature_$ed25519_verify s2 k2@@0 m2)))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.842:15|
 :skolemid |23|
 :pattern ( ($1_Signature_$ed25519_verify s1 k1@@0 m1) ($1_Signature_$ed25519_verify s2 k2@@0 m2))
)))
(assert (forall ((v@@6 (Seq Int)) ) (! (let ((r@@0 (ReverseVec_3283 v@@6)))
 (and (= (seq.len r@@0) (seq.len v@@6)) (forall ((i@@3 Int) ) (!  (=> (and (>= i@@3 0) (< i@@3 (seq.len r@@0))) (= (seq.nth r@@0 i@@3) (seq.nth v@@6 (- (- (seq.len v@@6) i@@3) 1))))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.67:18|
 :skolemid |0|
 :pattern ( (seq.nth r@@0 i@@3))
))))
 :qid |abortsifwithcodeSmtSeqcvc4bpl.64:32|
 :skolemid |1|
 :pattern ( (ReverseVec_3283 v@@6))
)))
(assert (forall ((|l#0| Bool) (i@@4 Int) ) (! (= (|Select__T@[Int]Bool_| (|lambda#0| |l#0|) i@@4) |l#0|)
 :qid |abortsifwithcodeSmtSeqcvc4bpl.245:54|
 :skolemid |24|
 :pattern ( (|Select__T@[Int]Bool_| (|lambda#0| |l#0|) i@@4))
)))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _$t0 () Int)
(declare-fun $t4@0 () Int)
(declare-fun $t6@0 () Bool)
(declare-fun $t2@0 () Bool)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIfWithCode_aborts_if_with_code_mixed$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 14533) (let ((L7_correct  (and (=> (= (ControlFlow 0 12508) (- 0 14698)) (or (= _$t0 1) (= _$t0 2))) (=> (or (= _$t0 1) (= _$t0 2)) (=> (= (ControlFlow 0 12508) (- 0 14710)) (or (= _$t0 1) (and (= _$t0 2) (= 2 $t4@0))))))))
(let ((anon11_Then_correct  (=> $t6@0 (=> (and (and (|$IsValid'u64'| 2) (= 2 2)) (and (= $t4@0 2) (= (ControlFlow 0 12464) 12508))) L7_correct))))
(let ((anon10_Then_correct  (=> $t2@0 (=> (and (and (|$IsValid'u64'| 1) (= 1 1)) (and (= $t4@0 1) (= (ControlFlow 0 12528) 12508))) L7_correct))))
(let ((anon11_Else_correct  (=> (not $t6@0) (and (=> (= (ControlFlow 0 12444) (- 0 14669)) (not (= _$t0 1))) (=> (not (= _$t0 1)) (=> (= (ControlFlow 0 12444) (- 0 14679)) (not (= _$t0 2))))))))
(let ((anon10_Else_correct  (=> (not $t2@0) (=> (and (|$IsValid'u64'| 2) (= $t6@0 (= _$t0 2))) (and (=> (= (ControlFlow 0 12416) 12464) anon11_Then_correct) (=> (= (ControlFlow 0 12416) 12444) anon11_Else_correct))))))
(let ((anon0$1_correct  (=> (and (and (|$IsValid'u64'| _$t0) (= _$t0 _$t0)) (and (|$IsValid'u64'| 1) (= $t2@0 (= _$t0 1)))) (and (=> (= (ControlFlow 0 12398) 12528) anon10_Then_correct) (=> (= (ControlFlow 0 12398) 12416) anon10_Else_correct)))))
(let ((anon0_correct  (=> (= (ControlFlow 0 14533) 12398) anon0$1_correct)))
anon0_correct))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun _$t0@@0 () Int)
(declare-fun $t4@0@@0 () Int)
(declare-fun $t6@0@@0 () Bool)
(declare-fun $t2@0@@0 () Bool)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIfWithCode_aborts_if_with_code_mixed_invalid$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 14754) (let ((L7_correct@@0  (and (=> (= (ControlFlow 0 12720) (- 0 14919)) (or (= _$t0@@0 1) (= _$t0@@0 2))) (=> (or (= _$t0@@0 1) (= _$t0@@0 2)) (=> (= (ControlFlow 0 12720) (- 0 14931)) (or (= _$t0@@0 1) (and (= _$t0@@0 2) (= 1 $t4@0@@0))))))))
(let ((anon11_Then_correct@@0  (=> $t6@0@@0 (=> (and (and (|$IsValid'u64'| 2) (= 2 2)) (and (= $t4@0@@0 2) (= (ControlFlow 0 12676) 12720))) L7_correct@@0))))
(let ((anon10_Then_correct@@0  (=> $t2@0@@0 (=> (and (and (|$IsValid'u64'| 1) (= 1 1)) (and (= $t4@0@@0 1) (= (ControlFlow 0 12740) 12720))) L7_correct@@0))))
(let ((anon11_Else_correct@@0  (=> (not $t6@0@@0) (and (=> (= (ControlFlow 0 12656) (- 0 14890)) (not (= _$t0@@0 1))) (=> (not (= _$t0@@0 1)) (=> (= (ControlFlow 0 12656) (- 0 14900)) (not (= _$t0@@0 2))))))))
(let ((anon10_Else_correct@@0  (=> (not $t2@0@@0) (=> (and (|$IsValid'u64'| 2) (= $t6@0@@0 (= _$t0@@0 2))) (and (=> (= (ControlFlow 0 12628) 12676) anon11_Then_correct@@0) (=> (= (ControlFlow 0 12628) 12656) anon11_Else_correct@@0))))))
(let ((anon0$1_correct@@0  (=> (and (and (|$IsValid'u64'| _$t0@@0) (= _$t0@@0 _$t0@@0)) (and (|$IsValid'u64'| 1) (= $t2@0@@0 (= _$t0@@0 1)))) (and (=> (= (ControlFlow 0 12610) 12740) anon10_Then_correct@@0) (=> (= (ControlFlow 0 12610) 12628) anon10_Else_correct@@0)))))
(let ((anon0_correct@@0  (=> (= (ControlFlow 0 14754) 12610) anon0$1_correct@@0)))
anon0_correct@@0))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 14754)))
(get-value ((ControlFlow 0 12610)))
(get-value ((ControlFlow 0 12628)))
(get-value ((ControlFlow 0 12676)))
(get-value ((ControlFlow 0 12720)))
(assert (not (= (ControlFlow 0 12720) (- 14931))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $t4@0@@1 () Int)
(declare-fun $t6@0@@1 () Bool)
(declare-fun $t2@0@@1 () Bool)
(declare-fun _$t0@@1 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIfWithCode_aborts_with$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 14963) (let ((L7_correct@@1  (=> (= (ControlFlow 0 12890) (- 0 15108)) (or (= 1 $t4@0@@1) (= 2 $t4@0@@1)))))
(let ((anon10_Then_correct@@1  (=> $t6@0@@1 (=> (and (and (|$IsValid'u64'| 2) (= 2 2)) (and (= $t4@0@@1 2) (= (ControlFlow 0 12868) 12890))) L7_correct@@1))))
(let ((anon9_Then_correct  (=> $t2@0@@1 (=> (and (and (|$IsValid'u64'| 1) (= 1 1)) (and (= $t4@0@@1 1) (= (ControlFlow 0 12910) 12890))) L7_correct@@1))))
(let ((anon10_Else_correct@@1 true))
(let ((anon9_Else_correct  (=> (not $t2@0@@1) (=> (and (|$IsValid'u64'| 2) (= $t6@0@@1 (= _$t0@@1 2))) (and (=> (= (ControlFlow 0 12840) 12868) anon10_Then_correct@@1) (=> (= (ControlFlow 0 12840) 12848) anon10_Else_correct@@1))))))
(let ((anon0$1_correct@@1  (=> (and (and (|$IsValid'u64'| _$t0@@1) (= _$t0@@1 _$t0@@1)) (and (|$IsValid'u64'| 1) (= $t2@0@@1 (= _$t0@@1 1)))) (and (=> (= (ControlFlow 0 12822) 12910) anon9_Then_correct) (=> (= (ControlFlow 0 12822) 12840) anon9_Else_correct)))))
(let ((anon0_correct@@1  (=> (= (ControlFlow 0 14963) 12822) anon0$1_correct@@1)))
anon0_correct@@1))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $t4@0@@2 () Int)
(declare-fun $t6@0@@2 () Bool)
(declare-fun $t2@0@@2 () Bool)
(declare-fun _$t0@@2 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIfWithCode_aborts_with_invalid$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 15133) (let ((L7_correct@@2  (=> (= (ControlFlow 0 13060) (- 0 15278)) (or (= 1 $t4@0@@2) (= 3 $t4@0@@2)))))
(let ((anon10_Then_correct@@2  (=> $t6@0@@2 (=> (and (and (|$IsValid'u64'| 2) (= 2 2)) (and (= $t4@0@@2 2) (= (ControlFlow 0 13038) 13060))) L7_correct@@2))))
(let ((anon9_Then_correct@@0  (=> $t2@0@@2 (=> (and (and (|$IsValid'u64'| 1) (= 1 1)) (and (= $t4@0@@2 1) (= (ControlFlow 0 13080) 13060))) L7_correct@@2))))
(let ((anon10_Else_correct@@2 true))
(let ((anon9_Else_correct@@0  (=> (not $t2@0@@2) (=> (and (|$IsValid'u64'| 2) (= $t6@0@@2 (= _$t0@@2 2))) (and (=> (= (ControlFlow 0 13010) 13038) anon10_Then_correct@@2) (=> (= (ControlFlow 0 13010) 13018) anon10_Else_correct@@2))))))
(let ((anon0$1_correct@@2  (=> (and (and (|$IsValid'u64'| _$t0@@2) (= _$t0@@2 _$t0@@2)) (and (|$IsValid'u64'| 1) (= $t2@0@@2 (= _$t0@@2 1)))) (and (=> (= (ControlFlow 0 12992) 13080) anon9_Then_correct@@0) (=> (= (ControlFlow 0 12992) 13010) anon9_Else_correct@@0)))))
(let ((anon0_correct@@2  (=> (= (ControlFlow 0 15133) 12992) anon0$1_correct@@2)))
anon0_correct@@2))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 15133)))
(get-value ((ControlFlow 0 12992)))
(get-value ((ControlFlow 0 13010)))
(get-value ((ControlFlow 0 13038)))
(get-value ((ControlFlow 0 13060)))
(assert (not (= (ControlFlow 0 13060) (- 15278))))
(check-sat)
(pop 1)
; Invalid
(declare-fun _$t0@@3 () Int)
(declare-fun $t4@0@@3 () Int)
(declare-fun $t6@0@@3 () Bool)
(declare-fun $t2@0@@3 () Bool)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIfWithCode_aborts_with_mixed$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 15303) (let ((L7_correct@@3  (=> (= (ControlFlow 0 13248) (- 0 15458)) (or (and (= _$t0@@3 1) (= 1 $t4@0@@3)) (= 2 $t4@0@@3)))))
(let ((anon11_Then_correct@@1  (=> $t6@0@@3 (=> (and (and (|$IsValid'u64'| 2) (= 2 2)) (and (= $t4@0@@3 2) (= (ControlFlow 0 13218) 13248))) L7_correct@@3))))
(let ((anon10_Then_correct@@3  (=> $t2@0@@3 (=> (and (and (|$IsValid'u64'| 1) (= 1 1)) (and (= $t4@0@@3 1) (= (ControlFlow 0 13268) 13248))) L7_correct@@3))))
(let ((anon11_Else_correct@@1  (=> (and (not $t6@0@@3) (= (ControlFlow 0 13198) (- 0 15439))) (not (= _$t0@@3 1)))))
(let ((anon10_Else_correct@@3  (=> (not $t2@0@@3) (=> (and (|$IsValid'u64'| 2) (= $t6@0@@3 (= _$t0@@3 2))) (and (=> (= (ControlFlow 0 13180) 13218) anon11_Then_correct@@1) (=> (= (ControlFlow 0 13180) 13198) anon11_Else_correct@@1))))))
(let ((anon0$1_correct@@3  (=> (and (and (|$IsValid'u64'| _$t0@@3) (= _$t0@@3 _$t0@@3)) (and (|$IsValid'u64'| 1) (= $t2@0@@3 (= _$t0@@3 1)))) (and (=> (= (ControlFlow 0 13162) 13268) anon10_Then_correct@@3) (=> (= (ControlFlow 0 13162) 13180) anon10_Else_correct@@3)))))
(let ((anon0_correct@@3  (=> (= (ControlFlow 0 15303) 13162) anon0$1_correct@@3)))
anon0_correct@@3))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun _$t0@@4 () Int)
(declare-fun $t4@0@@4 () Int)
(declare-fun $t6@0@@4 () Bool)
(declare-fun $t2@0@@4 () Bool)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIfWithCode_aborts_with_mixed_invalid$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 15490) (let ((L7_correct@@4  (=> (= (ControlFlow 0 13436) (- 0 15645)) (or (and (= _$t0@@4 1) (= 1 $t4@0@@4)) (= 2 $t4@0@@4)))))
(let ((anon11_Then_correct@@2  (=> $t6@0@@4 (=> (and (and (|$IsValid'u64'| 1) (= 1 1)) (and (= $t4@0@@4 1) (= (ControlFlow 0 13406) 13436))) L7_correct@@4))))
(let ((anon10_Then_correct@@4  (=> $t2@0@@4 (=> (and (and (|$IsValid'u64'| 1) (= 1 1)) (and (= $t4@0@@4 1) (= (ControlFlow 0 13456) 13436))) L7_correct@@4))))
(let ((anon11_Else_correct@@2  (=> (and (not $t6@0@@4) (= (ControlFlow 0 13386) (- 0 15626))) (not (= _$t0@@4 1)))))
(let ((anon10_Else_correct@@4  (=> (not $t2@0@@4) (=> (and (|$IsValid'u64'| 2) (= $t6@0@@4 (= _$t0@@4 2))) (and (=> (= (ControlFlow 0 13368) 13406) anon11_Then_correct@@2) (=> (= (ControlFlow 0 13368) 13386) anon11_Else_correct@@2))))))
(let ((anon0$1_correct@@4  (=> (and (and (|$IsValid'u64'| _$t0@@4) (= _$t0@@4 _$t0@@4)) (and (|$IsValid'u64'| 1) (= $t2@0@@4 (= _$t0@@4 1)))) (and (=> (= (ControlFlow 0 13350) 13456) anon10_Then_correct@@4) (=> (= (ControlFlow 0 13350) 13368) anon10_Else_correct@@4)))))
(let ((anon0_correct@@4  (=> (= (ControlFlow 0 15490) 13350) anon0$1_correct@@4)))
anon0_correct@@4))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 15490)))
(get-value ((ControlFlow 0 13350)))
(get-value ((ControlFlow 0 13368)))
(get-value ((ControlFlow 0 13406)))
(get-value ((ControlFlow 0 13436)))
(assert (not (= (ControlFlow 0 13436) (- 15645))))
(check-sat)
(pop 1)
; Invalid
(declare-fun _$t0@@5 () Int)
(declare-fun _$t1 () Int)
(declare-fun $t5@0 () Int)
(declare-fun $abort_flag@0 () Bool)
(declare-fun $abort_code@1 () Int)
(declare-fun $t7@0 () Bool)
(declare-fun $t3@0 () Bool)
(declare-fun inline$$AddU64$0$dst@2 () Int)
(declare-fun inline$$AddU64$0$dst@0 () Int)
(declare-fun inline$$AddU64$0$dst@1 () Int)
(declare-fun $abort_code@0 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIfWithCode_conditional_abort$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 15679) (let ((L7_correct@@5  (and (=> (= (ControlFlow 0 13893) (- 0 16007)) (or (or (= _$t0@@5 1) (= _$t1 2)) (> (+ _$t0@@5 _$t1) 18446744073709551615))) (=> (or (or (= _$t0@@5 1) (= _$t1 2)) (> (+ _$t0@@5 _$t1) 18446744073709551615)) (=> (= (ControlFlow 0 13893) (- 0 16029)) (or (or (and (= _$t0@@5 1) (= 2 $t5@0)) (and (= _$t1 2) (= 3 $t5@0))) (and (> (+ _$t0@@5 _$t1) 18446744073709551615) (= (- 0 1) $t5@0))))))))
(let ((anon14_Then_correct  (=> (and (and $abort_flag@0 (= $abort_code@1 $abort_code@1)) (and (= $t5@0 $abort_code@1) (= (ControlFlow 0 13807) 13893))) L7_correct@@5)))
(let ((anon13_Then_correct  (=> $t7@0 (=> (and (and (|$IsValid'u64'| 3) (= 3 3)) (and (= $t5@0 3) (= (ControlFlow 0 13913) 13893))) L7_correct@@5))))
(let ((anon12_Then_correct  (=> $t3@0 (=> (and (and (|$IsValid'u64'| 2) (= 2 2)) (and (= $t5@0 2) (= (ControlFlow 0 13933) 13893))) L7_correct@@5))))
(let ((anon14_Else_correct  (=> (and (not $abort_flag@0) (= inline$$AddU64$0$dst@2 inline$$AddU64$0$dst@2)) (and (=> (= (ControlFlow 0 13793) (- 0 15950)) (not (= _$t0@@5 1))) (=> (not (= _$t0@@5 1)) (and (=> (= (ControlFlow 0 13793) (- 0 15960)) (not (= _$t1 2))) (=> (not (= _$t1 2)) (and (=> (= (ControlFlow 0 13793) (- 0 15970)) (not (> (+ _$t0@@5 _$t1) 18446744073709551615))) (=> (not (> (+ _$t0@@5 _$t1) 18446744073709551615)) (=> (= (ControlFlow 0 13793) (- 0 15983)) (= inline$$AddU64$0$dst@2 (+ _$t0@@5 _$t1))))))))))))
(let ((inline$$AddU64$0$anon3_Then$1_correct  (=> (= $abort_flag@0 true) (=> (and (= $abort_code@1 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2 inline$$AddU64$0$dst@0)) (and (=> (= (ControlFlow 0 13723) 13807) anon14_Then_correct) (=> (= (ControlFlow 0 13723) 13793) anon14_Else_correct))))))
(let ((inline$$AddU64$0$anon3_Then_correct  (=> (and (> (+ _$t0@@5 _$t1) $MAX_U64) (= (ControlFlow 0 13721) 13723)) inline$$AddU64$0$anon3_Then$1_correct)))
(let ((inline$$AddU64$0$anon3_Else_correct  (=> (>= $MAX_U64 (+ _$t0@@5 _$t1)) (=> (and (and (= inline$$AddU64$0$dst@1 (+ _$t0@@5 _$t1)) (= $abort_flag@0 false)) (and (= $abort_code@1 $abort_code@0) (= inline$$AddU64$0$dst@2 inline$$AddU64$0$dst@1))) (and (=> (= (ControlFlow 0 13669) 13807) anon14_Then_correct) (=> (= (ControlFlow 0 13669) 13793) anon14_Else_correct))))))
(let ((anon13_Else_correct  (=> (not $t7@0) (and (=> (= (ControlFlow 0 13729) 13721) inline$$AddU64$0$anon3_Then_correct) (=> (= (ControlFlow 0 13729) 13669) inline$$AddU64$0$anon3_Else_correct)))))
(let ((anon12_Else_correct  (=> (not $t3@0) (=> (and (|$IsValid'u64'| 2) (= $t7@0 (= _$t1 2))) (and (=> (= (ControlFlow 0 13570) 13913) anon13_Then_correct) (=> (= (ControlFlow 0 13570) 13729) anon13_Else_correct))))))
(let ((anon0$1_correct@@5  (=> (and (|$IsValid'u64'| _$t0@@5) (|$IsValid'u64'| _$t1)) (=> (and (and (= _$t0@@5 _$t0@@5) (= _$t1 _$t1)) (and (|$IsValid'u64'| 1) (= $t3@0 (= _$t0@@5 1)))) (and (=> (= (ControlFlow 0 13552) 13933) anon12_Then_correct) (=> (= (ControlFlow 0 13552) 13570) anon12_Else_correct))))))
(let ((anon0_correct@@5  (=> (= (ControlFlow 0 15679) 13552) anon0$1_correct@@5)))
anon0_correct@@5)))))))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun _$t0@@6 () Int)
(declare-fun _$t1@@0 () Int)
(declare-fun $t5@0@@0 () Int)
(declare-fun $t7@0@@0 () Bool)
(declare-fun $t3@0@@0 () Bool)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIfWithCode_conditional_abort_invalid$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 16089) (let ((L7_correct@@6  (and (=> (= (ControlFlow 0 14163) (- 0 16286)) (or (= _$t0@@6 1) (= _$t1@@0 2))) (=> (or (= _$t0@@6 1) (= _$t1@@0 2)) (=> (= (ControlFlow 0 14163) (- 0 16298)) (or (and (= _$t0@@6 1) (= 1 $t5@0@@0)) (and (= _$t1@@0 2) (= 3 $t5@0@@0))))))))
(let ((anon11_Then_correct@@3  (=> $t7@0@@0 (=> (and (and (|$IsValid'u64'| 3) (= 3 3)) (and (= $t5@0@@0 3) (= (ControlFlow 0 14111) 14163))) L7_correct@@6))))
(let ((anon10_Then_correct@@5  (=> $t3@0@@0 (=> (and (and (|$IsValid'u64'| 2) (= 2 2)) (and (= $t5@0@@0 2) (= (ControlFlow 0 14183) 14163))) L7_correct@@6))))
(let ((anon11_Else_correct@@3  (=> (and (not $t7@0@@0) (= _$t0@@6 _$t0@@6)) (and (=> (= (ControlFlow 0 14091) (- 0 16248)) (not (= _$t0@@6 1))) (=> (not (= _$t0@@6 1)) (and (=> (= (ControlFlow 0 14091) (- 0 16258)) (not (= _$t1@@0 2))) (=> (not (= _$t1@@0 2)) (=> (= (ControlFlow 0 14091) (- 0 16268)) (= _$t0@@6 _$t0@@6)))))))))
(let ((anon10_Else_correct@@5  (=> (not $t3@0@@0) (=> (and (|$IsValid'u64'| 2) (= $t7@0@@0 (= _$t1@@0 2))) (and (=> (= (ControlFlow 0 14047) 14111) anon11_Then_correct@@3) (=> (= (ControlFlow 0 14047) 14091) anon11_Else_correct@@3))))))
(let ((anon0$1_correct@@6  (=> (and (|$IsValid'u64'| _$t0@@6) (|$IsValid'u64'| _$t1@@0)) (=> (and (and (= _$t0@@6 _$t0@@6) (= _$t1@@0 _$t1@@0)) (and (|$IsValid'u64'| 1) (= $t3@0@@0 (= _$t0@@6 1)))) (and (=> (= (ControlFlow 0 14029) 14183) anon10_Then_correct@@5) (=> (= (ControlFlow 0 14029) 14047) anon10_Else_correct@@5))))))
(let ((anon0_correct@@6  (=> (= (ControlFlow 0 16089) 14029) anon0$1_correct@@6)))
anon0_correct@@6))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 16089)))
(get-value ((ControlFlow 0 14029)))
(get-value ((ControlFlow 0 14183)))
(get-value ((ControlFlow 0 14163)))
(assert (not (= (ControlFlow 0 14163) (- 16298))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@0 () Bool)
(declare-fun inline$$Div$0$dst@2 () Int)
(declare-fun _$t0@@7 () Int)
(declare-fun $abort_code@1@@0 () Int)
(declare-fun inline$$Div$0$dst@0 () Int)
(declare-fun inline$$Div$0$dst@1 () Int)
(declare-fun $abort_code@0@@0 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIfWithCode_exec_failure_invalid$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 16338) (let ((anon4_Else_correct  (=> (and (not $abort_flag@0@@0) (= inline$$Div$0$dst@2 inline$$Div$0$dst@2)) (and (=> (= (ControlFlow 0 14440) (- 0 16535)) (not (= _$t0@@7 0))) (=> (not (= _$t0@@7 0)) (=> (= (ControlFlow 0 14440) (- 0 16545)) (= inline$$Div$0$dst@2 (div 10 _$t0@@7))))))))
(let ((anon4_Then_correct  (=> (and $abort_flag@0@@0 (= $abort_code@1@@0 $abort_code@1@@0)) (and (=> (= (ControlFlow 0 14480) (- 0 16499)) (= _$t0@@7 0)) (=> (= _$t0@@7 0) (=> (= (ControlFlow 0 14480) (- 0 16504)) (and (= _$t0@@7 0) (= 1 $abort_code@1@@0))))))))
(let ((inline$$Div$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@0 true) (=> (and (= $abort_code@1@@0 $EXEC_FAILURE_CODE) (= inline$$Div$0$dst@2 inline$$Div$0$dst@0)) (and (=> (= (ControlFlow 0 14394) 14480) anon4_Then_correct) (=> (= (ControlFlow 0 14394) 14440) anon4_Else_correct))))))
(let ((inline$$Div$0$anon3_Then_correct  (=> (and (= _$t0@@7 0) (= (ControlFlow 0 14392) 14394)) inline$$Div$0$anon3_Then$1_correct)))
(let ((inline$$Div$0$anon3_Else_correct  (=> (not (= _$t0@@7 0)) (=> (and (and (= inline$$Div$0$dst@1 (div 10 _$t0@@7)) (= $abort_flag@0@@0 false)) (and (= $abort_code@1@@0 $abort_code@0@@0) (= inline$$Div$0$dst@2 inline$$Div$0$dst@1))) (and (=> (= (ControlFlow 0 14344) 14480) anon4_Then_correct) (=> (= (ControlFlow 0 14344) 14440) anon4_Else_correct))))))
(let ((anon0$1_correct@@7  (=> (|$IsValid'u64'| _$t0@@7) (=> (and (= _$t0@@7 _$t0@@7) (|$IsValid'u64'| 10)) (and (=> (= (ControlFlow 0 14400) 14392) inline$$Div$0$anon3_Then_correct) (=> (= (ControlFlow 0 14400) 14344) inline$$Div$0$anon3_Else_correct))))))
(let ((anon0_correct@@7  (=> (= (ControlFlow 0 16338) 14400) anon0$1_correct@@7)))
anon0_correct@@7))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 16338)))
(get-value ((ControlFlow 0 14400)))
(get-value ((ControlFlow 0 14392)))
(get-value ((ControlFlow 0 14394)))
(get-value ((ControlFlow 0 14480)))
(assert (not (= (ControlFlow 0 14480) (- 16504))))
(check-sat)
(pop 1)
; Invalid
