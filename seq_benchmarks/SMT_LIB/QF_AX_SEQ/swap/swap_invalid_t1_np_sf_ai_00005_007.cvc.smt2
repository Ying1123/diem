(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_123 () (Seq Element))
(declare-fun a_125 () (Seq Element))
(declare-fun a_127 () (Seq Element))
(declare-fun a_129 () (Seq Element))
(declare-fun a_131 () (Seq Element))
(declare-fun a_133 () (Seq Element))
(declare-fun a_135 () (Seq Element))
(declare-fun a_137 () (Seq Element))
(declare-fun a_139 () (Seq Element))
(declare-fun a_141 () (Seq Element))
(declare-fun a_142 () (Seq Element))
(declare-fun a_143 () (Seq Element))
(declare-fun a_145 () (Seq Element))
(declare-fun a_147 () (Seq Element))
(declare-fun a_149 () (Seq Element))
(declare-fun a_151 () (Seq Element))
(declare-fun a_153 () (Seq Element))
(declare-fun a_155 () (Seq Element))
(declare-fun a_157 () (Seq Element))
(declare-fun a_158 () (Seq Element))
(declare-fun e_122 () Element)
(declare-fun e_124 () Element)
(declare-fun e_126 () Element)
(declare-fun e_128 () Element)
(declare-fun e_130 () Element)
(declare-fun e_132 () Element)
(declare-fun e_134 () Element)
(declare-fun e_136 () Element)
(declare-fun e_138 () Element)
(declare-fun e_140 () Element)
(declare-fun e_144 () Element)
(declare-fun e_146 () Element)
(declare-fun e_148 () Element)
(declare-fun e_150 () Element)
(declare-fun e_152 () Element)
(declare-fun e_154 () Element)
(declare-fun e_156 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(assert (= a_123 (seq.update a1 i4 (seq.unit e_122))))
(assert (= a_125 (seq.update a_123 i2 (seq.unit e_124))))
(assert (= a_127 (seq.update a_125 i0 (seq.unit e_126))))
(assert (= a_129 (seq.update a_127 i3 (seq.unit e_128))))
(assert (= a_131 (seq.update a_129 i2 (seq.unit e_130))))
(assert (= a_133 (seq.update a_131 i1 (seq.unit e_132))))
(assert (= a_135 (seq.update a_133 i4 (seq.unit e_134))))
(assert (= a_137 (seq.update a_135 i3 (seq.unit e_136))))
(assert (= a_139 (seq.update a_137 i3 (seq.unit e_138))))
(assert (= a_141 (seq.update a_139 i2 (seq.unit e_140))))
(assert (= a_142 (seq.update a1 i2 (seq.unit e_124))))
(assert (= a_143 (seq.update a_142 i4 (seq.unit e_122))))
(assert (= a_145 (seq.update a_143 i0 (seq.unit e_144))))
(assert (= a_147 (seq.update a_145 i3 (seq.unit e_146))))
(assert (= a_149 (seq.update a_147 i1 (seq.unit e_148))))
(assert (= a_151 (seq.update a_149 i2 (seq.unit e_150))))
(assert (= a_153 (seq.update a_151 i3 (seq.unit e_152))))
(assert (= a_155 (seq.update a_153 i4 (seq.unit e_154))))
(assert (= a_157 (seq.update a_155 i3 (seq.unit e_156))))
(assert (= a_158 (seq.update a_157 i3 (seq.unit e_156))))
(assert (= e_122 (seq.nth a1 i2)))
(assert (= e_124 (seq.nth a1 i4)))
(assert (= e_126 (seq.nth a_125 i3)))
(assert (= e_128 (seq.nth a_125 i0)))
(assert (= e_130 (seq.nth a_129 i1)))
(assert (= e_132 (seq.nth a_129 i2)))
(assert (= e_134 (seq.nth a_133 i3)))
(assert (= e_136 (seq.nth a_133 i4)))
(assert (= e_138 (seq.nth a_137 i2)))
(assert (= e_140 (seq.nth a_137 i3)))
(assert (= e_144 (seq.nth a_143 i3)))
(assert (= e_146 (seq.nth a_143 i0)))
(assert (= e_148 (seq.nth a_147 i2)))
(assert (= e_150 (seq.nth a_147 i1)))
(assert (= e_152 (seq.nth a_151 i4)))
(assert (= e_154 (seq.nth a_151 i3)))
(assert (= e_156 (seq.nth a_155 i3)))
(assert (not (= a_141 a_158)))
(check-sat)
(exit)
