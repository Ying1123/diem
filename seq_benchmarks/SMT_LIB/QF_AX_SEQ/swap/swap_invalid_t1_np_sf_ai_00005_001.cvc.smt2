(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_508 () (Seq Element))
(declare-fun a_509 () (Seq Element))
(declare-fun a_511 () (Seq Element))
(declare-fun a_512 () (Seq Element))
(declare-fun a_514 () (Seq Element))
(declare-fun a_516 () (Seq Element))
(declare-fun a_518 () (Seq Element))
(declare-fun a_520 () (Seq Element))
(declare-fun a_522 () (Seq Element))
(declare-fun a_524 () (Seq Element))
(declare-fun a_525 () (Seq Element))
(declare-fun a_527 () (Seq Element))
(declare-fun e_507 () Element)
(declare-fun e_510 () Element)
(declare-fun e_513 () Element)
(declare-fun e_515 () Element)
(declare-fun e_517 () Element)
(declare-fun e_519 () Element)
(declare-fun e_521 () Element)
(declare-fun e_523 () Element)
(declare-fun e_526 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(assert (= a_508 (seq.update a1 i1 (seq.unit e_507))))
(assert (= a_509 (seq.update a_508 i1 (seq.unit e_507))))
(assert (= a_511 (seq.update a_509 i3 (seq.unit e_510))))
(assert (= a_512 (seq.update a_511 i3 (seq.unit e_510))))
(assert (= a_514 (seq.update a_512 i2 (seq.unit e_513))))
(assert (= a_516 (seq.update a_514 i3 (seq.unit e_515))))
(assert (= a_518 (seq.update a_516 i3 (seq.unit e_517))))
(assert (= a_520 (seq.update a_518 i4 (seq.unit e_519))))
(assert (= a_522 (seq.update a_520 i3 (seq.unit e_521))))
(assert (= a_524 (seq.update a_522 i0 (seq.unit e_523))))
(assert (= a_525 (seq.update a_520 i4 (seq.unit e_521))))
(assert (= a_527 (seq.update a_525 i0 (seq.unit e_526))))
(assert (= e_507 (seq.nth a1 i1)))
(assert (= e_510 (seq.nth a_509 i3)))
(assert (= e_513 (seq.nth a_512 i3)))
(assert (= e_515 (seq.nth a_512 i2)))
(assert (= e_517 (seq.nth a_516 i4)))
(assert (= e_519 (seq.nth a_516 i3)))
(assert (= e_521 (seq.nth a_520 i0)))
(assert (= e_523 (seq.nth a_520 i3)))
(assert (= e_526 (seq.nth a_520 i4)))
(assert (not (= a_524 a_527)))
(check-sat)
(exit)
