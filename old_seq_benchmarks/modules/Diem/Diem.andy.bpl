
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for vectors, based on Z3 sequences.
//
// This version of vectors has extensional equality.
//
// This implementation works to some extend but has been so far been much slower/times out compared to
// non-extensional array versions, even though the later require stratified custom equality.
//
// Major issues seem to be:
//
// (a) UpdateVec, SwapVec etc. are slow. UpdateVec requires a ConcatVec of two SliceVec.
// (b) ReverseVec needs to be fully axiomatized with quantifiers which makes it infeasible
//     to work in practice.

type {:builtin "Seq"} Vec _;

function {:builtin "seq.empty"} EmptyVec<T>(): Vec T;

function {:builtin "seq.unit"} MakeVec1<T>(v: T): Vec T;

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    ConcatVec(MakeVec1(v1), MakeVec1(v2))
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    ConcatVec(MakeVec2(v1, v2), MakeVec1(v3))
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    ConcatVec(MakeVec3(v1, v2, v3), MakeVec1(v4))
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    ConcatVec(v, MakeVec1(elem))
}

function {:builtin "seq.nth"} ReadVec<T>(v: Vec T, i: int): T;

function {:builtin "seq.len"} LenVec<T>(v: Vec T): int;

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    LenVec(v) == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    SliceVec(v, 0, LenVec(v) - 1)
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    ConcatVec(SliceVec(v, 0, i), SliceVec(v, i + 1, LenVec(v)))
}

function {:builtin "seq.++"} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec3<T>(v1: Vec T, v2: Vec T, v3: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec4<T>(v1: Vec T, v2: Vec T, v3: Vec T, v4: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec5<T>(v1: Vec T, v2: Vec T, v3: Vec T, v4: Vec T, v5: Vec T): Vec T;

function {:inline} ReverseVec<T>(v: Vec T): Vec T;
axiom {:ctor "Vec"} (forall<T> v: Vec T:: {ReverseVec(v)}
        (var r := ReverseVec(v);
         LenVec(r) == LenVec(v) &&
         (forall i: int:: {ReadVec(r, i)} i >= 0 && i < LenVec(r) ==> ReadVec(r, i) == ReadVec(v, LenVec(v) - i - 1))));

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    ExtractVec(v, i, j - i)
}
/*private*/ function {:builtin "seq.extract"} ExtractVec<T>(v: Vec T, start: int, len: int): Vec T;

function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    ConcatVec3(SliceVec(v, 0, i), MakeVec1(elem), SliceVec(v, i + 1, LenVec(v)))
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    UpdateVec(UpdateVec(v, j, ReadVec(v, i)), i, ReadVec(v, j))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    ContainsSubVec(v, MakeVec1(e))
}
/*private*/ function {:builtin "seq.contains"} ContainsSubVec<T>(v: Vec T, sub: Vec T): bool;

function {:inline} IndexOfVec<T>(v: Vec T, e: T): int {
    IndexOfSubVec(v, MakeVec1(e))
}
/*private*/ function {:builtin "seq.indexof"} IndexOfSubVec<T>(v: Vec T, sub: Vec T): int;

function {:inline} InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

type {:datatype} Multiset _;
function {:constructor} Multiset<T>(v: [T]int, l: int): Multiset T;

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    l#Multiset(s)
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := l#Multiset(s);
    (var cnt := v#Multiset(s)[v];
    Multiset(v#Multiset(s)[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := l#Multiset(s1);
    (var len2 := l#Multiset(s2);
    Multiset((lambda v:T :: v#Multiset(s1)[v]-v#Multiset(s2)[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (l#Multiset(s) == 0) &&
    (forall v: T :: v#Multiset(s)[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (l#Multiset(s1) <= l#Multiset(s2)) &&
    (forall v: T :: v#Multiset(s1)[v] <= v#Multiset(s2)[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    v#Multiset(s)[v] > 0
}



// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;

type {:datatype} $Range;
function {:constructor} $Range(lb: int, ub: int): $Range;

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(lb#$Range(r)) &&  $IsValid'u64'(ub#$Range(r))
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   lb#$Range(r) <= i && i < ub#$Range(r)
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

type {:datatype} $Location;

// A global resource location within the statically known resource type's memory,
// where `a` is an address.
function {:constructor} $Global(a: int): $Location;

// A local location. `i` is the unique index of the local.
function {:constructor} $Local(i: int): $Location;

// The location of a reference outside of the verification scope, for example, a `&mut` parameter
// of the function being verified. References with these locations don't need to be written back
// when mutation ends.
function {:constructor} $Param(i: int): $Location;


// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
type {:datatype} $Mutation _;
function {:constructor} $Mutation<T>(l: $Location, p: Vec int, v: T): $Mutation T;

// Representation of memory for a given type.
type {:datatype} $Memory _;
function {:constructor} $Memory<T>(domain: [int]bool, contents: [int]T): $Memory T;

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    v#$Mutation(ref)
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(l#$Mutation(m), p#$Mutation(m), v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), offset), v)
}

// Return true of the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true of the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    l#$Mutation(m1) == l#$Mutation(m2)
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    is#$Global(l#$Mutation(m))
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    l#$Mutation(m) == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    a#$Global(l#$Mutation(m))
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    domain#$Memory(m)[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    contents#$Memory(m)[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(domain#$Memory(m)[a := true], contents#$Memory(m)[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := false], contents#$Memory(m))
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := domain#$Memory(s)[a]],
            contents#$Memory(m)[a := contents#$Memory(s)[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// Note that *not* inlining the shl/shr functions avoids timeouts. It appears that Z3 can reason
// better about this if it is an axiomatized function.
function $shl(src1: int, p: int): int {
    if p == 8 then src1 * 256
    else if p == 16 then src1 * 65536
    else if p == 32 then src1 * 4294967296
    else if p == 64 then src1 * 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

function $shr(src1: int, p: int): int {
    if p == 8 then src1 div 256
    else if p == 16 then src1 div 65536
    else if p == 32 then src1 div 4294967296
    else if p == 64 then src1 div 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

// TODO: fix this and $Shr to drop bits on overflow. Requires $Shl8, $Shl64, and $Shl128
procedure {:inline 1} $Shl(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shl(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shr(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, lb#$Range(r), ub#$Range(r))
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`


function {:inline} $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_KeyRotationCapability`


function {:inline} $IsEqual'vec'$1_DiemAccount_KeyRotationCapability''(v1: Vec ($1_DiemAccount_KeyRotationCapability), v2: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_KeyRotationCapability''(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): int;
axiom (forall v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability:: {$IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_KeyRotationCapability'() returns (v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), val: $1_DiemAccount_KeyRotationCapability) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), val: $1_DiemAccount_KeyRotationCapability): Vec ($1_DiemAccount_KeyRotationCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), other: Vec ($1_DiemAccount_KeyRotationCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int) returns (dst: $1_DiemAccount_KeyRotationCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_KeyRotationCapability), m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int, j: int): Vec ($1_DiemAccount_KeyRotationCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_WithdrawCapability`


function {:inline} $IsEqual'vec'$1_DiemAccount_WithdrawCapability''(v1: Vec ($1_DiemAccount_WithdrawCapability), v2: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_WithdrawCapability''(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): int;
axiom (forall v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability:: {$IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_WithdrawCapability'() returns (v: Vec ($1_DiemAccount_WithdrawCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), val: $1_DiemAccount_WithdrawCapability) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), val: $1_DiemAccount_WithdrawCapability): Vec ($1_DiemAccount_WithdrawCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), other: Vec ($1_DiemAccount_WithdrawCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int) returns (dst: $1_DiemAccount_WithdrawCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_WithdrawCapability), m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int, j: int): Vec ($1_DiemAccount_WithdrawCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemSystem_ValidatorInfo`


function {:inline} $IsEqual'vec'$1_DiemSystem_ValidatorInfo''(v1: Vec ($1_DiemSystem_ValidatorInfo), v2: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemSystem_ValidatorInfo''(v: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): int;
axiom (forall v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo:: {$IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e)}
    (var i := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
     if (!$ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemSystem_ValidatorInfo'() returns (v: Vec ($1_DiemSystem_ValidatorInfo)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), val: $1_DiemSystem_ValidatorInfo) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), val: $1_DiemSystem_ValidatorInfo): Vec ($1_DiemSystem_ValidatorInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), other: Vec ($1_DiemSystem_ValidatorInfo)) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int) returns (dst: $1_DiemSystem_ValidatorInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), index: int)
returns (dst: $Mutation ($1_DiemSystem_ValidatorInfo), m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int, j: int): Vec ($1_DiemSystem_ValidatorInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var len: int;
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res: bool)  {
    res := $ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'#0'`


function {:inline} $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''(v1: Vec ($1_Diem_PreburnWithMetadata'#0'), v2: Vec ($1_Diem_PreburnWithMetadata'#0')): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'#0''(): Vec ($1_Diem_PreburnWithMetadata'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'#0''() returns (v: Vec ($1_Diem_PreburnWithMetadata'#0')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'#0''(): Vec ($1_Diem_PreburnWithMetadata'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), val: $1_Diem_PreburnWithMetadata'#0') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), val: $1_Diem_PreburnWithMetadata'#0'): Vec ($1_Diem_PreburnWithMetadata'#0') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), other: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'#0') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int): $1_Diem_PreburnWithMetadata'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'#0'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int): $1_Diem_PreburnWithMetadata'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'#0') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'$1_XDX_XDX'`


function {:inline} $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''(v1: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), v2: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''() returns (v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), val: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), val: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), other: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'$1_XUS_XUS'`


function {:inline} $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''(v1: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), v2: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''() returns (v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), val: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), val: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), other: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_ValidatorConfig_Config`


function {:inline} $IsEqual'vec'$1_ValidatorConfig_Config''(v1: Vec ($1_ValidatorConfig_Config), v2: Vec ($1_ValidatorConfig_Config)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_ValidatorConfig_Config''(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_ValidatorConfig_Config'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): int;
axiom (forall v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config:: {$IndexOfVec'$1_ValidatorConfig_Config'(v, e)}
    (var i := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
     if (!$ContainsVec'$1_ValidatorConfig_Config'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_ValidatorConfig_Config'() returns (v: Vec ($1_ValidatorConfig_Config)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), val: $1_ValidatorConfig_Config) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), val: $1_ValidatorConfig_Config): Vec ($1_ValidatorConfig_Config) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    var v: Vec ($1_ValidatorConfig_Config);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), other: Vec ($1_ValidatorConfig_Config)) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int) returns (dst: $1_ValidatorConfig_Config) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), index: int)
returns (dst: $Mutation ($1_ValidatorConfig_Config), m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int, j: int) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int, j: int): Vec ($1_ValidatorConfig_Config) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var len: int;
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res: bool)  {
    res := $ContainsVec'$1_ValidatorConfig_Config'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `vec'u8'`


function {:inline} $IsEqual'vec'vec'u8'''(v1: Vec (Vec (int)), v2: Vec (Vec (int))): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'vec'u8'''(v: Vec (Vec (int))): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'vec'u8''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e))
}

function $IndexOfVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): int;
axiom (forall v: Vec (Vec (int)), e: Vec (int):: {$IndexOfVec'vec'u8''(v, e)}
    (var i := $IndexOfVec'vec'u8''(v, e);
     if (!$ContainsVec'vec'u8''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'vec'u8''(ReadVec(v, j), e))));


function {:inline} $RangeVec'vec'u8''(v: Vec (Vec (int))): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'vec'u8''() returns (v: Vec (Vec (int))) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'vec'u8''(v: Vec (Vec (int))) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'vec'u8''(m: $Mutation (Vec (Vec (int))), val: Vec (int)) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'vec'u8''(v: Vec (Vec (int)), val: Vec (int)): Vec (Vec (int)) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (e: Vec (int), m': $Mutation (Vec (Vec (int)))) {
    var v: Vec (Vec (int));
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'vec'u8''(m: $Mutation (Vec (Vec (int))), other: Vec (Vec (int))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'vec'u8''(v: Vec (Vec (int))) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'vec'u8''(v: Vec (Vec (int))): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'vec'u8''(v: Vec (Vec (int)), i: int) returns (dst: Vec (int)) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'vec'u8''(m: $Mutation (Vec (Vec (int))), index: int)
returns (dst: $Mutation (Vec (int)), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'vec'u8''(v: Vec (Vec (int))) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int, j: int) returns (m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'vec'u8''(v: Vec (Vec (int)), i: int, j: int): Vec (Vec (int)) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var len: int;
    var v: Vec (Vec (int));

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res: bool)  {
    res := $ContainsVec'vec'u8''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'vec'u8''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`


function {:inline} $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`


function {:inline} $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_Hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_Hash_sha2(v1), $1_Hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha2(v1), $1_Hash_sha2(v2)));

procedure $1_Hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha2_256(val: Vec int): Vec int {
    $1_Hash_sha2(val)
}

// similarly for Hash_sha3
function $1_Hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_Hash_sha3(v1), $1_Hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha3(v1), $1_Hash_sha3(v2)));

procedure $1_Hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha3_256(val: Vec int): Vec int {
    $1_Hash_sha3(val)
}

// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: int) {
    // A signer is currently identical to an address.
    signer := addr;
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: int
) {
  return;
}

// ==================================================================================
// Native Signer

procedure {:inline 1} $1_Signer_borrow_address(signer: int) returns (res: int) {
    res := signer;
}

// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native BCS::serialize


// ==================================================================================
// Native Signer::spec_address_of

function {:inline} $1_Signer_spec_address_of(signer: int): int
{
    // A signer is currently identical to an address.
    signer
}

function {:inline} $1_Signer_$borrow_address(signer: int): int
{
    // A signer is currently identical to an address.
    signer
}

// ==================================================================================
// Native Event module




// Publishing a generator does nothing. Currently we just ignore this function and do not represent generators
// at all because they are not publicly exposed by the Event module.
// TODO: we should check (and abort with the right code) if a generator already exists for
// the signer.

procedure {:inline 1} $1_Event_publish_generator(signer: int) {
}

// Generic code for dealing with mutations (havoc) still requires type and memory declarations.
type $1_Event_EventHandleGenerator;
var $1_Event_EventHandleGenerator_$memory: $Memory $1_Event_EventHandleGenerator;

// Abstract type of event handles.
type $1_Event_EventHandle;

// Global state to implement uniqueness of event handles.
var $1_Event_EventHandles: [$1_Event_EventHandle]bool;

// Universal representation of an an event. For each concrete event type, we generate a constructor.
type {:datatype} $EventRep;

// Representation of EventStore that consists of event streams.
type {:datatype} $EventStore;
function {:constructor} $EventStore(
    counter: int, streams: [$1_Event_EventHandle]Multiset $EventRep): $EventStore;

// Global state holding EventStore.
var $es: $EventStore;

procedure {:inline 1} $InitEventStore() {
    assume $EventStore__is_empty($es);
}

function {:inline} $EventStore__is_empty(es: $EventStore): bool {
    (counter#$EventStore(es) == 0) &&
    (forall handle: $1_Event_EventHandle ::
        (var stream := streams#$EventStore(es)[handle];
        IsEmptyMultiset(stream)))
}

// This function returns (es1 - es2). This function assumes that es2 is a subset of es1.
function {:inline} $EventStore__subtract(es1: $EventStore, es2: $EventStore): $EventStore {
    $EventStore(counter#$EventStore(es1)-counter#$EventStore(es2),
        (lambda handle: $1_Event_EventHandle ::
        SubtractMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle])))
}

function {:inline} $EventStore__is_subset(es1: $EventStore, es2: $EventStore): bool {
    (counter#$EventStore(es1) <= counter#$EventStore(es2)) &&
    (forall handle: $1_Event_EventHandle ::
        IsSubsetMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle]
        )
    )
}

procedure {:inline 1} $EventStore__diverge(es: $EventStore) returns (es': $EventStore) {
    assume $EventStore__is_subset(es, es');
}

const $EmptyEventStore: $EventStore;
axiom $EventStore__is_empty($EmptyEventStore);

// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_FreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_FreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(e: $1_AccountFreezing_FreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_FreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_FreezeAccountEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_FreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_FreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_UnfreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_UnfreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(e: $1_AccountFreezing_UnfreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_UnfreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_UnfreezeAccountEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_UnfreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_UnfreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DesignatedDealer_ReceivedMintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(a: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', b: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(h: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    true
}

// Embed event `$1_DesignatedDealer_ReceivedMintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(e: $1_DesignatedDealer_ReceivedMintEvent): $EventRep;
axiom (forall v1, v2: $1_DesignatedDealer_ReceivedMintEvent :: {$ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1), $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2)}
    $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(v1, v2) <==> $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1) == $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DesignatedDealer_ReceivedMintEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DesignatedDealer_ReceivedMintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    var handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DesignatedDealer_ReceivedMintEvent'(handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
}

function {:inline} $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_AdminTransactionEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(a: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', b: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(h: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_AdminTransactionEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(e: $1_DiemAccount_AdminTransactionEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_AdminTransactionEvent :: {$ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1), $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2)}
    $IsEqual'$1_DiemAccount_AdminTransactionEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1) == $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_AdminTransactionEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_AdminTransactionEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_AdminTransactionEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_CreateAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(a: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', b: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(h: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_CreateAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_CreateAccountEvent'(e: $1_DiemAccount_CreateAccountEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_CreateAccountEvent :: {$ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1), $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2)}
    $IsEqual'$1_DiemAccount_CreateAccountEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1) == $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_CreateAccountEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_CreateAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_CreateAccountEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_CreateAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_ReceivedPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_ReceivedPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(e: $1_DiemAccount_ReceivedPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_ReceivedPaymentEvent :: {$ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_ReceivedPaymentEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_ReceivedPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_ReceivedPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_SentPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_SentPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_SentPaymentEvent'(e: $1_DiemAccount_SentPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_SentPaymentEvent :: {$ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_SentPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_SentPaymentEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_SentPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_SentPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_SentPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemBlock_NewBlockEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(a: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', b: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(h: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    true
}

// Embed event `$1_DiemBlock_NewBlockEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemBlock_NewBlockEvent'(e: $1_DiemBlock_NewBlockEvent): $EventRep;
axiom (forall v1, v2: $1_DiemBlock_NewBlockEvent :: {$ToEventRep'$1_DiemBlock_NewBlockEvent'(v1), $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2)}
    $IsEqual'$1_DiemBlock_NewBlockEvent'(v1, v2) <==> $ToEventRep'$1_DiemBlock_NewBlockEvent'(v1) == $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemBlock_NewBlockEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemBlock_NewBlockEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    var handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemBlock_NewBlockEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemBlock_NewBlockEvent'(handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemBlock_NewBlockEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemConfig_NewEpochEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(a: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', b: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(h: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    true
}

// Embed event `$1_DiemConfig_NewEpochEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemConfig_NewEpochEvent'(e: $1_DiemConfig_NewEpochEvent): $EventRep;
axiom (forall v1, v2: $1_DiemConfig_NewEpochEvent :: {$ToEventRep'$1_DiemConfig_NewEpochEvent'(v1), $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2)}
    $IsEqual'$1_DiemConfig_NewEpochEvent'(v1, v2) <==> $ToEventRep'$1_DiemConfig_NewEpochEvent'(v1) == $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemConfig_NewEpochEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemConfig_NewEpochEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    var handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemConfig_NewEpochEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemConfig_NewEpochEvent'(handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemConfig_NewEpochEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_BurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_BurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''(a: $1_Event_EventHandle'$1_Diem_BurnEvent', b: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''(h: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    true
}

// Embed event `$1_Diem_BurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_BurnEvent'(e: $1_Diem_BurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_BurnEvent :: {$ToEventRep'$1_Diem_BurnEvent'(v1), $ToEventRep'$1_Diem_BurnEvent'(v2)}
    $IsEqual'$1_Diem_BurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_BurnEvent'(v1) == $ToEventRep'$1_Diem_BurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_BurnEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_BurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_BurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_BurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_BurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_BurnEvent'(handle: $1_Event_EventHandle'$1_Diem_BurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_BurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_BurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_CancelBurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_CancelBurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(a: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', b: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(h: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    true
}

// Embed event `$1_Diem_CancelBurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_CancelBurnEvent'(e: $1_Diem_CancelBurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_CancelBurnEvent :: {$ToEventRep'$1_Diem_CancelBurnEvent'(v1), $ToEventRep'$1_Diem_CancelBurnEvent'(v2)}
    $IsEqual'$1_Diem_CancelBurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_CancelBurnEvent'(v1) == $ToEventRep'$1_Diem_CancelBurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_CancelBurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_CancelBurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_CancelBurnEvent'(handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_CancelBurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_CancelBurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_MintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_MintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''(a: $1_Event_EventHandle'$1_Diem_MintEvent', b: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''(h: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    true
}

// Embed event `$1_Diem_MintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_MintEvent'(e: $1_Diem_MintEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_MintEvent :: {$ToEventRep'$1_Diem_MintEvent'(v1), $ToEventRep'$1_Diem_MintEvent'(v2)}
    $IsEqual'$1_Diem_MintEvent'(v1, v2) <==> $ToEventRep'$1_Diem_MintEvent'(v1) == $ToEventRep'$1_Diem_MintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_MintEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_MintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_MintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_MintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_MintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_MintEvent'(handle: $1_Event_EventHandle'$1_Diem_MintEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_MintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_MintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_PreburnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_PreburnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''(a: $1_Event_EventHandle'$1_Diem_PreburnEvent', b: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''(h: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    true
}

// Embed event `$1_Diem_PreburnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_PreburnEvent'(e: $1_Diem_PreburnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_PreburnEvent :: {$ToEventRep'$1_Diem_PreburnEvent'(v1), $ToEventRep'$1_Diem_PreburnEvent'(v2)}
    $IsEqual'$1_Diem_PreburnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_PreburnEvent'(v1) == $ToEventRep'$1_Diem_PreburnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_PreburnEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_PreburnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_PreburnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_PreburnEvent'(handle: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_PreburnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_PreburnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_ToXDXExchangeRateUpdateEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(a: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', b: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(h: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    true
}

// Embed event `$1_Diem_ToXDXExchangeRateUpdateEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(e: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_ToXDXExchangeRateUpdateEvent :: {$ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1), $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2)}
    $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1, v2) <==> $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1) == $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_BaseUrlRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_BaseUrlRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(e: $1_DualAttestation_BaseUrlRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_BaseUrlRotationEvent :: {$ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1), $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_BaseUrlRotationEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_BaseUrlRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_BaseUrlRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_ComplianceKeyRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_ComplianceKeyRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(e: $1_DualAttestation_ComplianceKeyRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_ComplianceKeyRotationEvent :: {$ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1), $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_ComplianceKeyRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_VASPDomain_VASPDomainEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''(a: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', b: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''(h: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): bool {
    true
}

// Embed event `$1_VASPDomain_VASPDomainEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_VASPDomain_VASPDomainEvent'(e: $1_VASPDomain_VASPDomainEvent): $EventRep;
axiom (forall v1, v2: $1_VASPDomain_VASPDomainEvent :: {$ToEventRep'$1_VASPDomain_VASPDomainEvent'(v1), $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v2)}
    $IsEqual'$1_VASPDomain_VASPDomainEvent'(v1, v2) <==> $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v1) == $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_VASPDomain_VASPDomainEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_VASPDomain_VASPDomainEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
    var handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_VASPDomain_VASPDomainEvent'(handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
}

function {:inline} $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_VASPDomain_VASPDomainEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_VASPDomain_VASPDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'(es, handle, msg)
    else
        es
}




//==================================
// Begin Translation



// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }

// spec fun at /home/ying/diem/language/move-stdlib/modules/Signer.move:12:5+77
function {:inline} $1_Signer_$address_of(s: int): int {
    $1_Signer_$borrow_address(s)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:125:5+89
function {:inline} $1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    !$ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:145:5+90
function {:inline} $1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:107:10+104
function {:inline} $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): int {
    $microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds($ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816))
}

// struct DiemTimestamp::CurrentTimeMicroseconds at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:19:5+73
type {:datatype} $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:constructor} $1_DiemTimestamp_CurrentTimeMicroseconds($microseconds: int): $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:inline} $Update'$1_DiemTimestamp_CurrentTimeMicroseconds'_microseconds(s: $1_DiemTimestamp_CurrentTimeMicroseconds, x: int): $1_DiemTimestamp_CurrentTimeMicroseconds {
    $1_DiemTimestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'(s: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'($microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds(s))
}
function {:inline} $IsEqual'$1_DiemTimestamp_CurrentTimeMicroseconds'(s1: $1_DiemTimestamp_CurrentTimeMicroseconds, s2: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;

// fun DiemTimestamp::set_time_has_started [baseline] at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:35:5+240
procedure {:inline 1} $1_DiemTimestamp_set_time_has_started(_$t0: int) returns ()
{
    // declare local variables
    var $t1: $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:35:5+1
    assume {:print "$at(17,1630,1631)"} true;
    assume {:print "$track_local(3,6,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:36:9+16
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(17,1693,1709)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:36:9+16

    // assume Identical($t2, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:36:9+16
    assume ($t2 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t2) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:36:9+16
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:36:9+16
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:36:9+16
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:36:9+16
    assume {:print "$at(17,1693,1709)"} true;
    assume {:print "$track_abort(3,6):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:36:9+16
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:36:9+16
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:36:9+16

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(17,1719,1762)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:9+43

    // assume Identical($t4, Neq<address>(Signer::spec_address_of($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:9+43
    assume ($t4 == !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // if ($t4) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:9+43
    if ($t4) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:9+43
L6:

    // assume And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:9+43
    assume {:print "$at(17,1719,1762)"} true;
    assume {:print "$track_abort(3,6):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:9+43
L5:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:9+43

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:61+1
    assume {:print "$at(17,1824,1825)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := pack DiemTimestamp::CurrentTimeMicroseconds($t5) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:21+43
    $t6 := $1_DiemTimestamp_CurrentTimeMicroseconds($t5);

    // move_to<DiemTimestamp::CurrentTimeMicroseconds>($t6, $t0) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+7
    assume {:print "$at(17,1837,1844)"} true;
    if ($ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemTimestamp_CurrentTimeMicroseconds_$memory := $ResourceUpdate($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $t0, $t6);
    }
    if ($abort_flag) {
        assume {:print "$at(17,1837,1844)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(3,6):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:40:5+1
    assume {:print "$at(17,1869,1870)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:40:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:40:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:40:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:477:9+148
function {:inline} $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int, role_id: int): bool {
    ($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), role_id))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:481:9+124
function {:inline} $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:485:9+144
function {:inline} $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 1)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:489:9+140
function {:inline} $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 2)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:493:9+124
function {:inline} $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 3)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:497:9+142
function {:inline} $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 4)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:501:9+128
function {:inline} $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 5)
}

// struct Roles::RoleId at /home/ying/diem/language/diem-framework/modules/Roles.move:49:5+51
type {:datatype} $1_Roles_RoleId;
function {:constructor} $1_Roles_RoleId($role_id: int): $1_Roles_RoleId;
function {:inline} $Update'$1_Roles_RoleId'_role_id(s: $1_Roles_RoleId, x: int): $1_Roles_RoleId {
    $1_Roles_RoleId(x)
}
function $IsValid'$1_Roles_RoleId'(s: $1_Roles_RoleId): bool {
    $IsValid'u64'($role_id#$1_Roles_RoleId(s))
}
function {:inline} $IsEqual'$1_Roles_RoleId'(s1: $1_Roles_RoleId, s2: $1_Roles_RoleId): bool {
    s1 == s2
}
var $1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId;

// fun Roles::grant_role [verification] at /home/ying/diem/language/diem-framework/modules/Roles.move:162:5+199
procedure {:timeLimit 40} $1_Roles_grant_role$verify(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Roles_RoleId;
    var $t0: int;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#156: $Memory $1_Roles_RoleId;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:162:5+199
    assume {:print "$at(26,6850,7049)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:162:5+199
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Roles.move:162:5+199
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:169:9+44
    assume {:print "$at(26,7165,7209)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t4, a550c18)) at /home/ying/diem/language/diem-framework/modules/Roles.move:171:9+60
    assume {:print "$at(26,7268,7328)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t4, 173345816));

    // assume Implies(Eq<u64>($t1, 1), Eq<address>($t4, b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Roles.move:172:9+80
    assume {:print "$at(26,7337,7417)"} true;
    assume ($IsEqual'u64'($t1, 1) ==> $IsEqual'address'($t4, 186537453));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:180:9+30
    assume {:print "$at(26,7671,7701)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @156 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Roles.move:180:9+30
    $1_Roles_RoleId_$memory#156 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:162:5+1
    assume {:print "$at(26,6850,6851)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:162:5+1
    assume {:print "$track_local(4,12,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:163:32+27
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(26,6930,6957)"} true;

    // $t5 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:32+27

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:32+27
    assume $IsValid'address'($t5);

    // assume Eq<address>($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:32+27
    assume $IsEqual'address'($t5, $1_Signer_spec_address_of($t0));

    // $t5 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:32+27

    // $t6 := exists<Roles::RoleId>($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:17+6
    $t6 := $ResourceExists($1_Roles_RoleId_$memory, $t5);

    // $t7 := !($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:16+1
    call $t7 := $Not($t6);

    // $t8 := 0 at /home/ying/diem/language/diem-framework/modules/Roles.move:163:88+8
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:163:62+35
    // >> opaque call: $t8 := Errors::already_published($t7)

    // $t9 := opaque begin: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:62+35

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:62+35
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 6) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:62+35
    assume $IsEqual'u64'($t9, 6);

    // $t9 := opaque end: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:62+35

    // trace_local[tmp#$3]($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:9+89
    assume {:print "$track_local(4,12,3):", $t9} $t9 == $t9;

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:9+89
    assume {:print "$track_local(4,12,2):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:163:9+89
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:163:9+89
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:9+89

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:9+89
    assume {:print "$at(26,6907,6996)"} true;
    assume {:print "$track_abort(4,12):", $t9} $t9 == $t9;

    // $t10 := move($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:163:9+89
    $t10 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:163:9+89
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Roles.move:164:17+7
    assume {:print "$at(26,7014,7021)"} true;
L0:

    // $t11 := pack Roles::RoleId($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:26+18
    $t11 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:9+7
    assert {:msg "assert_failed(26,7006,7013): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$t0];

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Roles.move:162:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume {:print "$at(26,6850,7049)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:162:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:162:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // move_to<Roles::RoleId>($t11, $t0) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/Roles.move:164:9+7
    assume {:print "$at(26,7006,7013)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $t0, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(26,7006,7013)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(4,12):", $t10} $t10 == $t10;
        goto L3;
    }

    // assert And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume {:print "$at(10,74153,74365)"} true;
    assert {:msg "assert_failed(10,74153,74365): global memory invariant does not hold"}
      (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assert And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume {:print "$at(10,78174,78377)"} true;
    assert {:msg "assert_failed(10,78174,78377): global memory invariant does not hold"}
      (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume {:print "$at(10,82144,82380)"} true;
    assert {:msg "assert_failed(10,82144,82380): global memory invariant does not hold"}
      (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:165:5+1
    assume {:print "$at(26,7048,7049)"} true;
L2:

    // assert Not(exists[@156]<Roles::RoleId>(Signer::$address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/Roles.move:177:9+62
    assume {:print "$at(26,7505,7567)"} true;
    assert {:msg "assert_failed(26,7505,7567): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#156, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:178:9+29
    assume {:print "$at(26,7576,7605)"} true;
    assert {:msg "assert_failed(26,7576,7605): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:179:9+48
    assume {:print "$at(26,7614,7662)"} true;
    assert {:msg "assert_failed(26,7614,7662): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:179:9+48
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:165:5+1
    assume {:print "$at(26,7048,7049)"} true;
L3:

    // assert exists[@156]<Roles::RoleId>(Signer::$address_of[]($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+369
    assume {:print "$at(26,7054,7423)"} true;
    assert {:msg "assert_failed(26,7054,7423): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#156, $1_Signer_$address_of($t0));

    // assert And(exists[@156]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(6, $t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+369
    assert {:msg "assert_failed(26,7054,7423): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#156, $1_Signer_$address_of($t0)) && $IsEqual'u8'(6, $t10));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+369
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:61:5+153
function {:inline} $1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig, validator_operator_addr: int): bool {
    $ResourceExists($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, validator_operator_addr)
}

// struct ValidatorOperatorConfig::ValidatorOperatorConfig at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:8:5+141
type {:datatype} $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:constructor} $1_ValidatorOperatorConfig_ValidatorOperatorConfig($human_name: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:inline} $Update'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'_human_name(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, x: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig {
    $1_ValidatorOperatorConfig_ValidatorOperatorConfig(x)
}
function $IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    $IsValid'vec'u8''($human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s1: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, s2: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    s1 == s2
}
var $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig;

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_ValidatorConfig_Config'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:162:9+216
function {:inline} $1_Vector_eq_push_back'$1_Diem_PreburnWithMetadata'#0''(v1: Vec ($1_Diem_PreburnWithMetadata'#0'), v2: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): bool {
    (($IsEqual'num'(LenVec(v1), (LenVec(v2) + 1)) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v1, (LenVec(v1) - 1)), e)) && $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''($SliceVecByRange(v1, $Range(0, (LenVec(v1) - 1))), $SliceVecByRange(v2, $Range(0, LenVec(v2)))))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:86:5+170
function {:inline} $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_KeyRotationCapability {
    $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:86:5+170
function {:inline} $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_WithdrawCapability {
    $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:51:5+95
function {:inline} $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:51:5+95
function {:inline} $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_ValidatorConfig_Config'(t: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    !$1_Vector_$is_empty'$1_ValidatorConfig_Config'($vec#$1_Option_Option'$1_ValidatorConfig_Config'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    !$1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    !$1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t))
}

// struct Option::Option<address> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'address';
function {:constructor} $1_Option_Option'address'($vec: Vec (int)): $1_Option_Option'address';
function {:inline} $Update'$1_Option_Option'address''_vec(s: $1_Option_Option'address', x: Vec (int)): $1_Option_Option'address' {
    $1_Option_Option'address'(x)
}
function $IsValid'$1_Option_Option'address''(s: $1_Option_Option'address'): bool {
    $IsValid'vec'address''($vec#$1_Option_Option'address'(s))
}
function {:inline} $IsEqual'$1_Option_Option'address''(s1: $1_Option_Option'address', s2: $1_Option_Option'address'): bool {
    s1 == s2
}

// struct Option::Option<ValidatorConfig::Config> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_ValidatorConfig_Config';
function {:constructor} $1_Option_Option'$1_ValidatorConfig_Config'($vec: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config';
function {:inline} $Update'$1_Option_Option'$1_ValidatorConfig_Config''_vec(s: $1_Option_Option'$1_ValidatorConfig_Config', x: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config' {
    $1_Option_Option'$1_ValidatorConfig_Config'(x)
}
function $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''(s: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    $IsValid'vec'$1_ValidatorConfig_Config''($vec#$1_Option_Option'$1_ValidatorConfig_Config'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_ValidatorConfig_Config''(s1: $1_Option_Option'$1_ValidatorConfig_Config', s2: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    s1 == s2
}

// struct Option::Option<DiemAccount::KeyRotationCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_KeyRotationCapability'($vec: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''_vec(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', x: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $1_Option_Option'$1_DiemAccount_KeyRotationCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $IsValid'vec'$1_DiemAccount_KeyRotationCapability''($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s1: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', s2: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    s1 == s2
}

// struct Option::Option<DiemAccount::WithdrawCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_WithdrawCapability'($vec: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_WithdrawCapability''_vec(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability', x: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $IsValid'vec'$1_DiemAccount_WithdrawCapability''($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s1: $1_Option_Option'$1_DiemAccount_WithdrawCapability', s2: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:82:5+84
function {:inline} $1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:228:5+176
function {:inline} $1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    ($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr) && $1_Option_$is_some'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, addr))))
}

// struct ValidatorConfig::ValidatorConfig at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:21:5+260
type {:datatype} $1_ValidatorConfig_ValidatorConfig;
function {:constructor} $1_ValidatorConfig_ValidatorConfig($config: $1_Option_Option'$1_ValidatorConfig_Config', $operator_account: $1_Option_Option'address', $human_name: Vec (int)): $1_ValidatorConfig_ValidatorConfig;
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_config(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'$1_ValidatorConfig_Config'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig(x, $operator_account#$1_ValidatorConfig_ValidatorConfig(s), $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_operator_account(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'address'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), x, $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_human_name(s: $1_ValidatorConfig_ValidatorConfig, x: Vec (int)): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), $operator_account#$1_ValidatorConfig_ValidatorConfig(s), x)
}
function $IsValid'$1_ValidatorConfig_ValidatorConfig'(s: $1_ValidatorConfig_ValidatorConfig): bool {
    $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''($config#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'vec'u8''($human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_ValidatorConfig'(s1: $1_ValidatorConfig_ValidatorConfig, s2: $1_ValidatorConfig_ValidatorConfig): bool {
    s1 == s2
}
var $1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig;

// struct ValidatorConfig::Config at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:15:5+178
type {:datatype} $1_ValidatorConfig_Config;
function {:constructor} $1_ValidatorConfig_Config($consensus_pubkey: Vec (int), $validator_network_addresses: Vec (int), $fullnode_network_addresses: Vec (int)): $1_ValidatorConfig_Config;
function {:inline} $Update'$1_ValidatorConfig_Config'_consensus_pubkey(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config(x, $validator_network_addresses#$1_ValidatorConfig_Config(s), $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_validator_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), x, $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_fullnode_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), $validator_network_addresses#$1_ValidatorConfig_Config(s), x)
}
function $IsValid'$1_ValidatorConfig_Config'(s: $1_ValidatorConfig_Config): bool {
    $IsValid'vec'u8''($consensus_pubkey#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($validator_network_addresses#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_Config'(s1: $1_ValidatorConfig_Config, s2: $1_ValidatorConfig_Config): bool {
    s1 == s2
}

// struct SlidingNonce::SlidingNonce at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:10:5+341
type {:datatype} $1_SlidingNonce_SlidingNonce;
function {:constructor} $1_SlidingNonce_SlidingNonce($min_nonce: int, $nonce_mask: int): $1_SlidingNonce_SlidingNonce;
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_min_nonce(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce(x, $nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_nonce_mask(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce($min_nonce#$1_SlidingNonce_SlidingNonce(s), x)
}
function $IsValid'$1_SlidingNonce_SlidingNonce'(s: $1_SlidingNonce_SlidingNonce): bool {
    $IsValid'u64'($min_nonce#$1_SlidingNonce_SlidingNonce(s))
      && $IsValid'u128'($nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $IsEqual'$1_SlidingNonce_SlidingNonce'(s1: $1_SlidingNonce_SlidingNonce, s2: $1_SlidingNonce_SlidingNonce): bool {
    s1 == s2
}
var $1_SlidingNonce_SlidingNonce_$memory: $Memory $1_SlidingNonce_SlidingNonce;

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:89:5+260
function {:inline} $1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): $1_DiemSystem_DiemSystem {
    (var addr := 173345816; $payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:89:5+260
function {:inline} $1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): $1_RegisteredCurrencies_RegisteredCurrencies {
    (var addr := 173345816; $payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'($ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:89:5+260
function {:inline} $1_DiemConfig_$get'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    (var addr := 173345816; $payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:89:5+260
function {:inline} $1_DiemConfig_$get'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): $1_DiemVMConfig_DiemVMConfig {
    (var addr := 173345816; $payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:89:5+260
function {:inline} $1_DiemConfig_$get'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): $1_DiemVersion_DiemVersion {
    (var addr := 173345816; $payload#$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:200:5+94
function {:inline} $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory: $Memory $1_DiemConfig_DisableReconfiguration): bool {
    !$ResourceExists($1_DiemConfig_DisableReconfiguration_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:436:9+84
function {:inline} $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration): bool {
    $ResourceExists($1_DiemConfig_Configuration_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:440:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:440:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:440:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:440:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:440:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, 173345816)
}

// struct DiemConfig::DiemConfig<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:12:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($payload: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', x: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'$1_DiemSystem_DiemSystem'($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';

// struct DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:12:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:constructor} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'($payload: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''_payload(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', x: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies' {
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'($payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s1: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', s2: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';

// struct DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:12:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', x: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption' {
    $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s1: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', s2: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';

// struct DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:12:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'($payload: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', x: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig' {
    $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsValid'$1_DiemVMConfig_DiemVMConfig'($payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s1: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', s2: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';

// struct DiemConfig::DiemConfig<DiemVersion::DiemVersion> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:12:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'($payload: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', x: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion' {
    $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $IsValid'$1_DiemVersion_DiemVersion'($payload#$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s1: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', s2: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';

// struct DiemConfig::Configuration at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:25:5+306
type {:datatype} $1_DiemConfig_Configuration;
function {:constructor} $1_DiemConfig_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration;
function {:inline} $Update'$1_DiemConfig_Configuration'_epoch(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration(x, $last_reconfiguration_time#$1_DiemConfig_Configuration(s), $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_last_reconfiguration_time(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), x, $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_events(s: $1_DiemConfig_Configuration, x: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), $last_reconfiguration_time#$1_DiemConfig_Configuration(s), x)
}
function $IsValid'$1_DiemConfig_Configuration'(s: $1_DiemConfig_Configuration): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_Configuration(s))
      && $IsValid'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''($events#$1_DiemConfig_Configuration(s))
}
function {:inline} $IsEqual'$1_DiemConfig_Configuration'(s1: $1_DiemConfig_Configuration, s2: $1_DiemConfig_Configuration): bool {
    s1 == s2
}
var $1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration;

// struct DiemConfig::DisableReconfiguration at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:38:5+40
type {:datatype} $1_DiemConfig_DisableReconfiguration;
function {:constructor} $1_DiemConfig_DisableReconfiguration($dummy_field: bool): $1_DiemConfig_DisableReconfiguration;
function {:inline} $Update'$1_DiemConfig_DisableReconfiguration'_dummy_field(s: $1_DiemConfig_DisableReconfiguration, x: bool): $1_DiemConfig_DisableReconfiguration {
    $1_DiemConfig_DisableReconfiguration(x)
}
function $IsValid'$1_DiemConfig_DisableReconfiguration'(s: $1_DiemConfig_DisableReconfiguration): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_DisableReconfiguration(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DisableReconfiguration'(s1: $1_DiemConfig_DisableReconfiguration, s2: $1_DiemConfig_DisableReconfiguration): bool {
    s1 == s2
}
var $1_DiemConfig_DisableReconfiguration_$memory: $Memory $1_DiemConfig_DisableReconfiguration;

// struct DiemConfig::ModifyConfigCapability<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:35:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';

// struct DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:35:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies' {
    $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''(s: $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''(s1: $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies', s2: $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';

// struct DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:35:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';

// struct DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:35:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig';

// struct DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:35:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion';

// struct DiemConfig::NewEpochEvent at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:20:5+64
type {:datatype} $1_DiemConfig_NewEpochEvent;
function {:constructor} $1_DiemConfig_NewEpochEvent($epoch: int): $1_DiemConfig_NewEpochEvent;
function {:inline} $Update'$1_DiemConfig_NewEpochEvent'_epoch(s: $1_DiemConfig_NewEpochEvent, x: int): $1_DiemConfig_NewEpochEvent {
    $1_DiemConfig_NewEpochEvent(x)
}
function $IsValid'$1_DiemConfig_NewEpochEvent'(s: $1_DiemConfig_NewEpochEvent): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_NewEpochEvent(s))
}
function {:inline} $IsEqual'$1_DiemConfig_NewEpochEvent'(s1: $1_DiemConfig_NewEpochEvent, s2: $1_DiemConfig_NewEpochEvent): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:597:10+105
function {:inline} $1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): Vec ($1_DiemSystem_ValidatorInfo) {
    $validators#$1_DiemSystem_DiemSystem($1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))
}

// struct DiemSystem::DiemSystem at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:48:5+198
type {:datatype} $1_DiemSystem_DiemSystem;
function {:constructor} $1_DiemSystem_DiemSystem($scheme: int, $validators: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem;
function {:inline} $Update'$1_DiemSystem_DiemSystem'_scheme(s: $1_DiemSystem_DiemSystem, x: int): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem(x, $validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $Update'$1_DiemSystem_DiemSystem'_validators(s: $1_DiemSystem_DiemSystem, x: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem($scheme#$1_DiemSystem_DiemSystem(s), x)
}
function $IsValid'$1_DiemSystem_DiemSystem'(s: $1_DiemSystem_DiemSystem): bool {
    $IsValid'u8'($scheme#$1_DiemSystem_DiemSystem(s))
      && $IsValid'vec'$1_DiemSystem_ValidatorInfo''($validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $IsEqual'$1_DiemSystem_DiemSystem'(s1: $1_DiemSystem_DiemSystem, s2: $1_DiemSystem_DiemSystem): bool {
    s1 == s2
}

// struct DiemSystem::CapabilityHolder at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:39:5+242
type {:datatype} $1_DiemSystem_CapabilityHolder;
function {:constructor} $1_DiemSystem_CapabilityHolder($cap: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder;
function {:inline} $Update'$1_DiemSystem_CapabilityHolder'_cap(s: $1_DiemSystem_CapabilityHolder, x: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder {
    $1_DiemSystem_CapabilityHolder(x)
}
function $IsValid'$1_DiemSystem_CapabilityHolder'(s: $1_DiemSystem_CapabilityHolder): bool {
    $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''($cap#$1_DiemSystem_CapabilityHolder(s))
}
function {:inline} $IsEqual'$1_DiemSystem_CapabilityHolder'(s1: $1_DiemSystem_CapabilityHolder, s2: $1_DiemSystem_CapabilityHolder): bool {
    s1 == s2
}
var $1_DiemSystem_CapabilityHolder_$memory: $Memory $1_DiemSystem_CapabilityHolder;

// struct DiemSystem::ValidatorInfo at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:18:5+600
type {:datatype} $1_DiemSystem_ValidatorInfo;
function {:constructor} $1_DiemSystem_ValidatorInfo($addr: int, $consensus_voting_power: int, $config: $1_ValidatorConfig_Config, $last_config_update_time: int): $1_DiemSystem_ValidatorInfo;
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_addr(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo(x, $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_consensus_voting_power(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), x, $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_config(s: $1_DiemSystem_ValidatorInfo, x: $1_ValidatorConfig_Config): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), x, $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_last_config_update_time(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), x)
}
function $IsValid'$1_DiemSystem_ValidatorInfo'(s: $1_DiemSystem_ValidatorInfo): bool {
    $IsValid'address'($addr#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'$1_ValidatorConfig_Config'($config#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $IsEqual'$1_DiemSystem_ValidatorInfo'(s1: $1_DiemSystem_ValidatorInfo, s2: $1_DiemSystem_ValidatorInfo): bool {
    s1 == s2
}

// fun DiemSystem::initialize_validator_set [baseline] at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:94:5+583
procedure {:inline 1} $1_DiemSystem_initialize_validator_set(_$t0: int) returns ()
{
    // declare local variables
    var $t1: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: Vec ($1_DiemSystem_ValidatorInfo);
    var $t12: $1_DiemSystem_DiemSystem;
    var $t13: int;
    var $t14: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: $1_DiemSystem_CapabilityHolder;
    var $t0: int;
    var $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$modifies: [int]bool;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'': $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'': $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemConfig_Configuration_$memory#388: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:117:9+50
    assume {:print "$at(16,5250,5300)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:94:5+1
    assume {:print "$at(16,4434,4435)"} true;
    assume {:print "$track_local(14,5,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(16,4516,4547)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:9+31

    // assume Identical($t6, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:9+31
    assume ($t6 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:9+31
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:9+31
L5:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t7)) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:9+31
    assume {:print "$at(16,4516,4547)"} true;
    assume {:print "$track_abort(14,5):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:9+31
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:9+31
L4:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:98:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(16,4557,4592)"} true;

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:98:9+35
    assume {:print "$at(16,4557,4592)"} true;

    // assume Identical($t9, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t8))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t8)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:98:9+35
    assume ($t9 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t8)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t9) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:98:9+35
    if ($t9) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:98:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t7)), And(Not(exists<Roles::RoleId>($t8)), Eq(5, $t7))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t8)), 0), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:98:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t7)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t8) && $IsEqual'u8'(5, $t7))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)), 0) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:98:9+35
    assume {:print "$at(16,4557,4592)"} true;
    assume {:print "$track_abort(14,5):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:98:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:98:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:98:9+35

    // $t10 := 0 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:25+1
    assume {:print "$at(16,4749,4750)"} true;
    $t10 := 0;
    assume $IsValid'u8'($t10);

    // $t11 := Vector::empty<DiemSystem::ValidatorInfo>() on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:104:29+15
    assume {:print "$at(16,4780,4795)"} true;
    call $t11 := $1_Vector_empty'$1_DiemSystem_ValidatorInfo'();
    if ($abort_flag) {
        assume {:print "$at(16,4780,4795)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(14,5):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t12 := pack DiemSystem::DiemSystem($t10, $t11) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:102:13+98
    assume {:print "$at(16,4712,4810)"} true;
    $t12 := $1_DiemSystem_DiemSystem($t10, $t11);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    // >> opaque call: $t7 := DiemConfig::publish_new_config_and_get_capability<DiemSystem::DiemSystem>($t0, $t6)
    assume {:print "$at(16,4613,4821)"} true;

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // $t14 := opaque begin: DiemConfig::publish_new_config_and_get_capability<DiemSystem::DiemSystem>($t0, $t12) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    assume {:print "$at(16,4613,4821)"} true;

    // assume Identical($t15, Or(Or(Or(Not(exists<Roles::RoleId>($t13)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18)), exists<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    assume ($t15 == (((!$ResourceExists($1_Roles_RoleId_$memory, $t13) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)) || $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, 173345816)));

    // if ($t15) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    if ($t15) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
L9:

    // assume Or(Or(Or(And(Not(exists<Roles::RoleId>($t13)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 0), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t7))), And(exists<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(a550c18), Eq(6, $t7))) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    assume ((((!$ResourceExists($1_Roles_RoleId_$memory, $t13) && $IsEqual'u8'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 0) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t7))) || ($ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, 173345816) && $IsEqual'u8'(6, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    assume {:print "$at(16,4613,4821)"} true;
    assume {:print "$track_abort(14,5):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
L8:

    // @388 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    $1_DiemConfig_Configuration_$memory#388 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'';
        $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, 173345816, $temp_0'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'');
    } else {
        $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, 173345816);
    }

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    assume $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''($t14);

    // assume DiemConfig::spec_is_published<DiemSystem::DiemSystem>() at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    assume $1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory);

    // assume Eq<DiemSystem::DiemSystem>(DiemConfig::$get<DiemSystem::DiemSystem>(), $t12) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    assume $IsEqual'$1_DiemSystem_DiemSystem'($1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), $t12);

    // assume Eq<bool>(DiemConfig::spec_has_config[@388](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#388), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // $t14 := opaque end: DiemConfig::publish_new_config_and_get_capability<DiemSystem::DiemSystem>($t0, $t12) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:19+208

    // trace_local[cap]($t14) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:13+3
    assume {:print "$track_local(14,5,1):", $t14} $t14 == $t14;

    // $t16 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:108:39+9
    assume {:print "$at(16,4877,4886)"} true;
    $t16 := 173345816;
    assume $IsValid'address'($t16);

    // $t17 := exists<DiemSystem::CapabilityHolder>($t16) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:108:14+6
    $t17 := $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, $t16);

    // $t18 := !($t17) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:108:13+1
    call $t18 := $Not($t17);

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:109:39+18
    assume {:print "$at(16,4927,4945)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:109:13+45
    // >> opaque call: $t12 := Errors::already_published($t11)

    // $t20 := opaque begin: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:109:13+45

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:109:13+45
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 6) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:109:13+45
    assume $IsEqual'u64'($t20, 6);

    // $t20 := opaque end: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:109:13+45

    // trace_local[tmp#$3]($t20) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:107:9+125
    assume {:print "$at(16,4831,4956)"} true;
    assume {:print "$track_local(14,5,3):", $t20} $t20 == $t20;

    // trace_local[tmp#$2]($t18) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:107:9+125
    assume {:print "$track_local(14,5,2):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:107:9+125
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:107:9+125
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:107:9+125

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:107:9+125
    assume {:print "$at(16,4831,4956)"} true;
    assume {:print "$track_abort(14,5):", $t20} $t20 == $t20;

    // $t7 := move($t20) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:107:9+125
    $t7 := $t20;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:107:9+125
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:111:17+10
    assume {:print "$at(16,4974,4984)"} true;
L0:

    // $t21 := pack DiemSystem::CapabilityHolder($t14) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:111:29+24
    $t21 := $1_DiemSystem_CapabilityHolder($t14);

    // move_to<DiemSystem::CapabilityHolder>($t21, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:111:9+7
    if ($ResourceExists($1_DiemSystem_CapabilityHolder_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemSystem_CapabilityHolder_$memory := $ResourceUpdate($1_DiemSystem_CapabilityHolder_$memory, $t0, $t21);
    }
    if ($abort_flag) {
        assume {:print "$at(16,4966,4973)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(14,5):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:5+1
    assume {:print "$at(16,5016,5017)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:227:5+74
function {:inline} $1_FixedPoint32_$get_raw_value(num: $1_FixedPoint32_FixedPoint32): int {
    $value#$1_FixedPoint32_FixedPoint32(num)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:78:10+360
function {:inline} $1_FixedPoint32_spec_multiply_u64(val: int, multiplier: $1_FixedPoint32_FixedPoint32): int {
    if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 0)) then (0) else (if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 1)) then (val) else (if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 2)) then ((val div 2)) else ((18446744073709551615 + 1))))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:204:10+244
function {:inline} $1_FixedPoint32_spec_create_from_rational(numerator: int, denominator: int): $1_FixedPoint32_FixedPoint32 {
    if ($IsEqual'num'(numerator, denominator)) then ($1_FixedPoint32_FixedPoint32(1)) else ($1_FixedPoint32_FixedPoint32(2))
}

// struct FixedPoint32::FixedPoint32 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:17:5+56
type {:datatype} $1_FixedPoint32_FixedPoint32;
function {:constructor} $1_FixedPoint32_FixedPoint32($value: int): $1_FixedPoint32_FixedPoint32;
function {:inline} $Update'$1_FixedPoint32_FixedPoint32'_value(s: $1_FixedPoint32_FixedPoint32, x: int): $1_FixedPoint32_FixedPoint32 {
    $1_FixedPoint32_FixedPoint32(x)
}
function $IsValid'$1_FixedPoint32_FixedPoint32'(s: $1_FixedPoint32_FixedPoint32): bool {
    $IsValid'u64'($value#$1_FixedPoint32_FixedPoint32(s))
}
function {:inline} $IsEqual'$1_FixedPoint32_FixedPoint32'(s1: $1_FixedPoint32_FixedPoint32, s2: $1_FixedPoint32_FixedPoint32): bool {
    s1 == s2
}

// fun FixedPoint32::get_raw_value [baseline] at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:227:5+74
procedure {:inline 1} $1_FixedPoint32_get_raw_value(_$t0: $1_FixedPoint32_FixedPoint32) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_FixedPoint32_FixedPoint32;
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[num]($t0) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:227:5+1
    assume {:print "$at(43,9992,9993)"} true;
    assume {:print "$track_local(16,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<FixedPoint32::FixedPoint32>.value($t0) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:228:9+9
    assume {:print "$at(43,10051,10060)"} true;
    $t1 := $value#$1_FixedPoint32_FixedPoint32($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:228:9+9
    assume {:print "$track_return(16,3,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:229:5+1
    assume {:print "$at(43,10065,10066)"} true;
L1:

    // return $t1 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:229:5+1
    $ret0 := $t1;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:98:9+123
function {:inline} $1_RegisteredCurrencies_get_currency_codes($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): Vec (Vec (int)) {
    $currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory))
}

// struct RegisteredCurrencies::RegisteredCurrencies at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:13:5+101
type {:datatype} $1_RegisteredCurrencies_RegisteredCurrencies;
function {:constructor} $1_RegisteredCurrencies_RegisteredCurrencies($currency_codes: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies;
function {:inline} $Update'$1_RegisteredCurrencies_RegisteredCurrencies'_currency_codes(s: $1_RegisteredCurrencies_RegisteredCurrencies, x: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies {
    $1_RegisteredCurrencies_RegisteredCurrencies(x)
}
function $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'(s: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    $IsValid'vec'vec'u8'''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s))
}
function {:inline} $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'(s1: $1_RegisteredCurrencies_RegisteredCurrencies, s2: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    s1 == s2
}

// fun RegisteredCurrencies::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:22:5+280
procedure {:inline 1} $1_RegisteredCurrencies_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: Vec (Vec (int));
    var $t8: $1_RegisteredCurrencies_RegisteredCurrencies;
    var $t9: int;
    var $t10: bool;
    var $t0: int;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'': $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'': $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_DiemConfig_Configuration_$memory#441: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:22:5+1
    assume {:print "$at(25,847,848)"} true;
    assume {:print "$track_local(17,1,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:23:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(25,900,931)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:23:9+31

    // assume Identical($t3, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:23:9+31
    assume ($t3 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:23:9+31
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:23:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t4)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:23:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:23:9+31
    assume {:print "$at(25,900,931)"} true;
    assume {:print "$track_abort(17,1):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:23:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:23:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:23:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(25,941,976)"} true;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:9+35
    assume {:print "$at(25,941,976)"} true;

    // assume Identical($t6, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:9+35
    assume ($t6 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t6) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:9+35
    if ($t6) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t4)), And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t4))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 0), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t4)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'u8'(5, $t4))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 0) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:9+35
    assume {:print "$at(25,941,976)"} true;
    assume {:print "$track_abort(17,1):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:9+35

    // $t7 := Vector::empty<vector<u8>>() on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:52+15
    assume {:print "$at(25,1093,1108)"} true;
    call $t7 := $1_Vector_empty'vec'u8''();
    if ($abort_flag) {
        assume {:print "$at(25,1093,1108)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(17,1):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t8 := pack RegisteredCurrencies::RegisteredCurrencies($t7) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:13+56
    $t8 := $1_RegisteredCurrencies_RegisteredCurrencies($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    // >> opaque call: DiemConfig::publish_new_config<RegisteredCurrencies::RegisteredCurrencies>($t0, $t2)
    assume {:print "$at(25,986,1120)"} true;

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: DiemConfig::publish_new_config<RegisteredCurrencies::RegisteredCurrencies>($t0, $t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    assume {:print "$at(25,986,1120)"} true;

    // assume Identical($t10, Or(Or(Or(Or(DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>(), exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0))), Not(exists<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    assume ($t10 == (((($1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t10) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    if ($t10) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
L8:

    // assume Or(Or(Or(Or(DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>(), exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0))), And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t4))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    assume (((($1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'u8'(5, $t4))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    assume {:print "$at(25,986,1120)"} true;
    assume {:print "$track_abort(17,1):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
L7:

    // @441 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    $1_DiemConfig_Configuration_$memory#441 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(a550c18) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'';
        $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816, $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'');
    } else {
        $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816);
    }

    // modifies global<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(a550c18) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'';
        $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceUpdate($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816, $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'');
    } else {
        $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceRemove($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816);
    }

    // assume exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    assume $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0));

    // assume DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    assume $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory);

    // assume Eq<RegisteredCurrencies::RegisteredCurrencies>(DiemConfig::$get<RegisteredCurrencies::RegisteredCurrencies>(), $t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    assume $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory), $t8);

    // assume Eq<bool>(DiemConfig::spec_has_config[@441](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#441), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::publish_new_config<RegisteredCurrencies::RegisteredCurrencies>($t0, $t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+134

    // label L1 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:29:5+1
    assume {:print "$at(25,1126,1127)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:29:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:29:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:29:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun RegisteredCurrencies::add_currency_code [baseline] at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:49:5+449
procedure {:inline 1} $1_RegisteredCurrencies_add_currency_code(_$t0: int, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: $1_RegisteredCurrencies_RegisteredCurrencies;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_DiemConfig_Configuration;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $1_RegisteredCurrencies_RegisteredCurrencies;
    var $t10: Vec (Vec (int));
    var $t11: bool;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($1_RegisteredCurrencies_RegisteredCurrencies);
    var $t16: $Mutation (Vec (Vec (int)));
    var $t17: $1_RegisteredCurrencies_RegisteredCurrencies;
    var $t18: $1_DiemConfig_Configuration;
    var $t19: int;
    var $t20: bool;
    var $t0: int;
    var $t1: Vec (int);
    var $temp_0'$1_DiemConfig_Configuration': $1_DiemConfig_Configuration;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'': $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $temp_0'$1_RegisteredCurrencies_RegisteredCurrencies': $1_RegisteredCurrencies_RegisteredCurrencies;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemConfig_Configuration_$memory#413: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t16));

    // bytecode translation starts here
    // assume Identical($t5, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t5 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t6, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t6 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:49:5+1
    assume {:print "$at(25,1822,1823)"} true;
    assume {:print "$track_local(17,0,0):", $t0} $t0 == $t0;

    // trace_local[currency_code]($t1) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:49:5+1
    assume {:print "$track_local(17,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:22+39
    // >> opaque call: $t2 := DiemConfig::get<RegisteredCurrencies::RegisteredCurrencies>()
    assume {:print "$at(25,1945,1984)"} true;

    // $t2 := opaque begin: DiemConfig::get<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:22+39

    // assume Identical($t7, Not(exists<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:22+39
    assume ($t7 == !$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816));

    // if ($t7) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:22+39
    if ($t7) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:22+39
L5:

    // assume And(Not(exists<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(a550c18)), Eq(5, $t8)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:22+39
    assume (!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816) && $IsEqual'u8'(5, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:22+39
    assume {:print "$at(25,1945,1984)"} true;
    assume {:print "$track_abort(17,0):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:22+39
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:22+39
L4:

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:22+39
    assume $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'($t2);

    // assume Eq<RegisteredCurrencies::RegisteredCurrencies>($t2, DiemConfig::$get<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:22+39
    assume $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($t2, $1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // $t2 := opaque end: DiemConfig::get<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:22+39

    // trace_local[config]($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:53:13+6
    assume {:print "$track_local(17,0,2):", $t2} $t2 == $t2;

    // $t9 := copy($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:32+6
    assume {:print "$at(25,2033,2039)"} true;
    $t9 := $t2;

    // $t10 := get_field<RegisteredCurrencies::RegisteredCurrencies>.currency_codes($t9) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:31+22
    $t10 := $currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($t9);

    // $t11 := Vector::contains<vector<u8>>($t10, $t1) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:14+56
    call $t11 := $1_Vector_contains'vec'u8''($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(25,2015,2071)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(17,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t12 := !($t11) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:13+1
    call $t12 := $Not($t11);

    // $t13 := 0 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:38+28
    assume {:print "$at(25,2110,2138)"} true;
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:13+54
    // >> opaque call: $t10 := Errors::invalid_argument($t9)

    // $t14 := opaque begin: Errors::invalid_argument($t13) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:13+54

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:13+54
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 7) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:13+54
    assume $IsEqual'u64'($t14, 7);

    // $t14 := opaque end: Errors::invalid_argument($t13) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:13+54

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:54:9+155
    assume {:print "$at(25,1994,2149)"} true;
    assume {:print "$track_local(17,0,4):", $t14} $t14 == $t14;

    // trace_local[tmp#$3]($t12) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:54:9+155
    assume {:print "$track_local(17,0,3):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:54:9+155
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:54:9+155
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:54:9+155

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:54:9+155
    assume {:print "$at(25,1994,2149)"} true;
    assume {:print "$track_abort(17,0):", $t14} $t14 == $t14;

    // $t8 := move($t14) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:54:9+155
    $t8 := $t14;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:54:9+155
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:32+6
    assume {:print "$at(25,2182,2188)"} true;
L0:

    // $t15 := borrow_local($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:32+6
    $t15 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t16 := borrow_field<RegisteredCurrencies::RegisteredCurrencies>.currency_codes($t15) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:27+26
    $t16 := $ChildMutation($t15, 0, $currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($Dereference($t15)));

    // Vector::push_back<vector<u8>>($t16, $t1) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:9+60
    call $t16 := $1_Vector_push_back'vec'u8''($t16, $t1);
    if ($abort_flag) {
        assume {:print "$at(25,2159,2219)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(17,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // write_back[Reference($t15).currency_codes]($t16) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:9+60
    $t15 := $UpdateMutation($t15, $Update'$1_RegisteredCurrencies_RegisteredCurrencies'_currency_codes($Dereference($t15), $Dereference($t16)));

    // write_back[LocalRoot($t2)@]($t15) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:9+60
    $t2 := $Dereference($t15);

    // $t17 := move($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:37+6
    assume {:print "$at(25,2257,2263)"} true;
    $t17 := $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    // >> opaque call: DiemConfig::set<RegisteredCurrencies::RegisteredCurrencies>($t0, $t13)

    // assume Identical($t18, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t18 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t19, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t19 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // opaque begin: DiemConfig::set<RegisteredCurrencies::RegisteredCurrencies>($t0, $t17) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    assume {:print "$at(25,2229,2264)"} true;

    // assume Identical($t20, Or(Or(Not(exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0))), Not(exists<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(a550c18))), And(And(And(And(DiemTimestamp::$is_operating(), DiemConfig::$reconfiguration_enabled()), Gt(DiemTimestamp::spec_now_microseconds(), 0)), Lt(select DiemConfig::Configuration.epoch($t18), 18446744073709551615)), Lt($t19, select DiemConfig::Configuration.last_reconfiguration_time($t18))))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    assume ($t20 == ((!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0)) || !$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816)) || (((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > 0)) && ($epoch#$1_DiemConfig_Configuration($t18) < 18446744073709551615)) && ($t19 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t18)))));

    // if ($t20) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    if ($t20) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
L7:

    // assume Or(Or(And(Not(exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0))), Eq(4, $t8)), And(Not(exists<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(a550c18)), Eq(5, $t8))), And(And(And(And(And(DiemTimestamp::$is_operating(), DiemConfig::$reconfiguration_enabled()), Gt(DiemTimestamp::spec_now_microseconds(), 0)), Lt(select DiemConfig::Configuration.epoch($t18), 18446744073709551615)), Lt($t19, select DiemConfig::Configuration.last_reconfiguration_time($t18))), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    assume (((!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t8)) || (!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816) && $IsEqual'u8'(5, $t8))) || ((((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > 0)) && ($epoch#$1_DiemConfig_Configuration($t18) < 18446744073709551615)) && ($t19 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t18))) && $IsEqual'u8'(1, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    assume {:print "$at(25,2229,2264)"} true;
    assume {:print "$track_abort(17,0):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
L6:

    // @413 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    $1_DiemConfig_Configuration_$memory#413 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::Configuration>(a550c18) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_Configuration';
        $1_DiemConfig_Configuration_$memory := $ResourceUpdate($1_DiemConfig_Configuration_$memory, 173345816, $temp_0'$1_DiemConfig_Configuration');
    } else {
        $1_DiemConfig_Configuration_$memory := $ResourceRemove($1_DiemConfig_Configuration_$memory, 173345816);
    }

    // modifies global<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(a550c18) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'';
        $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816, $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'');
    } else {
        $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816);
    }

    // assume DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    assume $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory);

    // assume Eq<RegisteredCurrencies::RegisteredCurrencies>(DiemConfig::$get<RegisteredCurrencies::RegisteredCurrencies>(), $t17) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    assume $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory), $t17);

    // assume Eq<bool>(DiemConfig::spec_has_config[@413](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#413), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::set<RegisteredCurrencies::RegisteredCurrencies>($t0, $t17) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:59:9+35

    // label L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:5+1
    assume {:print "$at(25,2270,2271)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:5+1
L3:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1390:5+109
function {:inline} $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1390:5+109
function {:inline} $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1402:5+242
function {:inline} $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    (var addr := 173345816; ($ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, addr) && $is_synthetic#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:10+117
function {:inline} $1_Diem_spec_scaling_factor'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): int {
    $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1440:10+107
function {:inline} $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1801:9+108
function {:inline} $1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1801:9+108
function {:inline} $1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1801:9+108
function {:inline} $1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1806:9+128
function {:inline} $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): $1_Diem_CurrencyInfo'#0' {
    $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1811:9+156
function {:inline} $1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0', value: int): int {
    $1_FixedPoint32_spec_multiply_u64(value, $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1815:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1821:9+122
function {:inline} $1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory: $Memory $1_Diem_MintCapability'#0', addr: int): bool {
    $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1831:9+130
function {:inline} $1_Diem_spec_make_preburn'#0'(amount: int): $1_Diem_Preburn'#0' {
    $1_Diem_Preburn'#0'($1_Diem_Diem'#0'(amount))
}

// struct Diem::Diem<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:22:5+126
type {:datatype} $1_Diem_Diem'$1_XUS_XUS';
function {:constructor} $1_Diem_Diem'$1_XUS_XUS'($value: int): $1_Diem_Diem'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Diem'$1_XUS_XUS''_value(s: $1_Diem_Diem'$1_XUS_XUS', x: int): $1_Diem_Diem'$1_XUS_XUS' {
    $1_Diem_Diem'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Diem'$1_XUS_XUS''(s: $1_Diem_Diem'$1_XUS_XUS'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XUS_XUS''(s1: $1_Diem_Diem'$1_XUS_XUS', s2: $1_Diem_Diem'$1_XUS_XUS'): bool {
    s1 == s2
}

// struct Diem::Diem<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:22:5+126
type {:datatype} $1_Diem_Diem'$1_XDX_XDX';
function {:constructor} $1_Diem_Diem'$1_XDX_XDX'($value: int): $1_Diem_Diem'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Diem'$1_XDX_XDX''_value(s: $1_Diem_Diem'$1_XDX_XDX', x: int): $1_Diem_Diem'$1_XDX_XDX' {
    $1_Diem_Diem'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Diem'$1_XDX_XDX''(s: $1_Diem_Diem'$1_XDX_XDX'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XDX_XDX''(s1: $1_Diem_Diem'$1_XDX_XDX', s2: $1_Diem_Diem'$1_XDX_XDX'): bool {
    s1 == s2
}

// struct Diem::Diem<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:22:5+126
type {:datatype} $1_Diem_Diem'#0';
function {:constructor} $1_Diem_Diem'#0'($value: int): $1_Diem_Diem'#0';
function {:inline} $Update'$1_Diem_Diem'#0''_value(s: $1_Diem_Diem'#0', x: int): $1_Diem_Diem'#0' {
    $1_Diem_Diem'#0'(x)
}
function $IsValid'$1_Diem_Diem'#0''(s: $1_Diem_Diem'#0'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'#0''(s1: $1_Diem_Diem'#0', s2: $1_Diem_Diem'#0'): bool {
    s1 == s2
}

// struct Diem::BurnCapability<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:35:5+50
type {:datatype} $1_Diem_BurnCapability'$1_XUS_XUS';
function {:constructor} $1_Diem_BurnCapability'$1_XUS_XUS'($dummy_field: bool): $1_Diem_BurnCapability'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XUS_XUS''_dummy_field(s: $1_Diem_BurnCapability'$1_XUS_XUS', x: bool): $1_Diem_BurnCapability'$1_XUS_XUS' {
    $1_Diem_BurnCapability'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''(s: $1_Diem_BurnCapability'$1_XUS_XUS'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XUS_XUS''(s1: $1_Diem_BurnCapability'$1_XUS_XUS', s2: $1_Diem_BurnCapability'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_BurnCapability'$1_XUS_XUS';

// struct Diem::BurnCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:35:5+50
type {:datatype} $1_Diem_BurnCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_BurnCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_BurnCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_BurnCapability'$1_XDX_XDX', x: bool): $1_Diem_BurnCapability'$1_XDX_XDX' {
    $1_Diem_BurnCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''(s: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XDX_XDX''(s1: $1_Diem_BurnCapability'$1_XDX_XDX', s2: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_BurnCapability'$1_XDX_XDX';

// struct Diem::BurnCapability<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:35:5+50
type {:datatype} $1_Diem_BurnCapability'#0';
function {:constructor} $1_Diem_BurnCapability'#0'($dummy_field: bool): $1_Diem_BurnCapability'#0';
function {:inline} $Update'$1_Diem_BurnCapability'#0''_dummy_field(s: $1_Diem_BurnCapability'#0', x: bool): $1_Diem_BurnCapability'#0' {
    $1_Diem_BurnCapability'#0'(x)
}
function $IsValid'$1_Diem_BurnCapability'#0''(s: $1_Diem_BurnCapability'#0'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'#0''(s1: $1_Diem_BurnCapability'#0', s2: $1_Diem_BurnCapability'#0'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'#0'_$memory: $Memory $1_Diem_BurnCapability'#0';

// struct Diem::BurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:56:5+323
type {:datatype} $1_Diem_BurnEvent;
function {:constructor} $1_Diem_BurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_BurnEvent;
function {:inline} $Update'$1_Diem_BurnEvent'_amount(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent(x, $currency_code#$1_Diem_BurnEvent(s), $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_currency_code(s: $1_Diem_BurnEvent, x: Vec (int)): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), x, $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_preburn_address(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), $currency_code#$1_Diem_BurnEvent(s), x)
}
function $IsValid'$1_Diem_BurnEvent'(s: $1_Diem_BurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_BurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_BurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_BurnEvent'(s1: $1_Diem_BurnEvent, s2: $1_Diem_BurnEvent): bool {
    s1 == s2
}

// struct Diem::CancelBurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:81:5+327
type {:datatype} $1_Diem_CancelBurnEvent;
function {:constructor} $1_Diem_CancelBurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_CancelBurnEvent;
function {:inline} $Update'$1_Diem_CancelBurnEvent'_amount(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent(x, $currency_code#$1_Diem_CancelBurnEvent(s), $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_currency_code(s: $1_Diem_CancelBurnEvent, x: Vec (int)): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), x, $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_preburn_address(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), $currency_code#$1_Diem_CancelBurnEvent(s), x)
}
function $IsValid'$1_Diem_CancelBurnEvent'(s: $1_Diem_CancelBurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_CancelBurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CancelBurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_CancelBurnEvent'(s1: $1_Diem_CancelBurnEvent, s2: $1_Diem_CancelBurnEvent): bool {
    s1 == s2
}

// struct Diem::CurrencyInfo<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:109:5+2300
type {:datatype} $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:constructor} $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_total_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_currency_code(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_can_mint(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_mint_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s1: $1_Diem_CurrencyInfo'$1_XUS_XUS', s2: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';

// struct Diem::CurrencyInfo<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:109:5+2300
type {:datatype} $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:constructor} $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_total_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_currency_code(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_can_mint(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_mint_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s1: $1_Diem_CurrencyInfo'$1_XDX_XDX', s2: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';

// struct Diem::CurrencyInfo<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:109:5+2300
type {:datatype} $1_Diem_CurrencyInfo'#0';
function {:constructor} $1_Diem_CurrencyInfo'#0'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#0';
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_total_value(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'(x, $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_preburn_value(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'#0', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_is_synthetic(s: $1_Diem_CurrencyInfo'#0', x: bool): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_scaling_factor(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), x, $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_fractional_part(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), x, $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_currency_code(s: $1_Diem_CurrencyInfo'#0', x: Vec (int)): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), x, $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_can_mint(s: $1_Diem_CurrencyInfo'#0', x: bool): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), x, $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_mint_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), x, $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_burn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), x, $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_preburn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_cancel_burn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'#0''(s: $1_Diem_CurrencyInfo'#0'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'#0''(s1: $1_Diem_CurrencyInfo'#0', s2: $1_Diem_CurrencyInfo'#0'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0';

// struct Diem::MintCapability<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:31:5+50
type {:datatype} $1_Diem_MintCapability'$1_XUS_XUS';
function {:constructor} $1_Diem_MintCapability'$1_XUS_XUS'($dummy_field: bool): $1_Diem_MintCapability'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_MintCapability'$1_XUS_XUS''_dummy_field(s: $1_Diem_MintCapability'$1_XUS_XUS', x: bool): $1_Diem_MintCapability'$1_XUS_XUS' {
    $1_Diem_MintCapability'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XUS_XUS''(s: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XUS_XUS''(s1: $1_Diem_MintCapability'$1_XUS_XUS', s2: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_MintCapability'$1_XUS_XUS';

// struct Diem::MintCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:31:5+50
type {:datatype} $1_Diem_MintCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_MintCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_MintCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_MintCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_MintCapability'$1_XDX_XDX', x: bool): $1_Diem_MintCapability'$1_XDX_XDX' {
    $1_Diem_MintCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''(s: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XDX_XDX''(s1: $1_Diem_MintCapability'$1_XDX_XDX', s2: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_MintCapability'$1_XDX_XDX';

// struct Diem::MintCapability<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:31:5+50
type {:datatype} $1_Diem_MintCapability'#0';
function {:constructor} $1_Diem_MintCapability'#0'($dummy_field: bool): $1_Diem_MintCapability'#0';
function {:inline} $Update'$1_Diem_MintCapability'#0''_dummy_field(s: $1_Diem_MintCapability'#0', x: bool): $1_Diem_MintCapability'#0' {
    $1_Diem_MintCapability'#0'(x)
}
function $IsValid'$1_Diem_MintCapability'#0''(s: $1_Diem_MintCapability'#0'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'#0''(s1: $1_Diem_MintCapability'#0', s2: $1_Diem_MintCapability'#0'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'#0'_$memory: $Memory $1_Diem_MintCapability'#0';

// struct Diem::MintEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:42:5+199
type {:datatype} $1_Diem_MintEvent;
function {:constructor} $1_Diem_MintEvent($amount: int, $currency_code: Vec (int)): $1_Diem_MintEvent;
function {:inline} $Update'$1_Diem_MintEvent'_amount(s: $1_Diem_MintEvent, x: int): $1_Diem_MintEvent {
    $1_Diem_MintEvent(x, $currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $Update'$1_Diem_MintEvent'_currency_code(s: $1_Diem_MintEvent, x: Vec (int)): $1_Diem_MintEvent {
    $1_Diem_MintEvent($amount#$1_Diem_MintEvent(s), x)
}
function $IsValid'$1_Diem_MintEvent'(s: $1_Diem_MintEvent): bool {
    $IsValid'u64'($amount#$1_Diem_MintEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $IsEqual'$1_Diem_MintEvent'(s1: $1_Diem_MintEvent, s2: $1_Diem_MintEvent): bool {
    s1 == s2
}

// struct Diem::Preburn<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:168:5+232
type {:datatype} $1_Diem_Preburn'$1_XUS_XUS';
function {:constructor} $1_Diem_Preburn'$1_XUS_XUS'($to_burn: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Preburn'$1_XUS_XUS''_to_burn(s: $1_Diem_Preburn'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS' {
    $1_Diem_Preburn'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XUS_XUS''(s: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($to_burn#$1_Diem_Preburn'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XUS_XUS''(s1: $1_Diem_Preburn'$1_XUS_XUS', s2: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XUS_XUS'_$memory: $Memory $1_Diem_Preburn'$1_XUS_XUS';

// struct Diem::Preburn<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:168:5+232
type {:datatype} $1_Diem_Preburn'$1_XDX_XDX';
function {:constructor} $1_Diem_Preburn'$1_XDX_XDX'($to_burn: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Preburn'$1_XDX_XDX''_to_burn(s: $1_Diem_Preburn'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX' {
    $1_Diem_Preburn'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XDX_XDX''(s: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($to_burn#$1_Diem_Preburn'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XDX_XDX''(s1: $1_Diem_Preburn'$1_XDX_XDX', s2: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XDX_XDX'_$memory: $Memory $1_Diem_Preburn'$1_XDX_XDX';

// struct Diem::Preburn<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:168:5+232
type {:datatype} $1_Diem_Preburn'#0';
function {:constructor} $1_Diem_Preburn'#0'($to_burn: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0';
function {:inline} $Update'$1_Diem_Preburn'#0''_to_burn(s: $1_Diem_Preburn'#0', x: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0' {
    $1_Diem_Preburn'#0'(x)
}
function $IsValid'$1_Diem_Preburn'#0''(s: $1_Diem_Preburn'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($to_burn#$1_Diem_Preburn'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'#0''(s1: $1_Diem_Preburn'#0', s2: $1_Diem_Preburn'#0'): bool {
    s1 == s2
}
var $1_Diem_Preburn'#0'_$memory: $Memory $1_Diem_Preburn'#0';

// struct Diem::PreburnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:68:5+355
type {:datatype} $1_Diem_PreburnEvent;
function {:constructor} $1_Diem_PreburnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_PreburnEvent;
function {:inline} $Update'$1_Diem_PreburnEvent'_amount(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent(x, $currency_code#$1_Diem_PreburnEvent(s), $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_currency_code(s: $1_Diem_PreburnEvent, x: Vec (int)): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), x, $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_preburn_address(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), $currency_code#$1_Diem_PreburnEvent(s), x)
}
function $IsValid'$1_Diem_PreburnEvent'(s: $1_Diem_PreburnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_PreburnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_PreburnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnEvent'(s1: $1_Diem_PreburnEvent, s2: $1_Diem_PreburnEvent): bool {
    s1 == s2
}

// struct Diem::PreburnQueue<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:192:5+144
type {:datatype} $1_Diem_PreburnQueue'$1_XUS_XUS';
function {:constructor} $1_Diem_PreburnQueue'$1_XUS_XUS'($preburns: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $1_Diem_PreburnQueue'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_PreburnQueue'$1_XUS_XUS''_preburns(s: $1_Diem_PreburnQueue'$1_XUS_XUS', x: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $1_Diem_PreburnQueue'$1_XUS_XUS' {
    $1_Diem_PreburnQueue'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''(s: $1_Diem_PreburnQueue'$1_XUS_XUS'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'$1_XUS_XUS''(s1: $1_Diem_PreburnQueue'$1_XUS_XUS', s2: $1_Diem_PreburnQueue'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';

// struct Diem::PreburnQueue<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:192:5+144
type {:datatype} $1_Diem_PreburnQueue'$1_XDX_XDX';
function {:constructor} $1_Diem_PreburnQueue'$1_XDX_XDX'($preburns: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $1_Diem_PreburnQueue'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_PreburnQueue'$1_XDX_XDX''_preburns(s: $1_Diem_PreburnQueue'$1_XDX_XDX', x: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $1_Diem_PreburnQueue'$1_XDX_XDX' {
    $1_Diem_PreburnQueue'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_PreburnQueue'$1_XDX_XDX''(s: $1_Diem_PreburnQueue'$1_XDX_XDX'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'$1_XDX_XDX''(s1: $1_Diem_PreburnQueue'$1_XDX_XDX', s2: $1_Diem_PreburnQueue'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory: $Memory $1_Diem_PreburnQueue'$1_XDX_XDX';

// struct Diem::PreburnQueue<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:192:5+144
type {:datatype} $1_Diem_PreburnQueue'#0';
function {:constructor} $1_Diem_PreburnQueue'#0'($preburns: Vec ($1_Diem_PreburnWithMetadata'#0')): $1_Diem_PreburnQueue'#0';
function {:inline} $Update'$1_Diem_PreburnQueue'#0''_preburns(s: $1_Diem_PreburnQueue'#0', x: Vec ($1_Diem_PreburnWithMetadata'#0')): $1_Diem_PreburnQueue'#0' {
    $1_Diem_PreburnQueue'#0'(x)
}
function $IsValid'$1_Diem_PreburnQueue'#0''(s: $1_Diem_PreburnQueue'#0'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''($preburns#$1_Diem_PreburnQueue'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'#0''(s1: $1_Diem_PreburnQueue'#0', s2: $1_Diem_PreburnQueue'#0'): bool {
    s1 == s2
}
var $1_Diem_PreburnQueue'#0'_$memory: $Memory $1_Diem_PreburnQueue'#0';

// struct Diem::PreburnWithMetadata<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:176:5+120
type {:datatype} $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
function {:constructor} $1_Diem_PreburnWithMetadata'$1_XUS_XUS'($preburn: $1_Diem_Preburn'$1_XUS_XUS', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''_preburn(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    $1_Diem_PreburnWithMetadata'$1_XUS_XUS'(x, $metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''_metadata(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', x: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    $1_Diem_PreburnWithMetadata'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(s1: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', s2: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    s1 == s2
}

// struct Diem::PreburnWithMetadata<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:176:5+120
type {:datatype} $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
function {:constructor} $1_Diem_PreburnWithMetadata'$1_XDX_XDX'($preburn: $1_Diem_Preburn'$1_XDX_XDX', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''_preburn(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', x: $1_Diem_Preburn'$1_XDX_XDX'): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    $1_Diem_PreburnWithMetadata'$1_XDX_XDX'(x, $metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''_metadata(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', x: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    $1_Diem_PreburnWithMetadata'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(s1: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', s2: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    s1 == s2
}

// struct Diem::PreburnWithMetadata<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:176:5+120
type {:datatype} $1_Diem_PreburnWithMetadata'#0';
function {:constructor} $1_Diem_PreburnWithMetadata'#0'($preburn: $1_Diem_Preburn'#0', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'#0';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#0''_preburn(s: $1_Diem_PreburnWithMetadata'#0', x: $1_Diem_Preburn'#0'): $1_Diem_PreburnWithMetadata'#0' {
    $1_Diem_PreburnWithMetadata'#0'(x, $metadata#$1_Diem_PreburnWithMetadata'#0'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#0''_metadata(s: $1_Diem_PreburnWithMetadata'#0', x: Vec (int)): $1_Diem_PreburnWithMetadata'#0' {
    $1_Diem_PreburnWithMetadata'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'#0''(s: $1_Diem_PreburnWithMetadata'#0'): bool {
    $IsValid'$1_Diem_Preburn'#0''($preburn#$1_Diem_PreburnWithMetadata'#0'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'#0''(s1: $1_Diem_PreburnWithMetadata'#0', s2: $1_Diem_PreburnWithMetadata'#0'): bool {
    s1 == s2
}

// struct Diem::ToXDXExchangeRateUpdateEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:92:5+424
type {:datatype} $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:constructor} $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code: Vec (int), $new_to_xdx_exchange_rate: int): $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_currency_code(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: Vec (int)): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent(x, $new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_new_to_xdx_exchange_rate(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: int): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s), x)
}
function $IsValid'$1_Diem_ToXDXExchangeRateUpdateEvent'(s: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
      && $IsValid'u64'($new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(s1: $1_Diem_ToXDXExchangeRateUpdateEvent, s2: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    s1 == s2
}

// fun Diem::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
procedure {:inline 1} $1_Diem_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+1
    assume {:print "$at(10,12600,12601)"} true;
    assume {:print "$track_local(18,16,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(10,12668,12699)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31

    // assume Identical($t3, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
    assume ($t3 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
    assume {:print "$at(10,12668,12699)"} true;
    assume {:print "$track_abort(18,16):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(10,12743,12786)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43

    // assume Identical($t5, Neq<address>(Signer::spec_address_of($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
    assume ($t5 == !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
L6:

    // assume And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
    assume {:print "$at(10,12743,12786)"} true;
    assume {:print "$track_abort(18,16):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
L5:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // RegisteredCurrencies::initialize($t0) on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:252:9+44
    assume {:print "$at(10,12796,12840)"} true;
    call $1_RegisteredCurrencies_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(10,12796,12840)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(18,16):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:5+1
    assume {:print "$at(10,12846,12847)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:253:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::initialize [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
procedure {:timeLimit 40} $1_Diem_initialize$verify(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t0: int;
    var $temp_0'address': int;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Roles_RoleId_$memory#443: $Memory $1_Roles_RoleId;
    var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#444: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#445: $Memory $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $1_DiemConfig_Configuration_$memory#446: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:169:9+72
    assume {:print "$at(10,12600,12847)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:409:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+247
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // @442 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+1
    assume {:print "$at(10,12600,12601)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @443 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+1
    $1_Roles_RoleId_$memory#443 := $1_Roles_RoleId_$memory;

    // @446 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+1
    $1_DiemConfig_Configuration_$memory#446 := $1_DiemConfig_Configuration_$memory;

    // @444 := save_mem(DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+1
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#444 := $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory;

    // @445 := save_mem(DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+1
    $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#445 := $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:246:5+1
    assume {:print "$track_local(18,16,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(10,12668,12699)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31

    // assume Identical($t3, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
    assume ($t3 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
    assume {:print "$at(10,12668,12699)"} true;
    assume {:print "$track_abort(18,16):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Diem.move:249:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(10,12743,12786)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43

    // assume Identical($t5, Neq<address>(Signer::spec_address_of($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
    assume ($t5 == !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
L6:

    // assume And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
    assume {:print "$at(10,12743,12786)"} true;
    assume {:print "$track_abort(18,16):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43
L5:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+43

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // RegisteredCurrencies::initialize($t0) on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:252:9+44
    assume {:print "$at(10,12796,12840)"} true;
    call $1_RegisteredCurrencies_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(10,12796,12840)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(18,16):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:5+1
    assume {:print "$at(10,12846,12847)"} true;
L1:

    // assert Not(Not(DiemTimestamp::$is_genesis[@442]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:140:9+51
    assume {:print "$at(17,5622,5673)"} true;
    assert {:msg "assert_failed(17,5622,5673): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:41:9+86
    assume {:print "$at(8,1561,1647)"} true;
    assert {:msg "assert_failed(8,1561,1647): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // assert Not(Not(DiemTimestamp::$is_genesis[@442]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:140:9+51
    assume {:print "$at(17,5622,5673)"} true;
    assert {:msg "assert_failed(17,5622,5673): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442);

    // assert Not(Not(exists[@443]<Roles::RoleId>($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:526:9+59
    assume {:print "$at(26,23574,23633)"} true;
    assert {:msg "assert_failed(26,23574,23633): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#443, $t1);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@443]<Roles::RoleId>($t1)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+87
    assume {:print "$at(26,23642,23729)"} true;
    assert {:msg "assert_failed(26,23642,23729): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#443, $t1)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:41:9+86
    assume {:print "$at(8,1561,1647)"} true;
    assert {:msg "assert_failed(8,1561,1647): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // assert Not(DiemConfig::spec_is_published[@444]<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:257:9+38
    assume {:print "$at(13,10749,10787)"} true;
    assert {:msg "assert_failed(13,10749,10787): function does not abort under this condition"}
      !$1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#444);

    // assert Not(exists[@445]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:258:9+86
    assume {:print "$at(13,10796,10882)"} true;
    assert {:msg "assert_failed(13,10796,10882): function does not abort under this condition"}
      !$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#445, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@443]<Roles::RoleId>($t2))) at /home/ying/diem/language/diem-framework/modules/Roles.move:526:9+59
    assume {:print "$at(26,23574,23633)"} true;
    assert {:msg "assert_failed(26,23574,23633): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#443, $t2);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@443]<Roles::RoleId>($t2)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+87
    assume {:print "$at(26,23642,23729)"} true;
    assert {:msg "assert_failed(26,23642,23729): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#443, $t2)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:41:9+86
    assume {:print "$at(8,1561,1647)"} true;
    assert {:msg "assert_failed(8,1561,1647): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // assert Eq<num>(Len<vector<u8>>(RegisteredCurrencies::get_currency_codes()), 0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:45:9+39
    assume {:print "$at(25,1699,1738)"} true;
    assert {:msg "assert_failed(25,1699,1738): post-condition does not hold"}
      $IsEqual'num'(LenVec($1_RegisteredCurrencies_get_currency_codes($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory)), 0);

    // assert exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:264:9+84
    assume {:print "$at(13,11036,11120)"} true;
    assert {:msg "assert_failed(13,11036,11120): post-condition does not hold"}
      $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0));

    // assert DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:142:9+36
    assume {:print "$at(13,5647,5683)"} true;
    assert {:msg "assert_failed(13,5647,5683): post-condition does not hold"}
      $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory);

    // assert Eq<RegisteredCurrencies::RegisteredCurrencies>(DiemConfig::$get<RegisteredCurrencies::RegisteredCurrencies>(), pack RegisteredCurrencies::RegisteredCurrencies(Vector::$empty<vector<u8>>())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:143:9+33
    assume {:print "$at(13,5692,5725)"} true;
    assert {:msg "assert_failed(13,5692,5725): post-condition does not hold"}
      $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory), $1_RegisteredCurrencies_RegisteredCurrencies($1_Vector_$empty'vec'u8''()));

    // assert Eq<bool>(DiemConfig::spec_has_config[@446](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:144:9+52
    assume {:print "$at(13,5734,5786)"} true;
    assert {:msg "assert_failed(13,5734,5786): post-condition does not hold"}
      $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#446), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:144:9+52
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:5+1
    assume {:print "$at(10,12846,12847)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemTimestamp::$is_genesis[@442]()), Neq<address>(Signer::spec_address_of[]($t0), a550c18)), Not(DiemTimestamp::$is_genesis[@442]())), Not(exists[@443]<Roles::RoleId>($t1))), Neq<u64>(select Roles::RoleId.role_id(global[@443]<Roles::RoleId>($t1)), 0)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)), DiemConfig::spec_is_published[@444]<RegisteredCurrencies::RegisteredCurrencies>()), exists[@445]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0))), Not(exists[@443]<Roles::RoleId>($t2))), Neq<u64>(select Roles::RoleId.role_id(global[@443]<Roles::RoleId>($t2)), 0)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:254:5+262
    assume {:print "$at(10,12852,13114)"} true;
    assert {:msg "assert_failed(10,12852,13114): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442)) || !$ResourceExists($1_Roles_RoleId_$memory#443, $t1)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#443, $t1)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)) || $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#444)) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#445, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#443, $t2)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#443, $t2)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemTimestamp::$is_genesis[@442]()), Eq(1, $t4)), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t4))), And(Not(DiemTimestamp::$is_genesis[@442]()), Eq(1, $t4))), And(Not(exists[@443]<Roles::RoleId>($t1)), Eq(5, $t4))), And(Neq<u64>(select Roles::RoleId.role_id(global[@443]<Roles::RoleId>($t1)), 0), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t4))), DiemConfig::spec_is_published[@444]<RegisteredCurrencies::RegisteredCurrencies>()), exists[@445]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0))), And(Not(exists[@443]<Roles::RoleId>($t2)), Eq(5, $t4))), And(Neq<u64>(select Roles::RoleId.role_id(global[@443]<Roles::RoleId>($t2)), 0), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:254:5+262
    assert {:msg "assert_failed(10,12852,13114): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442) && $IsEqual'u8'(1, $t4)) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t4))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442) && $IsEqual'u8'(1, $t4))) || (!$ResourceExists($1_Roles_RoleId_$memory#443, $t1) && $IsEqual'u8'(5, $t4))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#443, $t1)), 0) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t4))) || $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#444)) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#445, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory#443, $t2) && $IsEqual'u8'(5, $t4))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#443, $t2)), 0) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t4)));

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:254:5+262
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::value<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1115:5+88
procedure {:inline 1} $1_Diem_value'#0'(_$t0: $1_Diem_Diem'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1115:5+1
    assume {:print "$at(10,53805,53806)"} true;
    assume {:print "$track_local(18,39,0):", $t0} $t0 == $t0;

    // $t1 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1116:9+10
    assume {:print "$at(10,53877,53887)"} true;
    $t1 := $value#$1_Diem_Diem'#0'($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1116:9+10
    assume {:print "$track_return(18,39,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+1
    assume {:print "$at(10,53892,53893)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+1
    $ret0 := $t1;
    return;

}

// fun Diem::value [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1115:5+88
procedure {:timeLimit 40} $1_Diem_value$verify(_$t0: $1_Diem_Diem'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#110: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#111: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#112: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#113: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#114: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1115:5+88
    assume {:print "$at(10,53805,53893)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // @112 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1115:5+1
    $1_Diem_BurnCapability'#0'_$memory#112 := $1_Diem_BurnCapability'#0'_$memory;

    // @110 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1115:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#110 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @111 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1115:5+1
    $1_Diem_MintCapability'#0'_$memory#111 := $1_Diem_MintCapability'#0'_$memory;

    // @114 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1115:5+1
    $1_Diem_Preburn'#0'_$memory#114 := $1_Diem_Preburn'#0'_$memory;

    // @113 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1115:5+1
    $1_Diem_PreburnQueue'#0'_$memory#113 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1115:5+1
    assume {:print "$track_local(18,39,0):", $t0} $t0 == $t0;

    // $t1 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1116:9+10
    assume {:print "$at(10,53877,53887)"} true;
    $t1 := $value#$1_Diem_Diem'#0'($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1116:9+10
    assume {:print "$track_return(18,39,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+1
    assume {:print "$at(10,53892,53893)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@110]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@110]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#110) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#110))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@111]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#111, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@111]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#111, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@110]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@110]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#110) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#110))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@112]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#112, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@112]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#112, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@110]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@110]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#110) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#110))));

    // assert Implies(Diem::spec_is_currency[@110]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@110]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#110) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#110))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@113]<Diem::PreburnQueue<#0>>(addr), exists[@114]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#113, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#114, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@113]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#113, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@110]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@110]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#110) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#110))));

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t1;
    return;

}

// fun Diem::currency_code [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1430:5+206
procedure {:timeLimit 40} $1_Diem_currency_code$verify() returns ($ret0: Vec (int))
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: Vec (int);
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_CurrencyInfo'#0'_$memory#223: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#224: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#225: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#226: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#227: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1438:17+6
    assume {:print "$at(10,67599,67605)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @225 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1430:5+1
    assume {:print "$at(10,67282,67283)"} true;
    $1_Diem_BurnCapability'#0'_$memory#225 := $1_Diem_BurnCapability'#0'_$memory;

    // @223 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1430:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#223 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @224 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1430:5+1
    $1_Diem_MintCapability'#0'_$memory#224 := $1_Diem_MintCapability'#0'_$memory;

    // @227 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1430:5+1
    $1_Diem_Preburn'#0'_$memory#227 := $1_Diem_Preburn'#0'_$memory;

    // @226 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1430:5+1
    $1_Diem_PreburnQueue'#0'_$memory#226 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,67374,67404)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:9+30
    assume {:print "$at(10,67374,67404)"} true;
    assume {:print "$track_abort(18,12):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:9+30

    // $t2 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1433:49+13
    assume {:print "$at(10,67454,67467)"} true;
    $t2 := 173345816;
    assume $IsValid'address'($t2);

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1433:11+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,67416,67429)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(18,12):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.currency_code($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1433:10+67
    $t4 := $currency_code#$1_Diem_CurrencyInfo'#0'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1433:9+68
    assume {:print "$track_return(18,12,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1434:5+1
    assume {:print "$at(10,67487,67488)"} true;
L1:

    // assert Not(Not(Diem::spec_is_currency[@223]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223);

    // assert Eq<vector<u8>>($t4, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1438:9+49
    assume {:print "$at(10,67591,67640)"} true;
    assert {:msg "assert_failed(10,67591,67640): post-condition does not hold"}
      $IsEqual'vec'u8''($t4, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert Implies(Diem::spec_is_currency[@223]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@223]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#223))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@224]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#224, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@224]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#224, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@223]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@223]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#223))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@225]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#225, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@225]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#225, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@223]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@223]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#223))));

    // assert Implies(Diem::spec_is_currency[@223]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@223]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#223))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@226]<Diem::PreburnQueue<#0>>(addr), exists[@227]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#226, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#227, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@226]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#226, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@223]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@223]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#223))));

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1434:5+1
    assume {:print "$at(10,67487,67488)"} true;
L2:

    // assert Not(Diem::spec_is_currency[@223]<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1435:5+153
    assume {:print "$at(10,67493,67646)"} true;
    assert {:msg "assert_failed(10,67493,67646): abort not covered by any of the `aborts_if` clauses"}
      !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223);

    // assert And(Not(Diem::spec_is_currency[@223]<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1435:5+153
    assert {:msg "assert_failed(10,67493,67646): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223) && $IsEqual'u8'(5, $t1));

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1435:5+153
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::add_preburn_to_queue [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:706:5+662
procedure {:timeLimit 40} $1_Diem_add_preburn_to_queue$verify(_$t0: int, _$t1: $1_Diem_PreburnWithMetadata'#0') returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'));
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_Diem_Preburn'#0';
    var $t19: $1_Diem_Diem'#0';
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: $Mutation ($1_Diem_PreburnQueue'#0');
    var $t26: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'));
    var $t27: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t28: int;
    var $t29: int;
    var $t30: bool;
    var $t31: int;
    var $t32: int;
    var $t33: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t0: int;
    var $t1: $1_Diem_PreburnWithMetadata'#0';
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_PreburnWithMetadata'#0'': $1_Diem_PreburnWithMetadata'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''': Vec ($1_Diem_PreburnWithMetadata'#0');
    var $1_Diem_PreburnQueue'#0'_$memory#163: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#164: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#165: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#166: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_Preburn'#0'_$memory#167: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t25));
    assume IsEmptyVec(p#$Mutation($t26));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:706:5+662
    assume {:print "$at(10,33681,34343)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:706:5+662
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t1);

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:706:5+662
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:720:9+52
    assume {:print "$at(10,34407,34459)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t10))) at /home/ying/diem/language/diem-framework/modules/Diem.move:721:9+69
    assume {:print "$at(10,34468,34537)"} true;
    assume ($t11 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t10)));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:732:9+52
    assume {:print "$at(10,35109,35161)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume CanModify<Diem::PreburnQueue<#0>>($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:723:9+54
    assume {:print "$at(10,34634,34688)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t10];

    // @166 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:723:9+54
    $1_Diem_BurnCapability'#0'_$memory#166 := $1_Diem_BurnCapability'#0'_$memory;

    // @164 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:723:9+54
    $1_Diem_CurrencyInfo'#0'_$memory#164 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @165 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:723:9+54
    $1_Diem_MintCapability'#0'_$memory#165 := $1_Diem_MintCapability'#0'_$memory;

    // @167 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:723:9+54
    $1_Diem_Preburn'#0'_$memory#167 := $1_Diem_Preburn'#0'_$memory;

    // @163 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:723:9+54
    $1_Diem_PreburnQueue'#0'_$memory#163 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:706:5+1
    assume {:print "$at(10,33681,33682)"} true;
    assume {:print "$track_local(18,0,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:706:5+1
    assume {:print "$track_local(18,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:708:28+27
    // >> opaque call: $t10 := Signer::address_of($t0)
    assume {:print "$at(10,33836,33863)"} true;

    // $t13 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:708:28+27

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:708:28+27
    assume $IsValid'address'($t13);

    // assume Eq<address>($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:708:28+27
    assume $IsEqual'address'($t13, $1_Signer_spec_address_of($t0));

    // $t13 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:708:28+27

    // trace_local[account_addr]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:708:13+12
    assume {:print "$track_local(18,0,2):", $t13} $t13 == $t13;

    // $t14 := exists<Diem::PreburnQueue<#0>>($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:709:16+6
    assume {:print "$at(10,33880,33886)"} true;
    $t14 := $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t13);

    // $t15 := 11 at /home/ying/diem/language/diem-framework/modules/Diem.move:709:84+14
    $t15 := 11;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:709:62+37
    // >> opaque call: $t13 := Errors::invalid_state($t12)

    // $t16 := opaque begin: Errors::invalid_state($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:709:62+37

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:709:62+37
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:709:62+37
    assume $IsEqual'u64'($t16, 1);

    // $t16 := opaque end: Errors::invalid_state($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:709:62+37

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:709:9+91
    assume {:print "$track_local(18,0,5):", $t16} $t16 == $t16;

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:709:9+91
    assume {:print "$track_local(18,0,4):", $t14} $t14 == $t14;

    // if ($t14) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:709:9+91
    if ($t14) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:709:9+91
L1:

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:709:9+91
    assume {:print "$at(10,33873,33964)"} true;
    assume {:print "$track_abort(18,0):", $t16} $t16 == $t16;

    // $t17 := move($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:709:9+91
    $t17 := $t16;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:709:9+91
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:710:23+7
    assume {:print "$at(10,33988,33995)"} true;
L0:

    // $t18 := get_field<Diem::PreburnWithMetadata<#0>>.preburn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:23+15
    $t18 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t1);

    // $t19 := get_field<Diem::Preburn<#0>>.to_burn($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:22+24
    $t19 := $to_burn#$1_Diem_Preburn'#0'($t18);

    // $t20 := Diem::value<#0>($t19) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:710:16+31
    call $t20 := $1_Diem_value'#0'($t19);
    if ($abort_flag) {
        assume {:print "$at(10,33981,34012)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t21 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:710:50+1
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // $t22 := >($t20, $t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:48+1
    call $t22 := $Gt($t20, $t21);

    // $t23 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:710:78+8
    $t23 := 2;
    assume $IsValid'u64'($t23);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:710:53+34
    // >> opaque call: $t20 := Errors::invalid_argument($t19)

    // $t24 := opaque begin: Errors::invalid_argument($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:53+34

    // assume WellFormed($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:53+34
    assume $IsValid'u64'($t24);

    // assume Eq<u64>($t24, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:53+34
    assume $IsEqual'u64'($t24, 7);

    // $t24 := opaque end: Errors::invalid_argument($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:53+34

    // trace_local[tmp#$7]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:9+79
    assume {:print "$track_local(18,0,7):", $t24} $t24 == $t24;

    // trace_local[tmp#$6]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:9+79
    assume {:print "$track_local(18,0,6):", $t22} $t22 == $t22;

    // if ($t22) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:710:9+79
    if ($t22) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:710:9+79
L3:

    // trace_abort($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:9+79
    assume {:print "$at(10,33974,34053)"} true;
    assume {:print "$track_abort(18,0):", $t24} $t24 == $t24;

    // $t17 := move($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:9+79
    $t17 := $t24;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:710:9+79
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:711:71+12
    assume {:print "$at(10,34125,34137)"} true;
L2:

    // assert CanModify<Diem::PreburnQueue<#0>>($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:711:29+17
    assert {:msg "assert_failed(10,34083,34100): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t13];

    // $t25 := borrow_global<Diem::PreburnQueue<#0>>($t13) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:711:29+17
    if (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t13)) {
        call $ExecFailureAbort();
    } else {
        $t25 := $Mutation($Global($t13), EmptyVec(), $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t13));
    }
    if ($abort_flag) {
        assume {:print "$at(10,34083,34100)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t26 := borrow_field<Diem::PreburnQueue<#0>>.preburns($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:711:24+69
    $t26 := $ChildMutation($t25, 0, $preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25)));

    // trace_local[preburns]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:711:13+8
    $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''' := $Dereference($t26);
    assume {:print "$track_local(18,0,3):", $temp_0'vec'$1_Diem_PreburnWithMetadata'#0'''} $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''' == $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''';

    // $t27 := read_ref($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:713:28+8
    assume {:print "$at(10,34192,34200)"} true;
    $t27 := $Dereference($t26);

    // $t28 := Vector::length<Diem::PreburnWithMetadata<#0>>($t27) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:713:13+24
    call $t28 := $1_Vector_length'$1_Diem_PreburnWithMetadata'#0''($t27);
    if ($abort_flag) {
        assume {:print "$at(10,34177,34201)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t29 := 256 at /home/ying/diem/language/diem-framework/modules/Diem.move:713:40+24
    $t29 := 256;
    assume $IsValid'u64'($t29);

    // $t30 := <($t28, $t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:713:38+1
    call $t30 := $Lt($t28, $t29);

    // $t31 := 11 at /home/ying/diem/language/diem-framework/modules/Diem.move:714:36+14
    assume {:print "$at(10,34265,34279)"} true;
    $t31 := 11;
    assume $IsValid'u64'($t31);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:714:13+38
    // >> opaque call: $t28 := Errors::limit_exceeded($t27)

    // $t32 := opaque begin: Errors::limit_exceeded($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:714:13+38

    // assume WellFormed($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:714:13+38
    assume $IsValid'u64'($t32);

    // assume Eq<u64>($t32, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:714:13+38
    assume $IsEqual'u64'($t32, 8);

    // $t32 := opaque end: Errors::limit_exceeded($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:714:13+38

    // trace_local[tmp#$9]($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+133
    assume {:print "$at(10,34157,34290)"} true;
    assume {:print "$track_local(18,0,9):", $t32} $t32 == $t32;

    // trace_local[tmp#$8]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+133
    assume {:print "$track_local(18,0,8):", $t30} $t30 == $t30;

    // if ($t30) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+133
    if ($t30) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+133
L5:

    // assert Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t25)), 256) at /home/ying/diem/language/diem-framework/modules/Diem.move:199:9+52
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:199:9+52
    assume {:print "$at(10,10265,10317)"} true;
    assert {:msg "assert_failed(10,10265,10317): data invariant does not hold"}
      (LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25))) <= 256);

    // assert forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t25))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($t25), i)))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:203:9+78
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:203:9+78
    assume {:print "$at(10,10493,10571)"} true;
    assert {:msg "assert_failed(10,10493,10571): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25)))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25)), i)))) > 0)))));

    // destroy($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+133
    assume {:print "$at(10,34157,34290)"} true;

    // trace_abort($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+133
    assume {:print "$at(10,34157,34290)"} true;
    assume {:print "$track_abort(18,0):", $t32} $t32 == $t32;

    // $t17 := move($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+133
    $t17 := $t32;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+133
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:716:27+8
    assume {:print "$at(10,34318,34326)"} true;
L4:

    // Vector::push_back<Diem::PreburnWithMetadata<#0>>($t26, $t1) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:716:9+36
    call $t26 := $1_Vector_push_back'$1_Diem_PreburnWithMetadata'#0''($t26, $t1);
    if ($abort_flag) {
        assume {:print "$at(10,34300,34336)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // write_back[Reference($t25).preburns]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:716:9+36
    $t25 := $UpdateMutation($t25, $Update'$1_Diem_PreburnQueue'#0''_preburns($Dereference($t25), $Dereference($t26)));

    // assert Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t25)), 256) at /home/ying/diem/language/diem-framework/modules/Diem.move:199:9+52
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:199:9+52
    assume {:print "$at(10,10265,10317)"} true;
    assert {:msg "assert_failed(10,10265,10317): data invariant does not hold"}
      (LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25))) <= 256);

    // assert forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t25))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($t25), i)))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:203:9+78
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:203:9+78
    assume {:print "$at(10,10493,10571)"} true;
    assert {:msg "assert_failed(10,10493,10571): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25)))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25)), i)))) > 0)))));

    // write_back[Diem::PreburnQueue<#0>@]($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:716:9+36
    assume {:print "$at(10,34300,34336)"} true;
    $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $GlobalLocationAddress($t25),
        $Dereference($t25));

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:717:5+1
    assume {:print "$at(10,34342,34343)"} true;
L6:

    // assume Identical($t33, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t10))) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79
    assume {:print "$at(10,34546,34625)"} true;
    assume ($t33 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t10)));

    // assert Not(Not(exists[@163]<Diem::PreburnQueue<#0>>($t10))) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+83
    assume {:print "$at(10,34697,34780)"} true;
    assert {:msg "assert_failed(10,34697,34780): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, $t10);

    // assert Not(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t1))), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:733:9+75
    assume {:print "$at(10,35170,35245)"} true;
    assert {:msg "assert_failed(10,35170,35245): function does not abort under this condition"}
      !$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t1))), 0);

    // assert Not(And(exists[@163]<Diem::PreburnQueue<#0>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@163]<Diem::PreburnQueue<#0>>($t12))), 256))) at /home/ying/diem/language/diem-framework/modules/Diem.move:734:9+208
    assume {:print "$at(10,35254,35462)"} true;
    assert {:msg "assert_failed(10,35254,35462): function does not abort under this condition"}
      !($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#163, $t12))) >= 256));

    // assert exists<Diem::PreburnQueue<#0>>($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:726:9+53
    assume {:print "$at(10,34842,34895)"} true;
    assert {:msg "assert_failed(10,34842,34895): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t10);

    // assert Vector::eq_push_back<Diem::PreburnWithMetadata<#0>>($t33, $t11, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:727:9+63
    assume {:print "$at(10,34904,34967)"} true;
    assert {:msg "assert_failed(10,34904,34967): post-condition does not hold"}
      $1_Vector_eq_push_back'$1_Diem_PreburnWithMetadata'#0''($t33, $t11, $t1);

    // assert Implies(Diem::spec_is_currency[@164]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@164]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#164) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#164))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@165]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#165, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@165]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#165, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@164]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@164]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#164) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#164))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@166]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#166, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@166]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#166, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@164]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@164]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#164) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#164))));

    // assert Implies(Diem::spec_is_currency[@164]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@164]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#164) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#164))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@163]<Diem::PreburnQueue<#0>>(addr), exists[@167]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#167, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@163]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@164]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@164]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#164) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#164))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:717:5+1
    assume {:print "$at(10,34342,34343)"} true;
L7:

    // assert Or(Or(Not(exists[@163]<Diem::PreburnQueue<#0>>($t10)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t1))), 0)), And(exists[@163]<Diem::PreburnQueue<#0>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@163]<Diem::PreburnQueue<#0>>($t12))), 256))) at /home/ying/diem/language/diem-framework/modules/Diem.move:718:5+625
    assume {:print "$at(10,34348,34973)"} true;
    assert {:msg "assert_failed(10,34348,34973): abort not covered by any of the `aborts_if` clauses"}
      ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, $t10) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t1))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#163, $t12))) >= 256)));

    // assert Or(Or(And(Not(exists[@163]<Diem::PreburnQueue<#0>>($t10)), Eq(1, $t17)), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t1))), 0), Eq(7, $t17))), And(And(exists[@163]<Diem::PreburnQueue<#0>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@163]<Diem::PreburnQueue<#0>>($t12))), 256)), Eq(8, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:718:5+625
    assert {:msg "assert_failed(10,34348,34973): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, $t10) && $IsEqual'u8'(1, $t17)) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t1))), 0) && $IsEqual'u8'(7, $t17))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#163, $t12))) >= 256)) && $IsEqual'u8'(8, $t17)));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:718:5+625
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun Diem::approx_xdx_for_coin [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1382:5+210
procedure {:timeLimit 40} $1_Diem_approx_xdx_for_coin$verify(_$t0: $1_Diem_Diem'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: $1_FixedPoint32_FixedPoint32;
    var $t5: int;
    var $t6: bool;
    var $t0: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#349: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#350: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#351: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#352: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#353: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1382:5+210
    assume {:print "$at(10,65373,65583)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1382:5+210
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @351 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1382:5+1
    $1_Diem_BurnCapability'#0'_$memory#351 := $1_Diem_BurnCapability'#0'_$memory;

    // @349 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1382:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#349 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @350 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1382:5+1
    $1_Diem_MintCapability'#0'_$memory#350 := $1_Diem_MintCapability'#0'_$memory;

    // @353 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1382:5+1
    $1_Diem_Preburn'#0'_$memory#353 := $1_Diem_Preburn'#0'_$memory;

    // @352 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1382:5+1
    $1_Diem_PreburnQueue'#0'_$memory#352 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1382:5+1
    assume {:print "$track_local(18,1,0):", $t0} $t0 == $t0;

    // $t2 := Diem::value<#0>($t0) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1384:26+11
    assume {:print "$at(10,65510,65521)"} true;
    call $t2 := $1_Diem_value'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,65510,65521)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(18,1):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[from_value]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1384:13+10
    assume {:print "$track_local(18,1,1):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46
    // >> opaque call: $t3 := Diem::approx_xdx_for_value<#0>($t2)
    assume {:print "$at(10,65531,65577)"} true;

    // assume Identical($t4, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1375:9+59
    assume {:print "$at(10,65028,65087)"} true;
    assume ($t4 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t5 := opaque begin: Diem::approx_xdx_for_value<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46
    assume {:print "$at(10,65531,65577)"} true;

    // assume Identical($t6, Or(Not(Diem::spec_is_currency<#0>()), Gt(FixedPoint32::spec_multiply_u64($t2, $t4), 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46
    assume ($t6 == (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) || ($1_FixedPoint32_spec_multiply_u64($t2, $t4) > 18446744073709551615)));

    // if ($t6) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46
    if ($t6) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46
L4:

    // assume Or(And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t3)), And(Gt(FixedPoint32::spec_multiply_u64($t2, $t4), 18446744073709551615), Eq(8, $t3))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46
    assume ((!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t3)) || (($1_FixedPoint32_spec_multiply_u64($t2, $t4) > 18446744073709551615) && $IsEqual'u8'(8, $t3)));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46
    assume {:print "$at(10,65531,65577)"} true;
    assume {:print "$track_abort(18,1):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46
L3:

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, Diem::spec_approx_xdx_for_value<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46
    assume $IsEqual'u64'($t5, $1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory, $t2));

    // $t5 := opaque end: Diem::approx_xdx_for_value<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46

    // trace_return[0]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1385:9+46
    assume {:print "$track_return(18,1,0):", $t5} $t5 == $t5;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1386:5+1
    assume {:print "$at(10,65582,65583)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@349]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@349]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#349) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#349))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@350]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#350, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@350]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#350, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@349]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@349]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#349) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#349))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@351]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#351, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@351]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#351, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@349]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@349]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#349) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#349))));

    // assert Implies(Diem::spec_is_currency[@349]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@349]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#349) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#349))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@352]<Diem::PreburnQueue<#0>>(addr), exists[@353]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#352, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#353, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@352]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#352, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@349]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@349]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#349) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#349))));

    // return $t5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t5;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1386:5+1
    assume {:print "$at(10,65582,65583)"} true;
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1386:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Diem::approx_xdx_for_value [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1362:5+241
procedure {:timeLimit 40} $1_Diem_approx_xdx_for_value$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $t2: $1_FixedPoint32_FixedPoint32;
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: $1_FixedPoint32_FixedPoint32;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t0: int;
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#254: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#255: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#256: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#257: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#258: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1370:17+6
    assume {:print "$at(10,64826,64832)"} true;
    assume $IsValid'u64'($t0);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1370:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t2, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1375:9+59
    assume {:print "$at(10,65028,65087)"} true;
    assume ($t2 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // @256 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1362:5+1
    assume {:print "$at(10,64456,64457)"} true;
    $1_Diem_BurnCapability'#0'_$memory#256 := $1_Diem_BurnCapability'#0'_$memory;

    // @254 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1362:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#254 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @255 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1362:5+1
    $1_Diem_MintCapability'#0'_$memory#255 := $1_Diem_MintCapability'#0'_$memory;

    // @258 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1362:5+1
    $1_Diem_Preburn'#0'_$memory#258 := $1_Diem_Preburn'#0'_$memory;

    // @257 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1362:5+1
    $1_Diem_PreburnQueue'#0'_$memory#257 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[from_value]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1362:5+1
    assume {:print "$track_local(18,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:33+33
    // >> opaque call: $t2 := Diem::xdx_exchange_rate<#0>()
    assume {:print "$at(10,64591,64624)"} true;

    // assume Identical($t3, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1499:9+57
    assume {:print "$at(10,70271,70328)"} true;
    assume ($t3 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // $t4 := opaque begin: Diem::xdx_exchange_rate<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:33+33
    assume {:print "$at(10,64591,64624)"} true;

    // assume Identical($t5, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:33+33
    assume ($t5 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:33+33
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:33+33
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:33+33
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:33+33
    assume {:print "$at(10,64591,64624)"} true;
    assume {:print "$track_abort(18,2):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:33+33
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:33+33
L3:

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:33+33
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t4);

    // assume Eq<FixedPoint32::FixedPoint32>($t4, select Diem::CurrencyInfo.to_xdx_exchange_rate($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:33+33
    assume $IsEqual'$1_FixedPoint32_FixedPoint32'($t4, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($t3));

    // $t4 := opaque end: Diem::xdx_exchange_rate<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:33+33

    // trace_local[xdx_exchange_rate]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:13+17
    assume {:print "$track_local(18,2,1):", $t4} $t4 == $t4;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57
    // >> opaque call: $t3 := FixedPoint32::multiply_u64($t0, $t2)
    assume {:print "$at(10,64634,64691)"} true;

    // $t7 := opaque begin: FixedPoint32::multiply_u64($t0, $t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57

    // assume Identical($t8, Gt(FixedPoint32::spec_multiply_u64($t0, $t4), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57
    assume ($t8 == ($1_FixedPoint32_spec_multiply_u64($t0, $t4) > 18446744073709551615));

    // if ($t8) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57
    if ($t8) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57
L6:

    // assume And(Gt(FixedPoint32::spec_multiply_u64($t0, $t4), 18446744073709551615), Eq(8, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57
    assume (($1_FixedPoint32_spec_multiply_u64($t0, $t4) > 18446744073709551615) && $IsEqual'u8'(8, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57
    assume {:print "$at(10,64634,64691)"} true;
    assume {:print "$track_abort(18,2):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57
L5:

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, FixedPoint32::spec_multiply_u64($t0, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57
    assume $IsEqual'u64'($t7, $1_FixedPoint32_spec_multiply_u64($t0, $t4));

    // $t7 := opaque end: FixedPoint32::multiply_u64($t0, $t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1365:9+57
    assume {:print "$track_return(18,2,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:5+1
    assume {:print "$at(10,64696,64697)"} true;
L1:

    // assert Not(Not(Diem::spec_is_currency[@254]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254);

    // assert Not(Gt(FixedPoint32::spec_multiply_u64[]($t0, $t2), 18446744073709551615)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:75:9+83
    assume {:print "$at(43,3503,3586)"} true;
    assert {:msg "assert_failed(43,3503,3586): function does not abort under this condition"}
      !($1_FixedPoint32_spec_multiply_u64($t0, $t2) > 18446744073709551615);

    // assert Eq<u64>($t7, Diem::spec_approx_xdx_for_value<#0>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1370:9+70
    assume {:print "$at(10,64818,64888)"} true;
    assert {:msg "assert_failed(10,64818,64888): post-condition does not hold"}
      $IsEqual'u64'($t7, $1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory, $t0));

    // assert Implies(Diem::spec_is_currency[@254]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@254]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#254))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@255]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#255, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@255]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#255, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@254]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@254]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#254))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@256]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#256, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@256]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#256, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@254]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@254]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#254))));

    // assert Implies(Diem::spec_is_currency[@254]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@254]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#254))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@257]<Diem::PreburnQueue<#0>>(addr), exists[@258]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#257, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#258, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@257]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#257, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@254]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@254]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#254))));

    // return $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:5+1
    assume {:print "$at(10,64696,64697)"} true;
L2:

    // assert Or(Not(Diem::spec_is_currency[@254]<#0>()), Gt(FixedPoint32::spec_multiply_u64[]($t0, $t2), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:5+192
    assume {:print "$at(10,64702,64894)"} true;
    assert {:msg "assert_failed(10,64702,64894): abort not covered by any of the `aborts_if` clauses"}
      (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254) || ($1_FixedPoint32_spec_multiply_u64($t0, $t2) > 18446744073709551615));

    // assert Or(And(Not(Diem::spec_is_currency[@254]<#0>()), Eq(5, $t6)), And(Gt(FixedPoint32::spec_multiply_u64[]($t0, $t2), 18446744073709551615), Eq(8, $t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:5+192
    assert {:msg "assert_failed(10,64702,64894): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254) && $IsEqual'u8'(5, $t6)) || (($1_FixedPoint32_spec_multiply_u64($t0, $t2) > 18446744073709551615) && $IsEqual'u8'(8, $t6)));

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:5+192
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Diem::assert_is_SCS_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1552:5+206
procedure {:timeLimit 40} $1_Diem_assert_is_SCS_currency$verify() returns ()
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#230: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#231: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#232: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#233: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#234: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1552:5+206
    assume {:print "$at(10,72569,72775)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @232 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1552:5+1
    $1_Diem_BurnCapability'#0'_$memory#232 := $1_Diem_BurnCapability'#0'_$memory;

    // @230 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1552:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#230 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @231 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1552:5+1
    $1_Diem_MintCapability'#0'_$memory#231 := $1_Diem_MintCapability'#0'_$memory;

    // @234 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1552:5+1
    $1_Diem_Preburn'#0'_$memory#234 := $1_Diem_Preburn'#0'_$memory;

    // @233 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1552:5+1
    $1_Diem_PreburnQueue'#0'_$memory#233 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1553:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,72654,72684)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1553:9+30

    // assume Identical($t2, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1553:9+30
    assume ($t2 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t2) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1553:9+30
    if ($t2) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1553:9+30
L5:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1553:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1553:9+30
    assume {:print "$at(10,72654,72684)"} true;
    assume {:print "$track_abort(18,3):", $t3} $t3 == $t3;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1553:9+30
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1553:9+30
L4:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1553:9+30

    // $t4 := Diem::is_SCS_currency<#0>() on_abort goto L3 with $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:16+27
    assume {:print "$at(10,72701,72728)"} true;
    call $t4 := $1_Diem_is_SCS_currency'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,72701,72728)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(18,3):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t5 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:67+14
    $t5 := 1;
    assume $IsValid'u64'($t5);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:45+37
    // >> opaque call: $t4 := Errors::invalid_state($t3)

    // $t6 := opaque begin: Errors::invalid_state($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:45+37

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:45+37
    assume $IsValid'u64'($t6);

    // assume Eq<u64>($t6, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:45+37
    assume $IsEqual'u64'($t6, 1);

    // $t6 := opaque end: Errors::invalid_state($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:45+37

    // trace_local[tmp#$1]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:9+74
    assume {:print "$track_local(18,3,1):", $t6} $t6 == $t6;

    // trace_local[tmp#$0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:9+74
    assume {:print "$track_local(18,3,0):", $t4} $t4 == $t4;

    // if ($t4) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:9+74
    if ($t4) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:9+74
L1:

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:9+74
    assume {:print "$at(10,72694,72768)"} true;
    assume {:print "$track_abort(18,3):", $t6} $t6 == $t6;

    // $t3 := move($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:9+74
    $t3 := $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:9+74
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:83+1
L0:

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:5+1
    assume {:print "$at(10,72774,72775)"} true;
L2:

    // assert Implies(Diem::spec_is_currency[@230]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@230]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#230) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#230))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@231]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#231, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@231]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#231, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@230]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@230]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#230) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#230))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@232]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#232, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@232]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#232, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@230]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@230]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#230) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#230))));

    // assert Implies(Diem::spec_is_currency[@230]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@230]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#230) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#230))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@233]<Diem::PreburnQueue<#0>>(addr), exists[@234]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#233, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#234, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@233]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#233, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@230]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@230]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#230) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#230))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:5+1
    assume {:print "$at(10,72774,72775)"} true;
L3:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Diem::assert_is_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1541:5+136
procedure {:timeLimit 40} $1_Diem_assert_is_currency$verify() returns ()
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#145: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#146: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#147: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#148: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#149: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1541:5+136
    assume {:print "$at(10,72193,72329)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @147 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1541:5+1
    $1_Diem_BurnCapability'#0'_$memory#147 := $1_Diem_BurnCapability'#0'_$memory;

    // @145 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1541:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#145 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @146 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1541:5+1
    $1_Diem_MintCapability'#0'_$memory#146 := $1_Diem_MintCapability'#0'_$memory;

    // @149 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1541:5+1
    $1_Diem_Preburn'#0'_$memory#149 := $1_Diem_Preburn'#0'_$memory;

    // @148 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1541:5+1
    $1_Diem_PreburnQueue'#0'_$memory#148 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t2 := Diem::is_currency<#0>() on_abort goto L3 with $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:16+23
    assume {:print "$at(10,72259,72282)"} true;
    call $t2 := $1_Diem_is_currency'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,72259,72282)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(18,4):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:63+14
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:41+37
    // >> opaque call: $t4 := Errors::not_published($t3)

    // $t5 := opaque begin: Errors::not_published($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:41+37

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:41+37
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, 5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:41+37
    assume $IsEqual'u64'($t5, 5);

    // $t5 := opaque end: Errors::not_published($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:41+37

    // trace_local[tmp#$1]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:9+70
    assume {:print "$track_local(18,4,1):", $t5} $t5 == $t5;

    // trace_local[tmp#$0]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:9+70
    assume {:print "$track_local(18,4,0):", $t2} $t2 == $t2;

    // if ($t2) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:9+70
    if ($t2) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:9+70
L1:

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:9+70
    assume {:print "$at(10,72252,72322)"} true;
    assume {:print "$track_abort(18,4):", $t5} $t5 == $t5;

    // $t3 := move($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:9+70
    $t3 := $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:9+70
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1542:79+1
L0:

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1543:5+1
    assume {:print "$at(10,72328,72329)"} true;
L2:

    // assert Not(Not(Diem::spec_is_currency[@145]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#145);

    // assert Implies(Diem::spec_is_currency[@145]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@145]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#145) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#145))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@146]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#146, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@146]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#146, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@145]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@145]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#145) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#145))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@147]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#147, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@147]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#147, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@145]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@145]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#145) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#145))));

    // assert Implies(Diem::spec_is_currency[@145]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@145]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#145) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#145))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@148]<Diem::PreburnQueue<#0>>(addr), exists[@149]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#148, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#149, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@148]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#148, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@145]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@145]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#145) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#145))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1543:5+1
    assume {:print "$at(10,72328,72329)"} true;
L3:

    // assert Not(Diem::spec_is_currency[@145]<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:5+100
    assume {:print "$at(10,72334,72434)"} true;
    assert {:msg "assert_failed(10,72334,72434): abort not covered by any of the `aborts_if` clauses"}
      !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#145);

    // assert And(Not(Diem::spec_is_currency[@145]<#0>()), Eq(5, $t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:5+100
    assert {:msg "assert_failed(10,72334,72434): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#145) && $IsEqual'u8'(5, $t3));

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:5+100
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Diem::burn [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+478
procedure {:timeLimit 40} $1_Diem_burn$verify(_$t0: int, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: $1_Diem_Preburn'#0';
    var $t7: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t8: int;
    var $t9: $1_Diem_CurrencyInfo'#0';
    var $t10: $1_Diem_Preburn'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_BurnCapability'#0';
    var $t20: $1_Diem_CurrencyInfo'#0';
    var $t21: Vec (int);
    var $t22: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t23: $1_Diem_Preburn'#0';
    var $t24: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t25: int;
    var $t26: $1_Diem_CurrencyInfo'#0';
    var $t27: $1_Diem_Preburn'#0';
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_BurnCapability'#0'_$memory#401: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#402: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#403: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#404: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_Preburn'#0'_$memory#405: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+478
    assume {:print "$at(10,15932,16410)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+478
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+478
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+478
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+478
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+478
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t6, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:891:9+50
    assume {:print "$at(10,43205,43255)"} true;
    assume ($t6 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t7, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t7 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t8, select Diem::Diem.value(select Diem::Preburn.to_burn($t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:947:9+36
    assume {:print "$at(10,45965,46001)"} true;
    assume ($t8 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t6)));

    // assume Identical($t9, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:948:9+42
    assume {:print "$at(10,46010,46052)"} true;
    assume ($t9 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t10, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:899:9+50
    assume {:print "$at(10,43560,43610)"} true;
    assume ($t10 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+42
    assume {:print "$at(10,46802,46844)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+51
    assume {:print "$at(10,46853,46904)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+30
    assume {:print "$at(10,46913,46943)"} true;
    assume ($t13 == $burn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // @401 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+1
    assume {:print "$at(10,15932,15933)"} true;
    $1_Diem_BurnCapability'#0'_$memory#401 := $1_Diem_BurnCapability'#0'_$memory;

    // @403 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#403 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @404 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+1
    $1_Diem_MintCapability'#0'_$memory#404 := $1_Diem_MintCapability'#0'_$memory;

    // @405 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+1
    $1_Diem_Preburn'#0'_$memory#405 := $1_Diem_Preburn'#0'_$memory;

    // @402 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+1
    $1_Diem_PreburnQueue'#0'_$memory#402 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+1
    assume {:print "$track_local(18,5,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+1
    assume {:print "$track_local(18,5,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:319:5+1
    assume {:print "$track_local(18,5,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:324:20+27
    // >> opaque call: $t6 := Signer::address_of($t0)
    assume {:print "$at(10,16126,16153)"} true;

    // $t14 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:324:20+27

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:324:20+27
    assume $IsValid'address'($t14);

    // assume Eq<address>($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:324:20+27
    assume $IsEqual'address'($t14, $1_Signer_spec_address_of($t0));

    // $t14 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:324:20+27

    // trace_local[addr]($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:324:13+4
    assume {:print "$track_local(18,5,3):", $t14} $t14 == $t14;

    // $t15 := exists<Diem::BurnCapability<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:325:16+6
    assume {:print "$at(10,16170,16176)"} true;
    $t15 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t14);

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:325:84+16
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:325:56+45
    // >> opaque call: $t9 := Errors::requires_capability($t8)

    // $t17 := opaque begin: Errors::requires_capability($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:325:56+45

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:325:56+45
    assume $IsValid'u64'($t17);

    // assume Eq<u64>($t17, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:325:56+45
    assume $IsEqual'u64'($t17, 4);

    // $t17 := opaque end: Errors::requires_capability($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:325:56+45

    // trace_local[tmp#$5]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:325:9+93
    assume {:print "$track_local(18,5,5):", $t17} $t17 == $t17;

    // trace_local[tmp#$4]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:325:9+93
    assume {:print "$track_local(18,5,4):", $t15} $t15 == $t15;

    // if ($t15) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:325:9+93
    if ($t15) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:325:9+93
L1:

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:325:9+93
    assume {:print "$at(10,16163,16256)"} true;
    assume {:print "$track_abort(18,5):", $t17} $t17 == $t17;

    // $t18 := move($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:325:9+93
    $t18 := $t17;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:325:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:13+15
    assume {:print "$at(10,16300,16315)"} true;
L0:

    // $t19 := get_global<Diem::BurnCapability<#0>>($t14) on_abort goto L3 with $t18 at /home/ying/diem/language/diem-framework/modules/Diem.move:328:13+13
    assume {:print "$at(10,16329,16342)"} true;
    if (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t14)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(10,16329,16342)"} true;
        $t18 := $abort_code;
        assume {:print "$track_abort(18,5):", $t18} $t18 == $t18;
        goto L3;
    }

    // assume Identical($t20, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+42
    assume {:print "$at(10,46802,46844)"} true;
    assume ($t20 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+51
    assume {:print "$at(10,46853,46904)"} true;
    assume ($t21 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t22, select Diem::CurrencyInfo.burn_events($t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+30
    assume {:print "$at(10,46913,46943)"} true;
    assume ($t22 == $burn_events#$1_Diem_CurrencyInfo'#0'($t20));

    // assume Identical($t23, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:891:9+50
    assume {:print "$at(10,43205,43255)"} true;
    assume ($t23 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t24, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t24 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t25, select Diem::Diem.value(select Diem::Preburn.to_burn($t23))) at /home/ying/diem/language/diem-framework/modules/Diem.move:947:9+36
    assume {:print "$at(10,45965,46001)"} true;
    assume ($t25 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t23)));

    // assume Identical($t26, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:948:9+42
    assume {:print "$at(10,46010,46052)"} true;
    assume ($t26 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t27, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:899:9+50
    assume {:print "$at(10,43560,43610)"} true;
    assume ($t27 == $1_Diem_spec_make_preburn'#0'($t2));

    // Diem::burn_with_capability<#0>($t1, $t19, $t2) on_abort goto L3 with $t18 at /home/ying/diem/language/diem-framework/modules/Diem.move:326:9+138
    assume {:print "$at(10,16266,16404)"} true;
    call $1_Diem_burn_with_capability'#0'($t1, $t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,16266,16404)"} true;
        $t18 := $abort_code;
        assume {:print "$track_abort(18,5):", $t18} $t18 == $t18;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:331:5+1
    assume {:print "$at(10,16409,16410)"} true;
L2:

    // assert Not(Not(exists[@401]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:342:9+111
    assume {:print "$at(10,16800,16911)"} true;
    assert {:msg "assert_failed(10,16800,16911): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#401, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@402]<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:352:9+86
    assume {:print "$at(10,17223,17309)"} true;
    assert {:msg "assert_failed(10,17223,17309): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1);

    // assert Not(Not(exists[@402]<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:846:9+86
    assume {:print "$at(10,40803,40889)"} true;
    assert {:msg "assert_failed(10,40803,40889): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t7)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t7, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+121
    assume {:print "$at(10,40898,41019)"} true;
    assert {:msg "assert_failed(10,40898,41019): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t7)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t7, i)))), $t2)))));

    // assert Not(Eq<u64>($t8, 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:949:9+50
    assume {:print "$at(10,46061,46111)"} true;
    assert {:msg "assert_failed(10,46061,46111): function does not abort under this condition"}
      !$IsEqual'u64'($t8, 0);

    // assert Not(Lt(select Diem::CurrencyInfo.total_value($t9), $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:9+65
    assume {:print "$at(10,46120,46185)"} true;
    assert {:msg "assert_failed(10,46120,46185): function does not abort under this condition"}
      !($total_value#$1_Diem_CurrencyInfo'#0'($t9) < $t8);

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t9), $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:951:9+67
    assume {:print "$at(10,46194,46261)"} true;
    assert {:msg "assert_failed(10,46194,46261): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t9) < $t8);

    // assert Not(Not(Diem::spec_is_currency[@403]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#403);

    // assert Eq<u128>(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@403]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t10)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:955:9+142
    assume {:print "$at(10,46367,46509)"} true;
    assert {:msg "assert_failed(10,46367,46509): post-condition does not hold"}
      $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#403)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t10))));

    // assert Eq<u64>(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@403]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t10)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:957:9+146
    assume {:print "$at(10,46518,46664)"} true;
    assert {:msg "assert_failed(10,46518,46664): post-condition does not hold"}
      $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#403)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t10))));

    // assert Implies(exists[@402]<Diem::PreburnQueue<#0>>($t1), exists<Diem::PreburnQueue<#0>>($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:854:9+113
    assume {:print "$at(10,41291,41404)"} true;
    assert {:msg "assert_failed(10,41291,41404): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t1));

    // assert Implies(Diem::spec_is_currency[@403]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@403]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#403) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#403))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@404]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#404, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@404]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#404, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@401]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#401, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@401]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#401, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@403]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@403]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#403) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#403))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@402]<Diem::PreburnQueue<#0>>(addr), exists[@405]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#405, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@402]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@403]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@403]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#403) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#403))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<#0>($t2))), $t12, $t1), $t13, Not(select Diem::CurrencyInfo.is_synthetic($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+187
    assume {:print "$at(10,46952,47139)"} true;
    assert {:msg "assert_failed(10,46952,47139): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t13, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_spec_make_preburn'#0'($t2))), $t12, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t11)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<#0>($t2))), $t12, $t1), $t13, Not(select Diem::CurrencyInfo.is_synthetic($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:332:5+184
    assume {:print "$at(10,16415,16599)"} true;
    assert {:msg "assert_failed(10,16415,16599): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t13, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_spec_make_preburn'#0'($t2))), $t12, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t11)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:332:5+184
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:331:5+1
    assume {:print "$at(10,16409,16410)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Or(Or(Not(exists[@401]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Not(exists[@402]<Diem::PreburnQueue<#0>>($t1))), Not(exists[@402]<Diem::PreburnQueue<#0>>($t1))), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t7)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t7, i)))), $t2)), Eq<u64>($t8, 0)), Lt(select Diem::CurrencyInfo.total_value($t9), $t8)), Lt(select Diem::CurrencyInfo.preburn_value($t9), $t8)), Not(Diem::spec_is_currency[@403]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:332:5+184
    assume {:print "$at(10,16415,16599)"} true;
    assert {:msg "assert_failed(10,16415,16599): abort not covered by any of the `aborts_if` clauses"}
      (((((((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#401, $1_Signer_spec_address_of($t0)) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1)) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1)) || (var $range_0 := $Range(0, LenVec($t7)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t7, i)))), $t2)))))) || $IsEqual'u64'($t8, 0)) || ($total_value#$1_Diem_CurrencyInfo'#0'($t9) < $t8)) || ($preburn_value#$1_Diem_CurrencyInfo'#0'($t9) < $t8)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#403));

    // assert Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@401]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t18)), And(Not(exists[@402]<Diem::PreburnQueue<#0>>($t1)), Eq(5, $t18))), And(Not(exists[@402]<Diem::PreburnQueue<#0>>($t1)), Eq(5, $t18))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t7)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t7, i)))), $t2), Eq(1, $t18))), And(Eq<u64>($t8, 0), Eq(1, $t18))), And(Lt(select Diem::CurrencyInfo.total_value($t9), $t8), Eq(8, $t18))), And(Lt(select Diem::CurrencyInfo.preburn_value($t9), $t8), Eq(8, $t18))), And(Not(Diem::spec_is_currency[@403]<#0>()), Eq(5, $t18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:332:5+184
    assert {:msg "assert_failed(10,16415,16599): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#401, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t18)) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1) && $IsEqual'u8'(5, $t18))) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1) && $IsEqual'u8'(5, $t18))) || ((var $range_0 := $Range(0, LenVec($t7)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t7, i)))), $t2))))) && $IsEqual'u8'(1, $t18))) || ($IsEqual'u64'($t8, 0) && $IsEqual'u8'(1, $t18))) || (($total_value#$1_Diem_CurrencyInfo'#0'($t9) < $t8) && $IsEqual'u8'(8, $t18))) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($t9) < $t8) && $IsEqual'u8'(8, $t18))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#403) && $IsEqual'u8'(5, $t18)));

    // abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:332:5+184
    $abort_code := $t18;
    $abort_flag := true;
    return;

}

// fun Diem::burn_now [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+422
procedure {:timeLimit 40} $1_Diem_burn_now$verify(_$t0: $1_Diem_Diem'#0', _$t1: $Mutation ($1_Diem_Preburn'#0'), _$t2: int, _$t3: $1_Diem_BurnCapability'#0') returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t4: bool;
    var $t5: int;
    var $t6: $1_Diem_CurrencyInfo'#0';
    var $t7: $1_Diem_CurrencyInfo'#0';
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: Vec (int);
    var $t10: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t11: $1_Diem_PreburnEvent;
    var $t12: $1_Diem_CurrencyInfo'#0';
    var $t13: Vec (int);
    var $t14: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t15: $1_Diem_Preburn'#0';
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t23: $1_Diem_CurrencyInfo'#0';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t26: $1_Diem_PreburnEvent;
    var $t27: $1_Diem_Preburn'#0';
    var $t28: int;
    var $t29: $1_Diem_CurrencyInfo'#0';
    var $t30: $1_Diem_CurrencyInfo'#0';
    var $t31: Vec (int);
    var $t32: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t33: $1_Diem_CurrencyInfo'#0';
    var $t0: $1_Diem_Diem'#0';
    var $t1: $Mutation ($1_Diem_Preburn'#0');
    var $t2: int;
    var $t3: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#389: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#390: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#391: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#392: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#393: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+422
    assume {:print "$at(10,50634,51056)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+422
    assume $IsValid'$1_Diem_Preburn'#0''($Dereference($t1));

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+422
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+422
    assume $IsValid'$1_Diem_BurnCapability'#0''($t3);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+422
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t6, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1062:9+42
    assume {:print "$at(10,51128,51170)"} true;
    assume ($t6 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t7, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1075:9+42
    assume {:print "$at(10,51930,51972)"} true;
    assume ($t7 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t8, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:530:9+42
    assume {:print "$at(10,25292,25334)"} true;
    assume ($t8 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t9, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:531:9+51
    assume {:print "$at(10,25343,25394)"} true;
    assume ($t9 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t10, select Diem::CurrencyInfo.preburn_events($t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+33
    assume {:print "$at(10,25403,25436)"} true;
    assume ($t10 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t8));

    // assume Identical($t11, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t9, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+111
    assume {:print "$at(10,25445,25556)"} true;
    assume ($t11 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t0), $t9, $t2));

    // assume Identical($t12, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+42
    assume {:print "$at(10,46802,46844)"} true;
    assume ($t12 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+51
    assume {:print "$at(10,46853,46904)"} true;
    assume ($t13 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t14, select Diem::CurrencyInfo.burn_events($t12)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+30
    assume {:print "$at(10,46913,46943)"} true;
    assume ($t14 == $burn_events#$1_Diem_CurrencyInfo'#0'($t12));

    // @391 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+1
    assume {:print "$at(10,50634,50635)"} true;
    $1_Diem_BurnCapability'#0'_$memory#391 := $1_Diem_BurnCapability'#0'_$memory;

    // @389 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#389 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @390 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+1
    $1_Diem_MintCapability'#0'_$memory#390 := $1_Diem_MintCapability'#0'_$memory;

    // @393 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+1
    $1_Diem_Preburn'#0'_$memory#393 := $1_Diem_Preburn'#0'_$memory;

    // @392 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+1
    $1_Diem_PreburnQueue'#0'_$memory#392 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t15 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+1
    $t15 := $Dereference($t1);

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+1
    assume {:print "$track_local(18,6,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(18,6,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+1
    assume {:print "$track_local(18,6,2):", $t2} $t2 == $t2;

    // trace_local[capability]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1050:5+1
    assume {:print "$track_local(18,6,3):", $t3} $t3 == $t3;

    // $t16 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:16+10
    assume {:print "$at(10,50868,50878)"} true;
    $t16 := $value#$1_Diem_Diem'#0'($t0);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:29+1
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := >($t16, $t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:27+1
    call $t18 := $Gt($t16, $t17);

    // $t19 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:57+5
    $t19 := 7;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:32+31
    // >> opaque call: $t10 := Errors::invalid_argument($t9)

    // $t20 := opaque begin: Errors::invalid_argument($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:32+31

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:32+31
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:32+31
    assume $IsEqual'u64'($t20, 7);

    // $t20 := opaque end: Errors::invalid_argument($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:32+31

    // trace_local[tmp#$5]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:9+55
    assume {:print "$track_local(18,6,5):", $t20} $t20 == $t20;

    // trace_local[tmp#$4]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:9+55
    assume {:print "$track_local(18,6,4):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:9+55
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:9+55
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:9+55

    // destroy($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:9+55

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:9+55
    assume {:print "$at(10,50861,50916)"} true;
    assume {:print "$track_abort(18,6):", $t20} $t20 == $t20;

    // $t21 := move($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:9+55
    $t21 := $t20;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1056:9+55
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1057:31+4
    assume {:print "$at(10,50948,50952)"} true;
L0:

    // assume Identical($t22, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:523:9+42
    assume {:print "$at(10,24973,25015)"} true;
    assume ($t22 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:530:9+42
    assume {:print "$at(10,25292,25334)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:531:9+51
    assume {:print "$at(10,25343,25394)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.preburn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+33
    assume {:print "$at(10,25403,25436)"} true;
    assume ($t25 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t23));

    // assume Identical($t26, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t24, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+111
    assume {:print "$at(10,25445,25556)"} true;
    assume ($t26 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t0), $t24, $t2));

    // Diem::preburn_with_resource<#0>($t0, $t1, $t2) on_abort goto L3 with $t21 at /home/ying/diem/language/diem-framework/modules/Diem.move:1057:9+53
    assume {:print "$at(10,50926,50979)"} true;
    call $t1 := $1_Diem_preburn_with_resource'#0'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,50926,50979)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(18,6):", $t21} $t21 == $t21;
        goto L3;
    }

    // assume Identical($t27, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:939:9+26
    assume {:print "$at(10,45559,45585)"} true;
    assume ($t27 == $Dereference($t1));

    // assume Identical($t28, select Diem::Diem.value(select Diem::Preburn.to_burn($t27))) at /home/ying/diem/language/diem-framework/modules/Diem.move:947:9+36
    assume {:print "$at(10,45965,46001)"} true;
    assume ($t28 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t27)));

    // assume Identical($t29, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:948:9+42
    assume {:print "$at(10,46010,46052)"} true;
    assume ($t29 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t30, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+42
    assume {:print "$at(10,46802,46844)"} true;
    assume ($t30 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t31, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+51
    assume {:print "$at(10,46853,46904)"} true;
    assume ($t31 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t32, select Diem::CurrencyInfo.burn_events($t30)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+30
    assume {:print "$at(10,46913,46943)"} true;
    assume ($t32 == $burn_events#$1_Diem_CurrencyInfo'#0'($t30));

    // Diem::burn_with_resource_cap<#0>($t1, $t2, $t3) on_abort goto L3 with $t21 at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:9+60
    assume {:print "$at(10,50989,51049)"} true;
    call $t1 := $1_Diem_burn_with_resource_cap'#0'($t1, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(10,50989,51049)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(18,6):", $t21} $t21 == $t21;
        goto L3;
    }

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:69+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(18,6,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1059:5+1
    assume {:print "$at(10,51055,51056)"} true;
L2:

    // assume Identical($t33, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1063:9+52
    assume {:print "$at(10,51179,51231)"} true;
    assume ($t33 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert Not(Eq<u64>(select Diem::Diem.value($t0), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1072:9+56
    assume {:print "$at(10,51694,51750)"} true;
    assert {:msg "assert_failed(10,51694,51750): function does not abort under this condition"}
      !$IsEqual'u64'($value#$1_Diem_Diem'#0'($t0), 0);

    // assert Not(Lt(select Diem::CurrencyInfo.total_value($t7), select Diem::Diem.value($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1076:9+68
    assume {:print "$at(10,51981,52049)"} true;
    assert {:msg "assert_failed(10,51981,52049): function does not abort under this condition"}
      !($total_value#$1_Diem_CurrencyInfo'#0'($t7) < $value#$1_Diem_Diem'#0'($t0));

    // assert Not(Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t15)), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:512:9+63
    assume {:print "$at(10,24524,24587)"} true;
    assert {:msg "assert_failed(10,24524,24587): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t15)) > 0);

    // assert Not(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@389]<#0>()), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:518:9+102
    assume {:print "$at(10,24756,24858)"} true;
    assert {:msg "assert_failed(10,24756,24858): function does not abort under this condition"}
      !(($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#389)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615);

    // assert Not(Not(Diem::spec_is_currency[@389]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#389);

    // assert Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn($t1)), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1066:9+35
    assume {:print "$at(10,51441,51476)"} true;
    assert {:msg "assert_failed(10,51441,51476): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($Dereference($t1))), 0);

    // assert Eq<Diem::CurrencyInfo<#0>>($t33, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t6, Sub(select Diem::CurrencyInfo.total_value($t6), select Diem::Diem.value($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1067:9+84
    assume {:print "$at(10,51485,51569)"} true;
    assert {:msg "assert_failed(10,51485,51569): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t33, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t6, ($total_value#$1_Diem_CurrencyInfo'#0'($t6) - $value#$1_Diem_Diem'#0'($t0))));

    // assert Implies(Diem::spec_is_currency[@389]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@389]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#389) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#389))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@390]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#390, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@390]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#390, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@391]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#391, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@391]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#391, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@389]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@389]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#389) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#389))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@392]<Diem::PreburnQueue<#0>>(addr), exists[@393]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#392, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#393, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@392]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#392, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@389]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@389]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#389) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#389))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:538:9+42
    assume {:print "$at(10,25565,25607)"} true;
    assert {:msg "assert_failed(10,25565,25607): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t10, $t11, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t8)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t11, $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8))), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(pack Diem::Preburn<#0>($t0))), $t13, $t2), $t14, Not(select Diem::CurrencyInfo.is_synthetic($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+187
    assume {:print "$at(10,46952,47139)"} true;
    assert {:msg "assert_failed(10,46952,47139): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t10, $t11, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t8)), $t14, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_Preburn'#0'($t0))), $t13, $t2), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t12)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t11, $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8))), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(pack Diem::Preburn<#0>($t0))), $t13, $t2), $t14, Not(select Diem::CurrencyInfo.is_synthetic($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1060:5+514
    assume {:print "$at(10,51061,51575)"} true;
    assert {:msg "assert_failed(10,51061,51575): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t10, $t11, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t8)), $t14, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_Preburn'#0'($t0))), $t13, $t2), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t12)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1060:5+514
    $ret0 := $t1;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1059:5+1
    assume {:print "$at(10,51055,51056)"} true;
L3:

    // assert Or(Or(Or(Or(Eq<u64>(select Diem::Diem.value($t0), 0), Lt(select Diem::CurrencyInfo.total_value($t7), select Diem::Diem.value($t0))), Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t15)), 0)), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@389]<#0>()), select Diem::Diem.value($t0)), 18446744073709551615)), Not(Diem::spec_is_currency[@389]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1060:5+514
    assume {:print "$at(10,51061,51575)"} true;
    assert {:msg "assert_failed(10,51061,51575): abort not covered by any of the `aborts_if` clauses"}
      (((($IsEqual'u64'($value#$1_Diem_Diem'#0'($t0), 0) || ($total_value#$1_Diem_CurrencyInfo'#0'($t7) < $value#$1_Diem_Diem'#0'($t0))) || ($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t15)) > 0)) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#389)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#389));

    // assert Or(Or(Or(Or(And(Eq<u64>(select Diem::Diem.value($t0), 0), Eq(7, $t21)), And(Lt(select Diem::CurrencyInfo.total_value($t7), select Diem::Diem.value($t0)), Eq(8, $t21))), And(Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t15)), 0), Eq(1, $t21))), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@389]<#0>()), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t21))), And(Not(Diem::spec_is_currency[@389]<#0>()), Eq(5, $t21))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1060:5+514
    assert {:msg "assert_failed(10,51061,51575): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((($IsEqual'u64'($value#$1_Diem_Diem'#0'($t0), 0) && $IsEqual'u8'(7, $t21)) || (($total_value#$1_Diem_CurrencyInfo'#0'($t7) < $value#$1_Diem_Diem'#0'($t0)) && $IsEqual'u8'(8, $t21))) || (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t15)) > 0) && $IsEqual'u8'(1, $t21))) || ((($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#389)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615) && $IsEqual'u8'(8, $t21))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#389) && $IsEqual'u8'(5, $t21)));

    // abort($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1060:5+514
    $abort_code := $t21;
    $abort_flag := true;
    return;

}

// fun Diem::burn_with_capability<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+547
procedure {:inline 1} $1_Diem_burn_with_capability'#0'(_$t0: int, _$t1: $1_Diem_BurnCapability'#0', _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_Diem_Preburn'#0';
    var $t4: $1_Diem_Diem'#0';
    var $t5: $1_Diem_CurrencyInfo'#0';
    var $t6: Vec (int);
    var $t7: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t8: $1_Diem_Preburn'#0';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t10: int;
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: $1_Diem_Preburn'#0';
    var $t13: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t14: $1_Diem_PreburnWithMetadata'#0';
    var $t15: bool;
    var $t16: int;
    var $t17: $1_Diem_Preburn'#0';
    var $t18: Vec (int);
    var $t19: $Mutation ($1_Diem_Preburn'#0');
    var $t20: $1_Diem_Preburn'#0';
    var $t21: int;
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t23: $1_Diem_CurrencyInfo'#0';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t26: $1_Diem_Preburn'#0';
    var $t27: $1_Diem_Diem'#0';
    var $t28: bool;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $t2: int;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_PreburnQueue'#0'_$memory#377: $Memory $1_Diem_PreburnQueue'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t19));

    // bytecode translation starts here
    // assume Identical($t5, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+42
    assume {:print "$at(10,46802,46844)"} true;
    assume ($t5 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t6, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+51
    assume {:print "$at(10,46853,46904)"} true;
    assume ($t6 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t7, select Diem::CurrencyInfo.burn_events($t5)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+30
    assume {:print "$at(10,46913,46943)"} true;
    assume ($t7 == $burn_events#$1_Diem_CurrencyInfo'#0'($t5));

    // assume Identical($t8, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:891:9+50
    assume {:print "$at(10,43205,43255)"} true;
    assume ($t8 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume Identical($t10, select Diem::Diem.value(select Diem::Preburn.to_burn($t8))) at /home/ying/diem/language/diem-framework/modules/Diem.move:947:9+36
    assume {:print "$at(10,45965,46001)"} true;
    assume ($t10 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t8)));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:948:9+42
    assume {:print "$at(10,46010,46052)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:899:9+50
    assume {:print "$at(10,43560,43610)"} true;
    assume ($t12 == $1_Diem_spec_make_preburn'#0'($t2));

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+1
    assume {:print "$at(10,42306,42307)"} true;
    assume {:print "$track_local(18,7,0):", $t0} $t0 == $t0;

    // trace_local[capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+1
    assume {:print "$track_local(18,7,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+1
    assume {:print "$track_local(18,7,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    // >> opaque call: $t5 := Diem::remove_preburn_from_queue<#0>($t0, $t2)
    assume {:print "$at(10,42599,42659)"} true;

    // assume Identical($t13, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t13 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // $t14 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume {:print "$at(10,42599,42659)"} true;

    // assume Identical($t15, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume ($t15 == (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t13, i)))), $t2)))))));

    // if ($t15) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    if ($t15) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
L4:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t16)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) && $IsEqual'u8'(5, $t16)) || ((var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t13, i)))), $t2))))) && $IsEqual'u8'(1, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume {:print "$at(10,42599,42659)"} true;
    assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
L3:

    // @377 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    $1_Diem_PreburnQueue'#0'_$memory#377 := $1_Diem_PreburnQueue'#0'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t0);
    }

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t14);

    // assume Implies(exists[@377]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#377, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t14))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t14))), $t2);

    // $t14 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60

    // ($t17, $t18) := unpack Diem::PreburnWithMetadata<#0>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:13+43
    $t17 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t14);
    $t18 := $metadata#$1_Diem_PreburnWithMetadata'#0'($t14);

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:53+1

    // $t3 := $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:875:34+7
    $t3 := $t17;

    // trace_local[preburn]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:34+7
    assume {:print "$track_local(18,7,3):", $t3} $t3 == $t3;

    // $t19 := borrow_local($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:878:32+12
    assume {:print "$at(10,42729,42741)"} true;
    $t19 := $Mutation($Local(3), EmptyVec(), $t3);

    // assume Identical($t20, $t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:939:9+26
    assume {:print "$at(10,45559,45585)"} true;
    assume ($t20 == $Dereference($t19));

    // assume Identical($t21, select Diem::Diem.value(select Diem::Preburn.to_burn($t20))) at /home/ying/diem/language/diem-framework/modules/Diem.move:947:9+36
    assume {:print "$at(10,45965,46001)"} true;
    assume ($t21 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t20)));

    // assume Identical($t22, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:948:9+42
    assume {:print "$at(10,46010,46052)"} true;
    assume ($t22 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+42
    assume {:print "$at(10,46802,46844)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+51
    assume {:print "$at(10,46853,46904)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+30
    assume {:print "$at(10,46913,46943)"} true;
    assume ($t25 == $burn_events#$1_Diem_CurrencyInfo'#0'($t23));

    // Diem::burn_with_resource_cap<#0>($t19, $t0, $t1) on_abort goto L2 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:878:9+65
    assume {:print "$at(10,42706,42771)"} true;
    call $t19 := $1_Diem_burn_with_resource_cap'#0'($t19, $t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(10,42706,42771)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;
        goto L2;
    }

    // write_back[LocalRoot($t3)@]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:878:9+65
    $t3 := $Dereference($t19);

    // $t26 := move($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:880:35+7
    assume {:print "$at(10,42808,42815)"} true;
    $t26 := $t3;

    // $t27 := unpack Diem::Preburn<#0>($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:880:13+19
    $t27 := $to_burn#$1_Diem_Preburn'#0'($t26);

    // trace_local[to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:880:23+7
    assume {:print "$track_local(18,7,4):", $t27} $t27 == $t27;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
    // >> opaque call: Diem::destroy_zero<#0>($t10)
    assume {:print "$at(10,42825,42846)"} true;

    // opaque begin: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21

    // assume Identical($t28, Gt(select Diem::Diem.value($t27), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
    assume ($t28 == ($value#$1_Diem_Diem'#0'($t27) > 0));

    // if ($t28) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
    if ($t28) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
L6:

    // assume And(Gt(select Diem::Diem.value($t27), 0), Eq(7, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
    assume (($value#$1_Diem_Diem'#0'($t27) > 0) && $IsEqual'u8'(7, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
    assume {:print "$at(10,42825,42846)"} true;
    assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
L5:

    // opaque end: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    assume {:print "$at(10,42852,42853)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
L2:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::burn_with_capability [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+547
procedure {:timeLimit 40} $1_Diem_burn_with_capability$verify(_$t0: int, _$t1: $1_Diem_BurnCapability'#0', _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_Diem_Preburn'#0';
    var $t4: $1_Diem_Diem'#0';
    var $t5: $1_Diem_CurrencyInfo'#0';
    var $t6: Vec (int);
    var $t7: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t8: $1_Diem_Preburn'#0';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t10: int;
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: $1_Diem_Preburn'#0';
    var $t13: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t14: $1_Diem_PreburnWithMetadata'#0';
    var $t15: bool;
    var $t16: int;
    var $t17: $1_Diem_Preburn'#0';
    var $t18: Vec (int);
    var $t19: $Mutation ($1_Diem_Preburn'#0');
    var $t20: $1_Diem_Preburn'#0';
    var $t21: int;
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t23: $1_Diem_CurrencyInfo'#0';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t26: $1_Diem_Preburn'#0';
    var $t27: $1_Diem_Diem'#0';
    var $t28: bool;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $t2: int;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_PreburnQueue'#0'_$memory#365: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#366: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#367: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#368: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_Preburn'#0'_$memory#369: $Memory $1_Diem_Preburn'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#370: $Memory $1_Diem_PreburnQueue'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t19));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+547
    assume {:print "$at(10,42306,42853)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+547
    assume $IsValid'$1_Diem_BurnCapability'#0''($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+547
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+547
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+547
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t5, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+42
    assume {:print "$at(10,46802,46844)"} true;
    assume ($t5 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t6, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+51
    assume {:print "$at(10,46853,46904)"} true;
    assume ($t6 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t7, select Diem::CurrencyInfo.burn_events($t5)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+30
    assume {:print "$at(10,46913,46943)"} true;
    assume ($t7 == $burn_events#$1_Diem_CurrencyInfo'#0'($t5));

    // assume Identical($t8, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:891:9+50
    assume {:print "$at(10,43205,43255)"} true;
    assume ($t8 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume Identical($t10, select Diem::Diem.value(select Diem::Preburn.to_burn($t8))) at /home/ying/diem/language/diem-framework/modules/Diem.move:947:9+36
    assume {:print "$at(10,45965,46001)"} true;
    assume ($t10 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t8)));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:948:9+42
    assume {:print "$at(10,46010,46052)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:899:9+50
    assume {:print "$at(10,43560,43610)"} true;
    assume ($t12 == $1_Diem_spec_make_preburn'#0'($t2));

    // @368 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+1
    assume {:print "$at(10,42306,42307)"} true;
    $1_Diem_BurnCapability'#0'_$memory#368 := $1_Diem_BurnCapability'#0'_$memory;

    // @366 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#366 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @367 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+1
    $1_Diem_MintCapability'#0'_$memory#367 := $1_Diem_MintCapability'#0'_$memory;

    // @369 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+1
    $1_Diem_Preburn'#0'_$memory#369 := $1_Diem_Preburn'#0'_$memory;

    // @365 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+1
    $1_Diem_PreburnQueue'#0'_$memory#365 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+1
    assume {:print "$track_local(18,7,0):", $t0} $t0 == $t0;

    // trace_local[capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+1
    assume {:print "$track_local(18,7,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:5+1
    assume {:print "$track_local(18,7,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    // >> opaque call: $t5 := Diem::remove_preburn_from_queue<#0>($t0, $t2)
    assume {:print "$at(10,42599,42659)"} true;

    // assume Identical($t13, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t13 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // $t14 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume {:print "$at(10,42599,42659)"} true;

    // assume Identical($t15, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume ($t15 == (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t13, i)))), $t2)))))));

    // if ($t15) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    if ($t15) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
L4:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t16)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) && $IsEqual'u8'(5, $t16)) || ((var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t13, i)))), $t2))))) && $IsEqual'u8'(1, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume {:print "$at(10,42599,42659)"} true;
    assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
L3:

    // @370 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    $1_Diem_PreburnQueue'#0'_$memory#370 := $1_Diem_PreburnQueue'#0'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t0);
    }

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t14);

    // assume Implies(exists[@370]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#370, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t14))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t14))), $t2);

    // $t14 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:59+60

    // ($t17, $t18) := unpack Diem::PreburnWithMetadata<#0>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:13+43
    $t17 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t14);
    $t18 := $metadata#$1_Diem_PreburnWithMetadata'#0'($t14);

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:53+1

    // $t3 := $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:875:34+7
    $t3 := $t17;

    // trace_local[preburn]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:875:34+7
    assume {:print "$track_local(18,7,3):", $t3} $t3 == $t3;

    // $t19 := borrow_local($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:878:32+12
    assume {:print "$at(10,42729,42741)"} true;
    $t19 := $Mutation($Local(3), EmptyVec(), $t3);

    // assume Identical($t20, $t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:939:9+26
    assume {:print "$at(10,45559,45585)"} true;
    assume ($t20 == $Dereference($t19));

    // assume Identical($t21, select Diem::Diem.value(select Diem::Preburn.to_burn($t20))) at /home/ying/diem/language/diem-framework/modules/Diem.move:947:9+36
    assume {:print "$at(10,45965,46001)"} true;
    assume ($t21 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t20)));

    // assume Identical($t22, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:948:9+42
    assume {:print "$at(10,46010,46052)"} true;
    assume ($t22 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+42
    assume {:print "$at(10,46802,46844)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+51
    assume {:print "$at(10,46853,46904)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+30
    assume {:print "$at(10,46913,46943)"} true;
    assume ($t25 == $burn_events#$1_Diem_CurrencyInfo'#0'($t23));

    // Diem::burn_with_resource_cap<#0>($t19, $t0, $t1) on_abort goto L2 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:878:9+65
    assume {:print "$at(10,42706,42771)"} true;
    call $t19 := $1_Diem_burn_with_resource_cap'#0'($t19, $t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(10,42706,42771)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;
        goto L2;
    }

    // write_back[LocalRoot($t3)@]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:878:9+65
    $t3 := $Dereference($t19);

    // $t26 := move($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:880:35+7
    assume {:print "$at(10,42808,42815)"} true;
    $t26 := $t3;

    // $t27 := unpack Diem::Preburn<#0>($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:880:13+19
    $t27 := $to_burn#$1_Diem_Preburn'#0'($t26);

    // trace_local[to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:880:23+7
    assume {:print "$track_local(18,7,4):", $t27} $t27 == $t27;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
    // >> opaque call: Diem::destroy_zero<#0>($t10)
    assume {:print "$at(10,42825,42846)"} true;

    // opaque begin: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21

    // assume Identical($t28, Gt(select Diem::Diem.value($t27), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
    assume ($t28 == ($value#$1_Diem_Diem'#0'($t27) > 0));

    // if ($t28) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
    if ($t28) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
L6:

    // assume And(Gt(select Diem::Diem.value($t27), 0), Eq(7, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
    assume (($value#$1_Diem_Diem'#0'($t27) > 0) && $IsEqual'u8'(7, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
    assume {:print "$at(10,42825,42846)"} true;
    assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21
L5:

    // opaque end: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:881:9+21

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    assume {:print "$at(10,42852,42853)"} true;
L1:

    // assert Not(Not(exists[@365]<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:352:9+86
    assume {:print "$at(10,17223,17309)"} true;
    assert {:msg "assert_failed(10,17223,17309): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0);

    // assert Not(Not(exists[@365]<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:846:9+86
    assume {:print "$at(10,40803,40889)"} true;
    assert {:msg "assert_failed(10,40803,40889): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t9)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t9, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+121
    assume {:print "$at(10,40898,41019)"} true;
    assert {:msg "assert_failed(10,40898,41019): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t9)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t9, i)))), $t2)))));

    // assert Not(Eq<u64>($t10, 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:949:9+50
    assume {:print "$at(10,46061,46111)"} true;
    assert {:msg "assert_failed(10,46061,46111): function does not abort under this condition"}
      !$IsEqual'u64'($t10, 0);

    // assert Not(Lt(select Diem::CurrencyInfo.total_value($t11), $t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:9+65
    assume {:print "$at(10,46120,46185)"} true;
    assert {:msg "assert_failed(10,46120,46185): function does not abort under this condition"}
      !($total_value#$1_Diem_CurrencyInfo'#0'($t11) < $t10);

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t11), $t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:951:9+67
    assume {:print "$at(10,46194,46261)"} true;
    assert {:msg "assert_failed(10,46194,46261): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t11) < $t10);

    // assert Not(Not(Diem::spec_is_currency[@366]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#366);

    // assert Eq<u128>(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@366]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:955:9+142
    assume {:print "$at(10,46367,46509)"} true;
    assert {:msg "assert_failed(10,46367,46509): post-condition does not hold"}
      $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#366)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12))));

    // assert Eq<u64>(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@366]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:957:9+146
    assume {:print "$at(10,46518,46664)"} true;
    assert {:msg "assert_failed(10,46518,46664): post-condition does not hold"}
      $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#366)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12))));

    // assert Implies(exists[@365]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:854:9+113
    assume {:print "$at(10,41291,41404)"} true;
    assert {:msg "assert_failed(10,41291,41404): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assert Implies(Diem::spec_is_currency[@366]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@366]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#366) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#366))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@367]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#367, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@367]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#367, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@368]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#368, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@368]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#368, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@366]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@366]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#366) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#366))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@365]<Diem::PreburnQueue<#0>>(addr), exists[@369]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#369, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@365]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@366]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@366]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#366) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#366))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<#0>($t2))), $t6, $t0), $t7, Not(select Diem::CurrencyInfo.is_synthetic($t5)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+187
    assume {:print "$at(10,46952,47139)"} true;
    assert {:msg "assert_failed(10,46952,47139): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t7, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_spec_make_preburn'#0'($t2))), $t6, $t0), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t5)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<#0>($t2))), $t6, $t0), $t7, Not(select Diem::CurrencyInfo.is_synthetic($t5)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:5+228
    assume {:print "$at(10,42858,43086)"} true;
    assert {:msg "assert_failed(10,42858,43086): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t7, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_spec_make_preburn'#0'($t2))), $t6, $t0), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t5)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:883:5+228
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    assume {:print "$at(10,42852,42853)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Not(exists[@365]<Diem::PreburnQueue<#0>>($t0)), Not(exists[@365]<Diem::PreburnQueue<#0>>($t0))), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t9)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t9, i)))), $t2)), Eq<u64>($t10, 0)), Lt(select Diem::CurrencyInfo.total_value($t11), $t10)), Lt(select Diem::CurrencyInfo.preburn_value($t11), $t10)), Not(Diem::spec_is_currency[@366]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:5+228
    assume {:print "$at(10,42858,43086)"} true;
    assert {:msg "assert_failed(10,42858,43086): abort not covered by any of the `aborts_if` clauses"}
      ((((((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0)) || (var $range_0 := $Range(0, LenVec($t9)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t9, i)))), $t2)))))) || $IsEqual'u64'($t10, 0)) || ($total_value#$1_Diem_CurrencyInfo'#0'($t11) < $t10)) || ($preburn_value#$1_Diem_CurrencyInfo'#0'($t11) < $t10)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#366));

    // assert Or(Or(Or(Or(Or(Or(And(Not(exists[@365]<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t16)), And(Not(exists[@365]<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t16))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t9)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t9, i)))), $t2), Eq(1, $t16))), And(Eq<u64>($t10, 0), Eq(1, $t16))), And(Lt(select Diem::CurrencyInfo.total_value($t11), $t10), Eq(8, $t16))), And(Lt(select Diem::CurrencyInfo.preburn_value($t11), $t10), Eq(8, $t16))), And(Not(Diem::spec_is_currency[@366]<#0>()), Eq(5, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:5+228
    assert {:msg "assert_failed(10,42858,43086): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0) && $IsEqual'u8'(5, $t16)) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0) && $IsEqual'u8'(5, $t16))) || ((var $range_0 := $Range(0, LenVec($t9)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t9, i)))), $t2))))) && $IsEqual'u8'(1, $t16))) || ($IsEqual'u64'($t10, 0) && $IsEqual'u8'(1, $t16))) || (($total_value#$1_Diem_CurrencyInfo'#0'($t11) < $t10) && $IsEqual'u8'(8, $t16))) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($t11) < $t10) && $IsEqual'u8'(8, $t16))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#366) && $IsEqual'u8'(5, $t16)));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:5+228
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::burn_with_resource_cap<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1379
procedure {:inline 1} $1_Diem_burn_with_resource_cap'#0'(_$t0: $Mutation ($1_Diem_Preburn'#0'), _$t1: int, _$t2: $1_Diem_BurnCapability'#0') returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: $1_Diem_Preburn'#0';
    var $t13: int;
    var $t14: $1_Diem_CurrencyInfo'#0';
    var $t15: $1_Diem_CurrencyInfo'#0';
    var $t16: Vec (int);
    var $t17: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t18: Vec (int);
    var $t19: bool;
    var $t20: int;
    var $t21: $1_Diem_Diem'#0';
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: $Mutation ($1_Diem_Diem'#0');
    var $t28: $1_Diem_Diem'#0';
    var $t29: $1_Diem_Diem'#0';
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t34: int;
    var $t35: int;
    var $t36: bool;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: $Mutation (int);
    var $t43: int;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: int;
    var $t49: $Mutation (int);
    var $t50: bool;
    var $t51: bool;
    var $t52: $Mutation ($1_Event_EventHandle'$1_Diem_BurnEvent');
    var $t53: $1_Diem_BurnEvent;
    var $t0: $Mutation ($1_Diem_Preburn'#0');
    var $t1: int;
    var $t2: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t27));
    assume IsEmptyVec(p#$Mutation($t33));
    assume IsEmptyVec(p#$Mutation($t42));
    assume IsEmptyVec(p#$Mutation($t49));
    assume IsEmptyVec(p#$Mutation($t52));

    // bytecode translation starts here
    // assume Identical($t12, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:939:9+26
    assume {:print "$at(10,45559,45585)"} true;
    assume ($t12 == $Dereference($t0));

    // assume Identical($t13, select Diem::Diem.value(select Diem::Preburn.to_burn($t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:947:9+36
    assume {:print "$at(10,45965,46001)"} true;
    assume ($t13 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12)));

    // assume Identical($t14, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:948:9+42
    assume {:print "$at(10,46010,46052)"} true;
    assume ($t14 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t15, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+42
    assume {:print "$at(10,46802,46844)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t16, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+51
    assume {:print "$at(10,46853,46904)"} true;
    assume ($t16 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t17, select Diem::CurrencyInfo.burn_events($t15)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+30
    assume {:print "$at(10,46913,46943)"} true;
    assume ($t17 == $burn_events#$1_Diem_CurrencyInfo'#0'($t15));

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1
    assume {:print "$at(10,44137,44138)"} true;
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t0);
    assume {:print "$track_local(18,8,0):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1
    assume {:print "$track_local(18,8,1):", $t1} $t1 == $t1;

    // trace_local[_capability]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1
    assume {:print "$track_local(18,8,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    // >> opaque call: $t12 := Diem::currency_code<#0>()
    assume {:print "$at(10,44362,44387)"} true;

    // $t18 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25

    // assume Identical($t19, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    assume ($t19 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t19) goto L18 else goto L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    if ($t19) { goto L18; } else { goto L14; }

    // label L15 at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
L15:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    assume {:print "$at(10,44362,44387)"} true;
    assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    goto L13;

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
L14:

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    assume $IsValid'vec'u8''($t18);

    // assume Eq<vector<u8>>($t18, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    assume $IsEqual'vec'u8''($t18, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t18 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25

    // trace_local[currency_code]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:13+13
    assume {:print "$track_local(18,8,3):", $t18} $t18 == $t18;

    // $t21 := get_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:16+15
    assume {:print "$at(10,44456,44471)"} true;
    $t21 := $to_burn#$1_Diem_Preburn'#0'($Dereference($t0));

    // $t22 := get_field<Diem::Diem<#0>>.value($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:16+21
    $t22 := $value#$1_Diem_Diem'#0'($t21);

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:40+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := >($t22, $t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:38+1
    call $t24 := $Gt($t22, $t23);

    // $t25 := 4 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:65+14
    $t25 := 4;
    assume $IsValid'u64'($t25);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:915:43+37
    // >> opaque call: $t18 := Errors::invalid_state($t17)

    // $t26 := opaque begin: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:43+37

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:43+37
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:43+37
    assume $IsEqual'u64'($t26, 1);

    // $t26 := opaque end: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:43+37

    // trace_local[tmp#$6]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
    assume {:print "$track_local(18,8,6):", $t26} $t26 == $t26;

    // trace_local[tmp#$5]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
    assume {:print "$track_local(18,8,5):", $t24} $t24 == $t24;

    // if ($t24) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
    if ($t24) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
    assume {:print "$at(10,44449,44521)"} true;
    assume {:print "$track_abort(18,8):", $t26} $t26 == $t26;

    // $t20 := move($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
    $t20 := $t26;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
    goto L13;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:917:58+7
    assume {:print "$at(10,44624,44631)"} true;
L0:

    // $t27 := borrow_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:53+20
    $t27 := $ChildMutation($t0, 0, $to_burn#$1_Diem_Preburn'#0'($Dereference($t0)));

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    // >> opaque call: $t20 := Diem::withdraw_all<#0>($t19)

    // $t28 := opaque begin: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44

    // $t29 := read_ref($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    $t29 := $Dereference($t27);

    // havoc[mut]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t27 := $UpdateMutation($t27, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t27));

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t27));

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    assume $IsValid'$1_Diem_Diem'#0''($t28);

    // assume Eq<u64>(select Diem::Diem.value($t28), select Diem::Diem.value($t29)) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t28), $value#$1_Diem_Diem'#0'($t29));

    // assume Eq<u64>(select Diem::Diem.value($t27), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t27)), 0);

    // $t28 := opaque end: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44

    // write_back[Reference($t0).to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    $t0 := $UpdateMutation($t0, $Update'$1_Diem_Preburn'#0''_to_burn($Dereference($t0), $Dereference($t27)));

    // $t30 := unpack Diem::Diem<#0>($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:13+14
    $t30 := $value#$1_Diem_Diem'#0'($t28);

    // trace_local[value]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:20+5
    assume {:print "$track_local(18,8,11):", $t30} $t30 == $t30;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,44683,44713)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30

    // assume Identical($t31, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
    assume ($t31 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t31) goto L19 else goto L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
    if ($t31) { goto L19; } else { goto L16; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
L17:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
    assume {:print "$at(10,44683,44713)"} true;
    assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
    goto L13;

    // label L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
L16:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30

    // $t32 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:920:62+13
    assume {:print "$at(10,44776,44789)"} true;
    $t32 := 173345816;
    assume $IsValid'address'($t32);

    // $t33 := borrow_global<Diem::CurrencyInfo<#0>>($t32) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:920:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t32)) {
        call $ExecFailureAbort();
    } else {
        $t33 := $Mutation($Global($t32), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t32));
    }
    if ($abort_flag) {
        assume {:print "$at(10,44734,44751)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // trace_local[info]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:920:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t33);
    assume {:print "$track_local(18,8,4):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t34 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:16+16
    assume {:print "$at(10,44807,44823)"} true;
    $t34 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t35 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:36+15
    call $t35 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(10,44827,44842)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t36 := >=($t34, $t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:33+2
    call $t36 := $Ge($t34, $t35);

    // $t37 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:76+14
    $t37 := 1;
    assume $IsValid'u64'($t37);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:921:53+38
    // >> opaque call: $t28 := Errors::limit_exceeded($t27)

    // $t38 := opaque begin: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:53+38

    // assume WellFormed($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:53+38
    assume $IsValid'u64'($t38);

    // assume Eq<u64>($t38, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:53+38
    assume $IsEqual'u64'($t38, 8);

    // $t38 := opaque end: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:53+38

    // trace_local[tmp#$8]($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    assume {:print "$track_local(18,8,8):", $t38} $t38 == $t38;

    // trace_local[tmp#$7]($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    assume {:print "$track_local(18,8,7):", $t36} $t36 == $t36;

    // if ($t36) goto L2 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    if ($t36) { goto L2; } else { goto L10; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
L3:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83

    // trace_abort($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    assume {:print "$at(10,44800,44883)"} true;
    assume {:print "$track_abort(18,8):", $t38} $t38 == $t38;

    // $t20 := move($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    $t20 := $t38;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    goto L13;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:922:28+4
    assume {:print "$at(10,44912,44916)"} true;
L2:

    // $t39 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:28+16
    $t39 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t40 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:922:47+15
    call $t40 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(10,44931,44946)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t41 := -($t39, $t40) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:922:45+1
    call $t41 := $Sub($t39, $t40);
    if ($abort_flag) {
        assume {:print "$at(10,44929,44930)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t42 := borrow_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:9+16
    $t42 := $ChildMutation($t33, 0, $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // write_ref($t42, $t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:9+53
    $t42 := $UpdateMutation($t42, $t41);

    // write_back[Reference($t33).total_value]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:9+53
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'#0''_total_value($Dereference($t33), $Dereference($t42)));

    // $t43 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:16+18
    assume {:print "$at(10,44963,44981)"} true;
    $t43 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t44 := >=($t43, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:35+2
    call $t44 := $Ge($t43, $t30);

    // $t45 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:68+8
    $t45 := 2;
    assume $IsValid'u64'($t45);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:923:45+32
    // >> opaque call: $t36 := Errors::limit_exceeded($t35)

    // $t46 := opaque begin: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:45+32

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:45+32
    assume $IsValid'u64'($t46);

    // assume Eq<u64>($t46, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:45+32
    assume $IsEqual'u64'($t46, 8);

    // $t46 := opaque end: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:45+32

    // trace_local[tmp#$10]($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    assume {:print "$track_local(18,8,10):", $t46} $t46 == $t46;

    // trace_local[tmp#$9]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    assume {:print "$track_local(18,8,9):", $t44} $t44 == $t44;

    // if ($t44) goto L4 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    if ($t44) { goto L4; } else { goto L11; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
L5:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69

    // trace_abort($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    assume {:print "$at(10,44956,45025)"} true;
    assume {:print "$track_abort(18,8):", $t46} $t46 == $t46;

    // $t20 := move($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    $t20 := $t46;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    goto L13;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:924:30+4
    assume {:print "$at(10,45056,45060)"} true;
L4:

    // $t47 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:30+18
    $t47 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t48 := -($t47, $t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:924:49+1
    call $t48 := $Sub($t47, $t30);
    if ($abort_flag) {
        assume {:print "$at(10,45075,45076)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t49 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:9+18
    $t49 := $ChildMutation($t33, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // write_ref($t49, $t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:9+47
    $t49 := $UpdateMutation($t49, $t48);

    // write_back[Reference($t33).preburn_value]($t49) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:9+47
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t33), $Dereference($t49)));

    // $t50 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:14+17
    assume {:print "$at(10,45241,45258)"} true;
    $t50 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t51 := !($t50) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:13+1
    call $t51 := $Not($t50);

    // if ($t51) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273
    if ($t51) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:22+4
    assume {:print "$at(10,45314,45318)"} true;
L6:

    // $t52 := borrow_field<Diem::CurrencyInfo<#0>>.burn_events($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:17+21
    $t52 := $ChildMutation($t33, 9, $burn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // $t53 := pack Diem::BurnEvent($t30, $t18, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:930:17+136
    assume {:print "$at(10,45348,45484)"} true;
    $t53 := $1_Diem_BurnEvent($t30, $t18, $t1);

    // Event::emit_event<Diem::BurnEvent>($t52, $t53) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:928:13+224
    assume {:print "$at(10,45274,45498)"} true;
    call $t52 := $1_Event_emit_event'$1_Diem_BurnEvent'($t52, $t53);
    if ($abort_flag) {
        assume {:print "$at(10,45274,45498)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:928:13+224

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:928:13+224
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:14+1
    assume {:print "$at(10,45498,45499)"} true;
    goto L9;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273
    assume {:print "$at(10,45236,45509)"} true;
L8:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:10+1
    assume {:print "$at(10,45509,45510)"} true;
L9:

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:10+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t0);
    assume {:print "$track_local(18,8,0):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:10+1
    goto L12;

    // label L10 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L10:

    // destroy($t0) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L11 at <internal>:1:1+10
L11:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:5+1
    assume {:print "$at(10,45515,45516)"} true;
L12:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:937:5+1
    $ret0 := $t0;
    return;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:5+1
L13:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

    // label L18 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L18:

    // destroy($t0) at <internal>:1:1+10

    // goto L15 at <internal>:1:1+10
    goto L15;

    // label L19 at <internal>:1:1+10
L19:

    // destroy($t0) at <internal>:1:1+10

    // goto L17 at <internal>:1:1+10
    goto L17;

}

// fun Diem::burn_with_resource_cap [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1379
procedure {:timeLimit 40} $1_Diem_burn_with_resource_cap$verify(_$t0: $Mutation ($1_Diem_Preburn'#0'), _$t1: int, _$t2: $1_Diem_BurnCapability'#0') returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: $1_Diem_Preburn'#0';
    var $t13: int;
    var $t14: $1_Diem_CurrencyInfo'#0';
    var $t15: $1_Diem_CurrencyInfo'#0';
    var $t16: Vec (int);
    var $t17: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t18: Vec (int);
    var $t19: bool;
    var $t20: int;
    var $t21: $1_Diem_Diem'#0';
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: $Mutation ($1_Diem_Diem'#0');
    var $t28: $1_Diem_Diem'#0';
    var $t29: $1_Diem_Diem'#0';
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t34: int;
    var $t35: int;
    var $t36: bool;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: $Mutation (int);
    var $t43: int;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: int;
    var $t49: $Mutation (int);
    var $t50: bool;
    var $t51: bool;
    var $t52: $Mutation ($1_Event_EventHandle'$1_Diem_BurnEvent');
    var $t53: $1_Diem_BurnEvent;
    var $t0: $Mutation ($1_Diem_Preburn'#0');
    var $t1: int;
    var $t2: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_CurrencyInfo'#0'_$memory#339: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#340: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#341: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#342: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#343: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t27));
    assume IsEmptyVec(p#$Mutation($t33));
    assume IsEmptyVec(p#$Mutation($t42));
    assume IsEmptyVec(p#$Mutation($t49));
    assume IsEmptyVec(p#$Mutation($t52));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1379
    assume {:print "$at(10,44137,45516)"} true;
    assume $IsValid'$1_Diem_Preburn'#0''($Dereference($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1379
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1379
    assume $IsValid'$1_Diem_BurnCapability'#0''($t2);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1379
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t12, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:939:9+26
    assume {:print "$at(10,45559,45585)"} true;
    assume ($t12 == $Dereference($t0));

    // assume Identical($t13, select Diem::Diem.value(select Diem::Preburn.to_burn($t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:947:9+36
    assume {:print "$at(10,45965,46001)"} true;
    assume ($t13 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12)));

    // assume Identical($t14, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:948:9+42
    assume {:print "$at(10,46010,46052)"} true;
    assume ($t14 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t15, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+42
    assume {:print "$at(10,46802,46844)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t16, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+51
    assume {:print "$at(10,46853,46904)"} true;
    assume ($t16 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t17, select Diem::CurrencyInfo.burn_events($t15)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+30
    assume {:print "$at(10,46913,46943)"} true;
    assume ($t17 == $burn_events#$1_Diem_CurrencyInfo'#0'($t15));

    // @341 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1
    assume {:print "$at(10,44137,44138)"} true;
    $1_Diem_BurnCapability'#0'_$memory#341 := $1_Diem_BurnCapability'#0'_$memory;

    // @339 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#339 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @340 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1
    $1_Diem_MintCapability'#0'_$memory#340 := $1_Diem_MintCapability'#0'_$memory;

    // @343 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1
    $1_Diem_Preburn'#0'_$memory#343 := $1_Diem_Preburn'#0'_$memory;

    // @342 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1
    $1_Diem_PreburnQueue'#0'_$memory#342 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t0);
    assume {:print "$track_local(18,8,0):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1
    assume {:print "$track_local(18,8,1):", $t1} $t1 == $t1;

    // trace_local[_capability]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:908:5+1
    assume {:print "$track_local(18,8,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    // >> opaque call: $t12 := Diem::currency_code<#0>()
    assume {:print "$at(10,44362,44387)"} true;

    // $t18 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25

    // assume Identical($t19, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    assume ($t19 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t19) goto L18 else goto L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    if ($t19) { goto L18; } else { goto L14; }

    // label L15 at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
L15:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    assume {:print "$at(10,44362,44387)"} true;
    assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    goto L13;

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
L14:

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    assume $IsValid'vec'u8''($t18);

    // assume Eq<vector<u8>>($t18, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25
    assume $IsEqual'vec'u8''($t18, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t18 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:913:29+25

    // trace_local[currency_code]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:13+13
    assume {:print "$track_local(18,8,3):", $t18} $t18 == $t18;

    // $t21 := get_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:16+15
    assume {:print "$at(10,44456,44471)"} true;
    $t21 := $to_burn#$1_Diem_Preburn'#0'($Dereference($t0));

    // $t22 := get_field<Diem::Diem<#0>>.value($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:16+21
    $t22 := $value#$1_Diem_Diem'#0'($t21);

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:40+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := >($t22, $t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:38+1
    call $t24 := $Gt($t22, $t23);

    // $t25 := 4 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:65+14
    $t25 := 4;
    assume $IsValid'u64'($t25);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:915:43+37
    // >> opaque call: $t18 := Errors::invalid_state($t17)

    // $t26 := opaque begin: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:43+37

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:43+37
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:43+37
    assume $IsEqual'u64'($t26, 1);

    // $t26 := opaque end: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:43+37

    // trace_local[tmp#$6]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
    assume {:print "$track_local(18,8,6):", $t26} $t26 == $t26;

    // trace_local[tmp#$5]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
    assume {:print "$track_local(18,8,5):", $t24} $t24 == $t24;

    // if ($t24) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
    if ($t24) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
    assume {:print "$at(10,44449,44521)"} true;
    assume {:print "$track_abort(18,8):", $t26} $t26 == $t26;

    // $t20 := move($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
    $t20 := $t26;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:9+72
    goto L13;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:917:58+7
    assume {:print "$at(10,44624,44631)"} true;
L0:

    // $t27 := borrow_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:53+20
    $t27 := $ChildMutation($t0, 0, $to_burn#$1_Diem_Preburn'#0'($Dereference($t0)));

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    // >> opaque call: $t20 := Diem::withdraw_all<#0>($t19)

    // $t28 := opaque begin: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44

    // $t29 := read_ref($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    $t29 := $Dereference($t27);

    // havoc[mut]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t27 := $UpdateMutation($t27, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t27));

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t27));

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    assume $IsValid'$1_Diem_Diem'#0''($t28);

    // assume Eq<u64>(select Diem::Diem.value($t28), select Diem::Diem.value($t29)) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t28), $value#$1_Diem_Diem'#0'($t29));

    // assume Eq<u64>(select Diem::Diem.value($t27), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t27)), 0);

    // $t28 := opaque end: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44

    // write_back[Reference($t0).to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:30+44
    $t0 := $UpdateMutation($t0, $Update'$1_Diem_Preburn'#0''_to_burn($Dereference($t0), $Dereference($t27)));

    // $t30 := unpack Diem::Diem<#0>($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:13+14
    $t30 := $value#$1_Diem_Diem'#0'($t28);

    // trace_local[value]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:20+5
    assume {:print "$track_local(18,8,11):", $t30} $t30 == $t30;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,44683,44713)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30

    // assume Identical($t31, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
    assume ($t31 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t31) goto L19 else goto L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
    if ($t31) { goto L19; } else { goto L16; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
L17:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
    assume {:print "$at(10,44683,44713)"} true;
    assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
    goto L13;

    // label L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30
L16:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:919:9+30

    // $t32 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:920:62+13
    assume {:print "$at(10,44776,44789)"} true;
    $t32 := 173345816;
    assume $IsValid'address'($t32);

    // $t33 := borrow_global<Diem::CurrencyInfo<#0>>($t32) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:920:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t32)) {
        call $ExecFailureAbort();
    } else {
        $t33 := $Mutation($Global($t32), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t32));
    }
    if ($abort_flag) {
        assume {:print "$at(10,44734,44751)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // trace_local[info]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:920:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t33);
    assume {:print "$track_local(18,8,4):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t34 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:16+16
    assume {:print "$at(10,44807,44823)"} true;
    $t34 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t35 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:36+15
    call $t35 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(10,44827,44842)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t36 := >=($t34, $t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:33+2
    call $t36 := $Ge($t34, $t35);

    // $t37 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:76+14
    $t37 := 1;
    assume $IsValid'u64'($t37);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:921:53+38
    // >> opaque call: $t28 := Errors::limit_exceeded($t27)

    // $t38 := opaque begin: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:53+38

    // assume WellFormed($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:53+38
    assume $IsValid'u64'($t38);

    // assume Eq<u64>($t38, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:53+38
    assume $IsEqual'u64'($t38, 8);

    // $t38 := opaque end: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:53+38

    // trace_local[tmp#$8]($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    assume {:print "$track_local(18,8,8):", $t38} $t38 == $t38;

    // trace_local[tmp#$7]($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    assume {:print "$track_local(18,8,7):", $t36} $t36 == $t36;

    // if ($t36) goto L2 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    if ($t36) { goto L2; } else { goto L10; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
L3:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t33)), Le(select Diem::CurrencyInfo.scaling_factor($t33), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33)) <= 10000000000));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    assume {:print "$at(10,44800,44883)"} true;

    // trace_abort($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    assume {:print "$at(10,44800,44883)"} true;
    assume {:print "$track_abort(18,8):", $t38} $t38 == $t38;

    // $t20 := move($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    $t20 := $t38;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+83
    goto L13;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:922:28+4
    assume {:print "$at(10,44912,44916)"} true;
L2:

    // $t39 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:28+16
    $t39 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t40 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:922:47+15
    call $t40 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(10,44931,44946)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t41 := -($t39, $t40) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:922:45+1
    call $t41 := $Sub($t39, $t40);
    if ($abort_flag) {
        assume {:print "$at(10,44929,44930)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t42 := borrow_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:9+16
    $t42 := $ChildMutation($t33, 0, $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // write_ref($t42, $t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:9+53
    $t42 := $UpdateMutation($t42, $t41);

    // write_back[Reference($t33).total_value]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:9+53
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'#0''_total_value($Dereference($t33), $Dereference($t42)));

    // $t43 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:16+18
    assume {:print "$at(10,44963,44981)"} true;
    $t43 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t44 := >=($t43, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:35+2
    call $t44 := $Ge($t43, $t30);

    // $t45 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:68+8
    $t45 := 2;
    assume $IsValid'u64'($t45);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:923:45+32
    // >> opaque call: $t36 := Errors::limit_exceeded($t35)

    // $t46 := opaque begin: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:45+32

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:45+32
    assume $IsValid'u64'($t46);

    // assume Eq<u64>($t46, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:45+32
    assume $IsEqual'u64'($t46, 8);

    // $t46 := opaque end: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:45+32

    // trace_local[tmp#$10]($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    assume {:print "$track_local(18,8,10):", $t46} $t46 == $t46;

    // trace_local[tmp#$9]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    assume {:print "$track_local(18,8,9):", $t44} $t44 == $t44;

    // if ($t44) goto L4 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    if ($t44) { goto L4; } else { goto L11; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
L5:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t33)), Le(select Diem::CurrencyInfo.scaling_factor($t33), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    assume {:print "$at(10,44956,45025)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69

    // trace_abort($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    assume {:print "$at(10,44956,45025)"} true;
    assume {:print "$track_abort(18,8):", $t46} $t46 == $t46;

    // $t20 := move($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    $t20 := $t46;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+69
    goto L13;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:924:30+4
    assume {:print "$at(10,45056,45060)"} true;
L4:

    // $t47 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:30+18
    $t47 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t48 := -($t47, $t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:924:49+1
    call $t48 := $Sub($t47, $t30);
    if ($abort_flag) {
        assume {:print "$at(10,45075,45076)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t49 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:9+18
    $t49 := $ChildMutation($t33, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // write_ref($t49, $t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:9+47
    $t49 := $UpdateMutation($t49, $t48);

    // write_back[Reference($t33).preburn_value]($t49) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:9+47
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t33), $Dereference($t49)));

    // $t50 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:14+17
    assume {:print "$at(10,45241,45258)"} true;
    $t50 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t51 := !($t50) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:13+1
    call $t51 := $Not($t50);

    // if ($t51) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273
    if ($t51) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:22+4
    assume {:print "$at(10,45314,45318)"} true;
L6:

    // $t52 := borrow_field<Diem::CurrencyInfo<#0>>.burn_events($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:17+21
    $t52 := $ChildMutation($t33, 9, $burn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // $t53 := pack Diem::BurnEvent($t30, $t18, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:930:17+136
    assume {:print "$at(10,45348,45484)"} true;
    $t53 := $1_Diem_BurnEvent($t30, $t18, $t1);

    // Event::emit_event<Diem::BurnEvent>($t52, $t53) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:928:13+224
    assume {:print "$at(10,45274,45498)"} true;
    call $t52 := $1_Event_emit_event'$1_Diem_BurnEvent'($t52, $t53);
    if ($abort_flag) {
        assume {:print "$at(10,45274,45498)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t33)), Le(select Diem::CurrencyInfo.scaling_factor($t33), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:928:13+224
    assume {:print "$at(10,45274,45498)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:14+1
    assume {:print "$at(10,45498,45499)"} true;
    goto L9;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273
    assume {:print "$at(10,45236,45509)"} true;
L8:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t33)), Le(select Diem::CurrencyInfo.scaling_factor($t33), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273
    assume {:print "$at(10,45236,45509)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:9+273

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:10+1
    assume {:print "$at(10,45509,45510)"} true;
L9:

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:10+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t0);
    assume {:print "$track_local(18,8,0):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:10+1
    goto L12;

    // label L10 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L10:

    // destroy($t0) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L11 at <internal>:1:1+10
L11:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:5+1
    assume {:print "$at(10,45515,45516)"} true;
L12:

    // assert Not(Eq<u64>($t13, 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:949:9+50
    assume {:print "$at(10,46061,46111)"} true;
    assert {:msg "assert_failed(10,46061,46111): function does not abort under this condition"}
      !$IsEqual'u64'($t13, 0);

    // assert Not(Lt(select Diem::CurrencyInfo.total_value($t14), $t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:9+65
    assume {:print "$at(10,46120,46185)"} true;
    assert {:msg "assert_failed(10,46120,46185): function does not abort under this condition"}
      !($total_value#$1_Diem_CurrencyInfo'#0'($t14) < $t13);

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t14), $t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:951:9+67
    assume {:print "$at(10,46194,46261)"} true;
    assert {:msg "assert_failed(10,46194,46261): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t14) < $t13);

    // assert Not(Not(Diem::spec_is_currency[@339]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#339);

    // assert Eq<u128>(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@339]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:955:9+142
    assume {:print "$at(10,46367,46509)"} true;
    assert {:msg "assert_failed(10,46367,46509): post-condition does not hold"}
      $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#339)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12))));

    // assert Eq<u64>(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@339]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:957:9+146
    assume {:print "$at(10,46518,46664)"} true;
    assert {:msg "assert_failed(10,46518,46664): post-condition does not hold"}
      $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#339)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12))));

    // assert Implies(Diem::spec_is_currency[@339]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@339]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#339) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#339))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@340]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#340, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@340]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#340, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@341]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#341, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@341]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#341, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@339]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@339]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#339) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#339))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@342]<Diem::PreburnQueue<#0>>(addr), exists[@343]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#342, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#343, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@342]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#342, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@339]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@339]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#339) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#339))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn($t12)), $t16, $t1), $t17, Not(select Diem::CurrencyInfo.is_synthetic($t15)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+187
    assume {:print "$at(10,46952,47139)"} true;
    assert {:msg "assert_failed(10,46952,47139): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t17, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12)), $t16, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t15)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn($t12)), $t16, $t1), $t17, Not(select Diem::CurrencyInfo.is_synthetic($t15)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:5+297
    assume {:print "$at(10,45521,45818)"} true;
    assert {:msg "assert_failed(10,45521,45818): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t17, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12)), $t16, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t15)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:938:5+297
    $ret0 := $t0;
    return;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:5+1
    assume {:print "$at(10,45515,45516)"} true;
L13:

    // assert Or(Or(Or(Eq<u64>($t13, 0), Lt(select Diem::CurrencyInfo.total_value($t14), $t13)), Lt(select Diem::CurrencyInfo.preburn_value($t14), $t13)), Not(Diem::spec_is_currency[@339]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:5+297
    assume {:print "$at(10,45521,45818)"} true;
    assert {:msg "assert_failed(10,45521,45818): abort not covered by any of the `aborts_if` clauses"}
      ((($IsEqual'u64'($t13, 0) || ($total_value#$1_Diem_CurrencyInfo'#0'($t14) < $t13)) || ($preburn_value#$1_Diem_CurrencyInfo'#0'($t14) < $t13)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#339));

    // assert Or(Or(Or(And(Eq<u64>($t13, 0), Eq(1, $t20)), And(Lt(select Diem::CurrencyInfo.total_value($t14), $t13), Eq(8, $t20))), And(Lt(select Diem::CurrencyInfo.preburn_value($t14), $t13), Eq(8, $t20))), And(Not(Diem::spec_is_currency[@339]<#0>()), Eq(5, $t20))) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:5+297
    assert {:msg "assert_failed(10,45521,45818): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((($IsEqual'u64'($t13, 0) && $IsEqual'u8'(1, $t20)) || (($total_value#$1_Diem_CurrencyInfo'#0'($t14) < $t13) && $IsEqual'u8'(8, $t20))) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($t14) < $t13) && $IsEqual'u8'(8, $t20))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#339) && $IsEqual'u8'(5, $t20)));

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:5+297
    $abort_code := $t20;
    $abort_flag := true;
    return;

    // label L18 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L18:

    // destroy($t0) at <internal>:1:1+10

    // goto L15 at <internal>:1:1+10
    goto L15;

    // label L19 at <internal>:1:1+10
L19:

    // destroy($t0) at <internal>:1:1+10

    // goto L17 at <internal>:1:1+10
    goto L17;

}

// fun Diem::cancel_burn [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:361:5+549
procedure {:timeLimit 40} $1_Diem_cancel_burn$verify(_$t0: int, _$t1: int, _$t2: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: $1_Diem_CurrencyInfo'#0';
    var $t7: $1_Diem_CurrencyInfo'#0';
    var $t8: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t9: $1_Diem_CurrencyInfo'#0';
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: Vec (int);
    var $t12: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_BurnCapability'#0';
    var $t20: $1_Diem_CurrencyInfo'#0';
    var $t21: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t23: $1_Diem_CurrencyInfo'#0';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t26: $1_Diem_Diem'#0';
    var $t27: $1_Diem_CurrencyInfo'#0';
    var $t28: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_BurnCapability'#0'_$memory#359: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#360: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#361: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_MintCapability'#0'_$memory#362: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_Preburn'#0'_$memory#363: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:391:17+6
    assume {:print "$at(10,19100,19106)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:391:17+6
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:391:17+6
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:391:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:391:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:391:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t6, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:376:9+66
    assume {:print "$at(10,18324,18390)"} true;
    assume ($t6 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t7, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:9+57
    assume {:print "$at(10,49345,49402)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t8, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t8 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t9, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1030:9+57
    assume {:print "$at(10,49761,49818)"} true;
    assume ($t9 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1037:9+42
    assume {:print "$at(10,50108,50150)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t11, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1038:9+51
    assume {:print "$at(10,50159,50210)"} true;
    assume ($t11 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, select Diem::CurrencyInfo.cancel_burn_events($t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+37
    assume {:print "$at(10,50219,50256)"} true;
    assume ($t12 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t10));

    // assume CanModify<Diem::PreburnQueue<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:378:9+57
    assume {:print "$at(10,18484,18541)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t1];

    // assume CanModify<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:379:9+55
    assume {:print "$at(10,18550,18605)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[173345816];

    // @359 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:379:9+55
    $1_Diem_BurnCapability'#0'_$memory#359 := $1_Diem_BurnCapability'#0'_$memory;

    // @360 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:379:9+55
    $1_Diem_CurrencyInfo'#0'_$memory#360 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @362 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:379:9+55
    $1_Diem_MintCapability'#0'_$memory#362 := $1_Diem_MintCapability'#0'_$memory;

    // @363 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:379:9+55
    $1_Diem_Preburn'#0'_$memory#363 := $1_Diem_Preburn'#0'_$memory;

    // @361 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:379:9+55
    $1_Diem_PreburnQueue'#0'_$memory#361 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:361:5+1
    assume {:print "$at(10,17743,17744)"} true;
    assume {:print "$track_local(18,9,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:361:5+1
    assume {:print "$track_local(18,9,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:361:5+1
    assume {:print "$track_local(18,9,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:366:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,17949,17979)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:366:9+30

    // assume Identical($t13, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:366:9+30
    assume ($t13 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t13) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:366:9+30
    if ($t13) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:366:9+30
L5:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t14)) at /home/ying/diem/language/diem-framework/modules/Diem.move:366:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t14));

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:366:9+30
    assume {:print "$at(10,17949,17979)"} true;
    assume {:print "$track_abort(18,9):", $t14} $t14 == $t14;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:366:9+30
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:366:9+30
L4:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:366:9+30

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:367:20+27
    // >> opaque call: $t6 := Signer::address_of($t0)
    assume {:print "$at(10,18000,18027)"} true;

    // $t15 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:367:20+27

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:367:20+27
    assume $IsValid'address'($t15);

    // assume Eq<address>($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:367:20+27
    assume $IsEqual'address'($t15, $1_Signer_spec_address_of($t0));

    // $t15 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:367:20+27

    // trace_local[addr]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:367:13+4
    assume {:print "$track_local(18,9,3):", $t15} $t15 == $t15;

    // $t16 := exists<Diem::BurnCapability<#0>>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:16+6
    assume {:print "$at(10,18044,18050)"} true;
    $t16 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t15);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:84+16
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:368:56+45
    // >> opaque call: $t9 := Errors::requires_capability($t8)

    // $t18 := opaque begin: Errors::requires_capability($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:56+45

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:56+45
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:56+45
    assume $IsEqual'u64'($t18, 4);

    // $t18 := opaque end: Errors::requires_capability($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:56+45

    // trace_local[tmp#$5]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+93
    assume {:print "$track_local(18,9,5):", $t18} $t18 == $t18;

    // trace_local[tmp#$4]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+93
    assume {:print "$track_local(18,9,4):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+93
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+93
L1:

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+93
    assume {:print "$at(10,18037,18130)"} true;
    assume {:print "$track_abort(18,9):", $t18} $t18 == $t18;

    // $t14 := move($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+93
    $t14 := $t18;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:13+15
    assume {:print "$at(10,18181,18196)"} true;
L0:

    // $t19 := get_global<Diem::BurnCapability<#0>>($t15) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/Diem.move:371:13+13
    assume {:print "$at(10,18210,18223)"} true;
    if (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t15)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $t15);
    }
    if ($abort_flag) {
        assume {:print "$at(10,18210,18223)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,9):", $t14} $t14 == $t14;
        goto L3;
    }

    // assume Identical($t20, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:9+57
    assume {:print "$at(10,49345,49402)"} true;
    assume ($t20 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t21, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t21 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t22, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1030:9+57
    assume {:print "$at(10,49761,49818)"} true;
    assume ($t22 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1037:9+42
    assume {:print "$at(10,50108,50150)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1038:9+51
    assume {:print "$at(10,50159,50210)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.cancel_burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+37
    assume {:print "$at(10,50219,50256)"} true;
    assume ($t25 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t23));

    // assert CanModify<Diem::PreburnQueue<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:9+146
    assume {:print "$at(10,18140,18286)"} true;
    assert {:msg "assert_failed(10,18140,18286): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t1];

    // assert CanModify<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:9+146
    assert {:msg "assert_failed(10,18140,18286): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[173345816];

    // $t26 := Diem::cancel_burn_with_capability<#0>($t1, $t19, $t2) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/Diem.move:369:9+146
    call $t26 := $1_Diem_cancel_burn_with_capability'#0'($t1, $t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,18140,18286)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,9):", $t14} $t14 == $t14;
        goto L3;
    }

    // trace_return[0]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:9+146
    assume {:print "$track_return(18,9,0):", $t26} $t26 == $t26;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:374:5+1
    assume {:print "$at(10,18291,18292)"} true;
L2:

    // assume Identical($t27, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:377:9+76
    assume {:print "$at(10,18399,18475)"} true;
    assume ($t27 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t28, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1031:9+67
    assume {:print "$at(10,49827,49894)"} true;
    assume ($t28 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assert Not(Not(exists[@359]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:399:9+111
    assume {:print "$at(10,19351,19462)"} true;
    assert {:msg "assert_failed(10,19351,19462): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#359, $1_Signer_spec_address_of($t0));

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t7), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1024:9+66
    assume {:print "$at(10,49515,49581)"} true;
    assert {:msg "assert_failed(10,49515,49581): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t7) < $t2);

    // assert Not(Not(Diem::spec_is_currency[@360]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360);

    // assert Not(Not(exists[@361]<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:846:9+86
    assume {:print "$at(10,40803,40889)"} true;
    assert {:msg "assert_failed(10,40803,40889): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#361, $t1);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t8)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t8, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+121
    assume {:print "$at(10,40898,41019)"} true;
    assert {:msg "assert_failed(10,40898,41019): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t8)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t8, i)))), $t2)))));

    // assert Eq<Diem::CurrencyInfo<#0>>($t28, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t9, Sub(select Diem::CurrencyInfo.preburn_value($t9), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1032:9+84
    assume {:print "$at(10,49903,49987)"} true;
    assert {:msg "assert_failed(10,49903,49987): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t28, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t9, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t9) - $t2)));

    // assert Implies(exists[@361]<Diem::PreburnQueue<#0>>($t1), exists<Diem::PreburnQueue<#0>>($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:854:9+113
    assume {:print "$at(10,41291,41404)"} true;
    assert {:msg "assert_failed(10,41291,41404): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#361, $t1) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t1));

    // assert exists<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:383:9+54
    assume {:print "$at(10,18762,18816)"} true;
    assert {:msg "assert_failed(10,18762,18816): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816);

    // assert exists<Diem::PreburnQueue<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:384:9+56
    assume {:print "$at(10,18825,18881)"} true;
    assert {:msg "assert_failed(10,18825,18881): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t1);

    // assert Eq<Diem::CurrencyInfo<#0>>($t27, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t6, select Diem::CurrencyInfo.preburn_value($t27))) at /home/ying/diem/language/diem-framework/modules/Diem.move:385:9+153
    assume {:print "$at(10,18890,19043)"} true;
    assert {:msg "assert_failed(10,18890,19043): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t27, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t6, $preburn_value#$1_Diem_CurrencyInfo'#0'($t27)));

    // assert Eq<u64>(select Diem::Diem.value($t26), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:390:9+31
    assume {:print "$at(10,19052,19083)"} true;
    assert {:msg "assert_failed(10,19052,19083): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t26), $t2);

    // assert Gt(select Diem::Diem.value($t26), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:391:9+25
    assume {:print "$at(10,19092,19117)"} true;
    assert {:msg "assert_failed(10,19092,19117): post-condition does not hold"}
      ($value#$1_Diem_Diem'#0'($t26) > 0);

    // assert Implies(Diem::spec_is_currency[@360]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@360]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#360))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@362]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#362, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@362]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#362, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@360]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@360]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#360))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@359]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#359, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@359]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#359, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@360]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@360]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#360))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@361]<Diem::PreburnQueue<#0>>(addr), exists[@363]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#361, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#363, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@361]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#361, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@360]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@360]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#360))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t11, $t1), $t12, Not(select Diem::CurrencyInfo.is_synthetic($t10)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1040:9+165
    assume {:print "$at(10,50265,50430)"} true;
    assert {:msg "assert_failed(10,50265,50430): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t12, $1_Diem_CancelBurnEvent($t2, $t11, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t10)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t11, $t1), $t12, Not(select Diem::CurrencyInfo.is_synthetic($t10)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:375:5+826
    assume {:print "$at(10,18297,19123)"} true;
    assert {:msg "assert_failed(10,18297,19123): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t12, $1_Diem_CancelBurnEvent($t2, $t11, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t10)); $EventStore__is_subset(actual, expected)));

    // return $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:375:5+826
    $ret0 := $t26;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:374:5+1
    assume {:print "$at(10,18291,18292)"} true;
L3:

    // assert Or(Or(Or(Or(Not(exists[@359]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Lt(select Diem::CurrencyInfo.preburn_value($t7), $t2)), Not(Diem::spec_is_currency[@360]<#0>())), Not(exists[@361]<Diem::PreburnQueue<#0>>($t1))), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t8)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t8, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:375:5+826
    assume {:print "$at(10,18297,19123)"} true;
    assert {:msg "assert_failed(10,18297,19123): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#359, $1_Signer_spec_address_of($t0)) || ($preburn_value#$1_Diem_CurrencyInfo'#0'($t7) < $t2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360)) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#361, $t1)) || (var $range_0 := $Range(0, LenVec($t8)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t8, i)))), $t2))))));

    // assert Or(Or(Or(Or(And(Not(exists[@359]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t14)), And(Lt(select Diem::CurrencyInfo.preburn_value($t7), $t2), Eq(8, $t14))), And(Not(Diem::spec_is_currency[@360]<#0>()), Eq(5, $t14))), And(Not(exists[@361]<Diem::PreburnQueue<#0>>($t1)), Eq(5, $t14))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t8)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t8, i)))), $t2), Eq(1, $t14))) at /home/ying/diem/language/diem-framework/modules/Diem.move:375:5+826
    assert {:msg "assert_failed(10,18297,19123): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#359, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t14)) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($t7) < $t2) && $IsEqual'u8'(8, $t14))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360) && $IsEqual'u8'(5, $t14))) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#361, $t1) && $IsEqual'u8'(5, $t14))) || ((var $range_0 := $Range(0, LenVec($t8)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t8, i)))), $t2))))) && $IsEqual'u8'(1, $t14)));

    // abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:375:5+826
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun Diem::cancel_burn_with_capability<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:979:5+1176
procedure {:inline 1} $1_Diem_cancel_burn_with_capability'#0'(_$t0: int, _$t1: $1_Diem_BurnCapability'#0', _$t2: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t5: bool;
    var $t6: int;
    var $t7: $1_Diem_Diem'#0';
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t15: $1_Diem_PreburnWithMetadata'#0';
    var $t16: bool;
    var $t17: int;
    var $t18: $1_Diem_Preburn'#0';
    var $t19: Vec (int);
    var $t20: $1_Diem_Diem'#0';
    var $t21: Vec (int);
    var $t22: bool;
    var $t23: int;
    var $t24: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t32: bool;
    var $t33: bool;
    var $t34: $Mutation ($1_Event_EventHandle'$1_Diem_CancelBurnEvent');
    var $t35: $1_Diem_CancelBurnEvent;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_PreburnQueue'#0'_$memory#288: $Memory $1_Diem_PreburnQueue'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t31));
    assume IsEmptyVec(p#$Mutation($t34));

    // bytecode translation starts here
    // assume Identical($t8, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:9+57
    assume {:print "$at(10,49345,49402)"} true;
    assume ($t8 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume Identical($t10, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1030:9+57
    assume {:print "$at(10,49761,49818)"} true;
    assume ($t10 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1037:9+42
    assume {:print "$at(10,50108,50150)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1038:9+51
    assume {:print "$at(10,50159,50210)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.cancel_burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+37
    assume {:print "$at(10,50219,50256)"} true;
    assume ($t13 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:5+1
    assume {:print "$at(10,47584,47585)"} true;
    assume {:print "$track_local(18,10,0):", $t0} $t0 == $t0;

    // trace_local[_capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:5+1
    assume {:print "$track_local(18,10,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:5+1
    assume {:print "$track_local(18,10,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    // >> opaque call: $t8 := Diem::remove_preburn_from_queue<#0>($t0, $t2)
    assume {:print "$at(10,47932,47992)"} true;

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // $t15 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume {:print "$at(10,47932,47992)"} true;

    // assume Identical($t16, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume ($t16 == (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t14, i)))), $t2)))))));

    // if ($t16) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
L9:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t17)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) && $IsEqual'u8'(5, $t17)) || ((var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t14, i)))), $t2))))) && $IsEqual'u8'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume {:print "$at(10,47932,47992)"} true;
    assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
L8:

    // @288 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    $1_Diem_PreburnQueue'#0'_$memory#288 := $1_Diem_PreburnQueue'#0'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t0);
    }

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t15);

    // assume Implies(exists[@288]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#288, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t15))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t15))), $t2);

    // $t15 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60

    // ($t18, $t19) := unpack Diem::PreburnWithMetadata<#0>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:13+64
    $t18 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t15);
    $t19 := $metadata#$1_Diem_PreburnWithMetadata'#0'($t15);

    // destroy($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:74+1

    // $t20 := unpack Diem::Preburn<#0>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:43+19
    $t20 := $to_burn#$1_Diem_Preburn'#0'($t18);

    // trace_local[to_burn]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:53+7
    assume {:print "$track_local(18,10,7):", $t20} $t20 == $t20;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    // >> opaque call: $t12 := Diem::currency_code<#0>()
    assume {:print "$at(10,48056,48081)"} true;

    // $t21 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25

    // assume Identical($t22, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    assume ($t22 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t22) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    if ($t22) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
L11:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    assume {:print "$at(10,48056,48081)"} true;
    assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
L10:

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    assume $IsValid'vec'u8''($t21);

    // assume Eq<vector<u8>>($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    assume $IsEqual'vec'u8''($t21, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t21 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25

    // trace_local[currency_code]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:989:13+13
    assume {:print "$track_local(18,10,3):", $t21} $t21 == $t21;

    // $t23 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:990:62+13
    assume {:print "$at(10,48144,48157)"} true;
    $t23 := 173345816;
    assume $IsValid'address'($t23);

    // $t24 := borrow_global<Diem::CurrencyInfo<#0>>($t23) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:990:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t24 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(10,48102,48119)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[info]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:990:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t24);
    assume {:print "$track_local(18,10,4):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t25 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:16+18
    assume {:print "$at(10,48175,48193)"} true;
    $t25 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t26 := >=($t25, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:35+2
    call $t26 := $Ge($t25, $t2);

    // $t27 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:69+8
    $t27 := 2;
    assume $IsValid'u64'($t27);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:991:46+32
    // >> opaque call: $t18 := Errors::limit_exceeded($t17)

    // $t28 := opaque begin: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:46+32

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:46+32
    assume $IsValid'u64'($t28);

    // assume Eq<u64>($t28, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:46+32
    assume $IsEqual'u64'($t28, 8);

    // $t28 := opaque end: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:46+32

    // trace_local[tmp#$6]($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    assume {:print "$track_local(18,10,6):", $t28} $t28 == $t28;

    // trace_local[tmp#$5]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    assume {:print "$track_local(18,10,5):", $t26} $t26 == $t26;

    // if ($t26) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    if ($t26) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
L1:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70

    // trace_abort($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    assume {:print "$at(10,48168,48238)"} true;
    assume {:print "$track_abort(18,10):", $t28} $t28 == $t28;

    // $t17 := move($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    $t17 := $t28;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:992:30+4
    assume {:print "$at(10,48269,48273)"} true;
L0:

    // $t29 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:992:30+18
    $t29 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t30 := -($t29, $t2) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:992:49+1
    call $t30 := $Sub($t29, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,48288,48289)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t31 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:992:9+18
    $t31 := $ChildMutation($t24, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24)));

    // write_ref($t31, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:992:9+48
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t24).preburn_value]($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:992:9+48
    $t24 := $UpdateMutation($t24, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t24), $Dereference($t31)));

    // $t32 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:995:14+17
    assume {:print "$at(10,48462,48479)"} true;
    $t32 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t33 := !($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:995:13+1
    call $t33 := $Not($t32);

    // if ($t33) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279
    if ($t33) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:22+4
    assume {:print "$at(10,48535,48539)"} true;
L2:

    // $t34 := borrow_field<Diem::CurrencyInfo<#0>>.cancel_burn_events($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:17+28
    $t34 := $ChildMutation($t24, 11, $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t24)));

    // $t35 := pack Diem::CancelBurnEvent($t2, $t21, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:998:17+135
    assume {:print "$at(10,48576,48711)"} true;
    $t35 := $1_Diem_CancelBurnEvent($t2, $t21, $t0);

    // Event::emit_event<Diem::CancelBurnEvent>($t34, $t35) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:996:13+230
    assume {:print "$at(10,48495,48725)"} true;
    call $t34 := $1_Event_emit_event'$1_Diem_CancelBurnEvent'($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(10,48495,48725)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:996:13+230

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:996:13+230
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:14+1
    assume {:print "$at(10,48725,48726)"} true;
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279
    assume {:print "$at(10,48457,48736)"} true;
L4:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+7
    assume {:print "$at(10,48747,48754)"} true;
L5:

    // trace_return[0]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+7
    assume {:print "$track_return(18,10,0):", $t20} $t20 == $t20;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1007:5+1
    assume {:print "$at(10,48759,48760)"} true;
L6:

    // return $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1007:5+1
    $ret0 := $t20;
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1007:5+1
L7:

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1007:5+1
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun Diem::cancel_burn_with_capability [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:979:5+1176
procedure {:timeLimit 40} $1_Diem_cancel_burn_with_capability$verify(_$t0: int, _$t1: $1_Diem_BurnCapability'#0', _$t2: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t5: bool;
    var $t6: int;
    var $t7: $1_Diem_Diem'#0';
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t15: $1_Diem_PreburnWithMetadata'#0';
    var $t16: bool;
    var $t17: int;
    var $t18: $1_Diem_Preburn'#0';
    var $t19: Vec (int);
    var $t20: $1_Diem_Diem'#0';
    var $t21: Vec (int);
    var $t22: bool;
    var $t23: int;
    var $t24: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t32: bool;
    var $t33: bool;
    var $t34: $Mutation ($1_Event_EventHandle'$1_Diem_CancelBurnEvent');
    var $t35: $1_Diem_CancelBurnEvent;
    var $t36: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_CurrencyInfo'#0'_$memory#277: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#278: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_MintCapability'#0'_$memory#279: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#280: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_Preburn'#0'_$memory#281: $Memory $1_Diem_Preburn'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#282: $Memory $1_Diem_PreburnQueue'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t31));
    assume IsEmptyVec(p#$Mutation($t34));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1016:17+6
    assume {:print "$at(10,49204,49210)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1016:17+6
    assume $IsValid'$1_Diem_BurnCapability'#0''($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1016:17+6
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1016:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1016:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t8, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:9+57
    assume {:print "$at(10,49345,49402)"} true;
    assume ($t8 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume Identical($t10, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1030:9+57
    assume {:print "$at(10,49761,49818)"} true;
    assume ($t10 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1037:9+42
    assume {:print "$at(10,50108,50150)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1038:9+51
    assume {:print "$at(10,50159,50210)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.cancel_burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+37
    assume {:print "$at(10,50219,50256)"} true;
    assume ($t13 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // assume CanModify<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+57
    assume {:print "$at(10,48808,48865)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t0];

    // assume CanModify<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:9+55
    assume {:print "$at(10,48874,48929)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[173345816];

    // @280 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:9+55
    $1_Diem_BurnCapability'#0'_$memory#280 := $1_Diem_BurnCapability'#0'_$memory;

    // @277 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:9+55
    $1_Diem_CurrencyInfo'#0'_$memory#277 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @279 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:9+55
    $1_Diem_MintCapability'#0'_$memory#279 := $1_Diem_MintCapability'#0'_$memory;

    // @281 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:9+55
    $1_Diem_Preburn'#0'_$memory#281 := $1_Diem_Preburn'#0'_$memory;

    // @278 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:9+55
    $1_Diem_PreburnQueue'#0'_$memory#278 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:5+1
    assume {:print "$at(10,47584,47585)"} true;
    assume {:print "$track_local(18,10,0):", $t0} $t0 == $t0;

    // trace_local[_capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:5+1
    assume {:print "$track_local(18,10,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:5+1
    assume {:print "$track_local(18,10,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    // >> opaque call: $t8 := Diem::remove_preburn_from_queue<#0>($t0, $t2)
    assume {:print "$at(10,47932,47992)"} true;

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assert CanModify<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume {:print "$at(10,47932,47992)"} true;
    assert {:msg "assert_failed(10,47932,47992): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t0];

    // $t15 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60

    // assume Identical($t16, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume ($t16 == (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t14, i)))), $t2)))))));

    // if ($t16) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
L9:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t17)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) && $IsEqual'u8'(5, $t17)) || ((var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t14, i)))), $t2))))) && $IsEqual'u8'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume {:print "$at(10,47932,47992)"} true;
    assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
L8:

    // @282 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    $1_Diem_PreburnQueue'#0'_$memory#282 := $1_Diem_PreburnQueue'#0'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t0);
    }

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t15);

    // assume Implies(exists[@282]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#282, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t15))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t15))), $t2);

    // $t15 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:80+60

    // ($t18, $t19) := unpack Diem::PreburnWithMetadata<#0>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:13+64
    $t18 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t15);
    $t19 := $metadata#$1_Diem_PreburnWithMetadata'#0'($t15);

    // destroy($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:74+1

    // $t20 := unpack Diem::Preburn<#0>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:43+19
    $t20 := $to_burn#$1_Diem_Preburn'#0'($t18);

    // trace_local[to_burn]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:986:53+7
    assume {:print "$track_local(18,10,7):", $t20} $t20 == $t20;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    // >> opaque call: $t12 := Diem::currency_code<#0>()
    assume {:print "$at(10,48056,48081)"} true;

    // $t21 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25

    // assume Identical($t22, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    assume ($t22 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t22) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    if ($t22) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
L11:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    assume {:print "$at(10,48056,48081)"} true;
    assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
L10:

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    assume $IsValid'vec'u8''($t21);

    // assume Eq<vector<u8>>($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25
    assume $IsEqual'vec'u8''($t21, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t21 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:989:29+25

    // trace_local[currency_code]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:989:13+13
    assume {:print "$track_local(18,10,3):", $t21} $t21 == $t21;

    // $t23 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:990:62+13
    assume {:print "$at(10,48144,48157)"} true;
    $t23 := 173345816;
    assume $IsValid'address'($t23);

    // assert CanModify<Diem::CurrencyInfo<#0>>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:990:20+17
    assert {:msg "assert_failed(10,48102,48119): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[$t23];

    // $t24 := borrow_global<Diem::CurrencyInfo<#0>>($t23) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:990:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t24 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(10,48102,48119)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[info]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:990:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t24);
    assume {:print "$track_local(18,10,4):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t25 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:16+18
    assume {:print "$at(10,48175,48193)"} true;
    $t25 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t26 := >=($t25, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:35+2
    call $t26 := $Ge($t25, $t2);

    // $t27 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:69+8
    $t27 := 2;
    assume $IsValid'u64'($t27);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:991:46+32
    // >> opaque call: $t18 := Errors::limit_exceeded($t17)

    // $t28 := opaque begin: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:46+32

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:46+32
    assume $IsValid'u64'($t28);

    // assume Eq<u64>($t28, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:46+32
    assume $IsEqual'u64'($t28, 8);

    // $t28 := opaque end: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:46+32

    // trace_local[tmp#$6]($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    assume {:print "$track_local(18,10,6):", $t28} $t28 == $t28;

    // trace_local[tmp#$5]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    assume {:print "$track_local(18,10,5):", $t26} $t26 == $t26;

    // if ($t26) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    if ($t26) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
L1:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t24)), Le(select Diem::CurrencyInfo.scaling_factor($t24), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t24))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t24)) <= 10000000000));

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    assume {:print "$at(10,48168,48238)"} true;

    // trace_abort($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    assume {:print "$at(10,48168,48238)"} true;
    assume {:print "$track_abort(18,10):", $t28} $t28 == $t28;

    // $t17 := move($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    $t17 := $t28;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:9+70
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:992:30+4
    assume {:print "$at(10,48269,48273)"} true;
L0:

    // $t29 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:992:30+18
    $t29 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t30 := -($t29, $t2) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:992:49+1
    call $t30 := $Sub($t29, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,48288,48289)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t31 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:992:9+18
    $t31 := $ChildMutation($t24, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24)));

    // write_ref($t31, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:992:9+48
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t24).preburn_value]($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:992:9+48
    $t24 := $UpdateMutation($t24, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t24), $Dereference($t31)));

    // $t32 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:995:14+17
    assume {:print "$at(10,48462,48479)"} true;
    $t32 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t33 := !($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:995:13+1
    call $t33 := $Not($t32);

    // if ($t33) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279
    if ($t33) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:22+4
    assume {:print "$at(10,48535,48539)"} true;
L2:

    // $t34 := borrow_field<Diem::CurrencyInfo<#0>>.cancel_burn_events($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:17+28
    $t34 := $ChildMutation($t24, 11, $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t24)));

    // $t35 := pack Diem::CancelBurnEvent($t2, $t21, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:998:17+135
    assume {:print "$at(10,48576,48711)"} true;
    $t35 := $1_Diem_CancelBurnEvent($t2, $t21, $t0);

    // Event::emit_event<Diem::CancelBurnEvent>($t34, $t35) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:996:13+230
    assume {:print "$at(10,48495,48725)"} true;
    call $t34 := $1_Event_emit_event'$1_Diem_CancelBurnEvent'($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(10,48495,48725)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t24)), Le(select Diem::CurrencyInfo.scaling_factor($t24), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t24))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t24)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:996:13+230
    assume {:print "$at(10,48495,48725)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:14+1
    assume {:print "$at(10,48725,48726)"} true;
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279
    assume {:print "$at(10,48457,48736)"} true;
L4:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t24)), Le(select Diem::CurrencyInfo.scaling_factor($t24), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t24))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t24)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279
    assume {:print "$at(10,48457,48736)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:995:9+279

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+7
    assume {:print "$at(10,48747,48754)"} true;
L5:

    // trace_return[0]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+7
    assume {:print "$track_return(18,10,0):", $t20} $t20 == $t20;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1007:5+1
    assume {:print "$at(10,48759,48760)"} true;
L6:

    // assume Identical($t36, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1031:9+67
    assume {:print "$at(10,49827,49894)"} true;
    assume ($t36 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t8), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1024:9+66
    assume {:print "$at(10,49515,49581)"} true;
    assert {:msg "assert_failed(10,49515,49581): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t8) < $t2);

    // assert Not(Not(Diem::spec_is_currency[@277]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277);

    // assert Not(Not(exists[@278]<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:846:9+86
    assume {:print "$at(10,40803,40889)"} true;
    assert {:msg "assert_failed(10,40803,40889): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#278, $t0);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t9)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t9, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+121
    assume {:print "$at(10,40898,41019)"} true;
    assert {:msg "assert_failed(10,40898,41019): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t9)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t9, i)))), $t2)))));

    // assert Eq<Diem::CurrencyInfo<#0>>($t36, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t10, Sub(select Diem::CurrencyInfo.preburn_value($t10), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1032:9+84
    assume {:print "$at(10,49903,49987)"} true;
    assert {:msg "assert_failed(10,49903,49987): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t36, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t10, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t10) - $t2)));

    // assert Implies(exists[@278]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:854:9+113
    assume {:print "$at(10,41291,41404)"} true;
    assert {:msg "assert_failed(10,41291,41404): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#278, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assert exists<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1014:9+54
    assume {:print "$at(10,49093,49147)"} true;
    assert {:msg "assert_failed(10,49093,49147): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816);

    // assert Eq<u64>(select Diem::Diem.value($t20), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1015:9+31
    assume {:print "$at(10,49156,49187)"} true;
    assert {:msg "assert_failed(10,49156,49187): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t20), $t2);

    // assert Gt(select Diem::Diem.value($t20), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1016:9+25
    assume {:print "$at(10,49196,49221)"} true;
    assert {:msg "assert_failed(10,49196,49221): post-condition does not hold"}
      ($value#$1_Diem_Diem'#0'($t20) > 0);

    // assert Implies(Diem::spec_is_currency[@277]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@277]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#277))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@279]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#279, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@279]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#279, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@277]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@277]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#277))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@280]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#280, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@280]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#280, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@277]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@277]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#277))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@278]<Diem::PreburnQueue<#0>>(addr), exists[@281]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#278, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#281, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@278]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#278, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@277]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@277]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#277))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t12, $t0), $t13, Not(select Diem::CurrencyInfo.is_synthetic($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1040:9+165
    assume {:print "$at(10,50265,50430)"} true;
    assert {:msg "assert_failed(10,50265,50430): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t13, $1_Diem_CancelBurnEvent($t2, $t12, $t0), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t11)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t12, $t0), $t13, Not(select Diem::CurrencyInfo.is_synthetic($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1008:5+462
    assume {:print "$at(10,48765,49227)"} true;
    assert {:msg "assert_failed(10,48765,49227): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t13, $1_Diem_CancelBurnEvent($t2, $t12, $t0), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t11)); $EventStore__is_subset(actual, expected)));

    // return $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1008:5+462
    $ret0 := $t20;
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1007:5+1
    assume {:print "$at(10,48759,48760)"} true;
L7:

    // assert Or(Or(Or(Lt(select Diem::CurrencyInfo.preburn_value($t8), $t2), Not(Diem::spec_is_currency[@277]<#0>())), Not(exists[@278]<Diem::PreburnQueue<#0>>($t0))), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t9)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t9, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1008:5+462
    assume {:print "$at(10,48765,49227)"} true;
    assert {:msg "assert_failed(10,48765,49227): abort not covered by any of the `aborts_if` clauses"}
      (((($preburn_value#$1_Diem_CurrencyInfo'#0'($t8) < $t2) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277)) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#278, $t0)) || (var $range_0 := $Range(0, LenVec($t9)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t9, i)))), $t2))))));

    // assert Or(Or(Or(And(Lt(select Diem::CurrencyInfo.preburn_value($t8), $t2), Eq(8, $t17)), And(Not(Diem::spec_is_currency[@277]<#0>()), Eq(5, $t17))), And(Not(exists[@278]<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t17))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t9)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t9, i)))), $t2), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1008:5+462
    assert {:msg "assert_failed(10,48765,49227): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((($preburn_value#$1_Diem_CurrencyInfo'#0'($t8) < $t2) && $IsEqual'u8'(8, $t17)) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277) && $IsEqual'u8'(5, $t17))) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#278, $t0) && $IsEqual'u8'(5, $t17))) || ((var $range_0 := $Range(0, LenVec($t9)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t9, i)))), $t2))))) && $IsEqual'u8'(1, $t17)));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1008:5+462
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun Diem::create_preburn<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+255
procedure {:inline 1} $1_Diem_create_preburn'$1_XUS_XUS'(_$t0: int) returns ($ret0: $1_Diem_Preburn'$1_XUS_XUS')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: $1_Diem_Diem'$1_XUS_XUS';
    var $t7: $1_Diem_Preburn'$1_XUS_XUS';
    var $t0: int;
    var $temp_0'$1_Diem_Preburn'$1_XUS_XUS'': $1_Diem_Preburn'$1_XUS_XUS';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+1
    assume {:print "$at(10,26051,26052)"} true;
    assume {:print "$track_local(18,11,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,26158,26203)"} true;

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    assume {:print "$at(10,26158,26203)"} true;

    // assume Identical($t3, Or(Or(Not(exists<Roles::RoleId>($t2)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    assume ($t3 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t2) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t2)), Eq(5, $t4)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t2) && $IsEqual'u8'(5, $t4)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    assume {:print "$at(10,26158,26203)"} true;
    assume {:print "$track_abort(18,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,26213,26243)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30

    // assume Identical($t5, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    assume ($t5 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    assume {:print "$at(10,26213,26243)"} true;
    assume {:print "$track_abort(18,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30

    // $t6 := Diem::zero<#0>() on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:38+16
    assume {:print "$at(10,26282,26298)"} true;
    call $t6 := $1_Diem_zero'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(10,26282,26298)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(18,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t7 := pack Diem::Preburn<#0>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+47
    $t7 := $1_Diem_Preburn'$1_XUS_XUS'($t6);

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+47
    assume {:print "$track_return(18,11,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:5+1
    assume {:print "$at(10,26305,26306)"} true;
L1:

    // return $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:5+1
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::create_preburn<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+255
procedure {:inline 1} $1_Diem_create_preburn'$1_XDX_XDX'(_$t0: int) returns ($ret0: $1_Diem_Preburn'$1_XDX_XDX')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: $1_Diem_Diem'$1_XDX_XDX';
    var $t7: $1_Diem_Preburn'$1_XDX_XDX';
    var $t0: int;
    var $temp_0'$1_Diem_Preburn'$1_XDX_XDX'': $1_Diem_Preburn'$1_XDX_XDX';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+1
    assume {:print "$at(10,26051,26052)"} true;
    assume {:print "$track_local(18,11,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,26158,26203)"} true;

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    assume {:print "$at(10,26158,26203)"} true;

    // assume Identical($t3, Or(Or(Not(exists<Roles::RoleId>($t2)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    assume ($t3 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t2) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t2)), Eq(5, $t4)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t2) && $IsEqual'u8'(5, $t4)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    assume {:print "$at(10,26158,26203)"} true;
    assume {:print "$track_abort(18,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,26213,26243)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30

    // assume Identical($t5, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    assume ($t5 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    assume {:print "$at(10,26213,26243)"} true;
    assume {:print "$track_abort(18,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30

    // $t6 := Diem::zero<#0>() on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:38+16
    assume {:print "$at(10,26282,26298)"} true;
    call $t6 := $1_Diem_zero'$1_XDX_XDX'();
    if ($abort_flag) {
        assume {:print "$at(10,26282,26298)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(18,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t7 := pack Diem::Preburn<#0>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+47
    $t7 := $1_Diem_Preburn'$1_XDX_XDX'($t6);

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+47
    assume {:print "$track_return(18,11,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:5+1
    assume {:print "$at(10,26305,26306)"} true;
L1:

    // return $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:5+1
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::create_preburn [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+255
procedure {:timeLimit 40} $1_Diem_create_preburn$verify(_$t0: int) returns ($ret0: $1_Diem_Preburn'#0')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: $1_Diem_Diem'#0';
    var $t7: $1_Diem_Preburn'#0';
    var $t0: int;
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $1_Roles_RoleId_$memory#321: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#322: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#323: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#324: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#325: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#326: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume {:print "$at(10,26051,26306)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+255
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+255
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+255
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // @321 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+1
    assume {:print "$at(10,26051,26052)"} true;
    $1_Roles_RoleId_$memory#321 := $1_Roles_RoleId_$memory;

    // @324 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+1
    $1_Diem_BurnCapability'#0'_$memory#324 := $1_Diem_BurnCapability'#0'_$memory;

    // @322 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#322 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @323 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+1
    $1_Diem_MintCapability'#0'_$memory#323 := $1_Diem_MintCapability'#0'_$memory;

    // @326 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+1
    $1_Diem_Preburn'#0'_$memory#326 := $1_Diem_Preburn'#0'_$memory;

    // @325 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+1
    $1_Diem_PreburnQueue'#0'_$memory#325 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:548:5+1
    assume {:print "$track_local(18,11,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,26158,26203)"} true;

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    assume {:print "$at(10,26158,26203)"} true;

    // assume Identical($t3, Or(Or(Not(exists<Roles::RoleId>($t2)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    assume ($t3 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t2) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t2)), Eq(5, $t4)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t2) && $IsEqual'u8'(5, $t4)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    assume {:print "$at(10,26158,26203)"} true;
    assume {:print "$track_abort(18,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:551:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,26213,26243)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30

    // assume Identical($t5, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    assume ($t5 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    assume {:print "$at(10,26213,26243)"} true;
    assume {:print "$track_abort(18,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:552:9+30

    // $t6 := Diem::zero<#0>() on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:38+16
    assume {:print "$at(10,26282,26298)"} true;
    call $t6 := $1_Diem_zero'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,26282,26298)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(18,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t7 := pack Diem::Preburn<#0>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+47
    $t7 := $1_Diem_Preburn'#0'($t6);

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+47
    assume {:print "$track_return(18,11,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:5+1
    assume {:print "$at(10,26305,26306)"} true;
L1:

    // assert Not(Not(exists[@321]<Roles::RoleId>($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:534:9+59
    assume {:print "$at(26,23933,23992)"} true;
    assert {:msg "assert_failed(26,23933,23992): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#321, $t1);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@321]<Roles::RoleId>($t1)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+97
    assume {:print "$at(26,24001,24098)"} true;
    assert {:msg "assert_failed(26,24001,24098): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#321, $t1)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:59:9+108
    assume {:print "$at(8,2239,2347)"} true;
    assert {:msg "assert_failed(8,2239,2347): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(Not(Diem::spec_is_currency[@322]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322);

    // assert Implies(Diem::spec_is_currency[@322]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@322]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#322))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@323]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#323, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@323]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#323, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@322]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@322]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#322))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@324]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#324, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@324]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#324, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@322]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@322]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#322))));

    // assert Implies(Diem::spec_is_currency[@322]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@322]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#322))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@325]<Diem::PreburnQueue<#0>>(addr), exists[@326]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#325, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#326, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@325]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#325, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@322]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@322]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#322))));

    // return $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:5+1
    assume {:print "$at(10,26305,26306)"} true;
L2:

    // assert Or(Or(Or(Not(exists[@321]<Roles::RoleId>($t1)), Neq<u64>(select Roles::RoleId.role_id(global[@321]<Roles::RoleId>($t1)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), Not(Diem::spec_is_currency[@322]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:5+76
    assume {:print "$at(10,26311,26387)"} true;
    assert {:msg "assert_failed(10,26311,26387): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_Roles_RoleId_$memory#321, $t1) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#321, $t1)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322));

    // assert Or(Or(Or(And(Not(exists[@321]<Roles::RoleId>($t1)), Eq(5, $t4)), And(Neq<u64>(select Roles::RoleId.role_id(global[@321]<Roles::RoleId>($t1)), 1), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t4))), And(Not(Diem::spec_is_currency[@322]<#0>()), Eq(5, $t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:5+76
    assert {:msg "assert_failed(10,26311,26387): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_Roles_RoleId_$memory#321, $t1) && $IsEqual'u8'(5, $t4)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#321, $t1)), 1) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t4))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322) && $IsEqual'u8'(5, $t4)));

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:5+76
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::deposit [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1185:5+248
procedure {:timeLimit 40} $1_Diem_deposit$verify(_$t0: $Mutation ($1_Diem_Diem'#0'), _$t1: $1_Diem_Diem'#0') returns ($ret0: $Mutation ($1_Diem_Diem'#0'))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $1_Diem_Diem'#0';
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $Mutation (int);
    var $t0: $Mutation ($1_Diem_Diem'#0');
    var $t1: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#140: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#141: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#142: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#143: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#144: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t16));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1185:5+248
    assume {:print "$at(10,56670,56918)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1185:5+248
    assume $IsValid'$1_Diem_Diem'#0''($t1);

    // @142 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1185:5+1
    $1_Diem_BurnCapability'#0'_$memory#142 := $1_Diem_BurnCapability'#0'_$memory;

    // @140 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1185:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#140 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @141 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1185:5+1
    $1_Diem_MintCapability'#0'_$memory#141 := $1_Diem_MintCapability'#0'_$memory;

    // @144 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1185:5+1
    $1_Diem_Preburn'#0'_$memory#144 := $1_Diem_Preburn'#0'_$memory;

    // @143 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1185:5+1
    $1_Diem_PreburnQueue'#0'_$memory#143 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t5 := read_ref($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1185:5+1
    $t5 := $Dereference($t0);

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1185:5+1
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t0);
    assume {:print "$track_local(18,13,0):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // trace_local[check]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1185:5+1
    assume {:print "$track_local(18,13,1):", $t1} $t1 == $t1;

    // $t6 := unpack Diem::Diem<#0>($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1186:13+14
    assume {:print "$at(10,56770,56784)"} true;
    $t6 := $value#$1_Diem_Diem'#0'($t1);

    // trace_local[value]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1186:20+5
    assume {:print "$track_local(18,13,4):", $t6} $t6 == $t6;

    // $t7 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:16+7
    assume {:print "$at(10,56809,56816)"} true;
    $t7 := 18446744073709551615;
    assume $IsValid'u64'($t7);

    // $t8 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:26+10
    $t8 := $value#$1_Diem_Diem'#0'($Dereference($t0));

    // $t9 := -($t7, $t8) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:24+1
    call $t9 := $Sub($t7, $t8);
    if ($abort_flag) {
        assume {:print "$at(10,56817,56818)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(18,13):", $t10} $t10 == $t10;
        goto L3;
    }

    // $t11 := >=($t9, $t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:37+2
    call $t11 := $Ge($t9, $t6);

    // $t12 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:70+5
    $t12 := 7;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:47+29
    // >> opaque call: $t11 := Errors::limit_exceeded($t10)

    // $t13 := opaque begin: Errors::limit_exceeded($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:47+29

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:47+29
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:47+29
    assume $IsEqual'u64'($t13, 8);

    // $t13 := opaque end: Errors::limit_exceeded($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:47+29

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:9+68
    assume {:print "$track_local(18,13,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:9+68
    assume {:print "$track_local(18,13,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:9+68
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:9+68
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:9+68

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:9+68
    assume {:print "$at(10,56802,56870)"} true;
    assume {:print "$track_abort(18,13):", $t13} $t13 == $t13;

    // $t10 := move($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:9+68
    $t10 := $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:9+68
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1188:22+4
    assume {:print "$at(10,56893,56897)"} true;
L0:

    // $t14 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1188:22+10
    $t14 := $value#$1_Diem_Diem'#0'($Dereference($t0));

    // $t15 := +($t14, $t6) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1188:33+1
    call $t15 := $AddU64($t14, $t6);
    if ($abort_flag) {
        assume {:print "$at(10,56904,56905)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(18,13):", $t10} $t10 == $t10;
        goto L3;
    }

    // $t16 := borrow_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1188:9+10
    $t16 := $ChildMutation($t0, 0, $value#$1_Diem_Diem'#0'($Dereference($t0)));

    // write_ref($t16, $t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:1188:9+31
    $t16 := $UpdateMutation($t16, $t15);

    // write_back[Reference($t0).value]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1188:9+31
    $t0 := $UpdateMutation($t0, $Update'$1_Diem_Diem'#0''_value($Dereference($t0), $Dereference($t16)));

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1188:40+1
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t0);
    assume {:print "$track_local(18,13,0):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:5+1
    assume {:print "$at(10,56917,56918)"} true;
L2:

    // assert Not(Gt(Add(select Diem::Diem.value($t5), select Diem::Diem.value($t1)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1198:9+73
    assume {:print "$at(10,57184,57257)"} true;
    assert {:msg "assert_failed(10,57184,57257): function does not abort under this condition"}
      !(($value#$1_Diem_Diem'#0'($t5) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615);

    // assert Eq<u64>(select Diem::Diem.value($t0), Add(select Diem::Diem.value($t5), select Diem::Diem.value($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1193:9+52
    assume {:print "$at(10,57012,57064)"} true;
    assert {:msg "assert_failed(10,57012,57064): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t0)), ($value#$1_Diem_Diem'#0'($t5) + $value#$1_Diem_Diem'#0'($t1)));

    // assert Implies(Diem::spec_is_currency[@140]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@140]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#140) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#140))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@141]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#141, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@141]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#141, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@140]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@140]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#140) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#140))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@142]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#142, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@142]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#142, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@140]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@140]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#140) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#140))));

    // assert Implies(Diem::spec_is_currency[@140]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@140]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#140) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#140))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@143]<Diem::PreburnQueue<#0>>(addr), exists[@144]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#143, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#144, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@143]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#143, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@140]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@140]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#140) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#140))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t0;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:5+1
    assume {:print "$at(10,56917,56918)"} true;
L3:

    // assert Gt(Add(select Diem::Diem.value($t5), select Diem::Diem.value($t1)), 18446744073709551615) at /home/ying/diem/language/diem-framework/modules/Diem.move:1190:5+147
    assume {:print "$at(10,56923,57070)"} true;
    assert {:msg "assert_failed(10,56923,57070): abort not covered by any of the `aborts_if` clauses"}
      (($value#$1_Diem_Diem'#0'($t5) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615);

    // assert And(Gt(Add(select Diem::Diem.value($t5), select Diem::Diem.value($t1)), 18446744073709551615), Eq(8, $t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1190:5+147
    assert {:msg "assert_failed(10,56923,57070): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((($value#$1_Diem_Diem'#0'($t5) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615) && $IsEqual'u8'(8, $t10));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1190:5+147
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun Diem::destroy_zero [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1204:5+188
procedure {:timeLimit 40} $1_Diem_destroy_zero$verify(_$t0: $1_Diem_Diem'#0') returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t0: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#135: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#136: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#137: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#138: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#139: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1204:5+188
    assume {:print "$at(10,57510,57698)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // @137 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1204:5+1
    $1_Diem_BurnCapability'#0'_$memory#137 := $1_Diem_BurnCapability'#0'_$memory;

    // @135 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1204:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#135 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @136 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1204:5+1
    $1_Diem_MintCapability'#0'_$memory#136 := $1_Diem_MintCapability'#0'_$memory;

    // @139 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1204:5+1
    $1_Diem_Preburn'#0'_$memory#139 := $1_Diem_Preburn'#0'_$memory;

    // @138 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1204:5+1
    $1_Diem_PreburnQueue'#0'_$memory#138 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1204:5+1
    assume {:print "$track_local(18,14,0):", $t0} $t0 == $t0;

    // $t4 := unpack Diem::Diem<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1205:13+14
    assume {:print "$at(10,57587,57601)"} true;
    $t4 := $value#$1_Diem_Diem'#0'($t0);

    // trace_local[value]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1205:20+5
    assume {:print "$track_local(18,14,3):", $t4} $t4 == $t4;

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:25+1
    assume {:print "$at(10,57634,57635)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := ==($t4, $t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:22+2
    $t6 := $IsEqual'u64'($t4, $t5);

    // $t7 := 8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:53+28
    $t7 := 8;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:28+54
    // >> opaque call: $t8 := Errors::invalid_argument($t7)

    // $t8 := opaque begin: Errors::invalid_argument($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:28+54

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:28+54
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:28+54
    assume $IsEqual'u64'($t8, 7);

    // $t8 := opaque end: Errors::invalid_argument($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:28+54

    // trace_local[tmp#$2]($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:9+74
    assume {:print "$track_local(18,14,2):", $t8} $t8 == $t8;

    // trace_local[tmp#$1]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:9+74
    assume {:print "$track_local(18,14,1):", $t6} $t6 == $t6;

    // if ($t6) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:9+74
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:9+74
L1:

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:9+74
    assume {:print "$at(10,57618,57692)"} true;
    assume {:print "$track_abort(18,14):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:9+74
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:9+74
L0:

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1207:5+1
    assume {:print "$at(10,57697,57698)"} true;
L2:

    // assert Not(Gt(select Diem::Diem.value($t0), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1210:9+55
    assume {:print "$at(10,57754,57809)"} true;
    assert {:msg "assert_failed(10,57754,57809): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($t0) > 0);

    // assert Implies(Diem::spec_is_currency[@135]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@135]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#135) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#135))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@136]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#136, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@136]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#136, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@135]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@135]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#135) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#135))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@137]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#137, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@137]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#137, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@135]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@135]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#135) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#135))));

    // assert Implies(Diem::spec_is_currency[@135]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@135]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#135) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#135))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@138]<Diem::PreburnQueue<#0>>(addr), exists[@139]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#138, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#139, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@138]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#138, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@135]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@135]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#135) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#135))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1207:5+1
    assume {:print "$at(10,57697,57698)"} true;
L3:

    // assert Gt(select Diem::Diem.value($t0), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:5+112
    assume {:print "$at(10,57703,57815)"} true;
    assert {:msg "assert_failed(10,57703,57815): abort not covered by any of the `aborts_if` clauses"}
      ($value#$1_Diem_Diem'#0'($t0) > 0);

    // assert And(Gt(select Diem::Diem.value($t0), 0), Eq(7, $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:5+112
    assert {:msg "assert_failed(10,57703,57815): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (($value#$1_Diem_Diem'#0'($t0) > 0) && $IsEqual'u8'(7, $t8));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:5+112
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun Diem::fractional_part [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1422:5+201
procedure {:timeLimit 40} $1_Diem_fractional_part$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: int;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#218: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#219: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#220: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#221: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#222: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1422:5+201
    assume {:print "$at(10,66962,67163)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @220 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1422:5+1
    $1_Diem_BurnCapability'#0'_$memory#220 := $1_Diem_BurnCapability'#0'_$memory;

    // @218 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1422:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#218 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @219 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1422:5+1
    $1_Diem_MintCapability'#0'_$memory#219 := $1_Diem_MintCapability'#0'_$memory;

    // @222 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1422:5+1
    $1_Diem_Preburn'#0'_$memory#222 := $1_Diem_Preburn'#0'_$memory;

    // @221 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1422:5+1
    $1_Diem_PreburnQueue'#0'_$memory#221 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,67049,67079)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:9+30
    assume {:print "$at(10,67049,67079)"} true;
    assume {:print "$track_abort(18,15):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:9+30

    // $t2 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1425:47+13
    assume {:print "$at(10,67127,67140)"} true;
    $t2 := 173345816;
    assume $IsValid'address'($t2);

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1425:9+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,67089,67102)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(18,15):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.fractional_part($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1425:9+68
    $t4 := $fractional_part#$1_Diem_CurrencyInfo'#0'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1425:9+68
    assume {:print "$track_return(18,15,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:5+1
    assume {:print "$at(10,67162,67163)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@218]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@218]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#218) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#218))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@219]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#219, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@219]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#219, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@218]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@218]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#218) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#218))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@220]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#220, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@220]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#220, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@218]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@218]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#218) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#218))));

    // assert Implies(Diem::spec_is_currency[@218]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@218]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#218) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#218))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@221]<Diem::PreburnQueue<#0>>(addr), exists[@222]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#221, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#222, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@221]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#221, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@218]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@218]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#218) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#218))));

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:5+1
    assume {:print "$at(10,67162,67163)"} true;
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::is_SCS_currency<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+191
procedure {:inline 1} $1_Diem_is_SCS_currency'#0'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: bool;
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: $1_Diem_CurrencyInfo'#0';
    var $t5: bool;
    var $t6: bool;
    var $t7: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t1 := Diem::is_currency<#0>() on_abort goto L5 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+23
    assume {:print "$at(10,65895,65918)"} true;
    call $t1 := $1_Diem_is_currency'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,65895,65918)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(18,17):", $t2} $t2 == $t2;
        goto L5;
    }

    // if ($t1) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:48+13
    assume {:print "$at(10,65969,65982)"} true;
L0:

    // $t3 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:48+13
    $t3 := 173345816;
    assume $IsValid'address'($t3);

    // $t4 := get_global<Diem::CurrencyInfo<#0>>($t3) on_abort goto L5 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:10+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t3);
    }
    if ($abort_flag) {
        assume {:print "$at(10,65931,65944)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(18,17):", $t2} $t2 == $t2;
        goto L5;
    }

    // $t5 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:10+65
    $t5 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($t4);

    // $t6 := !($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:9+1
    call $t6 := $Not($t5);

    // $t0 := $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    assume {:print "$at(10,65895,65996)"} true;
    $t0 := $t6;

    // trace_local[tmp#$0]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    assume {:print "$track_local(18,17,0):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
L2:

    // $t7 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    $t7 := false;
    assume $IsValid'bool'($t7);

    // $t0 := $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    $t0 := $t7;

    // trace_local[tmp#$0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    assume {:print "$track_local(18,17,0):", $t7} $t7 == $t7;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
L3:

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    assume {:print "$track_return(18,17,0):", $t0} $t0 == $t0;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:5+1
    assume {:print "$at(10,66001,66002)"} true;
L4:

    // return $t0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:5+1
    $ret0 := $t0;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:5+1
L5:

    // abort($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun Diem::is_SCS_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+191
procedure {:timeLimit 40} $1_Diem_is_SCS_currency$verify() returns ($ret0: bool)
{
    // declare local variables
    var $t0: bool;
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: $1_Diem_CurrencyInfo'#0';
    var $t5: bool;
    var $t6: bool;
    var $t7: bool;
    var $temp_0'bool': bool;
    var $1_Diem_CurrencyInfo'#0'_$memory#120: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#121: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#122: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#123: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#124: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+191
    assume {:print "$at(10,65811,66002)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @122 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+1
    $1_Diem_BurnCapability'#0'_$memory#122 := $1_Diem_BurnCapability'#0'_$memory;

    // @120 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#120 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @121 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+1
    $1_Diem_MintCapability'#0'_$memory#121 := $1_Diem_MintCapability'#0'_$memory;

    // @124 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+1
    $1_Diem_Preburn'#0'_$memory#124 := $1_Diem_Preburn'#0'_$memory;

    // @123 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+1
    $1_Diem_PreburnQueue'#0'_$memory#123 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t1 := Diem::is_currency<#0>() on_abort goto L5 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+23
    assume {:print "$at(10,65895,65918)"} true;
    call $t1 := $1_Diem_is_currency'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,65895,65918)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(18,17):", $t2} $t2 == $t2;
        goto L5;
    }

    // if ($t1) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:48+13
    assume {:print "$at(10,65969,65982)"} true;
L0:

    // $t3 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:48+13
    $t3 := 173345816;
    assume $IsValid'address'($t3);

    // $t4 := get_global<Diem::CurrencyInfo<#0>>($t3) on_abort goto L5 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:10+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t3);
    }
    if ($abort_flag) {
        assume {:print "$at(10,65931,65944)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(18,17):", $t2} $t2 == $t2;
        goto L5;
    }

    // $t5 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:10+65
    $t5 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($t4);

    // $t6 := !($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:9+1
    call $t6 := $Not($t5);

    // $t0 := $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    assume {:print "$at(10,65895,65996)"} true;
    $t0 := $t6;

    // trace_local[tmp#$0]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    assume {:print "$track_local(18,17,0):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
L2:

    // $t7 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    $t7 := false;
    assume $IsValid'bool'($t7);

    // $t0 := $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    $t0 := $t7;

    // trace_local[tmp#$0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    assume {:print "$track_local(18,17,0):", $t7} $t7 == $t7;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
L3:

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1395:9+101
    assume {:print "$track_return(18,17,0):", $t0} $t0 == $t0;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:5+1
    assume {:print "$at(10,66001,66002)"} true;
L4:

    // assert Implies(Diem::spec_is_currency[@120]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@120]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#120) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#120))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@121]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#121, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@121]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#121, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@120]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@120]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#120) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#120))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@122]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#122, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@122]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#122, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@120]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@120]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#120) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#120))));

    // assert Implies(Diem::spec_is_currency[@120]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@120]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#120) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#120))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@123]<Diem::PreburnQueue<#0>>(addr), exists[@124]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#123, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#124, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@123]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#123, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@120]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@120]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#120) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#120))));

    // return $t0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t0;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:5+1
    assume {:print "$at(10,66001,66002)"} true;
L5:

    // abort($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun Diem::is_currency<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1390:5+109
procedure {:inline 1} $1_Diem_is_currency'#0'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1391:40+13
    assume {:print "$at(10,65785,65798)"} true;
    $t0 := 173345816;
    assume $IsValid'address'($t0);

    // $t1 := exists<Diem::CurrencyInfo<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1391:9+6
    $t1 := $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1391:9+45
    assume {:print "$track_return(18,18,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+1
    assume {:print "$at(10,65804,65805)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+1
    $ret0 := $t1;
    return;

}

// fun Diem::is_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1390:5+109
procedure {:timeLimit 40} $1_Diem_is_currency$verify() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;
    var $1_Diem_CurrencyInfo'#0'_$memory#100: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#101: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#102: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#103: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#104: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1390:5+109
    assume {:print "$at(10,65696,65805)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @102 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1390:5+1
    $1_Diem_BurnCapability'#0'_$memory#102 := $1_Diem_BurnCapability'#0'_$memory;

    // @100 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1390:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#100 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @101 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1390:5+1
    $1_Diem_MintCapability'#0'_$memory#101 := $1_Diem_MintCapability'#0'_$memory;

    // @104 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1390:5+1
    $1_Diem_Preburn'#0'_$memory#104 := $1_Diem_Preburn'#0'_$memory;

    // @103 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1390:5+1
    $1_Diem_PreburnQueue'#0'_$memory#103 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t0 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1391:40+13
    assume {:print "$at(10,65785,65798)"} true;
    $t0 := 173345816;
    assume $IsValid'address'($t0);

    // $t1 := exists<Diem::CurrencyInfo<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1391:9+6
    $t1 := $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1391:9+45
    assume {:print "$track_return(18,18,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+1
    assume {:print "$at(10,65804,65805)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@100]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@100]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#100) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#100))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@101]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#101, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@101]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#101, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@100]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@100]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#100) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#100))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@102]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#102, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@102]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#102, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@100]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@100]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#100) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#100))));

    // assert Implies(Diem::spec_is_currency[@100]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@100]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#100) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#100))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@103]<Diem::PreburnQueue<#0>>(addr), exists[@104]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#103, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#104, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@103]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#103, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@100]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@100]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#100) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#100))));

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t1;
    return;

}

// fun Diem::is_synthetic_currency<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1402:5+242
procedure {:inline 1} $1_Diem_is_synthetic_currency'#0'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: $1_Diem_CurrencyInfo'#0';
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t2 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:20+13
    assume {:print "$at(10,66244,66257)"} true;
    $t2 := 173345816;
    assume $IsValid'address'($t2);

    // trace_local[addr]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:13+4
    assume {:print "$track_local(18,19,0):", $t2} $t2 == $t2;

    // $t3 := exists<Diem::CurrencyInfo<#0>>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+6
    assume {:print "$at(10,66267,66273)"} true;
    $t3 := $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2);

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1406:51+4
    assume {:print "$at(10,66357,66361)"} true;
L0:

    // $t4 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L5 with $t5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1406:13+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,66319,66332)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(18,19):", $t5} $t5 == $t5;
        goto L5;
    }

    // $t6 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1406:13+56
    $t6 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($t4);

    // $t1 := $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    assume {:print "$at(10,66267,66375)"} true;
    $t1 := $t6;

    // trace_local[tmp#$1]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    assume {:print "$track_local(18,19,1):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
L2:

    // $t7 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    $t7 := false;
    assume $IsValid'bool'($t7);

    // $t1 := $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    $t1 := $t7;

    // trace_local[tmp#$1]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    assume {:print "$track_local(18,19,1):", $t7} $t7 == $t7;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
L3:

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    assume {:print "$track_return(18,19,0):", $t1} $t1 == $t1;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:5+1
    assume {:print "$at(10,66380,66381)"} true;
L4:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:5+1
    $ret0 := $t1;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:5+1
L5:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun Diem::is_synthetic_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1402:5+242
procedure {:timeLimit 40} $1_Diem_is_synthetic_currency$verify() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: $1_Diem_CurrencyInfo'#0';
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_Diem_CurrencyInfo'#0'_$memory#90: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#91: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#92: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#93: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#94: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1402:5+242
    assume {:print "$at(10,66139,66381)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @92 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1402:5+1
    $1_Diem_BurnCapability'#0'_$memory#92 := $1_Diem_BurnCapability'#0'_$memory;

    // @90 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1402:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#90 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @91 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1402:5+1
    $1_Diem_MintCapability'#0'_$memory#91 := $1_Diem_MintCapability'#0'_$memory;

    // @94 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1402:5+1
    $1_Diem_Preburn'#0'_$memory#94 := $1_Diem_Preburn'#0'_$memory;

    // @93 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1402:5+1
    $1_Diem_PreburnQueue'#0'_$memory#93 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t2 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:20+13
    assume {:print "$at(10,66244,66257)"} true;
    $t2 := 173345816;
    assume $IsValid'address'($t2);

    // trace_local[addr]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:13+4
    assume {:print "$track_local(18,19,0):", $t2} $t2 == $t2;

    // $t3 := exists<Diem::CurrencyInfo<#0>>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+6
    assume {:print "$at(10,66267,66273)"} true;
    $t3 := $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2);

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1406:51+4
    assume {:print "$at(10,66357,66361)"} true;
L0:

    // $t4 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L5 with $t5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1406:13+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,66319,66332)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(18,19):", $t5} $t5 == $t5;
        goto L5;
    }

    // $t6 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1406:13+56
    $t6 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($t4);

    // $t1 := $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    assume {:print "$at(10,66267,66375)"} true;
    $t1 := $t6;

    // trace_local[tmp#$1]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    assume {:print "$track_local(18,19,1):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
L2:

    // $t7 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    $t7 := false;
    assume $IsValid'bool'($t7);

    // $t1 := $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    $t1 := $t7;

    // trace_local[tmp#$1]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    assume {:print "$track_local(18,19,1):", $t7} $t7 == $t7;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
L3:

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1405:9+108
    assume {:print "$track_return(18,19,0):", $t1} $t1 == $t1;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:5+1
    assume {:print "$at(10,66380,66381)"} true;
L4:

    // assert Implies(Diem::spec_is_currency[@90]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@90]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#90) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#90))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@91]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#91, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@91]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#91, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@90]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@90]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#90) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#90))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@92]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#92, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@92]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#92, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@90]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@90]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#90) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#90))));

    // assert Implies(Diem::spec_is_currency[@90]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@90]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#90) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#90))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@93]<Diem::PreburnQueue<#0>>(addr), exists[@94]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#93, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#94, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@93]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#93, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@90]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@90]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#90) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#90))));

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t1;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:5+1
    assume {:print "$at(10,66380,66381)"} true;
L5:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun Diem::join [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1171:5+153
procedure {:timeLimit 40} $1_Diem_join$verify(_$t0: $1_Diem_Diem'#0', _$t1: $1_Diem_Diem'#0') returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t2: $1_Diem_Diem'#0';
    var $t3: $Mutation ($1_Diem_Diem'#0');
    var $t4: $1_Diem_Diem'#0';
    var $t5: bool;
    var $t6: int;
    var $t7: $1_Diem_Diem'#0';
    var $t0: $1_Diem_Diem'#0';
    var $t1: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#213: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#214: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#215: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#216: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#217: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t3));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1178:17+6
    assume {:print "$at(10,56439,56445)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1178:17+6
    assume $IsValid'$1_Diem_Diem'#0''($t1);

    // @215 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1171:5+1
    assume {:print "$at(10,56145,56146)"} true;
    $1_Diem_BurnCapability'#0'_$memory#215 := $1_Diem_BurnCapability'#0'_$memory;

    // @213 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1171:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#213 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @214 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1171:5+1
    $1_Diem_MintCapability'#0'_$memory#214 := $1_Diem_MintCapability'#0'_$memory;

    // @217 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1171:5+1
    $1_Diem_Preburn'#0'_$memory#217 := $1_Diem_Preburn'#0'_$memory;

    // @216 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1171:5+1
    $1_Diem_PreburnQueue'#0'_$memory#216 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t2 := copy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1171:5+1
    $t2 := $t0;

    // trace_local[coin1]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1171:5+1
    assume {:print "$track_local(18,20,0):", $t0} $t0 == $t0;

    // trace_local[coin2]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1171:5+1
    assume {:print "$track_local(18,20,1):", $t1} $t1 == $t1;

    // $t3 := borrow_local($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:17+10
    assume {:print "$at(10,56259,56269)"} true;
    $t3 := $Mutation($Local(0), EmptyVec(), $t0);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
    // >> opaque call: Diem::deposit<#0>($t2, $t1)

    // opaque begin: Diem::deposit<#0>($t3, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26

    // $t4 := read_ref($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
    $t4 := $Dereference($t3);

    // assume Identical($t5, Gt(Add(select Diem::Diem.value($t3), select Diem::Diem.value($t1)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
    assume ($t5 == (($value#$1_Diem_Diem'#0'($Dereference($t3)) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
L4:

    // assume And(Gt(Add(select Diem::Diem.value($t3), select Diem::Diem.value($t1)), 18446744073709551615), Eq(8, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
    assume ((($value#$1_Diem_Diem'#0'($Dereference($t3)) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615) && $IsEqual'u8'(8, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
    assume {:print "$at(10,56251,56277)"} true;
    assume {:print "$track_abort(18,20):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
L3:

    // havoc[mut]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t3 := $UpdateMutation($t3, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t3));

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t3));

    // assume Eq<u64>(select Diem::Diem.value($t3), Add(select Diem::Diem.value($t4), select Diem::Diem.value($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t3)), ($value#$1_Diem_Diem'#0'($t4) + $value#$1_Diem_Diem'#0'($t1)));

    // opaque end: Diem::deposit<#0>($t3, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26

    // write_back[LocalRoot($t0)@]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1172:9+26
    $t0 := $Dereference($t3);

    // $t7 := move($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1173:9+5
    assume {:print "$at(10,56287,56292)"} true;
    $t7 := $t0;

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1173:9+5
    assume {:print "$track_return(18,20,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:5+1
    assume {:print "$at(10,56297,56298)"} true;
L1:

    // assert Not(Gt(Add(select Diem::Diem.value($t2), select Diem::Diem.value($t1)), MaxU64())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1177:9+76
    assume {:print "$at(10,56346,56422)"} true;
    assert {:msg "assert_failed(10,56346,56422): function does not abort under this condition"}
      !(($value#$1_Diem_Diem'#0'($t2) + $value#$1_Diem_Diem'#0'($t1)) > $MAX_U64);

    // assert Eq<u64>(select Diem::Diem.value($t7), Add(select Diem::Diem.value($t2), select Diem::Diem.value($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1178:9+50
    assume {:print "$at(10,56431,56481)"} true;
    assert {:msg "assert_failed(10,56431,56481): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t7), ($value#$1_Diem_Diem'#0'($t2) + $value#$1_Diem_Diem'#0'($t1)));

    // assert Implies(Diem::spec_is_currency[@213]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@213]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#213) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#213))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@214]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#214, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@214]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#214, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@213]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@213]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#213) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#213))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@215]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#215, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@215]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#215, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@213]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@213]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#213) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#213))));

    // assert Implies(Diem::spec_is_currency[@213]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@213]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#213) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#213))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@216]<Diem::PreburnQueue<#0>>(addr), exists[@217]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#216, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#217, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@216]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#216, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@213]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@213]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#213) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#213))));

    // return $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:5+1
    assume {:print "$at(10,56297,56298)"} true;
L2:

    // assert Gt(Add(select Diem::Diem.value($t2), select Diem::Diem.value($t1)), MaxU64()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1175:5+184
    assume {:print "$at(10,56303,56487)"} true;
    assert {:msg "assert_failed(10,56303,56487): abort not covered by any of the `aborts_if` clauses"}
      (($value#$1_Diem_Diem'#0'($t2) + $value#$1_Diem_Diem'#0'($t1)) > $MAX_U64);

    // assert And(Gt(Add(select Diem::Diem.value($t2), select Diem::Diem.value($t1)), MaxU64()), Eq(8, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1175:5+184
    assert {:msg "assert_failed(10,56303,56487): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((($value#$1_Diem_Diem'#0'($t2) + $value#$1_Diem_Diem'#0'($t1)) > $MAX_U64) && $IsEqual'u8'(8, $t6));

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1175:5+184
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Diem::market_cap [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1349:5+193
procedure {:timeLimit 40} $1_Diem_market_cap$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: int;
    var $temp_0'u128': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#208: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#209: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#210: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#211: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#212: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1349:5+193
    assume {:print "$at(10,63912,64105)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @210 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1349:5+1
    $1_Diem_BurnCapability'#0'_$memory#210 := $1_Diem_BurnCapability'#0'_$memory;

    // @208 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1349:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#208 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @209 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1349:5+1
    $1_Diem_MintCapability'#0'_$memory#209 := $1_Diem_MintCapability'#0'_$memory;

    // @212 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1349:5+1
    $1_Diem_Preburn'#0'_$memory#212 := $1_Diem_Preburn'#0'_$memory;

    // @211 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1349:5+1
    $1_Diem_PreburnQueue'#0'_$memory#211 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,63995,64025)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:9+30
    assume {:print "$at(10,63995,64025)"} true;
    assume {:print "$track_abort(18,21):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:9+30

    // $t2 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1352:47+13
    assume {:print "$at(10,64073,64086)"} true;
    $t2 := 173345816;
    assume $IsValid'address'($t2);

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1352:9+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,64035,64048)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(18,21):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.total_value($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1352:9+64
    $t4 := $total_value#$1_Diem_CurrencyInfo'#0'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1352:9+64
    assume {:print "$track_return(18,21,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:5+1
    assume {:print "$at(10,64104,64105)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@208]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@208]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#208) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#208))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@209]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#209, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@209]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#209, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@208]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@208]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#208) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#208))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@210]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#210, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@210]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#210, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@208]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@208]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#208) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#208))));

    // assert Implies(Diem::spec_is_currency[@208]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@208]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#208) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#208))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@211]<Diem::PreburnQueue<#0>>(addr), exists[@212]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#211, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#212, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@211]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#211, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@208]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@208]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#208) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#208))));

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:5+1
    assume {:print "$at(10,64104,64105)"} true;
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::mint [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:294:5+396
procedure {:timeLimit 40} $1_Diem_mint$verify(_$t0: int, _$t1: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_Diem_CurrencyInfo'#0';
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Diem_MintCapability'#0';
    var $t12: $1_Diem_CurrencyInfo'#0';
    var $t13: $1_Diem_CurrencyInfo'#0';
    var $t14: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t15: $1_Diem_MintEvent;
    var $t16: $1_Diem_Diem'#0';
    var $t17: bool;
    var $t18: $1_Diem_CurrencyInfo'#0';
    var $t19: $1_Diem_MintEvent;
    var $t20: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t21: bool;
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_MintCapability'#0'_$memory#354: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#355: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_BurnCapability'#0'_$memory#356: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#357: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#358: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:310:17+21
    assume {:print "$at(10,15487,15508)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:310:17+21
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:310:17+21
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:310:17+21
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume Identical($t5, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:450:9+66
    assume {:print "$at(10,21568,21634)"} true;
    assume ($t5 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume CanModify<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:304:9+55
    assume {:print "$at(10,15100,15155)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[173345816];

    // @356 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:304:9+55
    $1_Diem_BurnCapability'#0'_$memory#356 := $1_Diem_BurnCapability'#0'_$memory;

    // @355 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:304:9+55
    $1_Diem_CurrencyInfo'#0'_$memory#355 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @354 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:304:9+55
    $1_Diem_MintCapability'#0'_$memory#354 := $1_Diem_MintCapability'#0'_$memory;

    // @358 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:304:9+55
    $1_Diem_Preburn'#0'_$memory#358 := $1_Diem_Preburn'#0'_$memory;

    // @357 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:304:9+55
    $1_Diem_PreburnQueue'#0'_$memory#357 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:294:5+1
    assume {:print "$at(10,14679,14680)"} true;
    assume {:print "$track_local(18,22,0):", $t0} $t0 == $t0;

    // trace_local[value]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:294:5+1
    assume {:print "$track_local(18,22,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:296:20+27
    // >> opaque call: $t5 := Signer::address_of($t0)
    assume {:print "$at(10,14821,14848)"} true;

    // $t6 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:296:20+27

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:296:20+27
    assume $IsValid'address'($t6);

    // assume Eq<address>($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:296:20+27
    assume $IsEqual'address'($t6, $1_Signer_spec_address_of($t0));

    // $t6 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:296:20+27

    // trace_local[addr]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:296:13+4
    assume {:print "$track_local(18,22,2):", $t6} $t6 == $t6;

    // $t7 := exists<Diem::MintCapability<#0>>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:297:16+6
    assume {:print "$at(10,14865,14871)"} true;
    $t7 := $ResourceExists($1_Diem_MintCapability'#0'_$memory, $t6);

    // $t8 := 9 at /home/ying/diem/language/diem-framework/modules/Diem.move:297:84+16
    $t8 := 9;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:297:56+45
    // >> opaque call: $t8 := Errors::requires_capability($t7)

    // $t9 := opaque begin: Errors::requires_capability($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:297:56+45

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:297:56+45
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:297:56+45
    assume $IsEqual'u64'($t9, 4);

    // $t9 := opaque end: Errors::requires_capability($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:297:56+45

    // trace_local[tmp#$4]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:297:9+93
    assume {:print "$track_local(18,22,4):", $t9} $t9 == $t9;

    // trace_local[tmp#$3]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:297:9+93
    assume {:print "$track_local(18,22,3):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:297:9+93
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:297:9+93
L1:

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:297:9+93
    assume {:print "$at(10,14858,14951)"} true;
    assume {:print "$track_abort(18,22):", $t9} $t9 == $t9;

    // $t10 := move($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:297:9+93
    $t10 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:297:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:299:13+5
    assume {:print "$at(10,14995,15000)"} true;
L0:

    // $t11 := get_global<Diem::MintCapability<#0>>($t6) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/Diem.move:300:13+13
    assume {:print "$at(10,15014,15027)"} true;
    if (!$ResourceExists($1_Diem_MintCapability'#0'_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $t6);
    }
    if ($abort_flag) {
        assume {:print "$at(10,15014,15027)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(18,22):", $t10} $t10 == $t10;
        goto L3;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
    // >> opaque call: $t10 := Diem::mint_with_capability<#0>($t1, $t9)
    assume {:print "$at(10,14961,15069)"} true;

    // assume Identical($t12, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:450:9+66
    assume {:print "$at(10,21568,21634)"} true;
    assume ($t12 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t13, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:458:9+66
    assume {:print "$at(10,22009,22075)"} true;
    assume ($t13 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t14, select Diem::CurrencyInfo.mint_events($t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:459:9+39
    assume {:print "$at(10,22084,22123)"} true;
    assume ($t14 == $mint_events#$1_Diem_CurrencyInfo'#0'($t13));

    // assume Identical($t15, pack Diem::MintEvent($t1, select Diem::CurrencyInfo.currency_code($t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:460:9+114
    assume {:print "$at(10,22132,22246)"} true;
    assume ($t15 == $1_Diem_MintEvent($t1, $currency_code#$1_Diem_CurrencyInfo'#0'($t13)));

    // assert CanModify<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
    assume {:print "$at(10,14961,15069)"} true;
    assert {:msg "assert_failed(10,14961,15069): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[173345816];

    // $t16 := opaque begin: Diem::mint_with_capability<#0>($t1, $t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108

    // assume Identical($t17, Or(Or(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<#0>())), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), $t1), MaxU128())), Not(Diem::spec_is_currency<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
    assume ($t17 == ((!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || (($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $t1) > $MAX_U128)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // if ($t17) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
    if ($t17) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
L5:

    // assume Or(Or(And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<#0>())), Eq(1, $t10)), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), $t1), MaxU128()), Eq(8, $t10))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t10))) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
    assume (((!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'u8'(1, $t10)) || ((($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $t1) > $MAX_U128) && $IsEqual'u8'(8, $t10))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
    assume {:print "$at(10,14961,15069)"} true;
    assume {:print "$track_abort(18,22):", $t10} $t10 == $t10;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
L4:

    // modifies global<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_CurrencyInfo'#0'';
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, 173345816, $temp_0'$1_Diem_CurrencyInfo'#0'');
    } else {
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceRemove($1_Diem_CurrencyInfo'#0'_$memory, 173345816);
    }

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
    assume $IsValid'$1_Diem_Diem'#0''($t16);

    // assume Identical($t18, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:451:9+76
    assume {:print "$at(10,21643,21719)"} true;
    assume ($t18 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume exists<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:451:9+76
    assume $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816);

    // assume exists<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:451:9+76
    assume $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816);

    // assume Eq<Diem::CurrencyInfo<#0>>($t18, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t12, Add(select Diem::CurrencyInfo.total_value($t12), $t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:451:9+76
    assume $IsEqual'$1_Diem_CurrencyInfo'#0''($t18, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t12, ($total_value#$1_Diem_CurrencyInfo'#0'($t12) + $t1)));

    // assume Eq<u64>(select Diem::Diem.value($t16), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:451:9+76
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t16), $t1);

    // assume Identical($t19, $t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:451:9+76
    assume ($t19 == $t15);

    // assume Identical($t20, $t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:451:9+76
    assume ($t20 == $t14);

    // assume Identical($t21, Not(select Diem::CurrencyInfo.is_synthetic($t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:451:9+76
    assume ($t21 == !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t13));

    // emit_event($t19, $t20, $t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
    assume {:print "$at(10,14961,15069)"} true;
    $es := $CondExtendEventStore'$1_Diem_MintEvent'($es, $t20, $t19, $t21);

    // $t16 := opaque end: Diem::mint_with_capability<#0>($t1, $t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:451:9+76
    assume {:print "$at(10,21643,21719)"} true;

    // trace_return[0]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:9+108
    assume {:print "$at(10,14961,15069)"} true;
    assume {:print "$track_return(18,22,0):", $t16} $t16 == $t16;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:302:5+1
    assume {:print "$at(10,15074,15075)"} true;
L2:

    // assume Identical($t22, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:451:9+76
    assume {:print "$at(10,21643,21719)"} true;
    assume ($t22 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assert Not(Not(exists[@354]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:307:9+111
    assume {:print "$at(10,15318,15429)"} true;
    assert {:msg "assert_failed(10,15318,15429): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_MintCapability'#0'_$memory#354, $1_Signer_spec_address_of($t0));

    // assert Not(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@355]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:444:9+78
    assume {:print "$at(10,21272,21350)"} true;
    assert {:msg "assert_failed(10,21272,21350): function does not abort under this condition"}
      !!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355));

    // assert Not(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@355]<#0>()), $t1), MaxU128())) at /home/ying/diem/language/diem-framework/modules/Diem.move:445:9+102
    assume {:print "$at(10,21359,21461)"} true;
    assert {:msg "assert_failed(10,21359,21461): function does not abort under this condition"}
      !(($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355)) + $t1) > $MAX_U128);

    // assert Not(Not(Diem::spec_is_currency[@355]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355);

    // assert exists<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:305:9+54
    assume {:print "$at(10,15164,15218)"} true;
    assert {:msg "assert_failed(10,15164,15218): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816);

    // assert exists<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:452:9+54
    assume {:print "$at(10,21728,21782)"} true;
    assert {:msg "assert_failed(10,21728,21782): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816);

    // assert Eq<Diem::CurrencyInfo<#0>>($t22, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t5, Add(select Diem::CurrencyInfo.total_value($t5), $t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+106
    assume {:print "$at(10,21791,21897)"} true;
    assert {:msg "assert_failed(10,21791,21897): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t22, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t5, ($total_value#$1_Diem_CurrencyInfo'#0'($t5) + $t1)));

    // assert Eq<u64>(select Diem::Diem.value($t16), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:454:9+30
    assume {:print "$at(10,21906,21936)"} true;
    assert {:msg "assert_failed(10,21906,21936): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t16), $t1);

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@354]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#354, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@354]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#354, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@355]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@355]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@356]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#356, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@356]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#356, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@355]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@355]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355))));

    // assert Implies(Diem::spec_is_currency[@355]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@355]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@357]<Diem::PreburnQueue<#0>>(addr), exists[@358]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#357, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#358, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@357]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#357, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@355]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@355]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355))));

    // return $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t16;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:302:5+1
    assume {:print "$at(10,15074,15075)"} true;
L3:

    // assert Or(Or(Or(Not(exists[@354]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0))), Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@355]<#0>()))), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@355]<#0>()), $t1), MaxU128())), Not(Diem::spec_is_currency[@355]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:303:5+435
    assume {:print "$at(10,15080,15515)"} true;
    assert {:msg "assert_failed(10,15080,15515): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#354, $1_Signer_spec_address_of($t0)) || !$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355))) || (($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355)) + $t1) > $MAX_U128)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355));

    // assert Or(Or(Or(And(Not(exists[@354]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t10)), And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@355]<#0>())), Eq(1, $t10))), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@355]<#0>()), $t1), MaxU128()), Eq(8, $t10))), And(Not(Diem::spec_is_currency[@355]<#0>()), Eq(5, $t10))) at /home/ying/diem/language/diem-framework/modules/Diem.move:303:5+435
    assert {:msg "assert_failed(10,15080,15515): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#354, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t10)) || (!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355)) && $IsEqual'u8'(1, $t10))) || ((($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355)) + $t1) > $MAX_U128) && $IsEqual'u8'(8, $t10))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355) && $IsEqual'u8'(5, $t10)));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:303:5+435
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun Diem::mint_with_capability [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:408:5+1063
procedure {:timeLimit 40} $1_Diem_mint_with_capability$verify(_$t0: int, _$t1: $1_Diem_MintCapability'#0') returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: $1_Diem_CurrencyInfo'#0';
    var $t10: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t11: $1_Diem_MintEvent;
    var $t12: bool;
    var $t13: int;
    var $t14: Vec (int);
    var $t15: bool;
    var $t16: int;
    var $t17: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t32: bool;
    var $t33: bool;
    var $t34: $Mutation ($1_Event_EventHandle'$1_Diem_MintEvent');
    var $t35: $1_Diem_MintEvent;
    var $t36: $1_Diem_Diem'#0';
    var $t37: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: $1_Diem_MintCapability'#0';
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_MintCapability'#0'': $1_Diem_MintCapability'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_CurrencyInfo'#0'_$memory#289: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#290: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#291: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#292: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#293: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t31));
    assume IsEmptyVec(p#$Mutation($t34));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:438:17+21
    assume {:print "$at(10,21091,21112)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:438:17+21
    assume $IsValid'$1_Diem_MintCapability'#0''($t1);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:438:17+21
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t8, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:450:9+66
    assume {:print "$at(10,21568,21634)"} true;
    assume ($t8 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t9, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:458:9+66
    assume {:print "$at(10,22009,22075)"} true;
    assume ($t9 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t10, select Diem::CurrencyInfo.mint_events($t9)) at /home/ying/diem/language/diem-framework/modules/Diem.move:459:9+39
    assume {:print "$at(10,22084,22123)"} true;
    assume ($t10 == $mint_events#$1_Diem_CurrencyInfo'#0'($t9));

    // assume Identical($t11, pack Diem::MintEvent($t0, select Diem::CurrencyInfo.currency_code($t9))) at /home/ying/diem/language/diem-framework/modules/Diem.move:460:9+114
    assume {:print "$at(10,22132,22246)"} true;
    assume ($t11 == $1_Diem_MintEvent($t0, $currency_code#$1_Diem_CurrencyInfo'#0'($t9)));

    // assume CanModify<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:435:9+55
    assume {:print "$at(10,20916,20971)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[173345816];

    // @291 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:435:9+55
    $1_Diem_BurnCapability'#0'_$memory#291 := $1_Diem_BurnCapability'#0'_$memory;

    // @289 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:435:9+55
    $1_Diem_CurrencyInfo'#0'_$memory#289 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @290 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:435:9+55
    $1_Diem_MintCapability'#0'_$memory#290 := $1_Diem_MintCapability'#0'_$memory;

    // @293 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:435:9+55
    $1_Diem_Preburn'#0'_$memory#293 := $1_Diem_Preburn'#0'_$memory;

    // @292 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:435:9+55
    $1_Diem_PreburnQueue'#0'_$memory#292 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[value]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:408:5+1
    assume {:print "$at(10,19789,19790)"} true;
    assume {:print "$track_local(18,23,0):", $t0} $t0 == $t0;

    // trace_local[_capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:408:5+1
    assume {:print "$track_local(18,23,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:412:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,19960,19990)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:412:9+30

    // assume Identical($t12, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:412:9+30
    assume ($t12 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t12) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:412:9+30
    if ($t12) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:412:9+30
L11:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:412:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:412:9+30
    assume {:print "$at(10,19960,19990)"} true;
    assume {:print "$track_abort(18,23):", $t13} $t13 == $t13;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:412:9+30
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:412:9+30
L10:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:412:9+30

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:413:29+25
    // >> opaque call: $t8 := Diem::currency_code<#0>()
    assume {:print "$at(10,20020,20045)"} true;

    // $t14 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:413:29+25

    // assume Identical($t15, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:413:29+25
    assume ($t15 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t15) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:413:29+25
    if ($t15) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:413:29+25
L13:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:413:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:413:29+25
    assume {:print "$at(10,20020,20045)"} true;
    assume {:print "$track_abort(18,23):", $t13} $t13 == $t13;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:413:29+25
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:413:29+25
L12:

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:413:29+25
    assume $IsValid'vec'u8''($t14);

    // assume Eq<vector<u8>>($t14, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:413:29+25
    assume $IsEqual'vec'u8''($t14, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t14 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:413:29+25

    // trace_local[currency_code]($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:413:13+13
    assume {:print "$track_local(18,23,2):", $t14} $t14 == $t14;

    // $t16 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:415:62+13
    assume {:print "$at(10,20165,20178)"} true;
    $t16 := 173345816;
    assume $IsValid'address'($t16);

    // assert CanModify<Diem::CurrencyInfo<#0>>($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:415:20+17
    assert {:msg "assert_failed(10,20123,20140): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[$t16];

    // $t17 := borrow_global<Diem::CurrencyInfo<#0>>($t16) on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:415:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t16)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t16), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t16));
    }
    if ($abort_flag) {
        assume {:print "$at(10,20123,20140)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(18,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // trace_local[info]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:415:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t17);
    assume {:print "$track_local(18,23,3):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t18 := get_field<Diem::CurrencyInfo<#0>>.can_mint($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:416:16+13
    assume {:print "$at(10,20196,20209)"} true;
    $t18 := $can_mint#$1_Diem_CurrencyInfo'#0'($Dereference($t17));

    // $t19 := 5 at /home/ying/diem/language/diem-framework/modules/Diem.move:416:53+20
    $t19 := 5;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:416:31+43
    // >> opaque call: $t13 := Errors::invalid_state($t12)

    // $t20 := opaque begin: Errors::invalid_state($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:416:31+43

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:416:31+43
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:416:31+43
    assume $IsEqual'u64'($t20, 1);

    // $t20 := opaque end: Errors::invalid_state($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:416:31+43

    // trace_local[tmp#$5]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:416:9+66
    assume {:print "$track_local(18,23,5):", $t20} $t20 == $t20;

    // trace_local[tmp#$4]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:416:9+66
    assume {:print "$track_local(18,23,4):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:416:9+66
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:416:9+66
L1:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t17)), Le(select Diem::CurrencyInfo.scaling_factor($t17), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17)) <= 10000000000));

    // destroy($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:416:9+66
    assume {:print "$at(10,20189,20255)"} true;

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:416:9+66
    assume {:print "$at(10,20189,20255)"} true;
    assume {:print "$track_abort(18,23):", $t20} $t20 == $t20;

    // $t13 := move($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:416:9+66
    $t13 := $t20;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:416:9+66
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:417:16+8
    assume {:print "$at(10,20272,20280)"} true;
L0:

    // $t21 := 340282366920938463463374607431768211455 at /home/ying/diem/language/diem-framework/modules/Diem.move:417:16+8
    $t21 := 340282366920938463463374607431768211455;
    assume $IsValid'u128'($t21);

    // $t22 := get_field<Diem::CurrencyInfo<#0>>.total_value($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:27+16
    $t22 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t17));

    // $t23 := -($t21, $t22) on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:417:25+1
    call $t23 := $Sub($t21, $t22);
    if ($abort_flag) {
        assume {:print "$at(10,20281,20282)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(18,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // $t24 := (u128)($t0) on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:417:47+15
    call $t24 := $CastU128($t0);
    if ($abort_flag) {
        assume {:print "$at(10,20303,20318)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(18,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // $t25 := >=($t23, $t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:44+2
    call $t25 := $Ge($t23, $t24);

    // $t26 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:417:87+14
    $t26 := 1;
    assume $IsValid'u64'($t26);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:417:64+38
    // >> opaque call: $t20 := Errors::limit_exceeded($t19)

    // $t27 := opaque begin: Errors::limit_exceeded($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:64+38

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:64+38
    assume $IsValid'u64'($t27);

    // assume Eq<u64>($t27, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:64+38
    assume $IsEqual'u64'($t27, 8);

    // $t27 := opaque end: Errors::limit_exceeded($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:64+38

    // trace_local[tmp#$7]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:9+94
    assume {:print "$track_local(18,23,7):", $t27} $t27 == $t27;

    // trace_local[tmp#$6]($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:9+94
    assume {:print "$track_local(18,23,6):", $t25} $t25 == $t25;

    // if ($t25) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:417:9+94
    if ($t25) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:417:9+94
L3:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t17)), Le(select Diem::CurrencyInfo.scaling_factor($t17), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17)) <= 10000000000));

    // destroy($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:9+94
    assume {:print "$at(10,20265,20359)"} true;

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:9+94
    assume {:print "$at(10,20265,20359)"} true;
    assume {:print "$track_abort(18,23):", $t27} $t27 == $t27;

    // $t13 := move($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:9+94
    $t13 := $t27;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:417:9+94
    goto L9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:418:28+4
    assume {:print "$at(10,20388,20392)"} true;
L2:

    // $t28 := get_field<Diem::CurrencyInfo<#0>>.total_value($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:28+16
    $t28 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t17));

    // $t29 := (u128)($t0) on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:418:47+15
    call $t29 := $CastU128($t0);
    if ($abort_flag) {
        assume {:print "$at(10,20407,20422)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(18,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // $t30 := +($t28, $t29) on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:418:45+1
    call $t30 := $AddU128($t28, $t29);
    if ($abort_flag) {
        assume {:print "$at(10,20405,20406)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(18,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // $t31 := borrow_field<Diem::CurrencyInfo<#0>>.total_value($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:9+16
    $t31 := $ChildMutation($t17, 0, $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t17)));

    // write_ref($t31, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:9+53
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t17).total_value]($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:9+53
    $t17 := $UpdateMutation($t17, $Update'$1_Diem_CurrencyInfo'#0''_total_value($Dereference($t17), $Dereference($t31)));

    // $t32 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:421:14+17
    assume {:print "$at(10,20581,20598)"} true;
    $t32 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t17));

    // $t33 := !($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:421:13+1
    call $t33 := $Not($t32);

    // if ($t33) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:421:9+235
    if ($t33) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:421:9+235
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:421:9+235
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:423:22+4
    assume {:print "$at(10,20654,20658)"} true;
L4:

    // $t34 := borrow_field<Diem::CurrencyInfo<#0>>.mint_events($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:423:17+21
    $t34 := $ChildMutation($t17, 8, $mint_events#$1_Diem_CurrencyInfo'#0'($Dereference($t17)));

    // $t35 := pack Diem::MintEvent($t0, $t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:424:17+98
    assume {:print "$at(10,20688,20786)"} true;
    $t35 := $1_Diem_MintEvent($t0, $t14);

    // Event::emit_event<Diem::MintEvent>($t34, $t35) on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:422:13+186
    assume {:print "$at(10,20614,20800)"} true;
    call $t34 := $1_Event_emit_event'$1_Diem_MintEvent'($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(10,20614,20800)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(18,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t17)), Le(select Diem::CurrencyInfo.scaling_factor($t17), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:422:13+186
    assume {:print "$at(10,20614,20800)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:428:14+1
    assume {:print "$at(10,20800,20801)"} true;
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:421:9+235
    assume {:print "$at(10,20576,20811)"} true;
L6:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t17)), Le(select Diem::CurrencyInfo.scaling_factor($t17), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:421:9+235
    assume {:print "$at(10,20576,20811)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // destroy($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:421:9+235

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:431:26+5
    assume {:print "$at(10,20839,20844)"} true;
L7:

    // $t36 := pack Diem::Diem<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:431:9+24
    $t36 := $1_Diem_Diem'#0'($t0);

    // trace_return[0]($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:431:9+24
    assume {:print "$track_return(18,23,0):", $t36} $t36 == $t36;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:432:5+1
    assume {:print "$at(10,20851,20852)"} true;
L8:

    // assume Identical($t37, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:451:9+76
    assume {:print "$at(10,21643,21719)"} true;
    assume ($t37 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assert Not(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@289]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:444:9+78
    assume {:print "$at(10,21272,21350)"} true;
    assert {:msg "assert_failed(10,21272,21350): function does not abort under this condition"}
      !!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289));

    // assert Not(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@289]<#0>()), $t0), MaxU128())) at /home/ying/diem/language/diem-framework/modules/Diem.move:445:9+102
    assume {:print "$at(10,21359,21461)"} true;
    assert {:msg "assert_failed(10,21359,21461): function does not abort under this condition"}
      !(($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289)) + $t0) > $MAX_U128);

    // assert Not(Not(Diem::spec_is_currency[@289]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289);

    // assert exists<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:436:9+54
    assume {:print "$at(10,20980,21034)"} true;
    assert {:msg "assert_failed(10,20980,21034): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816);

    // assert exists<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:452:9+54
    assume {:print "$at(10,21728,21782)"} true;
    assert {:msg "assert_failed(10,21728,21782): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816);

    // assert Eq<Diem::CurrencyInfo<#0>>($t37, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t8, Add(select Diem::CurrencyInfo.total_value($t8), $t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+106
    assume {:print "$at(10,21791,21897)"} true;
    assert {:msg "assert_failed(10,21791,21897): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t37, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t8, ($total_value#$1_Diem_CurrencyInfo'#0'($t8) + $t0)));

    // assert Eq<u64>(select Diem::Diem.value($t36), $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:454:9+30
    assume {:print "$at(10,21906,21936)"} true;
    assert {:msg "assert_failed(10,21906,21936): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t36), $t0);

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@290]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#290, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@290]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#290, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@289]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@289]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@291]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#291, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@291]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#291, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@289]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@289]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289))));

    // assert Implies(Diem::spec_is_currency[@289]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@289]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@292]<Diem::PreburnQueue<#0>>(addr), exists[@293]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#292, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#293, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@292]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#292, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@289]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@289]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10, Not(select Diem::CurrencyInfo.is_synthetic($t9)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:464:9+51
    assume {:print "$at(10,22255,22306)"} true;
    assert {:msg "assert_failed(10,22255,22306): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_MintEvent'($EmptyEventStore, $t10, $t11, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t9)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t11, $t10, Not(select Diem::CurrencyInfo.is_synthetic($t9)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:433:5+299
    assume {:print "$at(10,20857,21156)"} true;
    assert {:msg "assert_failed(10,20857,21156): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_MintEvent'($EmptyEventStore, $t10, $t11, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t9)); $EventStore__is_subset(actual, expected)));

    // return $t36 at /home/ying/diem/language/diem-framework/modules/Diem.move:433:5+299
    $ret0 := $t36;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:432:5+1
    assume {:print "$at(10,20851,20852)"} true;
L9:

    // assert Or(Or(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@289]<#0>())), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@289]<#0>()), $t0), MaxU128())), Not(Diem::spec_is_currency[@289]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:433:5+299
    assume {:print "$at(10,20857,21156)"} true;
    assert {:msg "assert_failed(10,20857,21156): abort not covered by any of the `aborts_if` clauses"}
      ((!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289)) || (($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289)) + $t0) > $MAX_U128)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289));

    // assert Or(Or(And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@289]<#0>())), Eq(1, $t13)), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@289]<#0>()), $t0), MaxU128()), Eq(8, $t13))), And(Not(Diem::spec_is_currency[@289]<#0>()), Eq(5, $t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:433:5+299
    assert {:msg "assert_failed(10,20857,21156): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289)) && $IsEqual'u8'(1, $t13)) || ((($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289)) + $t0) > $MAX_U128) && $IsEqual'u8'(8, $t13))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289) && $IsEqual'u8'(5, $t13)));

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:433:5+299
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun Diem::preburn_to [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:745:5+869
procedure {:timeLimit 40} $1_Diem_preburn_to$verify(_$t0: int, _$t1: $1_Diem_Diem'#0') returns ()
{
    // declare local variables
    var $t2: $1_Diem_PreburnWithMetadata'#0';
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: $1_Diem_CurrencyInfo'#0';
    var $t16: $1_Diem_CurrencyInfo'#0';
    var $t17: Vec (int);
    var $t18: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t19: $1_Diem_PreburnEvent;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: bool;
    var $t36: $1_Diem_Preburn'#0';
    var $t37: $1_Diem_Diem'#0';
    var $t38: $1_Diem_Preburn'#0';
    var $t39: Vec (int);
    var $t40: $Mutation ($1_Diem_PreburnWithMetadata'#0');
    var $t41: $Mutation ($1_Diem_Preburn'#0');
    var $t42: $1_Diem_CurrencyInfo'#0';
    var $t43: $1_Diem_CurrencyInfo'#0';
    var $t44: Vec (int);
    var $t45: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t46: $1_Diem_PreburnEvent;
    var $t47: $1_Diem_PreburnWithMetadata'#0';
    var $t48: int;
    var $t49: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t50: int;
    var $t51: bool;
    var $t52: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t53: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: $1_Diem_Diem'#0';
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_Preburn'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'$1_Diem_PreburnWithMetadata'#0'': $1_Diem_PreburnWithMetadata'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_Preburn'#0'_$memory#395: $Memory $1_Diem_Preburn'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#396: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Roles_RoleId_$memory#397: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#398: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#399: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#400: $Memory $1_Diem_BurnCapability'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t40));
    assume IsEmptyVec(p#$Mutation($t41));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:745:5+869
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume {:print "$at(10,35896,36765)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:745:5+869
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:745:5+869
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:745:5+869
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:745:5+869
    assume $IsValid'$1_Diem_Diem'#0''($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:745:5+869
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:745:5+869
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:745:5+869
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:745:5+869
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:769:9+52
    assume {:print "$at(10,36948,37000)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:775:9+52
    assume {:print "$at(10,37210,37262)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:683:9+52
    assume {:print "$at(10,32292,32344)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, And(exists<Diem::Preburn<#0>>($t9), Not(exists<Diem::PreburnQueue<#0>>($t9)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:684:9+103
    assume {:print "$at(10,32353,32456)"} true;
    assume ($t10 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t9) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t9)));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:732:9+52
    assume {:print "$at(10,35109,35161)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:787:9+52
    assume {:print "$at(10,37909,37961)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:523:9+42
    assume {:print "$at(10,24973,25015)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t16, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:530:9+42
    assume {:print "$at(10,25292,25334)"} true;
    assume ($t16 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t17, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:531:9+51
    assume {:print "$at(10,25343,25394)"} true;
    assume ($t17 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t18, select Diem::CurrencyInfo.preburn_events($t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+33
    assume {:print "$at(10,25403,25436)"} true;
    assume ($t18 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t16));

    // assume Identical($t19, pack Diem::PreburnEvent(select Diem::Diem.value($t1), $t17, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+111
    assume {:print "$at(10,25445,25556)"} true;
    assume ($t19 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t1), $t17, $t6));

    // assume CanModify<Diem::Preburn<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:789:9+49
    assume {:print "$at(10,38024,38073)"} true;
    assume $1_Diem_Preburn'#0'_$modifies[$t14];

    // assume CanModify<Diem::PreburnQueue<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:791:9+54
    assume {:print "$at(10,38156,38210)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t14];

    // assume CanModify<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:794:9+55
    assume {:print "$at(10,38348,38403)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[173345816];

    // @397 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:794:9+55
    $1_Roles_RoleId_$memory#397 := $1_Roles_RoleId_$memory;

    // @400 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:794:9+55
    $1_Diem_BurnCapability'#0'_$memory#400 := $1_Diem_BurnCapability'#0'_$memory;

    // @398 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:794:9+55
    $1_Diem_CurrencyInfo'#0'_$memory#398 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @399 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:794:9+55
    $1_Diem_MintCapability'#0'_$memory#399 := $1_Diem_MintCapability'#0'_$memory;

    // @395 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:794:9+55
    $1_Diem_Preburn'#0'_$memory#395 := $1_Diem_Preburn'#0'_$memory;

    // @396 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:794:9+55
    $1_Diem_PreburnQueue'#0'_$memory#396 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:745:5+1
    assume {:print "$at(10,35896,35897)"} true;
    assume {:print "$track_local(18,24,0):", $t0} $t0 == $t0;

    // trace_local[coin]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:745:5+1
    assume {:print "$track_local(18,24,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:749:9+40
    // >> opaque call: Roles::assert_designated_dealer($t0)
    assume {:print "$at(10,36052,36092)"} true;

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:749:9+40
    assume {:print "$at(10,36052,36092)"} true;

    // assume Identical($t21, Or(Not(exists<Roles::RoleId>($t20)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:749:9+40
    assume ($t21 == (!$ResourceExists($1_Roles_RoleId_$memory, $t20) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 2)));

    // if ($t21) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:749:9+40
    if ($t21) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:749:9+40
L5:

    // assume Or(And(Not(exists<Roles::RoleId>($t20)), Eq(5, $t22)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 2), Eq(3, $t22))) at /home/ying/diem/language/diem-framework/modules/Diem.move:749:9+40
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t20) && $IsEqual'u8'(5, $t22)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 2) && $IsEqual'u8'(3, $t22)));

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:749:9+40
    assume {:print "$at(10,36052,36092)"} true;
    assume {:print "$track_abort(18,24):", $t22} $t22 == $t22;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:749:9+40
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:749:9+40
L4:

    // opaque end: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:749:9+40

    // $t23 := Diem::value<#0>($t1) on_abort goto L3 with $t22 at /home/ying/diem/language/diem-framework/modules/Diem.move:751:16+12
    assume {:print "$at(10,36177,36189)"} true;
    call $t23 := $1_Diem_value'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(10,36177,36189)"} true;
        $t22 := $abort_code;
        assume {:print "$track_abort(18,24):", $t22} $t22 == $t22;
        goto L3;
    }

    // $t24 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:751:31+1
    $t24 := 0;
    assume $IsValid'u64'($t24);

    // $t25 := >($t23, $t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:29+1
    call $t25 := $Gt($t23, $t24);

    // $t26 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:751:59+5
    $t26 := 7;
    assume $IsValid'u64'($t26);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:751:34+31
    // >> opaque call: $t10 := Errors::invalid_argument($t9)

    // $t27 := opaque begin: Errors::invalid_argument($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:34+31

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:34+31
    assume $IsValid'u64'($t27);

    // assume Eq<u64>($t27, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:34+31
    assume $IsEqual'u64'($t27, 7);

    // $t27 := opaque end: Errors::invalid_argument($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:34+31

    // trace_local[tmp#$5]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+57
    assume {:print "$track_local(18,24,5):", $t27} $t27 == $t27;

    // trace_local[tmp#$4]($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+57
    assume {:print "$track_local(18,24,4):", $t25} $t25 == $t25;

    // if ($t25) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+57
    if ($t25) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+57
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+57

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+57
    assume {:print "$at(10,36170,36227)"} true;
    assume {:print "$track_abort(18,24):", $t27} $t27 == $t27;

    // $t22 := move($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+57
    $t22 := $t27;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+57
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:752:41+7
    assume {:print "$at(10,36269,36276)"} true;
L0:

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:752:22+27
    // >> opaque call: $t11 := Signer::address_of($t0)

    // $t28 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:752:22+27

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:752:22+27
    assume $IsValid'address'($t28);

    // assume Eq<address>($t28, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:752:22+27
    assume $IsEqual'address'($t28, $1_Signer_spec_address_of($t0));

    // $t28 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:752:22+27

    // trace_local[sender]($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:752:13+6
    assume {:print "$track_local(18,24,3):", $t28} $t28 == $t28;

    // assume Identical($t29, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:675:9+52
    assume {:print "$at(10,31929,31981)"} true;
    assume ($t29 == $1_Signer_spec_address_of($t0));

    // assume Identical($t30, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:683:9+52
    assume {:print "$at(10,32292,32344)"} true;
    assume ($t30 == $1_Signer_spec_address_of($t0));

    // assume Identical($t31, And(exists<Diem::Preburn<#0>>($t30), Not(exists<Diem::PreburnQueue<#0>>($t30)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:684:9+103
    assume {:print "$at(10,32353,32456)"} true;
    assume ($t31 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t30) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t30)));

    // assume Identical($t32, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t0));

    // assume Identical($t33, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume ($t33 == $1_Signer_spec_address_of($t0));

    // assume Identical($t34, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:692:9+52
    assume {:print "$at(10,32816,32868)"} true;
    assume ($t34 == $1_Signer_spec_address_of($t0));

    // assume Identical($t35, And(exists<Diem::Preburn<#0>>($t34), Not(exists<Diem::PreburnQueue<#0>>($t34)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:693:9+103
    assume {:print "$at(10,32877,32980)"} true;
    assume ($t35 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t34) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t34)));

    // assume Identical($t36, global<Diem::Preburn<#0>>($t34)) at /home/ying/diem/language/diem-framework/modules/Diem.move:694:9+54
    assume {:print "$at(10,32989,33043)"} true;
    assume ($t36 == $ResourceValue($1_Diem_Preburn'#0'_$memory, $t34));

    // assert CanModify<Diem::Preburn<#0>>($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:756:9+34
    assume {:print "$at(10,36466,36500)"} true;
    assert {:msg "assert_failed(10,36466,36500): caller does not have permission to modify `Diem::Preburn<#0>` at given address"}
      $1_Diem_Preburn'#0'_$modifies[$t29];

    // assert CanModify<Diem::PreburnQueue<#0>>($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:756:9+34
    assert {:msg "assert_failed(10,36466,36500): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t29];

    // Diem::upgrade_preburn<#0>($t0) on_abort goto L3 with $t22 at /home/ying/diem/language/diem-framework/modules/Diem.move:756:9+34
    call $1_Diem_upgrade_preburn'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,36466,36500)"} true;
        $t22 := $abort_code;
        assume {:print "$track_abort(18,24):", $t22} $t22 == $t22;
        goto L3;
    }

    // $t37 := Diem::zero<#0>() on_abort goto L3 with $t22 at /home/ying/diem/language/diem-framework/modules/Diem.move:759:41+16
    assume {:print "$at(10,36587,36603)"} true;
    call $t37 := $1_Diem_zero'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,36587,36603)"} true;
        $t22 := $abort_code;
        assume {:print "$track_abort(18,24):", $t22} $t22 == $t22;
        goto L3;
    }

    // $t38 := pack Diem::Preburn<#0>($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:759:22+37
    $t38 := $1_Diem_Preburn'#0'($t37);

    // $t39 := [] at /home/ying/diem/language/diem-framework/modules/Diem.move:760:23+3
    assume {:print "$at(10,36629,36632)"} true;
    $t39 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t39);

    // $t2 := pack Diem::PreburnWithMetadata<#0>($t38, $t39) at /home/ying/diem/language/diem-framework/modules/Diem.move:758:23+118
    assume {:print "$at(10,36525,36643)"} true;
    $t2 := $1_Diem_PreburnWithMetadata'#0'($t38, $t39);

    // trace_local[preburn]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:758:13+7
    assume {:print "$track_local(18,24,2):", $t2} $t2 == $t2;

    // $t40 := borrow_local($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:762:42+7
    assume {:print "$at(10,36686,36693)"} true;
    $t40 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t41 := borrow_field<Diem::PreburnWithMetadata<#0>>.preburn($t40) at /home/ying/diem/language/diem-framework/modules/Diem.move:762:37+20
    $t41 := $ChildMutation($t40, 0, $preburn#$1_Diem_PreburnWithMetadata'#0'($Dereference($t40)));

    // assume Identical($t42, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:523:9+42
    assume {:print "$at(10,24973,25015)"} true;
    assume ($t42 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t43, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:530:9+42
    assume {:print "$at(10,25292,25334)"} true;
    assume ($t43 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t44, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:531:9+51
    assume {:print "$at(10,25343,25394)"} true;
    assume ($t44 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t45, select Diem::CurrencyInfo.preburn_events($t43)) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+33
    assume {:print "$at(10,25403,25436)"} true;
    assume ($t45 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t43));

    // assume Identical($t46, pack Diem::PreburnEvent(select Diem::Diem.value($t1), $t44, $t28)) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+111
    assume {:print "$at(10,25445,25556)"} true;
    assume ($t46 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t1), $t44, $t28));

    // assert CanModify<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:762:9+57
    assume {:print "$at(10,36653,36710)"} true;
    assert {:msg "assert_failed(10,36653,36710): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[173345816];

    // Diem::preburn_with_resource<#0>($t1, $t41, $t28) on_abort goto L3 with $t22 at /home/ying/diem/language/diem-framework/modules/Diem.move:762:9+57
    call $t41 := $1_Diem_preburn_with_resource'#0'($t1, $t41, $t28);
    if ($abort_flag) {
        assume {:print "$at(10,36653,36710)"} true;
        $t22 := $abort_code;
        assume {:print "$track_abort(18,24):", $t22} $t22 == $t22;
        goto L3;
    }

    // write_back[Reference($t40).preburn]($t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:762:9+57
    $t40 := $UpdateMutation($t40, $Update'$1_Diem_PreburnWithMetadata'#0''_preburn($Dereference($t40), $Dereference($t41)));

    // write_back[LocalRoot($t2)@]($t40) at /home/ying/diem/language/diem-framework/modules/Diem.move:762:9+57
    $t2 := $Dereference($t40);

    // $t47 := move($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:763:39+7
    assume {:print "$at(10,36750,36757)"} true;
    $t47 := $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:763:9+38
    // >> opaque call: Diem::add_preburn_to_queue<#0>($t0, $t17)

    // assume Identical($t48, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:720:9+52
    assume {:print "$at(10,34407,34459)"} true;
    assume ($t48 == $1_Signer_spec_address_of($t0));

    // assume Identical($t49, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t48))) at /home/ying/diem/language/diem-framework/modules/Diem.move:721:9+69
    assume {:print "$at(10,34468,34537)"} true;
    assume ($t49 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t48)));

    // assume Identical($t50, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:732:9+52
    assume {:print "$at(10,35109,35161)"} true;
    assume ($t50 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Diem::PreburnQueue<#0>>($t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:763:9+38
    assume {:print "$at(10,36720,36758)"} true;
    assert {:msg "assert_failed(10,36720,36758): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t48];

    // opaque begin: Diem::add_preburn_to_queue<#0>($t0, $t47) at /home/ying/diem/language/diem-framework/modules/Diem.move:763:9+38

    // assume Identical($t51, Or(Or(Not(exists<Diem::PreburnQueue<#0>>($t48)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t47))), 0)), And(exists<Diem::PreburnQueue<#0>>($t50), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t50))), 256)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:763:9+38
    assume ($t51 == ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t48) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t47))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t50) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t50))) >= 256))));

    // if ($t51) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:763:9+38
    if ($t51) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:763:9+38
L7:

    // assume Or(Or(And(Not(exists<Diem::PreburnQueue<#0>>($t48)), Eq(1, $t22)), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t47))), 0), Eq(7, $t22))), And(And(exists<Diem::PreburnQueue<#0>>($t50), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t50))), 256)), Eq(8, $t22))) at /home/ying/diem/language/diem-framework/modules/Diem.move:763:9+38
    assume (((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t48) && $IsEqual'u8'(1, $t22)) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t47))), 0) && $IsEqual'u8'(7, $t22))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t50) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t50))) >= 256)) && $IsEqual'u8'(8, $t22)));

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:763:9+38
    assume {:print "$at(10,36720,36758)"} true;
    assume {:print "$track_abort(18,24):", $t22} $t22 == $t22;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:763:9+38
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:763:9+38
L6:

    // modifies global<Diem::PreburnQueue<#0>>($t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:763:9+38
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t48, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t48);
    }

    // assume Identical($t52, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t48))) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79
    assume {:print "$at(10,34546,34625)"} true;
    assume ($t52 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t48)));

    // assume exists<Diem::PreburnQueue<#0>>($t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t48);

    // assume Vector::eq_push_back<Diem::PreburnWithMetadata<#0>>($t52, $t49, $t47) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79
    assume $1_Vector_eq_push_back'$1_Diem_PreburnWithMetadata'#0''($t52, $t49, $t47);

    // opaque end: Diem::add_preburn_to_queue<#0>($t0, $t47) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:764:5+1
    assume {:print "$at(10,36764,36765)"} true;
L2:

    // assume Identical($t53, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:524:9+52
    assume {:print "$at(10,25024,25076)"} true;
    assume ($t53 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert Not(Not(Or(exists[@395]<Diem::Preburn<#0>>($t7), exists[@396]<Diem::PreburnQueue<#0>>($t7)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:778:9+101
    assume {:print "$at(10,37420,37521)"} true;
    assert {:msg "assert_failed(10,37420,37521): function does not abort under this condition"}
      !!($ResourceExists($1_Diem_Preburn'#0'_$memory#395, $t7) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, $t7));

    // assert Not(Not(exists[@397]<Roles::RoleId>($t8))) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+59
    assume {:print "$at(26,24772,24831)"} true;
    assert {:msg "assert_failed(26,24772,24831): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#397, $t8);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t8)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+95
    assume {:print "$at(26,24840,24935)"} true;
    assert {:msg "assert_failed(26,24840,24935): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t8)), 2);

    // assert Not(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@398]<#0>()), select Diem::Diem.value($t1)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:518:9+102
    assume {:print "$at(10,24756,24858)"} true;
    assert {:msg "assert_failed(10,24756,24858): function does not abort under this condition"}
      !(($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398)) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615);

    // assert Not(Not(Diem::spec_is_currency[@398]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398);

    // assert Not(And($t10, Not(exists[@397]<Roles::RoleId>($t11)))) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+59
    assume {:print "$at(26,24772,24831)"} true;
    assert {:msg "assert_failed(26,24772,24831): function does not abort under this condition"}
      !($t10 && !$ResourceExists($1_Roles_RoleId_$memory#397, $t11));

    // assert Not(And($t10, Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t11)), 2))) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+95
    assume {:print "$at(26,24840,24935)"} true;
    assert {:msg "assert_failed(26,24840,24935): function does not abort under this condition"}
      !($t10 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t11)), 2));

    // assert Not(And($t10, Not(Diem::spec_is_currency[@398]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !($t10 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398));

    // assert Not(Not(exists[@397]<Roles::RoleId>($t12))) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+59
    assume {:print "$at(26,24772,24831)"} true;
    assert {:msg "assert_failed(26,24772,24831): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#397, $t12);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t12)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+95
    assume {:print "$at(26,24840,24935)"} true;
    assert {:msg "assert_failed(26,24840,24935): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t12)), 2);

    // assert Not(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn[]<#0>(select Diem::Diem.value($t1)), [])))), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:733:9+75
    assume {:print "$at(10,35170,35245)"} true;
    assert {:msg "assert_failed(10,35170,35245): function does not abort under this condition"}
      !$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($value#$1_Diem_Diem'#0'($t1)), $EmptyVec'u8'())))), 0);

    // assert Not(And(exists[@396]<Diem::PreburnQueue<#0>>($t13), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@396]<Diem::PreburnQueue<#0>>($t13))), 256))) at /home/ying/diem/language/diem-framework/modules/Diem.move:734:9+208
    assume {:print "$at(10,35254,35462)"} true;
    assert {:msg "assert_failed(10,35254,35462): function does not abort under this condition"}
      !($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, $t13) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#396, $t13))) >= 256));

    // assert exists<Diem::PreburnQueue<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:792:9+53
    assume {:print "$at(10,38219,38272)"} true;
    assert {:msg "assert_failed(10,38219,38272): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t14);

    // assert Eq<Diem::CurrencyInfo<#0>>($t53, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t15, Add(select Diem::CurrencyInfo.preburn_value($t15), select Diem::Diem.value($t1)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+84
    assume {:print "$at(10,25085,25169)"} true;
    assert {:msg "assert_failed(10,25085,25169): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t53, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t15, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t15) + $value#$1_Diem_Diem'#0'($t1))));

    // assert Implies(Diem::spec_is_currency[@398]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@398]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@399]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#399, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@399]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#399, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@398]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@398]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@400]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#400, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@400]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#400, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@398]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@398]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@396]<Diem::PreburnQueue<#0>>(addr), exists[@395]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#395, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@396]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@398]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@398]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t19, $t18, Not(select Diem::CurrencyInfo.is_synthetic($t16)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:538:9+42
    assume {:print "$at(10,25565,25607)"} true;
    assert {:msg "assert_failed(10,25565,25607): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t18, $t19, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t16)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t19, $t18, Not(select Diem::CurrencyInfo.is_synthetic($t16)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:765:5+339
    assume {:print "$at(10,36770,37109)"} true;
    assert {:msg "assert_failed(10,36770,37109): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t18, $t19, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t16)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:765:5+339
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:764:5+1
    assume {:print "$at(10,36764,36765)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(Or(exists[@395]<Diem::Preburn<#0>>($t7), exists[@396]<Diem::PreburnQueue<#0>>($t7))), Not(exists[@397]<Roles::RoleId>($t8))), Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t8)), 2)), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@398]<#0>()), select Diem::Diem.value($t1)), 18446744073709551615)), Not(Diem::spec_is_currency[@398]<#0>())), And($t10, Not(exists[@397]<Roles::RoleId>($t11)))), And($t10, Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t11)), 2))), And($t10, Not(Diem::spec_is_currency[@398]<#0>()))), Not(exists[@397]<Roles::RoleId>($t12))), Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t12)), 2)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn[]<#0>(select Diem::Diem.value($t1)), [])))), 0)), And(exists[@396]<Diem::PreburnQueue<#0>>($t13), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@396]<Diem::PreburnQueue<#0>>($t13))), 256))) at /home/ying/diem/language/diem-framework/modules/Diem.move:765:5+339
    assume {:print "$at(10,36770,37109)"} true;
    assert {:msg "assert_failed(10,36770,37109): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((!($ResourceExists($1_Diem_Preburn'#0'_$memory#395, $t7) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, $t7)) || !$ResourceExists($1_Roles_RoleId_$memory#397, $t8)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t8)), 2)) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398)) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398)) || ($t10 && !$ResourceExists($1_Roles_RoleId_$memory#397, $t11))) || ($t10 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t11)), 2))) || ($t10 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398))) || !$ResourceExists($1_Roles_RoleId_$memory#397, $t12)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t12)), 2)) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($value#$1_Diem_Diem'#0'($t1)), $EmptyVec'u8'())))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, $t13) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#396, $t13))) >= 256)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(Or(exists[@395]<Diem::Preburn<#0>>($t7), exists[@396]<Diem::PreburnQueue<#0>>($t7))), And(Not(exists[@397]<Roles::RoleId>($t8)), Eq(5, $t22))), And(Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t8)), 2), Eq(3, $t22))), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@398]<#0>()), select Diem::Diem.value($t1)), 18446744073709551615), Eq(8, $t22))), And(Not(Diem::spec_is_currency[@398]<#0>()), Eq(5, $t22))), And(And($t10, Not(exists[@397]<Roles::RoleId>($t11))), Eq(5, $t22))), And(And($t10, Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t11)), 2)), Eq(3, $t22))), And(And($t10, Not(Diem::spec_is_currency[@398]<#0>())), Eq(5, $t22))), And(Not(exists[@397]<Roles::RoleId>($t12)), Eq(5, $t22))), And(Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t12)), 2), Eq(3, $t22))), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn[]<#0>(select Diem::Diem.value($t1)), [])))), 0), Eq(7, $t22))), And(And(exists[@396]<Diem::PreburnQueue<#0>>($t13), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@396]<Diem::PreburnQueue<#0>>($t13))), 256)), Eq(8, $t22))) at /home/ying/diem/language/diem-framework/modules/Diem.move:765:5+339
    assert {:msg "assert_failed(10,36770,37109): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((!($ResourceExists($1_Diem_Preburn'#0'_$memory#395, $t7) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, $t7)) || (!$ResourceExists($1_Roles_RoleId_$memory#397, $t8) && $IsEqual'u8'(5, $t22))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t8)), 2) && $IsEqual'u8'(3, $t22))) || ((($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398)) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615) && $IsEqual'u8'(8, $t22))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398) && $IsEqual'u8'(5, $t22))) || (($t10 && !$ResourceExists($1_Roles_RoleId_$memory#397, $t11)) && $IsEqual'u8'(5, $t22))) || (($t10 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t11)), 2)) && $IsEqual'u8'(3, $t22))) || (($t10 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398)) && $IsEqual'u8'(5, $t22))) || (!$ResourceExists($1_Roles_RoleId_$memory#397, $t12) && $IsEqual'u8'(5, $t22))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t12)), 2) && $IsEqual'u8'(3, $t22))) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($value#$1_Diem_Diem'#0'($t1)), $EmptyVec'u8'())))), 0) && $IsEqual'u8'(7, $t22))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, $t13) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#396, $t13))) >= 256)) && $IsEqual'u8'(8, $t22)));

    // abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:765:5+339
    $abort_code := $t22;
    $abort_flag := true;
    return;

}

// fun Diem::preburn_value [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:5+193
procedure {:timeLimit 40} $1_Diem_preburn_value$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: int;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#203: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#204: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#205: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#206: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#207: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:5+193
    assume {:print "$at(10,53148,53341)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @205 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:5+1
    $1_Diem_BurnCapability'#0'_$memory#205 := $1_Diem_BurnCapability'#0'_$memory;

    // @203 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#203 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @204 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:5+1
    $1_Diem_MintCapability'#0'_$memory#204 := $1_Diem_MintCapability'#0'_$memory;

    // @207 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:5+1
    $1_Diem_Preburn'#0'_$memory#207 := $1_Diem_Preburn'#0'_$memory;

    // @206 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:5+1
    $1_Diem_PreburnQueue'#0'_$memory#206 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,53229,53259)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:9+30
    assume {:print "$at(10,53229,53259)"} true;
    assume {:print "$track_abort(18,25):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:9+30

    // $t2 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1102:47+13
    assume {:print "$at(10,53307,53320)"} true;
    $t2 := 173345816;
    assume $IsValid'address'($t2);

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1102:9+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,53269,53282)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(18,25):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1102:9+66
    $t4 := $preburn_value#$1_Diem_CurrencyInfo'#0'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1102:9+66
    assume {:print "$track_return(18,25,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:5+1
    assume {:print "$at(10,53340,53341)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@203]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@203]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#203) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#203))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@204]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#204, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@204]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#204, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@203]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@203]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#203) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#203))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@205]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#205, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@205]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#205, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@203]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@203]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#203) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#203))));

    // assert Implies(Diem::spec_is_currency[@203]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@203]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#203) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#203))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@206]<Diem::PreburnQueue<#0>>(addr), exists[@207]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#206, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#207, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@206]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#206, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@203]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@203]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#203) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#203))));

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:5+1
    assume {:print "$at(10,53340,53341)"} true;
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::preburn_with_resource<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:474:5+1220
procedure {:inline 1} $1_Diem_preburn_with_resource'#0'(_$t0: $1_Diem_Diem'#0', _$t1: $Mutation ($1_Diem_Preburn'#0'), _$t2: int) returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t3: int;
    var $t4: Vec (int);
    var $t5: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t14: $1_Diem_PreburnEvent;
    var $t15: int;
    var $t16: int;
    var $t17: $1_Diem_Diem'#0';
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation ($1_Diem_Diem'#0');
    var $t24: $1_Diem_Diem'#0';
    var $t25: bool;
    var $t26: Vec (int);
    var $t27: bool;
    var $t28: int;
    var $t29: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: $Mutation (int);
    var $t39: bool;
    var $t40: bool;
    var $t41: $Mutation ($1_Event_EventHandle'$1_Diem_PreburnEvent');
    var $t42: $1_Diem_PreburnEvent;
    var $t0: $1_Diem_Diem'#0';
    var $t1: $Mutation ($1_Diem_Preburn'#0');
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t23));
    assume IsEmptyVec(p#$Mutation($t29));
    assume IsEmptyVec(p#$Mutation($t38));
    assume IsEmptyVec(p#$Mutation($t41));

    // bytecode translation starts here
    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:523:9+42
    assume {:print "$at(10,24973,25015)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:530:9+42
    assume {:print "$at(10,25292,25334)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:531:9+51
    assume {:print "$at(10,25343,25394)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.preburn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+33
    assume {:print "$at(10,25403,25436)"} true;
    assume ($t13 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // assume Identical($t14, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t12, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+111
    assume {:print "$at(10,25445,25556)"} true;
    assume ($t14 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t0), $t12, $t2));

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:474:5+1
    assume {:print "$at(10,22807,22808)"} true;
    assume {:print "$track_local(18,26,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:474:5+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(18,26,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:474:5+1
    assume {:print "$track_local(18,26,2):", $t2} $t2 == $t2;

    // $t15 := Diem::value<#0>($t0) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:479:26+12
    assume {:print "$at(10,23011,23023)"} true;
    call $t15 := $1_Diem_value'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,23011,23023)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // trace_local[coin_value]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:479:13+10
    assume {:print "$track_local(18,26,3):", $t15} $t15 == $t15;

    // $t17 := get_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:22+16
    assume {:print "$at(10,23083,23099)"} true;
    $t17 := $to_burn#$1_Diem_Preburn'#0'($Dereference($t1));

    // $t18 := Diem::value<#0>($t17) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:16+23
    call $t18 := $1_Diem_value'#0'($t17);
    if ($abort_flag) {
        assume {:print "$at(10,23077,23100)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:43+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := ==($t18, $t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:40+2
    $t20 := $IsEqual'u64'($t18, $t19);

    // $t21 := 3 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:68+17
    $t21 := 3;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:481:46+40
    // >> opaque call: $t16 := Errors::invalid_state($t15)

    // $t22 := opaque begin: Errors::invalid_state($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:46+40

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:46+40
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:46+40
    assume $IsEqual'u64'($t22, 1);

    // $t22 := opaque end: Errors::invalid_state($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:46+40

    // trace_local[tmp#$7]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
    assume {:print "$track_local(18,26,7):", $t22} $t22 == $t22;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
    assume {:print "$track_local(18,26,6):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
    assume {:print "$at(10,23070,23148)"} true;
    assume {:print "$track_abort(18,26):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
    $t16 := $t22;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
    goto L10;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:482:22+7
    assume {:print "$at(10,23171,23178)"} true;
L0:

    // $t23 := borrow_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:17+20
    $t23 := $ChildMutation($t1, 0, $to_burn#$1_Diem_Preburn'#0'($Dereference($t1)));

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    // >> opaque call: Diem::deposit<#0>($t17, $t0)

    // opaque begin: Diem::deposit<#0>($t23, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35

    // $t24 := read_ref($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    $t24 := $Dereference($t23);

    // assume Identical($t25, Gt(Add(select Diem::Diem.value($t23), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    assume ($t25 == (($value#$1_Diem_Diem'#0'($Dereference($t23)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615));

    // if ($t25) goto L15 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    if ($t25) { goto L15; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
L12:

    // assume And(Gt(Add(select Diem::Diem.value($t23), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    assume ((($value#$1_Diem_Diem'#0'($Dereference($t23)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615) && $IsEqual'u8'(8, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    assume {:print "$at(10,23158,23193)"} true;
    assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    goto L10;

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
L11:

    // havoc[mut]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t23 := $UpdateMutation($t23, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t23));

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t23));

    // assume Eq<u64>(select Diem::Diem.value($t23), Add(select Diem::Diem.value($t24), select Diem::Diem.value($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t23)), ($value#$1_Diem_Diem'#0'($t24) + $value#$1_Diem_Diem'#0'($t0)));

    // opaque end: Diem::deposit<#0>($t23, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35

    // write_back[Reference($t1).to_burn]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    $t1 := $UpdateMutation($t1, $Update'$1_Diem_Preburn'#0''_to_burn($Dereference($t1), $Dereference($t23)));

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    // >> opaque call: $t18 := Diem::currency_code<#0>()
    assume {:print "$at(10,23223,23248)"} true;

    // $t26 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25

    // assume Identical($t27, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    assume ($t27 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t27) goto L16 else goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    if ($t27) { goto L16; } else { goto L13; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
L14:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    assume {:print "$at(10,23223,23248)"} true;
    assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    goto L10;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
L13:

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    assume $IsValid'vec'u8''($t26);

    // assume Eq<vector<u8>>($t26, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    assume $IsEqual'vec'u8''($t26, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t26 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25

    // trace_local[currency_code]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:13+13
    assume {:print "$track_local(18,26,4):", $t26} $t26 == $t26;

    // $t28 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:62+13
    assume {:print "$at(10,23311,23324)"} true;
    $t28 := 173345816;
    assume $IsValid'address'($t28);

    // $t29 := borrow_global<Diem::CurrencyInfo<#0>>($t28) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t28)) {
        call $ExecFailureAbort();
    } else {
        $t29 := $Mutation($Global($t28), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t28));
    }
    if ($abort_flag) {
        assume {:print "$at(10,23269,23286)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // trace_local[info]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t29);
    assume {:print "$track_local(18,26,5):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t30 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:16+7
    assume {:print "$at(10,23342,23349)"} true;
    $t30 := 18446744073709551615;
    assume $IsValid'u64'($t30);

    // $t31 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:26+18
    $t31 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t29));

    // $t32 := -($t30, $t31) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:24+1
    call $t32 := $Sub($t30, $t31);
    if ($abort_flag) {
        assume {:print "$at(10,23350,23351)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t33 := >=($t32, $t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:45+2
    call $t33 := $Ge($t32, $t15);

    // $t34 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:83+5
    $t34 := 7;
    assume $IsValid'u64'($t34);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:485:60+29
    // >> opaque call: $t26 := Errors::limit_exceeded($t25)

    // $t35 := opaque begin: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:60+29

    // assume WellFormed($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:60+29
    assume $IsValid'u64'($t35);

    // assume Eq<u64>($t35, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:60+29
    assume $IsEqual'u64'($t35, 8);

    // $t35 := opaque end: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:60+29

    // trace_local[tmp#$9]($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    assume {:print "$track_local(18,26,9):", $t35} $t35 == $t35;

    // trace_local[tmp#$8]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    assume {:print "$track_local(18,26,8):", $t33} $t33 == $t33;

    // if ($t33) goto L2 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    if ($t33) { goto L2; } else { goto L8; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
L3:

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81

    // destroy($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81

    // trace_abort($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    assume {:print "$at(10,23335,23416)"} true;
    assume {:print "$track_abort(18,26):", $t35} $t35 == $t35;

    // $t16 := move($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    $t16 := $t35;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    goto L10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:30+4
    assume {:print "$at(10,23447,23451)"} true;
L2:

    // $t36 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:30+18
    $t36 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t29));

    // $t37 := +($t36, $t15) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:49+1
    call $t37 := $AddU64($t36, $t15);
    if ($abort_flag) {
        assume {:print "$at(10,23466,23467)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t38 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:9+18
    $t38 := $ChildMutation($t29, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t29)));

    // write_ref($t38, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:9+52
    $t38 := $UpdateMutation($t38, $t37);

    // write_back[Reference($t29).preburn_value]($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:9+52
    $t29 := $UpdateMutation($t29, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t29), $Dereference($t38)));

    // $t39 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:491:14+17
    assume {:print "$at(10,23742,23759)"} true;
    $t39 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t29));

    // $t40 := !($t39) at /home/ying/diem/language/diem-framework/modules/Diem.move:491:13+1
    call $t40 := $Not($t39);

    // if ($t40) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283
    if ($t40) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:22+4
    assume {:print "$at(10,23815,23819)"} true;
L4:

    // $t41 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_events($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:17+24
    $t41 := $ChildMutation($t29, 10, $preburn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t29)));

    // $t42 := pack Diem::PreburnEvent($t15, $t26, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:494:17+143
    assume {:print "$at(10,23852,23995)"} true;
    $t42 := $1_Diem_PreburnEvent($t15, $t26, $t2);

    // Event::emit_event<Diem::PreburnEvent>($t41, $t42) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:492:13+234
    assume {:print "$at(10,23775,24009)"} true;
    call $t41 := $1_Event_emit_event'$1_Diem_PreburnEvent'($t41, $t42);
    if ($abort_flag) {
        assume {:print "$at(10,23775,24009)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:492:13+234

    // write_back[Diem::CurrencyInfo<#0>@]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:492:13+234
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t29),
        $Dereference($t29));

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:499:14+1
    assume {:print "$at(10,24009,24010)"} true;
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283
    assume {:print "$at(10,23737,24020)"} true;
L6:

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283

    // write_back[Diem::CurrencyInfo<#0>@]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t29),
        $Dereference($t29));

    // destroy($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:500:10+1
    assume {:print "$at(10,24020,24021)"} true;
L7:

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:500:10+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(18,26,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:500:10+1
    goto L9;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t1) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:501:5+1
    assume {:print "$at(10,24026,24027)"} true;
L9:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:501:5+1
    $ret0 := $t1;
    return;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:501:5+1
L10:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:501:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

    // label L15 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L15:

    // destroy($t1) at <internal>:1:1+10

    // goto L12 at <internal>:1:1+10
    goto L12;

    // label L16 at <internal>:1:1+10
L16:

    // destroy($t1) at <internal>:1:1+10

    // goto L14 at <internal>:1:1+10
    goto L14;

}

// fun Diem::preburn_with_resource [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:474:5+1220
procedure {:timeLimit 40} $1_Diem_preburn_with_resource$verify(_$t0: $1_Diem_Diem'#0', _$t1: $Mutation ($1_Diem_Preburn'#0'), _$t2: int) returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t3: int;
    var $t4: Vec (int);
    var $t5: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t14: $1_Diem_PreburnEvent;
    var $t15: $1_Diem_Preburn'#0';
    var $t16: int;
    var $t17: int;
    var $t18: $1_Diem_Diem'#0';
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation ($1_Diem_Diem'#0');
    var $t25: $1_Diem_Diem'#0';
    var $t26: bool;
    var $t27: Vec (int);
    var $t28: bool;
    var $t29: int;
    var $t30: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: bool;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: $Mutation (int);
    var $t40: bool;
    var $t41: bool;
    var $t42: $Mutation ($1_Event_EventHandle'$1_Diem_PreburnEvent');
    var $t43: $1_Diem_PreburnEvent;
    var $t44: $1_Diem_CurrencyInfo'#0';
    var $t0: $1_Diem_Diem'#0';
    var $t1: $Mutation ($1_Diem_Preburn'#0');
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_CurrencyInfo'#0'_$memory#294: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#295: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#296: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#297: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#298: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t30));
    assume IsEmptyVec(p#$Mutation($t39));
    assume IsEmptyVec(p#$Mutation($t42));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:474:5+1220
    assume {:print "$at(10,22807,24027)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:474:5+1220
    assume $IsValid'$1_Diem_Preburn'#0''($Dereference($t1));

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:474:5+1220
    assume $IsValid'address'($t2);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:474:5+1220
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:523:9+42
    assume {:print "$at(10,24973,25015)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:530:9+42
    assume {:print "$at(10,25292,25334)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:531:9+51
    assume {:print "$at(10,25343,25394)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.preburn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+33
    assume {:print "$at(10,25403,25436)"} true;
    assume ($t13 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // assume Identical($t14, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t12, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+111
    assume {:print "$at(10,25445,25556)"} true;
    assume ($t14 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t0), $t12, $t2));

    // assume CanModify<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:503:9+55
    assume {:print "$at(10,24069,24124)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[173345816];

    // @296 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:503:9+55
    $1_Diem_BurnCapability'#0'_$memory#296 := $1_Diem_BurnCapability'#0'_$memory;

    // @294 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:503:9+55
    $1_Diem_CurrencyInfo'#0'_$memory#294 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @295 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:503:9+55
    $1_Diem_MintCapability'#0'_$memory#295 := $1_Diem_MintCapability'#0'_$memory;

    // @298 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:503:9+55
    $1_Diem_Preburn'#0'_$memory#298 := $1_Diem_Preburn'#0'_$memory;

    // @297 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:503:9+55
    $1_Diem_PreburnQueue'#0'_$memory#297 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t15 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:503:9+55
    $t15 := $Dereference($t1);

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:474:5+1
    assume {:print "$at(10,22807,22808)"} true;
    assume {:print "$track_local(18,26,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:474:5+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(18,26,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:474:5+1
    assume {:print "$track_local(18,26,2):", $t2} $t2 == $t2;

    // $t16 := Diem::value<#0>($t0) on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:479:26+12
    assume {:print "$at(10,23011,23023)"} true;
    call $t16 := $1_Diem_value'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,23011,23023)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // trace_local[coin_value]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:479:13+10
    assume {:print "$track_local(18,26,3):", $t16} $t16 == $t16;

    // $t18 := get_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:22+16
    assume {:print "$at(10,23083,23099)"} true;
    $t18 := $to_burn#$1_Diem_Preburn'#0'($Dereference($t1));

    // $t19 := Diem::value<#0>($t18) on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:16+23
    call $t19 := $1_Diem_value'#0'($t18);
    if ($abort_flag) {
        assume {:print "$at(10,23077,23100)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // $t20 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:43+1
    $t20 := 0;
    assume $IsValid'u64'($t20);

    // $t21 := ==($t19, $t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:40+2
    $t21 := $IsEqual'u64'($t19, $t20);

    // $t22 := 3 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:68+17
    $t22 := 3;
    assume $IsValid'u64'($t22);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:481:46+40
    // >> opaque call: $t16 := Errors::invalid_state($t15)

    // $t23 := opaque begin: Errors::invalid_state($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:46+40

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:46+40
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:46+40
    assume $IsEqual'u64'($t23, 1);

    // $t23 := opaque end: Errors::invalid_state($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:46+40

    // trace_local[tmp#$7]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
    assume {:print "$track_local(18,26,7):", $t23} $t23 == $t23;

    // trace_local[tmp#$6]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
    assume {:print "$track_local(18,26,6):", $t21} $t21 == $t21;

    // if ($t21) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
    if ($t21) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
    assume {:print "$at(10,23070,23148)"} true;
    assume {:print "$track_abort(18,26):", $t23} $t23 == $t23;

    // $t17 := move($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
    $t17 := $t23;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:9+78
    goto L10;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:482:22+7
    assume {:print "$at(10,23171,23178)"} true;
L0:

    // $t24 := borrow_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:17+20
    $t24 := $ChildMutation($t1, 0, $to_burn#$1_Diem_Preburn'#0'($Dereference($t1)));

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    // >> opaque call: Diem::deposit<#0>($t17, $t0)

    // opaque begin: Diem::deposit<#0>($t24, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35

    // $t25 := read_ref($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    $t25 := $Dereference($t24);

    // assume Identical($t26, Gt(Add(select Diem::Diem.value($t24), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    assume ($t26 == (($value#$1_Diem_Diem'#0'($Dereference($t24)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615));

    // if ($t26) goto L15 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    if ($t26) { goto L15; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
L12:

    // assume And(Gt(Add(select Diem::Diem.value($t24), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    assume ((($value#$1_Diem_Diem'#0'($Dereference($t24)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615) && $IsEqual'u8'(8, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    assume {:print "$at(10,23158,23193)"} true;
    assume {:print "$track_abort(18,26):", $t17} $t17 == $t17;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    goto L10;

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
L11:

    // havoc[mut]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t24 := $UpdateMutation($t24, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t24));

    // assume WellFormed($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t24));

    // assume Eq<u64>(select Diem::Diem.value($t24), Add(select Diem::Diem.value($t25), select Diem::Diem.value($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t24)), ($value#$1_Diem_Diem'#0'($t25) + $value#$1_Diem_Diem'#0'($t0)));

    // opaque end: Diem::deposit<#0>($t24, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35

    // write_back[Reference($t1).to_burn]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:482:9+35
    $t1 := $UpdateMutation($t1, $Update'$1_Diem_Preburn'#0''_to_burn($Dereference($t1), $Dereference($t24)));

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    // >> opaque call: $t18 := Diem::currency_code<#0>()
    assume {:print "$at(10,23223,23248)"} true;

    // $t27 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25

    // assume Identical($t28, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    assume ($t28 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t28) goto L16 else goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    if ($t28) { goto L16; } else { goto L13; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
L14:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    assume {:print "$at(10,23223,23248)"} true;
    assume {:print "$track_abort(18,26):", $t17} $t17 == $t17;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    goto L10;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
L13:

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    assume $IsValid'vec'u8''($t27);

    // assume Eq<vector<u8>>($t27, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25
    assume $IsEqual'vec'u8''($t27, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t27 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:483:29+25

    // trace_local[currency_code]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:13+13
    assume {:print "$track_local(18,26,4):", $t27} $t27 == $t27;

    // $t29 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:62+13
    assume {:print "$at(10,23311,23324)"} true;
    $t29 := 173345816;
    assume $IsValid'address'($t29);

    // assert CanModify<Diem::CurrencyInfo<#0>>($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:20+17
    assert {:msg "assert_failed(10,23269,23286): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[$t29];

    // $t30 := borrow_global<Diem::CurrencyInfo<#0>>($t29) on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t29)) {
        call $ExecFailureAbort();
    } else {
        $t30 := $Mutation($Global($t29), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t29));
    }
    if ($abort_flag) {
        assume {:print "$at(10,23269,23286)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // trace_local[info]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t30);
    assume {:print "$track_local(18,26,5):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t31 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:16+7
    assume {:print "$at(10,23342,23349)"} true;
    $t31 := 18446744073709551615;
    assume $IsValid'u64'($t31);

    // $t32 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:26+18
    $t32 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t30));

    // $t33 := -($t31, $t32) on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:24+1
    call $t33 := $Sub($t31, $t32);
    if ($abort_flag) {
        assume {:print "$at(10,23350,23351)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // $t34 := >=($t33, $t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:45+2
    call $t34 := $Ge($t33, $t16);

    // $t35 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:83+5
    $t35 := 7;
    assume $IsValid'u64'($t35);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:485:60+29
    // >> opaque call: $t26 := Errors::limit_exceeded($t25)

    // $t36 := opaque begin: Errors::limit_exceeded($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:60+29

    // assume WellFormed($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:60+29
    assume $IsValid'u64'($t36);

    // assume Eq<u64>($t36, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:60+29
    assume $IsEqual'u64'($t36, 8);

    // $t36 := opaque end: Errors::limit_exceeded($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:60+29

    // trace_local[tmp#$9]($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    assume {:print "$track_local(18,26,9):", $t36} $t36 == $t36;

    // trace_local[tmp#$8]($t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    assume {:print "$track_local(18,26,8):", $t34} $t34 == $t34;

    // if ($t34) goto L2 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    if ($t34) { goto L2; } else { goto L8; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
L3:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t30)), Le(select Diem::CurrencyInfo.scaling_factor($t30), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t30))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t30)) <= 10000000000));

    // destroy($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    assume {:print "$at(10,23335,23416)"} true;

    // trace_abort($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    assume {:print "$at(10,23335,23416)"} true;
    assume {:print "$track_abort(18,26):", $t36} $t36 == $t36;

    // $t17 := move($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    $t17 := $t36;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:9+81
    goto L10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:30+4
    assume {:print "$at(10,23447,23451)"} true;
L2:

    // $t37 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:30+18
    $t37 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t30));

    // $t38 := +($t37, $t16) on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:49+1
    call $t38 := $AddU64($t37, $t16);
    if ($abort_flag) {
        assume {:print "$at(10,23466,23467)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // $t39 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:9+18
    $t39 := $ChildMutation($t30, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t30)));

    // write_ref($t39, $t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:9+52
    $t39 := $UpdateMutation($t39, $t38);

    // write_back[Reference($t30).preburn_value]($t39) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:9+52
    $t30 := $UpdateMutation($t30, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t30), $Dereference($t39)));

    // $t40 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:491:14+17
    assume {:print "$at(10,23742,23759)"} true;
    $t40 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t30));

    // $t41 := !($t40) at /home/ying/diem/language/diem-framework/modules/Diem.move:491:13+1
    call $t41 := $Not($t40);

    // if ($t41) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283
    if ($t41) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:22+4
    assume {:print "$at(10,23815,23819)"} true;
L4:

    // $t42 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_events($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:17+24
    $t42 := $ChildMutation($t30, 10, $preburn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t30)));

    // $t43 := pack Diem::PreburnEvent($t16, $t27, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:494:17+143
    assume {:print "$at(10,23852,23995)"} true;
    $t43 := $1_Diem_PreburnEvent($t16, $t27, $t2);

    // Event::emit_event<Diem::PreburnEvent>($t42, $t43) on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:492:13+234
    assume {:print "$at(10,23775,24009)"} true;
    call $t42 := $1_Event_emit_event'$1_Diem_PreburnEvent'($t42, $t43);
    if ($abort_flag) {
        assume {:print "$at(10,23775,24009)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t30)), Le(select Diem::CurrencyInfo.scaling_factor($t30), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t30))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t30)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:492:13+234
    assume {:print "$at(10,23775,24009)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t30),
        $Dereference($t30));

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:499:14+1
    assume {:print "$at(10,24009,24010)"} true;
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283
    assume {:print "$at(10,23737,24020)"} true;
L6:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t30)), Le(select Diem::CurrencyInfo.scaling_factor($t30), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t30))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t30)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283
    assume {:print "$at(10,23737,24020)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t30),
        $Dereference($t30));

    // destroy($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:491:9+283

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:500:10+1
    assume {:print "$at(10,24020,24021)"} true;
L7:

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:500:10+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(18,26,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:500:10+1
    goto L9;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t1) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:501:5+1
    assume {:print "$at(10,24026,24027)"} true;
L9:

    // assume Identical($t44, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:524:9+52
    assume {:print "$at(10,25024,25076)"} true;
    assume ($t44 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert Not(Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t15)), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:512:9+63
    assume {:print "$at(10,24524,24587)"} true;
    assert {:msg "assert_failed(10,24524,24587): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t15)) > 0);

    // assert Not(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@294]<#0>()), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:518:9+102
    assume {:print "$at(10,24756,24858)"} true;
    assert {:msg "assert_failed(10,24756,24858): function does not abort under this condition"}
      !(($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615);

    // assert Not(Not(Diem::spec_is_currency[@294]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294);

    // assert exists<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:504:9+54
    assume {:print "$at(10,24133,24187)"} true;
    assert {:msg "assert_failed(10,24133,24187): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816);

    // assert Eq<Diem::CurrencyInfo<#0>>($t44, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t10, Add(select Diem::CurrencyInfo.preburn_value($t10), select Diem::Diem.value($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+84
    assume {:print "$at(10,25085,25169)"} true;
    assert {:msg "assert_failed(10,25085,25169): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t44, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t10, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t10) + $value#$1_Diem_Diem'#0'($t0))));

    // assert Implies(Diem::spec_is_currency[@294]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@294]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@295]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#295, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@295]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#295, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@294]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@294]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@296]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#296, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@296]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#296, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@294]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@294]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@297]<Diem::PreburnQueue<#0>>(addr), exists[@298]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#297, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#298, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@297]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#297, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@294]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@294]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t14, $t13, Not(select Diem::CurrencyInfo.is_synthetic($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:538:9+42
    assume {:print "$at(10,25565,25607)"} true;
    assert {:msg "assert_failed(10,25565,25607): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t13, $t14, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t11)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t14, $t13, Not(select Diem::CurrencyInfo.is_synthetic($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:502:5+370
    assume {:print "$at(10,24032,24402)"} true;
    assert {:msg "assert_failed(10,24032,24402): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t13, $t14, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t11)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:502:5+370
    $ret0 := $t1;
    return;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:501:5+1
    assume {:print "$at(10,24026,24027)"} true;
L10:

    // assert Or(Or(Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t15)), 0), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@294]<#0>()), select Diem::Diem.value($t0)), 18446744073709551615)), Not(Diem::spec_is_currency[@294]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:502:5+370
    assume {:print "$at(10,24032,24402)"} true;
    assert {:msg "assert_failed(10,24032,24402): abort not covered by any of the `aborts_if` clauses"}
      ((($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t15)) > 0) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294));

    // assert Or(Or(And(Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t15)), 0), Eq(1, $t17)), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@294]<#0>()), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t17))), And(Not(Diem::spec_is_currency[@294]<#0>()), Eq(5, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:502:5+370
    assert {:msg "assert_failed(10,24032,24402): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t15)) > 0) && $IsEqual'u8'(1, $t17)) || ((($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615) && $IsEqual'u8'(8, $t17))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294) && $IsEqual'u8'(5, $t17)));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:502:5+370
    $abort_code := $t17;
    $abort_flag := true;
    return;

    // label L15 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L15:

    // destroy($t1) at <internal>:1:1+10

    // goto L12 at <internal>:1:1+10
    goto L12;

    // label L16 at <internal>:1:1+10
L16:

    // destroy($t1) at <internal>:1:1+10

    // goto L14 at <internal>:1:1+10
    goto L14;

}

// fun Diem::publish_burn_capability<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+424
procedure {:inline 1} $1_Diem_publish_burn_capability'$1_XUS_XUS'(_$t0: int, _$t1: $1_Diem_BurnCapability'$1_XUS_XUS') returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+1
    assume {:print "$at(10,13317,13318)"} true;
    assume {:print "$track_local(18,27,0):", $t0} $t0 == $t0;

    // trace_local[cap]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+1
    assume {:print "$track_local(18,27,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,13454,13499)"} true;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    assume {:print "$at(10,13454,13499)"} true;

    // assume Identical($t6, Or(Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    assume ($t6 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'u8'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    assume {:print "$at(10,13454,13499)"} true;
    assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,13509,13539)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30

    // assume Identical($t8, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    assume ($t8 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t8) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    if ($t8) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    assume {:print "$at(10,13509,13539)"} true;
    assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(10,13603,13633)"} true;

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30

    // $t10 := exists<Diem::BurnCapability<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:14+6
    $t10 := $ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t9);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:13+1
    call $t11 := $Not($t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:39+16
    assume {:print "$at(10,13674,13690)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43
    // >> opaque call: $t8 := Errors::already_published($t7)

    // $t13 := opaque begin: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43
    assume $IsEqual'u64'($t13, 6);

    // $t13 := opaque end: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    assume {:print "$at(10,13549,13701)"} true;
    assume {:print "$track_local(18,27,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    assume {:print "$track_local(18,27,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    assume {:print "$at(10,13549,13701)"} true;
    assume {:print "$track_abort(18,27):", $t13} $t13 == $t13;

    // $t7 := move($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    $t7 := $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:17+10
    assume {:print "$at(10,13719,13729)"} true;
L0:

    // move_to<Diem::BurnCapability<#0>>($t1, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:9+7
    if ($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_BurnCapability'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t0, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(10,13711,13718)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:274:5+1
    assume {:print "$at(10,13740,13741)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:274:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:274:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:274:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Diem::publish_burn_capability<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+424
procedure {:inline 1} $1_Diem_publish_burn_capability'#0'(_$t0: int, _$t1: $1_Diem_BurnCapability'#0') returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+1
    assume {:print "$at(10,13317,13318)"} true;
    assume {:print "$track_local(18,27,0):", $t0} $t0 == $t0;

    // trace_local[cap]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+1
    assume {:print "$track_local(18,27,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,13454,13499)"} true;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    assume {:print "$at(10,13454,13499)"} true;

    // assume Identical($t6, Or(Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    assume ($t6 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'u8'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    assume {:print "$at(10,13454,13499)"} true;
    assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,13509,13539)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30

    // assume Identical($t8, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    assume ($t8 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t8) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    if ($t8) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    assume {:print "$at(10,13509,13539)"} true;
    assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(10,13603,13633)"} true;

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30

    // $t10 := exists<Diem::BurnCapability<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:14+6
    $t10 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t9);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:13+1
    call $t11 := $Not($t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:39+16
    assume {:print "$at(10,13674,13690)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43
    // >> opaque call: $t8 := Errors::already_published($t7)

    // $t13 := opaque begin: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43
    assume $IsEqual'u64'($t13, 6);

    // $t13 := opaque end: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    assume {:print "$at(10,13549,13701)"} true;
    assume {:print "$track_local(18,27,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    assume {:print "$track_local(18,27,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    assume {:print "$at(10,13549,13701)"} true;
    assume {:print "$track_abort(18,27):", $t13} $t13 == $t13;

    // $t7 := move($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    $t7 := $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:17+10
    assume {:print "$at(10,13719,13729)"} true;
L0:

    // move_to<Diem::BurnCapability<#0>>($t1, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:9+7
    if ($ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_BurnCapability'#0'_$memory := $ResourceUpdate($1_Diem_BurnCapability'#0'_$memory, $t0, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(10,13711,13718)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:274:5+1
    assume {:print "$at(10,13740,13741)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:274:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:274:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:274:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Diem::publish_burn_capability [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+424
procedure {:timeLimit 40} $1_Diem_publish_burn_capability$verify(_$t0: int, _$t1: $1_Diem_BurnCapability'#0') returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#265: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_BurnCapability'#0'_$memory#266: $Memory $1_Diem_BurnCapability'#0';
    var $1_Roles_RoleId_$memory#267: $Memory $1_Roles_RoleId;
    var $1_Diem_MintCapability'#0'_$memory#268: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#269: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#270: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+424
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume {:print "$at(10,13317,13741)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+424
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+424
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+424
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+424
    assume $IsValid'$1_Diem_BurnCapability'#0''($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+424
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+424
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+424
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // @267 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+1
    assume {:print "$at(10,13317,13318)"} true;
    $1_Roles_RoleId_$memory#267 := $1_Roles_RoleId_$memory;

    // @266 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+1
    $1_Diem_BurnCapability'#0'_$memory#266 := $1_Diem_BurnCapability'#0'_$memory;

    // @265 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#265 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @268 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+1
    $1_Diem_MintCapability'#0'_$memory#268 := $1_Diem_MintCapability'#0'_$memory;

    // @270 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+1
    $1_Diem_Preburn'#0'_$memory#270 := $1_Diem_Preburn'#0'_$memory;

    // @269 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+1
    $1_Diem_PreburnQueue'#0'_$memory#269 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+1
    assume {:print "$track_local(18,27,0):", $t0} $t0 == $t0;

    // trace_local[cap]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:263:5+1
    assume {:print "$track_local(18,27,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,13454,13499)"} true;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    assume {:print "$at(10,13454,13499)"} true;

    // assume Identical($t6, Or(Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    assume ($t6 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'u8'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    assume {:print "$at(10,13454,13499)"} true;
    assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:267:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,13509,13539)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30

    // assume Identical($t8, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    assume ($t8 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t8) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    if ($t8) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    assume {:print "$at(10,13509,13539)"} true;
    assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:268:9+30

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(10,13603,13633)"} true;

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:47+30

    // $t10 := exists<Diem::BurnCapability<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:14+6
    $t10 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t9);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:13+1
    call $t11 := $Not($t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:39+16
    assume {:print "$at(10,13674,13690)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43
    // >> opaque call: $t8 := Errors::already_published($t7)

    // $t13 := opaque begin: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43
    assume $IsEqual'u64'($t13, 6);

    // $t13 := opaque end: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:13+43

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    assume {:print "$at(10,13549,13701)"} true;
    assume {:print "$track_local(18,27,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    assume {:print "$track_local(18,27,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    assume {:print "$at(10,13549,13701)"} true;
    assume {:print "$track_abort(18,27):", $t13} $t13 == $t13;

    // $t7 := move($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    $t7 := $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:17+10
    assume {:print "$at(10,13719,13729)"} true;
L0:

    // move_to<Diem::BurnCapability<#0>>($t1, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:9+7
    if ($ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_BurnCapability'#0'_$memory := $ResourceUpdate($1_Diem_BurnCapability'#0'_$memory, $t0, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(10,13711,13718)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:274:5+1
    assume {:print "$at(10,13740,13741)"} true;
L2:

    // assert Not(Not(Diem::spec_is_currency[@265]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:276:9+40
    assume {:print "$at(10,13785,13825)"} true;
    assert {:msg "assert_failed(10,13785,13825): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265);

    // assert Not(exists[@266]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:284:9+111
    assume {:print "$at(10,14221,14332)"} true;
    assert {:msg "assert_failed(10,14221,14332): function does not abort under this condition"}
      !$ResourceExists($1_Diem_BurnCapability'#0'_$memory#266, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@267]<Roles::RoleId>($t4))) at /home/ying/diem/language/diem-framework/modules/Roles.move:534:9+59
    assume {:print "$at(26,23933,23992)"} true;
    assert {:msg "assert_failed(26,23933,23992): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#267, $t4);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@267]<Roles::RoleId>($t4)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+97
    assume {:print "$at(26,24001,24098)"} true;
    assert {:msg "assert_failed(26,24001,24098): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#267, $t4)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:59:9+108
    assume {:print "$at(8,2239,2347)"} true;
    assert {:msg "assert_failed(8,2239,2347): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Implies(Diem::spec_is_currency[@265]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@265]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#265))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@268]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#268, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@268]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#268, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@265]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@265]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#265))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@266]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#266, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@265]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@265]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#265))));

    // assert Implies(Diem::spec_is_currency[@265]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@265]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#265))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@269]<Diem::PreburnQueue<#0>>(addr), exists[@270]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#269, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#270, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@269]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#269, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@265]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@265]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#265))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:274:5+1
    assume {:print "$at(10,13740,13741)"} true;
L3:

    // assert Or(Or(Or(Or(Not(Diem::spec_is_currency[@265]<#0>()), exists[@266]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Not(exists[@267]<Roles::RoleId>($t4))), Neq<u64>(select Roles::RoleId.role_id(global[@267]<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Diem.move:275:5+136
    assume {:print "$at(10,13746,13882)"} true;
    assert {:msg "assert_failed(10,13746,13882): abort not covered by any of the `aborts_if` clauses"}
      ((((!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) || $ResourceExists($1_Diem_BurnCapability'#0'_$memory#266, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#267, $t4)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#267, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Not(Diem::spec_is_currency[@265]<#0>()), And(exists[@266]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)), Eq(6, $t7))), And(Not(exists[@267]<Roles::RoleId>($t4)), Eq(5, $t7))), And(Neq<u64>(select Roles::RoleId.role_id(global[@267]<Roles::RoleId>($t4)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/Diem.move:275:5+136
    assert {:msg "assert_failed(10,13746,13882): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) || ($ResourceExists($1_Diem_BurnCapability'#0'_$memory#266, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(6, $t7))) || (!$ResourceExists($1_Roles_RoleId_$memory#267, $t4) && $IsEqual'u8'(5, $t7))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#267, $t4)), 1) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t7)));

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:275:5+136
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Diem::publish_preburn_queue [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:566:5+592
procedure {:timeLimit 40} $1_Diem_publish_preburn_queue$verify(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t24: $1_Diem_PreburnQueue'#0';
    var $t0: int;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_PreburnQueue'#0'_$memory#236: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#237: $Memory $1_Diem_Preburn'#0';
    var $1_Roles_RoleId_$memory#238: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#239: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#240: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#241: $Memory $1_Diem_BurnCapability'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:566:5+592
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume {:print "$at(10,26709,27301)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:566:5+592
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:566:5+592
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:566:5+592
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:566:5+592
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:566:5+592
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:566:5+592
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:566:5+592
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:586:9+52
    assume {:print "$at(10,27366,27418)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:603:9+52
    assume {:print "$at(10,28236,28288)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume CanModify<Diem::PreburnQueue<#0>>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:587:9+54
    assume {:print "$at(10,27427,27481)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t6];

    // @238 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:587:9+54
    $1_Roles_RoleId_$memory#238 := $1_Roles_RoleId_$memory;

    // @241 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:587:9+54
    $1_Diem_BurnCapability'#0'_$memory#241 := $1_Diem_BurnCapability'#0'_$memory;

    // @239 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:587:9+54
    $1_Diem_CurrencyInfo'#0'_$memory#239 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @240 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:587:9+54
    $1_Diem_MintCapability'#0'_$memory#240 := $1_Diem_MintCapability'#0'_$memory;

    // @237 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:587:9+54
    $1_Diem_Preburn'#0'_$memory#237 := $1_Diem_Preburn'#0'_$memory;

    // @236 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:587:9+54
    $1_Diem_PreburnQueue'#0'_$memory#236 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:566:5+1
    assume {:print "$at(10,26709,26710)"} true;
    assume {:print "$track_local(18,28,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:569:28+27
    // >> opaque call: $t6 := Signer::address_of($t0)
    assume {:print "$at(10,26813,26840)"} true;

    // $t10 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:569:28+27

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:569:28+27
    assume $IsValid'address'($t10);

    // assume Eq<address>($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:569:28+27
    assume $IsEqual'address'($t10, $1_Signer_spec_address_of($t0));

    // $t10 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:569:28+27

    // trace_local[account_addr]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:569:13+12
    assume {:print "$track_local(18,28,1):", $t10} $t10 == $t10;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:570:9+40
    // >> opaque call: Roles::assert_designated_dealer($t0)
    assume {:print "$at(10,26850,26890)"} true;

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:570:9+40
    assume {:print "$at(10,26850,26890)"} true;

    // assume Identical($t12, Or(Not(exists<Roles::RoleId>($t11)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:570:9+40
    assume ($t12 == (!$ResourceExists($1_Roles_RoleId_$memory, $t11) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 2)));

    // if ($t12) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:570:9+40
    if ($t12) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:570:9+40
L7:

    // assume Or(And(Not(exists<Roles::RoleId>($t11)), Eq(5, $t13)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 2), Eq(3, $t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:570:9+40
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t11) && $IsEqual'u8'(5, $t13)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 2) && $IsEqual'u8'(3, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:570:9+40
    assume {:print "$at(10,26850,26890)"} true;
    assume {:print "$track_abort(18,28):", $t13} $t13 == $t13;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:570:9+40
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:570:9+40
L6:

    // opaque end: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:570:9+40

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:571:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,26900,26930)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:571:9+30

    // assume Identical($t14, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:571:9+30
    assume ($t14 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t14) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:571:9+30
    if ($t14) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:571:9+30
L9:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:571:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:571:9+30
    assume {:print "$at(10,26900,26930)"} true;
    assume {:print "$track_abort(18,28):", $t13} $t13 == $t13;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:571:9+30
    goto L5;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:571:9+30
L8:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:571:9+30

    // $t15 := exists<Diem::Preburn<#0>>($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:573:14+6
    assume {:print "$at(10,26961,26967)"} true;
    $t15 := $ResourceExists($1_Diem_Preburn'#0'_$memory, $t10);

    // $t16 := !($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:573:13+1
    call $t16 := $Not($t15);

    // $t17 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:574:35+8
    assume {:print "$at(10,27036,27044)"} true;
    $t17 := 2;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:574:13+31
    // >> opaque call: $t10 := Errors::invalid_state($t9)

    // $t18 := opaque begin: Errors::invalid_state($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:574:13+31

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:574:13+31
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:574:13+31
    assume $IsEqual'u64'($t18, 1);

    // $t18 := opaque end: Errors::invalid_state($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:574:13+31

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+115
    assume {:print "$at(10,26940,27055)"} true;
    assume {:print "$track_local(18,28,3):", $t18} $t18 == $t18;

    // trace_local[tmp#$2]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+115
    assume {:print "$track_local(18,28,2):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+115
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+115
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+115

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+115
    assume {:print "$at(10,26940,27055)"} true;
    assume {:print "$track_abort(18,28):", $t18} $t18 == $t18;

    // $t13 := move($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+115
    $t13 := $t18;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+115
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:577:45+12
    assume {:print "$at(10,27117,27129)"} true;
L0:

    // $t19 := exists<Diem::PreburnQueue<#0>>($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:577:14+6
    $t19 := $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t10);

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:577:13+1
    call $t20 := $Not($t19);

    // $t21 := 11 at /home/ying/diem/language/diem-framework/modules/Diem.move:578:39+14
    assume {:print "$at(10,27170,27184)"} true;
    $t21 := 11;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:578:13+41
    // >> opaque call: $t14 := Errors::already_published($t13)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:578:13+41

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:578:13+41
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:578:13+41
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:578:13+41

    // trace_local[tmp#$5]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:576:9+130
    assume {:print "$at(10,27065,27195)"} true;
    assume {:print "$track_local(18,28,5):", $t22} $t22 == $t22;

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:576:9+130
    assume {:print "$track_local(18,28,4):", $t20} $t20 == $t20;

    // if ($t20) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:576:9+130
    if ($t20) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:576:9+130
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:576:9+130

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:576:9+130
    assume {:print "$at(10,27065,27195)"} true;
    assume {:print "$track_abort(18,28):", $t22} $t22 == $t22;

    // $t13 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:576:9+130
    $t13 := $t22;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:576:9+130
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:580:17+7
    assume {:print "$at(10,27213,27220)"} true;
L2:

    // $t23 := Vector::empty<Diem::PreburnWithMetadata<#0>>() on_abort goto L5 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:581:23+15
    assume {:print "$at(10,27269,27284)"} true;
    call $t23 := $1_Vector_empty'$1_Diem_PreburnWithMetadata'#0''();
    if ($abort_flag) {
        assume {:print "$at(10,27269,27284)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(18,28):", $t13} $t13 == $t13;
        goto L5;
    }

    // $t24 := pack Diem::PreburnQueue<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:580:26+72
    assume {:print "$at(10,27222,27294)"} true;
    $t24 := $1_Diem_PreburnQueue'#0'($t23);

    // assert Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t24)), 256) at /home/ying/diem/language/diem-framework/modules/Diem.move:199:9+52
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:199:9+52
    assume {:print "$at(10,10265,10317)"} true;
    assert {:msg "assert_failed(10,10265,10317): data invariant does not hold"}
      (LenVec($preburns#$1_Diem_PreburnQueue'#0'($t24)) <= 256);

    // assert forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t24))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($t24), i)))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:203:9+78
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:203:9+78
    assume {:print "$at(10,10493,10571)"} true;
    assert {:msg "assert_failed(10,10493,10571): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($t24))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($t24), i)))) > 0)))));

    // assert CanModify<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:580:9+7
    assume {:print "$at(10,27205,27212)"} true;
    assert {:msg "assert_failed(10,27205,27212): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t0];

    // move_to<Diem::PreburnQueue<#0>>($t24, $t0) on_abort goto L5 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:580:9+7
    if ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $t24);
    }
    if ($abort_flag) {
        assume {:print "$at(10,27205,27212)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(18,28):", $t13} $t13 == $t13;
        goto L5;
    }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:583:5+1
    assume {:print "$at(10,27300,27301)"} true;
L4:

    // assert Not(exists[@236]<Diem::PreburnQueue<#0>>($t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:589:9+86
    assume {:print "$at(10,27540,27626)"} true;
    assert {:msg "assert_failed(10,27540,27626): function does not abort under this condition"}
      !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#236, $t6);

    // assert Not(exists[@237]<Diem::Preburn<#0>>($t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:592:9+77
    assume {:print "$at(10,27770,27847)"} true;
    assert {:msg "assert_failed(10,27770,27847): function does not abort under this condition"}
      !$ResourceExists($1_Diem_Preburn'#0'_$memory#237, $t6);

    // assert Not(Not(exists[@238]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+59
    assume {:print "$at(26,24772,24831)"} true;
    assert {:msg "assert_failed(26,24772,24831): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#238, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@238]<Roles::RoleId>($t7)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+95
    assume {:print "$at(26,24840,24935)"} true;
    assert {:msg "assert_failed(26,24840,24935): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#238, $t7)), 2);

    // assert Not(Not(Diem::spec_is_currency[@239]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239);

    // assert Not(Not(exists[@238]<Roles::RoleId>($t9))) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+59
    assume {:print "$at(26,24772,24831)"} true;
    assert {:msg "assert_failed(26,24772,24831): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#238, $t9);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@238]<Roles::RoleId>($t9)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+95
    assume {:print "$at(26,24840,24935)"} true;
    assert {:msg "assert_failed(26,24840,24935): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#238, $t9)), 2);

    // assert exists<Diem::PreburnQueue<#0>>($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:605:9+53
    assume {:print "$at(10,28368,28421)"} true;
    assert {:msg "assert_failed(10,28368,28421): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t8);

    // assert Not(exists<Diem::Preburn<#0>>($t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:607:9+49
    assume {:print "$at(10,28514,28563)"} true;
    assert {:msg "assert_failed(10,28514,28563): post-condition does not hold"}
      !$ResourceExists($1_Diem_Preburn'#0'_$memory, $t8);

    // assert Eq<u64>(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t8))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:609:9+83
    assume {:print "$at(10,28614,28697)"} true;
    assert {:msg "assert_failed(10,28614,28697): post-condition does not hold"}
      $IsEqual'u64'($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t8))), 0);

    // assert Implies(Diem::spec_is_currency[@239]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@239]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#239))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@240]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#240, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@240]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#240, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@239]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@239]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#239))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@241]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#241, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@241]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#241, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@239]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@239]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#239))));

    // assert Implies(Diem::spec_is_currency[@239]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@239]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#239))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@236]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#236, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@239]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@239]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#239))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:583:5+1
    assume {:print "$at(10,27300,27301)"} true;
L5:

    // assert Or(Or(Or(Or(Or(Or(exists[@236]<Diem::PreburnQueue<#0>>($t6), exists[@237]<Diem::Preburn<#0>>($t6)), Not(exists[@238]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@238]<Roles::RoleId>($t7)), 2)), Not(Diem::spec_is_currency[@239]<#0>())), Not(exists[@238]<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global[@238]<Roles::RoleId>($t9)), 2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:584:5+656
    assume {:print "$at(10,27306,27962)"} true;
    assert {:msg "assert_failed(10,27306,27962): abort not covered by any of the `aborts_if` clauses"}
      (((((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#236, $t6) || $ResourceExists($1_Diem_Preburn'#0'_$memory#237, $t6)) || !$ResourceExists($1_Roles_RoleId_$memory#238, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#238, $t7)), 2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239)) || !$ResourceExists($1_Roles_RoleId_$memory#238, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#238, $t9)), 2));

    // assert Or(Or(Or(Or(Or(Or(And(exists[@236]<Diem::PreburnQueue<#0>>($t6), Eq(6, $t13)), And(exists[@237]<Diem::Preburn<#0>>($t6), Eq(1, $t13))), And(Not(exists[@238]<Roles::RoleId>($t7)), Eq(5, $t13))), And(Neq<u64>(select Roles::RoleId.role_id(global[@238]<Roles::RoleId>($t7)), 2), Eq(3, $t13))), And(Not(Diem::spec_is_currency[@239]<#0>()), Eq(5, $t13))), And(Not(exists[@238]<Roles::RoleId>($t9)), Eq(5, $t13))), And(Neq<u64>(select Roles::RoleId.role_id(global[@238]<Roles::RoleId>($t9)), 2), Eq(3, $t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:584:5+656
    assert {:msg "assert_failed(10,27306,27962): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#236, $t6) && $IsEqual'u8'(6, $t13)) || ($ResourceExists($1_Diem_Preburn'#0'_$memory#237, $t6) && $IsEqual'u8'(1, $t13))) || (!$ResourceExists($1_Roles_RoleId_$memory#238, $t7) && $IsEqual'u8'(5, $t13))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#238, $t7)), 2) && $IsEqual'u8'(3, $t13))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239) && $IsEqual'u8'(5, $t13))) || (!$ResourceExists($1_Roles_RoleId_$memory#238, $t9) && $IsEqual'u8'(5, $t13))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#238, $t9)), 2) && $IsEqual'u8'(3, $t13)));

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:584:5+656
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun Diem::publish_preburn_queue_to_account [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:616:5+407
procedure {:timeLimit 40} $1_Diem_publish_preburn_queue_to_account$verify(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: bool;
    var $t0: int;
    var $t1: int;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#333: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#334: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#335: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#336: $Memory $1_Diem_Preburn'#0';
    var $1_Diem_MintCapability'#0'_$memory#337: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#338: $Memory $1_Diem_BurnCapability'#0';
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:616:5+407
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume {:print "$at(10,29009,29416)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:616:5+407
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:616:5+407
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:616:5+407
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:616:5+407
    assume $IsValid'address'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:616:5+407
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:616:5+407
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:616:5+407
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:616:5+407
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:627:9+52
    assume {:print "$at(10,29492,29544)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:603:9+52
    assume {:print "$at(10,28236,28288)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume CanModify<Diem::PreburnQueue<#0>>($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:628:9+54
    assume {:print "$at(10,29553,29607)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t4];

    // @333 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:628:9+54
    $1_Roles_RoleId_$memory#333 := $1_Roles_RoleId_$memory;

    // @338 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:628:9+54
    $1_Diem_BurnCapability'#0'_$memory#338 := $1_Diem_BurnCapability'#0'_$memory;

    // @334 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:628:9+54
    $1_Diem_CurrencyInfo'#0'_$memory#334 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @337 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:628:9+54
    $1_Diem_MintCapability'#0'_$memory#337 := $1_Diem_MintCapability'#0'_$memory;

    // @336 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:628:9+54
    $1_Diem_Preburn'#0'_$memory#336 := $1_Diem_Preburn'#0'_$memory;

    // @335 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:628:9+54
    $1_Diem_PreburnQueue'#0'_$memory#335 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:616:5+1
    assume {:print "$at(10,29009,29010)"} true;
    assume {:print "$track_local(18,29,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:616:5+1
    assume {:print "$track_local(18,29,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:620:9+40
    // >> opaque call: Roles::assert_designated_dealer($t0)
    assume {:print "$at(10,29163,29203)"} true;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:620:9+40
    assume {:print "$at(10,29163,29203)"} true;

    // assume Identical($t11, Or(Not(exists<Roles::RoleId>($t10)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:620:9+40
    assume ($t11 == (!$ResourceExists($1_Roles_RoleId_$memory, $t10) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 2)));

    // if ($t11) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:620:9+40
    if ($t11) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:620:9+40
L5:

    // assume Or(And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t12)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 2), Eq(3, $t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:620:9+40
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'u8'(5, $t12)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 2) && $IsEqual'u8'(3, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:620:9+40
    assume {:print "$at(10,29163,29203)"} true;
    assume {:print "$track_abort(18,29):", $t12} $t12 == $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:620:9+40
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:620:9+40
L4:

    // opaque end: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:620:9+40

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:621:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(10,29213,29258)"} true;

    // assume Identical($t13, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:621:9+45
    assume {:print "$at(10,29213,29258)"} true;

    // assume Identical($t14, Or(Or(Not(exists<Roles::RoleId>($t13)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 1)), Neq<address>(Signer::spec_address_of($t1), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:621:9+45
    assume ($t14 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t13) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453)));

    // if ($t14) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:621:9+45
    if ($t14) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:621:9+45
L7:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t13)), Eq(5, $t12)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 1), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of($t1), b1e55ed), Eq(2, $t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:621:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t13) && $IsEqual'u8'(5, $t12)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 1) && $IsEqual'u8'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453) && $IsEqual'u8'(2, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:621:9+45
    assume {:print "$at(10,29213,29258)"} true;
    assume {:print "$track_abort(18,29):", $t12} $t12 == $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:621:9+45
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:621:9+45
L6:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:621:9+45

    // $t15 := Diem::is_synthetic_currency<#0>() on_abort goto L3 with $t12 at /home/ying/diem/language/diem-framework/modules/Diem.move:622:17+33
    assume {:print "$at(10,29276,29309)"} true;
    call $t15 := $1_Diem_is_synthetic_currency'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,29276,29309)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(18,29):", $t12} $t12 == $t12;
        goto L3;
    }

    // $t16 := !($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:16+1
    call $t16 := $Not($t15);

    // $t17 := 6 at /home/ying/diem/language/diem-framework/modules/Diem.move:622:77+22
    $t17 := 6;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:622:52+48
    // >> opaque call: $t7 := Errors::invalid_argument($t6)

    // $t18 := opaque begin: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:52+48

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:52+48
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:52+48
    assume $IsEqual'u64'($t18, 7);

    // $t18 := opaque end: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:52+48

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+92
    assume {:print "$track_local(18,29,3):", $t18} $t18 == $t18;

    // trace_local[tmp#$2]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+92
    assume {:print "$track_local(18,29,2):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+92
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+92
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+92

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+92
    assume {:print "$at(10,29268,29360)"} true;
    assume {:print "$track_abort(18,29):", $t18} $t18 == $t18;

    // $t12 := move($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+92
    $t12 := $t18;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+92
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:623:41+7
    assume {:print "$at(10,29402,29409)"} true;
L0:

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
    // >> opaque call: Diem::publish_preburn_queue<#0>($t0)

    // assume Identical($t19, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:586:9+52
    assume {:print "$at(10,27366,27418)"} true;
    assume ($t19 == $1_Signer_spec_address_of($t0));

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // assume Identical($t21, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:603:9+52
    assume {:print "$at(10,28236,28288)"} true;
    assume ($t21 == $1_Signer_spec_address_of($t0));

    // assume Identical($t22, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t22 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Diem::PreburnQueue<#0>>($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
    assume {:print "$at(10,29370,29410)"} true;
    assert {:msg "assert_failed(10,29370,29410): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t19];

    // opaque begin: Diem::publish_preburn_queue<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40

    // assume Identical($t23, Or(Or(Or(Or(exists<Diem::PreburnQueue<#0>>($t19), exists<Diem::Preburn<#0>>($t19)), Not(exists<Roles::RoleId>($t20))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 2)), Not(Diem::spec_is_currency<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
    assume ($t23 == (((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t19) || $ResourceExists($1_Diem_Preburn'#0'_$memory, $t19)) || !$ResourceExists($1_Roles_RoleId_$memory, $t20)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // if ($t23) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
    if ($t23) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
L9:

    // assume Or(Or(Or(Or(And(exists<Diem::PreburnQueue<#0>>($t19), Eq(6, $t12)), And(exists<Diem::Preburn<#0>>($t19), Eq(1, $t12))), And(Not(exists<Roles::RoleId>($t20)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 2), Eq(3, $t12))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
    assume ((((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t19) && $IsEqual'u8'(6, $t12)) || ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t19) && $IsEqual'u8'(1, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t20) && $IsEqual'u8'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 2) && $IsEqual'u8'(3, $t12))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
    assume {:print "$at(10,29370,29410)"} true;
    assume {:print "$track_abort(18,29):", $t12} $t12 == $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
L8:

    // modifies global<Diem::PreburnQueue<#0>>($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t19, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t19);
    }

    // assume exists<Diem::PreburnQueue<#0>>($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t21);

    // assume Not(exists<Diem::Preburn<#0>>($t21)) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
    assume !$ResourceExists($1_Diem_Preburn'#0'_$memory, $t21);

    // assume Eq<u64>(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t21))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40
    assume $IsEqual'u64'($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t21))), 0);

    // opaque end: Diem::publish_preburn_queue<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+40

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:624:5+1
    assume {:print "$at(10,29415,29416)"} true;
L2:

    // assert Not(Not(exists[@333]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+59
    assume {:print "$at(26,24772,24831)"} true;
    assert {:msg "assert_failed(26,24772,24831): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#333, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t5)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+95
    assume {:print "$at(26,24840,24935)"} true;
    assert {:msg "assert_failed(26,24840,24935): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t5)), 2);

    // assert Not(Not(exists[@333]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+59
    assume {:print "$at(26,24772,24831)"} true;
    assert {:msg "assert_failed(26,24772,24831): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#333, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t6)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+95
    assume {:print "$at(26,24840,24935)"} true;
    assert {:msg "assert_failed(26,24840,24935): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t6)), 2);

    // assert Not(Not(Diem::spec_is_currency[@334]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334);

    // assert Not(Not(exists[@333]<Roles::RoleId>($t8))) at /home/ying/diem/language/diem-framework/modules/Roles.move:534:9+59
    assume {:print "$at(26,23933,23992)"} true;
    assert {:msg "assert_failed(26,23933,23992): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#333, $t8);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t8)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+97
    assume {:print "$at(26,24001,24098)"} true;
    assert {:msg "assert_failed(26,24001,24098): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t8)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t1), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:59:9+108
    assume {:print "$at(8,2239,2347)"} true;
    assert {:msg "assert_failed(8,2239,2347): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453);

    // assert Not(Not(Diem::spec_is_currency[@334]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334);

    // assert Not(Diem::$is_synthetic_currency[@334]<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:639:9+74
    assume {:print "$at(10,30210,30284)"} true;
    assert {:msg "assert_failed(10,30210,30284): function does not abort under this condition"}
      !$1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334);

    // assert Not(exists[@335]<Diem::PreburnQueue<#0>>($t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:640:9+86
    assume {:print "$at(10,30293,30379)"} true;
    assert {:msg "assert_failed(10,30293,30379): function does not abort under this condition"}
      !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#335, $t4);

    // assert Not(exists[@336]<Diem::Preburn<#0>>($t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:641:9+77
    assume {:print "$at(10,30388,30465)"} true;
    assert {:msg "assert_failed(10,30388,30465): function does not abort under this condition"}
      !$ResourceExists($1_Diem_Preburn'#0'_$memory#336, $t4);

    // assert Not(Not(exists[@333]<Roles::RoleId>($t9))) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+59
    assume {:print "$at(26,24772,24831)"} true;
    assert {:msg "assert_failed(26,24772,24831): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#333, $t9);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t9)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+95
    assume {:print "$at(26,24840,24935)"} true;
    assert {:msg "assert_failed(26,24840,24935): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t9)), 2);

    // assert exists<Diem::PreburnQueue<#0>>($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:605:9+53
    assume {:print "$at(10,28368,28421)"} true;
    assert {:msg "assert_failed(10,28368,28421): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t7);

    // assert Not(exists<Diem::Preburn<#0>>($t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:607:9+49
    assume {:print "$at(10,28514,28563)"} true;
    assert {:msg "assert_failed(10,28514,28563): post-condition does not hold"}
      !$ResourceExists($1_Diem_Preburn'#0'_$memory, $t7);

    // assert Eq<u64>(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t7))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:609:9+83
    assume {:print "$at(10,28614,28697)"} true;
    assert {:msg "assert_failed(10,28614,28697): post-condition does not hold"}
      $IsEqual'u64'($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t7))), 0);

    // assert exists<Diem::PreburnQueue<#0>>($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:635:9+53
    assume {:print "$at(10,30026,30079)"} true;
    assert {:msg "assert_failed(10,30026,30079): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t4);

    // assert Implies(Diem::spec_is_currency[@334]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@334]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#334))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@337]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#337, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@337]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#337, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@334]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@334]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#334))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@338]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#338, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@338]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#338, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@334]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@334]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#334))));

    // assert Implies(Diem::spec_is_currency[@334]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@334]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#334))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@335]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#335, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@334]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@334]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#334))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:624:5+1
    assume {:print "$at(10,29415,29416)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@333]<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t5)), 2)), Not(exists[@333]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t6)), 2)), Not(Diem::spec_is_currency[@334]<#0>())), Not(exists[@333]<Roles::RoleId>($t8))), Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t8)), 1)), Neq<address>(Signer::spec_address_of[]($t1), b1e55ed)), Not(Diem::spec_is_currency[@334]<#0>())), Diem::$is_synthetic_currency[@334]<#0>()), exists[@335]<Diem::PreburnQueue<#0>>($t4)), exists[@336]<Diem::Preburn<#0>>($t4)), Not(exists[@333]<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t9)), 2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:5+1051
    assume {:print "$at(10,29421,30472)"} true;
    assert {:msg "assert_failed(10,29421,30472): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((!$ResourceExists($1_Roles_RoleId_$memory#333, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t5)), 2)) || !$ResourceExists($1_Roles_RoleId_$memory#333, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t6)), 2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334)) || !$ResourceExists($1_Roles_RoleId_$memory#333, $t8)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t8)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334)) || $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334)) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#335, $t4)) || $ResourceExists($1_Diem_Preburn'#0'_$memory#336, $t4)) || !$ResourceExists($1_Roles_RoleId_$memory#333, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t9)), 2));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@333]<Roles::RoleId>($t5)), Eq(5, $t12)), And(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t5)), 2), Eq(3, $t12))), And(Not(exists[@333]<Roles::RoleId>($t6)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t6)), 2), Eq(3, $t12))), And(Not(Diem::spec_is_currency[@334]<#0>()), Eq(5, $t12))), And(Not(exists[@333]<Roles::RoleId>($t8)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t8)), 1), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of[]($t1), b1e55ed), Eq(2, $t12))), And(Not(Diem::spec_is_currency[@334]<#0>()), Eq(5, $t12))), And(Diem::$is_synthetic_currency[@334]<#0>(), Eq(7, $t12))), And(exists[@335]<Diem::PreburnQueue<#0>>($t4), Eq(6, $t12))), And(exists[@336]<Diem::Preburn<#0>>($t4), Eq(1, $t12))), And(Not(exists[@333]<Roles::RoleId>($t9)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t9)), 2), Eq(3, $t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:5+1051
    assert {:msg "assert_failed(10,29421,30472): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((!$ResourceExists($1_Roles_RoleId_$memory#333, $t5) && $IsEqual'u8'(5, $t12)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t5)), 2) && $IsEqual'u8'(3, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#333, $t6) && $IsEqual'u8'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t6)), 2) && $IsEqual'u8'(3, $t12))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) && $IsEqual'u8'(5, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#333, $t8) && $IsEqual'u8'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t8)), 1) && $IsEqual'u8'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453) && $IsEqual'u8'(2, $t12))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) && $IsEqual'u8'(5, $t12))) || ($1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) && $IsEqual'u8'(7, $t12))) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#335, $t4) && $IsEqual'u8'(6, $t12))) || ($ResourceExists($1_Diem_Preburn'#0'_$memory#336, $t4) && $IsEqual'u8'(1, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#333, $t9) && $IsEqual'u8'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t9)), 2) && $IsEqual'u8'(3, $t12)));

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:5+1051
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun Diem::register_SCS_currency<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
procedure {:inline 1} $1_Diem_register_SCS_currency'$1_XUS_XUS'(_$t0: int, _$t1: int, _$t2: $1_FixedPoint32_FixedPoint32, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ()
{
    // declare local variables
    var $t6: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t7: $1_Diem_MintCapability'$1_XUS_XUS';
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: int;
    var $t24: $1_DiemConfig_Configuration;
    var $t25: int;
    var $t26: $1_Diem_MintCapability'$1_XUS_XUS';
    var $t27: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t28: int;
    var $t29: bool;
    var $t30: bool;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: int;
    var $t1: int;
    var $t2: $1_FixedPoint32_FixedPoint32;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_MintCapability'$1_XUS_XUS'': $1_Diem_MintCapability'$1_XUS_XUS';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // assume Identical($t10, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t1));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t14, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t1));

    // assume Identical($t15, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume ($t15 == $1_Signer_spec_address_of($t1));

    // assume Identical($t16, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume ($t16 == $1_Signer_spec_address_of($t1));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$at(10,61837,61838)"} true;
    assume {:print "$track_local(18,30,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$track_local(18,30,1):", $t1} $t1 == $t1;

    // trace_local[to_xdx_exchange_rate]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$track_local(18,30,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$track_local(18,30,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$track_local(18,30,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$track_local(18,30,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(10,62100,62145)"} true;

    // assume Identical($t17, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    assume {:print "$at(10,62100,62145)"} true;

    // assume Identical($t18, Or(Or(Not(exists<Roles::RoleId>($t17)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1)), Neq<address>(Signer::spec_address_of($t1), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    assume ($t18 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t17) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453)));

    // if ($t18) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    if ($t18) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t17)), Eq(5, $t19)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of($t1), b1e55ed), Eq(2, $t19))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t17) && $IsEqual'u8'(5, $t19)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453) && $IsEqual'u8'(2, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    assume {:print "$at(10,62100,62145)"} true;
    assume {:print "$track_abort(18,30):", $t19} $t19 == $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,62155,62190)"} true;

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    assume {:print "$at(10,62155,62190)"} true;

    // assume Identical($t21, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t20))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    assume ($t21 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t20)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t21) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    if ($t21) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t19)), And(Not(exists<Roles::RoleId>($t20)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 0), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t19))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t19)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t20) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 0) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    assume {:print "$at(10,62155,62190)"} true;
    assume {:print "$track_abort(18,30):", $t19} $t19 == $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35

    // $t22 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1311:17+5
    assume {:print "$at(10,62350,62355)"} true;
    $t22 := false;
    assume $IsValid'bool'($t22);

    // assume Identical($t23, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t23 == $1_Signer_spec_address_of($t0));

    // assume Identical($t24, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t24 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t25, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t25 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // ($t26, $t27) := Diem::register_currency<#0>($t0, $t2, $t22, $t3, $t4, $t5) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:13+245
    assume {:print "$at(10,62239,62484)"} true;
    call $t26,$t27 := $1_Diem_register_currency'$1_XUS_XUS'($t0, $t2, $t22, $t3, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,62239,62484)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(18,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // trace_local[burn_cap]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:24+8
    assume {:print "$at(10,62215,62223)"} true;
    assume {:print "$track_local(18,30,6):", $t27} $t27 == $t27;

    // trace_local[mint_cap]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:14+8
    assume {:print "$track_local(18,30,7):", $t26} $t26 == $t26;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:47+30
    // >> opaque call: $t13 := Signer::address_of($t1)
    assume {:print "$at(10,62548,62578)"} true;

    // $t28 := opaque begin: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:47+30

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:47+30
    assume $IsValid'address'($t28);

    // assume Eq<address>($t28, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:47+30
    assume $IsEqual'address'($t28, $1_Signer_spec_address_of($t1));

    // $t28 := opaque end: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:47+30

    // $t29 := exists<Diem::MintCapability<#0>>($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:14+6
    $t29 := $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $t28);

    // $t30 := !($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:13+1
    call $t30 := $Not($t29);

    // $t31 := 9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:39+16
    assume {:print "$at(10,62619,62635)"} true;
    $t31 := 9;
    assume $IsValid'u64'($t31);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:13+43
    // >> opaque call: $t17 := Errors::already_published($t16)

    // $t32 := opaque begin: Errors::already_published($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:13+43

    // assume WellFormed($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:13+43
    assume $IsValid'u64'($t32);

    // assume Eq<u64>($t32, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:13+43
    assume $IsEqual'u64'($t32, 6);

    // $t32 := opaque end: Errors::already_published($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:13+43

    // trace_local[tmp#$9]($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
    assume {:print "$at(10,62494,62646)"} true;
    assume {:print "$track_local(18,30,9):", $t32} $t32 == $t32;

    // trace_local[tmp#$8]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
    assume {:print "$track_local(18,30,8):", $t30} $t30 == $t30;

    // if ($t30) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
    if ($t30) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152

    // trace_abort($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
    assume {:print "$at(10,62494,62646)"} true;
    assume {:print "$track_abort(18,30):", $t32} $t32 == $t32;

    // $t19 := move($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
    $t19 := $t32;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:17+10
    assume {:print "$at(10,62664,62674)"} true;
L0:

    // move_to<Diem::MintCapability<#0>>($t26, $t1) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:9+7
    if ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_MintCapability'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $t1, $t26);
    }
    if ($abort_flag) {
        assume {:print "$at(10,62656,62663)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(18,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // assume Identical($t33, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t1));

    // Diem::publish_burn_capability<#0>($t1, $t27) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1321:9+55
    assume {:print "$at(10,62695,62750)"} true;
    call $1_Diem_publish_burn_capability'$1_XUS_XUS'($t1, $t27);
    if ($abort_flag) {
        assume {:print "$at(10,62695,62750)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(18,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1322:5+1
    assume {:print "$at(10,62756,62757)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1322:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1322:5+1
L3:

    // abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1322:5+1
    $abort_code := $t19;
    $abort_flag := true;
    return;

}

// fun Diem::register_SCS_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
procedure {:timeLimit 40} $1_Diem_register_SCS_currency$verify(_$t0: int, _$t1: int, _$t2: $1_FixedPoint32_FixedPoint32, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ()
{
    // declare local variables
    var $t6: $1_Diem_BurnCapability'#0';
    var $t7: $1_Diem_MintCapability'#0';
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: int;
    var $t24: $1_DiemConfig_Configuration;
    var $t25: int;
    var $t26: $1_Diem_MintCapability'#0';
    var $t27: $1_Diem_BurnCapability'#0';
    var $t28: int;
    var $t29: bool;
    var $t30: bool;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: int;
    var $t1: int;
    var $t2: $1_FixedPoint32_FixedPoint32;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_MintCapability'#0'': $1_Diem_MintCapability'#0';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_MintCapability'#0'_$memory#478: $Memory $1_Diem_MintCapability'#0';
    var $1_Roles_RoleId_$memory#479: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#480: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#482: $Memory $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemConfig_DisableReconfiguration_$memory#484: $Memory $1_DiemConfig_DisableReconfiguration;
    var $1_Diem_BurnCapability'#0'_$memory#485: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#486: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#487: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:169:9+72
    assume {:print "$at(10,61837,62757)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:409:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume $IsValid'vec'u8''($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DisableReconfiguration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DisableReconfiguration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume Identical($t10, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t1));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t14, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t1));

    // assume Identical($t15, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume ($t15 == $1_Signer_spec_address_of($t1));

    // assume Identical($t16, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume ($t16 == $1_Signer_spec_address_of($t1));

    // @483 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$at(10,61837,61838)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @479 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    $1_Roles_RoleId_$memory#479 := $1_Roles_RoleId_$memory;

    // @484 := save_mem(DiemConfig::DisableReconfiguration) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    $1_DiemConfig_DisableReconfiguration_$memory#484 := $1_DiemConfig_DisableReconfiguration_$memory;

    // @481 := save_mem(DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481 := $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory;

    // @482 := save_mem(DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#482 := $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory;

    // @485 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    $1_Diem_BurnCapability'#0'_$memory#485 := $1_Diem_BurnCapability'#0'_$memory;

    // @480 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#480 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @478 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    $1_Diem_MintCapability'#0'_$memory#478 := $1_Diem_MintCapability'#0'_$memory;

    // @487 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    $1_Diem_Preburn'#0'_$memory#487 := $1_Diem_Preburn'#0'_$memory;

    // @486 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    $1_Diem_PreburnQueue'#0'_$memory#486 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$track_local(18,30,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$track_local(18,30,1):", $t1} $t1 == $t1;

    // trace_local[to_xdx_exchange_rate]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$track_local(18,30,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$track_local(18,30,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$track_local(18,30,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1297:5+1
    assume {:print "$track_local(18,30,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(10,62100,62145)"} true;

    // assume Identical($t17, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    assume {:print "$at(10,62100,62145)"} true;

    // assume Identical($t18, Or(Or(Not(exists<Roles::RoleId>($t17)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1)), Neq<address>(Signer::spec_address_of($t1), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    assume ($t18 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t17) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453)));

    // if ($t18) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    if ($t18) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t17)), Eq(5, $t19)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of($t1), b1e55ed), Eq(2, $t19))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t17) && $IsEqual'u8'(5, $t19)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453) && $IsEqual'u8'(2, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    assume {:print "$at(10,62100,62145)"} true;
    assume {:print "$track_abort(18,30):", $t19} $t19 == $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1305:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,62155,62190)"} true;

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    assume {:print "$at(10,62155,62190)"} true;

    // assume Identical($t21, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t20))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    assume ($t21 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t20)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t21) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    if ($t21) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t19)), And(Not(exists<Roles::RoleId>($t20)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 0), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t19))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t19)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t20) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 0) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    assume {:print "$at(10,62155,62190)"} true;
    assume {:print "$track_abort(18,30):", $t19} $t19 == $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1306:9+35

    // $t22 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1311:17+5
    assume {:print "$at(10,62350,62355)"} true;
    $t22 := false;
    assume $IsValid'bool'($t22);

    // assume Identical($t23, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t23 == $1_Signer_spec_address_of($t0));

    // assume Identical($t24, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t24 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t25, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t25 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // ($t26, $t27) := Diem::register_currency<#0>($t0, $t2, $t22, $t3, $t4, $t5) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:13+245
    assume {:print "$at(10,62239,62484)"} true;
    call $t26,$t27 := $1_Diem_register_currency'#0'($t0, $t2, $t22, $t3, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,62239,62484)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(18,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // trace_local[burn_cap]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:24+8
    assume {:print "$at(10,62215,62223)"} true;
    assume {:print "$track_local(18,30,6):", $t27} $t27 == $t27;

    // trace_local[mint_cap]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:14+8
    assume {:print "$track_local(18,30,7):", $t26} $t26 == $t26;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:47+30
    // >> opaque call: $t13 := Signer::address_of($t1)
    assume {:print "$at(10,62548,62578)"} true;

    // $t28 := opaque begin: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:47+30

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:47+30
    assume $IsValid'address'($t28);

    // assume Eq<address>($t28, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:47+30
    assume $IsEqual'address'($t28, $1_Signer_spec_address_of($t1));

    // $t28 := opaque end: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:47+30

    // $t29 := exists<Diem::MintCapability<#0>>($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:14+6
    $t29 := $ResourceExists($1_Diem_MintCapability'#0'_$memory, $t28);

    // $t30 := !($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1317:13+1
    call $t30 := $Not($t29);

    // $t31 := 9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:39+16
    assume {:print "$at(10,62619,62635)"} true;
    $t31 := 9;
    assume $IsValid'u64'($t31);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:13+43
    // >> opaque call: $t17 := Errors::already_published($t16)

    // $t32 := opaque begin: Errors::already_published($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:13+43

    // assume WellFormed($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:13+43
    assume $IsValid'u64'($t32);

    // assume Eq<u64>($t32, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:13+43
    assume $IsEqual'u64'($t32, 6);

    // $t32 := opaque end: Errors::already_published($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:13+43

    // trace_local[tmp#$9]($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
    assume {:print "$at(10,62494,62646)"} true;
    assume {:print "$track_local(18,30,9):", $t32} $t32 == $t32;

    // trace_local[tmp#$8]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
    assume {:print "$track_local(18,30,8):", $t30} $t30 == $t30;

    // if ($t30) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
    if ($t30) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152

    // trace_abort($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
    assume {:print "$at(10,62494,62646)"} true;
    assume {:print "$track_abort(18,30):", $t32} $t32 == $t32;

    // $t19 := move($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
    $t19 := $t32;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1316:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:17+10
    assume {:print "$at(10,62664,62674)"} true;
L0:

    // move_to<Diem::MintCapability<#0>>($t26, $t1) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:9+7
    if ($ResourceExists($1_Diem_MintCapability'#0'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_MintCapability'#0'_$memory := $ResourceUpdate($1_Diem_MintCapability'#0'_$memory, $t1, $t26);
    }
    if ($abort_flag) {
        assume {:print "$at(10,62656,62663)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(18,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // assume Identical($t33, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t1));

    // Diem::publish_burn_capability<#0>($t1, $t27) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1321:9+55
    assume {:print "$at(10,62695,62750)"} true;
    call $1_Diem_publish_burn_capability'#0'($t1, $t27);
    if ($abort_flag) {
        assume {:print "$at(10,62695,62750)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(18,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1322:5+1
    assume {:print "$at(10,62756,62757)"} true;
L2:

    // assert Not(exists[@478]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1339:9+111
    assume {:print "$at(10,63436,63547)"} true;
    assert {:msg "assert_failed(10,63436,63547): function does not abort under this condition"}
      !$ResourceExists($1_Diem_MintCapability'#0'_$memory#478, $1_Signer_spec_address_of($t1));

    // assert Not(Not(exists[@479]<Roles::RoleId>($t10))) at /home/ying/diem/language/diem-framework/modules/Roles.move:534:9+59
    assume {:print "$at(26,23933,23992)"} true;
    assert {:msg "assert_failed(26,23933,23992): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#479, $t10);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t10)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+97
    assume {:print "$at(26,24001,24098)"} true;
    assert {:msg "assert_failed(26,24001,24098): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t10)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t1), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:59:9+108
    assume {:print "$at(8,2239,2347)"} true;
    assert {:msg "assert_failed(8,2239,2347): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453);

    // assert Not(Or(Eq<u64>($t3, 0), Gt($t3, 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1279:9+99
    assume {:print "$at(10,60891,60990)"} true;
    assert {:msg "assert_failed(10,60891,60990): function does not abort under this condition"}
      !($IsEqual'u64'($t3, 0) || ($t3 > 10000000000));

    // assert Not(exists[@480]<Diem::CurrencyInfo<#0>>(Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1281:9+121
    assume {:print "$at(10,61076,61197)"} true;
    assert {:msg "assert_failed(10,61076,61197): function does not abort under this condition"}
      !$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory#480, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@479]<Roles::RoleId>($t11))) at /home/ying/diem/language/diem-framework/modules/Roles.move:526:9+59
    assume {:print "$at(26,23574,23633)"} true;
    assert {:msg "assert_failed(26,23574,23633): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#479, $t11);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t11)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+87
    assume {:print "$at(26,23642,23729)"} true;
    assert {:msg "assert_failed(26,23642,23729): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t11)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:41:9+86
    assume {:print "$at(8,1561,1647)"} true;
    assert {:msg "assert_failed(8,1561,1647): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:90:9+90
    assume {:print "$at(8,3390,3480)"} true;
    assert {:msg "assert_failed(8,3390,3480): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // assert Not(ContainsVec<vector<u8>>(select RegisteredCurrencies::RegisteredCurrencies.currency_codes(DiemConfig::$get[@481]<RegisteredCurrencies::RegisteredCurrencies>()), $t5)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:70:9+154
    assume {:print "$at(25,2647,2801)"} true;
    assert {:msg "assert_failed(25,2647,2801): function does not abort under this condition"}
      !$ContainsVec'vec'u8''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481)), $t5);

    // assert Not(Not(exists[@482]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:137:9+129
    assume {:print "$at(13,5441,5570)"} true;
    assert {:msg "assert_failed(13,5441,5570): function does not abort under this condition"}
      !!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#482, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@481]<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:101:9+76
    assume {:print "$at(13,3859,3935)"} true;
    assert {:msg "assert_failed(13,3859,3935): function does not abort under this condition"}
      !!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481, 173345816);

    // assert Not(And(And(And(And(DiemTimestamp::$is_operating[@483](), DiemConfig::$reconfiguration_enabled[@484]()), Gt(DiemTimestamp::spec_now_microseconds[@483](), 0)), Lt(select DiemConfig::Configuration.epoch($t12), 18446744073709551615)), Lt($t13, select DiemConfig::Configuration.last_reconfiguration_time($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:359:9+283
    assume {:print "$at(13,15496,15779)"} true;
    assert {:msg "assert_failed(13,15496,15779): function does not abort under this condition"}
      !(((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory#484)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483) > 0)) && ($epoch#$1_DiemConfig_Configuration($t12) < 18446744073709551615)) && ($t13 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t12)));

    // assert Not(exists[@485]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:284:9+111
    assume {:print "$at(10,14221,14332)"} true;
    assert {:msg "assert_failed(10,14221,14332): function does not abort under this condition"}
      !$ResourceExists($1_Diem_BurnCapability'#0'_$memory#485, $1_Signer_spec_address_of($t1));

    // assert Not(Not(exists[@479]<Roles::RoleId>($t14))) at /home/ying/diem/language/diem-framework/modules/Roles.move:534:9+59
    assume {:print "$at(26,23933,23992)"} true;
    assert {:msg "assert_failed(26,23933,23992): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#479, $t14);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t14)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+97
    assume {:print "$at(26,24001,24098)"} true;
    assert {:msg "assert_failed(26,24001,24098): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t14)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t1), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:59:9+108
    assume {:print "$at(8,2239,2347)"} true;
    assert {:msg "assert_failed(8,2239,2347): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453);

    // assert Not(Not(exists[@479]<Roles::RoleId>($t15))) at /home/ying/diem/language/diem-framework/modules/Roles.move:534:9+59
    assume {:print "$at(26,23933,23992)"} true;
    assert {:msg "assert_failed(26,23933,23992): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#479, $t15);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t15)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+97
    assume {:print "$at(26,24001,24098)"} true;
    assert {:msg "assert_failed(26,24001,24098): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t15)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t1), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:59:9+108
    assume {:print "$at(8,2239,2347)"} true;
    assert {:msg "assert_failed(8,2239,2347): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453);

    // assert Not(Not(exists[@479]<Roles::RoleId>($t16))) at /home/ying/diem/language/diem-framework/modules/Roles.move:534:9+59
    assume {:print "$at(26,23933,23992)"} true;
    assert {:msg "assert_failed(26,23933,23992): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#479, $t16);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t16)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+97
    assume {:print "$at(26,24001,24098)"} true;
    assert {:msg "assert_failed(26,24001,24098): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t16)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t1), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:59:9+108
    assume {:print "$at(8,2239,2347)"} true;
    assert {:msg "assert_failed(8,2239,2347): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453);

    // assert Diem::spec_has_mint_capability<#0>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1345:9+80
    assume {:print "$at(10,63748,63828)"} true;
    assert {:msg "assert_failed(10,63748,63828): post-condition does not hold"}
      $1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, $1_Signer_spec_address_of($t1));

    // assert Implies(Diem::spec_is_currency[@480]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@480]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#480) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#480))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@478]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#478, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@480]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@480]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#480) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#480))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@485]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#485, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@480]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@480]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#480) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#480))));

    // assert Implies(Diem::spec_is_currency[@480]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@480]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#480) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#480))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@486]<Diem::PreburnQueue<#0>>(addr), exists[@487]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#486, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#487, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@486]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#486, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@480]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@480]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#480) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#480))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1322:5+1
    assume {:print "$at(10,62756,62757)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(exists[@478]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t1)), Not(exists[@479]<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t10)), 1)), Neq<address>(Signer::spec_address_of[]($t1), b1e55ed)), Or(Eq<u64>($t3, 0), Gt($t3, 10000000000))), exists[@480]<Diem::CurrencyInfo<#0>>(Signer::spec_address_of[]($t0))), Not(exists[@479]<Roles::RoleId>($t11))), Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t11)), 0)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)), ContainsVec<vector<u8>>(select RegisteredCurrencies::RegisteredCurrencies.currency_codes(DiemConfig::$get[@481]<RegisteredCurrencies::RegisteredCurrencies>()), $t5)), Not(exists[@482]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0)))), Not(exists[@481]<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(a550c18))), And(And(And(And(DiemTimestamp::$is_operating[@483](), DiemConfig::$reconfiguration_enabled[@484]()), Gt(DiemTimestamp::spec_now_microseconds[@483](), 0)), Lt(select DiemConfig::Configuration.epoch($t12), 18446744073709551615)), Lt($t13, select DiemConfig::Configuration.last_reconfiguration_time($t12)))), exists[@485]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t1))), Not(exists[@479]<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t14)), 1)), Neq<address>(Signer::spec_address_of[]($t1), b1e55ed)), Not(exists[@479]<Roles::RoleId>($t15))), Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t15)), 1)), Neq<address>(Signer::spec_address_of[]($t1), b1e55ed)), Not(exists[@479]<Roles::RoleId>($t16))), Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t16)), 1)), Neq<address>(Signer::spec_address_of[]($t1), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+143
    assume {:print "$at(10,62763,62906)"} true;
    assert {:msg "assert_failed(10,62763,62906): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((((($ResourceExists($1_Diem_MintCapability'#0'_$memory#478, $1_Signer_spec_address_of($t1)) || !$ResourceExists($1_Roles_RoleId_$memory#479, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t10)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453)) || ($IsEqual'u64'($t3, 0) || ($t3 > 10000000000))) || $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory#480, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#479, $t11)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t11)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)) || $ContainsVec'vec'u8''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481)), $t5)) || !$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#482, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481, 173345816)) || (((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory#484)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483) > 0)) && ($epoch#$1_DiemConfig_Configuration($t12) < 18446744073709551615)) && ($t13 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t12)))) || $ResourceExists($1_Diem_BurnCapability'#0'_$memory#485, $1_Signer_spec_address_of($t1))) || !$ResourceExists($1_Roles_RoleId_$memory#479, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t14)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453)) || !$ResourceExists($1_Roles_RoleId_$memory#479, $t15)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t15)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453)) || !$ResourceExists($1_Roles_RoleId_$memory#479, $t16)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t16)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(exists[@478]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t1)), Eq(6, $t19)), And(Not(exists[@479]<Roles::RoleId>($t10)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t10)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of[]($t1), b1e55ed), Eq(2, $t19))), And(Or(Eq<u64>($t3, 0), Gt($t3, 10000000000)), Eq(7, $t19))), And(exists[@480]<Diem::CurrencyInfo<#0>>(Signer::spec_address_of[]($t0)), Eq(6, $t19))), And(Not(exists[@479]<Roles::RoleId>($t11)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t11)), 0), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t19))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t19))), And(ContainsVec<vector<u8>>(select RegisteredCurrencies::RegisteredCurrencies.currency_codes(DiemConfig::$get[@481]<RegisteredCurrencies::RegisteredCurrencies>()), $t5), Eq(7, $t19))), And(Not(exists[@482]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0))), Eq(4, $t19))), And(Not(exists[@481]<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(a550c18)), Eq(5, $t19))), And(And(And(And(And(DiemTimestamp::$is_operating[@483](), DiemConfig::$reconfiguration_enabled[@484]()), Gt(DiemTimestamp::spec_now_microseconds[@483](), 0)), Lt(select DiemConfig::Configuration.epoch($t12), 18446744073709551615)), Lt($t13, select DiemConfig::Configuration.last_reconfiguration_time($t12))), Eq(1, $t19))), And(exists[@485]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t1)), Eq(6, $t19))), And(Not(exists[@479]<Roles::RoleId>($t14)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t14)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of[]($t1), b1e55ed), Eq(2, $t19))), And(Not(exists[@479]<Roles::RoleId>($t15)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t15)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of[]($t1), b1e55ed), Eq(2, $t19))), And(Not(exists[@479]<Roles::RoleId>($t16)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t16)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of[]($t1), b1e55ed), Eq(2, $t19))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+143
    assert {:msg "assert_failed(10,62763,62906): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((($ResourceExists($1_Diem_MintCapability'#0'_$memory#478, $1_Signer_spec_address_of($t1)) && $IsEqual'u8'(6, $t19)) || (!$ResourceExists($1_Roles_RoleId_$memory#479, $t10) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t10)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453) && $IsEqual'u8'(2, $t19))) || (($IsEqual'u64'($t3, 0) || ($t3 > 10000000000)) && $IsEqual'u8'(7, $t19))) || ($ResourceExists($1_Diem_CurrencyInfo'#0'_$memory#480, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(6, $t19))) || (!$ResourceExists($1_Roles_RoleId_$memory#479, $t11) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t11)), 0) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t19))) || ($ContainsVec'vec'u8''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481)), $t5) && $IsEqual'u8'(7, $t19))) || (!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#482, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t19))) || (!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481, 173345816) && $IsEqual'u8'(5, $t19))) || ((((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory#484)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483) > 0)) && ($epoch#$1_DiemConfig_Configuration($t12) < 18446744073709551615)) && ($t13 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t12))) && $IsEqual'u8'(1, $t19))) || ($ResourceExists($1_Diem_BurnCapability'#0'_$memory#485, $1_Signer_spec_address_of($t1)) && $IsEqual'u8'(6, $t19))) || (!$ResourceExists($1_Roles_RoleId_$memory#479, $t14) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t14)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453) && $IsEqual'u8'(2, $t19))) || (!$ResourceExists($1_Roles_RoleId_$memory#479, $t15) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t15)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453) && $IsEqual'u8'(2, $t19))) || (!$ResourceExists($1_Roles_RoleId_$memory#479, $t16) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t16)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453) && $IsEqual'u8'(2, $t19)));

    // abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+143
    $abort_code := $t19;
    $abort_flag := true;
    return;

}

// fun Diem::scaling_factor<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1411:5+199
procedure {:inline 1} $1_Diem_scaling_factor'$1_XDX_XDX'() returns ($ret0: int)
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t4: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,66578,66608)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
    assume {:print "$at(10,66578,66608)"} true;
    assume {:print "$track_abort(18,34):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30

    // $t2 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1414:47+13
    assume {:print "$at(10,66656,66669)"} true;
    $t2 := 173345816;
    assume $IsValid'address'($t2);

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1414:9+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,66618,66631)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(18,34):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.scaling_factor($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1414:9+67
    $t4 := $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1414:9+67
    assume {:print "$track_return(18,34,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:5+1
    assume {:print "$at(10,66690,66691)"} true;
L1:

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:5+1
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::scaling_factor [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1411:5+199
procedure {:timeLimit 40} $1_Diem_scaling_factor$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: int;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#193: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#194: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#195: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#196: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#197: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1411:5+199
    assume {:print "$at(10,66492,66691)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @195 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1411:5+1
    $1_Diem_BurnCapability'#0'_$memory#195 := $1_Diem_BurnCapability'#0'_$memory;

    // @193 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1411:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#193 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @194 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1411:5+1
    $1_Diem_MintCapability'#0'_$memory#194 := $1_Diem_MintCapability'#0'_$memory;

    // @197 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1411:5+1
    $1_Diem_Preburn'#0'_$memory#197 := $1_Diem_Preburn'#0'_$memory;

    // @196 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1411:5+1
    $1_Diem_PreburnQueue'#0'_$memory#196 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,66578,66608)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
    assume {:print "$at(10,66578,66608)"} true;
    assume {:print "$track_abort(18,34):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:9+30

    // $t2 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1414:47+13
    assume {:print "$at(10,66656,66669)"} true;
    $t2 := 173345816;
    assume $IsValid'address'($t2);

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1414:9+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,66618,66631)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(18,34):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.scaling_factor($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1414:9+67
    $t4 := $scaling_factor#$1_Diem_CurrencyInfo'#0'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1414:9+67
    assume {:print "$track_return(18,34,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:5+1
    assume {:print "$at(10,66690,66691)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@193]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@193]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#193))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@194]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#194, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@194]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#194, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@193]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@193]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#193))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@195]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#195, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@195]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#195, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@193]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@193]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#193))));

    // assert Implies(Diem::spec_is_currency[@193]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@193]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#193))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@196]<Diem::PreburnQueue<#0>>(addr), exists[@197]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#196, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#197, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@196]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#196, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@193]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@193]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#193))));

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:5+1
    assume {:print "$at(10,66690,66691)"} true;
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::register_currency<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
procedure {:inline 1} $1_Diem_register_currency'$1_XUS_XUS'(_$t0: int, _$t1: $1_FixedPoint32_FixedPoint32, _$t2: bool, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ($ret0: $1_Diem_MintCapability'$1_XUS_XUS', $ret1: $1_Diem_BurnCapability'$1_XUS_XUS')
{
    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: bool;
    var $t33: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t34: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t35: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t36: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t37: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t38: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t39: $1_DiemConfig_Configuration;
    var $t40: int;
    var $t41: bool;
    var $t42: $1_Diem_MintCapability'$1_XUS_XUS';
    var $t43: bool;
    var $t44: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t0: int;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_MintCapability'$1_XUS_XUS'': $1_Diem_MintCapability'$1_XUS_XUS';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$at(10,58759,58760)"} true;
    assume {:print "$track_local(18,31,0):", $t0} $t0 == $t0;

    // trace_local[to_xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,1):", $t1} $t1 == $t1;

    // trace_local[is_synthetic]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,59075,59110)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume {:print "$at(10,59075,59110)"} true;

    // assume Identical($t15, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume ($t15 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t15) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    if ($t15) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
L11:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t16)), And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0) && $IsEqual'u8'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume {:print "$at(10,59075,59110)"} true;
    assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
L10:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(10,59203,59250)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47

    // assume Identical($t17, Neq<address>(Signer::spec_address_of($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    assume ($t17 == !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // if ($t17) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    if ($t17) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
L13:

    // assume And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    assume {:print "$at(10,59203,59250)"} true;
    assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
L12:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30
    // >> opaque call: $t11 := Signer::address_of($t0)
    assume {:print "$at(10,59312,59342)"} true;

    // $t18 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t0));

    // $t18 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30

    // $t19 := exists<Diem::CurrencyInfo<#0>>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:14+6
    $t19 := $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t18);

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:13+1
    call $t20 := $Not($t19);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:39+14
    assume {:print "$at(10,59383,59397)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41
    // >> opaque call: $t15 := Errors::already_published($t14)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41

    // trace_local[tmp#$7]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    assume {:print "$at(10,59260,59408)"} true;
    assume {:print "$track_local(18,31,7):", $t22} $t22 == $t22;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    assume {:print "$track_local(18,31,6):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    assume {:print "$at(10,59260,59408)"} true;
    assume {:print "$track_abort(18,31):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    $t16 := $t22;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+1
    assume {:print "$at(10,59425,59426)"} true;
L0:

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := <($t23, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:18+1
    call $t24 := $Lt($t23, $t3);

    // if ($t24) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    if ($t24) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:38+14
L2:

    // $t25 := 10000000000 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:56+18
    $t25 := 10000000000;
    assume $IsValid'u64'($t25);

    // $t26 := <=($t3, $t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:53+2
    call $t26 := $Le($t3, $t25);

    // $t10 := $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    $t10 := $t26;

    // trace_local[tmp#$10]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    assume {:print "$track_local(18,31,10):", $t26} $t26 == $t26;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
L4:

    // $t27 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    $t27 := false;
    assume $IsValid'bool'($t27);

    // $t10 := $t27 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    $t10 := $t27;

    // trace_local[tmp#$10]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    assume {:print "$track_local(18,31,10):", $t27} $t27 == $t27;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
L5:

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:101+14
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40
    // >> opaque call: $t22 := Errors::invalid_argument($t21)

    // $t29 := opaque begin: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40
    assume $IsEqual'u64'($t29, 7);

    // $t29 := opaque end: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40

    // trace_local[tmp#$9]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    assume {:print "$track_local(18,31,9):", $t29} $t29 == $t29;

    // trace_local[tmp#$8]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    assume {:print "$track_local(18,31,8):", $t10} $t10 == $t10;

    // if ($t10) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    if ($t10) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
L7:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    assume {:print "$at(10,59418,59526)"} true;
    assume {:print "$track_abort(18,31):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    $t16 := $t29;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    goto L9;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1245:17+10
    assume {:print "$at(10,59544,59554)"} true;
L6:

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:26+1
    assume {:print "$at(10,59606,59607)"} true;
    $t30 := 0;
    assume $IsValid'u128'($t30);

    // $t31 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:28+1
    assume {:print "$at(10,59636,59637)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t32 := true at /home/ying/diem/language/diem-framework/modules/Diem.move:1253:23+4
    assume {:print "$at(10,59825,59829)"} true;
    $t32 := true;
    assume $IsValid'bool'($t32);

    // $t33 := Event::new_event_handle<Diem::MintEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1254:26+46
    assume {:print "$at(10,59856,59902)"} true;
    call $t33 := $1_Event_new_event_handle'$1_Diem_MintEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,59856,59902)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t34 := Event::new_event_handle<Diem::BurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1255:26+46
    assume {:print "$at(10,59929,59975)"} true;
    call $t34 := $1_Event_new_event_handle'$1_Diem_BurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,59929,59975)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t35 := Event::new_event_handle<Diem::PreburnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1256:29+49
    assume {:print "$at(10,60005,60054)"} true;
    call $t35 := $1_Event_new_event_handle'$1_Diem_PreburnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60005,60054)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t36 := Event::new_event_handle<Diem::CancelBurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1257:33+52
    assume {:print "$at(10,60088,60140)"} true;
    call $t36 := $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60088,60140)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t37 := Event::new_event_handle<Diem::ToXDXExchangeRateUpdateEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1258:42+65
    assume {:print "$at(10,60183,60248)"} true;
    call $t37 := $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60183,60248)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t38 := pack Diem::CurrencyInfo<#0>($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:1245:29+702
    assume {:print "$at(10,59556,60258)"} true;
    $t38 := $1_Diem_CurrencyInfo'$1_XUS_XUS'($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37);

    // move_to<Diem::CurrencyInfo<#0>>($t38, $t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1245:9+7
    if ($ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t0, $t38);
    }
    if ($abort_flag) {
        assume {:print "$at(10,59536,59543)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // assume Identical($t39, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t39 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t40, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t40 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // RegisteredCurrencies::add_currency_code($t0, $t5) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1260:9+101
    assume {:print "$at(10,60269,60370)"} true;
    call $1_RegisteredCurrencies_add_currency_code($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,60269,60370)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t41 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:10+26
    assume {:print "$at(10,60381,60407)"} true;
    $t41 := false;
    assume $IsValid'bool'($t41);

    // $t42 := pack Diem::MintCapability<#0>($t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:10+26
    $t42 := $1_Diem_MintCapability'$1_XUS_XUS'($t41);

    // $t43 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:38+26
    $t43 := false;
    assume $IsValid'bool'($t43);

    // $t44 := pack Diem::BurnCapability<#0>($t43) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:38+26
    $t44 := $1_Diem_BurnCapability'$1_XUS_XUS'($t43);

    // trace_return[0]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:9+56
    assume {:print "$track_return(18,31,0):", $t42} $t42 == $t42;

    // trace_return[1]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:9+56
    assume {:print "$track_return(18,31,1):", $t44} $t44 == $t44;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
    assume {:print "$at(10,60441,60442)"} true;
L8:

    // return ($t42, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
    $ret0 := $t42;
    $ret1 := $t44;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
L9:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::register_currency<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
procedure {:inline 1} $1_Diem_register_currency'$1_XDX_XDX'(_$t0: int, _$t1: $1_FixedPoint32_FixedPoint32, _$t2: bool, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ($ret0: $1_Diem_MintCapability'$1_XDX_XDX', $ret1: $1_Diem_BurnCapability'$1_XDX_XDX')
{
    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: bool;
    var $t33: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t34: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t35: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t36: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t37: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t38: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t39: $1_DiemConfig_Configuration;
    var $t40: int;
    var $t41: bool;
    var $t42: $1_Diem_MintCapability'$1_XDX_XDX';
    var $t43: bool;
    var $t44: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t0: int;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_MintCapability'$1_XDX_XDX'': $1_Diem_MintCapability'$1_XDX_XDX';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$at(10,58759,58760)"} true;
    assume {:print "$track_local(18,31,0):", $t0} $t0 == $t0;

    // trace_local[to_xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,1):", $t1} $t1 == $t1;

    // trace_local[is_synthetic]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,59075,59110)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume {:print "$at(10,59075,59110)"} true;

    // assume Identical($t15, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume ($t15 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t15) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    if ($t15) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
L11:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t16)), And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0) && $IsEqual'u8'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume {:print "$at(10,59075,59110)"} true;
    assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
L10:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(10,59203,59250)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47

    // assume Identical($t17, Neq<address>(Signer::spec_address_of($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    assume ($t17 == !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // if ($t17) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    if ($t17) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
L13:

    // assume And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    assume {:print "$at(10,59203,59250)"} true;
    assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
L12:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30
    // >> opaque call: $t11 := Signer::address_of($t0)
    assume {:print "$at(10,59312,59342)"} true;

    // $t18 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t0));

    // $t18 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30

    // $t19 := exists<Diem::CurrencyInfo<#0>>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:14+6
    $t19 := $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t18);

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:13+1
    call $t20 := $Not($t19);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:39+14
    assume {:print "$at(10,59383,59397)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41
    // >> opaque call: $t15 := Errors::already_published($t14)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41

    // trace_local[tmp#$7]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    assume {:print "$at(10,59260,59408)"} true;
    assume {:print "$track_local(18,31,7):", $t22} $t22 == $t22;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    assume {:print "$track_local(18,31,6):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    assume {:print "$at(10,59260,59408)"} true;
    assume {:print "$track_abort(18,31):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    $t16 := $t22;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+1
    assume {:print "$at(10,59425,59426)"} true;
L0:

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := <($t23, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:18+1
    call $t24 := $Lt($t23, $t3);

    // if ($t24) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    if ($t24) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:38+14
L2:

    // $t25 := 10000000000 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:56+18
    $t25 := 10000000000;
    assume $IsValid'u64'($t25);

    // $t26 := <=($t3, $t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:53+2
    call $t26 := $Le($t3, $t25);

    // $t10 := $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    $t10 := $t26;

    // trace_local[tmp#$10]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    assume {:print "$track_local(18,31,10):", $t26} $t26 == $t26;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
L4:

    // $t27 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    $t27 := false;
    assume $IsValid'bool'($t27);

    // $t10 := $t27 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    $t10 := $t27;

    // trace_local[tmp#$10]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    assume {:print "$track_local(18,31,10):", $t27} $t27 == $t27;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
L5:

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:101+14
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40
    // >> opaque call: $t22 := Errors::invalid_argument($t21)

    // $t29 := opaque begin: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40
    assume $IsEqual'u64'($t29, 7);

    // $t29 := opaque end: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40

    // trace_local[tmp#$9]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    assume {:print "$track_local(18,31,9):", $t29} $t29 == $t29;

    // trace_local[tmp#$8]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    assume {:print "$track_local(18,31,8):", $t10} $t10 == $t10;

    // if ($t10) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    if ($t10) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
L7:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    assume {:print "$at(10,59418,59526)"} true;
    assume {:print "$track_abort(18,31):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    $t16 := $t29;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    goto L9;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1245:17+10
    assume {:print "$at(10,59544,59554)"} true;
L6:

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:26+1
    assume {:print "$at(10,59606,59607)"} true;
    $t30 := 0;
    assume $IsValid'u128'($t30);

    // $t31 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:28+1
    assume {:print "$at(10,59636,59637)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t32 := true at /home/ying/diem/language/diem-framework/modules/Diem.move:1253:23+4
    assume {:print "$at(10,59825,59829)"} true;
    $t32 := true;
    assume $IsValid'bool'($t32);

    // $t33 := Event::new_event_handle<Diem::MintEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1254:26+46
    assume {:print "$at(10,59856,59902)"} true;
    call $t33 := $1_Event_new_event_handle'$1_Diem_MintEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,59856,59902)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t34 := Event::new_event_handle<Diem::BurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1255:26+46
    assume {:print "$at(10,59929,59975)"} true;
    call $t34 := $1_Event_new_event_handle'$1_Diem_BurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,59929,59975)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t35 := Event::new_event_handle<Diem::PreburnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1256:29+49
    assume {:print "$at(10,60005,60054)"} true;
    call $t35 := $1_Event_new_event_handle'$1_Diem_PreburnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60005,60054)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t36 := Event::new_event_handle<Diem::CancelBurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1257:33+52
    assume {:print "$at(10,60088,60140)"} true;
    call $t36 := $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60088,60140)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t37 := Event::new_event_handle<Diem::ToXDXExchangeRateUpdateEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1258:42+65
    assume {:print "$at(10,60183,60248)"} true;
    call $t37 := $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60183,60248)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t38 := pack Diem::CurrencyInfo<#0>($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:1245:29+702
    assume {:print "$at(10,59556,60258)"} true;
    $t38 := $1_Diem_CurrencyInfo'$1_XDX_XDX'($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37);

    // move_to<Diem::CurrencyInfo<#0>>($t38, $t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1245:9+7
    if ($ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t0, $t38);
    }
    if ($abort_flag) {
        assume {:print "$at(10,59536,59543)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // assume Identical($t39, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t39 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t40, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t40 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // RegisteredCurrencies::add_currency_code($t0, $t5) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1260:9+101
    assume {:print "$at(10,60269,60370)"} true;
    call $1_RegisteredCurrencies_add_currency_code($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,60269,60370)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t41 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:10+26
    assume {:print "$at(10,60381,60407)"} true;
    $t41 := false;
    assume $IsValid'bool'($t41);

    // $t42 := pack Diem::MintCapability<#0>($t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:10+26
    $t42 := $1_Diem_MintCapability'$1_XDX_XDX'($t41);

    // $t43 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:38+26
    $t43 := false;
    assume $IsValid'bool'($t43);

    // $t44 := pack Diem::BurnCapability<#0>($t43) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:38+26
    $t44 := $1_Diem_BurnCapability'$1_XDX_XDX'($t43);

    // trace_return[0]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:9+56
    assume {:print "$track_return(18,31,0):", $t42} $t42 == $t42;

    // trace_return[1]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:9+56
    assume {:print "$track_return(18,31,1):", $t44} $t44 == $t44;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
    assume {:print "$at(10,60441,60442)"} true;
L8:

    // return ($t42, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
    $ret0 := $t42;
    $ret1 := $t44;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
L9:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::register_currency<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
procedure {:inline 1} $1_Diem_register_currency'#0'(_$t0: int, _$t1: $1_FixedPoint32_FixedPoint32, _$t2: bool, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ($ret0: $1_Diem_MintCapability'#0', $ret1: $1_Diem_BurnCapability'#0')
{
    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: bool;
    var $t33: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t34: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t35: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t36: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t37: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t38: $1_Diem_CurrencyInfo'#0';
    var $t39: $1_DiemConfig_Configuration;
    var $t40: int;
    var $t41: bool;
    var $t42: $1_Diem_MintCapability'#0';
    var $t43: bool;
    var $t44: $1_Diem_BurnCapability'#0';
    var $t0: int;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_MintCapability'#0'': $1_Diem_MintCapability'#0';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$at(10,58759,58760)"} true;
    assume {:print "$track_local(18,31,0):", $t0} $t0 == $t0;

    // trace_local[to_xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,1):", $t1} $t1 == $t1;

    // trace_local[is_synthetic]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,59075,59110)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume {:print "$at(10,59075,59110)"} true;

    // assume Identical($t15, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume ($t15 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t15) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    if ($t15) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
L11:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t16)), And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0) && $IsEqual'u8'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume {:print "$at(10,59075,59110)"} true;
    assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
L10:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(10,59203,59250)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47

    // assume Identical($t17, Neq<address>(Signer::spec_address_of($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    assume ($t17 == !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // if ($t17) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    if ($t17) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
L13:

    // assume And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    assume {:print "$at(10,59203,59250)"} true;
    assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
L12:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30
    // >> opaque call: $t11 := Signer::address_of($t0)
    assume {:print "$at(10,59312,59342)"} true;

    // $t18 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t0));

    // $t18 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30

    // $t19 := exists<Diem::CurrencyInfo<#0>>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:14+6
    $t19 := $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t18);

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:13+1
    call $t20 := $Not($t19);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:39+14
    assume {:print "$at(10,59383,59397)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41
    // >> opaque call: $t15 := Errors::already_published($t14)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41

    // trace_local[tmp#$7]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    assume {:print "$at(10,59260,59408)"} true;
    assume {:print "$track_local(18,31,7):", $t22} $t22 == $t22;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    assume {:print "$track_local(18,31,6):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    assume {:print "$at(10,59260,59408)"} true;
    assume {:print "$track_abort(18,31):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    $t16 := $t22;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+1
    assume {:print "$at(10,59425,59426)"} true;
L0:

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := <($t23, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:18+1
    call $t24 := $Lt($t23, $t3);

    // if ($t24) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    if ($t24) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:38+14
L2:

    // $t25 := 10000000000 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:56+18
    $t25 := 10000000000;
    assume $IsValid'u64'($t25);

    // $t26 := <=($t3, $t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:53+2
    call $t26 := $Le($t3, $t25);

    // $t10 := $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    $t10 := $t26;

    // trace_local[tmp#$10]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    assume {:print "$track_local(18,31,10):", $t26} $t26 == $t26;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
L4:

    // $t27 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    $t27 := false;
    assume $IsValid'bool'($t27);

    // $t10 := $t27 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    $t10 := $t27;

    // trace_local[tmp#$10]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    assume {:print "$track_local(18,31,10):", $t27} $t27 == $t27;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
L5:

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:101+14
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40
    // >> opaque call: $t22 := Errors::invalid_argument($t21)

    // $t29 := opaque begin: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40
    assume $IsEqual'u64'($t29, 7);

    // $t29 := opaque end: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40

    // trace_local[tmp#$9]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    assume {:print "$track_local(18,31,9):", $t29} $t29 == $t29;

    // trace_local[tmp#$8]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    assume {:print "$track_local(18,31,8):", $t10} $t10 == $t10;

    // if ($t10) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    if ($t10) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
L7:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    assume {:print "$at(10,59418,59526)"} true;
    assume {:print "$track_abort(18,31):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    $t16 := $t29;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    goto L9;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1245:17+10
    assume {:print "$at(10,59544,59554)"} true;
L6:

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:26+1
    assume {:print "$at(10,59606,59607)"} true;
    $t30 := 0;
    assume $IsValid'u128'($t30);

    // $t31 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:28+1
    assume {:print "$at(10,59636,59637)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t32 := true at /home/ying/diem/language/diem-framework/modules/Diem.move:1253:23+4
    assume {:print "$at(10,59825,59829)"} true;
    $t32 := true;
    assume $IsValid'bool'($t32);

    // $t33 := Event::new_event_handle<Diem::MintEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1254:26+46
    assume {:print "$at(10,59856,59902)"} true;
    call $t33 := $1_Event_new_event_handle'$1_Diem_MintEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,59856,59902)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t34 := Event::new_event_handle<Diem::BurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1255:26+46
    assume {:print "$at(10,59929,59975)"} true;
    call $t34 := $1_Event_new_event_handle'$1_Diem_BurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,59929,59975)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t35 := Event::new_event_handle<Diem::PreburnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1256:29+49
    assume {:print "$at(10,60005,60054)"} true;
    call $t35 := $1_Event_new_event_handle'$1_Diem_PreburnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60005,60054)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t36 := Event::new_event_handle<Diem::CancelBurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1257:33+52
    assume {:print "$at(10,60088,60140)"} true;
    call $t36 := $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60088,60140)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t37 := Event::new_event_handle<Diem::ToXDXExchangeRateUpdateEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1258:42+65
    assume {:print "$at(10,60183,60248)"} true;
    call $t37 := $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60183,60248)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t38 := pack Diem::CurrencyInfo<#0>($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:1245:29+702
    assume {:print "$at(10,59556,60258)"} true;
    $t38 := $1_Diem_CurrencyInfo'#0'($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37);

    // move_to<Diem::CurrencyInfo<#0>>($t38, $t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1245:9+7
    if ($ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $t0, $t38);
    }
    if ($abort_flag) {
        assume {:print "$at(10,59536,59543)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // assume Identical($t39, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t39 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t40, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t40 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // RegisteredCurrencies::add_currency_code($t0, $t5) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1260:9+101
    assume {:print "$at(10,60269,60370)"} true;
    call $1_RegisteredCurrencies_add_currency_code($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,60269,60370)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t41 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:10+26
    assume {:print "$at(10,60381,60407)"} true;
    $t41 := false;
    assume $IsValid'bool'($t41);

    // $t42 := pack Diem::MintCapability<#0>($t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:10+26
    $t42 := $1_Diem_MintCapability'#0'($t41);

    // $t43 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:38+26
    $t43 := false;
    assume $IsValid'bool'($t43);

    // $t44 := pack Diem::BurnCapability<#0>($t43) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:38+26
    $t44 := $1_Diem_BurnCapability'#0'($t43);

    // trace_return[0]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:9+56
    assume {:print "$track_return(18,31,0):", $t42} $t42 == $t42;

    // trace_return[1]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:9+56
    assume {:print "$track_return(18,31,1):", $t44} $t44 == $t44;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
    assume {:print "$at(10,60441,60442)"} true;
L8:

    // return ($t42, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
    $ret0 := $t42;
    $ret1 := $t44;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
L9:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::register_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
procedure {:timeLimit 40} $1_Diem_register_currency$verify(_$t0: int, _$t1: $1_FixedPoint32_FixedPoint32, _$t2: bool, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ($ret0: $1_Diem_MintCapability'#0', $ret1: $1_Diem_BurnCapability'#0')
{
    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: bool;
    var $t33: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t34: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t35: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t36: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t37: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t38: $1_Diem_CurrencyInfo'#0';
    var $t39: $1_DiemConfig_Configuration;
    var $t40: int;
    var $t41: bool;
    var $t42: $1_Diem_MintCapability'#0';
    var $t43: bool;
    var $t44: $1_Diem_BurnCapability'#0';
    var $t0: int;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_MintCapability'#0'': $1_Diem_MintCapability'#0';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_CurrencyInfo'#0'_$memory#454: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Roles_RoleId_$memory#455: $Memory $1_Roles_RoleId;
    var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#457: $Memory $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemConfig_DisableReconfiguration_$memory#459: $Memory $1_DiemConfig_DisableReconfiguration;
    var $1_Diem_MintCapability'#0'_$memory#460: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#461: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#462: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#463: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:169:9+72
    assume {:print "$at(10,58759,60442)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:409:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume $IsValid'bool'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume $IsValid'vec'u8''($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DisableReconfiguration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DisableReconfiguration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // @458 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$at(10,58759,58760)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @455 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    $1_Roles_RoleId_$memory#455 := $1_Roles_RoleId_$memory;

    // @459 := save_mem(DiemConfig::DisableReconfiguration) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    $1_DiemConfig_DisableReconfiguration_$memory#459 := $1_DiemConfig_DisableReconfiguration_$memory;

    // @456 := save_mem(DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456 := $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory;

    // @457 := save_mem(DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#457 := $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory;

    // @461 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    $1_Diem_BurnCapability'#0'_$memory#461 := $1_Diem_BurnCapability'#0'_$memory;

    // @454 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#454 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @460 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    $1_Diem_MintCapability'#0'_$memory#460 := $1_Diem_MintCapability'#0'_$memory;

    // @463 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    $1_Diem_Preburn'#0'_$memory#463 := $1_Diem_Preburn'#0'_$memory;

    // @462 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    $1_Diem_PreburnQueue'#0'_$memory#462 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,0):", $t0} $t0 == $t0;

    // trace_local[to_xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,1):", $t1} $t1 == $t1;

    // trace_local[is_synthetic]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1228:5+1
    assume {:print "$track_local(18,31,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,59075,59110)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume {:print "$at(10,59075,59110)"} true;

    // assume Identical($t15, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume ($t15 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t15) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    if ($t15) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
L11:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t16)), And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0) && $IsEqual'u8'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    assume {:print "$at(10,59075,59110)"} true;
    assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35
L10:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1237:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(10,59203,59250)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47

    // assume Identical($t17, Neq<address>(Signer::spec_address_of($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    assume ($t17 == !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // if ($t17) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    if ($t17) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
L13:

    // assume And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    assume {:print "$at(10,59203,59250)"} true;
    assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47
L12:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+47

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30
    // >> opaque call: $t11 := Signer::address_of($t0)
    assume {:print "$at(10,59312,59342)"} true;

    // $t18 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t0));

    // $t18 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:45+30

    // $t19 := exists<Diem::CurrencyInfo<#0>>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:14+6
    $t19 := $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t18);

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:13+1
    call $t20 := $Not($t19);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:39+14
    assume {:print "$at(10,59383,59397)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41
    // >> opaque call: $t15 := Errors::already_published($t14)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:13+41

    // trace_local[tmp#$7]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    assume {:print "$at(10,59260,59408)"} true;
    assume {:print "$track_local(18,31,7):", $t22} $t22 == $t22;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    assume {:print "$track_local(18,31,6):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    assume {:print "$at(10,59260,59408)"} true;
    assume {:print "$track_abort(18,31):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    $t16 := $t22;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1240:9+148
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+1
    assume {:print "$at(10,59425,59426)"} true;
L0:

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := <($t23, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:18+1
    call $t24 := $Lt($t23, $t3);

    // if ($t24) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    if ($t24) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:38+14
L2:

    // $t25 := 10000000000 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:56+18
    $t25 := 10000000000;
    assume $IsValid'u64'($t25);

    // $t26 := <=($t3, $t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:53+2
    call $t26 := $Le($t3, $t25);

    // $t10 := $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    $t10 := $t26;

    // trace_local[tmp#$10]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    assume {:print "$track_local(18,31,10):", $t26} $t26 == $t26;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
L4:

    // $t27 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    $t27 := false;
    assume $IsValid'bool'($t27);

    // $t10 := $t27 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    $t10 := $t27;

    // trace_local[tmp#$10]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
    assume {:print "$track_local(18,31,10):", $t27} $t27 == $t27;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:16+58
L5:

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:101+14
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40
    // >> opaque call: $t22 := Errors::invalid_argument($t21)

    // $t29 := opaque begin: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40
    assume $IsEqual'u64'($t29, 7);

    // $t29 := opaque end: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:76+40

    // trace_local[tmp#$9]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    assume {:print "$track_local(18,31,9):", $t29} $t29 == $t29;

    // trace_local[tmp#$8]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    assume {:print "$track_local(18,31,8):", $t10} $t10 == $t10;

    // if ($t10) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    if ($t10) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
L7:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    assume {:print "$at(10,59418,59526)"} true;
    assume {:print "$track_abort(18,31):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    $t16 := $t29;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:9+108
    goto L9;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1245:17+10
    assume {:print "$at(10,59544,59554)"} true;
L6:

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:26+1
    assume {:print "$at(10,59606,59607)"} true;
    $t30 := 0;
    assume $IsValid'u128'($t30);

    // $t31 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:28+1
    assume {:print "$at(10,59636,59637)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t32 := true at /home/ying/diem/language/diem-framework/modules/Diem.move:1253:23+4
    assume {:print "$at(10,59825,59829)"} true;
    $t32 := true;
    assume $IsValid'bool'($t32);

    // $t33 := Event::new_event_handle<Diem::MintEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1254:26+46
    assume {:print "$at(10,59856,59902)"} true;
    call $t33 := $1_Event_new_event_handle'$1_Diem_MintEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,59856,59902)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t34 := Event::new_event_handle<Diem::BurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1255:26+46
    assume {:print "$at(10,59929,59975)"} true;
    call $t34 := $1_Event_new_event_handle'$1_Diem_BurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,59929,59975)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t35 := Event::new_event_handle<Diem::PreburnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1256:29+49
    assume {:print "$at(10,60005,60054)"} true;
    call $t35 := $1_Event_new_event_handle'$1_Diem_PreburnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60005,60054)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t36 := Event::new_event_handle<Diem::CancelBurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1257:33+52
    assume {:print "$at(10,60088,60140)"} true;
    call $t36 := $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60088,60140)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t37 := Event::new_event_handle<Diem::ToXDXExchangeRateUpdateEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1258:42+65
    assume {:print "$at(10,60183,60248)"} true;
    call $t37 := $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60183,60248)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t38 := pack Diem::CurrencyInfo<#0>($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:1245:29+702
    assume {:print "$at(10,59556,60258)"} true;
    $t38 := $1_Diem_CurrencyInfo'#0'($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37);

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t38)), Le(select Diem::CurrencyInfo.scaling_factor($t38), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($t38)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($t38) <= 10000000000));

    // move_to<Diem::CurrencyInfo<#0>>($t38, $t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1245:9+7
    assume {:print "$at(10,59536,59543)"} true;
    if ($ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $t0, $t38);
    }
    if ($abort_flag) {
        assume {:print "$at(10,59536,59543)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // assume Identical($t39, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t39 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t40, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t40 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // RegisteredCurrencies::add_currency_code($t0, $t5) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1260:9+101
    assume {:print "$at(10,60269,60370)"} true;
    call $1_RegisteredCurrencies_add_currency_code($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,60269,60370)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t41 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:10+26
    assume {:print "$at(10,60381,60407)"} true;
    $t41 := false;
    assume $IsValid'bool'($t41);

    // $t42 := pack Diem::MintCapability<#0>($t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:10+26
    $t42 := $1_Diem_MintCapability'#0'($t41);

    // $t43 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:38+26
    $t43 := false;
    assume $IsValid'bool'($t43);

    // $t44 := pack Diem::BurnCapability<#0>($t43) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:38+26
    $t44 := $1_Diem_BurnCapability'#0'($t43);

    // trace_return[0]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:9+56
    assume {:print "$track_return(18,31,0):", $t42} $t42 == $t42;

    // trace_return[1]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1264:9+56
    assume {:print "$track_return(18,31,1):", $t44} $t44 == $t44;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
    assume {:print "$at(10,60441,60442)"} true;
L8:

    // assert Not(Or(Eq<u64>($t3, 0), Gt($t3, 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1279:9+99
    assume {:print "$at(10,60891,60990)"} true;
    assert {:msg "assert_failed(10,60891,60990): function does not abort under this condition"}
      !($IsEqual'u64'($t3, 0) || ($t3 > 10000000000));

    // assert Not(exists[@454]<Diem::CurrencyInfo<#0>>(Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1281:9+121
    assume {:print "$at(10,61076,61197)"} true;
    assert {:msg "assert_failed(10,61076,61197): function does not abort under this condition"}
      !$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory#454, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@455]<Roles::RoleId>($t11))) at /home/ying/diem/language/diem-framework/modules/Roles.move:526:9+59
    assume {:print "$at(26,23574,23633)"} true;
    assert {:msg "assert_failed(26,23574,23633): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#455, $t11);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@455]<Roles::RoleId>($t11)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+87
    assume {:print "$at(26,23642,23729)"} true;
    assert {:msg "assert_failed(26,23642,23729): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#455, $t11)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:41:9+86
    assume {:print "$at(8,1561,1647)"} true;
    assert {:msg "assert_failed(8,1561,1647): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:90:9+90
    assume {:print "$at(8,3390,3480)"} true;
    assert {:msg "assert_failed(8,3390,3480): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // assert Not(ContainsVec<vector<u8>>(select RegisteredCurrencies::RegisteredCurrencies.currency_codes(DiemConfig::$get[@456]<RegisteredCurrencies::RegisteredCurrencies>()), $t5)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:70:9+154
    assume {:print "$at(25,2647,2801)"} true;
    assert {:msg "assert_failed(25,2647,2801): function does not abort under this condition"}
      !$ContainsVec'vec'u8''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456)), $t5);

    // assert Not(Not(exists[@457]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:137:9+129
    assume {:print "$at(13,5441,5570)"} true;
    assert {:msg "assert_failed(13,5441,5570): function does not abort under this condition"}
      !!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#457, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@456]<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:101:9+76
    assume {:print "$at(13,3859,3935)"} true;
    assert {:msg "assert_failed(13,3859,3935): function does not abort under this condition"}
      !!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456, 173345816);

    // assert Not(And(And(And(And(DiemTimestamp::$is_operating[@458](), DiemConfig::$reconfiguration_enabled[@459]()), Gt(DiemTimestamp::spec_now_microseconds[@458](), 0)), Lt(select DiemConfig::Configuration.epoch($t12), 18446744073709551615)), Lt($t13, select DiemConfig::Configuration.last_reconfiguration_time($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:359:9+283
    assume {:print "$at(13,15496,15779)"} true;
    assert {:msg "assert_failed(13,15496,15779): function does not abort under this condition"}
      !(((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory#459)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458) > 0)) && ($epoch#$1_DiemConfig_Configuration($t12) < 18446744073709551615)) && ($t13 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t12)));

    // assert Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1287:9+37
    assume {:print "$at(10,61328,61365)"} true;
    assert {:msg "assert_failed(10,61328,61365): post-condition does not hold"}
      $1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory);

    // assert Eq<u128>(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1288:9+56
    assume {:print "$at(10,61374,61430)"} true;
    assert {:msg "assert_failed(10,61374,61430): post-condition does not hold"}
      $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), 0);

    // assert Implies(Diem::spec_is_currency[@454]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@454]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#454) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#454))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@460]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#460, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@460]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#460, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@454]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@454]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#454) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#454))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@461]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#461, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@461]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#461, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@454]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@454]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#454) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#454))));

    // assert Implies(Diem::spec_is_currency[@454]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@454]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#454) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#454))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@462]<Diem::PreburnQueue<#0>>(addr), exists[@463]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#462, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#463, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@462]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#462, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@454]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@454]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#454) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#454))));

    // return ($t42, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t42;
    $ret1 := $t44;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1265:5+1
    assume {:print "$at(10,60441,60442)"} true;
L9:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Eq<u64>($t3, 0), Gt($t3, 10000000000)), exists[@454]<Diem::CurrencyInfo<#0>>(Signer::spec_address_of[]($t0))), Not(exists[@455]<Roles::RoleId>($t11))), Neq<u64>(select Roles::RoleId.role_id(global[@455]<Roles::RoleId>($t11)), 0)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)), ContainsVec<vector<u8>>(select RegisteredCurrencies::RegisteredCurrencies.currency_codes(DiemConfig::$get[@456]<RegisteredCurrencies::RegisteredCurrencies>()), $t5)), Not(exists[@457]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0)))), Not(exists[@456]<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(a550c18))), And(And(And(And(DiemTimestamp::$is_operating[@458](), DiemConfig::$reconfiguration_enabled[@459]()), Gt(DiemTimestamp::spec_now_microseconds[@458](), 0)), Lt(select DiemConfig::Configuration.epoch($t12), 18446744073709551615)), Lt($t13, select DiemConfig::Configuration.last_reconfiguration_time($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:5+133
    assume {:print "$at(10,60447,60580)"} true;
    assert {:msg "assert_failed(10,60447,60580): abort not covered by any of the `aborts_if` clauses"}
      (((((((((($IsEqual'u64'($t3, 0) || ($t3 > 10000000000)) || $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory#454, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#455, $t11)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#455, $t11)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)) || $ContainsVec'vec'u8''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456)), $t5)) || !$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#457, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456, 173345816)) || (((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory#459)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458) > 0)) && ($epoch#$1_DiemConfig_Configuration($t12) < 18446744073709551615)) && ($t13 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t12))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Or(Eq<u64>($t3, 0), Gt($t3, 10000000000)), Eq(7, $t16)), And(exists[@454]<Diem::CurrencyInfo<#0>>(Signer::spec_address_of[]($t0)), Eq(6, $t16))), And(Not(exists[@455]<Roles::RoleId>($t11)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global[@455]<Roles::RoleId>($t11)), 0), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t16))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t16))), And(ContainsVec<vector<u8>>(select RegisteredCurrencies::RegisteredCurrencies.currency_codes(DiemConfig::$get[@456]<RegisteredCurrencies::RegisteredCurrencies>()), $t5), Eq(7, $t16))), And(Not(exists[@457]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0))), Eq(4, $t16))), And(Not(exists[@456]<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(a550c18)), Eq(5, $t16))), And(And(And(And(And(DiemTimestamp::$is_operating[@458](), DiemConfig::$reconfiguration_enabled[@459]()), Gt(DiemTimestamp::spec_now_microseconds[@458](), 0)), Lt(select DiemConfig::Configuration.epoch($t12), 18446744073709551615)), Lt($t13, select DiemConfig::Configuration.last_reconfiguration_time($t12))), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:5+133
    assert {:msg "assert_failed(10,60447,60580): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((($IsEqual'u64'($t3, 0) || ($t3 > 10000000000)) && $IsEqual'u8'(7, $t16)) || ($ResourceExists($1_Diem_CurrencyInfo'#0'_$memory#454, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(6, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory#455, $t11) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#455, $t11)), 0) && $IsEqual'u8'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t16))) || ($ContainsVec'vec'u8''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456)), $t5) && $IsEqual'u8'(7, $t16))) || (!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#457, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t16))) || (!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456, 173345816) && $IsEqual'u8'(5, $t16))) || ((((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory#459)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458) > 0)) && ($epoch#$1_DiemConfig_Configuration($t12) < 18446744073709551615)) && ($t13 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t12))) && $IsEqual'u8'(1, $t16)));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:5+133
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::remove_burn_capability [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1082:5+331
procedure {:timeLimit 40} $1_Diem_remove_burn_capability$verify(_$t0: int) returns ($ret0: $1_Diem_BurnCapability'#0')
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Diem_BurnCapability'#0';
    var $t0: int;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_BurnCapability'#0'_$memory#151: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#152: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#153: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#154: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#155: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1082:5+331
    assume {:print "$at(10,52279,52610)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1082:5+331
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // @151 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1082:5+1
    $1_Diem_BurnCapability'#0'_$memory#151 := $1_Diem_BurnCapability'#0'_$memory;

    // @152 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1082:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#152 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @153 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1082:5+1
    $1_Diem_MintCapability'#0'_$memory#153 := $1_Diem_MintCapability'#0'_$memory;

    // @155 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1082:5+1
    $1_Diem_Preburn'#0'_$memory#155 := $1_Diem_Preburn'#0'_$memory;

    // @154 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1082:5+1
    $1_Diem_PreburnQueue'#0'_$memory#154 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1082:5+1
    assume {:print "$track_local(18,32,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:20+27
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(10,52423,52450)"} true;

    // $t4 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:20+27

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:20+27
    assume $IsValid'address'($t4);

    // assume Eq<address>($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:20+27
    assume $IsEqual'address'($t4, $1_Signer_spec_address_of($t0));

    // $t4 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:20+27

    // trace_local[addr]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:13+4
    assume {:print "$track_local(18,32,1):", $t4} $t4 == $t4;

    // $t5 := exists<Diem::BurnCapability<#0>>($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:16+6
    assume {:print "$at(10,52467,52473)"} true;
    $t5 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t4);

    // $t6 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:84+16
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:56+45
    // >> opaque call: $t7 := Errors::requires_capability($t6)

    // $t7 := opaque begin: Errors::requires_capability($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:56+45

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:56+45
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:56+45
    assume $IsEqual'u64'($t7, 4);

    // $t7 := opaque end: Errors::requires_capability($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:56+45

    // trace_local[tmp#$3]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:9+93
    assume {:print "$track_local(18,32,3):", $t7} $t7 == $t7;

    // trace_local[tmp#$2]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:9+93
    assume {:print "$track_local(18,32,2):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:9+93
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:9+93
L1:

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:9+93
    assume {:print "$at(10,52460,52553)"} true;
    assume {:print "$track_abort(18,32):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:9+93
    $t8 := $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1085:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1086:45+4
    assume {:print "$at(10,52599,52603)"} true;
L0:

    // $t9 := move_from<Diem::BurnCapability<#0>>($t4) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1086:9+9
    if (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $t4);
        $1_Diem_BurnCapability'#0'_$memory := $ResourceRemove($1_Diem_BurnCapability'#0'_$memory, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(10,52563,52572)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,32):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1086:9+41
    assume {:print "$track_return(18,32,0):", $t9} $t9 == $t9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:5+1
    assume {:print "$at(10,52609,52610)"} true;
L2:

    // assert Not(Not(exists[@151]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1093:9+111
    assume {:print "$at(10,52789,52900)"} true;
    assert {:msg "assert_failed(10,52789,52900): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#151, $1_Signer_spec_address_of($t0));

    // assert Implies(Diem::spec_is_currency[@152]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@152]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#152) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#152))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@153]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#153, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@153]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#153, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@152]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@152]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#152) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#152))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@151]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#151, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@152]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@152]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#152) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#152))));

    // assert Implies(Diem::spec_is_currency[@152]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@152]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#152) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#152))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@154]<Diem::PreburnQueue<#0>>(addr), exists[@155]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#154, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#155, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@154]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#154, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@152]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@152]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#152) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#152))));

    // return $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t9;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:5+1
    assume {:print "$at(10,52609,52610)"} true;
L3:

    // assert Not(exists[@151]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1088:5+87
    assume {:print "$at(10,52615,52702)"} true;
    assert {:msg "assert_failed(10,52615,52702): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_Diem_BurnCapability'#0'_$memory#151, $1_Signer_spec_address_of($t0));

    // assert And(Not(exists[@151]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1088:5+87
    assert {:msg "assert_failed(10,52615,52702): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#151, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t8));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1088:5+87
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun Diem::remove_preburn_from_queue [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:803:5+1370
procedure {:timeLimit 40} $1_Diem_remove_preburn_from_queue$verify(_$t0: int, _$t1: int) returns ($ret0: $1_Diem_PreburnWithMetadata'#0')
{
    // declare local variables
    var $t2: $1_Diem_PreburnWithMetadata'#0';
    var $t3: int;
    var $t4: $1_Diem_PreburnWithMetadata'#0';
    var $t5: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'));
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'));
    var $t10: int;
    var $t11: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($1_Diem_PreburnQueue'#0');
    var $t18: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'));
    var $t19: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t20: int;
    var $t21: bool;
    var $t22: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t23: $1_Diem_PreburnWithMetadata'#0';
    var $t24: $1_Diem_Preburn'#0';
    var $t25: $1_Diem_Diem'#0';
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: $1_Diem_PreburnWithMetadata'#0';
    var $t31: int;
    var $t32: int;
    var $t0: int;
    var $t1: int;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_PreburnWithMetadata'#0'': $1_Diem_PreburnWithMetadata'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''': Vec ($1_Diem_PreburnWithMetadata'#0');
    var $1_Diem_PreburnQueue'#0'_$memory#158: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#159: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#160: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#161: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_Preburn'#0'_$memory#162: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:840:17+6
    assume {:print "$at(10,40549,40555)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:840:17+6
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:840:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t11, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:845:9+77
    assume {:print "$at(10,40717,40794)"} true;
    assume ($t11 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume CanModify<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:837:9+57
    assume {:print "$at(10,40360,40417)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t0];

    // @161 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:837:9+57
    $1_Diem_BurnCapability'#0'_$memory#161 := $1_Diem_BurnCapability'#0'_$memory;

    // @159 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:837:9+57
    $1_Diem_CurrencyInfo'#0'_$memory#159 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @160 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:837:9+57
    $1_Diem_MintCapability'#0'_$memory#160 := $1_Diem_MintCapability'#0'_$memory;

    // @162 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:837:9+57
    $1_Diem_Preburn'#0'_$memory#162 := $1_Diem_Preburn'#0'_$memory;

    // @158 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:837:9+57
    $1_Diem_PreburnQueue'#0'_$memory#158 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:803:5+1
    assume {:print "$at(10,38921,38922)"} true;
    assume {:print "$track_local(18,33,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:803:5+1
    assume {:print "$track_local(18,33,1):", $t1} $t1 == $t1;

    // $t12 := exists<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:16+6
    assume {:print "$at(10,39081,39087)"} true;
    $t12 := $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0);

    // $t13 := 11 at /home/ying/diem/language/diem-framework/modules/Diem.move:805:87+14
    $t13 := 11;
    assume $IsValid'u64'($t13);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:805:65+37
    // >> opaque call: $t13 := Errors::not_published($t12)

    // $t14 := opaque begin: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:65+37

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:65+37
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 5) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:65+37
    assume $IsEqual'u64'($t14, 5);

    // $t14 := opaque end: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:65+37

    // trace_local[tmp#$8]($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:9+94
    assume {:print "$track_local(18,33,8):", $t14} $t14 == $t14;

    // trace_local[tmp#$7]($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:9+94
    assume {:print "$track_local(18,33,7):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:805:9+94
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:805:9+94
L1:

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:9+94
    assume {:print "$at(10,39074,39168)"} true;
    assume {:print "$track_abort(18,33):", $t14} $t14 == $t14;

    // $t15 := move($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:9+94
    $t15 := $t14;

    // goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:805:9+94
    goto L11;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:807:21+1
    assume {:print "$at(10,39238,39239)"} true;
L0:

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:807:21+1
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // trace_local[index]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:807:13+5
    assume {:print "$track_local(18,33,3):", $t16} $t16 == $t16;

    // assert CanModify<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:34+17
    assume {:print "$at(10,39274,39291)"} true;
    assert {:msg "assert_failed(10,39274,39291): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t0];

    // $t17 := borrow_global<Diem::PreburnQueue<#0>>($t0) on_abort goto L11 with $t15 at /home/ying/diem/language/diem-framework/modules/Diem.move:808:34+17
    if (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(10,39274,39291)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(18,33):", $t15} $t15 == $t15;
        goto L11;
    }

    // $t18 := borrow_field<Diem::PreburnQueue<#0>>.preburns($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:29+72
    $t18 := $ChildMutation($t17, 0, $preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17)));

    // trace_local[preburn_queue]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:13+13
    $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''' := $Dereference($t18);
    assume {:print "$track_local(18,33,5):", $temp_0'vec'$1_Diem_PreburnWithMetadata'#0'''} $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''' == $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''';

    // $t19 := read_ref($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:809:43+13
    assume {:print "$at(10,39385,39398)"} true;
    $t19 := $Dereference($t18);

    // $t20 := Vector::length<Diem::PreburnWithMetadata<#0>>($t19) on_abort goto L11 with $t15 at /home/ying/diem/language/diem-framework/modules/Diem.move:809:28+29
    call $t20 := $1_Vector_length'$1_Diem_PreburnWithMetadata'#0''($t19);
    if ($abort_flag) {
        assume {:print "$at(10,39370,39399)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(18,33):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[queue_length]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:809:13+12
    assume {:print "$track_local(18,33,6):", $t20} $t20 == $t20;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:812:13+161
    assume {:print "$at(10,39431,39592)"} true;
L8:

    // assert Le($t16, $t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:813:17+29
    assume {:print "$at(10,39454,39483)"} true;
    assert {:msg "assert_failed(10,39454,39483): base case of the loop invariant does not hold"}
      ($t16 <= $t20);

    // assert forall j: Range(0, $t16): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t18, j)))), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    assume {:print "$at(10,39500,39578)"} true;
    assert {:msg "assert_failed(10,39500,39578): base case of the loop invariant does not hold"}
      (var $range_0 := $Range(0, $t16); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($Dereference($t18), j)))), $t1)))));

    // havoc[val]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    havoc $t16;
    assume $IsValid'u64'($t16);

    // havoc[val]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    havoc $t21;
    assume $IsValid'bool'($t21);

    // havoc[val]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    havoc $t22;
    assume $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''($t22);

    // havoc[val]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    havoc $t23;
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t23);

    // havoc[val]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    havoc $t24;
    assume $IsValid'$1_Diem_Preburn'#0''($t24);

    // havoc[val]($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    havoc $t25;
    assume $IsValid'$1_Diem_Diem'#0''($t25);

    // havoc[val]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    havoc $t26;
    assume $IsValid'u64'($t26);

    // havoc[val]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    havoc $t27;
    assume $IsValid'bool'($t27);

    // havoc[val]($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    havoc $t28;
    assume $IsValid'u64'($t28);

    // havoc[val]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    havoc $t29;
    assume $IsValid'u64'($t29);

    // assume Not(AbortFlag()) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    assume !$abort_flag;

    // assume Le($t16, $t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:813:17+29
    assume {:print "$at(10,39454,39483)"} true;
    assume ($t16 <= $t20);

    // assume forall j: Range(0, $t16): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t18, j)))), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    assume {:print "$at(10,39500,39578)"} true;
    assume (var $range_0 := $Range(0, $t16); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($Dereference($t18), j)))), $t1)))));

    // $t21 := <($t16, $t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:20+1
    assume {:print "$at(10,39613,39614)"} true;
    call $t21 := $Lt($t16, $t20);

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:811:9+560
    assume {:print "$at(10,39410,39970)"} true;
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:811:9+560
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:811:9+560
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:818:39+13
    assume {:print "$at(10,39680,39693)"} true;
L2:

    // trace_local[tmp#$10]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:818:38+22
    assume {:print "$track_local(18,33,10):", $t16} $t16 == $t16;

    // trace_local[tmp#$9]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:818:38+22
    $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''' := $Dereference($t18);
    assume {:print "$track_local(18,33,9):", $temp_0'vec'$1_Diem_PreburnWithMetadata'#0'''} $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''' == $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''';

    // $t22 := read_ref($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:818:38+22
    $t22 := $Dereference($t18);

    // $t23 := Vector::borrow<Diem::PreburnWithMetadata<#0>>($t22, $t16) on_abort goto L11 with $t15 at /home/ying/diem/language/diem-framework/modules/Diem.move:818:24+36
    call $t23 := $1_Vector_borrow'$1_Diem_PreburnWithMetadata'#0''($t22, $t16);
    if ($abort_flag) {
        assume {:print "$at(10,39665,39701)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(18,33):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[elem]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:818:17+4
    assume {:print "$track_local(18,33,2):", $t23} $t23 == $t23;

    // $t24 := get_field<Diem::PreburnWithMetadata<#0>>.preburn($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:819:24+12
    assume {:print "$at(10,39726,39738)"} true;
    $t24 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t23);

    // $t25 := get_field<Diem::Preburn<#0>>.to_burn($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:819:23+21
    $t25 := $to_burn#$1_Diem_Preburn'#0'($t24);

    // $t26 := Diem::value<#0>($t25) on_abort goto L11 with $t15 at /home/ying/diem/language/diem-framework/modules/Diem.move:819:17+28
    call $t26 := $1_Diem_value'#0'($t25);
    if ($abort_flag) {
        assume {:print "$at(10,39719,39747)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(18,33):", $t15} $t15 == $t15;
        goto L11;
    }

    // $t27 := ==($t26, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:819:46+2
    $t27 := $IsEqual'u64'($t26, $t1);

    // if ($t27) goto L5 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:819:13+213
    if ($t27) { goto L5; } else { goto L12; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:819:13+213
L6:

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:819:13+213
    goto L7;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:820:46+13
    assume {:print "$at(10,39806,39819)"} true;
L5:

    // $t30 := Vector::remove<Diem::PreburnWithMetadata<#0>>($t18, $t16) on_abort goto L11 with $t15 at /home/ying/diem/language/diem-framework/modules/Diem.move:820:31+36
    call $t30,$t18 := $1_Vector_remove'$1_Diem_PreburnWithMetadata'#0''($t18, $t16);
    if ($abort_flag) {
        assume {:print "$at(10,39791,39827)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(18,33):", $t15} $t15 == $t15;
        goto L11;
    }

    // write_back[Reference($t17).preburns]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:820:31+36
    $t17 := $UpdateMutation($t17, $Update'$1_Diem_PreburnQueue'#0''_preburns($Dereference($t17), $Dereference($t18)));

    // assert Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t17)), 256) at /home/ying/diem/language/diem-framework/modules/Diem.move:199:9+52
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:199:9+52
    assume {:print "$at(10,10265,10317)"} true;
    assert {:msg "assert_failed(10,10265,10317): data invariant does not hold"}
      (LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17))) <= 256);

    // assert forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t17))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($t17), i)))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:203:9+78
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:203:9+78
    assume {:print "$at(10,10493,10571)"} true;
    assert {:msg "assert_failed(10,10493,10571): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17)))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17)), i)))) > 0)))));

    // write_back[Diem::PreburnQueue<#0>@]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:820:31+36
    assume {:print "$at(10,39791,39827)"} true;
    $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // trace_local[preburn]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:820:21+7
    assume {:print "$track_local(18,33,4):", $t30} $t30 == $t30;

    // trace_return[0]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:822:17+14
    assume {:print "$at(10,39900,39914)"} true;
    assume {:print "$track_return(18,33,0):", $t30} $t30 == $t30;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:822:17+14
    goto L10;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:824:21+5
    assume {:print "$at(10,39950,39955)"} true;
L7:

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:824:29+1
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // $t29 := +($t16, $t28) on_abort goto L11 with $t15 at /home/ying/diem/language/diem-framework/modules/Diem.move:824:27+1
    call $t29 := $AddU64($t16, $t28);
    if ($abort_flag) {
        assume {:print "$at(10,39956,39957)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(18,33):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[index]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:824:13+5
    assume {:print "$track_local(18,33,3):", $t29} $t29 == $t29;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:824:30+1
    goto L9;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:827:9+156
    assume {:print "$at(10,39981,40137)"} true;
L4:

    // assert Eq<u64>($t16, $t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:828:13+29
    assume {:print "$at(10,40000,40029)"} true;
    assert {:msg "assert_failed(10,40000,40029): unknown assertion failed"}
      $IsEqual'u64'($t16, $t20);

    // assert forall j: Range(0, $t20): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t18, j)))), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:829:13+85
    assume {:print "$at(10,40042,40127)"} true;
    assert {:msg "assert_failed(10,40042,40127): unknown assertion failed"}
      (var $range_0 := $Range(0, $t20); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($Dereference($t18), j)))), $t1)))));

    // assert Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t17)), 256) at /home/ying/diem/language/diem-framework/modules/Diem.move:199:9+52
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:199:9+52
    assume {:print "$at(10,10265,10317)"} true;
    assert {:msg "assert_failed(10,10265,10317): data invariant does not hold"}
      (LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17))) <= 256);

    // assert forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t17))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($t17), i)))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:203:9+78
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:203:9+78
    assume {:print "$at(10,10493,10571)"} true;
    assert {:msg "assert_failed(10,10493,10571): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17)))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17)), i)))) > 0)))));

    // $t31 := 12 at /home/ying/diem/language/diem-framework/modules/Diem.move:833:37+18
    assume {:print "$at(10,40266,40284)"} true;
    $t31 := 12;
    assume $IsValid'u64'($t31);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:833:15+41
    // >> opaque call: $t30 := Errors::invalid_state($t29)

    // $t32 := opaque begin: Errors::invalid_state($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:833:15+41

    // assume WellFormed($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:833:15+41
    assume $IsValid'u64'($t32);

    // assume Eq<u64>($t32, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:833:15+41
    assume $IsEqual'u64'($t32, 1);

    // $t32 := opaque end: Errors::invalid_state($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:833:15+41

    // trace_abort($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:833:9+47
    assume {:print "$at(10,40238,40285)"} true;
    assume {:print "$track_abort(18,33):", $t32} $t32 == $t32;

    // $t15 := move($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:833:9+47
    $t15 := $t32;

    // goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:833:9+47
    goto L11;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:827:9+156
    // Loop invariant checking block for the loop started with header: L8
    assume {:print "$at(10,39981,40137)"} true;
L9:

    // assert Le($t29, $t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:813:17+29
    assume {:print "$at(10,39454,39483)"} true;
    assert {:msg "assert_failed(10,39454,39483): induction case of the loop invariant does not hold"}
      ($t29 <= $t20);

    // assert forall j: Range(0, $t29): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t18, j)))), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    assume {:print "$at(10,39500,39578)"} true;
    assert {:msg "assert_failed(10,39500,39578): induction case of the loop invariant does not hold"}
      (var $range_0 := $Range(0, $t29); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($Dereference($t18), j)))), $t1)))));

    // stop() at /home/ying/diem/language/diem-framework/modules/Diem.move:814:17+78
    assume false;
    return;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:834:5+1
    assume {:print "$at(10,40290,40291)"} true;
L10:

    // assert Not(Not(exists[@158]<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:846:9+86
    assume {:print "$at(10,40803,40889)"} true;
    assert {:msg "assert_failed(10,40803,40889): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#158, $t0);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t11)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t11, i)))), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+121
    assume {:print "$at(10,40898,41019)"} true;
    assert {:msg "assert_failed(10,40898,41019): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t11)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t11, i)))), $t1)))));

    // assert Implies(exists[@158]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:854:9+113
    assume {:print "$at(10,41291,41404)"} true;
    assert {:msg "assert_failed(10,41291,41404): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#158, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assert Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t30))), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:840:9+47
    assume {:print "$at(10,40541,40588)"} true;
    assert {:msg "assert_failed(10,40541,40588): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t30))), $t1);

    // assert Implies(Diem::spec_is_currency[@159]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@159]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#159) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#159))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@160]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#160, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@160]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#160, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@159]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@159]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#159) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#159))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@161]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#161, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@161]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#161, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@159]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@159]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#159) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#159))));

    // assert Implies(Diem::spec_is_currency[@159]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@159]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#159) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#159))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@158]<Diem::PreburnQueue<#0>>(addr), exists[@162]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#158, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#162, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@158]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#158, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@159]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@159]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#159) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#159))));

    // return $t30 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t30;
    return;

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:834:5+1
    assume {:print "$at(10,40290,40291)"} true;
L11:

    // assert Or(Not(exists[@158]<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t11)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t11, i)))), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:835:5+298
    assume {:print "$at(10,40296,40594)"} true;
    assert {:msg "assert_failed(10,40296,40594): abort not covered by any of the `aborts_if` clauses"}
      (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#158, $t0) || (var $range_0 := $Range(0, LenVec($t11)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t11, i)))), $t1))))));

    // assert Or(And(Not(exists[@158]<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t15)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t11)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t11, i)))), $t1), Eq(1, $t15))) at /home/ying/diem/language/diem-framework/modules/Diem.move:835:5+298
    assert {:msg "assert_failed(10,40296,40594): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#158, $t0) && $IsEqual'u8'(5, $t15)) || ((var $range_0 := $Range(0, LenVec($t11)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t11, i)))), $t1))))) && $IsEqual'u8'(1, $t15)));

    // abort($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:835:5+298
    $abort_code := $t15;
    $abort_flag := true;
    return;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // destroy($t17) at <internal>:1:1+10

    // goto L6 at <internal>:1:1+10
    goto L6;

}

// fun Diem::split [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:5+181
procedure {:timeLimit 40} $1_Diem_split$verify(_$t0: $1_Diem_Diem'#0', _$t1: int) returns ($ret0: $1_Diem_Diem'#0', $ret1: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t2: $1_Diem_Diem'#0';
    var $t3: $1_Diem_Diem'#0';
    var $t4: $Mutation ($1_Diem_Diem'#0');
    var $t5: $1_Diem_Diem'#0';
    var $t6: $1_Diem_Diem'#0';
    var $t7: bool;
    var $t8: int;
    var $t9: $1_Diem_Diem'#0';
    var $t0: $1_Diem_Diem'#0';
    var $t1: int;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#188: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#189: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#190: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#191: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#192: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t4));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:17+8
    assume {:print "$at(10,54472,54480)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:17+8
    assume $IsValid'u64'($t1);

    // @190 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:5+1
    assume {:print "$at(10,54135,54136)"} true;
    $1_Diem_BurnCapability'#0'_$memory#190 := $1_Diem_BurnCapability'#0'_$memory;

    // @188 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#188 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @189 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:5+1
    $1_Diem_MintCapability'#0'_$memory#189 := $1_Diem_MintCapability'#0'_$memory;

    // @192 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:5+1
    $1_Diem_Preburn'#0'_$memory#192 := $1_Diem_Preburn'#0'_$memory;

    // @191 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:5+1
    $1_Diem_PreburnQueue'#0'_$memory#191 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t3 := copy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:5+1
    $t3 := $t0;

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:5+1
    assume {:print "$track_local(18,35,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:5+1
    assume {:print "$track_local(18,35,1):", $t1} $t1 == $t1;

    // $t4 := borrow_local($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:30+9
    assume {:print "$at(10,54269,54278)"} true;
    $t4 := $Mutation($Local(0), EmptyVec(), $t0);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    // >> opaque call: $t4 := Diem::withdraw<#0>($t3, $t1)

    // $t5 := opaque begin: Diem::withdraw<#0>($t4, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27

    // $t6 := read_ref($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    $t6 := $Dereference($t4);

    // assume Identical($t7, Lt(select Diem::Diem.value($t4), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    assume ($t7 == ($value#$1_Diem_Diem'#0'($Dereference($t4)) < $t1));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
L4:

    // assume And(Lt(select Diem::Diem.value($t4), $t1), Eq(8, $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    assume (($value#$1_Diem_Diem'#0'($Dereference($t4)) < $t1) && $IsEqual'u8'(8, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    assume {:print "$at(10,54260,54287)"} true;
    assume {:print "$track_abort(18,35):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
L3:

    // havoc[mut]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t4 := $UpdateMutation($t4, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t4));

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t4));

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    assume $IsValid'$1_Diem_Diem'#0''($t5);

    // assume Eq<u64>(select Diem::Diem.value($t4), Sub(select Diem::Diem.value($t6), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t4)), ($value#$1_Diem_Diem'#0'($t6) - $t1));

    // assume Eq<u64>(select Diem::Diem.value($t5), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t5), $t1);

    // $t5 := opaque end: Diem::withdraw<#0>($t4, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27

    // write_back[LocalRoot($t0)@]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:21+27
    $t0 := $Dereference($t4);

    // trace_local[other]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:13+5
    assume {:print "$track_local(18,35,2):", $t5} $t5 == $t5;

    // $t9 := move($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:10+4
    assume {:print "$at(10,54298,54302)"} true;
    $t9 := $t0;

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:9+13
    assume {:print "$track_return(18,35,0):", $t9} $t9 == $t9;

    // trace_return[1]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:9+13
    assume {:print "$track_return(18,35,1):", $t5} $t5 == $t5;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:5+1
    assume {:print "$at(10,54315,54316)"} true;
L1:

    // assert Not(Lt(select Diem::Diem.value($t3), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1127:9+58
    assume {:print "$at(10,54342,54400)"} true;
    assert {:msg "assert_failed(10,54342,54400): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($t3) < $t1);

    // assert Eq<u64>(select Diem::Diem.value($t9), Sub(select Diem::Diem.value($t3), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1128:9+46
    assume {:print "$at(10,54409,54455)"} true;
    assert {:msg "assert_failed(10,54409,54455): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t9), ($value#$1_Diem_Diem'#0'($t3) - $t1));

    // assert Eq<u64>(select Diem::Diem.value($t5), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:9+33
    assume {:print "$at(10,54464,54497)"} true;
    assert {:msg "assert_failed(10,54464,54497): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t5), $t1);

    // assert Implies(Diem::spec_is_currency[@188]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@188]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#188) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#188))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@189]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#189, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@189]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#189, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@188]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@188]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#188) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#188))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@190]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#190, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@190]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#190, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@188]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@188]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#188) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#188))));

    // assert Implies(Diem::spec_is_currency[@188]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@188]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#188) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#188))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@191]<Diem::PreburnQueue<#0>>(addr), exists[@192]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#191, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#192, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@191]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#191, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@188]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@188]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#188) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#188))));

    // return ($t9, $t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t9;
    $ret1 := $t5;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:5+1
    assume {:print "$at(10,54315,54316)"} true;
L2:

    // assert Lt(select Diem::Diem.value($t3), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1126:5+182
    assume {:print "$at(10,54321,54503)"} true;
    assert {:msg "assert_failed(10,54321,54503): abort not covered by any of the `aborts_if` clauses"}
      ($value#$1_Diem_Diem'#0'($t3) < $t1);

    // assert And(Lt(select Diem::Diem.value($t3), $t1), Eq(8, $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1126:5+182
    assert {:msg "assert_failed(10,54321,54503): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (($value#$1_Diem_Diem'#0'($t3) < $t1) && $IsEqual'u8'(8, $t8));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1126:5+182
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun Diem::update_minting_ability<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+372
procedure {:inline 1} $1_Diem_update_minting_ability'$1_XDX_XDX'(_$t0: int, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t10: $Mutation (bool);
    var $t0: int;
    var $t1: bool;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'': $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t10));

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+1
    assume {:print "$at(10,70934,70935)"} true;
    assume {:print "$track_local(18,36,0):", $t0} $t0 == $t0;

    // trace_local[can_mint]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+1
    assume {:print "$track_local(18,36,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,71085,71130)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    assume {:print "$at(10,71085,71130)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    assume {:print "$at(10,71085,71130)"} true;
    assume {:print "$track_abort(18,36):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,71140,71170)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30

    // assume Identical($t7, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
    assume ($t7 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t7) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
    if ($t7) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
    assume {:print "$at(10,71140,71170)"} true;
    assume {:print "$track_abort(18,36):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30

    // $t8 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:71+13
    assume {:print "$at(10,71242,71255)"} true;
    $t8 := 173345816;
    assume $IsValid'address'($t8);

    // $t9 := borrow_global<Diem::CurrencyInfo<#0>>($t8) on_abort goto L2 with $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(10,71200,71217)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,36):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[currency_info]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:13+13
    $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' := $Dereference($t9);
    assume {:print "$track_local(18,36,2):", $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX''} $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' == $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'';

    // $t10 := borrow_field<Diem::CurrencyInfo<#0>>.can_mint($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+22
    assume {:print "$at(10,71266,71288)"} true;
    $t10 := $ChildMutation($t9, 7, $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t9)));

    // write_ref($t10, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+33
    $t10 := $UpdateMutation($t10, $t1);

    // write_back[Reference($t9).can_mint]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+33
    $t9 := $UpdateMutation($t9, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_can_mint($Dereference($t9), $Dereference($t10)));

    // pack_ref_deep($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+33

    // write_back[Diem::CurrencyInfo<#0>@]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+33
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:5+1
    assume {:print "$at(10,71305,71306)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Diem::update_minting_ability [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+372
procedure {:timeLimit 40} $1_Diem_update_minting_ability$verify(_$t0: int, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t10: $Mutation (bool);
    var $t0: int;
    var $t1: bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_Diem_CurrencyInfo'#0'_$memory#242: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Roles_RoleId_$memory#243: $Memory $1_Roles_RoleId;
    var $1_Diem_MintCapability'#0'_$memory#244: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#245: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#246: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#247: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t10));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+372
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume {:print "$at(10,70934,71306)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+372
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+372
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+372
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+372
    assume $IsValid'bool'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+372
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+372
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // @243 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+1
    assume {:print "$at(10,70934,70935)"} true;
    $1_Roles_RoleId_$memory#243 := $1_Roles_RoleId_$memory;

    // @245 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+1
    $1_Diem_BurnCapability'#0'_$memory#245 := $1_Diem_BurnCapability'#0'_$memory;

    // @242 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#242 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @244 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+1
    $1_Diem_MintCapability'#0'_$memory#244 := $1_Diem_MintCapability'#0'_$memory;

    // @247 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+1
    $1_Diem_Preburn'#0'_$memory#247 := $1_Diem_Preburn'#0'_$memory;

    // @246 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+1
    $1_Diem_PreburnQueue'#0'_$memory#246 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+1
    assume {:print "$track_local(18,36,0):", $t0} $t0 == $t0;

    // trace_local[can_mint]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1510:5+1
    assume {:print "$track_local(18,36,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,71085,71130)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    assume {:print "$at(10,71085,71130)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    assume {:print "$at(10,71085,71130)"} true;
    assume {:print "$track_abort(18,36):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1515:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,71140,71170)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30

    // assume Identical($t7, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
    assume ($t7 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t7) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
    if ($t7) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
    assume {:print "$at(10,71140,71170)"} true;
    assume {:print "$track_abort(18,36):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1516:9+30

    // $t8 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:71+13
    assume {:print "$at(10,71242,71255)"} true;
    $t8 := 173345816;
    assume $IsValid'address'($t8);

    // $t9 := borrow_global<Diem::CurrencyInfo<#0>>($t8) on_abort goto L2 with $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(10,71200,71217)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,36):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[currency_info]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:13+13
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t9);
    assume {:print "$track_local(18,36,2):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t10 := borrow_field<Diem::CurrencyInfo<#0>>.can_mint($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+22
    assume {:print "$at(10,71266,71288)"} true;
    $t10 := $ChildMutation($t9, 7, $can_mint#$1_Diem_CurrencyInfo'#0'($Dereference($t9)));

    // write_ref($t10, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+33
    $t10 := $UpdateMutation($t10, $t1);

    // write_back[Reference($t9).can_mint]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+33
    $t9 := $UpdateMutation($t9, $Update'$1_Diem_CurrencyInfo'#0''_can_mint($Dereference($t9), $Dereference($t10)));

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t9)), Le(select Diem::CurrencyInfo.scaling_factor($t9), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t9))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t9)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+33
    assume {:print "$at(10,71266,71299)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:5+1
    assume {:print "$at(10,71305,71306)"} true;
L1:

    // assert Not(Not(Diem::spec_is_currency[@242]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242);

    // assert Not(Not(exists[@243]<Roles::RoleId>($t3))) at /home/ying/diem/language/diem-framework/modules/Roles.move:534:9+59
    assume {:print "$at(26,23933,23992)"} true;
    assert {:msg "assert_failed(26,23933,23992): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#243, $t3);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@243]<Roles::RoleId>($t3)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+97
    assume {:print "$at(26,24001,24098)"} true;
    assert {:msg "assert_failed(26,24001,24098): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#243, $t3)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:59:9+108
    assume {:print "$at(8,2239,2347)"} true;
    assert {:msg "assert_failed(8,2239,2347): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Eq<bool>(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<#0>()), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:9+60
    assume {:print "$at(10,71878,71938)"} true;
    assert {:msg "assert_failed(10,71878,71938): post-condition does not hold"}
      $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $t1);

    // assert Implies(Diem::spec_is_currency[@242]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@242]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#242))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@244]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#244, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@244]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#244, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@242]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@242]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#242))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@245]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#245, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@245]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#245, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@242]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@242]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#242))));

    // assert Implies(Diem::spec_is_currency[@242]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@242]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#242))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@246]<Diem::PreburnQueue<#0>>(addr), exists[@247]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#246, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#247, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@246]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#246, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@242]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@242]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#242))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:5+1
    assume {:print "$at(10,71305,71306)"} true;
L2:

    // assert Or(Or(Or(Not(Diem::spec_is_currency[@242]<#0>()), Not(exists[@243]<Roles::RoleId>($t3))), Neq<u64>(select Roles::RoleId.role_id(global[@243]<Roles::RoleId>($t3)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:5+146
    assume {:print "$at(10,71311,71457)"} true;
    assert {:msg "assert_failed(10,71311,71457): abort not covered by any of the `aborts_if` clauses"}
      (((!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) || !$ResourceExists($1_Roles_RoleId_$memory#243, $t3)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#243, $t3)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(And(Not(Diem::spec_is_currency[@242]<#0>()), Eq(5, $t6)), And(Not(exists[@243]<Roles::RoleId>($t3)), Eq(5, $t6))), And(Neq<u64>(select Roles::RoleId.role_id(global[@243]<Roles::RoleId>($t3)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:5+146
    assert {:msg "assert_failed(10,71311,71457): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) && $IsEqual'u8'(5, $t6)) || (!$ResourceExists($1_Roles_RoleId_$memory#243, $t3) && $IsEqual'u8'(5, $t6))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#243, $t3)), 1) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t6)));

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:5+146
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Diem::update_xdx_exchange_rate [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+741
procedure {:timeLimit 40} $1_Diem_update_xdx_exchange_rate$verify(_$t0: int, _$t1: $1_FixedPoint32_FixedPoint32) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t3: int;
    var $t4: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t5: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t13: $Mutation ($1_FixedPoint32_FixedPoint32);
    var $t14: $Mutation ($1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent');
    var $t15: Vec (int);
    var $t16: $1_FixedPoint32_FixedPoint32;
    var $t17: int;
    var $t18: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t0: int;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $1_Roles_RoleId_$memory#259: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#260: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#261: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#262: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#263: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#264: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t12));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t14));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+741
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume {:print "$at(10,67908,68649)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+741
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+741
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+741
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+741
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+741
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+741
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, select Diem::CurrencyInfo.exchange_rate_update_events(global<Diem::CurrencyInfo<#0>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1482:9+91
    assume {:print "$at(10,69505,69596)"} true;
    assume ($t4 == $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)));

    // assume Identical($t5, pack Diem::ToXDXExchangeRateUpdateEvent(select Diem::CurrencyInfo.currency_code(global<Diem::CurrencyInfo<#0>>(a550c18)), FixedPoint32::$get_raw_value($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1483:9+228
    assume {:print "$at(10,69605,69833)"} true;
    assume ($t5 == $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)), $1_FixedPoint32_$get_raw_value($t1)));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // @259 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+1
    assume {:print "$at(10,67908,67909)"} true;
    $1_Roles_RoleId_$memory#259 := $1_Roles_RoleId_$memory;

    // @262 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+1
    $1_Diem_BurnCapability'#0'_$memory#262 := $1_Diem_BurnCapability'#0'_$memory;

    // @260 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#260 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @261 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+1
    $1_Diem_MintCapability'#0'_$memory#261 := $1_Diem_MintCapability'#0'_$memory;

    // @264 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+1
    $1_Diem_Preburn'#0'_$memory#264 := $1_Diem_Preburn'#0'_$memory;

    // @263 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+1
    $1_Diem_PreburnQueue'#0'_$memory#263 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+1
    assume {:print "$track_local(18,37,0):", $t0} $t0 == $t0;

    // trace_local[xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1446:5+1
    assume {:print "$track_local(18,37,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1450:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,68073,68118)"} true;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1450:9+45
    assume {:print "$at(10,68073,68118)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1450:9+45
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t8) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1450:9+45
    if ($t8) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1450:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1450:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'u8'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1) && $IsEqual'u8'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1450:9+45
    assume {:print "$at(10,68073,68118)"} true;
    assume {:print "$track_abort(18,37):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1450:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1450:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1450:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1451:9+34
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,68128,68162)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1451:9+34

    // assume Identical($t10, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1451:9+34
    assume ($t10 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t10) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1451:9+34
    if ($t10) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1451:9+34
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t9)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1451:9+34
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1451:9+34
    assume {:print "$at(10,68128,68162)"} true;
    assume {:print "$track_abort(18,37):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1451:9+34
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1451:9+34
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1451:9+34

    // $t11 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:75+13
    assume {:print "$at(10,68238,68251)"} true;
    $t11 := 173345816;
    assume $IsValid'address'($t11);

    // $t12 := borrow_global<Diem::CurrencyInfo<#0>>($t11) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $Mutation($Global($t11), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t11));
    }
    if ($abort_flag) {
        assume {:print "$at(10,68192,68209)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,37):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[currency_info]($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:13+13
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t12);
    assume {:print "$track_local(18,37,2):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t13 := borrow_field<Diem::CurrencyInfo<#0>>.to_xdx_exchange_rate($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+34
    assume {:print "$at(10,68262,68296)"} true;
    $t13 := $ChildMutation($t12, 2, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($Dereference($t12)));

    // write_ref($t13, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+54
    $t13 := $UpdateMutation($t13, $t1);

    // write_back[Reference($t12).to_xdx_exchange_rate]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+54
    $t12 := $UpdateMutation($t12, $Update'$1_Diem_CurrencyInfo'#0''_to_xdx_exchange_rate($Dereference($t12), $Dereference($t13)));

    // $t14 := borrow_field<Diem::CurrencyInfo<#0>>.exchange_rate_update_events($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1455:13+46
    assume {:print "$at(10,68357,68403)"} true;
    $t14 := $ChildMutation($t12, 12, $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'($Dereference($t12)));

    // $t15 := get_field<Diem::CurrencyInfo<#0>>.currency_code($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1457:33+28
    assume {:print "$at(10,68480,68508)"} true;
    $t15 := $currency_code#$1_Diem_CurrencyInfo'#0'($Dereference($t12));

    // $t16 := get_field<Diem::CurrencyInfo<#0>>.to_xdx_exchange_rate($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1458:72+35
    assume {:print "$at(10,68581,68616)"} true;
    $t16 := $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($Dereference($t12));

    // $t17 := FixedPoint32::get_raw_value($t16) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1458:43+65
    call $t17 := $1_FixedPoint32_get_raw_value($t16);
    if ($abort_flag) {
        assume {:print "$at(10,68552,68617)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,37):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t18 := pack Diem::ToXDXExchangeRateUpdateEvent($t15, $t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1456:13+215
    assume {:print "$at(10,68417,68632)"} true;
    $t18 := $1_Diem_ToXDXExchangeRateUpdateEvent($t15, $t17);

    // Event::emit_event<Diem::ToXDXExchangeRateUpdateEvent>($t14, $t18) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:9+316
    assume {:print "$at(10,68326,68642)"} true;
    call $t14 := $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'($t14, $t18);
    if ($abort_flag) {
        assume {:print "$at(10,68326,68642)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,37):", $t9} $t9 == $t9;
        goto L2;
    }

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t12)), Le(select Diem::CurrencyInfo.scaling_factor($t12), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:157:9+69
    assume {:print "$at(10,8083,8152)"} true;
    assert {:msg "assert_failed(10,8083,8152): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t12))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t12)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:9+316
    assume {:print "$at(10,68326,68642)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t12),
        $Dereference($t12));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1461:5+1
    assume {:print "$at(10,68648,68649)"} true;
L1:

    // assert Not(Not(exists[@259]<Roles::RoleId>($t3))) at /home/ying/diem/language/diem-framework/modules/Roles.move:534:9+59
    assume {:print "$at(26,23933,23992)"} true;
    assert {:msg "assert_failed(26,23933,23992): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#259, $t3);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@259]<Roles::RoleId>($t3)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+97
    assume {:print "$at(26,24001,24098)"} true;
    assert {:msg "assert_failed(26,24001,24098): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#259, $t3)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:59:9+108
    assume {:print "$at(8,2239,2347)"} true;
    assert {:msg "assert_failed(8,2239,2347): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(Not(Diem::spec_is_currency[@260]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260);

    // assert Not(Not(exists[@259]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:534:9+59
    assume {:print "$at(26,23933,23992)"} true;
    assert {:msg "assert_failed(26,23933,23992): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#259, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@259]<Roles::RoleId>($t6)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+97
    assume {:print "$at(26,24001,24098)"} true;
    assert {:msg "assert_failed(26,24001,24098): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#259, $t6)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:59:9+108
    assume {:print "$at(8,2239,2347)"} true;
    assert {:msg "assert_failed(8,2239,2347): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1477:9+85
    assume {:print "$at(10,69304,69389)"} true;
    assert {:msg "assert_failed(10,69304,69389): post-condition does not hold"}
      $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $t1);

    // assert Implies(Diem::spec_is_currency[@260]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@260]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#260))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@261]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#261, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@261]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#261, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@260]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@260]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#260))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@262]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#262, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@262]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#262, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@260]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@260]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#260))));

    // assert Implies(Diem::spec_is_currency[@260]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@260]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#260))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@263]<Diem::PreburnQueue<#0>>(addr), exists[@264]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#263, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#264, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@263]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#263, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t5, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1487:9+20
    assume {:print "$at(10,69842,69862)"} true;
    assert {:msg "assert_failed(10,69842,69862): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($EmptyEventStore, $t4, $t5); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t5, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1462:5+216
    assume {:print "$at(10,68654,68870)"} true;
    assert {:msg "assert_failed(10,68654,68870): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($EmptyEventStore, $t4, $t5); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1462:5+216
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1461:5+1
    assume {:print "$at(10,68648,68649)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Not(exists[@259]<Roles::RoleId>($t3)), Neq<u64>(select Roles::RoleId.role_id(global[@259]<Roles::RoleId>($t3)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), Not(Diem::spec_is_currency[@260]<#0>())), Not(exists[@259]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@259]<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1462:5+216
    assume {:print "$at(10,68654,68870)"} true;
    assert {:msg "assert_failed(10,68654,68870): abort not covered by any of the `aborts_if` clauses"}
      ((((((!$ResourceExists($1_Roles_RoleId_$memory#259, $t3) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#259, $t3)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260)) || !$ResourceExists($1_Roles_RoleId_$memory#259, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#259, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(And(Not(exists[@259]<Roles::RoleId>($t3)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global[@259]<Roles::RoleId>($t3)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t9))), And(Not(Diem::spec_is_currency[@260]<#0>()), Eq(5, $t9))), And(Not(exists[@259]<Roles::RoleId>($t6)), Eq(5, $t9))), And(Neq<u64>(select Roles::RoleId.role_id(global[@259]<Roles::RoleId>($t6)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1462:5+216
    assert {:msg "assert_failed(10,68654,68870): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((!$ResourceExists($1_Roles_RoleId_$memory#259, $t3) && $IsEqual'u8'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#259, $t3)), 1) && $IsEqual'u8'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t9))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260) && $IsEqual'u8'(5, $t9))) || (!$ResourceExists($1_Roles_RoleId_$memory#259, $t6) && $IsEqual'u8'(5, $t9))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#259, $t6)), 1) && $IsEqual'u8'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t9)));

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1462:5+216
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun Diem::xdx_exchange_rate [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1491:5+219
procedure {:timeLimit 40} $1_Diem_xdx_exchange_rate$verify() returns ($ret0: $1_FixedPoint32_FixedPoint32)
{
    // declare local variables
    var $t0: $1_Diem_CurrencyInfo'#0';
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: $1_Diem_CurrencyInfo'#0';
    var $t5: $1_FixedPoint32_FixedPoint32;
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $1_Diem_CurrencyInfo'#0'_$memory#183: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#184: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#185: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#186: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#187: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1500:17+6
    assume {:print "$at(10,70345,70351)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t0, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1499:9+57
    assume {:print "$at(10,70271,70328)"} true;
    assume ($t0 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // @185 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1491:5+1
    assume {:print "$at(10,69945,69946)"} true;
    $1_Diem_BurnCapability'#0'_$memory#185 := $1_Diem_BurnCapability'#0'_$memory;

    // @183 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1491:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#183 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @184 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1491:5+1
    $1_Diem_MintCapability'#0'_$memory#184 := $1_Diem_MintCapability'#0'_$memory;

    // @187 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1491:5+1
    $1_Diem_Preburn'#0'_$memory#187 := $1_Diem_Preburn'#0'_$memory;

    // @186 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1491:5+1
    $1_Diem_PreburnQueue'#0'_$memory#186 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,70043,70073)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:9+30

    // assume Identical($t1, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:9+30
    assume ($t1 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t1) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:9+30
    if ($t1) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t2));

    // trace_abort($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:9+30
    assume {:print "$at(10,70043,70073)"} true;
    assume {:print "$track_abort(18,42):", $t2} $t2 == $t2;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:9+30

    // $t3 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1494:49+13
    assume {:print "$at(10,70123,70136)"} true;
    $t3 := 173345816;
    assume $IsValid'address'($t3);

    // $t4 := get_global<Diem::CurrencyInfo<#0>>($t3) on_abort goto L2 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1494:11+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t3);
    }
    if ($abort_flag) {
        assume {:print "$at(10,70085,70098)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(18,42):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t5 := get_field<Diem::CurrencyInfo<#0>>.to_xdx_exchange_rate($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1494:10+74
    $t5 := $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($t4);

    // trace_return[0]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1494:9+75
    assume {:print "$track_return(18,42,0):", $t5} $t5 == $t5;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1495:5+1
    assume {:print "$at(10,70163,70164)"} true;
L1:

    // assert Not(Not(Diem::spec_is_currency[@183]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183);

    // assert Eq<FixedPoint32::FixedPoint32>($t5, select Diem::CurrencyInfo.to_xdx_exchange_rate($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1500:9+44
    assume {:print "$at(10,70337,70381)"} true;
    assert {:msg "assert_failed(10,70337,70381): post-condition does not hold"}
      $IsEqual'$1_FixedPoint32_FixedPoint32'($t5, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($t0));

    // assert Implies(Diem::spec_is_currency[@183]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@183]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#183))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@184]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#184, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@184]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#184, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@183]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@183]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#183))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@185]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#185, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@185]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#185, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@183]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@183]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#183))));

    // assert Implies(Diem::spec_is_currency[@183]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@183]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#183))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@186]<Diem::PreburnQueue<#0>>(addr), exists[@187]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#186, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#187, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@186]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#186, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@183]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@183]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#183))));

    // return $t5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t5;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1495:5+1
    assume {:print "$at(10,70163,70164)"} true;
L2:

    // assert Not(Diem::spec_is_currency[@183]<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:5+218
    assume {:print "$at(10,70169,70387)"} true;
    assert {:msg "assert_failed(10,70169,70387): abort not covered by any of the `aborts_if` clauses"}
      !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183);

    // assert And(Not(Diem::spec_is_currency[@183]<#0>()), Eq(5, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:5+218
    assert {:msg "assert_failed(10,70169,70387): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183) && $IsEqual'u8'(5, $t2));

    // abort($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:5+218
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun Diem::upgrade_preburn<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:651:5+1100
procedure {:inline 1} $1_Diem_upgrade_preburn'#0'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: $1_Diem_Diem'#0';
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: $1_Diem_Preburn'#0';
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: bool;
    var $t20: bool;
    var $t21: bool;
    var $t22: $1_Diem_Preburn'#0';
    var $t23: $1_Diem_Diem'#0';
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: $1_Diem_Preburn'#0';
    var $t33: Vec (int);
    var $t34: $1_Diem_PreburnWithMetadata'#0';
    var $t35: int;
    var $t36: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t37: int;
    var $t38: bool;
    var $t39: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t40: bool;
    var $t0: int;
    var $1_Diem_Preburn'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:675:9+52
    assume {:print "$at(10,31929,31981)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:683:9+52
    assume {:print "$at(10,32292,32344)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, And(exists<Diem::Preburn<#0>>($t7), Not(exists<Diem::PreburnQueue<#0>>($t7)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:684:9+103
    assume {:print "$at(10,32353,32456)"} true;
    assume ($t8 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t7) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t7)));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:692:9+52
    assume {:print "$at(10,32816,32868)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, And(exists<Diem::Preburn<#0>>($t11), Not(exists<Diem::PreburnQueue<#0>>($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:693:9+103
    assume {:print "$at(10,32877,32980)"} true;
    assume ($t12 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t11) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t11)));

    // assume Identical($t13, global<Diem::Preburn<#0>>($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:694:9+54
    assume {:print "$at(10,32989,33043)"} true;
    assume ($t13 == $ResourceValue($1_Diem_Preburn'#0'_$memory, $t11));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:651:5+1
    assume {:print "$at(10,30793,30794)"} true;
    assume {:print "$track_local(18,38,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    // >> opaque call: Roles::assert_designated_dealer($t0)
    assume {:print "$at(10,30893,30933)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    assume {:print "$at(10,30893,30933)"} true;

    // assume Identical($t15, Or(Not(exists<Roles::RoleId>($t14)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    assume ($t15 == (!$ResourceExists($1_Roles_RoleId_$memory, $t14) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 2)));

    // if ($t15) goto L15 else goto L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    if ($t15) { goto L15; } else { goto L14; }

    // label L15 at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
L15:

    // assume Or(And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 2), Eq(3, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 2) && $IsEqual'u8'(3, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    assume {:print "$at(10,30893,30933)"} true;
    assume {:print "$track_abort(18,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    goto L13;

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
L14:

    // opaque end: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:654:22+27
    // >> opaque call: $t6 := Signer::address_of($t0)
    assume {:print "$at(10,30956,30983)"} true;

    // $t17 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:654:22+27

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:654:22+27
    assume $IsValid'address'($t17);

    // assume Eq<address>($t17, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:654:22+27
    assume $IsEqual'address'($t17, $1_Signer_spec_address_of($t0));

    // $t17 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:654:22+27

    // trace_local[sender]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:654:13+6
    assume {:print "$track_local(18,38,3):", $t17} $t17 == $t17;

    // $t18 := exists<Diem::Preburn<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:30+6
    assume {:print "$at(10,31014,31020)"} true;
    $t18 := $ResourceExists($1_Diem_Preburn'#0'_$memory, $t17);

    // trace_local[preburn_exists]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:13+14
    assume {:print "$track_local(18,38,1):", $t18} $t18 == $t18;

    // $t19 := exists<Diem::PreburnQueue<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:36+6
    assume {:print "$at(10,31084,31090)"} true;
    $t19 := $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t17);

    // trace_local[preburn_queue_exists]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:13+20
    assume {:print "$track_local(18,38,2):", $t19} $t19 == $t19;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    assume {:print "$at(10,31283,31322)"} true;
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:32+20
L0:

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:659:31+1
    call $t20 := $Not($t19);

    // $t4 := $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    $t4 := $t20;

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    assume {:print "$track_local(18,38,4):", $t20} $t20 == $t20;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
L2:

    // $t21 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    $t21 := false;
    assume $IsValid'bool'($t21);

    // $t4 := $t21 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    $t4 := $t21;

    // trace_local[tmp#$4]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    assume {:print "$track_local(18,38,4):", $t21} $t21 == $t21;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
L3:

    // if ($t4) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
    if ($t4) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:660:68+6
    assume {:print "$at(10,31393,31399)"} true;
L4:

    // $t22 := move_from<Diem::Preburn<#0>>($t17) on_abort goto L13 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:660:39+9
    if (!$ResourceExists($1_Diem_Preburn'#0'_$memory, $t17)) {
        call $ExecFailureAbort();
    } else {
        $t22 := $ResourceValue($1_Diem_Preburn'#0'_$memory, $t17);
        $1_Diem_Preburn'#0'_$memory := $ResourceRemove($1_Diem_Preburn'#0'_$memory, $t17);
    }
    if ($abort_flag) {
        assume {:print "$at(10,31364,31373)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,38):", $t16} $t16 == $t16;
        goto L13;
    }

    // $t23 := unpack Diem::Preburn<#0>($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:660:17+19
    $t23 := $to_burn#$1_Diem_Preburn'#0'($t22);

    // trace_local[to_burn]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:660:27+7
    assume {:print "$track_local(18,38,5):", $t23} $t23 == $t23;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    // >> opaque call: Diem::publish_preburn_queue<#0>($t0)
    assume {:print "$at(10,31414,31454)"} true;

    // assume Identical($t24, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:586:9+52
    assume {:print "$at(10,27366,27418)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t0));

    // assume Identical($t25, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t0));

    // assume Identical($t26, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:603:9+52
    assume {:print "$at(10,28236,28288)"} true;
    assume ($t26 == $1_Signer_spec_address_of($t0));

    // assume Identical($t27, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t27 == $1_Signer_spec_address_of($t0));

    // opaque begin: Diem::publish_preburn_queue<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume {:print "$at(10,31414,31454)"} true;

    // assume Identical($t28, Or(Or(Or(Or(exists<Diem::PreburnQueue<#0>>($t24), exists<Diem::Preburn<#0>>($t24)), Not(exists<Roles::RoleId>($t25))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 2)), Not(Diem::spec_is_currency<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume ($t28 == (((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t24) || $ResourceExists($1_Diem_Preburn'#0'_$memory, $t24)) || !$ResourceExists($1_Roles_RoleId_$memory, $t25)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // if ($t28) goto L17 else goto L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    if ($t28) { goto L17; } else { goto L16; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
L17:

    // assume Or(Or(Or(Or(And(exists<Diem::PreburnQueue<#0>>($t24), Eq(6, $t16)), And(exists<Diem::Preburn<#0>>($t24), Eq(1, $t16))), And(Not(exists<Roles::RoleId>($t25)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 2), Eq(3, $t16))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume ((((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t24) && $IsEqual'u8'(6, $t16)) || ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t24) && $IsEqual'u8'(1, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t25) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 2) && $IsEqual'u8'(3, $t16))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume {:print "$at(10,31414,31454)"} true;
    assume {:print "$track_abort(18,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    goto L13;

    // label L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
L16:

    // modifies global<Diem::PreburnQueue<#0>>($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t24, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t24);
    }

    // assume exists<Diem::PreburnQueue<#0>>($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t26);

    // assume Not(exists<Diem::Preburn<#0>>($t26)) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume !$ResourceExists($1_Diem_Preburn'#0'_$memory, $t26);

    // assume Eq<u64>(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t26))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume $IsEqual'u64'($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t26))), 0);

    // opaque end: Diem::publish_preburn_queue<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40

    // $t29 := get_field<Diem::Diem<#0>>.value($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:664:17+13
    assume {:print "$at(10,31610,31623)"} true;
    $t29 := $value#$1_Diem_Diem'#0'($t23);

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:664:33+1
    $t30 := 0;
    assume $IsValid'u64'($t30);

    // $t31 := >($t29, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:664:31+1
    call $t31 := $Gt($t29, $t30);

    // if ($t31) goto L7 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:664:13+270
    if ($t31) { goto L7; } else { goto L8; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:664:13+270
L8:

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:664:13+270
    goto L9;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:665:38+7
    assume {:print "$at(10,31669,31676)"} true;
L7:

    // $t32 := pack Diem::Preburn<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:666:30+19
    assume {:print "$at(10,31729,31748)"} true;
    $t32 := $1_Diem_Preburn'#0'($t23);

    // $t33 := [] at /home/ying/diem/language/diem-framework/modules/Diem.move:667:31+3
    assume {:print "$at(10,31780,31783)"} true;
    $t33 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t33);

    // $t34 := pack Diem::PreburnWithMetadata<#0>($t32, $t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:47+124
    assume {:print "$at(10,31678,31802)"} true;
    $t34 := $1_Diem_PreburnWithMetadata'#0'($t32, $t33);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    // >> opaque call: Diem::add_preburn_to_queue<#0>($t0, $t18)

    // assume Identical($t35, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:720:9+52
    assume {:print "$at(10,34407,34459)"} true;
    assume ($t35 == $1_Signer_spec_address_of($t0));

    // assume Identical($t36, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t35))) at /home/ying/diem/language/diem-framework/modules/Diem.move:721:9+69
    assume {:print "$at(10,34468,34537)"} true;
    assume ($t36 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t35)));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:732:9+52
    assume {:print "$at(10,35109,35161)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // opaque begin: Diem::add_preburn_to_queue<#0>($t0, $t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    assume {:print "$at(10,31648,31803)"} true;

    // assume Identical($t38, Or(Or(Not(exists<Diem::PreburnQueue<#0>>($t35)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t34))), 0)), And(exists<Diem::PreburnQueue<#0>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t37))), 256)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    assume ($t38 == ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t35) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t34))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t37))) >= 256))));

    // if ($t38) goto L19 else goto L18 at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    if ($t38) { goto L19; } else { goto L18; }

    // label L19 at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
L19:

    // assume Or(Or(And(Not(exists<Diem::PreburnQueue<#0>>($t35)), Eq(1, $t16)), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t34))), 0), Eq(7, $t16))), And(And(exists<Diem::PreburnQueue<#0>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t37))), 256)), Eq(8, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    assume (((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t35) && $IsEqual'u8'(1, $t16)) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t34))), 0) && $IsEqual'u8'(7, $t16))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t37))) >= 256)) && $IsEqual'u8'(8, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    assume {:print "$at(10,31648,31803)"} true;
    assume {:print "$track_abort(18,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    goto L13;

    // label L18 at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
L18:

    // modifies global<Diem::PreburnQueue<#0>>($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t35, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t35);
    }

    // assume Identical($t39, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t35))) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79
    assume {:print "$at(10,34546,34625)"} true;
    assume ($t39 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t35)));

    // assume exists<Diem::PreburnQueue<#0>>($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t35);

    // assume Vector::eq_push_back<Diem::PreburnWithMetadata<#0>>($t39, $t36, $t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79
    assume $1_Vector_eq_push_back'$1_Diem_PreburnWithMetadata'#0''($t39, $t36, $t34);

    // opaque end: Diem::add_preburn_to_queue<#0>($t0, $t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    assume {:print "$at(10,31648,31803)"} true;
    goto L10;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    assume {:print "$at(10,31841,31862)"} true;
L9:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    // >> opaque call: Diem::destroy_zero<#0>($t12)

    // opaque begin: Diem::destroy_zero<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21

    // assume Identical($t40, Gt(select Diem::Diem.value($t23), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    assume ($t40 == ($value#$1_Diem_Diem'#0'($t23) > 0));

    // if ($t40) goto L21 else goto L20 at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    if ($t40) { goto L21; } else { goto L20; }

    // label L21 at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
L21:

    // assume And(Gt(select Diem::Diem.value($t23), 0), Eq(7, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    assume (($value#$1_Diem_Diem'#0'($t23) > 0) && $IsEqual'u8'(7, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    assume {:print "$at(10,31841,31862)"} true;
    assume {:print "$track_abort(18,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    goto L13;

    // label L20 at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
L20:

    // opaque end: Diem::destroy_zero<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
    assume {:print "$at(10,31279,31887)"} true;
L10:

    // goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
    goto L11;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
L6:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
L11:

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:673:5+1
    assume {:print "$at(10,31892,31893)"} true;
L12:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:673:5+1
    return;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:673:5+1
L13:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:673:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::upgrade_preburn [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:651:5+1100
procedure {:timeLimit 40} $1_Diem_upgrade_preburn$verify(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: $1_Diem_Diem'#0';
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: $1_Diem_Preburn'#0';
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: bool;
    var $t20: bool;
    var $t21: bool;
    var $t22: $1_Diem_Preburn'#0';
    var $t23: $1_Diem_Diem'#0';
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: $1_Diem_Preburn'#0';
    var $t33: Vec (int);
    var $t34: $1_Diem_PreburnWithMetadata'#0';
    var $t35: int;
    var $t36: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t37: int;
    var $t38: bool;
    var $t39: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t40: bool;
    var $t0: int;
    var $1_Diem_Preburn'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_Roles_RoleId_$memory#308: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#309: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#310: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#311: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#312: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#313: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:651:5+1100
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume {:print "$at(10,30793,31893)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:651:5+1100
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:651:5+1100
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:651:5+1100
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:651:5+1100
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:651:5+1100
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:651:5+1100
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:651:5+1100
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:675:9+52
    assume {:print "$at(10,31929,31981)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:683:9+52
    assume {:print "$at(10,32292,32344)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, And(exists<Diem::Preburn<#0>>($t7), Not(exists<Diem::PreburnQueue<#0>>($t7)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:684:9+103
    assume {:print "$at(10,32353,32456)"} true;
    assume ($t8 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t7) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t7)));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:692:9+52
    assume {:print "$at(10,32816,32868)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, And(exists<Diem::Preburn<#0>>($t11), Not(exists<Diem::PreburnQueue<#0>>($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:693:9+103
    assume {:print "$at(10,32877,32980)"} true;
    assume ($t12 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t11) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t11)));

    // assume Identical($t13, global<Diem::Preburn<#0>>($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:694:9+54
    assume {:print "$at(10,32989,33043)"} true;
    assume ($t13 == $ResourceValue($1_Diem_Preburn'#0'_$memory, $t11));

    // assume CanModify<Diem::Preburn<#0>>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:676:9+49
    assume {:print "$at(10,31990,32039)"} true;
    assume $1_Diem_Preburn'#0'_$modifies[$t6];

    // assume CanModify<Diem::PreburnQueue<#0>>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:677:9+54
    assume {:print "$at(10,32048,32102)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t6];

    // @308 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:677:9+54
    $1_Roles_RoleId_$memory#308 := $1_Roles_RoleId_$memory;

    // @311 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:677:9+54
    $1_Diem_BurnCapability'#0'_$memory#311 := $1_Diem_BurnCapability'#0'_$memory;

    // @309 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:677:9+54
    $1_Diem_CurrencyInfo'#0'_$memory#309 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @310 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:677:9+54
    $1_Diem_MintCapability'#0'_$memory#310 := $1_Diem_MintCapability'#0'_$memory;

    // @313 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:677:9+54
    $1_Diem_Preburn'#0'_$memory#313 := $1_Diem_Preburn'#0'_$memory;

    // @312 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:677:9+54
    $1_Diem_PreburnQueue'#0'_$memory#312 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:651:5+1
    assume {:print "$at(10,30793,30794)"} true;
    assume {:print "$track_local(18,38,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    // >> opaque call: Roles::assert_designated_dealer($t0)
    assume {:print "$at(10,30893,30933)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    assume {:print "$at(10,30893,30933)"} true;

    // assume Identical($t15, Or(Not(exists<Roles::RoleId>($t14)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    assume ($t15 == (!$ResourceExists($1_Roles_RoleId_$memory, $t14) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 2)));

    // if ($t15) goto L15 else goto L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    if ($t15) { goto L15; } else { goto L14; }

    // label L15 at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
L15:

    // assume Or(And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 2), Eq(3, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 2) && $IsEqual'u8'(3, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    assume {:print "$at(10,30893,30933)"} true;
    assume {:print "$track_abort(18,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
    goto L13;

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40
L14:

    // opaque end: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:9+40

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:654:22+27
    // >> opaque call: $t6 := Signer::address_of($t0)
    assume {:print "$at(10,30956,30983)"} true;

    // $t17 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:654:22+27

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:654:22+27
    assume $IsValid'address'($t17);

    // assume Eq<address>($t17, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:654:22+27
    assume $IsEqual'address'($t17, $1_Signer_spec_address_of($t0));

    // $t17 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:654:22+27

    // trace_local[sender]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:654:13+6
    assume {:print "$track_local(18,38,3):", $t17} $t17 == $t17;

    // $t18 := exists<Diem::Preburn<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:30+6
    assume {:print "$at(10,31014,31020)"} true;
    $t18 := $ResourceExists($1_Diem_Preburn'#0'_$memory, $t17);

    // trace_local[preburn_exists]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:13+14
    assume {:print "$track_local(18,38,1):", $t18} $t18 == $t18;

    // $t19 := exists<Diem::PreburnQueue<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:36+6
    assume {:print "$at(10,31084,31090)"} true;
    $t19 := $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t17);

    // trace_local[preburn_queue_exists]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:13+20
    assume {:print "$track_local(18,38,2):", $t19} $t19 == $t19;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    assume {:print "$at(10,31283,31322)"} true;
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:32+20
L0:

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:659:31+1
    call $t20 := $Not($t19);

    // $t4 := $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    $t4 := $t20;

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    assume {:print "$track_local(18,38,4):", $t20} $t20 == $t20;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
L2:

    // $t21 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    $t21 := false;
    assume $IsValid'bool'($t21);

    // $t4 := $t21 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    $t4 := $t21;

    // trace_local[tmp#$4]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
    assume {:print "$track_local(18,38,4):", $t21} $t21 == $t21;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:13+39
L3:

    // if ($t4) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
    if ($t4) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:660:68+6
    assume {:print "$at(10,31393,31399)"} true;
L4:

    // assert CanModify<Diem::Preburn<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:660:39+9
    assert {:msg "assert_failed(10,31364,31373): caller does not have permission to modify `Diem::Preburn<#0>` at given address"}
      $1_Diem_Preburn'#0'_$modifies[$t17];

    // $t22 := move_from<Diem::Preburn<#0>>($t17) on_abort goto L13 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:660:39+9
    if (!$ResourceExists($1_Diem_Preburn'#0'_$memory, $t17)) {
        call $ExecFailureAbort();
    } else {
        $t22 := $ResourceValue($1_Diem_Preburn'#0'_$memory, $t17);
        $1_Diem_Preburn'#0'_$memory := $ResourceRemove($1_Diem_Preburn'#0'_$memory, $t17);
    }
    if ($abort_flag) {
        assume {:print "$at(10,31364,31373)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,38):", $t16} $t16 == $t16;
        goto L13;
    }

    // $t23 := unpack Diem::Preburn<#0>($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:660:17+19
    $t23 := $to_burn#$1_Diem_Preburn'#0'($t22);

    // trace_local[to_burn]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:660:27+7
    assume {:print "$track_local(18,38,5):", $t23} $t23 == $t23;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    // >> opaque call: Diem::publish_preburn_queue<#0>($t0)
    assume {:print "$at(10,31414,31454)"} true;

    // assume Identical($t24, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:586:9+52
    assume {:print "$at(10,27366,27418)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t0));

    // assume Identical($t25, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t0));

    // assume Identical($t26, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:603:9+52
    assume {:print "$at(10,28236,28288)"} true;
    assume ($t26 == $1_Signer_spec_address_of($t0));

    // assume Identical($t27, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+44
    assume {:print "$at(26,24719,24763)"} true;
    assume ($t27 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Diem::PreburnQueue<#0>>($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume {:print "$at(10,31414,31454)"} true;
    assert {:msg "assert_failed(10,31414,31454): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t24];

    // opaque begin: Diem::publish_preburn_queue<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40

    // assume Identical($t28, Or(Or(Or(Or(exists<Diem::PreburnQueue<#0>>($t24), exists<Diem::Preburn<#0>>($t24)), Not(exists<Roles::RoleId>($t25))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 2)), Not(Diem::spec_is_currency<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume ($t28 == (((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t24) || $ResourceExists($1_Diem_Preburn'#0'_$memory, $t24)) || !$ResourceExists($1_Roles_RoleId_$memory, $t25)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // if ($t28) goto L17 else goto L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    if ($t28) { goto L17; } else { goto L16; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
L17:

    // assume Or(Or(Or(Or(And(exists<Diem::PreburnQueue<#0>>($t24), Eq(6, $t16)), And(exists<Diem::Preburn<#0>>($t24), Eq(1, $t16))), And(Not(exists<Roles::RoleId>($t25)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 2), Eq(3, $t16))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume ((((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t24) && $IsEqual'u8'(6, $t16)) || ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t24) && $IsEqual'u8'(1, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t25) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 2) && $IsEqual'u8'(3, $t16))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume {:print "$at(10,31414,31454)"} true;
    assume {:print "$track_abort(18,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    goto L13;

    // label L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
L16:

    // modifies global<Diem::PreburnQueue<#0>>($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t24, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t24);
    }

    // assume exists<Diem::PreburnQueue<#0>>($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t26);

    // assume Not(exists<Diem::Preburn<#0>>($t26)) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume !$ResourceExists($1_Diem_Preburn'#0'_$memory, $t26);

    // assume Eq<u64>(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t26))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40
    assume $IsEqual'u64'($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t26))), 0);

    // opaque end: Diem::publish_preburn_queue<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+40

    // $t29 := get_field<Diem::Diem<#0>>.value($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:664:17+13
    assume {:print "$at(10,31610,31623)"} true;
    $t29 := $value#$1_Diem_Diem'#0'($t23);

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:664:33+1
    $t30 := 0;
    assume $IsValid'u64'($t30);

    // $t31 := >($t29, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:664:31+1
    call $t31 := $Gt($t29, $t30);

    // if ($t31) goto L7 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:664:13+270
    if ($t31) { goto L7; } else { goto L8; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:664:13+270
L8:

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:664:13+270
    goto L9;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:665:38+7
    assume {:print "$at(10,31669,31676)"} true;
L7:

    // $t32 := pack Diem::Preburn<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:666:30+19
    assume {:print "$at(10,31729,31748)"} true;
    $t32 := $1_Diem_Preburn'#0'($t23);

    // $t33 := [] at /home/ying/diem/language/diem-framework/modules/Diem.move:667:31+3
    assume {:print "$at(10,31780,31783)"} true;
    $t33 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t33);

    // $t34 := pack Diem::PreburnWithMetadata<#0>($t32, $t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:47+124
    assume {:print "$at(10,31678,31802)"} true;
    $t34 := $1_Diem_PreburnWithMetadata'#0'($t32, $t33);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    // >> opaque call: Diem::add_preburn_to_queue<#0>($t0, $t18)

    // assume Identical($t35, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:720:9+52
    assume {:print "$at(10,34407,34459)"} true;
    assume ($t35 == $1_Signer_spec_address_of($t0));

    // assume Identical($t36, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t35))) at /home/ying/diem/language/diem-framework/modules/Diem.move:721:9+69
    assume {:print "$at(10,34468,34537)"} true;
    assume ($t36 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t35)));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:732:9+52
    assume {:print "$at(10,35109,35161)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Diem::PreburnQueue<#0>>($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    assume {:print "$at(10,31648,31803)"} true;
    assert {:msg "assert_failed(10,31648,31803): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t35];

    // opaque begin: Diem::add_preburn_to_queue<#0>($t0, $t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155

    // assume Identical($t38, Or(Or(Not(exists<Diem::PreburnQueue<#0>>($t35)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t34))), 0)), And(exists<Diem::PreburnQueue<#0>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t37))), 256)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    assume ($t38 == ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t35) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t34))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t37))) >= 256))));

    // if ($t38) goto L19 else goto L18 at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    if ($t38) { goto L19; } else { goto L18; }

    // label L19 at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
L19:

    // assume Or(Or(And(Not(exists<Diem::PreburnQueue<#0>>($t35)), Eq(1, $t16)), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t34))), 0), Eq(7, $t16))), And(And(exists<Diem::PreburnQueue<#0>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t37))), 256)), Eq(8, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    assume (((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t35) && $IsEqual'u8'(1, $t16)) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t34))), 0) && $IsEqual'u8'(7, $t16))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t37))) >= 256)) && $IsEqual'u8'(8, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    assume {:print "$at(10,31648,31803)"} true;
    assume {:print "$track_abort(18,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    goto L13;

    // label L18 at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
L18:

    // modifies global<Diem::PreburnQueue<#0>>($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t35, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t35);
    }

    // assume Identical($t39, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t35))) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79
    assume {:print "$at(10,34546,34625)"} true;
    assume ($t39 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t35)));

    // assume exists<Diem::PreburnQueue<#0>>($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t35);

    // assume Vector::eq_push_back<Diem::PreburnWithMetadata<#0>>($t39, $t36, $t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79
    assume $1_Vector_eq_push_back'$1_Diem_PreburnWithMetadata'#0''($t39, $t36, $t34);

    // opaque end: Diem::add_preburn_to_queue<#0>($t0, $t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+79

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:665:17+155
    assume {:print "$at(10,31648,31803)"} true;
    goto L10;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    assume {:print "$at(10,31841,31862)"} true;
L9:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    // >> opaque call: Diem::destroy_zero<#0>($t12)

    // opaque begin: Diem::destroy_zero<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21

    // assume Identical($t40, Gt(select Diem::Diem.value($t23), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    assume ($t40 == ($value#$1_Diem_Diem'#0'($t23) > 0));

    // if ($t40) goto L21 else goto L20 at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    if ($t40) { goto L21; } else { goto L20; }

    // label L21 at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
L21:

    // assume And(Gt(select Diem::Diem.value($t23), 0), Eq(7, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    assume (($value#$1_Diem_Diem'#0'($t23) > 0) && $IsEqual'u8'(7, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    assume {:print "$at(10,31841,31862)"} true;
    assume {:print "$track_abort(18,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
    goto L13;

    // label L20 at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21
L20:

    // opaque end: Diem::destroy_zero<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:670:17+21

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
    assume {:print "$at(10,31279,31887)"} true;
L10:

    // goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
    goto L11;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
L6:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:659:9+608
L11:

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:673:5+1
    assume {:print "$at(10,31892,31893)"} true;
L12:

    // assert Not(And($t8, Not(exists[@308]<Roles::RoleId>($t9)))) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+59
    assume {:print "$at(26,24772,24831)"} true;
    assert {:msg "assert_failed(26,24772,24831): function does not abort under this condition"}
      !($t8 && !$ResourceExists($1_Roles_RoleId_$memory#308, $t9));

    // assert Not(And($t8, Neq<u64>(select Roles::RoleId.role_id(global[@308]<Roles::RoleId>($t9)), 2))) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+95
    assume {:print "$at(26,24840,24935)"} true;
    assert {:msg "assert_failed(26,24840,24935): function does not abort under this condition"}
      !($t8 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#308, $t9)), 2));

    // assert Not(And($t8, Not(Diem::spec_is_currency[@309]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1549:9+67
    assume {:print "$at(10,72490,72557)"} true;
    assert {:msg "assert_failed(10,72490,72557): function does not abort under this condition"}
      !($t8 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309));

    // assert Not(Not(exists[@308]<Roles::RoleId>($t10))) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+59
    assume {:print "$at(26,24772,24831)"} true;
    assert {:msg "assert_failed(26,24772,24831): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#308, $t10);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@308]<Roles::RoleId>($t10)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+95
    assume {:print "$at(26,24840,24935)"} true;
    assert {:msg "assert_failed(26,24840,24935): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#308, $t10)), 2);

    // assert Implies($t12, And(Not(exists<Diem::Preburn<#0>>($t11)), exists<Diem::PreburnQueue<#0>>($t11))) at /home/ying/diem/language/diem-framework/modules/Diem.move:695:9+121
    assume {:print "$at(10,33052,33173)"} true;
    assert {:msg "assert_failed(10,33052,33173): post-condition does not hold"}
      ($t12 ==> (!$ResourceExists($1_Diem_Preburn'#0'_$memory, $t11) && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t11)));

    // assert Implies(And($t12, Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t13)), 0)), Eq<vector<Diem::PreburnWithMetadata<#0>>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t11)), SingleVec<Diem::PreburnWithMetadata<#0>>(pack Diem::PreburnWithMetadata<#0>($t13, [])))) at /home/ying/diem/language/diem-framework/modules/Diem.move:697:9+186
    assume {:print "$at(10,33182,33368)"} true;
    assert {:msg "assert_failed(10,33182,33368): post-condition does not hold"}
      (($t12 && ($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t13)) > 0)) ==> $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t11)), MakeVec1($1_Diem_PreburnWithMetadata'#0'($t13, $EmptyVec'u8'()))));

    // assert Implies(And($t12, Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn($t13)), 0)), Eq<vector<Diem::PreburnWithMetadata<#0>>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t11)), EmptyVec<Diem::PreburnWithMetadata<#0>>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:700:9+125
    assume {:print "$at(10,33377,33502)"} true;
    assert {:msg "assert_failed(10,33377,33502): post-condition does not hold"}
      (($t12 && $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t13)), 0)) ==> $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t11)), $EmptyVec'$1_Diem_PreburnWithMetadata'#0''()));

    // assert Implies(Diem::spec_is_currency[@309]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@309]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#309))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@310]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#310, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@310]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#310, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@309]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@309]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#309))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@311]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#311, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@311]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#311, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@309]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@309]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#309))));

    // assert Implies(Diem::spec_is_currency[@309]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@309]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#309))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@312]<Diem::PreburnQueue<#0>>(addr), exists[@313]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#312, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#313, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@312]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#312, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@309]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@309]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#309))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    return;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:673:5+1
    assume {:print "$at(10,31892,31893)"} true;
L13:

    // assert Or(Or(Or(Or(And($t8, Not(exists[@308]<Roles::RoleId>($t9))), And($t8, Neq<u64>(select Roles::RoleId.role_id(global[@308]<Roles::RoleId>($t9)), 2))), And($t8, Not(Diem::spec_is_currency[@309]<#0>()))), Not(exists[@308]<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global[@308]<Roles::RoleId>($t10)), 2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:674:5+309
    assume {:print "$at(10,31898,32207)"} true;
    assert {:msg "assert_failed(10,31898,32207): abort not covered by any of the `aborts_if` clauses"}
      ((((($t8 && !$ResourceExists($1_Roles_RoleId_$memory#308, $t9)) || ($t8 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#308, $t9)), 2))) || ($t8 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309))) || !$ResourceExists($1_Roles_RoleId_$memory#308, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#308, $t10)), 2));

    // assert Or(Or(Or(Or(And(And($t8, Not(exists[@308]<Roles::RoleId>($t9))), Eq(5, $t16)), And(And($t8, Neq<u64>(select Roles::RoleId.role_id(global[@308]<Roles::RoleId>($t9)), 2)), Eq(3, $t16))), And(And($t8, Not(Diem::spec_is_currency[@309]<#0>())), Eq(5, $t16))), And(Not(exists[@308]<Roles::RoleId>($t10)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global[@308]<Roles::RoleId>($t10)), 2), Eq(3, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:674:5+309
    assert {:msg "assert_failed(10,31898,32207): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((($t8 && !$ResourceExists($1_Roles_RoleId_$memory#308, $t9)) && $IsEqual'u8'(5, $t16)) || (($t8 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#308, $t9)), 2)) && $IsEqual'u8'(3, $t16))) || (($t8 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309)) && $IsEqual'u8'(5, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory#308, $t10) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#308, $t10)), 2) && $IsEqual'u8'(3, $t16)));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:674:5+309
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::withdraw [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1138:5+324
procedure {:timeLimit 40} $1_Diem_withdraw$verify(_$t0: $Mutation ($1_Diem_Diem'#0'), _$t1: int) returns ($ret0: $1_Diem_Diem'#0', $ret1: $Mutation ($1_Diem_Diem'#0'))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: $1_Diem_Diem'#0';
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $Mutation (int);
    var $t13: $1_Diem_Diem'#0';
    var $t0: $Mutation ($1_Diem_Diem'#0');
    var $t1: int;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#130: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#131: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#132: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#133: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#134: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t12));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1148:17+6
    assume {:print "$at(10,55364,55370)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1148:17+6
    assume $IsValid'u64'($t1);

    // @132 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1138:5+1
    assume {:print "$at(10,54880,54881)"} true;
    $1_Diem_BurnCapability'#0'_$memory#132 := $1_Diem_BurnCapability'#0'_$memory;

    // @130 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1138:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#130 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @131 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1138:5+1
    $1_Diem_MintCapability'#0'_$memory#131 := $1_Diem_MintCapability'#0'_$memory;

    // @134 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1138:5+1
    $1_Diem_Preburn'#0'_$memory#134 := $1_Diem_Preburn'#0'_$memory;

    // @133 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1138:5+1
    $1_Diem_PreburnQueue'#0'_$memory#133 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t4 := read_ref($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1138:5+1
    $t4 := $Dereference($t0);

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1138:5+1
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t0);
    assume {:print "$track_local(18,40,0):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // trace_local[amount]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1138:5+1
    assume {:print "$track_local(18,40,1):", $t1} $t1 == $t1;

    // $t5 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:16+10
    assume {:print "$at(10,55051,55061)"} true;
    $t5 := $value#$1_Diem_Diem'#0'($Dereference($t0));

    // $t6 := >=($t5, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:27+2
    call $t6 := $Ge($t5, $t1);

    // $t7 := 10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:61+26
    $t7 := 10;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:38+50
    // >> opaque call: $t7 := Errors::limit_exceeded($t6)

    // $t8 := opaque begin: Errors::limit_exceeded($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:38+50

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:38+50
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:38+50
    assume $IsEqual'u64'($t8, 8);

    // $t8 := opaque end: Errors::limit_exceeded($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:38+50

    // trace_local[tmp#$3]($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:9+80
    assume {:print "$track_local(18,40,3):", $t8} $t8 == $t8;

    // trace_local[tmp#$2]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:9+80
    assume {:print "$track_local(18,40,2):", $t6} $t6 == $t6;

    // if ($t6) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:9+80
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:9+80
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:9+80

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:9+80
    assume {:print "$at(10,55044,55124)"} true;
    assume {:print "$track_abort(18,40):", $t8} $t8 == $t8;

    // $t9 := move($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:9+80
    $t9 := $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:9+80
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1141:22+4
    assume {:print "$at(10,55147,55151)"} true;
L0:

    // $t10 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1141:22+10
    $t10 := $value#$1_Diem_Diem'#0'($Dereference($t0));

    // $t11 := -($t10, $t1) on_abort goto L3 with $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1141:33+1
    call $t11 := $Sub($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(10,55158,55159)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,40):", $t9} $t9 == $t9;
        goto L3;
    }

    // $t12 := borrow_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1141:9+10
    $t12 := $ChildMutation($t0, 0, $value#$1_Diem_Diem'#0'($Dereference($t0)));

    // write_ref($t12, $t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1141:9+32
    $t12 := $UpdateMutation($t12, $t11);

    // write_back[Reference($t0).value]($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1141:9+32
    $t0 := $UpdateMutation($t0, $Update'$1_Diem_Diem'#0''_value($Dereference($t0), $Dereference($t12)));

    // $t13 := pack Diem::Diem<#0>($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:9+22
    assume {:print "$at(10,55176,55198)"} true;
    $t13 := $1_Diem_Diem'#0'($t1);

    // trace_return[0]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:9+22
    assume {:print "$track_return(18,40,0):", $t13} $t13 == $t13;

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:9+22
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t0);
    assume {:print "$track_local(18,40,0):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1143:5+1
    assume {:print "$at(10,55203,55204)"} true;
L2:

    // assert Not(Lt(select Diem::Diem.value($t4), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1153:9+58
    assume {:print "$at(10,55498,55556)"} true;
    assert {:msg "assert_failed(10,55498,55556): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($t4) < $t1);

    // assert Eq<u64>(select Diem::Diem.value($t0), Sub(select Diem::Diem.value($t4), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1147:9+47
    assume {:print "$at(10,55300,55347)"} true;
    assert {:msg "assert_failed(10,55300,55347): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t0)), ($value#$1_Diem_Diem'#0'($t4) - $t1));

    // assert Eq<u64>(select Diem::Diem.value($t13), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1148:9+31
    assume {:print "$at(10,55356,55387)"} true;
    assert {:msg "assert_failed(10,55356,55387): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t13), $t1);

    // assert Implies(Diem::spec_is_currency[@130]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@130]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#130) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#130))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@131]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#131, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@131]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#131, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@130]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@130]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#130) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#130))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@132]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#132, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@132]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#132, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@130]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@130]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#130) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#130))));

    // assert Implies(Diem::spec_is_currency[@130]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@130]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#130) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#130))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@133]<Diem::PreburnQueue<#0>>(addr), exists[@134]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#133, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#134, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@133]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#133, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@130]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@130]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#130) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#130))));

    // return $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t13;
    $ret1 := $t0;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1143:5+1
    assume {:print "$at(10,55203,55204)"} true;
L3:

    // assert Lt(select Diem::Diem.value($t4), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1144:5+184
    assume {:print "$at(10,55209,55393)"} true;
    assert {:msg "assert_failed(10,55209,55393): abort not covered by any of the `aborts_if` clauses"}
      ($value#$1_Diem_Diem'#0'($t4) < $t1);

    // assert And(Lt(select Diem::Diem.value($t4), $t1), Eq(8, $t9)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1144:5+184
    assert {:msg "assert_failed(10,55209,55393): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (($value#$1_Diem_Diem'#0'($t4) < $t1) && $IsEqual'u8'(8, $t9));

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1144:5+184
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun Diem::withdraw_all [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1158:5+149
procedure {:timeLimit 40} $1_Diem_withdraw_all$verify(_$t0: $Mutation ($1_Diem_Diem'#0')) returns ($ret0: $1_Diem_Diem'#0', $ret1: $Mutation ($1_Diem_Diem'#0'))
{
    // declare local variables
    var $t1: int;
    var $t2: $1_Diem_Diem'#0';
    var $t3: int;
    var $t4: $1_Diem_Diem'#0';
    var $t5: $1_Diem_Diem'#0';
    var $t6: bool;
    var $t7: int;
    var $t0: $Mutation ($1_Diem_Diem'#0');
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#178: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#179: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#180: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#181: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#182: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1165:17+6
    assume {:print "$at(10,55936,55942)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t0));

    // @180 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1158:5+1
    assume {:print "$at(10,55698,55699)"} true;
    $1_Diem_BurnCapability'#0'_$memory#180 := $1_Diem_BurnCapability'#0'_$memory;

    // @178 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1158:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#178 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @179 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1158:5+1
    $1_Diem_MintCapability'#0'_$memory#179 := $1_Diem_MintCapability'#0'_$memory;

    // @182 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1158:5+1
    $1_Diem_Preburn'#0'_$memory#182 := $1_Diem_Preburn'#0'_$memory;

    // @181 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1158:5+1
    $1_Diem_PreburnQueue'#0'_$memory#181 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t2 := read_ref($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1158:5+1
    $t2 := $Dereference($t0);

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1158:5+1
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t0);
    assume {:print "$track_local(18,41,0):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // $t3 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1159:19+10
    assume {:print "$at(10,55802,55812)"} true;
    $t3 := $value#$1_Diem_Diem'#0'($Dereference($t0));

    // trace_local[val]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1159:13+3
    assume {:print "$track_local(18,41,1):", $t3} $t3 == $t3;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    // >> opaque call: $t3 := Diem::withdraw<#0>($t0, $t2)
    assume {:print "$at(10,55822,55841)"} true;

    // $t4 := opaque begin: Diem::withdraw<#0>($t0, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19

    // $t5 := read_ref($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    $t5 := $Dereference($t0);

    // assume Identical($t6, Lt(select Diem::Diem.value($t0), $t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    assume ($t6 == ($value#$1_Diem_Diem'#0'($Dereference($t0)) < $t3));

    // if ($t6) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    if ($t6) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
L4:

    // assume And(Lt(select Diem::Diem.value($t0), $t3), Eq(8, $t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    assume (($value#$1_Diem_Diem'#0'($Dereference($t0)) < $t3) && $IsEqual'u8'(8, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    assume {:print "$at(10,55822,55841)"} true;
    assume {:print "$track_abort(18,41):", $t7} $t7 == $t7;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
L3:

    // havoc[mut]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t0 := $UpdateMutation($t0, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t0));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t0));

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    assume $IsValid'$1_Diem_Diem'#0''($t4);

    // assume Eq<u64>(select Diem::Diem.value($t0), Sub(select Diem::Diem.value($t5), $t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t0)), ($value#$1_Diem_Diem'#0'($t5) - $t3));

    // assume Eq<u64>(select Diem::Diem.value($t4), $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t4), $t3);

    // $t4 := opaque end: Diem::withdraw<#0>($t0, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    assume {:print "$track_return(18,41,0):", $t4} $t4 == $t4;

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:9+19
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t0);
    assume {:print "$track_local(18,41,0):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1161:5+1
    assume {:print "$at(10,55846,55847)"} true;
L1:

    // assert Not(false) at /home/ying/diem/language/diem-framework/modules/Diem.move:1164:9+16
    assume {:print "$at(10,55903,55919)"} true;
    assert {:msg "assert_failed(10,55903,55919): function does not abort under this condition"}
      !false;

    // assert Eq<u64>(select Diem::Diem.value($t4), select Diem::Diem.value($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1165:9+40
    assume {:print "$at(10,55928,55968)"} true;
    assert {:msg "assert_failed(10,55928,55968): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t4), $value#$1_Diem_Diem'#0'($t2));

    // assert Eq<u64>(select Diem::Diem.value($t0), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1166:9+24
    assume {:print "$at(10,55977,56001)"} true;
    assert {:msg "assert_failed(10,55977,56001): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t0)), 0);

    // assert Implies(Diem::spec_is_currency[@178]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@178]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#178) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#178))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@179]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#179, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@179]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#179, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@178]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@178]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#178) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#178))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@180]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#180, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@180]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#180, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@178]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@178]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#178) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#178))));

    // assert Implies(Diem::spec_is_currency[@178]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@178]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#178) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#178))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@181]<Diem::PreburnQueue<#0>>(addr), exists[@182]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#181, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#182, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@181]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#181, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@178]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@178]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#178) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#178))));

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t4;
    $ret1 := $t0;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1161:5+1
    assume {:print "$at(10,55846,55847)"} true;
L2:

    // assert false at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:5+155
    assume {:print "$at(10,55852,56007)"} true;
    assert {:msg "assert_failed(10,55852,56007): abort not covered by any of the `aborts_if` clauses"}
      false;

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:5+155
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Diem::zero<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:5+134
procedure {:inline 1} $1_Diem_zero'$1_XUS_XUS'() returns ($ret0: $1_Diem_Diem'$1_XUS_XUS')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,53570,53600)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    assume {:print "$at(10,53570,53600)"} true;
    assume {:print "$track_abort(18,43):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:33+1
    assume {:print "$at(10,53634,53635)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:9+27
    $t3 := $1_Diem_Diem'$1_XUS_XUS'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:9+27
    assume {:print "$track_return(18,43,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
    assume {:print "$at(10,53642,53643)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::zero<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:5+134
procedure {:inline 1} $1_Diem_zero'$1_XDX_XDX'() returns ($ret0: $1_Diem_Diem'$1_XDX_XDX')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,53570,53600)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    assume {:print "$at(10,53570,53600)"} true;
    assume {:print "$track_abort(18,43):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:33+1
    assume {:print "$at(10,53634,53635)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:9+27
    $t3 := $1_Diem_Diem'$1_XDX_XDX'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:9+27
    assume {:print "$track_return(18,43,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
    assume {:print "$at(10,53642,53643)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::zero<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:5+134
procedure {:inline 1} $1_Diem_zero'#0'() returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,53570,53600)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    assume {:print "$at(10,53570,53600)"} true;
    assume {:print "$track_abort(18,43):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:33+1
    assume {:print "$at(10,53634,53635)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:9+27
    $t3 := $1_Diem_Diem'#0'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:9+27
    assume {:print "$track_return(18,43,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
    assume {:print "$at(10,53642,53643)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::zero [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:5+134
procedure {:timeLimit 40} $1_Diem_zero$verify() returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#168: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#169: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#170: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#171: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#172: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:5+134
    assume {:print "$at(10,53509,53643)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @170 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:5+1
    $1_Diem_BurnCapability'#0'_$memory#170 := $1_Diem_BurnCapability'#0'_$memory;

    // @168 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#168 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @169 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:5+1
    $1_Diem_MintCapability'#0'_$memory#169 := $1_Diem_MintCapability'#0'_$memory;

    // @172 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:5+1
    $1_Diem_Preburn'#0'_$memory#172 := $1_Diem_Preburn'#0'_$memory;

    // @171 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:5+1
    $1_Diem_PreburnQueue'#0'_$memory#171 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,53570,53600)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    assume {:print "$at(10,53570,53600)"} true;
    assume {:print "$track_abort(18,43):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1108:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:33+1
    assume {:print "$at(10,53634,53635)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:9+27
    $t3 := $1_Diem_Diem'#0'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:9+27
    assume {:print "$track_return(18,43,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
    assume {:print "$at(10,53642,53643)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@168]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@168]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1609:9+152
    assume {:print "$at(10,75511,75663)"} true;
    assert {:msg "assert_failed(10,75511,75663): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#168) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#168))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@169]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1620:9+147
    assume {:print "$at(10,76056,76203)"} true;
    assert {:msg "assert_failed(10,76056,76203): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#169, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@169]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+145
    assume {:print "$at(10,75789,75934)"} true;
    assert {:msg "assert_failed(10,75789,75934): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#169, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@168]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@168]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1629:9+152
    assume {:print "$at(10,76349,76501)"} true;
    assert {:msg "assert_failed(10,76349,76501): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#168) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#168))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@170]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1640:9+147
    assume {:print "$at(10,76894,77041)"} true;
    assert {:msg "assert_failed(10,76894,77041): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#170, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@170]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1634:9+145
    assume {:print "$at(10,76627,76772)"} true;
    assert {:msg "assert_failed(10,76627,76772): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#170, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@168]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@168]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1687:9+156
    assume {:print "$at(10,79589,79745)"} true;
    assert {:msg "assert_failed(10,79589,79745): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#168) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#168))));

    // assert Implies(Diem::spec_is_currency[@168]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@168]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1682:9+156
    assume {:print "$at(10,79301,79457)"} true;
    assert {:msg "assert_failed(10,79301,79457): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#168) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#168))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@171]<Diem::PreburnQueue<#0>>(addr), exists[@172]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1701:9+180
    assume {:print "$at(10,80406,80586)"} true;
    assert {:msg "assert_failed(10,80406,80586): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#171, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#172, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@171]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1692:9+141
    assume {:print "$at(10,79889,80030)"} true;
    assert {:msg "assert_failed(10,79889,80030): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#171, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@168]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@168]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    assume {:print "$at(10,84980,85166)"} true;
    assert {:msg "assert_failed(10,84980,85166): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#168) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#168))));

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1784:9+186
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
    assume {:print "$at(10,53642,53643)"} true;
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// struct AccountLimits::AccountLimitMutationCapability at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:11:5+51
type {:datatype} $1_AccountLimits_AccountLimitMutationCapability;
function {:constructor} $1_AccountLimits_AccountLimitMutationCapability($dummy_field: bool): $1_AccountLimits_AccountLimitMutationCapability;
function {:inline} $Update'$1_AccountLimits_AccountLimitMutationCapability'_dummy_field(s: $1_AccountLimits_AccountLimitMutationCapability, x: bool): $1_AccountLimits_AccountLimitMutationCapability {
    $1_AccountLimits_AccountLimitMutationCapability(x)
}
function $IsValid'$1_AccountLimits_AccountLimitMutationCapability'(s: $1_AccountLimits_AccountLimitMutationCapability): bool {
    $IsValid'bool'($dummy_field#$1_AccountLimits_AccountLimitMutationCapability(s))
}
function {:inline} $IsEqual'$1_AccountLimits_AccountLimitMutationCapability'(s1: $1_AccountLimits_AccountLimitMutationCapability, s2: $1_AccountLimits_AccountLimitMutationCapability): bool {
    s1 == s2
}

// struct AccountLimits::LimitsDefinition<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+398
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s1: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', s2: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';

// struct AccountLimits::LimitsDefinition<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+398
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s1: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', s2: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';

// fun AccountLimits::publish_unrestricted_limits<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:183:5+522
procedure {:inline 1} $1_AccountLimits_publish_unrestricted_limits'$1_XUS_XUS'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[publish_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:183:5+1
    assume {:print "$at(5,7826,7827)"} true;
    assume {:print "$track_local(19,8,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:49+35
    // >> opaque call: $t8 := Signer::address_of($t0)
    assume {:print "$at(5,7974,8009)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:49+35

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:49+35
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:49+35
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:49+35

    // $t9 := exists<AccountLimits::LimitsDefinition<#0>>($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:14+6
    $t9 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t8);

    // $t10 := !($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:13+1
    call $t10 := $Not($t9);

    // $t11 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:39+18
    assume {:print "$at(5,8050,8068)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:13+45
    // >> opaque call: $t12 := Errors::already_published($t11)

    // $t12 := opaque begin: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:13+45

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:13+45
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, 6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:13+45
    assume $IsEqual'u64'($t12, 6);

    // $t12 := opaque end: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:13+45

    // trace_local[tmp#$2]($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
    assume {:print "$at(5,7918,8079)"} true;
    assume {:print "$track_local(19,8,2):", $t12} $t12 == $t12;

    // trace_local[tmp#$1]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
    assume {:print "$track_local(19,8,1):", $t10} $t10 == $t10;

    // if ($t10) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
    if ($t10) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
    assume {:print "$at(5,7918,8079)"} true;
    assume {:print "$track_abort(19,8):", $t12} $t12 == $t12;

    // $t13 := move($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
    $t13 := $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+15
    assume {:print "$at(5,8110,8125)"} true;
L0:

    // trace_local[tmp#$7]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+15
    assume {:print "$track_local(19,8,7):", $t0} $t0 == $t0;

    // $t14 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:191:29+7
    assume {:print "$at(5,8196,8203)"} true;
    $t14 := 18446744073709551615;
    assume $IsValid'u64'($t14);

    // $t15 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:192:30+7
    assume {:print "$at(5,8234,8241)"} true;
    $t15 := 18446744073709551615;
    assume $IsValid'u64'($t15);

    // $t16 := 86400000000 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:194:30+7
    assume {:print "$at(5,8310,8317)"} true;
    $t16 := 86400000000;
    assume $IsValid'u64'($t16);

    // $t17 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:193:30+7
    assume {:print "$at(5,8272,8279)"} true;
    $t17 := 18446744073709551615;
    assume $IsValid'u64'($t17);

    // $t18 := pack AccountLimits::LimitsDefinition<#0>($t14, $t15, $t16, $t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:190:13+193
    assume {:print "$at(5,8139,8332)"} true;
    $t18 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t14, $t15, $t16, $t17);

    // move_to<AccountLimits::LimitsDefinition<#0>>($t18, $t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:9+7
    assume {:print "$at(5,8089,8096)"} true;
    if ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t0, $t18);
    }
    if ($abort_flag) {
        assume {:print "$at(5,8089,8096)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(19,8):", $t13} $t13 == $t13;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:197:5+1
    assume {:print "$at(5,8347,8348)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:197:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:197:5+1
L3:

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:197:5+1
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun AccountLimits::publish_unrestricted_limits<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:183:5+522
procedure {:inline 1} $1_AccountLimits_publish_unrestricted_limits'$1_XDX_XDX'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[publish_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:183:5+1
    assume {:print "$at(5,7826,7827)"} true;
    assume {:print "$track_local(19,8,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:49+35
    // >> opaque call: $t8 := Signer::address_of($t0)
    assume {:print "$at(5,7974,8009)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:49+35

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:49+35
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:49+35
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:49+35

    // $t9 := exists<AccountLimits::LimitsDefinition<#0>>($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:14+6
    $t9 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t8);

    // $t10 := !($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:185:13+1
    call $t10 := $Not($t9);

    // $t11 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:39+18
    assume {:print "$at(5,8050,8068)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:13+45
    // >> opaque call: $t12 := Errors::already_published($t11)

    // $t12 := opaque begin: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:13+45

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:13+45
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, 6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:13+45
    assume $IsEqual'u64'($t12, 6);

    // $t12 := opaque end: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:13+45

    // trace_local[tmp#$2]($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
    assume {:print "$at(5,7918,8079)"} true;
    assume {:print "$track_local(19,8,2):", $t12} $t12 == $t12;

    // trace_local[tmp#$1]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
    assume {:print "$track_local(19,8,1):", $t10} $t10 == $t10;

    // if ($t10) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
    if ($t10) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
    assume {:print "$at(5,7918,8079)"} true;
    assume {:print "$track_abort(19,8):", $t12} $t12 == $t12;

    // $t13 := move($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
    $t13 := $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:184:9+161
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+15
    assume {:print "$at(5,8110,8125)"} true;
L0:

    // trace_local[tmp#$7]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+15
    assume {:print "$track_local(19,8,7):", $t0} $t0 == $t0;

    // $t14 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:191:29+7
    assume {:print "$at(5,8196,8203)"} true;
    $t14 := 18446744073709551615;
    assume $IsValid'u64'($t14);

    // $t15 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:192:30+7
    assume {:print "$at(5,8234,8241)"} true;
    $t15 := 18446744073709551615;
    assume $IsValid'u64'($t15);

    // $t16 := 86400000000 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:194:30+7
    assume {:print "$at(5,8310,8317)"} true;
    $t16 := 86400000000;
    assume $IsValid'u64'($t16);

    // $t17 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:193:30+7
    assume {:print "$at(5,8272,8279)"} true;
    $t17 := 18446744073709551615;
    assume $IsValid'u64'($t17);

    // $t18 := pack AccountLimits::LimitsDefinition<#0>($t14, $t15, $t16, $t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:190:13+193
    assume {:print "$at(5,8139,8332)"} true;
    $t18 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t14, $t15, $t16, $t17);

    // move_to<AccountLimits::LimitsDefinition<#0>>($t18, $t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:9+7
    assume {:print "$at(5,8089,8096)"} true;
    if ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t0, $t18);
    }
    if ($abort_flag) {
        assume {:print "$at(5,8089,8096)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(19,8):", $t13} $t13 == $t13;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:197:5+1
    assume {:print "$at(5,8347,8348)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:197:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:197:5+1
L3:

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:197:5+1
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// struct XUS::XUS at /home/ying/diem/language/diem-framework/modules/XUS.move:10:5+24
type {:datatype} $1_XUS_XUS;
function {:constructor} $1_XUS_XUS($dummy_field: bool): $1_XUS_XUS;
function {:inline} $Update'$1_XUS_XUS'_dummy_field(s: $1_XUS_XUS, x: bool): $1_XUS_XUS {
    $1_XUS_XUS(x)
}
function $IsValid'$1_XUS_XUS'(s: $1_XUS_XUS): bool {
    $IsValid'bool'($dummy_field#$1_XUS_XUS(s))
}
function {:inline} $IsEqual'$1_XUS_XUS'(s1: $1_XUS_XUS, s2: $1_XUS_XUS): bool {
    s1 == s2
}

// fun XUS::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/XUS.move:13:5+595
procedure {:inline 1} $1_XUS_initialize(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $1_DiemConfig_Configuration;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $1_FixedPoint32_FixedPoint32;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: Vec (int);
    var $t28: int;
    var $t29: int;
    var $t30: $1_DiemConfig_Configuration;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t1));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t4 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t5, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t5 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t6, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t1));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/XUS.move:13:5+1
    assume {:print "$at(39,439,440)"} true;
    assume {:print "$track_local(20,0,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/XUS.move:13:5+1
    assume {:print "$track_local(20,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/XUS.move:17:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(39,536,567)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/XUS.move:17:9+31

    // assume Identical($t9, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/XUS.move:17:9+31
    assume ($t9 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t9) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/XUS.move:17:9+31
    if ($t9) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/XUS.move:17:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t10)) at /home/ying/diem/language/diem-framework/modules/XUS.move:17:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:17:9+31
    assume {:print "$at(39,536,567)"} true;
    assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:17:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/XUS.move:17:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/XUS.move:17:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/XUS.move:18:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(39,577,622)"} true;

    // assume Identical($t11, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/XUS.move:18:9+45
    assume {:print "$at(39,577,622)"} true;

    // assume Identical($t12, Or(Or(Not(exists<Roles::RoleId>($t11)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1)), Neq<address>(Signer::spec_address_of($t1), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/XUS.move:18:9+45
    assume ($t12 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t11) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453)));

    // if ($t12) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/XUS.move:18:9+45
    if ($t12) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/XUS.move:18:9+45
L6:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t11)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t1), b1e55ed), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/XUS.move:18:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t11) && $IsEqual'u8'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453) && $IsEqual'u8'(2, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:18:9+45
    assume {:print "$at(39,577,622)"} true;
    assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:18:9+45
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/XUS.move:18:9+45
L5:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/XUS.move:18:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(39,632,667)"} true;

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+35
    assume {:print "$at(39,632,667)"} true;

    // assume Identical($t14, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t13))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+35
    assume ($t14 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t13)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t14) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+35
    if ($t14) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+35
L8:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t10)), And(Not(exists<Roles::RoleId>($t13)), Eq(5, $t10))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 0), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t10)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t13) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 0) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+35
    assume {:print "$at(39,632,667)"} true;
    assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+35
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+35
L7:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+35

    // $t15 := 1 at /home/ying/diem/language/diem-framework/modules/XUS.move:23:48+1
    assume {:print "$at(39,806,807)"} true;
    $t15 := 1;
    assume $IsValid'u64'($t15);

    // $t16 := 1 at /home/ying/diem/language/diem-framework/modules/XUS.move:23:51+1
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // nop at /home/ying/diem/language/diem-framework/modules/XUS.move:23:13+40
    // >> opaque call: $t4 := FixedPoint32::create_from_rational($t2, $t3)

    // assume Identical($t17, Shl($t15, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(43,8340,8379)"} true;
    assume ($t17 == $shl($t15, 64));

    // assume Identical($t18, Shl($t16, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(43,8388,8431)"} true;
    assume ($t18 == $shl($t16, 32));

    // assume Identical($t19, Div($t17, $t18)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(43,8440,8493)"} true;
    assume ($t19 == ($t17 div $t18));

    // assume Identical($t20, Shl($t15, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(43,8340,8379)"} true;
    assume ($t20 == $shl($t15, 64));

    // assume Identical($t21, Shl($t16, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(43,8388,8431)"} true;
    assume ($t21 == $shl($t16, 32));

    // assume Identical($t22, Div($t20, $t21)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(43,8440,8493)"} true;
    assume ($t22 == ($t20 div $t21));

    // $t23 := opaque begin: FixedPoint32::create_from_rational($t15, $t16) at /home/ying/diem/language/diem-framework/modules/XUS.move:23:13+40
    assume {:print "$at(39,771,811)"} true;

    // assume Identical($t24, Or(Or(Eq<num>($t21, 0), And(Eq<num>($t22, 0), Neq<num>($t20, 0))), Gt($t22, 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/XUS.move:23:13+40
    assume ($t24 == (($IsEqual'num'($t21, 0) || ($IsEqual'num'($t22, 0) && !$IsEqual'num'($t20, 0))) || ($t22 > 18446744073709551615)));

    // if ($t24) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/XUS.move:23:13+40
    if ($t24) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/XUS.move:23:13+40
L10:

    // assume Or(Or(And(Eq<num>($t21, 0), Eq(7, $t10)), And(And(Eq<num>($t22, 0), Neq<num>($t20, 0)), Eq(7, $t10))), And(Gt($t22, 18446744073709551615), Eq(8, $t10))) at /home/ying/diem/language/diem-framework/modules/XUS.move:23:13+40
    assume ((($IsEqual'num'($t21, 0) && $IsEqual'u8'(7, $t10)) || (($IsEqual'num'($t22, 0) && !$IsEqual'num'($t20, 0)) && $IsEqual'u8'(7, $t10))) || (($t22 > 18446744073709551615) && $IsEqual'u8'(8, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:23:13+40
    assume {:print "$at(39,771,811)"} true;
    assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:23:13+40
    goto L2;

    // label L9 at /home/ying/diem/language/diem-framework/modules/XUS.move:23:13+40
L9:

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/XUS.move:23:13+40
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t23);

    // assume Eq<FixedPoint32::FixedPoint32>($t23, FixedPoint32::spec_create_from_rational($t15, $t16)) at /home/ying/diem/language/diem-framework/modules/XUS.move:23:13+40
    assume $IsEqual'$1_FixedPoint32_FixedPoint32'($t23, $1_FixedPoint32_spec_create_from_rational($t15, $t16));

    // $t23 := opaque end: FixedPoint32::create_from_rational($t15, $t16) at /home/ying/diem/language/diem-framework/modules/XUS.move:23:13+40

    // $t25 := 1000000 at /home/ying/diem/language/diem-framework/modules/XUS.move:24:13+7
    assume {:print "$at(39,849,856)"} true;
    $t25 := 1000000;
    assume $IsValid'u64'($t25);

    // $t26 := 100 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+3
    assume {:print "$at(39,895,898)"} true;
    $t26 := 100;
    assume $IsValid'u64'($t26);

    // $t27 := [88, 85, 83] at /home/ying/diem/language/diem-framework/modules/XUS.move:26:13+6
    assume {:print "$at(39,942,948)"} true;
    $t27 := MakeVec3(88, 85, 83);
    assume $IsValid'vec'u8''($t27);

    // assume Identical($t28, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t28 == $1_Signer_spec_address_of($t1));

    // assume Identical($t29, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t29 == $1_Signer_spec_address_of($t0));

    // assume Identical($t30, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t30 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t31, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t31 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t32, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t1));

    // assume Identical($t33, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume ($t33 == $1_Signer_spec_address_of($t1));

    // assume Identical($t34, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume ($t34 == $1_Signer_spec_address_of($t1));

    // Diem::register_SCS_currency<XUS::XUS>($t0, $t1, $t23, $t25, $t26, $t27) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+281
    assume {:print "$at(39,677,958)"} true;
    call $1_Diem_register_SCS_currency'$1_XUS_XUS'($t0, $t1, $t23, $t25, $t26, $t27);
    if ($abort_flag) {
        assume {:print "$at(39,677,958)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L2;
    }

    // AccountLimits::publish_unrestricted_limits<XUS::XUS>($t0) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/XUS.move:28:9+59
    assume {:print "$at(39,968,1027)"} true;
    call $1_AccountLimits_publish_unrestricted_limits'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(39,968,1027)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/XUS.move:29:5+1
    assume {:print "$at(39,1033,1034)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/XUS.move:29:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:29:5+1
L2:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:29:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/XDX.move:133:9+80
function {:inline} $1_XDX_reserve_exists($1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve): bool {
    $ResourceExists($1_XDX_Reserve_$memory, 173345816)
}

// struct XDX::XDX at /home/ying/diem/language/diem-framework/modules/XDX.move:15:5+24
type {:datatype} $1_XDX_XDX;
function {:constructor} $1_XDX_XDX($dummy_field: bool): $1_XDX_XDX;
function {:inline} $Update'$1_XDX_XDX'_dummy_field(s: $1_XDX_XDX, x: bool): $1_XDX_XDX {
    $1_XDX_XDX(x)
}
function $IsValid'$1_XDX_XDX'(s: $1_XDX_XDX): bool {
    $IsValid'bool'($dummy_field#$1_XDX_XDX(s))
}
function {:inline} $IsEqual'$1_XDX_XDX'(s1: $1_XDX_XDX, s2: $1_XDX_XDX): bool {
    s1 == s2
}

// struct XDX::Reserve at /home/ying/diem/language/diem-framework/modules/XDX.move:24:5+677
type {:datatype} $1_XDX_Reserve;
function {:constructor} $1_XDX_Reserve($mint_cap: $1_Diem_MintCapability'$1_XDX_XDX', $burn_cap: $1_Diem_BurnCapability'$1_XDX_XDX', $preburn_cap: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve;
function {:inline} $Update'$1_XDX_Reserve'_mint_cap(s: $1_XDX_Reserve, x: $1_Diem_MintCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve(x, $burn_cap#$1_XDX_Reserve(s), $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_burn_cap(s: $1_XDX_Reserve, x: $1_Diem_BurnCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), x, $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_preburn_cap(s: $1_XDX_Reserve, x: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), $burn_cap#$1_XDX_Reserve(s), x)
}
function $IsValid'$1_XDX_Reserve'(s: $1_XDX_Reserve): bool {
    $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''($mint_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''($burn_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $IsEqual'$1_XDX_Reserve'(s1: $1_XDX_Reserve, s2: $1_XDX_Reserve): bool {
    s1 == s2
}
var $1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve;

// fun XDX::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/XDX.move:48:5+973
procedure {:inline 1} $1_XDX_initialize(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t3: $1_Diem_MintCapability'$1_XDX_XDX';
    var $t4: $1_Diem_Preburn'$1_XDX_XDX';
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: $1_DiemConfig_Configuration;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $1_FixedPoint32_FixedPoint32;
    var $t29: bool;
    var $t30: bool;
    var $t31: int;
    var $t32: int;
    var $t33: Vec (int);
    var $t34: int;
    var $t35: $1_DiemConfig_Configuration;
    var $t36: int;
    var $t37: $1_Diem_MintCapability'$1_XDX_XDX';
    var $t38: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t39: bool;
    var $t40: int;
    var $t41: int;
    var $t42: $1_Diem_Preburn'$1_XDX_XDX';
    var $t43: $1_XDX_Reserve;
    var $t0: int;
    var $t1: int;
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_MintCapability'$1_XDX_XDX'': $1_Diem_MintCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_Preburn'$1_XDX_XDX'': $1_Diem_Preburn'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t8 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t9, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t9 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t1));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/XDX.move:48:5+1
    assume {:print "$at(38,2328,2329)"} true;
    assume {:print "$track_local(21,0,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/XDX.move:48:5+1
    assume {:print "$track_local(21,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/XDX.move:52:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(38,2425,2456)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/XDX.move:52:9+31

    // assume Identical($t12, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/XDX.move:52:9+31
    assume ($t12 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t12) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/XDX.move:52:9+31
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/XDX.move:52:9+31
L5:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t13)) at /home/ying/diem/language/diem-framework/modules/XDX.move:52:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/XDX.move:52:9+31
    assume {:print "$at(38,2425,2456)"} true;
    assume {:print "$track_abort(21,0):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:52:9+31
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/XDX.move:52:9+31
L4:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/XDX.move:52:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/XDX.move:54:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(38,2500,2547)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/XDX.move:54:9+47

    // assume Identical($t14, Neq<address>(Signer::spec_address_of($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/XDX.move:54:9+47
    assume ($t14 == !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // if ($t14) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/XDX.move:54:9+47
    if ($t14) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/XDX.move:54:9+47
L7:

    // assume And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t13)) at /home/ying/diem/language/diem-framework/modules/XDX.move:54:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/XDX.move:54:9+47
    assume {:print "$at(38,2500,2547)"} true;
    assume {:print "$track_abort(21,0):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:54:9+47
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/XDX.move:54:9+47
L6:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/XDX.move:54:9+47

    // $t15 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/XDX.move:56:33+9
    assume {:print "$at(38,2616,2625)"} true;
    $t15 := 173345816;
    assume $IsValid'address'($t15);

    // $t16 := exists<XDX::Reserve>($t15) at /home/ying/diem/language/diem-framework/modules/XDX.move:56:17+6
    $t16 := $ResourceExists($1_XDX_Reserve_$memory, $t15);

    // $t17 := !($t16) at /home/ying/diem/language/diem-framework/modules/XDX.move:56:16+1
    call $t17 := $Not($t16);

    // $t18 := 0 at /home/ying/diem/language/diem-framework/modules/XDX.move:56:71+8
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // nop at /home/ying/diem/language/diem-framework/modules/XDX.move:56:45+35
    // >> opaque call: $t11 := Errors::already_published($t10)

    // $t19 := opaque begin: Errors::already_published($t18) at /home/ying/diem/language/diem-framework/modules/XDX.move:56:45+35

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/XDX.move:56:45+35
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 6) at /home/ying/diem/language/diem-framework/modules/XDX.move:56:45+35
    assume $IsEqual'u64'($t19, 6);

    // $t19 := opaque end: Errors::already_published($t18) at /home/ying/diem/language/diem-framework/modules/XDX.move:56:45+35

    // trace_local[tmp#$6]($t19) at /home/ying/diem/language/diem-framework/modules/XDX.move:56:9+72
    assume {:print "$track_local(21,0,6):", $t19} $t19 == $t19;

    // trace_local[tmp#$5]($t17) at /home/ying/diem/language/diem-framework/modules/XDX.move:56:9+72
    assume {:print "$track_local(21,0,5):", $t17} $t17 == $t17;

    // if ($t17) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/XDX.move:56:9+72
    if ($t17) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/XDX.move:56:9+72
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/XDX.move:56:9+72

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/XDX.move:56:9+72

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/XDX.move:56:9+72
    assume {:print "$at(38,2592,2664)"} true;
    assume {:print "$track_abort(21,0):", $t19} $t19 == $t19;

    // $t13 := move($t19) at /home/ying/diem/language/diem-framework/modules/XDX.move:56:9+72
    $t13 := $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:56:9+72
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/XDX.move:58:13+10
    assume {:print "$at(38,2743,2753)"} true;
L0:

    // $t20 := 1 at /home/ying/diem/language/diem-framework/modules/XDX.move:59:48+1
    assume {:print "$at(38,2802,2803)"} true;
    $t20 := 1;
    assume $IsValid'u64'($t20);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/XDX.move:59:51+1
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+40
    // >> opaque call: $t14 := FixedPoint32::create_from_rational($t12, $t13)

    // assume Identical($t22, Shl($t20, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(43,8340,8379)"} true;
    assume ($t22 == $shl($t20, 64));

    // assume Identical($t23, Shl($t21, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(43,8388,8431)"} true;
    assume ($t23 == $shl($t21, 32));

    // assume Identical($t24, Div($t22, $t23)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(43,8440,8493)"} true;
    assume ($t24 == ($t22 div $t23));

    // assume Identical($t25, Shl($t20, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(43,8340,8379)"} true;
    assume ($t25 == $shl($t20, 64));

    // assume Identical($t26, Shl($t21, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(43,8388,8431)"} true;
    assume ($t26 == $shl($t21, 32));

    // assume Identical($t27, Div($t25, $t26)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(43,8440,8493)"} true;
    assume ($t27 == ($t25 div $t26));

    // $t28 := opaque begin: FixedPoint32::create_from_rational($t20, $t21) at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+40
    assume {:print "$at(38,2767,2807)"} true;

    // assume Identical($t29, Or(Or(Eq<num>($t26, 0), And(Eq<num>($t27, 0), Neq<num>($t25, 0))), Gt($t27, 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+40
    assume ($t29 == (($IsEqual'num'($t26, 0) || ($IsEqual'num'($t27, 0) && !$IsEqual'num'($t25, 0))) || ($t27 > 18446744073709551615)));

    // if ($t29) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+40
    if ($t29) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+40
L9:

    // assume Or(Or(And(Eq<num>($t26, 0), Eq(7, $t13)), And(And(Eq<num>($t27, 0), Neq<num>($t25, 0)), Eq(7, $t13))), And(Gt($t27, 18446744073709551615), Eq(8, $t13))) at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+40
    assume ((($IsEqual'num'($t26, 0) && $IsEqual'u8'(7, $t13)) || (($IsEqual'num'($t27, 0) && !$IsEqual'num'($t25, 0)) && $IsEqual'u8'(7, $t13))) || (($t27 > 18446744073709551615) && $IsEqual'u8'(8, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+40
    assume {:print "$at(38,2767,2807)"} true;
    assume {:print "$track_abort(21,0):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+40
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+40
L8:

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+40
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t28);

    // assume Eq<FixedPoint32::FixedPoint32>($t28, FixedPoint32::spec_create_from_rational($t20, $t21)) at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+40
    assume $IsEqual'$1_FixedPoint32_FixedPoint32'($t28, $1_FixedPoint32_spec_create_from_rational($t20, $t21));

    // $t28 := opaque end: FixedPoint32::create_from_rational($t20, $t21) at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+40

    // $t30 := true at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+4
    assume {:print "$at(38,2845,2849)"} true;
    $t30 := true;
    assume $IsValid'bool'($t30);

    // $t31 := 1000000 at /home/ying/diem/language/diem-framework/modules/XDX.move:61:13+7
    assume {:print "$at(38,2882,2889)"} true;
    $t31 := 1000000;
    assume $IsValid'u64'($t31);

    // $t32 := 1000 at /home/ying/diem/language/diem-framework/modules/XDX.move:62:13+4
    assume {:print "$at(38,2928,2932)"} true;
    $t32 := 1000;
    assume $IsValid'u64'($t32);

    // $t33 := [88, 68, 88] at /home/ying/diem/language/diem-framework/modules/XDX.move:63:13+6
    assume {:print "$at(38,2975,2981)"} true;
    $t33 := MakeVec3(88, 68, 88);
    assume $IsValid'vec'u8''($t33);

    // assume Identical($t34, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t34 == $1_Signer_spec_address_of($t0));

    // assume Identical($t35, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t35 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t36, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t36 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // ($t37, $t38) := Diem::register_currency<XDX::XDX>($t0, $t28, $t30, $t31, $t32, $t33) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:57:36+290
    assume {:print "$at(38,2701,2991)"} true;
    call $t37,$t38 := $1_Diem_register_currency'$1_XDX_XDX'($t0, $t28, $t30, $t31, $t32, $t33);
    if ($abort_flag) {
        assume {:print "$at(38,2701,2991)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(21,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // trace_local[burn_cap]($t38) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:24+8
    assume {:print "$track_local(21,0,2):", $t38} $t38 == $t38;

    // trace_local[mint_cap]($t37) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:14+8
    assume {:print "$track_local(21,0,3):", $t37} $t37 == $t37;

    // $t39 := false at /home/ying/diem/language/diem-framework/modules/XDX.move:66:55+5
    assume {:print "$at(38,3080,3085)"} true;
    $t39 := false;
    assume $IsValid'bool'($t39);

    // assume Identical($t40, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t40 == $1_Signer_spec_address_of($t1));

    // Diem::update_minting_ability<XDX::XDX>($t1, $t39) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:66:9+52
    assume {:print "$at(38,3034,3086)"} true;
    call $1_Diem_update_minting_ability'$1_XDX_XDX'($t1, $t39);
    if ($abort_flag) {
        assume {:print "$at(38,3034,3086)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(21,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // AccountLimits::publish_unrestricted_limits<XDX::XDX>($t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:67:9+59
    assume {:print "$at(38,3096,3155)"} true;
    call $1_AccountLimits_publish_unrestricted_limits'$1_XDX_XDX'($t0);
    if ($abort_flag) {
        assume {:print "$at(38,3096,3155)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(21,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // assume Identical($t41, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t41 == $1_Signer_spec_address_of($t1));

    // $t42 := Diem::create_preburn<XDX::XDX>($t1) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:68:27+37
    assume {:print "$at(38,3183,3220)"} true;
    call $t42 := $1_Diem_create_preburn'$1_XDX_XDX'($t1);
    if ($abort_flag) {
        assume {:print "$at(38,3183,3220)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(21,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // trace_local[preburn_cap]($t42) at /home/ying/diem/language/diem-framework/modules/XDX.move:68:13+11
    assume {:print "$track_local(21,0,4):", $t42} $t42 == $t42;

    // $t43 := pack XDX::Reserve($t37, $t38, $t42) at /home/ying/diem/language/diem-framework/modules/XDX.move:69:29+43
    assume {:print "$at(38,3250,3293)"} true;
    $t43 := $1_XDX_Reserve($t37, $t38, $t42);

    // move_to<XDX::Reserve>($t43, $t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:69:9+7
    if ($ResourceExists($1_XDX_Reserve_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_XDX_Reserve_$memory := $ResourceUpdate($1_XDX_Reserve_$memory, $t0, $t43);
    }
    if ($abort_flag) {
        assume {:print "$at(38,3230,3237)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(21,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/XDX.move:70:5+1
    assume {:print "$at(38,3300,3301)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/XDX.move:70:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:70:5+1
L3:

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/XDX.move:70:5+1
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:296:5+106
function {:inline} $1_VASPDomain_$tc_domain_manager_exists($1_VASPDomain_VASPDomainManager_$memory: $Memory $1_VASPDomain_VASPDomainManager): bool {
    $ResourceExists($1_VASPDomain_VASPDomainManager_$memory, 186537453)
}

// struct VASPDomain::VASPDomain at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:23:5+110
type {:datatype} $1_VASPDomain_VASPDomain;
function {:constructor} $1_VASPDomain_VASPDomain($domain: Vec (int)): $1_VASPDomain_VASPDomain;
function {:inline} $Update'$1_VASPDomain_VASPDomain'_domain(s: $1_VASPDomain_VASPDomain, x: Vec (int)): $1_VASPDomain_VASPDomain {
    $1_VASPDomain_VASPDomain(x)
}
function $IsValid'$1_VASPDomain_VASPDomain'(s: $1_VASPDomain_VASPDomain): bool {
    $IsValid'vec'u8''($domain#$1_VASPDomain_VASPDomain(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomain'(s1: $1_VASPDomain_VASPDomain, s2: $1_VASPDomain_VASPDomain): bool {
    s1 == s2
}

// struct VASPDomain::VASPDomainEvent at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:37:5+256
type {:datatype} $1_VASPDomain_VASPDomainEvent;
function {:constructor} $1_VASPDomain_VASPDomainEvent($removed: bool, $domain: $1_VASPDomain_VASPDomain, $address: int): $1_VASPDomain_VASPDomainEvent;
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_removed(s: $1_VASPDomain_VASPDomainEvent, x: bool): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent(x, $domain#$1_VASPDomain_VASPDomainEvent(s), $address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_domain(s: $1_VASPDomain_VASPDomainEvent, x: $1_VASPDomain_VASPDomain): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent($removed#$1_VASPDomain_VASPDomainEvent(s), x, $address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_address(s: $1_VASPDomain_VASPDomainEvent, x: int): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent($removed#$1_VASPDomain_VASPDomainEvent(s), $domain#$1_VASPDomain_VASPDomainEvent(s), x)
}
function $IsValid'$1_VASPDomain_VASPDomainEvent'(s: $1_VASPDomain_VASPDomainEvent): bool {
    $IsValid'bool'($removed#$1_VASPDomain_VASPDomainEvent(s))
      && $IsValid'$1_VASPDomain_VASPDomain'($domain#$1_VASPDomain_VASPDomainEvent(s))
      && $IsValid'address'($address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomainEvent'(s1: $1_VASPDomain_VASPDomainEvent, s2: $1_VASPDomain_VASPDomainEvent): bool {
    s1 == s2
}

// struct VASPDomain::VASPDomainManager at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:31:5+235
type {:datatype} $1_VASPDomain_VASPDomainManager;
function {:constructor} $1_VASPDomain_VASPDomainManager($vasp_domain_events: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): $1_VASPDomain_VASPDomainManager;
function {:inline} $Update'$1_VASPDomain_VASPDomainManager'_vasp_domain_events(s: $1_VASPDomain_VASPDomainManager, x: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): $1_VASPDomain_VASPDomainManager {
    $1_VASPDomain_VASPDomainManager(x)
}
function $IsValid'$1_VASPDomain_VASPDomainManager'(s: $1_VASPDomain_VASPDomainManager): bool {
    $IsValid'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''($vasp_domain_events#$1_VASPDomain_VASPDomainManager(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomainManager'(s1: $1_VASPDomain_VASPDomainManager, s2: $1_VASPDomain_VASPDomainManager): bool {
    s1 == s2
}
var $1_VASPDomain_VASPDomainManager_$memory: $Memory $1_VASPDomain_VASPDomainManager;

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:44:5+125
function {:inline} $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, 186537453)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:48:5+69
function {:inline} $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory)
}

// struct TransactionFee::TransactionFee<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:13:5+116
type {:datatype} $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:constructor} $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance: $1_Diem_Diem'$1_XUS_XUS', $preburn: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_balance(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'(x, $preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_preburn(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
      && $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s1: $1_TransactionFee_TransactionFee'$1_XUS_XUS', s2: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS';

// fun TransactionFee::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:23:5+253
procedure {:inline 1} $1_TransactionFee_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:23:5+1
    assume {:print "$at(31,865,866)"} true;
    assume {:print "$track_local(24,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:26:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(31,933,964)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:26:9+31

    // assume Identical($t2, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:26:9+31
    assume ($t2 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t2) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:26:9+31
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:26:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t3)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:26:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:26:9+31
    assume {:print "$at(31,933,964)"} true;
    assume {:print "$track_abort(24,2):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:26:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:26:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:26:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(31,974,1019)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:9+45
    assume {:print "$at(31,974,1019)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:9+45
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:9+45
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:9+45
L6:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t3)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t3))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t3))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t3)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'u8'(3, $t3))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t3)));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:9+45
    assume {:print "$at(31,974,1019)"} true;
    assume {:print "$track_abort(24,2):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:9+45
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:9+45
L5:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:9+45

    // TransactionFee::add_txn_fee_currency<XUS::XUS>($t0) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:29:9+37
    assume {:print "$at(31,1074,1111)"} true;
    call $1_TransactionFee_add_txn_fee_currency'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,1074,1111)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(24,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:5+1
    assume {:print "$at(31,1117,1118)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun TransactionFee::add_txn_fee_currency<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:55:5+508
procedure {:inline 1} $1_TransactionFee_add_txn_fee_currency'$1_XUS_XUS'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Diem_Diem'$1_XUS_XUS';
    var $t12: int;
    var $t13: $1_Diem_Preburn'$1_XUS_XUS';
    var $t14: $1_TransactionFee_TransactionFee'$1_XUS_XUS';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:55:5+1
    assume {:print "$at(31,2088,2089)"} true;
    assume {:print "$track_local(24,0,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:56:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(31,2168,2213)"} true;

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:56:9+45
    assume {:print "$at(31,2168,2213)"} true;

    // assume Identical($t4, Or(Or(Not(exists<Roles::RoleId>($t3)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t3)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:56:9+45
    assume ($t4 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t3) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t3)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t4) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:56:9+45
    if ($t4) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:56:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t3)), Eq(5, $t5)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t3)), 1), Eq(3, $t5))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t5))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:56:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t3) && $IsEqual'u8'(5, $t5)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t3)), 1) && $IsEqual'u8'(3, $t5))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'u8'(2, $t5)));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:56:9+45
    assume {:print "$at(31,2168,2213)"} true;
    assume {:print "$track_abort(24,0):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:56:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:56:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:56:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:57:9+36
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(31,2223,2259)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:57:9+36

    // assume Identical($t6, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:57:9+36
    assume ($t6 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t6) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:57:9+36
    if ($t6) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:57:9+36
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t5)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:57:9+36
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:57:9+36
    assume {:print "$at(31,2223,2259)"} true;
    assume {:print "$track_abort(24,0):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:57:9+36
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:57:9+36
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:57:9+36

    // $t7 := TransactionFee::is_coin_initialized<#0>() on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:59:14+31
    assume {:print "$at(31,2290,2321)"} true;
    call $t7 := $1_TransactionFee_is_coin_initialized'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(31,2290,2321)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,0):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t8 := !($t7) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:59:13+1
    call $t8 := $Not($t7);

    // $t9 := 0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:39+16
    assume {:print "$at(31,2361,2377)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:13+43
    // >> opaque call: $t6 := Errors::already_published($t5)

    // $t10 := opaque begin: Errors::already_published($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:13+43

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:13+43
    assume $IsValid'u64'($t10);

    // assume Eq<u64>($t10, 6) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:13+43
    assume $IsEqual'u64'($t10, 6);

    // $t10 := opaque end: Errors::already_published($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:13+43

    // trace_local[tmp#$2]($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:58:9+119
    assume {:print "$at(31,2269,2388)"} true;
    assume {:print "$track_local(24,0,2):", $t10} $t10 == $t10;

    // trace_local[tmp#$1]($t8) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:58:9+119
    assume {:print "$track_local(24,0,1):", $t8} $t8 == $t8;

    // if ($t8) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:58:9+119
    if ($t8) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:58:9+119
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:58:9+119

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:58:9+119
    assume {:print "$at(31,2269,2388)"} true;
    assume {:print "$track_abort(24,0):", $t10} $t10 == $t10;

    // $t5 := move($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:58:9+119
    $t5 := $t10;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:58:9+119
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:63:13+10
    assume {:print "$at(31,2419,2429)"} true;
L0:

    // $t11 := Diem::zero<#0>() on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:65:26+12
    assume {:print "$at(31,2495,2507)"} true;
    call $t11 := $1_Diem_zero'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(31,2495,2507)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,0):", $t5} $t5 == $t5;
        goto L3;
    }

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // $t13 := Diem::create_preburn<#0>($t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:66:26+32
    assume {:print "$at(31,2534,2566)"} true;
    call $t13 := $1_Diem_create_preburn'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,2534,2566)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,0):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t14 := pack TransactionFee::TransactionFee<#0>($t11, $t13) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:13+137
    assume {:print "$at(31,2443,2580)"} true;
    $t14 := $1_TransactionFee_TransactionFee'$1_XUS_XUS'($t11, $t13);

    // move_to<TransactionFee::TransactionFee<#0>>($t14, $t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+7
    assume {:print "$at(31,2398,2405)"} true;
    if ($ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory := $ResourceUpdate($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t0, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(31,2398,2405)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,0):", $t5} $t5 == $t5;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:69:5+1
    assume {:print "$at(31,2595,2596)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:69:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:69:5+1
L3:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:69:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun TransactionFee::is_coin_initialized<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:44:5+125
procedure {:inline 1} $1_TransactionFee_is_coin_initialized'$1_XUS_XUS'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:45:42+19
    assume {:print "$at(31,1751,1770)"} true;
    $t0 := 186537453;
    assume $IsValid'address'($t0);

    // $t1 := exists<TransactionFee::TransactionFee<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:45:9+6
    $t1 := $ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:45:9+53
    assume {:print "$track_return(24,3,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:46:5+1
    assume {:print "$at(31,1776,1777)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:46:5+1
    $ret0 := $t1;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:120:10+85
function {:inline} $1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): bool {
    $ResourceExists($1_DualAttestation_Credential_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:544:9+78
function {:inline} $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): bool {
    $ResourceExists($1_DualAttestation_Limit_$memory, 173345816)
}

// struct DualAttestation::BaseUrlRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:56:5+257
type {:datatype} $1_DualAttestation_BaseUrlRotationEvent;
function {:constructor} $1_DualAttestation_BaseUrlRotationEvent($new_base_url: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_BaseUrlRotationEvent;
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_new_base_url(s: $1_DualAttestation_BaseUrlRotationEvent, x: Vec (int)): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_BaseUrlRotationEvent, x: int): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_BaseUrlRotationEvent'(s: $1_DualAttestation_BaseUrlRotationEvent): bool {
    $IsValid'vec'u8''($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(s1: $1_DualAttestation_BaseUrlRotationEvent, s2: $1_DualAttestation_BaseUrlRotationEvent): bool {
    s1 == s2
}

// struct DualAttestation::ComplianceKeyRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:48:5+303
type {:datatype} $1_DualAttestation_ComplianceKeyRotationEvent;
function {:constructor} $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_ComplianceKeyRotationEvent;
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_new_compliance_public_key(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: Vec (int)): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: int): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_ComplianceKeyRotationEvent'(s: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    $IsValid'vec'u8''($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(s1: $1_DualAttestation_ComplianceKeyRotationEvent, s2: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    s1 == s2
}

// struct DualAttestation::Credential at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:18:5+1467
type {:datatype} $1_DualAttestation_Credential;
function {:constructor} $1_DualAttestation_Credential($human_name: Vec (int), $base_url: Vec (int), $compliance_public_key: Vec (int), $expiration_date: int, $compliance_key_rotation_events: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', $base_url_rotation_events: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential;
function {:inline} $Update'$1_DualAttestation_Credential'_human_name(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential(x, $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), x, $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_public_key(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), x, $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_expiration_date(s: $1_DualAttestation_Credential, x: int): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), x, $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_key_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), x, $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), x)
}
function $IsValid'$1_DualAttestation_Credential'(s: $1_DualAttestation_Credential): bool {
    $IsValid'vec'u8''($human_name#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($base_url#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($compliance_public_key#$1_DualAttestation_Credential(s))
      && $IsValid'u64'($expiration_date#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''($compliance_key_rotation_events#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''($base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Credential'(s1: $1_DualAttestation_Credential, s2: $1_DualAttestation_Credential): bool {
    s1 == s2
}
var $1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential;

// struct DualAttestation::Limit at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:43:5+58
type {:datatype} $1_DualAttestation_Limit;
function {:constructor} $1_DualAttestation_Limit($micro_xdx_limit: int): $1_DualAttestation_Limit;
function {:inline} $Update'$1_DualAttestation_Limit'_micro_xdx_limit(s: $1_DualAttestation_Limit, x: int): $1_DualAttestation_Limit {
    $1_DualAttestation_Limit(x)
}
function $IsValid'$1_DualAttestation_Limit'(s: $1_DualAttestation_Limit): bool {
    $IsValid'u64'($micro_xdx_limit#$1_DualAttestation_Limit(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Limit'(s1: $1_DualAttestation_Limit, s2: $1_DualAttestation_Limit): bool {
    s1 == s2
}
var $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit;

// fun DualAttestation::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:482:5+574
procedure {:inline 1} $1_DualAttestation_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: $1_DualAttestation_Limit;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u128': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t6, Mul(1000, Diem::spec_scaling_factor<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:499:9+86
    assume {:print "$at(21,22239,22325)"} true;
    assume ($t6 == (1000 * $1_Diem_spec_scaling_factor'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:482:5+1
    assume {:print "$at(21,21435,21436)"} true;
    assume {:print "$track_local(25,10,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:483:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(21,21488,21519)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:483:9+31

    // assume Identical($t7, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:483:9+31
    assume ($t7 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t7) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:483:9+31
    if ($t7) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:483:9+31
L7:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t8)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:483:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:483:9+31
    assume {:print "$at(21,21488,21519)"} true;
    assume {:print "$track_abort(25,10):", $t8} $t8 == $t8;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:483:9+31
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:483:9+31
L6:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:483:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(21,21529,21572)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:9+43

    // assume Identical($t9, Neq<address>(Signer::spec_address_of($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:9+43
    assume ($t9 == !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // if ($t9) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:9+43
    if ($t9) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:9+43
L9:

    // assume And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t8)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:9+43
    assume {:print "$at(21,21529,21572)"} true;
    assume {:print "$track_abort(25,10):", $t8} $t8 == $t8;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:9+43
    goto L5;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:9+43
L8:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:9+43

    // $t10 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:31+9
    assume {:print "$at(21,21631,21640)"} true;
    $t10 := 173345816;
    assume $IsValid'address'($t10);

    // $t11 := exists<DualAttestation::Limit>($t10) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:17+6
    $t11 := $ResourceExists($1_DualAttestation_Limit_$memory, $t10);

    // $t12 := !($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:16+1
    call $t12 := $Not($t11);

    // $t13 := 1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:69+6
    $t13 := 1;
    assume $IsValid'u64'($t13);

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:43+33
    // >> opaque call: $t10 := Errors::already_published($t9)

    // $t14 := opaque begin: Errors::already_published($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:43+33

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:43+33
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 6) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:43+33
    assume $IsEqual'u64'($t14, 6);

    // $t14 := opaque end: Errors::already_published($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:43+33

    // trace_local[tmp#$3]($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+68
    assume {:print "$track_local(25,10,3):", $t14} $t14 == $t14;

    // trace_local[tmp#$2]($t12) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+68
    assume {:print "$track_local(25,10,2):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+68
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+68
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+68

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+68
    assume {:print "$at(21,21609,21677)"} true;
    assume {:print "$track_abort(25,10):", $t14} $t14 == $t14;

    // $t8 := move($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+68
    $t8 := $t14;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+68
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:30+30
    assume {:print "$at(21,21708,21738)"} true;
L0:

    // $t15 := 1000 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:30+30
    $t15 := 1000;
    assume $IsValid'u64'($t15);

    // $t16 := (u128)($t15) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:29+40
    call $t16 := $CastU128($t15);
    if ($abort_flag) {
        assume {:print "$at(21,21707,21747)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(25,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t17 := Diem::scaling_factor<XDX::XDX>() on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:73+27
    call $t17 := $1_Diem_scaling_factor'$1_XDX_XDX'();
    if ($abort_flag) {
        assume {:print "$at(21,21751,21778)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(25,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t18 := (u128)($t17) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:72+37
    call $t18 := $CastU128($t17);
    if ($abort_flag) {
        assume {:print "$at(21,21750,21787)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(25,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t19 := *($t16, $t18) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:70+1
    call $t19 := $MulU128($t16, $t18);
    if ($abort_flag) {
        assume {:print "$at(21,21748,21749)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(25,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // trace_local[initial_limit]($t19) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:13+13
    assume {:print "$track_local(25,10,1):", $t19} $t19 == $t19;

    // $t20 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:33+7
    assume {:print "$at(21,21821,21828)"} true;
    $t20 := 18446744073709551615;
    assume $IsValid'u128'($t20);

    // $t21 := <=($t19, $t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:30+2
    call $t21 := $Le($t19, $t20);

    // $t22 := 1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:65+6
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:42+30
    // >> opaque call: $t19 := Errors::limit_exceeded($t18)

    // $t23 := opaque begin: Errors::limit_exceeded($t22) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:42+30

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:42+30
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:42+30
    assume $IsEqual'u64'($t23, 8);

    // $t23 := opaque end: Errors::limit_exceeded($t22) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:42+30

    // trace_local[tmp#$5]($t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+64
    assume {:print "$track_local(25,10,5):", $t23} $t23 == $t23;

    // trace_local[tmp#$4]($t21) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+64
    assume {:print "$track_local(25,10,4):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+64
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+64
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+64

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+64
    assume {:print "$at(21,21797,21861)"} true;
    assume {:print "$track_abort(25,10):", $t23} $t23 == $t23;

    // $t8 := move($t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+64
    $t8 := $t23;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+64
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:13+10
    assume {:print "$at(21,21892,21902)"} true;
L2:

    // $t24 := (u64)($t19) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:491:34+22
    assume {:print "$at(21,21957,21979)"} true;
    call $t24 := $CastU64($t19);
    if ($abort_flag) {
        assume {:print "$at(21,21957,21979)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(25,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t25 := pack DualAttestation::Limit($t24) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:490:13+77
    assume {:print "$at(21,21916,21993)"} true;
    $t25 := $1_DualAttestation_Limit($t24);

    // move_to<DualAttestation::Limit>($t25, $t0) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:9+7
    assume {:print "$at(21,21871,21878)"} true;
    if ($ResourceExists($1_DualAttestation_Limit_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DualAttestation_Limit_$memory := $ResourceUpdate($1_DualAttestation_Limit_$memory, $t0, $t25);
    }
    if ($abort_flag) {
        assume {:print "$at(21,21871,21878)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(25,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:494:5+1
    assume {:print "$at(21,22008,22009)"} true;
L4:

    // return () at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:494:5+1
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:494:5+1
L5:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:494:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// struct DiemTransactionPublishingOption::DiemTransactionPublishingOption at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:24:5+381
type {:datatype} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:constructor} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list: Vec (Vec (int)), $module_publishing_allowed: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_script_allow_list(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: Vec (Vec (int))): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(x, $module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_module_publishing_allowed(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s), x)
}
function $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    $IsValid'vec'vec'u8'''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
      && $IsValid'bool'($module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s1: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, s2: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    s1 == s2
}

// fun DiemTransactionPublishingOption::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:35:5+436
procedure {:inline 1} $1_DiemTransactionPublishingOption_initialize(_$t0: int, _$t1: Vec (Vec (int)), _$t2: bool) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
    var $t10: int;
    var $t11: bool;
    var $t0: int;
    var $t1: Vec (Vec (int));
    var $t2: bool;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'': $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'': $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'vec'u8''': Vec (Vec (int));
    var $1_DiemConfig_Configuration_$memory#431: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:35:5+1
    assume {:print "$at(18,1560,1561)"} true;
    assume {:print "$track_local(26,1,0):", $t0} $t0 == $t0;

    // trace_local[script_allow_list]($t1) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:35:5+1
    assume {:print "$track_local(26,1,1):", $t1} $t1 == $t1;

    // trace_local[module_publishing_allowed]($t2) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:35:5+1
    assume {:print "$track_local(26,1,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:40:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(18,1716,1747)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:40:9+31

    // assume Identical($t5, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:40:9+31
    assume ($t5 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:40:9+31
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:40:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t6)) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:40:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:40:9+31
    assume {:print "$at(18,1716,1747)"} true;
    assume {:print "$track_abort(26,1):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:40:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:40:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:40:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:41:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(18,1757,1792)"} true;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:41:9+35
    assume {:print "$at(18,1757,1792)"} true;

    // assume Identical($t8, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:41:9+35
    assume ($t8 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t8) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:41:9+35
    if ($t8) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:41:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t6)), And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t6))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 0), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:41:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t6)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'u8'(5, $t6))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 0) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:41:9+35
    assume {:print "$at(18,1757,1792)"} true;
    assume {:print "$track_abort(26,1):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:41:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:41:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:41:9+35

    // $t9 := pack DiemTransactionPublishingOption::DiemTransactionPublishingOption($t1, $t2) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:45:13+108
    assume {:print "$at(18,1871,1979)"} true;
    $t9 := $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($t1, $t2);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    // >> opaque call: DiemConfig::publish_new_config<DiemTransactionPublishingOption::DiemTransactionPublishingOption>($t0, $t3)
    assume {:print "$at(18,1803,1989)"} true;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: DiemConfig::publish_new_config<DiemTransactionPublishingOption::DiemTransactionPublishingOption>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    assume {:print "$at(18,1803,1989)"} true;

    // assume Identical($t11, Or(Or(Or(Or(DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>(), exists<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(Signer::spec_address_of($t0))), Not(exists<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    assume ($t11 == (((($1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t11) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    if ($t11) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
L8:

    // assume Or(Or(Or(Or(DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>(), exists<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(Signer::spec_address_of($t0))), And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t6))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    assume (((($1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'u8'(5, $t6))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    assume {:print "$at(18,1803,1989)"} true;
    assume {:print "$track_abort(26,1):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
L7:

    // @431 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    $1_DiemConfig_Configuration_$memory#431 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'';
        $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, 173345816, $temp_0'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'');
    } else {
        $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, 173345816);
    }

    // modifies global<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'';
        $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory := $ResourceUpdate($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, 173345816, $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'');
    } else {
        $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory := $ResourceRemove($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, 173345816);
    }

    // assume exists<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    assume $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_Signer_spec_address_of($t0));

    // assume DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    assume $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory);

    // assume Eq<DiemTransactionPublishingOption::DiemTransactionPublishingOption>(DiemConfig::$get<DiemTransactionPublishingOption::DiemTransactionPublishingOption>(), $t9) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    assume $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_$get'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory), $t9);

    // assume Eq<bool>(DiemConfig::spec_has_config[@431](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#431), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::publish_new_config<DiemTransactionPublishingOption::DiemTransactionPublishingOption>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+186

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:49:5+1
    assume {:print "$at(18,1995,1996)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:49:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:49:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:49:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// struct DesignatedDealer::Dealer at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:13:5+130
type {:datatype} $1_DesignatedDealer_Dealer;
function {:constructor} $1_DesignatedDealer_Dealer($mint_event_handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer;
function {:inline} $Update'$1_DesignatedDealer_Dealer'_mint_event_handle(s: $1_DesignatedDealer_Dealer, x: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer {
    $1_DesignatedDealer_Dealer(x)
}
function $IsValid'$1_DesignatedDealer_Dealer'(s: $1_DesignatedDealer_Dealer): bool {
    $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''($mint_event_handle#$1_DesignatedDealer_Dealer(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_Dealer'(s1: $1_DesignatedDealer_Dealer, s2: $1_DesignatedDealer_Dealer): bool {
    s1 == s2
}
var $1_DesignatedDealer_Dealer_$memory: $Memory $1_DesignatedDealer_Dealer;

// struct DesignatedDealer::ReceivedMintEvent at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:37:5+286
type {:datatype} $1_DesignatedDealer_ReceivedMintEvent;
function {:constructor} $1_DesignatedDealer_ReceivedMintEvent($currency_code: Vec (int), $destination_address: int, $amount: int): $1_DesignatedDealer_ReceivedMintEvent;
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_currency_code(s: $1_DesignatedDealer_ReceivedMintEvent, x: Vec (int)): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent(x, $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_destination_address(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), x, $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_amount(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), x)
}
function $IsValid'$1_DesignatedDealer_ReceivedMintEvent'(s: $1_DesignatedDealer_ReceivedMintEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'address'($destination_address#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'u64'($amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(s1: $1_DesignatedDealer_ReceivedMintEvent, s2: $1_DesignatedDealer_ReceivedMintEvent): bool {
    s1 == s2
}

// struct ChainId::ChainId at /home/ying/diem/language/diem-framework/modules/ChainId.move:10:5+45
type {:datatype} $1_ChainId_ChainId;
function {:constructor} $1_ChainId_ChainId($id: int): $1_ChainId_ChainId;
function {:inline} $Update'$1_ChainId_ChainId'_id(s: $1_ChainId_ChainId, x: int): $1_ChainId_ChainId {
    $1_ChainId_ChainId(x)
}
function $IsValid'$1_ChainId_ChainId'(s: $1_ChainId_ChainId): bool {
    $IsValid'u8'($id#$1_ChainId_ChainId(s))
}
function {:inline} $IsEqual'$1_ChainId_ChainId'(s1: $1_ChainId_ChainId, s2: $1_ChainId_ChainId): bool {
    s1 == s2
}
var $1_ChainId_ChainId_$memory: $Memory $1_ChainId_ChainId;

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:232:9+141
function {:inline} $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && !$is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// struct AccountFreezing::FreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:21:5+208
type {:datatype} $1_AccountFreezing_FreezeAccountEvent;
function {:constructor} $1_AccountFreezing_FreezeAccountEvent($initiator_address: int, $frozen_address: int): $1_AccountFreezing_FreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent(x, $frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_frozen_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeAccountEvent'(s: $1_AccountFreezing_FreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s))
      && $IsValid'address'($frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(s1: $1_AccountFreezing_FreezeAccountEvent, s2: $1_AccountFreezing_FreezeAccountEvent): bool {
    s1 == s2
}

// struct AccountFreezing::FreezeEventsHolder at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:15:5+169
type {:datatype} $1_AccountFreezing_FreezeEventsHolder;
function {:constructor} $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', $unfreeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder;
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_freeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder(x, $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_unfreeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeEventsHolder'(s: $1_AccountFreezing_FreezeEventsHolder): bool {
    $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
      && $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''($unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeEventsHolder'(s1: $1_AccountFreezing_FreezeEventsHolder, s2: $1_AccountFreezing_FreezeEventsHolder): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezeEventsHolder_$memory: $Memory $1_AccountFreezing_FreezeEventsHolder;

// struct AccountFreezing::FreezingBit at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:10:5+164
type {:datatype} $1_AccountFreezing_FreezingBit;
function {:constructor} $1_AccountFreezing_FreezingBit($is_frozen: bool): $1_AccountFreezing_FreezingBit;
function {:inline} $Update'$1_AccountFreezing_FreezingBit'_is_frozen(s: $1_AccountFreezing_FreezingBit, x: bool): $1_AccountFreezing_FreezingBit {
    $1_AccountFreezing_FreezingBit(x)
}
function $IsValid'$1_AccountFreezing_FreezingBit'(s: $1_AccountFreezing_FreezingBit): bool {
    $IsValid'bool'($is_frozen#$1_AccountFreezing_FreezingBit(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezingBit'(s1: $1_AccountFreezing_FreezingBit, s2: $1_AccountFreezing_FreezingBit): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit;

// struct AccountFreezing::UnfreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:29:5+216
type {:datatype} $1_AccountFreezing_UnfreezeAccountEvent;
function {:constructor} $1_AccountFreezing_UnfreezeAccountEvent($initiator_address: int, $unfrozen_address: int): $1_AccountFreezing_UnfreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent(x, $unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_unfrozen_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_UnfreezeAccountEvent'(s: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
      && $IsValid'address'($unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(s1: $1_AccountFreezing_UnfreezeAccountEvent, s2: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    s1 == s2
}

// fun AccountFreezing::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:47:5+508
procedure {:inline 1} $1_AccountFreezing_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    var $t13: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    var $t14: $1_AccountFreezing_FreezeEventsHolder;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:62:9+47
    assume {:print "$at(4,2314,2361)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:47:5+1
    assume {:print "$at(4,1651,1652)"} true;
    assume {:print "$track_local(29,4,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:48:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(4,1704,1735)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:48:9+31

    // assume Identical($t4, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:48:9+31
    assume ($t4 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t4) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:48:9+31
    if ($t4) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:48:9+31
L5:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t5)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:48:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:48:9+31
    assume {:print "$at(4,1704,1735)"} true;
    assume {:print "$track_abort(29,4):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:48:9+31
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:48:9+31
L4:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:48:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(4,1745,1788)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:9+43

    // assume Identical($t6, Neq<address>(Signer::spec_address_of($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:9+43
    assume ($t6 == !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // if ($t6) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:9+43
    if ($t6) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:9+43
L7:

    // assume And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t5)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:9+43
    assume {:print "$at(4,1745,1788)"} true;
    assume {:print "$track_abort(29,4):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:9+43
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:9+43
L6:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:9+43

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:41+30
    // >> opaque call: $t3 := Signer::address_of($t0)
    assume {:print "$at(4,1846,1876)"} true;

    // $t7 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:41+30

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:41+30
    assume $IsValid'address'($t7);

    // assume Eq<address>($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:41+30
    assume $IsEqual'address'($t7, $1_Signer_spec_address_of($t0));

    // $t7 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:41+30

    // $t8 := exists<AccountFreezing::FreezeEventsHolder>($t7) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:14+6
    $t8 := $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $t7);

    // $t9 := !($t8) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:13+1
    call $t9 := $Not($t8);

    // $t10 := 1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:39+21
    assume {:print "$at(4,1917,1938)"} true;
    $t10 := 1;
    assume $IsValid'u64'($t10);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:13+48
    // >> opaque call: $t7 := Errors::already_published($t6)

    // $t11 := opaque begin: Errors::already_published($t10) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:13+48

    // assume WellFormed($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:13+48
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 6) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:13+48
    assume $IsEqual'u64'($t11, 6);

    // $t11 := opaque end: Errors::already_published($t10) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:13+48

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+151
    assume {:print "$at(4,1798,1949)"} true;
    assume {:print "$track_local(29,4,2):", $t11} $t11 == $t11;

    // trace_local[tmp#$1]($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+151
    assume {:print "$track_local(29,4,1):", $t9} $t9 == $t9;

    // if ($t9) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+151
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+151
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+151

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+151
    assume {:print "$at(4,1798,1949)"} true;
    assume {:print "$track_abort(29,4):", $t11} $t11 == $t11;

    // $t5 := move($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+151
    $t5 := $t11;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+151
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:17+10
    assume {:print "$at(4,1967,1977)"} true;
L0:

    // $t12 := Event::new_event_handle<AccountFreezing::FreezeAccountEvent>($t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:55:34+35
    assume {:print "$at(4,2033,2068)"} true;
    call $t12 := $1_Event_new_event_handle'$1_AccountFreezing_FreezeAccountEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,2033,2068)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,4):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t13 := Event::new_event_handle<AccountFreezing::UnfreezeAccountEvent>($t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:56:36+35
    assume {:print "$at(4,2105,2140)"} true;
    call $t13 := $1_Event_new_event_handle'$1_AccountFreezing_UnfreezeAccountEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,2105,2140)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,4):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t14 := pack AccountFreezing::FreezeEventsHolder($t12, $t13) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:29+172
    assume {:print "$at(4,1979,2151)"} true;
    $t14 := $1_AccountFreezing_FreezeEventsHolder($t12, $t13);

    // move_to<AccountFreezing::FreezeEventsHolder>($t14, $t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:9+7
    if ($ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_AccountFreezing_FreezeEventsHolder_$memory := $ResourceUpdate($1_AccountFreezing_FreezeEventsHolder_$memory, $t0, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(4,1959,1966)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,4):", $t5} $t5 == $t5;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:58:5+1
    assume {:print "$at(4,2158,2159)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:58:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:58:5+1
L3:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:58:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1569:5+247
function {:inline} $1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1593:5+95
function {:inline} $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, check_addr: int): bool {
    $ResourceExists($1_DiemAccount_DiemAccount_$memory, check_addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2337:9+155
function {:inline} $1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $key_rotation_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2342:9+145
function {:inline} $1_DiemAccount_spec_get_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_DiemAccount_KeyRotationCapability {
    $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2347:9+129
function {:inline} $1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2353:9+183
function {:inline} $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr) && $IsEqual'address'(addr, $account_address#$1_DiemAccount_KeyRotationCapability($1_DiemAccount_spec_get_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2364:9+144
function {:inline} $1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2369:9+134
function {:inline} $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_DiemAccount_WithdrawCapability {
    $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'($1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2374:9+121
function {:inline} $1_DiemAccount_spec_has_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'($1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+171
function {:inline} $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_spec_has_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr) && $IsEqual'address'(addr, $account_address#$1_DiemAccount_WithdrawCapability($1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2385:9+171
function {:inline} $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) && $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))))
}

// struct DiemAccount::DiemAccount at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:34:5+1558
type {:datatype} $1_DiemAccount_DiemAccount;
function {:constructor} $1_DiemAccount_DiemAccount($authentication_key: Vec (int), $withdraw_capability: $1_Option_Option'$1_DiemAccount_WithdrawCapability', $key_rotation_capability: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', $received_events: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', $sent_events: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', $sequence_number: int): $1_DiemAccount_DiemAccount;
function {:inline} $Update'$1_DiemAccount_DiemAccount'_authentication_key(s: $1_DiemAccount_DiemAccount, x: Vec (int)): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount(x, $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_withdraw_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), x, $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), x, $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_received_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), x, $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sent_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), x, $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sequence_number(s: $1_DiemAccount_DiemAccount, x: int): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), x)
}
function $IsValid'$1_DiemAccount_DiemAccount'(s: $1_DiemAccount_DiemAccount): bool {
    $IsValid'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($key_rotation_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''($received_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''($sent_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'u64'($sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemAccount'(s1: $1_DiemAccount_DiemAccount, s2: $1_DiemAccount_DiemAccount): bool {
    s1 == s2
}
var $1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount;

// struct DiemAccount::AccountOperationsCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:91:5+167
type {:datatype} $1_DiemAccount_AccountOperationsCapability;
function {:constructor} $1_DiemAccount_AccountOperationsCapability($limits_cap: $1_AccountLimits_AccountLimitMutationCapability, $creation_events: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability;
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_limits_cap(s: $1_DiemAccount_AccountOperationsCapability, x: $1_AccountLimits_AccountLimitMutationCapability): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability(x, $creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events(s: $1_DiemAccount_AccountOperationsCapability, x: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability($limits_cap#$1_DiemAccount_AccountOperationsCapability(s), x)
}
function $IsValid'$1_DiemAccount_AccountOperationsCapability'(s: $1_DiemAccount_AccountOperationsCapability): bool {
    $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($limits_cap#$1_DiemAccount_AccountOperationsCapability(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''($creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AccountOperationsCapability'(s1: $1_DiemAccount_AccountOperationsCapability, s2: $1_DiemAccount_AccountOperationsCapability): bool {
    s1 == s2
}
var $1_DiemAccount_AccountOperationsCapability_$memory: $Memory $1_DiemAccount_AccountOperationsCapability;

// struct DiemAccount::AdminTransactionEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:127:5+150
type {:datatype} $1_DiemAccount_AdminTransactionEvent;
function {:constructor} $1_DiemAccount_AdminTransactionEvent($committed_timestamp_secs: int): $1_DiemAccount_AdminTransactionEvent;
function {:inline} $Update'$1_DiemAccount_AdminTransactionEvent'_committed_timestamp_secs(s: $1_DiemAccount_AdminTransactionEvent, x: int): $1_DiemAccount_AdminTransactionEvent {
    $1_DiemAccount_AdminTransactionEvent(x)
}
function $IsValid'$1_DiemAccount_AdminTransactionEvent'(s: $1_DiemAccount_AdminTransactionEvent): bool {
    $IsValid'u64'($committed_timestamp_secs#$1_DiemAccount_AdminTransactionEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AdminTransactionEvent'(s1: $1_DiemAccount_AdminTransactionEvent, s2: $1_DiemAccount_AdminTransactionEvent): bool {
    s1 == s2
}

// struct DiemAccount::CreateAccountEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:133:5+179
type {:datatype} $1_DiemAccount_CreateAccountEvent;
function {:constructor} $1_DiemAccount_CreateAccountEvent($created: int, $role_id: int): $1_DiemAccount_CreateAccountEvent;
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_created(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent(x, $role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_role_id(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent($created#$1_DiemAccount_CreateAccountEvent(s), x)
}
function $IsValid'$1_DiemAccount_CreateAccountEvent'(s: $1_DiemAccount_CreateAccountEvent): bool {
    $IsValid'address'($created#$1_DiemAccount_CreateAccountEvent(s))
      && $IsValid'u64'($role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_CreateAccountEvent'(s1: $1_DiemAccount_CreateAccountEvent, s2: $1_DiemAccount_CreateAccountEvent): bool {
    s1 == s2
}

// struct DiemAccount::DiemWriteSetManager at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:97:5+115
type {:datatype} $1_DiemAccount_DiemWriteSetManager;
function {:constructor} $1_DiemAccount_DiemWriteSetManager($upgrade_events: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager;
function {:inline} $Update'$1_DiemAccount_DiemWriteSetManager'_upgrade_events(s: $1_DiemAccount_DiemWriteSetManager, x: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager {
    $1_DiemAccount_DiemWriteSetManager(x)
}
function $IsValid'$1_DiemAccount_DiemWriteSetManager'(s: $1_DiemAccount_DiemWriteSetManager): bool {
    $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''($upgrade_events#$1_DiemAccount_DiemWriteSetManager(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemWriteSetManager'(s1: $1_DiemAccount_DiemWriteSetManager, s2: $1_DiemAccount_DiemWriteSetManager): bool {
    s1 == s2
}
var $1_DiemAccount_DiemWriteSetManager_$memory: $Memory $1_DiemAccount_DiemWriteSetManager;

// struct DiemAccount::KeyRotationCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:83:5+208
type {:datatype} $1_DiemAccount_KeyRotationCapability;
function {:constructor} $1_DiemAccount_KeyRotationCapability($account_address: int): $1_DiemAccount_KeyRotationCapability;
function {:inline} $Update'$1_DiemAccount_KeyRotationCapability'_account_address(s: $1_DiemAccount_KeyRotationCapability, x: int): $1_DiemAccount_KeyRotationCapability {
    $1_DiemAccount_KeyRotationCapability(x)
}
function $IsValid'$1_DiemAccount_KeyRotationCapability'(s: $1_DiemAccount_KeyRotationCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_KeyRotationCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_KeyRotationCapability'(s1: $1_DiemAccount_KeyRotationCapability, s2: $1_DiemAccount_KeyRotationCapability): bool {
    s1 == s2
}

// struct DiemAccount::ReceivedPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:115:5+363
type {:datatype} $1_DiemAccount_ReceivedPaymentEvent;
function {:constructor} $1_DiemAccount_ReceivedPaymentEvent($amount: int, $currency_code: Vec (int), $payer: int, $metadata: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent;
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_amount(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent(x, $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_currency_code(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), x, $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_payer(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), x, $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_metadata(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_ReceivedPaymentEvent'(s: $1_DiemAccount_ReceivedPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'address'($payer#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(s1: $1_DiemAccount_ReceivedPaymentEvent, s2: $1_DiemAccount_ReceivedPaymentEvent): bool {
    s1 == s2
}

// struct DiemAccount::SentPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:103:5+346
type {:datatype} $1_DiemAccount_SentPaymentEvent;
function {:constructor} $1_DiemAccount_SentPaymentEvent($amount: int, $currency_code: Vec (int), $payee: int, $metadata: Vec (int)): $1_DiemAccount_SentPaymentEvent;
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_amount(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent(x, $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_currency_code(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), x, $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_payee(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), x, $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_metadata(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_SentPaymentEvent'(s: $1_DiemAccount_SentPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'address'($payee#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_SentPaymentEvent'(s1: $1_DiemAccount_SentPaymentEvent, s2: $1_DiemAccount_SentPaymentEvent): bool {
    s1 == s2
}

// struct DiemAccount::WithdrawCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:74:5+202
type {:datatype} $1_DiemAccount_WithdrawCapability;
function {:constructor} $1_DiemAccount_WithdrawCapability($account_address: int): $1_DiemAccount_WithdrawCapability;
function {:inline} $Update'$1_DiemAccount_WithdrawCapability'_account_address(s: $1_DiemAccount_WithdrawCapability, x: int): $1_DiemAccount_WithdrawCapability {
    $1_DiemAccount_WithdrawCapability(x)
}
function $IsValid'$1_DiemAccount_WithdrawCapability'(s: $1_DiemAccount_WithdrawCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_WithdrawCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_WithdrawCapability'(s1: $1_DiemAccount_WithdrawCapability, s2: $1_DiemAccount_WithdrawCapability): bool {
    s1 == s2
}

// fun DiemAccount::exists_at [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1593:5+95
procedure {:inline 1} $1_DiemAccount_exists_at(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[check_addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1593:5+1
    assume {:print "$at(11,73018,73019)"} true;
    assume {:print "$track_local(30,21,0):", $t0} $t0 == $t0;

    // $t1 := exists<DiemAccount::DiemAccount>($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1594:9+6
    assume {:print "$at(11,73076,73082)"} true;
    $t1 := $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1594:9+31
    assume {:print "$track_return(30,21,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+1
    assume {:print "$at(11,73112,73113)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+1
    $ret0 := $t1;
    return;

}

// fun DiemAccount::delegated_key_rotation_capability [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1569:5+247
procedure {:inline 1} $1_DiemAccount_delegated_key_rotation_capability(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_DiemAccount_DiemAccount;
    var $t8: $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $t9: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1569:5+1
    assume {:print "$at(11,71964,71965)"} true;
    assume {:print "$track_local(30,16,0):", $t0} $t0 == $t0;

    // $t3 := DiemAccount::exists_at($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:16+15
    assume {:print "$at(11,72072,72087)"} true;
    call $t3 := $1_DiemAccount_exists_at($t0);
    if ($abort_flag) {
        assume {:print "$at(11,72072,72087)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(30,16):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:55+8
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:33+31
    // >> opaque call: $t5 := Errors::not_published($t4)

    // $t6 := opaque begin: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:33+31

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:33+31
    assume $IsValid'u64'($t6);

    // assume Eq<u64>($t6, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:33+31
    assume $IsEqual'u64'($t6, 5);

    // $t6 := opaque end: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:33+31

    // trace_local[tmp#$2]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:9+56
    assume {:print "$track_local(30,16,2):", $t6} $t6 == $t6;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:9+56
    assume {:print "$track_local(30,16,1):", $t3} $t3 == $t3;

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:9+56
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:9+56
L1:

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:9+56
    assume {:print "$at(11,72065,72121)"} true;
    assume {:print "$track_abort(30,16):", $t6} $t6 == $t6;

    // $t4 := move($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:9+56
    $t4 := $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:9+56
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1572:53+4
    assume {:print "$at(11,72175,72179)"} true;
L0:

    // $t7 := get_global<DiemAccount::DiemAccount>($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1572:26+13
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(11,72148,72161)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(30,16):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t8 := get_field<DiemAccount::DiemAccount>.key_rotation_capability($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1572:25+57
    $t8 := $key_rotation_capability#$1_DiemAccount_DiemAccount($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1572:9+74
    // >> opaque call: $t8 := Option::is_none<DiemAccount::KeyRotationCapability>($t7)

    // $t9 := opaque begin: Option::is_none<DiemAccount::KeyRotationCapability>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1572:9+74

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1572:9+74
    assume $IsValid'bool'($t9);

    // assume Eq<bool>($t9, Option::$is_none<DiemAccount::KeyRotationCapability>($t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1572:9+74
    assume $IsEqual'bool'($t9, $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($t8));

    // $t9 := opaque end: Option::is_none<DiemAccount::KeyRotationCapability>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1572:9+74

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1572:9+74
    assume {:print "$track_return(30,16,0):", $t9} $t9 == $t9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:5+1
    assume {:print "$at(11,72210,72211)"} true;
L2:

    // return $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:5+1
    $ret0 := $t9;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:5+1
L3:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun DiemAccount::extract_key_rotation_capability [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:946:5+649
procedure {:inline 1} $1_DiemAccount_extract_key_rotation_capability(_$t0: int) returns ($ret0: $1_DiemAccount_KeyRotationCapability)
{
    // declare local variables
    var $t1: $Mutation ($1_DiemAccount_DiemAccount);
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($1_DiemAccount_DiemAccount);
    var $t18: $Mutation ($1_Option_Option'$1_DiemAccount_KeyRotationCapability');
    var $t19: $1_DiemAccount_KeyRotationCapability;
    var $t20: $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $t21: bool;
    var $t0: int;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'': $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));

    // bytecode translation starts here
    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:964:9+52
    assume {:print "$at(11,43085,43137)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:946:5+1
    assume {:print "$at(11,42191,42192)"} true;
    assume {:print "$track_local(30,22,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:31+27
    // >> opaque call: $t7 := Signer::address_of($t0)
    assume {:print "$at(11,42332,42359)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:31+27

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:31+27
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:31+27
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:31+27

    // trace_local[account_address]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:13+15
    assume {:print "$track_local(30,22,2):", $t8} $t8 == $t8;

    // $t9 := DiemAccount::delegated_key_rotation_capability($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:951:14+50
    assume {:print "$at(11,42484,42534)"} true;
    call $t9 := $1_DiemAccount_delegated_key_rotation_capability($t8);
    if ($abort_flag) {
        assume {:print "$at(11,42484,42534)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(30,22):", $t10} $t10 == $t10;
        goto L5;
    }

    // $t11 := !($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:951:13+1
    call $t11 := $Not($t9);

    // $t12 := 9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:35+42
    assume {:print "$at(11,42570,42612)"} true;
    $t12 := 9;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:13+65
    // >> opaque call: $t11 := Errors::invalid_state($t10)

    // $t13 := opaque begin: Errors::invalid_state($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:13+65

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:13+65
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:13+65
    assume $IsEqual'u64'($t13, 1);

    // $t13 := opaque end: Errors::invalid_state($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:13+65

    // trace_local[tmp#$4]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:9+160
    assume {:print "$at(11,42463,42623)"} true;
    assume {:print "$track_local(30,22,4):", $t13} $t13 == $t13;

    // trace_local[tmp#$3]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:9+160
    assume {:print "$track_local(30,22,3):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:9+160
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:9+160
L1:

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:9+160
    assume {:print "$at(11,42463,42623)"} true;
    assume {:print "$track_abort(30,22):", $t13} $t13 == $t13;

    // $t10 := move($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:9+160
    $t10 := $t13;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:9+160
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:26+15
    assume {:print "$at(11,42650,42665)"} true;
L0:

    // $t14 := DiemAccount::exists_at($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:16+26
    call $t14 := $1_DiemAccount_exists_at($t8);
    if ($abort_flag) {
        assume {:print "$at(11,42640,42666)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(30,22):", $t10} $t10 == $t10;
        goto L5;
    }

    // $t15 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:66+8
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:44+31
    // >> opaque call: $t14 := Errors::not_published($t13)

    // $t16 := opaque begin: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:44+31

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:44+31
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:44+31
    assume $IsEqual'u64'($t16, 5);

    // $t16 := opaque end: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:44+31

    // trace_local[tmp#$6]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:9+67
    assume {:print "$track_local(30,22,6):", $t16} $t16 == $t16;

    // trace_local[tmp#$5]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:9+67
    assume {:print "$track_local(30,22,5):", $t14} $t14 == $t14;

    // if ($t14) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:9+67
    if ($t14) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:9+67
L3:

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:9+67
    assume {:print "$at(11,42633,42700)"} true;
    assume {:print "$track_abort(30,22):", $t16} $t16 == $t16;

    // $t10 := move($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:9+67
    $t10 := $t16;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:9+67
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:955:54+15
    assume {:print "$at(11,42755,42770)"} true;
L2:

    // $t17 := borrow_global<DiemAccount::DiemAccount>($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:955:23+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(11,42724,42741)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(30,22):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[account#1787]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:955:13+7
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t17);
    assume {:print "$track_local(30,22,1):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t18 := borrow_field<DiemAccount::DiemAccount>.key_rotation_capability($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:25+36
    assume {:print "$at(11,42797,42833)"} true;
    $t18 := $ChildMutation($t17, 2, $key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t17)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    // >> opaque call: $t17 := Option::extract<DiemAccount::KeyRotationCapability>($t16)

    // $t19 := opaque begin: Option::extract<DiemAccount::KeyRotationCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53

    // $t20 := read_ref($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    $t20 := $Dereference($t18);

    // assume Identical($t21, Option::$is_none<DiemAccount::KeyRotationCapability>($t18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    assume ($t21 == $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($Dereference($t18)));

    // if ($t21) goto L8 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    if ($t21) { goto L8; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
L7:

    // assume And(Option::$is_none<DiemAccount::KeyRotationCapability>($t18), Eq(7, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    assume ($1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($Dereference($t18)) && $IsEqual'u8'(7, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    assume {:print "$at(11,42781,42834)"} true;
    assume {:print "$track_abort(30,22):", $t10} $t10 == $t10;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
L6:

    // havoc[mut]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    havoc $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'';
    $t18 := $UpdateMutation($t18, $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'');
    assume $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t18));

    // assume And(WellFormed($t18), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec($t18)), 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    assume ($IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t18)) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($Dereference($t18))) <= 1));

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    assume $IsValid'$1_DiemAccount_KeyRotationCapability'($t19);

    // assume Eq<DiemAccount::KeyRotationCapability>($t19, Option::$borrow<DiemAccount::KeyRotationCapability>($t20)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    assume $IsEqual'$1_DiemAccount_KeyRotationCapability'($t19, $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($t20));

    // assume Option::$is_none<DiemAccount::KeyRotationCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    assume $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($Dereference($t18));

    // $t19 := opaque end: Option::extract<DiemAccount::KeyRotationCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53

    // write_back[Reference($t17).key_rotation_capability]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    $t17 := $UpdateMutation($t17, $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability($Dereference($t17), $Dereference($t18)));

    // pack_ref_deep($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53

    // write_back[DiemAccount::DiemAccount@]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // trace_return[0]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+53
    assume {:print "$track_return(30,22,0):", $t19} $t19 == $t19;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:5+1
    assume {:print "$at(11,42839,42840)"} true;
L4:

    // return $t19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:5+1
    $ret0 := $t19;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:5+1
L5:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t17) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// fun DiemAccount::restore_key_rotation_capability [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:978:5+323
procedure {:inline 1} $1_DiemAccount_restore_key_rotation_capability(_$t0: $1_DiemAccount_KeyRotationCapability) returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_DiemAccount_DiemAccount);
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation ($1_DiemAccount_DiemAccount);
    var $t11: $Mutation ($1_Option_Option'$1_DiemAccount_KeyRotationCapability');
    var $t12: bool;
    var $t0: $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'': $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t11));

    // bytecode translation starts here
    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:978:5+1
    assume {:print "$at(11,43730,43731)"} true;
    assume {:print "$track_local(30,34,0):", $t0} $t0 == $t0;

    // $t4 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:26+19
    assume {:print "$at(11,43853,43872)"} true;
    $t4 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t5 := DiemAccount::exists_at($t4) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:16+30
    call $t5 := $1_DiemAccount_exists_at($t4);
    if ($abort_flag) {
        assume {:print "$at(11,43843,43873)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(30,34):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t7 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:70+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:48+31
    // >> opaque call: $t7 := Errors::not_published($t6)

    // $t8 := opaque begin: Errors::not_published($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:48+31

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:48+31
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:48+31
    assume $IsEqual'u64'($t8, 5);

    // $t8 := opaque end: Errors::not_published($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:48+31

    // trace_local[tmp#$3]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:9+71
    assume {:print "$track_local(30,34,3):", $t8} $t8 == $t8;

    // trace_local[tmp#$2]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:9+71
    assume {:print "$track_local(30,34,2):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:9+71
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:9+71
L1:

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:9+71
    assume {:print "$at(11,43836,43907)"} true;
    assume {:print "$track_abort(30,34):", $t8} $t8 == $t8;

    // $t6 := move($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:9+71
    $t6 := $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:9+71
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:981:54+3
    assume {:print "$at(11,43962,43965)"} true;
L0:

    // $t9 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:981:54+19
    $t9 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t10 := borrow_global<DiemAccount::DiemAccount>($t9) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:981:23+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t9)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t9), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t9));
    }
    if ($abort_flag) {
        assume {:print "$at(11,43931,43948)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(30,34):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_local[account]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:981:13+7
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t10);
    assume {:print "$track_local(30,34,1):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t11 := borrow_field<DiemAccount::DiemAccount>.key_rotation_capability($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:22+36
    assume {:print "$at(11,44005,44041)"} true;
    $t11 := $ChildMutation($t10, 2, $key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t10)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
    // >> opaque call: Option::fill<DiemAccount::KeyRotationCapability>($t10, $t0)

    // opaque begin: Option::fill<DiemAccount::KeyRotationCapability>($t11, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55

    // assume Identical($t12, Option::$is_some<DiemAccount::KeyRotationCapability>($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
    assume ($t12 == $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($Dereference($t11)));

    // if ($t12) goto L6 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
    if ($t12) { goto L6; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
L5:

    // assume And(Option::$is_some<DiemAccount::KeyRotationCapability>($t11), Eq(7, $t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
    assume ($1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($Dereference($t11)) && $IsEqual'u8'(7, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
    assume {:print "$at(11,43992,44047)"} true;
    assume {:print "$track_abort(30,34):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
L4:

    // havoc[mut]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
    havoc $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'';
    $t11 := $UpdateMutation($t11, $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'');
    assume $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t11));

    // assume And(WellFormed($t11), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec($t11)), 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
    assume ($IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t11)) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($Dereference($t11))) <= 1));

    // assume Option::$is_some<DiemAccount::KeyRotationCapability>($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
    assume $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($Dereference($t11));

    // assume Eq<DiemAccount::KeyRotationCapability>(Option::$borrow<DiemAccount::KeyRotationCapability>($t11), $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
    assume $IsEqual'$1_DiemAccount_KeyRotationCapability'($1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($Dereference($t11)), $t0);

    // opaque end: Option::fill<DiemAccount::KeyRotationCapability>($t11, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55

    // write_back[Reference($t10).key_rotation_capability]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
    $t10 := $UpdateMutation($t10, $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability($Dereference($t10), $Dereference($t11)));

    // pack_ref_deep($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55

    // write_back[DiemAccount::DiemAccount@]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+55
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:5+1
    assume {:print "$at(11,44052,44053)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:5+1
L3:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

    // label L6 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L6:

    // destroy($t10) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun DiemAccount::rotate_authentication_key [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:907:5+612
procedure {:inline 1} $1_DiemAccount_rotate_authentication_key(_$t0: $1_DiemAccount_KeyRotationCapability, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_DiemAccount_DiemAccount);
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($1_DiemAccount_DiemAccount);
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $Mutation (Vec (int));
    var $t0: $1_DiemAccount_KeyRotationCapability;
    var $t1: Vec (int);
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t19));

    // bytecode translation starts here
    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:907:5+1
    assume {:print "$at(11,40344,40345)"} true;
    assume {:print "$track_local(30,36,0):", $t0} $t0 == $t0;

    // trace_local[new_authentication_key]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:907:5+1
    assume {:print "$track_local(30,36,1):", $t1} $t1 == $t1;

    // $t7 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:26+19
    assume {:print "$at(11,40518,40537)"} true;
    $t7 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t8 := DiemAccount::exists_at($t7) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:16+30
    call $t8 := $1_DiemAccount_exists_at($t7);
    if ($abort_flag) {
        assume {:print "$at(11,40508,40538)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(30,36):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t10 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:70+8
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:48+31
    // >> opaque call: $t10 := Errors::not_published($t9)

    // $t11 := opaque begin: Errors::not_published($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:48+31

    // assume WellFormed($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:48+31
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:48+31
    assume $IsEqual'u64'($t11, 5);

    // $t11 := opaque end: Errors::not_published($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:48+31

    // trace_local[tmp#$4]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:9+71
    assume {:print "$track_local(30,36,4):", $t11} $t11 == $t11;

    // trace_local[tmp#$3]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:9+71
    assume {:print "$track_local(30,36,3):", $t8} $t8 == $t8;

    // if ($t8) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:9+71
    if ($t8) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:9+71
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:9+71

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:9+71
    assume {:print "$at(11,40501,40572)"} true;
    assume {:print "$track_abort(30,36):", $t11} $t11 == $t11;

    // $t9 := move($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:9+71
    $t9 := $t11;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:911:9+71
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:912:70+3
    assume {:print "$at(11,40643,40646)"} true;
L0:

    // $t12 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:912:70+19
    $t12 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t13 := borrow_global<DiemAccount::DiemAccount>($t12) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:912:39+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t12)) {
        call $ExecFailureAbort();
    } else {
        $t13 := $Mutation($Global($t12), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12));
    }
    if ($abort_flag) {
        assume {:print "$at(11,40612,40629)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(30,36):", $t9} $t9 == $t9;
        goto L5;
    }

    // trace_local[sender_account_resource]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:912:13+23
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t13);
    assume {:print "$track_local(30,36,2):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t14 := Vector::length<u8>($t1) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:915:13+39
    assume {:print "$at(11,40748,40787)"} true;
    call $t14 := $1_Vector_length'u8'($t1);
    if ($abort_flag) {
        assume {:print "$at(11,40748,40787)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(30,36):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t15 := 32 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:915:56+2
    $t15 := 32;
    assume $IsValid'u64'($t15);

    // $t16 := ==($t14, $t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:915:53+2
    $t16 := $IsEqual'u64'($t14, $t15);

    // $t17 := 8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:38+29
    assume {:print "$at(11,40832,40861)"} true;
    $t17 := 8;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:13+55
    // >> opaque call: $t17 := Errors::invalid_argument($t16)

    // $t18 := opaque begin: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:13+55

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:13+55
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:13+55
    assume $IsEqual'u64'($t18, 7);

    // $t18 := opaque end: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:13+55

    // trace_local[tmp#$6]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:9+144
    assume {:print "$at(11,40728,40872)"} true;
    assume {:print "$track_local(30,36,6):", $t18} $t18 == $t18;

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:9+144
    assume {:print "$track_local(30,36,5):", $t16} $t16 == $t16;

    // if ($t16) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:9+144
    if ($t16) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:9+144
L3:

    // pack_ref_deep($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:9+144

    // destroy($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:9+144

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:9+144
    assume {:print "$at(11,40728,40872)"} true;
    assume {:print "$track_abort(30,36):", $t18} $t18 == $t18;

    // $t9 := move($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:9+144
    $t9 := $t18;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:9+144
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:54+22
    assume {:print "$at(11,40927,40949)"} true;
L2:

    // $t19 := borrow_field<DiemAccount::DiemAccount>.authentication_key($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:9+42
    $t19 := $ChildMutation($t13, 0, $authentication_key#$1_DiemAccount_DiemAccount($Dereference($t13)));

    // write_ref($t19, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:9+67
    $t19 := $UpdateMutation($t19, $t1);

    // write_back[Reference($t13).authentication_key]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:9+67
    $t13 := $UpdateMutation($t13, $Update'$1_DiemAccount_DiemAccount'_authentication_key($Dereference($t13), $Dereference($t19)));

    // pack_ref_deep($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:9+67

    // write_back[DiemAccount::DiemAccount@]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:9+67
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t13),
        $Dereference($t13));

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:919:5+1
    assume {:print "$at(11,40955,40956)"} true;
L4:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:919:5+1
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:919:5+1
L5:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:919:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:55:5+75
function {:inline} $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata): bool {
    $ResourceExists($1_DiemBlock_BlockMetadata_$memory, 173345816)
}

// struct DiemBlock::BlockMetadata at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:9:5+236
type {:datatype} $1_DiemBlock_BlockMetadata;
function {:constructor} $1_DiemBlock_BlockMetadata($height: int, $new_block_events: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata;
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_height(s: $1_DiemBlock_BlockMetadata, x: int): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata(x, $new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_new_block_events(s: $1_DiemBlock_BlockMetadata, x: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata($height#$1_DiemBlock_BlockMetadata(s), x)
}
function $IsValid'$1_DiemBlock_BlockMetadata'(s: $1_DiemBlock_BlockMetadata): bool {
    $IsValid'u64'($height#$1_DiemBlock_BlockMetadata(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''($new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $IsEqual'$1_DiemBlock_BlockMetadata'(s1: $1_DiemBlock_BlockMetadata, s2: $1_DiemBlock_BlockMetadata): bool {
    s1 == s2
}
var $1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata;

// struct DiemBlock::NewBlockEvent at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:16:5+234
type {:datatype} $1_DiemBlock_NewBlockEvent;
function {:constructor} $1_DiemBlock_NewBlockEvent($round: int, $proposer: int, $previous_block_votes: Vec (int), $time_microseconds: int): $1_DiemBlock_NewBlockEvent;
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_round(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent(x, $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_proposer(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), x, $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_previous_block_votes(s: $1_DiemBlock_NewBlockEvent, x: Vec (int)): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), x, $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_time_microseconds(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), x)
}
function $IsValid'$1_DiemBlock_NewBlockEvent'(s: $1_DiemBlock_NewBlockEvent): bool {
    $IsValid'u64'($round#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'address'($proposer#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'vec'address''($previous_block_votes#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'u64'($time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $IsEqual'$1_DiemBlock_NewBlockEvent'(s1: $1_DiemBlock_NewBlockEvent, s2: $1_DiemBlock_NewBlockEvent): bool {
    s1 == s2
}

// fun DiemBlock::is_initialized [baseline] at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:55:5+75
procedure {:inline 1} $1_DiemBlock_is_initialized() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:56:31+9
    assume {:print "$at(12,2101,2110)"} true;
    $t0 := 173345816;
    assume $IsValid'address'($t0);

    // $t1 := exists<DiemBlock::BlockMetadata>($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:56:9+6
    $t1 := $ResourceExists($1_DiemBlock_BlockMetadata_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:56:9+32
    assume {:print "$track_return(31,3,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:57:5+1
    assume {:print "$at(12,2116,2117)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:57:5+1
    $ret0 := $t1;
    return;

}

// fun DiemBlock::initialize_block_metadata [baseline] at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:32:5+531
procedure {:inline 1} $1_DiemBlock_initialize_block_metadata(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent';
    var $t12: $1_DiemBlock_BlockMetadata;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:32:5+1
    assume {:print "$at(12,1130,1131)"} true;
    assume {:print "$track_local(31,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:33:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(12,1195,1226)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:33:9+31

    // assume Identical($t3, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:33:9+31
    assume ($t3 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t3) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:33:9+31
    if ($t3) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:33:9+31
L5:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:33:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:33:9+31
    assume {:print "$at(12,1195,1226)"} true;
    assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:33:9+31
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:33:9+31
L4:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:33:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+40
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(12,1312,1352)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+40

    // assume Identical($t5, Neq<address>(Signer::spec_address_of($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+40
    assume ($t5 == !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // if ($t5) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+40
    if ($t5) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+40
L7:

    // assume And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+40
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+40
    assume {:print "$at(12,1312,1352)"} true;
    assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+40
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+40
L6:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+40

    // $t6 := DiemBlock::is_initialized() on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:17+16
    assume {:print "$at(12,1371,1387)"} true;
    call $t6 := $1_DiemBlock_is_initialized();
    if ($abort_flag) {
        assume {:print "$at(12,1371,1387)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t7 := !($t6) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:16+1
    call $t7 := $Not($t6);

    // $t8 := 0 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:61+15
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:35+42
    // >> opaque call: $t6 := Errors::already_published($t5)

    // $t9 := opaque begin: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:35+42

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:35+42
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 6) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:35+42
    assume $IsEqual'u64'($t9, 6);

    // $t9 := opaque end: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:35+42

    // trace_local[tmp#$2]($t9) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+69
    assume {:print "$track_local(31,2,2):", $t9} $t9 == $t9;

    // trace_local[tmp#$1]($t7) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+69
    assume {:print "$track_local(31,2,1):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+69
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+69
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+69

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+69
    assume {:print "$at(12,1363,1432)"} true;
    assume {:print "$track_abort(31,2):", $t9} $t9 == $t9;

    // $t4 := move($t9) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+69
    $t4 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+69
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:13+7
    assume {:print "$at(12,1478,1485)"} true;
L0:

    // $t10 := 0 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:41:25+1
    assume {:print "$at(12,1539,1540)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := Event::new_event_handle<DiemBlock::NewBlockEvent>($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:42:35+53
    assume {:print "$at(12,1576,1629)"} true;
    call $t11 := $1_Event_new_event_handle'$1_DiemBlock_NewBlockEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(12,1576,1629)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t12 := pack DiemBlock::BlockMetadata($t10, $t11) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:40:13+145
    assume {:print "$at(12,1499,1644)"} true;
    $t12 := $1_DiemBlock_BlockMetadata($t10, $t11);

    // move_to<DiemBlock::BlockMetadata>($t12, $t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:38:9+7
    assume {:print "$at(12,1442,1449)"} true;
    if ($ResourceExists($1_DiemBlock_BlockMetadata_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemBlock_BlockMetadata_$memory := $ResourceUpdate($1_DiemBlock_BlockMetadata_$memory, $t0, $t12);
    }
    if ($abort_flag) {
        assume {:print "$at(12,1442,1449)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:45:5+1
    assume {:print "$at(12,1660,1661)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:45:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:45:5+1
L3:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:45:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// struct DiemVMConfig::DiemVMConfig at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:13:5+120
type {:datatype} $1_DiemVMConfig_DiemVMConfig;
function {:constructor} $1_DiemVMConfig_DiemVMConfig($gas_schedule: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig;
function {:inline} $Update'$1_DiemVMConfig_DiemVMConfig'_gas_schedule(s: $1_DiemVMConfig_DiemVMConfig, x: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig {
    $1_DiemVMConfig_DiemVMConfig(x)
}
function $IsValid'$1_DiemVMConfig_DiemVMConfig'(s: $1_DiemVMConfig_DiemVMConfig): bool {
    $IsValid'$1_DiemVMConfig_GasSchedule'($gas_schedule#$1_DiemVMConfig_DiemVMConfig(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_DiemVMConfig'(s1: $1_DiemVMConfig_DiemVMConfig, s2: $1_DiemVMConfig_DiemVMConfig): bool {
    s1 == s2
}

// struct DiemVMConfig::GasConstants at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:35:5+1690
type {:datatype} $1_DiemVMConfig_GasConstants;
function {:constructor} $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost: int, $global_memory_per_byte_write_cost: int, $min_transaction_gas_units: int, $large_transaction_cutoff: int, $intrinsic_gas_per_byte: int, $maximum_number_of_gas_units: int, $min_price_per_gas_unit: int, $max_price_per_gas_unit: int, $max_transaction_size_in_bytes: int, $gas_unit_scaling_factor: int, $default_account_size: int): $1_DiemVMConfig_GasConstants;
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants(x, $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_write_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), x, $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_transaction_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), x, $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_large_transaction_cutoff(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), x, $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_intrinsic_gas_per_byte(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), x, $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_maximum_number_of_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), x, $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), x, $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_transaction_size_in_bytes(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_gas_unit_scaling_factor(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), x, $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_default_account_size(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), x)
}
function $IsValid'$1_DiemVMConfig_GasConstants'(s: $1_DiemVMConfig_GasConstants): bool {
    $IsValid'u64'($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasConstants'(s1: $1_DiemVMConfig_GasConstants, s2: $1_DiemVMConfig_GasConstants): bool {
    s1 == s2
}

// struct DiemVMConfig::GasSchedule at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:29:5+164
type {:datatype} $1_DiemVMConfig_GasSchedule;
function {:constructor} $1_DiemVMConfig_GasSchedule($instruction_schedule: Vec (int), $native_schedule: Vec (int), $gas_constants: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule;
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_instruction_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule(x, $native_schedule#$1_DiemVMConfig_GasSchedule(s), $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_native_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), x, $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_gas_constants(s: $1_DiemVMConfig_GasSchedule, x: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), $native_schedule#$1_DiemVMConfig_GasSchedule(s), x)
}
function $IsValid'$1_DiemVMConfig_GasSchedule'(s: $1_DiemVMConfig_GasSchedule): bool {
    $IsValid'vec'u8''($instruction_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'vec'u8''($native_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'$1_DiemVMConfig_GasConstants'($gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasSchedule'(s1: $1_DiemVMConfig_GasSchedule, s2: $1_DiemVMConfig_GasSchedule): bool {
    s1 == s2
}

// fun DiemVMConfig::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:73:5+1150
procedure {:inline 1} $1_DiemVMConfig_initialize(_$t0: int, _$t1: Vec (int), _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: $1_DiemVMConfig_GasConstants;
    var $t4: $1_DiemVMConfig_GasConstants;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_DiemVMConfig_GasConstants;
    var $t23: $1_DiemVMConfig_GasSchedule;
    var $t24: $1_DiemVMConfig_DiemVMConfig;
    var $t25: int;
    var $t26: bool;
    var $t0: int;
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'': $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'': $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemConfig_Configuration_$memory#425: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t4, pack DiemVMConfig::GasConstants(4, 9, 600, 600, 8, 4000000, 0, 10000, 4096, 1000, 800)) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:109:9+528
    assume {:print "$at(19,4599,5127)"} true;
    assume ($t4 == $1_DiemVMConfig_GasConstants(4, 9, 600, 600, 8, 4000000, 0, 10000, 4096, 1000, 800));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:73:5+1
    assume {:print "$at(19,3418,3419)"} true;
    assume {:print "$track_local(32,0,0):", $t0} $t0 == $t0;

    // trace_local[instruction_schedule]($t1) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:73:5+1
    assume {:print "$track_local(32,0,1):", $t1} $t1 == $t1;

    // trace_local[native_schedule]($t2) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:73:5+1
    assume {:print "$track_local(32,0,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:78:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(19,3565,3596)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:78:9+31

    // assume Identical($t7, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:78:9+31
    assume ($t7 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:78:9+31
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:78:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t8)) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:78:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:78:9+31
    assume {:print "$at(19,3565,3596)"} true;
    assume {:print "$track_abort(32,0):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:78:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:78:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:78:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(19,3694,3729)"} true;

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+35
    assume {:print "$at(19,3694,3729)"} true;

    // assume Identical($t10, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+35
    assume ($t10 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t10) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+35
    if ($t10) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t8)), And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'u8'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+35
    assume {:print "$at(19,3694,3729)"} true;
    assume {:print "$track_abort(32,0):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+35

    // $t11 := 4 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:42+1
    assume {:print "$at(19,3816,3817)"} true;
    $t11 := 4;
    assume $IsValid'u64'($t11);

    // $t12 := 9 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:85:48+1
    assume {:print "$at(19,3866,3867)"} true;
    $t12 := 9;
    assume $IsValid'u64'($t12);

    // $t13 := 600 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:86:40+3
    assume {:print "$at(19,3908,3911)"} true;
    $t13 := 600;
    assume $IsValid'u64'($t13);

    // $t14 := 600 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:87:39+3
    assume {:print "$at(19,3951,3954)"} true;
    $t14 := 600;
    assume $IsValid'u64'($t14);

    // $t15 := 8 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:88:37+1
    assume {:print "$at(19,3992,3993)"} true;
    $t15 := 8;
    assume $IsValid'u64'($t15);

    // $t16 := 4000000 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:89:42+7
    assume {:print "$at(19,4036,4043)"} true;
    $t16 := 4000000;
    assume $IsValid'u64'($t16);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:90:37+1
    assume {:print "$at(19,4081,4082)"} true;
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := 10000 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:91:37+5
    assume {:print "$at(19,4120,4125)"} true;
    $t18 := 10000;
    assume $IsValid'u64'($t18);

    // $t19 := 4096 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:92:44+4
    assume {:print "$at(19,4170,4174)"} true;
    $t19 := 4096;
    assume $IsValid'u64'($t19);

    // $t20 := 1000 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:93:38+4
    assume {:print "$at(19,4213,4217)"} true;
    $t20 := 1000;
    assume $IsValid'u64'($t20);

    // $t21 := 800 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:94:35+3
    assume {:print "$at(19,4253,4256)"} true;
    $t21 := 800;
    assume $IsValid'u64'($t21);

    // $t22 := pack DiemVMConfig::GasConstants($t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:83:29+507
    assume {:print "$at(19,3760,4267)"} true;
    $t22 := $1_DiemVMConfig_GasConstants($t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21);

    // $t23 := pack DiemVMConfig::GasSchedule($t1, $t2, $t22) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:31+145
    assume {:print "$at(19,4391,4536)"} true;
    $t23 := $1_DiemVMConfig_GasSchedule($t1, $t2, $t22);

    // $t24 := pack DiemVMConfig::DiemVMConfig($t23) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:99:13+204
    assume {:print "$at(19,4346,4550)"} true;
    $t24 := $1_DiemVMConfig_DiemVMConfig($t23);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    // >> opaque call: DiemConfig::publish_new_config<DiemVMConfig::DiemVMConfig>($t0, $t17)
    assume {:print "$at(19,4278,4561)"} true;

    // assume Identical($t25, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t0));

    // opaque begin: DiemConfig::publish_new_config<DiemVMConfig::DiemVMConfig>($t0, $t24) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    assume {:print "$at(19,4278,4561)"} true;

    // assume Identical($t26, Or(Or(Or(Or(DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>(), exists<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(Signer::spec_address_of($t0))), Not(exists<Roles::RoleId>($t25))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    assume ($t26 == (((($1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t25)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t26) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    if ($t26) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
L8:

    // assume Or(Or(Or(Or(DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>(), exists<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(Signer::spec_address_of($t0))), And(Not(exists<Roles::RoleId>($t25)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    assume (((($1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t25) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 0) && $IsEqual'u8'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    assume {:print "$at(19,4278,4561)"} true;
    assume {:print "$track_abort(32,0):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
L7:

    // @425 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    $1_DiemConfig_Configuration_$memory#425 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'';
        $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, 173345816, $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'');
    } else {
        $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, 173345816);
    }

    // modifies global<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'';
        $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory := $ResourceUpdate($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, 173345816, $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'');
    } else {
        $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory := $ResourceRemove($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, 173345816);
    }

    // assume exists<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    assume $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_Signer_spec_address_of($t0));

    // assume DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>() at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    assume $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory);

    // assume Eq<DiemVMConfig::DiemVMConfig>(DiemConfig::$get<DiemVMConfig::DiemVMConfig>(), $t24) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    assume $IsEqual'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_$get'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory), $t24);

    // assume Eq<bool>(DiemConfig::spec_has_config[@425](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#425), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::publish_new_config<DiemVMConfig::DiemVMConfig>($t0, $t24) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:9+283

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:107:5+1
    assume {:print "$at(19,4567,4568)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:107:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:107:5+1
L2:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:107:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// struct DiemVersion::DiemVersion at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:9:5+68
type {:datatype} $1_DiemVersion_DiemVersion;
function {:constructor} $1_DiemVersion_DiemVersion($major: int): $1_DiemVersion_DiemVersion;
function {:inline} $Update'$1_DiemVersion_DiemVersion'_major(s: $1_DiemVersion_DiemVersion, x: int): $1_DiemVersion_DiemVersion {
    $1_DiemVersion_DiemVersion(x)
}
function $IsValid'$1_DiemVersion_DiemVersion'(s: $1_DiemVersion_DiemVersion): bool {
    $IsValid'u64'($major#$1_DiemVersion_DiemVersion(s))
}
function {:inline} $IsEqual'$1_DiemVersion_DiemVersion'(s1: $1_DiemVersion_DiemVersion, s2: $1_DiemVersion_DiemVersion): bool {
    s1 == s2
}

// fun DiemVersion::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:17:5+298
procedure {:inline 1} $1_DiemVersion_initialize(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: $1_DiemVersion_DiemVersion;
    var $t9: int;
    var $t10: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'': $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'': $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemConfig_Configuration_$memory#419: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:17:5+1
    assume {:print "$at(20,618,619)"} true;
    assume {:print "$track_local(33,0,0):", $t0} $t0 == $t0;

    // trace_local[initial_version]($t1) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:17:5+1
    assume {:print "$track_local(33,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:18:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(20,693,724)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:18:9+31

    // assume Identical($t4, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:18:9+31
    assume ($t4 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t4) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:18:9+31
    if ($t4) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:18:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t5)) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:18:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:18:9+31
    assume {:print "$at(20,693,724)"} true;
    assume {:print "$track_abort(33,0):", $t5} $t5 == $t5;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:18:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:18:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:18:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(20,734,769)"} true;

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:9+35
    assume {:print "$at(20,734,769)"} true;

    // assume Identical($t7, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:9+35
    assume ($t7 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t7) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:9+35
    if ($t7) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t5)), And(Not(exists<Roles::RoleId>($t6)), Eq(5, $t5))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0), Eq(3, $t5))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t5))) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t5)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'u8'(5, $t5))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0) && $IsEqual'u8'(3, $t5))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t5)));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:9+35
    assume {:print "$at(20,734,769)"} true;
    assume {:print "$track_abort(33,0):", $t5} $t5 == $t5;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:9+35

    // $t8 := pack DiemVersion::DiemVersion($t1) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:13+38
    assume {:print "$at(20,860,898)"} true;
    $t8 := $1_DiemVersion_DiemVersion($t1);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    // >> opaque call: DiemConfig::publish_new_config<DiemVersion::DiemVersion>($t0, $t2)
    assume {:print "$at(20,779,909)"} true;

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: DiemConfig::publish_new_config<DiemVersion::DiemVersion>($t0, $t8) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    assume {:print "$at(20,779,909)"} true;

    // assume Identical($t10, Or(Or(Or(Or(DiemConfig::spec_is_published<DiemVersion::DiemVersion>(), exists<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(Signer::spec_address_of($t0))), Not(exists<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    assume ($t10 == (((($1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t10) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    if ($t10) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
L8:

    // assume Or(Or(Or(Or(DiemConfig::spec_is_published<DiemVersion::DiemVersion>(), exists<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(Signer::spec_address_of($t0))), And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t5))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(3, $t5))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t5))) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    assume (((($1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'u8'(5, $t5))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'u8'(3, $t5))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t5)));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    assume {:print "$at(20,779,909)"} true;
    assume {:print "$track_abort(33,0):", $t5} $t5 == $t5;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
L7:

    // @419 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    $1_DiemConfig_Configuration_$memory#419 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'';
        $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, 173345816, $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'');
    } else {
        $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, 173345816);
    }

    // modifies global<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'';
        $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory := $ResourceUpdate($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, 173345816, $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'');
    } else {
        $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory := $ResourceRemove($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, 173345816);
    }

    // assume exists<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    assume $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_Signer_spec_address_of($t0));

    // assume DiemConfig::spec_is_published<DiemVersion::DiemVersion>() at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    assume $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory);

    // assume Eq<DiemVersion::DiemVersion>(DiemConfig::$get<DiemVersion::DiemVersion>(), $t8) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    assume $IsEqual'$1_DiemVersion_DiemVersion'($1_DiemConfig_$get'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory), $t8);

    // assume Eq<bool>(DiemConfig::spec_has_config[@419](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#419), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::publish_new_config<DiemVersion::DiemVersion>($t0, $t8) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+130

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:24:5+1
    assume {:print "$at(20,915,916)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:24:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:24:5+1
L2:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:24:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun Genesis::initialize [verification] at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
procedure {:timeLimit 40} $1_Genesis_initialize$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: Vec (int), _$t4: Vec (Vec (int)), _$t5: bool, _$t6: Vec (int), _$t7: Vec (int), _$t8: int, _$t9: int) returns ()
{
    // declare local variables
    var $t10: int;
    var $t11: $1_DiemAccount_KeyRotationCapability;
    var $t12: int;
    var $t13: $1_DiemAccount_KeyRotationCapability;
    var $t14: Vec (int);
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: bool;
    var $t24: $1_DiemConfig_Configuration;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: $1_DiemConfig_Configuration;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: $1_DiemConfig_Configuration;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: int;
    var $t45: int;
    var $t46: int;
    var $t47: $1_DiemAccount_KeyRotationCapability;
    var $t48: int;
    var $t49: $1_DiemAccount_KeyRotationCapability;
    var $t50: int;
    var $t51: int;
    var $t52: $1_DiemVMConfig_GasConstants;
    var $t53: int;
    var $t54: int;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: Vec (Vec (int));
    var $t5: bool;
    var $t6: Vec (int);
    var $t7: Vec (int);
    var $t8: int;
    var $t9: int;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_ChainId_ChainId': $1_ChainId_ChainId;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_DiemWriteSetManager': $1_DiemAccount_DiemWriteSetManager;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_DiemConfig_Configuration': $1_DiemConfig_Configuration;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'$1_SlidingNonce_SlidingNonce': $1_SlidingNonce_SlidingNonce;
    var $temp_0'$1_VASPDomain_VASPDomainManager': $1_VASPDomain_VASPDomainManager;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    var $temp_0'vec'vec'u8''': Vec (Vec (int));
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;
    $t7 := _$t7;
    $t8 := _$t8;
    $t9 := _$t9;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:169:9+72
    assume {:print "$at(22,1043,3408)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:74:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:347:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:354:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:280:9+88
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:283:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:409:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:559:9+151
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:618:8+133
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Eq<u64>(select DiemSystem::ValidatorInfo.consensus_voting_power(Index(DiemSystem::spec_get_validators(), i1)), 1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:626:8+119
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($IsEqual'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)), 1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1582:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1660:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1727:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume true at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:549:9+318
    assume true;

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:538:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:576:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+71
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:191:9+94
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:199:9+94
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2203:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2233:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2282:9+91
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2285:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2305:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume true at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2308:9+139
    assume true;

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2314:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume true at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2327:9+115
    assume true;

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+90
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+89
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume $IsValid'vec'vec'u8'''($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume $IsValid'bool'($t5);

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume $IsValid'vec'u8''($t6);

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume $IsValid'vec'u8''($t7);

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume $IsValid'u8'($t8);

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume $IsValid'u64'($t9);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DisableReconfiguration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DisableReconfiguration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomainManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0);
    ($IsValid'$1_VASPDomain_VASPDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume DiemTimestamp::$is_genesis() at /home/ying/diem/language/diem-framework/modules/Genesis.move:195:9+37
    assume {:print "$at(22,9112,9149)"} true;
    assume $1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory);

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+1
    assume {:print "$at(22,1043,1044)"} true;
    assume {:print "$track_local(34,1,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+1
    assume {:print "$track_local(34,1,1):", $t1} $t1 == $t1;

    // trace_local[dr_auth_key]($t2) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+1
    assume {:print "$track_local(34,1,2):", $t2} $t2 == $t2;

    // trace_local[tc_auth_key]($t3) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+1
    assume {:print "$track_local(34,1,3):", $t3} $t3 == $t3;

    // trace_local[initial_script_allow_list]($t4) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+1
    assume {:print "$track_local(34,1,4):", $t4} $t4 == $t4;

    // trace_local[is_open_module]($t5) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+1
    assume {:print "$track_local(34,1,5):", $t5} $t5 == $t5;

    // trace_local[instruction_schedule]($t6) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+1
    assume {:print "$track_local(34,1,6):", $t6} $t6 == $t6;

    // trace_local[native_schedule]($t7) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+1
    assume {:print "$track_local(34,1,7):", $t7} $t7 == $t7;

    // trace_local[chain_id]($t8) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+1
    assume {:print "$track_local(34,1,8):", $t8} $t8 == $t8;

    // trace_local[initial_diem_version]($t9) at /home/ying/diem/language/diem-framework/modules/Genesis.move:28:5+1
    assume {:print "$track_local(34,1,9):", $t9} $t9 == $t9;

    // trace_local[dr_account#2010]($t0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:40:13+10
    assume {:print "$at(22,1422,1432)"} true;
    assume {:print "$track_local(34,1,10):", $t0} $t0 == $t0;

    // trace_local[tc_account#2011]($t1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:41:13+10
    assume {:print "$at(22,1460,1470)"} true;
    assume {:print "$track_local(34,1,12):", $t1} $t1 == $t1;

    // $t14 := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:45+35
    assume {:print "$at(22,1531,1566)"} true;
    $t14 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(0, 0, 0, 0), MakeVec4(0, 0, 0, 0)), MakeVec4(0, 0, 0, 0)), MakeVec4(0, 0, 0, 0));
    assume $IsValid'vec'u8''($t14);

    // nop at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    // >> opaque call: DiemAccount::initialize($t0, $t14)

    // assume Identical($t15, a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1225:9+24
    assume {:print "$at(11,54948,54972)"} true;
    assume ($t15 == 173345816);

    // assume Identical($t16, a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1249:9+24
    assume {:print "$at(11,56142,56166)"} true;
    assume ($t16 == 173345816);

    // assume Identical($t17, b1e55ed) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1293:9+34
    assume {:print "$at(11,58533,58567)"} true;
    assume ($t17 == 186537453);

    // assume Identical($t18, b1e55ed) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1313:9+34
    assume {:print "$at(11,59623,59657)"} true;
    assume ($t18 == 186537453);

    // opaque begin: DiemAccount::initialize($t0, $t14) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume {:print "$at(22,1495,1567)"} true;

    // assume Identical($t19, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), exists<SlidingNonce::SlidingNonce>(a550c18)), exists<DiemAccount::AccountOperationsCapability>(a550c18)), exists<DiemAccount::DiemWriteSetManager>(a550c18)), exists<AccountFreezing::FreezingBit>(a550c18)), Not(DiemTimestamp::$is_genesis())), exists<Roles::RoleId>(a550c18)), Neq<num>(Add(16, Len<u8>($t14)), 32)), exists<SlidingNonce::SlidingNonce>(b1e55ed)), VASPDomain::$tc_domain_manager_exists()), Not(DiemTimestamp::$is_genesis())), exists<Roles::RoleId>(b1e55ed)), exists<AccountFreezing::FreezingBit>(b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume ($t19 == ((((((((((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816)) || $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)) || $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, 173345816)) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $ResourceExists($1_Roles_RoleId_$memory, 173345816)) || !$IsEqual'num'((16 + LenVec($t14)), 32)) || $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453)) || $1_VASPDomain_$tc_domain_manager_exists($1_VASPDomain_VASPDomainManager_$memory)) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $ResourceExists($1_Roles_RoleId_$memory, 186537453)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, 186537453)));

    // if ($t19) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    if ($t19) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
L4:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t20)), And(exists<SlidingNonce::SlidingNonce>(a550c18), Eq(6, $t20))), And(exists<DiemAccount::AccountOperationsCapability>(a550c18), Eq(6, $t20))), And(exists<DiemAccount::DiemWriteSetManager>(a550c18), Eq(6, $t20))), And(exists<AccountFreezing::FreezingBit>(a550c18), Eq(6, $t20))), And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t20))), And(exists<Roles::RoleId>(a550c18), Eq(6, $t20))), And(Neq<num>(Add(16, Len<u8>($t14)), 32), Eq(7, $t20))), And(exists<SlidingNonce::SlidingNonce>(b1e55ed), Eq(6, $t20))), And(VASPDomain::$tc_domain_manager_exists(), Eq(6, $t20))), And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t20))), And(exists<Roles::RoleId>(b1e55ed), Eq(6, $t20))), And(exists<AccountFreezing::FreezingBit>(b1e55ed), Eq(6, $t20))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume (((((((((((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t20)) || ($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816) && $IsEqual'u8'(6, $t20))) || ($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816) && $IsEqual'u8'(6, $t20))) || ($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816) && $IsEqual'u8'(6, $t20))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, 173345816) && $IsEqual'u8'(6, $t20))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20))) || ($ResourceExists($1_Roles_RoleId_$memory, 173345816) && $IsEqual'u8'(6, $t20))) || (!$IsEqual'num'((16 + LenVec($t14)), 32) && $IsEqual'u8'(7, $t20))) || ($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453) && $IsEqual'u8'(6, $t20))) || ($1_VASPDomain_$tc_domain_manager_exists($1_VASPDomain_VASPDomainManager_$memory) && $IsEqual'u8'(6, $t20))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20))) || ($ResourceExists($1_Roles_RoleId_$memory, 186537453) && $IsEqual'u8'(6, $t20))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, 186537453) && $IsEqual'u8'(6, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume {:print "$at(22,1495,1567)"} true;
    assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
L3:

    // modifies global<Roles::RoleId>(a550c18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, 173345816, $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, 173345816);
    }

    // modifies global<Roles::RoleId>(b1e55ed) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, 186537453, $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, 186537453);
    }

    // modifies global<Event::EventHandleGenerator>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t15, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t15);
    }

    // modifies global<DiemAccount::DiemAccount>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t15, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t15);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $t15, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $t15);
    }

    // modifies global<DiemAccount::DiemWriteSetManager>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemWriteSetManager';
        $1_DiemAccount_DiemWriteSetManager_$memory := $ResourceUpdate($1_DiemAccount_DiemWriteSetManager_$memory, $t15, $temp_0'$1_DiemAccount_DiemWriteSetManager');
    } else {
        $1_DiemAccount_DiemWriteSetManager_$memory := $ResourceRemove($1_DiemAccount_DiemWriteSetManager_$memory, $t15);
    }

    // modifies global<SlidingNonce::SlidingNonce>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_SlidingNonce_SlidingNonce';
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceUpdate($1_SlidingNonce_SlidingNonce_$memory, $t15, $temp_0'$1_SlidingNonce_SlidingNonce');
    } else {
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceRemove($1_SlidingNonce_SlidingNonce_$memory, $t15);
    }

    // modifies global<Roles::RoleId>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $t15, $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $t15);
    }

    // modifies global<AccountFreezing::FreezingBit>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t15, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t15);
    }

    // modifies global<DiemAccount::DiemAccount>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t17, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t17);
    }

    // modifies global<SlidingNonce::SlidingNonce>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_SlidingNonce_SlidingNonce';
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceUpdate($1_SlidingNonce_SlidingNonce_$memory, $t17, $temp_0'$1_SlidingNonce_SlidingNonce');
    } else {
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceRemove($1_SlidingNonce_SlidingNonce_$memory, $t17);
    }

    // modifies global<Roles::RoleId>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $t17, $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $t17);
    }

    // modifies global<AccountFreezing::FreezingBit>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t17, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t17);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, 173345816, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);
    }

    // modifies global<Event::EventHandleGenerator>(b1e55ed) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, 186537453, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, 186537453);
    }

    // modifies global<VASPDomain::VASPDomainManager>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_VASPDomain_VASPDomainManager';
        $1_VASPDomain_VASPDomainManager_$memory := $ResourceUpdate($1_VASPDomain_VASPDomainManager_$memory, $t17, $temp_0'$1_VASPDomain_VASPDomainManager');
    } else {
        $1_VASPDomain_VASPDomainManager_$memory := $ResourceRemove($1_VASPDomain_VASPDomainManager_$memory, $t17);
    }

    // assume exists<Roles::RoleId>(a550c18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $ResourceExists($1_Roles_RoleId_$memory, 173345816);

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(a550c18)), 0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, 173345816)), 0);

    // assume exists<Roles::RoleId>(b1e55ed) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $ResourceExists($1_Roles_RoleId_$memory, 186537453);

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(b1e55ed)), 1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, 186537453)), 1);

    // assume exists<DiemAccount::AccountOperationsCapability>($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t16);

    // assume exists<DiemAccount::DiemWriteSetManager>($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $t16);

    // assume exists<SlidingNonce::SlidingNonce>($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $t16);

    // assume Roles::spec_has_diem_root_role_addr($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, $t16);

    // assume DiemAccount::$exists_at($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t16);

    // assume AccountFreezing::spec_account_is_not_frozen($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t16);

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t16);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t16);

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume Roles::spec_has_treasury_compliance_role_addr($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, $t18);

    // assume DiemAccount::$exists_at($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume exists<SlidingNonce::SlidingNonce>($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $t18);

    // assume AccountFreezing::spec_account_is_not_frozen($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t18);

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume exists<VASPDomain::VASPDomainManager>($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72
    assume $ResourceExists($1_VASPDomain_VASPDomainManager_$memory, $t18);

    // opaque end: DiemAccount::initialize($t0, $t14) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:9+72

    // nop at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+41
    // >> opaque call: ChainId::initialize($t0, $t8)
    assume {:print "$at(22,1578,1619)"} true;

    // assume Identical($t21, Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/ChainId.move:27:9+45
    assume {:print "$at(7,1038,1083)"} true;
    assume ($t21 == $1_Signer_$address_of($t0));

    // opaque begin: ChainId::initialize($t0, $t8) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+41
    assume {:print "$at(22,1578,1619)"} true;

    // assume Identical($t22, Or(Or(Not(DiemTimestamp::$is_genesis()), Neq<address>(Signer::spec_address_of($t0), a550c18)), exists<ChainId::ChainId>($t21))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+41
    assume ($t22 == ((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)) || $ResourceExists($1_ChainId_ChainId_$memory, $t21)));

    // if ($t22) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+41
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+41
L6:

    // assume Or(Or(And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t20)), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t20))), And(exists<ChainId::ChainId>($t21), Eq(6, $t20))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+41
    assume (((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20)) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t20))) || ($ResourceExists($1_ChainId_ChainId_$memory, $t21) && $IsEqual'u8'(6, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+41
    assume {:print "$at(22,1578,1619)"} true;
    assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+41
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+41
L5:

    // modifies global<ChainId::ChainId>($t21) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+41
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_ChainId_ChainId';
        $1_ChainId_ChainId_$memory := $ResourceUpdate($1_ChainId_ChainId_$memory, $t21, $temp_0'$1_ChainId_ChainId');
    } else {
        $1_ChainId_ChainId_$memory := $ResourceRemove($1_ChainId_ChainId_$memory, $t21);
    }

    // assume exists<ChainId::ChainId>($t21) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+41
    assume $ResourceExists($1_ChainId_ChainId_$memory, $t21);

    // opaque end: ChainId::initialize($t0, $t8) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+41

    // nop at /home/ying/diem/language/diem-framework/modules/Genesis.move:48:9+34
    // >> opaque call: DiemConfig::initialize($t0)
    assume {:print "$at(22,1663,1697)"} true;

    // opaque begin: DiemConfig::initialize($t0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:48:9+34

    // assume Identical($t23, Or(Or(DiemConfig::spec_has_config(), Not(DiemTimestamp::$is_genesis())), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:48:9+34
    assume ($t23 == (($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t23) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/Genesis.move:48:9+34
    if ($t23) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/Genesis.move:48:9+34
L8:

    // assume Or(Or(And(DiemConfig::spec_has_config(), Eq(6, $t20)), And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t20))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t20))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:48:9+34
    assume ((($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory) && $IsEqual'u8'(6, $t20)) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'u8'(2, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Genesis.move:48:9+34
    assume {:print "$at(22,1663,1697)"} true;
    assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Genesis.move:48:9+34
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Genesis.move:48:9+34
L7:

    // modifies global<DiemConfig::Configuration>(a550c18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:48:9+34
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_Configuration';
        $1_DiemConfig_Configuration_$memory := $ResourceUpdate($1_DiemConfig_Configuration_$memory, 173345816, $temp_0'$1_DiemConfig_Configuration');
    } else {
        $1_DiemConfig_Configuration_$memory := $ResourceRemove($1_DiemConfig_Configuration_$memory, 173345816);
    }

    // modifies global<Event::EventHandleGenerator>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:48:9+34
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $1_Signer_spec_address_of($t0), $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $1_Signer_spec_address_of($t0));
    }

    // assume Identical($t24, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:82:9+56
    assume {:print "$at(13,3181,3237)"} true;
    assume ($t24 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume DiemConfig::spec_has_config() at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:82:9+56
    assume $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory);

    // assume Eq<u64>(select DiemConfig::Configuration.epoch($t24), 0) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:82:9+56
    assume $IsEqual'u64'($epoch#$1_DiemConfig_Configuration($t24), 0);

    // assume Eq<u64>(select DiemConfig::Configuration.last_reconfiguration_time($t24), 0) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:82:9+56
    assume $IsEqual'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration($t24), 0);

    // opaque end: DiemConfig::initialize($t0) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:82:9+56

    // assume Identical($t25, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t0));

    // assume Identical($t26, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume ($t26 == $1_Signer_spec_address_of($t0));

    // Diem::initialize($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:51:9+28
    assume {:print "$at(22,1734,1762)"} true;
    call $1_Diem_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(22,1734,1762)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t27, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t27 == $1_Signer_spec_address_of($t1));

    // assume Identical($t28, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t28 == $1_Signer_spec_address_of($t0));

    // assume Identical($t29, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t29 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t30, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t30 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t31, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t31 == $1_Signer_spec_address_of($t1));

    // assume Identical($t32, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t0));

    // assume Identical($t33, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t1));

    // XUS::initialize($t0, $t1) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:54:9+39
    assume {:print "$at(22,1799,1838)"} true;
    call $1_XUS_initialize($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(22,1799,1838)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t34, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t34 == $1_Signer_spec_address_of($t0));

    // assume Identical($t35, global<DiemConfig::Configuration>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:357:9+46
    assume {:print "$at(13,15374,15420)"} true;
    assume ($t35 == $ResourceValue($1_DiemConfig_Configuration_$memory, 173345816));

    // assume Identical($t36, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:358:9+58
    assume {:print "$at(13,15429,15487)"} true;
    assume ($t36 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // assume Identical($t38, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t38 == $1_Signer_spec_address_of($t1));

    // XDX::initialize($t0, $t1) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:56:9+39
    assume {:print "$at(22,1849,1888)"} true;
    call $1_XDX_initialize($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(22,1849,1888)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t39, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:62:9+47
    assume {:print "$at(4,2314,2361)"} true;
    assume ($t39 == $1_Signer_spec_address_of($t0));

    // AccountFreezing::initialize($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:58:9+39
    assume {:print "$at(22,1899,1938)"} true;
    call $1_AccountFreezing_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(22,1899,1938)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t40, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:533:9+44
    assume {:print "$at(26,23880,23924)"} true;
    assume ($t40 == $1_Signer_spec_address_of($t1));

    // TransactionFee::initialize($t1) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:59:9+38
    assume {:print "$at(22,1948,1986)"} true;
    call $1_TransactionFee_initialize($t1);
    if ($abort_flag) {
        assume {:print "$at(22,1948,1986)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t41, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:117:9+50
    assume {:print "$at(16,5250,5300)"} true;
    assume ($t41 == $1_Signer_spec_address_of($t0));

    // assume Identical($t42, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t42 == $1_Signer_spec_address_of($t0));

    // DiemSystem::initialize_validator_set($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:61:9+48
    assume {:print "$at(22,1997,2045)"} true;
    call $1_DiemSystem_initialize_validator_set($t0);
    if ($abort_flag) {
        assume {:print "$at(22,1997,2045)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t43, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t43 == $1_Signer_spec_address_of($t0));

    // assume Identical($t44, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume ($t44 == $1_Signer_spec_address_of($t0));

    // DiemVersion::initialize($t0, $t9) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:62:9+57
    assume {:print "$at(22,2055,2112)"} true;
    call $1_DiemVersion_initialize($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(22,2055,2112)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t45, Mul(1000, Diem::spec_scaling_factor<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:499:9+86
    assume {:print "$at(21,22239,22325)"} true;
    assume ($t45 == (1000 * $1_Diem_spec_scaling_factor'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // DualAttestation::initialize($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:63:9+39
    assume {:print "$at(22,2122,2161)"} true;
    call $1_DualAttestation_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(22,2122,2161)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // DiemBlock::initialize_block_metadata($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:64:9+48
    assume {:print "$at(22,2171,2219)"} true;
    call $1_DiemBlock_initialize_block_metadata($t0);
    if ($abort_flag) {
        assume {:print "$at(22,2171,2219)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t46, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:964:9+52
    assume {:print "$at(11,43085,43137)"} true;
    assume ($t46 == $1_Signer_spec_address_of($t0));

    // $t47 := DiemAccount::extract_key_rotation_capability($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:68:33+56
    assume {:print "$at(22,2358,2414)"} true;
    call $t47 := $1_DiemAccount_extract_key_rotation_capability($t0);
    if ($abort_flag) {
        assume {:print "$at(22,2358,2414)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // trace_local[dr_rotate_key_cap]($t47) at /home/ying/diem/language/diem-framework/modules/Genesis.move:68:13+17
    assume {:print "$track_local(34,1,11):", $t47} $t47 == $t47;

    // DiemAccount::rotate_authentication_key($t47, $t2) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:69:9+71
    assume {:print "$at(22,2424,2495)"} true;
    call $1_DiemAccount_rotate_authentication_key($t47, $t2);
    if ($abort_flag) {
        assume {:print "$at(22,2424,2495)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // DiemAccount::restore_key_rotation_capability($t47) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:70:9+63
    assume {:print "$at(22,2505,2568)"} true;
    call $1_DiemAccount_restore_key_rotation_capability($t47);
    if ($abort_flag) {
        assume {:print "$at(22,2505,2568)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t48, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:964:9+52
    assume {:print "$at(11,43085,43137)"} true;
    assume ($t48 == $1_Signer_spec_address_of($t1));

    // $t49 := DiemAccount::extract_key_rotation_capability($t1) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:72:33+56
    assume {:print "$at(22,2603,2659)"} true;
    call $t49 := $1_DiemAccount_extract_key_rotation_capability($t1);
    if ($abort_flag) {
        assume {:print "$at(22,2603,2659)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // trace_local[tc_rotate_key_cap]($t49) at /home/ying/diem/language/diem-framework/modules/Genesis.move:72:13+17
    assume {:print "$track_local(34,1,13):", $t49} $t49 == $t49;

    // DiemAccount::rotate_authentication_key($t49, $t3) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:73:9+71
    assume {:print "$at(22,2669,2740)"} true;
    call $1_DiemAccount_rotate_authentication_key($t49, $t3);
    if ($abort_flag) {
        assume {:print "$at(22,2669,2740)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // DiemAccount::restore_key_rotation_capability($t49) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:74:9+63
    assume {:print "$at(22,2750,2813)"} true;
    call $1_DiemAccount_restore_key_rotation_capability($t49);
    if ($abort_flag) {
        assume {:print "$at(22,2750,2813)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t50, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t50 == $1_Signer_spec_address_of($t0));

    // assume Identical($t51, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume ($t51 == $1_Signer_spec_address_of($t0));

    // DiemTransactionPublishingOption::initialize($t0, $t4, $t5) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:76:9+145
    assume {:print "$at(22,2824,2969)"} true;
    call $1_DiemTransactionPublishingOption_initialize($t0, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(22,2824,2969)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t52, pack DiemVMConfig::GasConstants(4, 9, 600, 600, 8, 4000000, 0, 10000, 4096, 1000, 800)) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:109:9+528
    assume {:print "$at(19,4599,5127)"} true;
    assume ($t52 == $1_DiemVMConfig_GasConstants(4, 9, 600, 600, 8, 4000000, 0, 10000, 4096, 1000, 800));

    // assume Identical($t53, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume {:print "$at(26,23521,23565)"} true;
    assume ($t53 == $1_Signer_spec_address_of($t0));

    // assume Identical($t54, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:525:9+44
    assume ($t54 == $1_Signer_spec_address_of($t0));

    // DiemVMConfig::initialize($t0, $t6, $t7) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:82:9+122
    assume {:print "$at(22,2980,3102)"} true;
    call $1_DiemVMConfig_initialize($t0, $t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(22,2980,3102)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // DiemTimestamp::set_time_has_started($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:91:9+47
    assume {:print "$at(22,3354,3401)"} true;
    call $1_DiemTimestamp_set_time_has_started($t0);
    if ($abort_flag) {
        assume {:print "$at(22,3354,3401)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Genesis.move:92:5+1
    assume {:print "$at(22,3407,3408)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Genesis.move:92:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Genesis.move:92:5+1
L2:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Genesis.move:92:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

}
