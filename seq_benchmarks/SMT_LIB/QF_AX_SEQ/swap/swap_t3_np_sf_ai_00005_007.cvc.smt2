(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)

(declare-sort Element 0)
(declare-fun a_122 () (Seq Element))
(declare-fun a_124 () (Seq Element))
(declare-fun a_126 () (Seq Element))
(declare-fun a_128 () (Seq Element))
(declare-fun a_130 () (Seq Element))
(declare-fun a_132 () (Seq Element))
(declare-fun a_134 () (Seq Element))
(declare-fun a_136 () (Seq Element))
(declare-fun a_138 () (Seq Element))
(declare-fun a_140 () (Seq Element))
(declare-fun a_141 () (Seq Element))
(declare-fun a_142 () (Seq Element))
(declare-fun a_144 () (Seq Element))
(declare-fun a_146 () (Seq Element))
(declare-fun a_148 () (Seq Element))
(declare-fun a_150 () (Seq Element))
(declare-fun a_152 () (Seq Element))
(declare-fun a_154 () (Seq Element))
(declare-fun a_156 () (Seq Element))
(declare-fun a_158 () (Seq Element))
(declare-fun e_121 () Element)
(declare-fun e_123 () Element)
(declare-fun e_125 () Element)
(declare-fun e_127 () Element)
(declare-fun e_129 () Element)
(declare-fun e_131 () Element)
(declare-fun e_133 () Element)
(declare-fun e_135 () Element)
(declare-fun e_137 () Element)
(declare-fun e_139 () Element)
(declare-fun e_143 () Element)
(declare-fun e_145 () Element)
(declare-fun e_147 () Element)
(declare-fun e_149 () Element)
(declare-fun e_151 () Element)
(declare-fun e_153 () Element)
(declare-fun e_155 () Element)
(declare-fun e_157 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(assert (= a_122 (seq.update a1 i4 (seq.unit e_121))))
(assert (= a_124 (seq.update a_122 i2 (seq.unit e_123))))
(assert (= a_126 (seq.update a_124 i0 (seq.unit e_125))))
(assert (= a_128 (seq.update a_126 i3 (seq.unit e_127))))
(assert (= a_130 (seq.update a_128 i2 (seq.unit e_129))))
(assert (= a_132 (seq.update a_130 i1 (seq.unit e_131))))
(assert (= a_134 (seq.update a_132 i4 (seq.unit e_133))))
(assert (= a_136 (seq.update a_134 i3 (seq.unit e_135))))
(assert (= a_138 (seq.update a_136 i3 (seq.unit e_137))))
(assert (= a_140 (seq.update a_138 i2 (seq.unit e_139))))
(assert (= a_141 (seq.update a1 i2 (seq.unit e_123))))
(assert (= a_142 (seq.update a_141 i4 (seq.unit e_121))))
(assert (= a_144 (seq.update a_142 i0 (seq.unit e_143))))
(assert (= a_146 (seq.update a_144 i3 (seq.unit e_145))))
(assert (= a_148 (seq.update a_146 i1 (seq.unit e_147))))
(assert (= a_150 (seq.update a_148 i2 (seq.unit e_149))))
(assert (= a_152 (seq.update a_150 i3 (seq.unit e_151))))
(assert (= a_154 (seq.update a_152 i4 (seq.unit e_153))))
(assert (= a_156 (seq.update a_154 i2 (seq.unit e_155))))
(assert (= a_158 (seq.update a_156 i3 (seq.unit e_157))))
(assert (= e_121 (seq.nth a1 i2)))
(assert (= e_123 (seq.nth a1 i4)))
(assert (= e_125 (seq.nth a_124 i3)))
(assert (= e_127 (seq.nth a_124 i0)))
(assert (= e_129 (seq.nth a_128 i1)))
(assert (= e_131 (seq.nth a_128 i2)))
(assert (= e_133 (seq.nth a_132 i3)))
(assert (= e_135 (seq.nth a_132 i4)))
(assert (= e_137 (seq.nth a_136 i2)))
(assert (= e_139 (seq.nth a_136 i3)))
(assert (= e_143 (seq.nth a_142 i3)))
(assert (= e_145 (seq.nth a_142 i0)))
(assert (= e_147 (seq.nth a_146 i2)))
(assert (= e_149 (seq.nth a_146 i1)))
(assert (= e_151 (seq.nth a_150 i4)))
(assert (= e_153 (seq.nth a_150 i3)))
(assert (= e_155 (seq.nth a_154 i3)))
(assert (= e_157 (seq.nth a_154 i2)))
(assert (not (= a_140 a_158)))
(check-sat)
(exit)
