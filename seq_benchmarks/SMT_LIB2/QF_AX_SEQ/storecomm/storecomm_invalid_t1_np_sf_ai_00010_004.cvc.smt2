(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_200 () (Seq Element))
(declare-fun a_201 () (Seq Element))
(declare-fun a_202 () (Seq Element))
(declare-fun a_203 () (Seq Element))
(declare-fun a_204 () (Seq Element))
(declare-fun a_205 () (Seq Element))
(declare-fun a_206 () (Seq Element))
(declare-fun a_207 () (Seq Element))
(declare-fun a_208 () (Seq Element))
(declare-fun a_209 () (Seq Element))
(declare-fun a_210 () (Seq Element))
(declare-fun a_211 () (Seq Element))
(declare-fun a_212 () (Seq Element))
(declare-fun a_213 () (Seq Element))
(declare-fun a_214 () (Seq Element))
(declare-fun a_215 () (Seq Element))
(declare-fun a_216 () (Seq Element))
(declare-fun a_217 () (Seq Element))
(declare-fun a_218 () (Seq Element))
(declare-fun a1 () (Seq Element))
(declare-fun e1 () Element)
(declare-fun e10 () Element)
(declare-fun e2 () Element)
(declare-fun e3 () Element)
(declare-fun e4 () Element)
(declare-fun e5 () Element)
(declare-fun e6 () Element)
(declare-fun e7 () Element)
(declare-fun e8 () Element)
(declare-fun e9 () Element)
(declare-fun i1 () Int)
(declare-fun i10 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun i8 () Int)
(declare-fun i9 () Int)
(assert (= a_200 (seq.update a1 i1 (seq.unit e1))))
(assert (= a_201 (seq.update a_200 i2 (seq.unit e2))))
(assert (= a_202 (seq.update a_201 i3 (seq.unit e3))))
(assert (= a_203 (seq.update a_202 i4 (seq.unit e4))))
(assert (= a_204 (seq.update a_203 i5 (seq.unit e5))))
(assert (= a_205 (seq.update a_204 i6 (seq.unit e6))))
(assert (= a_206 (seq.update a_205 i7 (seq.unit e7))))
(assert (= a_207 (seq.update a_206 i8 (seq.unit e8))))
(assert (= a_208 (seq.update a_207 i9 (seq.unit e9))))
(assert (= a_209 (seq.update a_208 i1 (seq.unit e1))))
(assert (= a_210 (seq.update a_200 i9 (seq.unit e9))))
(assert (= a_211 (seq.update a_210 i4 (seq.unit e4))))
(assert (= a_212 (seq.update a_211 i6 (seq.unit e6))))
(assert (= a_213 (seq.update a_212 i8 (seq.unit e8))))
(assert (= a_214 (seq.update a_213 i10 (seq.unit e10))))
(assert (= a_215 (seq.update a_214 i2 (seq.unit e2))))
(assert (= a_216 (seq.update a_215 i7 (seq.unit e7))))
(assert (= a_217 (seq.update a_216 i3 (seq.unit e3))))
(assert (= a_218 (seq.update a_217 i5 (seq.unit e5))))
(assert (not (= i9 i10)))
(assert (not (= i8 i10)))
(assert (not (= i8 i9)))
(assert (not (= i7 i10)))
(assert (not (= i7 i9)))
(assert (not (= i7 i8)))
(assert (not (= i6 i10)))
(assert (not (= i6 i9)))
(assert (not (= i6 i8)))
(assert (not (= i6 i7)))
(assert (not (= i5 i10)))
(assert (not (= i5 i9)))
(assert (not (= i5 i8)))
(assert (not (= i5 i7)))
(assert (not (= i5 i6)))
(assert (not (= i4 i10)))
(assert (not (= i4 i9)))
(assert (not (= i4 i8)))
(assert (not (= i4 i7)))
(assert (not (= i4 i6)))
(assert (not (= i4 i5)))
(assert (not (= i3 i10)))
(assert (not (= i3 i9)))
(assert (not (= i3 i8)))
(assert (not (= i3 i7)))
(assert (not (= i3 i6)))
(assert (not (= i3 i5)))
(assert (not (= i3 i4)))
(assert (not (= i2 i10)))
(assert (not (= i2 i9)))
(assert (not (= i2 i8)))
(assert (not (= i2 i7)))
(assert (not (= i2 i6)))
(assert (not (= i2 i5)))
(assert (not (= i2 i4)))
(assert (not (= i2 i3)))
(assert (not (= i1 i10)))
(assert (not (= i1 i9)))
(assert (not (= i1 i8)))
(assert (not (= i1 i7)))
(assert (not (= i1 i6)))
(assert (not (= i1 i5)))
(assert (not (= i1 i4)))
(assert (not (= i1 i3)))
(assert (not (= i1 i2)))
(assert (not (= a_209 a_218)))
(check-sat)
(exit)
