(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :strings-exp true)
(set-logic ALL)
; done setting options


(declare-datatypes ((T@$Location 0)) ((($Global (|a#$Global| Int) ) ($Local (|i#$Local| Int) ) ($Param (|i#$Param| Int) ) ) ))
(declare-datatypes ((T@$Mutation_3430 0)) ((($Mutation_3430 (|l#$Mutation_3430| T@$Location) (|p#$Mutation_3430| (Seq Int)) (|v#$Mutation_3430| Int) ) ) ))
(declare-datatypes ((T@$Mutation_10965 0)) ((($Mutation_10965 (|l#$Mutation_10965| T@$Location) (|p#$Mutation_10965| (Seq Int)) (|v#$Mutation_10965| (Seq Int)) ) ) ))
(declare-datatypes ((T@$Range 0)) ((($Range (|lb#$Range| Int) (|ub#$Range| Int) ) ) ))
(declare-fun $MAX_U8 () Int)
(declare-fun $MAX_U64 () Int)
(declare-fun $MAX_U128 () Int)
(declare-fun |$IsValid'u8'| (Int) Bool)
(declare-fun |$IsValid'u64'| (Int) Bool)
(declare-fun |$IsValid'u128'| (Int) Bool)
(declare-fun |$IsValid'num'| (Int) Bool)
(declare-fun |$IsValid'address'| (Int) Bool)
(declare-fun $InRange (T@$Range Int) Bool)
(declare-sort |T@[Int]Bool| 0)
(declare-fun $ConstMemoryDomain (Bool) |T@[Int]Bool|)
(declare-fun |lambda#0| (Bool) |T@[Int]Bool|)
(declare-fun $EXEC_FAILURE_CODE () Int)
(declare-fun $shl (Int Int) Int)
(declare-fun $shr (Int Int) Int)
(declare-fun |$IsValid'vec'u8''| ((Seq Int)) Bool)
(declare-fun |$IndexOfVec'u8'| ((Seq Int) Int) Int)
(declare-fun $1_Hash_sha2 ((Seq Int)) (Seq Int))
(declare-fun $1_Hash_sha3 ((Seq Int)) (Seq Int))
(declare-fun $1_Signature_$ed25519_validate_pubkey ((Seq Int)) Bool)
(declare-fun $1_Signature_$ed25519_verify ((Seq Int) (Seq Int) (Seq Int)) Bool)
(declare-fun ReverseVec_3283 ((Seq Int)) (Seq Int))
(declare-fun |Select__T@[Int]Bool_| (|T@[Int]Bool| Int) Bool)
(assert (= $MAX_U8 255))
(assert (= $MAX_U64 18446744073709551615))
(assert (= $MAX_U128 340282366920938463463374607431768211455))
(assert (forall ((v Int) ) (! (= (|$IsValid'u8'| v)  (and (>= v 0) (<= v $MAX_U8)))
 :qid |arithmSmtSeqcvc4bpl.160:23|
 :skolemid |4|
 :pattern ( (|$IsValid'u8'| v))
)))
(assert (forall ((v@@0 Int) ) (! (= (|$IsValid'u64'| v@@0)  (and (>= v@@0 0) (<= v@@0 $MAX_U64)))
 :qid |arithmSmtSeqcvc4bpl.164:24|
 :skolemid |5|
 :pattern ( (|$IsValid'u64'| v@@0))
)))
(assert (forall ((v@@1 Int) ) (! (= (|$IsValid'u128'| v@@1)  (and (>= v@@1 0) (<= v@@1 $MAX_U128)))
 :qid |arithmSmtSeqcvc4bpl.168:25|
 :skolemid |6|
 :pattern ( (|$IsValid'u128'| v@@1))
)))
(assert (forall ((v@@2 Int) ) (! (= (|$IsValid'num'| v@@2) true)
 :qid |arithmSmtSeqcvc4bpl.172:24|
 :skolemid |7|
 :pattern ( (|$IsValid'num'| v@@2))
)))
(assert (forall ((v@@3 Int) ) (! (= (|$IsValid'address'| v@@3) (>= v@@3 0))
 :qid |arithmSmtSeqcvc4bpl.176:28|
 :skolemid |8|
 :pattern ( (|$IsValid'address'| v@@3))
)))
(assert (forall ((r T@$Range) (i Int) ) (! (= ($InRange r i)  (and (<= (|lb#$Range| r) i) (< i (|ub#$Range| r))))
 :qid |arithmSmtSeqcvc4bpl.186:19|
 :skolemid |9|
 :pattern ( ($InRange r i))
)))
(assert (= ($ConstMemoryDomain false) (|lambda#0| false)))
(assert (= ($ConstMemoryDomain true) (|lambda#0| true)))
(assert (= $EXEC_FAILURE_CODE (- 0 1)))
(assert (forall ((src1 Int) (p Int) ) (! (= ($shl src1 p) (ite (= p 8) (* src1 256) (ite (= p 16) (* src1 65536) (ite (= p 32) (* src1 4294967296) (ite (= p 64) (* src1 18446744073709551616) (- 0 1))))))
 :qid |arithmSmtSeqcvc4bpl.452:15|
 :skolemid |13|
 :pattern ( ($shl src1 p))
)))
(assert (forall ((src1@@0 Int) (p@@0 Int) ) (! (= ($shr src1@@0 p@@0) (ite (= p@@0 8) (div src1@@0 256) (ite (= p@@0 16) (div src1@@0 65536) (ite (= p@@0 32) (div src1@@0 4294967296) (ite (= p@@0 64) (div src1@@0 18446744073709551616) (- 0 1))))))
 :qid |arithmSmtSeqcvc4bpl.461:15|
 :skolemid |14|
 :pattern ( ($shr src1@@0 p@@0))
)))
(assert (forall ((v@@4 (Seq Int)) ) (! (= (|$IsValid'vec'u8''| v@@4)  (and (|$IsValid'u64'| (seq.len v@@4)) (forall ((i@@0 Int) ) (!  (=> (and (>= i@@0 0) (< i@@0 (seq.len v@@4))) (|$IsValid'u8'| (seq.nth v@@4 i@@0)))
 :qid |arithmSmtSeqcvc4bpl.590:13|
 :skolemid |15|
))))
 :qid |arithmSmtSeqcvc4bpl.588:28|
 :skolemid |16|
 :pattern ( (|$IsValid'vec'u8''| v@@4))
)))
(assert (forall ((v@@5 (Seq Int)) (e Int) ) (! (let ((i@@1 (|$IndexOfVec'u8'| v@@5 e)))
(ite  (not (exists ((i@@2 Int) ) (!  (and (and (|$IsValid'u64'| i@@2) (and (>= i@@2 0) (< i@@2 (seq.len v@@5)))) (= (seq.nth v@@5 i@@2) e))
 :qid |arithmSmtSeqcvc4bpl.595:13|
 :skolemid |17|
))) (= i@@1 (- 0 1))  (and (and (and (|$IsValid'u64'| i@@1) (and (>= i@@1 0) (< i@@1 (seq.len v@@5)))) (= (seq.nth v@@5 i@@1) e)) (forall ((j Int) ) (!  (=> (and (and (|$IsValid'u64'| j) (>= j 0)) (< j i@@1)) (not (= (seq.nth v@@5 j) e)))
 :qid |arithmSmtSeqcvc4bpl.603:17|
 :skolemid |18|
)))))
 :qid |arithmSmtSeqcvc4bpl.599:15|
 :skolemid |19|
 :pattern ( (|$IndexOfVec'u8'| v@@5 e))
)))
(assert (forall ((v1 (Seq Int)) (v2 (Seq Int)) ) (! (= (= v1 v2) (= ($1_Hash_sha2 v1) ($1_Hash_sha2 v2)))
 :qid |arithmSmtSeqcvc4bpl.776:15|
 :skolemid |20|
 :pattern ( ($1_Hash_sha2 v1) ($1_Hash_sha2 v2))
)))
(assert (forall ((v1@@0 (Seq Int)) (v2@@0 (Seq Int)) ) (! (= (= v1@@0 v2@@0) (= ($1_Hash_sha3 v1@@0) ($1_Hash_sha3 v2@@0)))
 :qid |arithmSmtSeqcvc4bpl.792:15|
 :skolemid |21|
 :pattern ( ($1_Hash_sha3 v1@@0) ($1_Hash_sha3 v2@@0))
)))
(assert (forall ((k1 (Seq Int)) (k2 (Seq Int)) ) (!  (=> (= k1 k2) (= ($1_Signature_$ed25519_validate_pubkey k1) ($1_Signature_$ed25519_validate_pubkey k2)))
 :qid |arithmSmtSeqcvc4bpl.839:15|
 :skolemid |22|
 :pattern ( ($1_Signature_$ed25519_validate_pubkey k1) ($1_Signature_$ed25519_validate_pubkey k2))
)))
(assert (forall ((s1 (Seq Int)) (s2 (Seq Int)) (k1@@0 (Seq Int)) (k2@@0 (Seq Int)) (m1 (Seq Int)) (m2 (Seq Int)) ) (!  (=> (and (and (= s1 s2) (= k1@@0 k2@@0)) (= m1 m2)) (= ($1_Signature_$ed25519_verify s1 k1@@0 m1) ($1_Signature_$ed25519_verify s2 k2@@0 m2)))
 :qid |arithmSmtSeqcvc4bpl.842:15|
 :skolemid |23|
 :pattern ( ($1_Signature_$ed25519_verify s1 k1@@0 m1) ($1_Signature_$ed25519_verify s2 k2@@0 m2))
)))
(assert (forall ((v@@6 (Seq Int)) ) (! (let ((r@@0 (ReverseVec_3283 v@@6)))
 (and (= (seq.len r@@0) (seq.len v@@6)) (forall ((i@@3 Int) ) (!  (=> (and (>= i@@3 0) (< i@@3 (seq.len r@@0))) (= (seq.nth r@@0 i@@3) (seq.nth v@@6 (- (- (seq.len v@@6) i@@3) 1))))
 :qid |arithmSmtSeqcvc4bpl.67:18|
 :skolemid |0|
 :pattern ( (seq.nth r@@0 i@@3))
))))
 :qid |arithmSmtSeqcvc4bpl.64:32|
 :skolemid |1|
 :pattern ( (ReverseVec_3283 v@@6))
)))
(assert (forall ((|l#0| Bool) (i@@4 Int) ) (! (= (|Select__T@[Int]Bool_| (|lambda#0| |l#0|) i@@4) |l#0|)
 :qid |arithmSmtSeqcvc4bpl.245:54|
 :skolemid |24|
 :pattern ( (|Select__T@[Int]Bool_| (|lambda#0| |l#0|) i@@4))
)))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $abort_flag@0 () Bool)
(declare-fun inline$$AddU64$0$dst@2 () Int)
(declare-fun _$t0 () Int)
(declare-fun _$t1 () Int)
(declare-fun $abort_code@1 () Int)
(declare-fun inline$$AddU64$0$dst@0 () Int)
(declare-fun inline$$AddU64$0$dst@1 () Int)
(declare-fun $abort_code@0 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_add_two_number$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 24576) (let ((anon4_Else_correct  (=> (not $abort_flag@0) (=> (and (and (= inline$$AddU64$0$dst@2 inline$$AddU64$0$dst@2) (|$IsValid'u64'| 3)) (and (= 3 3) (= inline$$AddU64$0$dst@2 inline$$AddU64$0$dst@2))) (and (=> (= (ControlFlow 0 16672) (- 0 24801)) (not (> (+ _$t0 _$t1) $MAX_U64))) (=> (not (> (+ _$t0 _$t1) $MAX_U64)) (and (=> (= (ControlFlow 0 16672) (- 0 24814)) (= 3 3)) (=> (= 3 3) (=> (= (ControlFlow 0 16672) (- 0 24822)) (= inline$$AddU64$0$dst@2 (+ _$t0 _$t1)))))))))))
(let ((anon4_Then_correct  (=> $abort_flag@0 (=> (and (= $abort_code@1 $abort_code@1) (= (ControlFlow 0 16702) (- 0 24752))) (> (+ _$t0 _$t1) $MAX_U64)))))
(let ((inline$$AddU64$0$anon3_Then$1_correct  (=> (= $abort_flag@0 true) (=> (and (= $abort_code@1 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2 inline$$AddU64$0$dst@0)) (and (=> (= (ControlFlow 0 16590) 16702) anon4_Then_correct) (=> (= (ControlFlow 0 16590) 16672) anon4_Else_correct))))))
(let ((inline$$AddU64$0$anon3_Then_correct  (=> (and (> (+ _$t0 _$t1) $MAX_U64) (= (ControlFlow 0 16588) 16590)) inline$$AddU64$0$anon3_Then$1_correct)))
(let ((inline$$AddU64$0$anon3_Else_correct  (=> (>= $MAX_U64 (+ _$t0 _$t1)) (=> (and (and (= inline$$AddU64$0$dst@1 (+ _$t0 _$t1)) (= $abort_flag@0 false)) (and (= $abort_code@1 $abort_code@0) (= inline$$AddU64$0$dst@2 inline$$AddU64$0$dst@1))) (and (=> (= (ControlFlow 0 16536) 16702) anon4_Then_correct) (=> (= (ControlFlow 0 16536) 16672) anon4_Else_correct))))))
(let ((anon0$1_correct  (=> (and (and (|$IsValid'u64'| _$t0) (|$IsValid'u64'| _$t1)) (and (= _$t0 _$t0) (= _$t1 _$t1))) (and (=> (= (ControlFlow 0 16596) 16588) inline$$AddU64$0$anon3_Then_correct) (=> (= (ControlFlow 0 16596) 16536) inline$$AddU64$0$anon3_Else_correct)))))
(let ((anon0_correct  (=> (= (ControlFlow 0 24576) 16596) anon0$1_correct)))
anon0_correct))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $t4@0 () Bool)
(declare-fun _$t0@@0 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_arithmetic_ops$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 24855) (let ((anon5_Else_correct  (=> (not $t4@0) (=> (and (= 2 2) (= _$t0@@0 _$t0@@0)) (and (=> (= (ControlFlow 0 16862) (- 0 24983)) (= 2 (mod (div (* (- (+ 6 4) 1) 2) 3) 4))) (=> (= 2 (mod (div (* (- (+ 6 4) 1) 2) 3) 4)) (=> (= (ControlFlow 0 16862) (- 0 25011)) (= _$t0@@0 _$t0@@0))))))))
(let ((anon5_Then_correct true))
(let ((anon0$1_correct@@0  (=> (and (|$IsValid'u64'| _$t0@@0) (= _$t0@@0 _$t0@@0)) (=> (and (and (|$IsValid'u64'| 2) (= 2 2)) (and (|$IsValid'u64'| 2) (= $t4@0  (not (= 2 2))))) (and (=> (= (ControlFlow 0 16802) 16884) anon5_Then_correct) (=> (= (ControlFlow 0 16802) 16862) anon5_Else_correct))))))
(let ((anon0_correct@@0  (=> (= (ControlFlow 0 24855) 16802) anon0$1_correct@@0)))
anon0_correct@@0)))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun inline$$Not$0$dst@1 () Bool)
(declare-fun $t4@0@@0 () Bool)
(declare-fun $t5@0 () Bool)
(declare-fun _$t0@@1 () Int)
(declare-fun _$t1@@0 () Int)
(declare-fun $t12@0 () Bool)
(declare-fun inline$$Le$0$dst@1 () Bool)
(declare-fun inline$$Lt$0$dst@1 () Bool)
(declare-fun inline$$Ge$0$dst@1 () Bool)
(declare-fun inline$$Gt$0$dst@1 () Bool)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_bool_ops$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 25030) (let ((anon11_Else_correct  (=> (not inline$$Not$0$dst@1) (=> (and (= $t4@0@@0 $t4@0@@0) (= $t5@0 $t5@0)) (and (=> (= (ControlFlow 0 17276) (- 0 25371)) (= $t4@0@@0  (and (> _$t0@@1 _$t1@@0) (>= _$t0@@1 _$t1@@0)))) (=> (= $t4@0@@0  (and (> _$t0@@1 _$t1@@0) (>= _$t0@@1 _$t1@@0))) (=> (= (ControlFlow 0 17276) (- 0 25387)) (= $t5@0  (or (< _$t0@@1 _$t1@@0) (<= _$t0@@1 _$t1@@0))))))))))
(let ((anon11_Then_correct true))
(let ((inline$$Not$0$anon0_correct  (=> (= inline$$Not$0$dst@1  (not $t12@0)) (and (=> (= (ControlFlow 0 17204) 17298) anon11_Then_correct) (=> (= (ControlFlow 0 17204) 17276) anon11_Else_correct)))))
(let ((L7_correct  (=> (= $t5@0 $t5@0) (=> (and (= $t12@0  (not (= $t4@0@@0 $t5@0))) (= (ControlFlow 0 17210) 17204)) inline$$Not$0$anon0_correct))))
(let ((anon10_Else$1_correct  (=> (= inline$$Le$0$dst@1 inline$$Le$0$dst@1) (=> (and (= $t5@0 inline$$Le$0$dst@1) (= (ControlFlow 0 17156) 17210)) L7_correct))))
(let ((inline$$Le$0$anon0_correct  (=> (and (= inline$$Le$0$dst@1 (<= _$t0@@1 _$t1@@0)) (= (ControlFlow 0 17140) 17156)) anon10_Else$1_correct)))
(let ((anon10_Else_correct  (=> (and (not inline$$Lt$0$dst@1) (= (ControlFlow 0 17146) 17140)) inline$$Le$0$anon0_correct)))
(let ((anon10_Then_correct  (=> (and (and inline$$Lt$0$dst@1 (= true true)) (and (= $t5@0 true) (= (ControlFlow 0 17316) 17210))) L7_correct)))
(let ((inline$$Lt$0$anon0_correct  (=> (= inline$$Lt$0$dst@1 (< _$t0@@1 _$t1@@0)) (and (=> (= (ControlFlow 0 17086) 17316) anon10_Then_correct) (=> (= (ControlFlow 0 17086) 17146) anon10_Else_correct)))))
(let ((L3_correct  (=> (and (= $t4@0@@0 $t4@0@@0) (= (ControlFlow 0 17092) 17086)) inline$$Lt$0$anon0_correct)))
(let ((anon9_Then$1_correct  (=> (= inline$$Ge$0$dst@1 inline$$Ge$0$dst@1) (=> (and (= $t4@0@@0 inline$$Ge$0$dst@1) (= (ControlFlow 0 17376) 17092)) L3_correct))))
(let ((inline$$Ge$0$anon0_correct  (=> (and (= inline$$Ge$0$dst@1 (>= _$t0@@1 _$t1@@0)) (= (ControlFlow 0 17360) 17376)) anon9_Then$1_correct)))
(let ((anon9_Then_correct  (=> (and inline$$Gt$0$dst@1 (= (ControlFlow 0 17366) 17360)) inline$$Ge$0$anon0_correct)))
(let ((anon9_Else_correct  (=> (and (and (not inline$$Gt$0$dst@1) (= false false)) (and (= $t4@0@@0 false) (= (ControlFlow 0 17036) 17092))) L3_correct)))
(let ((inline$$Gt$0$anon0_correct  (=> (= inline$$Gt$0$dst@1 (> _$t0@@1 _$t1@@0)) (and (=> (= (ControlFlow 0 17008) 17366) anon9_Then_correct) (=> (= (ControlFlow 0 17008) 17036) anon9_Else_correct)))))
(let ((anon0$1_correct@@1  (=> (|$IsValid'u64'| _$t0@@1) (=> (and (and (|$IsValid'u64'| _$t1@@0) (= _$t0@@1 _$t0@@1)) (and (= _$t1@@0 _$t1@@0) (= (ControlFlow 0 17014) 17008))) inline$$Gt$0$anon0_correct))))
(let ((anon0_correct@@1  (=> (= (ControlFlow 0 25030) 17014) anon0$1_correct@@1)))
anon0_correct@@1))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun _$t1@@1 () Int)
(declare-fun $abort_flag@1 () Bool)
(declare-fun $abort_code@2 () Int)
(declare-fun $abort_flag@0@@0 () Bool)
(declare-fun $abort_code@1@@0 () Int)
(declare-fun inline$$Div$0$dst@2 () Int)
(declare-fun inline$$Mod$0$dst@2 () Int)
(declare-fun _$t0@@2 () Int)
(declare-fun inline$$Mod$0$dst@0 () Int)
(declare-fun inline$$Mod$0$dst@1 () Int)
(declare-fun inline$$Div$0$dst@0 () Int)
(declare-fun inline$$Div$0$dst@1 () Int)
(declare-fun $abort_code@0@@0 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_div$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 25415) (let ((L2_correct  (=> (= (ControlFlow 0 17834) (- 0 25739)) (= _$t1@@1 0))))
(let ((anon7_Then_correct  (=> $abort_flag@1 (=> (and (= $abort_code@2 $abort_code@2) (= (ControlFlow 0 17820) 17834)) L2_correct))))
(let ((anon6_Then_correct  (=> $abort_flag@0@@0 (=> (and (= $abort_code@1@@0 $abort_code@1@@0) (= (ControlFlow 0 17848) 17834)) L2_correct))))
(let ((anon7_Else_correct  (=> (not $abort_flag@1) (=> (and (= inline$$Div$0$dst@2 inline$$Div$0$dst@2) (= inline$$Mod$0$dst@2 inline$$Mod$0$dst@2)) (and (=> (= (ControlFlow 0 17806) (- 0 25705)) (not (= _$t1@@1 0))) (=> (not (= _$t1@@1 0)) (and (=> (= (ControlFlow 0 17806) (- 0 25715)) (= inline$$Div$0$dst@2 (div _$t0@@2 _$t1@@1))) (=> (= inline$$Div$0$dst@2 (div _$t0@@2 _$t1@@1)) (=> (= (ControlFlow 0 17806) (- 0 25725)) (= inline$$Mod$0$dst@2 (mod _$t0@@2 _$t1@@1)))))))))))
(let ((inline$$Mod$0$anon3_Then$1_correct  (=> (= $abort_code@2 $EXEC_FAILURE_CODE) (=> (and (= $abort_flag@1 true) (= inline$$Mod$0$dst@2 inline$$Mod$0$dst@0)) (and (=> (= (ControlFlow 0 17740) 17820) anon7_Then_correct) (=> (= (ControlFlow 0 17740) 17806) anon7_Else_correct))))))
(let ((inline$$Mod$0$anon3_Then_correct  (=> (and (= _$t1@@1 0) (= (ControlFlow 0 17738) 17740)) inline$$Mod$0$anon3_Then$1_correct)))
(let ((inline$$Mod$0$anon3_Else_correct  (=> (not (= _$t1@@1 0)) (=> (and (and (= inline$$Mod$0$dst@1 (mod _$t0@@2 _$t1@@1)) (= $abort_code@2 $abort_code@1@@0)) (and (= $abort_flag@1 $abort_flag@0@@0) (= inline$$Mod$0$dst@2 inline$$Mod$0$dst@1))) (and (=> (= (ControlFlow 0 17690) 17820) anon7_Then_correct) (=> (= (ControlFlow 0 17690) 17806) anon7_Else_correct))))))
(let ((anon6_Else_correct  (=> (not $abort_flag@0@@0) (and (=> (= (ControlFlow 0 17746) 17738) inline$$Mod$0$anon3_Then_correct) (=> (= (ControlFlow 0 17746) 17690) inline$$Mod$0$anon3_Else_correct)))))
(let ((inline$$Div$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@0 true) (=> (and (= $abort_code@1@@0 $EXEC_FAILURE_CODE) (= inline$$Div$0$dst@2 inline$$Div$0$dst@0)) (and (=> (= (ControlFlow 0 17593) 17848) anon6_Then_correct) (=> (= (ControlFlow 0 17593) 17746) anon6_Else_correct))))))
(let ((inline$$Div$0$anon3_Then_correct  (=> (and (= _$t1@@1 0) (= (ControlFlow 0 17591) 17593)) inline$$Div$0$anon3_Then$1_correct)))
(let ((inline$$Div$0$anon3_Else_correct  (=> (not (= _$t1@@1 0)) (=> (and (and (= inline$$Div$0$dst@1 (div _$t0@@2 _$t1@@1)) (= $abort_flag@0@@0 false)) (and (= $abort_code@1@@0 $abort_code@0@@0) (= inline$$Div$0$dst@2 inline$$Div$0$dst@1))) (and (=> (= (ControlFlow 0 17543) 17848) anon6_Then_correct) (=> (= (ControlFlow 0 17543) 17746) anon6_Else_correct))))))
(let ((anon0$1_correct@@2  (=> (and (and (|$IsValid'u64'| _$t0@@2) (|$IsValid'u64'| _$t1@@1)) (and (= _$t0@@2 _$t0@@2) (= _$t1@@1 _$t1@@1))) (and (=> (= (ControlFlow 0 17599) 17591) inline$$Div$0$anon3_Then_correct) (=> (= (ControlFlow 0 17599) 17543) inline$$Div$0$anon3_Else_correct)))))
(let ((anon0_correct@@2  (=> (= (ControlFlow 0 25415) 17599) anon0$1_correct@@2)))
anon0_correct@@2))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@1 () Bool)
(declare-fun inline$$Div$0$dst@2@@0 () Int)
(declare-fun $abort_code@1@@1 () Int)
(declare-fun inline$$Div$0$dst@0@@0 () Int)
(declare-fun inline$$Div$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@1 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_div_by_zero$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 25758) (let ((anon4_Else_correct@@0  (=> (not $abort_flag@0@@1) (=> (and (= inline$$Div$0$dst@2@@0 inline$$Div$0$dst@2@@0) (= (ControlFlow 0 18083) (- 0 25935))) (not true)))))
(let ((anon4_Then_correct@@0  (=> $abort_flag@0@@1 (=> (and (= $abort_code@1@@1 $abort_code@1@@1) (= (ControlFlow 0 18105) (- 0 25914))) true))))
(let ((inline$$Div$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@1 true) (=> (and (= $abort_code@1@@1 $EXEC_FAILURE_CODE) (= inline$$Div$0$dst@2@@0 inline$$Div$0$dst@0@@0)) (and (=> (= (ControlFlow 0 18053) 18105) anon4_Then_correct@@0) (=> (= (ControlFlow 0 18053) 18083) anon4_Else_correct@@0))))))
(let ((inline$$Div$0$anon3_Then_correct@@0  (=> (and (= 0 0) (= (ControlFlow 0 18051) 18053)) inline$$Div$0$anon3_Then$1_correct@@0)))
(let ((inline$$Div$0$anon3_Else_correct@@0  (=> (not (= 0 0)) (=> (and (and (= inline$$Div$0$dst@1@@0 (div 1 0)) (= $abort_flag@0@@1 false)) (and (= $abort_code@1@@1 $abort_code@0@@1) (= inline$$Div$0$dst@2@@0 inline$$Div$0$dst@1@@0))) (and (=> (= (ControlFlow 0 18003) 18105) anon4_Then_correct@@0) (=> (= (ControlFlow 0 18003) 18083) anon4_Else_correct@@0))))))
(let ((anon0$1_correct@@3  (=> (and (|$IsValid'u64'| 1) (|$IsValid'u64'| 0)) (and (=> (= (ControlFlow 0 18059) 18051) inline$$Div$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 18059) 18003) inline$$Div$0$anon3_Else_correct@@0)))))
(let ((anon0_correct@@3  (=> (= (ControlFlow 0 25758) 18059) anon0$1_correct@@3)))
anon0_correct@@3))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@2 () Bool)
(declare-fun inline$$Div$0$dst@2@@1 () Int)
(declare-fun _$t1@@2 () Int)
(declare-fun $abort_code@1@@2 () Int)
(declare-fun inline$$Div$0$dst@0@@1 () Int)
(declare-fun inline$$Div$0$dst@1@@1 () Int)
(declare-fun _$t0@@3 () Int)
(declare-fun $abort_code@0@@2 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_div_by_zero_u64$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 25951) (let ((anon4_Else_correct@@1  (=> (not $abort_flag@0@@2) (=> (and (= inline$$Div$0$dst@2@@1 inline$$Div$0$dst@2@@1) (= (ControlFlow 0 18354) (- 0 26138))) (not (= _$t1@@2 0))))))
(let ((anon4_Then_correct@@1  (=> $abort_flag@0@@2 (=> (and (= $abort_code@1@@2 $abort_code@1@@2) (= (ControlFlow 0 18380) (- 0 26114))) (= _$t1@@2 0)))))
(let ((inline$$Div$0$anon3_Then$1_correct@@1  (=> (= $abort_flag@0@@2 true) (=> (and (= $abort_code@1@@2 $EXEC_FAILURE_CODE) (= inline$$Div$0$dst@2@@1 inline$$Div$0$dst@0@@1)) (and (=> (= (ControlFlow 0 18320) 18380) anon4_Then_correct@@1) (=> (= (ControlFlow 0 18320) 18354) anon4_Else_correct@@1))))))
(let ((inline$$Div$0$anon3_Then_correct@@1  (=> (and (= _$t1@@2 0) (= (ControlFlow 0 18318) 18320)) inline$$Div$0$anon3_Then$1_correct@@1)))
(let ((inline$$Div$0$anon3_Else_correct@@1  (=> (not (= _$t1@@2 0)) (=> (and (and (= inline$$Div$0$dst@1@@1 (div _$t0@@3 _$t1@@2)) (= $abort_flag@0@@2 false)) (and (= $abort_code@1@@2 $abort_code@0@@2) (= inline$$Div$0$dst@2@@1 inline$$Div$0$dst@1@@1))) (and (=> (= (ControlFlow 0 18270) 18380) anon4_Then_correct@@1) (=> (= (ControlFlow 0 18270) 18354) anon4_Else_correct@@1))))))
(let ((anon0$1_correct@@4  (=> (and (and (|$IsValid'u64'| _$t0@@3) (|$IsValid'u64'| _$t1@@2)) (and (= _$t0@@3 _$t0@@3) (= _$t1@@2 _$t1@@2))) (and (=> (= (ControlFlow 0 18326) 18318) inline$$Div$0$anon3_Then_correct@@1) (=> (= (ControlFlow 0 18326) 18270) inline$$Div$0$anon3_Else_correct@@1)))))
(let ((anon0_correct@@4  (=> (= (ControlFlow 0 25951) 18326) anon0$1_correct@@4)))
anon0_correct@@4))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@3 () Bool)
(declare-fun inline$$Div$0$dst@2@@2 () Int)
(declare-fun $abort_code@1@@3 () Int)
(declare-fun inline$$Div$0$dst@0@@2 () Int)
(declare-fun _$t1@@3 () Int)
(declare-fun inline$$Div$0$dst@1@@2 () Int)
(declare-fun _$t0@@4 () Int)
(declare-fun $abort_code@0@@3 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_div_by_zero_u64_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 26157) (let ((anon4_Else_correct@@2  (=> (not $abort_flag@0@@3) (=> (and (= inline$$Div$0$dst@2@@2 inline$$Div$0$dst@2@@2) (= (ControlFlow 0 18625) (- 0 26341))) (not false)))))
(let ((anon4_Then_correct@@2  (=> $abort_flag@0@@3 (=> (and (= $abort_code@1@@3 $abort_code@1@@3) (= (ControlFlow 0 18647) (- 0 26320))) false))))
(let ((inline$$Div$0$anon3_Then$1_correct@@2  (=> (= $abort_flag@0@@3 true) (=> (and (= $abort_code@1@@3 $EXEC_FAILURE_CODE) (= inline$$Div$0$dst@2@@2 inline$$Div$0$dst@0@@2)) (and (=> (= (ControlFlow 0 18595) 18647) anon4_Then_correct@@2) (=> (= (ControlFlow 0 18595) 18625) anon4_Else_correct@@2))))))
(let ((inline$$Div$0$anon3_Then_correct@@2  (=> (and (= _$t1@@3 0) (= (ControlFlow 0 18593) 18595)) inline$$Div$0$anon3_Then$1_correct@@2)))
(let ((inline$$Div$0$anon3_Else_correct@@2  (=> (not (= _$t1@@3 0)) (=> (and (and (= inline$$Div$0$dst@1@@2 (div _$t0@@4 _$t1@@3)) (= $abort_flag@0@@3 false)) (and (= $abort_code@1@@3 $abort_code@0@@3) (= inline$$Div$0$dst@2@@2 inline$$Div$0$dst@1@@2))) (and (=> (= (ControlFlow 0 18545) 18647) anon4_Then_correct@@2) (=> (= (ControlFlow 0 18545) 18625) anon4_Else_correct@@2))))))
(let ((anon0$1_correct@@5  (=> (and (and (|$IsValid'u64'| _$t0@@4) (|$IsValid'u64'| _$t1@@3)) (and (= _$t0@@4 _$t0@@4) (= _$t1@@3 _$t1@@3))) (and (=> (= (ControlFlow 0 18601) 18593) inline$$Div$0$anon3_Then_correct@@2) (=> (= (ControlFlow 0 18601) 18545) inline$$Div$0$anon3_Else_correct@@2)))))
(let ((anon0_correct@@5  (=> (= (ControlFlow 0 26157) 18601) anon0$1_correct@@5)))
anon0_correct@@5))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 26157)))
(get-value ((ControlFlow 0 18601)))
(get-value ((ControlFlow 0 18593)))
(get-value ((ControlFlow 0 18595)))
(get-value ((ControlFlow 0 18647)))
(assert (not (= (ControlFlow 0 18647) (- 26320))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@4 () Bool)
(declare-fun inline$$AddU64$0$dst@2@@0 () Int)
(declare-fun _$t0@@5 () Int)
(declare-fun $abort_code@1@@4 () Int)
(declare-fun inline$$AddU64$0$dst@0@@0 () Int)
(declare-fun inline$$AddU64$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@4 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_f$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 26357) (let ((anon4_Else_correct@@3  (=> (and (not $abort_flag@0@@4) (= inline$$AddU64$0$dst@2@@0 inline$$AddU64$0$dst@2@@0)) (and (=> (= (ControlFlow 0 18922) (- 0 26552)) (not (> (+ _$t0@@5 1) $MAX_U64))) (=> (not (> (+ _$t0@@5 1) $MAX_U64)) (=> (= (ControlFlow 0 18922) (- 0 26566)) (= inline$$AddU64$0$dst@2@@0 (+ _$t0@@5 1))))))))
(let ((anon4_Then_correct@@3  (=> $abort_flag@0@@4 (=> (and (= $abort_code@1@@4 $abort_code@1@@4) (= (ControlFlow 0 18952) (- 0 26524))) (> (+ _$t0@@5 1) $MAX_U64)))))
(let ((inline$$AddU64$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@4 true) (=> (and (= $abort_code@1@@4 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2@@0 inline$$AddU64$0$dst@0@@0)) (and (=> (= (ControlFlow 0 18872) 18952) anon4_Then_correct@@3) (=> (= (ControlFlow 0 18872) 18922) anon4_Else_correct@@3))))))
(let ((inline$$AddU64$0$anon3_Then_correct@@0  (=> (and (> (+ _$t0@@5 1) $MAX_U64) (= (ControlFlow 0 18870) 18872)) inline$$AddU64$0$anon3_Then$1_correct@@0)))
(let ((inline$$AddU64$0$anon3_Else_correct@@0  (=> (>= $MAX_U64 (+ _$t0@@5 1)) (=> (and (and (= inline$$AddU64$0$dst@1@@0 (+ _$t0@@5 1)) (= $abort_flag@0@@4 false)) (and (= $abort_code@1@@4 $abort_code@0@@4) (= inline$$AddU64$0$dst@2@@0 inline$$AddU64$0$dst@1@@0))) (and (=> (= (ControlFlow 0 18818) 18952) anon4_Then_correct@@3) (=> (= (ControlFlow 0 18818) 18922) anon4_Else_correct@@3))))))
(let ((anon0$1_correct@@6  (=> (|$IsValid'u64'| _$t0@@5) (=> (and (= _$t0@@5 _$t0@@5) (|$IsValid'u64'| 1)) (and (=> (= (ControlFlow 0 18878) 18870) inline$$AddU64$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 18878) 18818) inline$$AddU64$0$anon3_Else_correct@@0))))))
(let ((anon0_correct@@6  (=> (= (ControlFlow 0 26357) 18878) anon0$1_correct@@6)))
anon0_correct@@6))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@5 () Bool)
(declare-fun inline$$AddU64$0$dst@2@@1 () Int)
(declare-fun _$t0@@6 () Int)
(declare-fun $abort_code@1@@5 () Int)
(declare-fun inline$$AddU64$0$dst@0@@1 () Int)
(declare-fun inline$$AddU64$0$dst@1@@1 () Int)
(declare-fun $abort_code@0@@5 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_g$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 26585) (let ((anon4_Else_correct@@4  (=> (and (not $abort_flag@0@@5) (= inline$$AddU64$0$dst@2@@1 inline$$AddU64$0$dst@2@@1)) (and (=> (= (ControlFlow 0 19227) (- 0 26780)) (not (> (+ _$t0@@6 2) $MAX_U64))) (=> (not (> (+ _$t0@@6 2) $MAX_U64)) (=> (= (ControlFlow 0 19227) (- 0 26794)) (= inline$$AddU64$0$dst@2@@1 (+ _$t0@@6 2))))))))
(let ((anon4_Then_correct@@4  (=> $abort_flag@0@@5 (=> (and (= $abort_code@1@@5 $abort_code@1@@5) (= (ControlFlow 0 19257) (- 0 26752))) (> (+ _$t0@@6 2) $MAX_U64)))))
(let ((inline$$AddU64$0$anon3_Then$1_correct@@1  (=> (= $abort_flag@0@@5 true) (=> (and (= $abort_code@1@@5 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2@@1 inline$$AddU64$0$dst@0@@1)) (and (=> (= (ControlFlow 0 19177) 19257) anon4_Then_correct@@4) (=> (= (ControlFlow 0 19177) 19227) anon4_Else_correct@@4))))))
(let ((inline$$AddU64$0$anon3_Then_correct@@1  (=> (and (> (+ _$t0@@6 2) $MAX_U64) (= (ControlFlow 0 19175) 19177)) inline$$AddU64$0$anon3_Then$1_correct@@1)))
(let ((inline$$AddU64$0$anon3_Else_correct@@1  (=> (>= $MAX_U64 (+ _$t0@@6 2)) (=> (and (and (= inline$$AddU64$0$dst@1@@1 (+ _$t0@@6 2)) (= $abort_flag@0@@5 false)) (and (= $abort_code@1@@5 $abort_code@0@@5) (= inline$$AddU64$0$dst@2@@1 inline$$AddU64$0$dst@1@@1))) (and (=> (= (ControlFlow 0 19123) 19257) anon4_Then_correct@@4) (=> (= (ControlFlow 0 19123) 19227) anon4_Else_correct@@4))))))
(let ((anon0$1_correct@@7  (=> (|$IsValid'u64'| _$t0@@6) (=> (and (= _$t0@@6 _$t0@@6) (|$IsValid'u64'| 2)) (and (=> (= (ControlFlow 0 19183) 19175) inline$$AddU64$0$anon3_Then_correct@@1) (=> (= (ControlFlow 0 19183) 19123) inline$$AddU64$0$anon3_Else_correct@@1))))))
(let ((anon0_correct@@7  (=> (= (ControlFlow 0 26585) 19183) anon0$1_correct@@7)))
anon0_correct@@7))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@3 () Bool)
(declare-fun $abort_code@2@@0 () Int)
(declare-fun $t2@0 () Bool)
(declare-fun $t1@0 () Bool)
(declare-fun $abort_flag@1@@0 () Bool)
(declare-fun $abort_code@1@@6 () Int)
(declare-fun $t4@0@@1 () Int)
(declare-fun inline$$Not$0$dst@1@@0 () Bool)
(declare-fun $t15@0 () Bool)
(declare-fun _$t0@@7 () Bool)
(declare-fun $t10@0 () Bool)
(declare-fun inline$$42_TestArithmetic_f$0$$ret0@1 () Int)
(declare-fun $abort_flag@2 () Bool)
(declare-fun inline$$AddU64$1$dst@2 () Int)
(declare-fun inline$$42_TestArithmetic_f$0$$ret0@0 () Int)
(declare-fun inline$$AddU64$1$dst@0 () Int)
(declare-fun inline$$AddU64$1$dst@1 () Int)
(declare-fun $abort_code@0@@6 () Int)
(declare-fun inline$$42_TestArithmetic_g$0$$ret0@1 () Int)
(declare-fun $abort_flag@0@@6 () Bool)
(declare-fun inline$$AddU64$0$dst@2@@2 () Int)
(declare-fun inline$$42_TestArithmetic_g$0$$ret0@0 () Int)
(declare-fun inline$$AddU64$0$dst@0@@2 () Int)
(declare-fun inline$$AddU64$0$dst@1@@2 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_h$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 26813) (let ((L19_correct  (=> (= (ControlFlow 0 19854) (- 0 27561)) false)))
(let ((anon19_Then_correct  (=> $abort_flag@3 (=> (and (= $abort_code@2@@0 $abort_code@2@@0) (= (ControlFlow 0 20321) 19854)) L19_correct))))
(let ((anon24_Then_correct  (=> (and (and $t2@0 (|$IsValid'u64'| 5)) (and (= 5 5) (= (ControlFlow 0 19844) 19854))) L19_correct)))
(let ((anon22_Then_correct  (=> (and (and $t1@0 (|$IsValid'u64'| 4)) (and (= 4 4) (= (ControlFlow 0 19900) 19854))) L19_correct)))
(let ((anon20_Then_correct  (=> $abort_flag@1@@0 (=> (and (= $abort_code@1@@6 $abort_code@1@@6) (= (ControlFlow 0 19940) 19854)) L19_correct))))
(let ((anon24_Else_correct  (=> (not $t2@0) (=> (and (= $t4@0@@1 $t4@0@@1) (= (ControlFlow 0 19824) (- 0 27552))) (not false)))))
(let ((anon23_Else_correct  (=> (not inline$$Not$0$dst@1@@0) (=> (and (= false false) (= $t2@0 false)) (and (=> (= (ControlFlow 0 19800) 19844) anon24_Then_correct) (=> (= (ControlFlow 0 19800) 19824) anon24_Else_correct))))))
(let ((anon23_Then_correct  (=> inline$$Not$0$dst@1@@0 (=> (and (and (|$IsValid'u64'| 5) (= $t15@0  (not (= $t4@0@@1 5)))) (and (= $t15@0 $t15@0) (= $t2@0 $t15@0))) (and (=> (= (ControlFlow 0 19880) 19844) anon24_Then_correct) (=> (= (ControlFlow 0 19880) 19824) anon24_Else_correct))))))
(let ((inline$$Not$0$anon0_correct@@0  (=> (= inline$$Not$0$dst@1@@0  (not _$t0@@7)) (and (=> (= (ControlFlow 0 19772) 19880) anon23_Then_correct) (=> (= (ControlFlow 0 19772) 19800) anon23_Else_correct)))))
(let ((anon22_Else_correct  (=> (and (not $t1@0) (= (ControlFlow 0 19778) 19772)) inline$$Not$0$anon0_correct@@0)))
(let ((anon21_Else_correct  (=> (not _$t0@@7) (=> (and (= false false) (= $t1@0 false)) (and (=> (= (ControlFlow 0 19734) 19900) anon22_Then_correct) (=> (= (ControlFlow 0 19734) 19778) anon22_Else_correct))))))
(let ((anon21_Then_correct  (=> _$t0@@7 (=> (and (and (|$IsValid'u64'| 4) (= $t10@0  (not (= $t4@0@@1 4)))) (and (= $t10@0 $t10@0) (= $t1@0 $t10@0))) (and (=> (= (ControlFlow 0 19926) 19900) anon22_Then_correct) (=> (= (ControlFlow 0 19926) 19778) anon22_Else_correct))))))
(let ((anon19_Else_correct  (=> (not $abort_flag@3) (=> (and (= inline$$42_TestArithmetic_f$0$$ret0@1 inline$$42_TestArithmetic_f$0$$ret0@1) (= $t4@0@@1 inline$$42_TestArithmetic_f$0$$ret0@1)) (and (=> (= (ControlFlow 0 20307) 19926) anon21_Then_correct) (=> (= (ControlFlow 0 20307) 19734) anon21_Else_correct))))))
(let ((inline$$42_TestArithmetic_f$0$anon3_Else_correct  (=> (and (and (not $abort_flag@2) (= inline$$AddU64$1$dst@2 inline$$AddU64$1$dst@2)) (and (= inline$$42_TestArithmetic_f$0$$ret0@1 inline$$AddU64$1$dst@2) (= $abort_flag@3 $abort_flag@2))) (and (=> (= (ControlFlow 0 20267) 20321) anon19_Then_correct) (=> (= (ControlFlow 0 20267) 20307) anon19_Else_correct)))))
(let ((inline$$42_TestArithmetic_f$0$anon3_Then_correct  (=> (and (and $abort_flag@2 (= $abort_code@2@@0 $abort_code@2@@0)) (and (= inline$$42_TestArithmetic_f$0$$ret0@1 inline$$42_TestArithmetic_f$0$$ret0@0) (= $abort_flag@3 true))) (and (=> (= (ControlFlow 0 20285) 20321) anon19_Then_correct) (=> (= (ControlFlow 0 20285) 20307) anon19_Else_correct)))))
(let ((inline$$AddU64$1$anon3_Then$1_correct  (=> (= $abort_flag@2 true) (=> (and (= $abort_code@2@@0 $EXEC_FAILURE_CODE) (= inline$$AddU64$1$dst@2 inline$$AddU64$1$dst@0)) (and (=> (= (ControlFlow 0 20243) 20285) inline$$42_TestArithmetic_f$0$anon3_Then_correct) (=> (= (ControlFlow 0 20243) 20267) inline$$42_TestArithmetic_f$0$anon3_Else_correct))))))
(let ((inline$$AddU64$1$anon3_Then_correct  (=> (and (> (+ 3 1) $MAX_U64) (= (ControlFlow 0 20241) 20243)) inline$$AddU64$1$anon3_Then$1_correct)))
(let ((inline$$AddU64$1$anon3_Else_correct  (=> (>= $MAX_U64 (+ 3 1)) (=> (and (and (= inline$$AddU64$1$dst@1 (+ 3 1)) (= $abort_flag@2 false)) (and (= $abort_code@2@@0 $abort_code@0@@6) (= inline$$AddU64$1$dst@2 inline$$AddU64$1$dst@1))) (and (=> (= (ControlFlow 0 20189) 20285) inline$$42_TestArithmetic_f$0$anon3_Then_correct) (=> (= (ControlFlow 0 20189) 20267) inline$$42_TestArithmetic_f$0$anon3_Else_correct))))))
(let ((inline$$42_TestArithmetic_f$0$anon0_correct  (=> (and (= 3 3) (|$IsValid'u64'| 1)) (and (=> (= (ControlFlow 0 20249) 20241) inline$$AddU64$1$anon3_Then_correct) (=> (= (ControlFlow 0 20249) 20189) inline$$AddU64$1$anon3_Else_correct)))))
(let ((anon18_Then_correct  (=> (and _$t0@@7 (= (ControlFlow 0 20291) 20249)) inline$$42_TestArithmetic_f$0$anon0_correct)))
(let ((anon20_Else_correct  (=> (not $abort_flag@1@@0) (=> (and (= inline$$42_TestArithmetic_g$0$$ret0@1 inline$$42_TestArithmetic_g$0$$ret0@1) (= $t4@0@@1 inline$$42_TestArithmetic_g$0$$ret0@1)) (and (=> (= (ControlFlow 0 19712) 19926) anon21_Then_correct) (=> (= (ControlFlow 0 19712) 19734) anon21_Else_correct))))))
(let ((inline$$42_TestArithmetic_g$0$anon3_Else_correct  (=> (and (and (not $abort_flag@0@@6) (= inline$$AddU64$0$dst@2@@2 inline$$AddU64$0$dst@2@@2)) (and (= inline$$42_TestArithmetic_g$0$$ret0@1 inline$$AddU64$0$dst@2@@2) (= $abort_flag@1@@0 $abort_flag@0@@6))) (and (=> (= (ControlFlow 0 19670) 19940) anon20_Then_correct) (=> (= (ControlFlow 0 19670) 19712) anon20_Else_correct)))))
(let ((inline$$42_TestArithmetic_g$0$anon3_Then_correct  (=> (and (and $abort_flag@0@@6 (= $abort_code@1@@6 $abort_code@1@@6)) (and (= inline$$42_TestArithmetic_g$0$$ret0@1 inline$$42_TestArithmetic_g$0$$ret0@0) (= $abort_flag@1@@0 true))) (and (=> (= (ControlFlow 0 19688) 19940) anon20_Then_correct) (=> (= (ControlFlow 0 19688) 19712) anon20_Else_correct)))))
(let ((inline$$AddU64$0$anon3_Then$1_correct@@2  (=> (= $abort_flag@0@@6 true) (=> (and (= $abort_code@1@@6 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2@@2 inline$$AddU64$0$dst@0@@2)) (and (=> (= (ControlFlow 0 19646) 19688) inline$$42_TestArithmetic_g$0$anon3_Then_correct) (=> (= (ControlFlow 0 19646) 19670) inline$$42_TestArithmetic_g$0$anon3_Else_correct))))))
(let ((inline$$AddU64$0$anon3_Then_correct@@2  (=> (and (> (+ 3 2) $MAX_U64) (= (ControlFlow 0 19644) 19646)) inline$$AddU64$0$anon3_Then$1_correct@@2)))
(let ((inline$$AddU64$0$anon3_Else_correct@@2  (=> (>= $MAX_U64 (+ 3 2)) (=> (and (and (= inline$$AddU64$0$dst@1@@2 (+ 3 2)) (= $abort_flag@0@@6 false)) (and (= $abort_code@1@@6 $abort_code@0@@6) (= inline$$AddU64$0$dst@2@@2 inline$$AddU64$0$dst@1@@2))) (and (=> (= (ControlFlow 0 19592) 19688) inline$$42_TestArithmetic_g$0$anon3_Then_correct) (=> (= (ControlFlow 0 19592) 19670) inline$$42_TestArithmetic_g$0$anon3_Else_correct))))))
(let ((inline$$42_TestArithmetic_g$0$anon0_correct  (=> (and (= 3 3) (|$IsValid'u64'| 2)) (and (=> (= (ControlFlow 0 19652) 19644) inline$$AddU64$0$anon3_Then_correct@@2) (=> (= (ControlFlow 0 19652) 19592) inline$$AddU64$0$anon3_Else_correct@@2)))))
(let ((anon18_Else_correct  (=> (and (not _$t0@@7) (= (ControlFlow 0 19694) 19652)) inline$$42_TestArithmetic_g$0$anon0_correct)))
(let ((anon0$1_correct@@8  (=> (= _$t0@@7 _$t0@@7) (=> (and (|$IsValid'u64'| 3) (= 3 3)) (and (=> (= (ControlFlow 0 19341) 20291) anon18_Then_correct) (=> (= (ControlFlow 0 19341) 19694) anon18_Else_correct))))))
(let ((anon0_correct@@8  (=> (= (ControlFlow 0 26813) 19341) anon0$1_correct@@8)))
anon0_correct@@8)))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@1@@1 () Bool)
(declare-fun inline$$AddU64$0$dst@2@@3 () Int)
(declare-fun _$t0@@8 () Int)
(declare-fun _$t1@@4 () Int)
(declare-fun _$t2 () Int)
(declare-fun $abort_code@2@@1 () Int)
(declare-fun inline$$AddU64$0$dst@0@@3 () Int)
(declare-fun inline$$MulU64$0$dst@2 () Int)
(declare-fun inline$$AddU64$0$dst@1@@3 () Int)
(declare-fun $abort_code@1@@7 () Int)
(declare-fun $abort_flag@0@@7 () Bool)
(declare-fun inline$$MulU64$0$dst@0 () Int)
(declare-fun inline$$MulU64$0$dst@1 () Int)
(declare-fun $abort_code@0@@7 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_multiple_ops$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 27581) (let ((anon7_Else_correct@@0  (=> (not $abort_flag@1@@1) (=> (and (= inline$$AddU64$0$dst@2@@3 inline$$AddU64$0$dst@2@@3) (= (ControlFlow 0 20765) (- 0 27889))) (= inline$$AddU64$0$dst@2@@3 (+ _$t0@@8 (* _$t1@@4 _$t2)))))))
(let ((anon7_Then_correct@@0 true))
(let ((inline$$AddU64$0$anon3_Then$1_correct@@3  (=> (= $abort_code@2@@1 $EXEC_FAILURE_CODE) (=> (and (= $abort_flag@1@@1 true) (= inline$$AddU64$0$dst@2@@3 inline$$AddU64$0$dst@0@@3)) (and (=> (= (ControlFlow 0 20725) 20779) anon7_Then_correct@@0) (=> (= (ControlFlow 0 20725) 20765) anon7_Else_correct@@0))))))
(let ((inline$$AddU64$0$anon3_Then_correct@@3  (=> (and (> (+ _$t0@@8 inline$$MulU64$0$dst@2) $MAX_U64) (= (ControlFlow 0 20723) 20725)) inline$$AddU64$0$anon3_Then$1_correct@@3)))
(let ((inline$$AddU64$0$anon3_Else_correct@@3  (=> (>= $MAX_U64 (+ _$t0@@8 inline$$MulU64$0$dst@2)) (=> (and (and (= inline$$AddU64$0$dst@1@@3 (+ _$t0@@8 inline$$MulU64$0$dst@2)) (= $abort_code@2@@1 $abort_code@1@@7)) (and (= $abort_flag@1@@1 $abort_flag@0@@7) (= inline$$AddU64$0$dst@2@@3 inline$$AddU64$0$dst@1@@3))) (and (=> (= (ControlFlow 0 20671) 20779) anon7_Then_correct@@0) (=> (= (ControlFlow 0 20671) 20765) anon7_Else_correct@@0))))))
(let ((anon6_Else_correct@@0  (=> (not $abort_flag@0@@7) (and (=> (= (ControlFlow 0 20731) 20723) inline$$AddU64$0$anon3_Then_correct@@3) (=> (= (ControlFlow 0 20731) 20671) inline$$AddU64$0$anon3_Else_correct@@3)))))
(let ((anon6_Then_correct@@0 true))
(let ((inline$$MulU64$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@7 true) (=> (and (= $abort_code@1@@7 $EXEC_FAILURE_CODE) (= inline$$MulU64$0$dst@2 inline$$MulU64$0$dst@0)) (and (=> (= (ControlFlow 0 20564) 20799) anon6_Then_correct@@0) (=> (= (ControlFlow 0 20564) 20731) anon6_Else_correct@@0))))))
(let ((inline$$MulU64$0$anon3_Then_correct  (=> (and (> (* _$t1@@4 _$t2) $MAX_U64) (= (ControlFlow 0 20562) 20564)) inline$$MulU64$0$anon3_Then$1_correct)))
(let ((inline$$MulU64$0$anon3_Else_correct  (=> (>= $MAX_U64 (* _$t1@@4 _$t2)) (=> (and (and (= inline$$MulU64$0$dst@1 (* _$t1@@4 _$t2)) (= $abort_flag@0@@7 false)) (and (= $abort_code@1@@7 $abort_code@0@@7) (= inline$$MulU64$0$dst@2 inline$$MulU64$0$dst@1))) (and (=> (= (ControlFlow 0 20510) 20799) anon6_Then_correct@@0) (=> (= (ControlFlow 0 20510) 20731) anon6_Else_correct@@0))))))
(let ((anon0$1_correct@@9  (=> (and (|$IsValid'u64'| _$t0@@8) (|$IsValid'u64'| _$t1@@4)) (=> (and (and (|$IsValid'u64'| _$t2) (= _$t0@@8 _$t0@@8)) (and (= _$t1@@4 _$t1@@4) (= _$t2 _$t2))) (and (=> (= (ControlFlow 0 20570) 20562) inline$$MulU64$0$anon3_Then_correct) (=> (= (ControlFlow 0 20570) 20510) inline$$MulU64$0$anon3_Else_correct))))))
(let ((anon0_correct@@9  (=> (= (ControlFlow 0 27581) 20570) anon0$1_correct@@9)))
anon0_correct@@9)))))))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@8 () Bool)
(declare-fun inline$$AddU128$0$dst@2 () Int)
(declare-fun _$t0@@9 () Int)
(declare-fun _$t1@@5 () Int)
(declare-fun $abort_code@1@@8 () Int)
(declare-fun inline$$AddU128$0$dst@0 () Int)
(declare-fun inline$$AddU128$0$dst@1 () Int)
(declare-fun $abort_code@0@@8 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u128_add$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 27917) (let ((anon4_Else_correct@@5  (=> (not $abort_flag@0@@8) (=> (and (= inline$$AddU128$0$dst@2 inline$$AddU128$0$dst@2) (= (ControlFlow 0 21066) (- 0 28113))) (not (> (+ _$t0@@9 _$t1@@5) $MAX_U128))))))
(let ((anon4_Then_correct@@5  (=> $abort_flag@0@@8 (=> (and (= $abort_code@1@@8 $abort_code@1@@8) (= (ControlFlow 0 21096) (- 0 28086))) (> (+ _$t0@@9 _$t1@@5) $MAX_U128)))))
(let ((inline$$AddU128$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@8 true) (=> (and (= $abort_code@1@@8 $EXEC_FAILURE_CODE) (= inline$$AddU128$0$dst@2 inline$$AddU128$0$dst@0)) (and (=> (= (ControlFlow 0 21028) 21096) anon4_Then_correct@@5) (=> (= (ControlFlow 0 21028) 21066) anon4_Else_correct@@5))))))
(let ((inline$$AddU128$0$anon3_Then_correct  (=> (and (> (+ _$t0@@9 _$t1@@5) $MAX_U128) (= (ControlFlow 0 21026) 21028)) inline$$AddU128$0$anon3_Then$1_correct)))
(let ((inline$$AddU128$0$anon3_Else_correct  (=> (>= $MAX_U128 (+ _$t0@@9 _$t1@@5)) (=> (and (and (= inline$$AddU128$0$dst@1 (+ _$t0@@9 _$t1@@5)) (= $abort_flag@0@@8 false)) (and (= $abort_code@1@@8 $abort_code@0@@8) (= inline$$AddU128$0$dst@2 inline$$AddU128$0$dst@1))) (and (=> (= (ControlFlow 0 20974) 21096) anon4_Then_correct@@5) (=> (= (ControlFlow 0 20974) 21066) anon4_Else_correct@@5))))))
(let ((anon0$1_correct@@10  (=> (and (and (|$IsValid'u128'| _$t0@@9) (|$IsValid'u128'| _$t1@@5)) (and (= _$t0@@9 _$t0@@9) (= _$t1@@5 _$t1@@5))) (and (=> (= (ControlFlow 0 21034) 21026) inline$$AddU128$0$anon3_Then_correct) (=> (= (ControlFlow 0 21034) 20974) inline$$AddU128$0$anon3_Else_correct)))))
(let ((anon0_correct@@10  (=> (= (ControlFlow 0 27917) 21034) anon0$1_correct@@10)))
anon0_correct@@10))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@9 () Bool)
(declare-fun inline$$AddU128$0$dst@2@@0 () Int)
(declare-fun $abort_code@1@@9 () Int)
(declare-fun inline$$AddU128$0$dst@0@@0 () Int)
(declare-fun _$t0@@10 () Int)
(declare-fun _$t1@@6 () Int)
(declare-fun inline$$AddU128$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@9 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u128_add_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 28135) (let ((anon4_Else_correct@@6  (=> (not $abort_flag@0@@9) (=> (and (= inline$$AddU128$0$dst@2@@0 inline$$AddU128$0$dst@2@@0) (= (ControlFlow 0 21355) (- 0 28325))) (not false)))))
(let ((anon4_Then_correct@@6  (=> $abort_flag@0@@9 (=> (and (= $abort_code@1@@9 $abort_code@1@@9) (= (ControlFlow 0 21377) (- 0 28304))) false))))
(let ((inline$$AddU128$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@9 true) (=> (and (= $abort_code@1@@9 $EXEC_FAILURE_CODE) (= inline$$AddU128$0$dst@2@@0 inline$$AddU128$0$dst@0@@0)) (and (=> (= (ControlFlow 0 21325) 21377) anon4_Then_correct@@6) (=> (= (ControlFlow 0 21325) 21355) anon4_Else_correct@@6))))))
(let ((inline$$AddU128$0$anon3_Then_correct@@0  (=> (and (> (+ _$t0@@10 _$t1@@6) $MAX_U128) (= (ControlFlow 0 21323) 21325)) inline$$AddU128$0$anon3_Then$1_correct@@0)))
(let ((inline$$AddU128$0$anon3_Else_correct@@0  (=> (>= $MAX_U128 (+ _$t0@@10 _$t1@@6)) (=> (and (and (= inline$$AddU128$0$dst@1@@0 (+ _$t0@@10 _$t1@@6)) (= $abort_flag@0@@9 false)) (and (= $abort_code@1@@9 $abort_code@0@@9) (= inline$$AddU128$0$dst@2@@0 inline$$AddU128$0$dst@1@@0))) (and (=> (= (ControlFlow 0 21271) 21377) anon4_Then_correct@@6) (=> (= (ControlFlow 0 21271) 21355) anon4_Else_correct@@6))))))
(let ((anon0$1_correct@@11  (=> (and (and (|$IsValid'u128'| _$t0@@10) (|$IsValid'u128'| _$t1@@6)) (and (= _$t0@@10 _$t0@@10) (= _$t1@@6 _$t1@@6))) (and (=> (= (ControlFlow 0 21331) 21323) inline$$AddU128$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 21331) 21271) inline$$AddU128$0$anon3_Else_correct@@0)))))
(let ((anon0_correct@@11  (=> (= (ControlFlow 0 28135) 21331) anon0$1_correct@@11)))
anon0_correct@@11))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 28135)))
(get-value ((ControlFlow 0 21331)))
(get-value ((ControlFlow 0 21323)))
(get-value ((ControlFlow 0 21325)))
(get-value ((ControlFlow 0 21377)))
(assert (not (= (ControlFlow 0 21377) (- 28304))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@10 () Bool)
(declare-fun inline$$MulU128$0$dst@2 () Int)
(declare-fun _$t0@@11 () Int)
(declare-fun _$t1@@7 () Int)
(declare-fun $abort_code@1@@10 () Int)
(declare-fun inline$$MulU128$0$dst@0 () Int)
(declare-fun inline$$MulU128$0$dst@1 () Int)
(declare-fun $abort_code@0@@10 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u128_mul$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 28342) (let ((anon4_Else_correct@@7  (=> (not $abort_flag@0@@10) (=> (and (= inline$$MulU128$0$dst@2 inline$$MulU128$0$dst@2) (= (ControlFlow 0 21644) (- 0 28538))) (not (> (* _$t0@@11 _$t1@@7) $MAX_U128))))))
(let ((anon4_Then_correct@@7  (=> $abort_flag@0@@10 (=> (and (= $abort_code@1@@10 $abort_code@1@@10) (= (ControlFlow 0 21674) (- 0 28511))) (> (* _$t0@@11 _$t1@@7) $MAX_U128)))))
(let ((inline$$MulU128$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@10 true) (=> (and (= $abort_code@1@@10 $EXEC_FAILURE_CODE) (= inline$$MulU128$0$dst@2 inline$$MulU128$0$dst@0)) (and (=> (= (ControlFlow 0 21606) 21674) anon4_Then_correct@@7) (=> (= (ControlFlow 0 21606) 21644) anon4_Else_correct@@7))))))
(let ((inline$$MulU128$0$anon3_Then_correct  (=> (and (> (* _$t0@@11 _$t1@@7) $MAX_U128) (= (ControlFlow 0 21604) 21606)) inline$$MulU128$0$anon3_Then$1_correct)))
(let ((inline$$MulU128$0$anon3_Else_correct  (=> (>= $MAX_U128 (* _$t0@@11 _$t1@@7)) (=> (and (and (= inline$$MulU128$0$dst@1 (* _$t0@@11 _$t1@@7)) (= $abort_flag@0@@10 false)) (and (= $abort_code@1@@10 $abort_code@0@@10) (= inline$$MulU128$0$dst@2 inline$$MulU128$0$dst@1))) (and (=> (= (ControlFlow 0 21552) 21674) anon4_Then_correct@@7) (=> (= (ControlFlow 0 21552) 21644) anon4_Else_correct@@7))))))
(let ((anon0$1_correct@@12  (=> (and (and (|$IsValid'u128'| _$t0@@11) (|$IsValid'u128'| _$t1@@7)) (and (= _$t0@@11 _$t0@@11) (= _$t1@@7 _$t1@@7))) (and (=> (= (ControlFlow 0 21612) 21604) inline$$MulU128$0$anon3_Then_correct) (=> (= (ControlFlow 0 21612) 21552) inline$$MulU128$0$anon3_Else_correct)))))
(let ((anon0_correct@@12  (=> (= (ControlFlow 0 28342) 21612) anon0$1_correct@@12)))
anon0_correct@@12))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@11 () Bool)
(declare-fun inline$$MulU128$0$dst@2@@0 () Int)
(declare-fun $abort_code@1@@11 () Int)
(declare-fun inline$$MulU128$0$dst@0@@0 () Int)
(declare-fun _$t0@@12 () Int)
(declare-fun _$t1@@8 () Int)
(declare-fun inline$$MulU128$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@11 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u128_mul_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 28560) (let ((anon4_Else_correct@@8  (=> (not $abort_flag@0@@11) (=> (and (= inline$$MulU128$0$dst@2@@0 inline$$MulU128$0$dst@2@@0) (= (ControlFlow 0 21933) (- 0 28750))) (not false)))))
(let ((anon4_Then_correct@@8  (=> $abort_flag@0@@11 (=> (and (= $abort_code@1@@11 $abort_code@1@@11) (= (ControlFlow 0 21955) (- 0 28729))) false))))
(let ((inline$$MulU128$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@11 true) (=> (and (= $abort_code@1@@11 $EXEC_FAILURE_CODE) (= inline$$MulU128$0$dst@2@@0 inline$$MulU128$0$dst@0@@0)) (and (=> (= (ControlFlow 0 21903) 21955) anon4_Then_correct@@8) (=> (= (ControlFlow 0 21903) 21933) anon4_Else_correct@@8))))))
(let ((inline$$MulU128$0$anon3_Then_correct@@0  (=> (and (> (* _$t0@@12 _$t1@@8) $MAX_U128) (= (ControlFlow 0 21901) 21903)) inline$$MulU128$0$anon3_Then$1_correct@@0)))
(let ((inline$$MulU128$0$anon3_Else_correct@@0  (=> (>= $MAX_U128 (* _$t0@@12 _$t1@@8)) (=> (and (and (= inline$$MulU128$0$dst@1@@0 (* _$t0@@12 _$t1@@8)) (= $abort_flag@0@@11 false)) (and (= $abort_code@1@@11 $abort_code@0@@11) (= inline$$MulU128$0$dst@2@@0 inline$$MulU128$0$dst@1@@0))) (and (=> (= (ControlFlow 0 21849) 21955) anon4_Then_correct@@8) (=> (= (ControlFlow 0 21849) 21933) anon4_Else_correct@@8))))))
(let ((anon0$1_correct@@13  (=> (and (and (|$IsValid'u128'| _$t0@@12) (|$IsValid'u128'| _$t1@@8)) (and (= _$t0@@12 _$t0@@12) (= _$t1@@8 _$t1@@8))) (and (=> (= (ControlFlow 0 21909) 21901) inline$$MulU128$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 21909) 21849) inline$$MulU128$0$anon3_Else_correct@@0)))))
(let ((anon0_correct@@13  (=> (= (ControlFlow 0 28560) 21909) anon0$1_correct@@13)))
anon0_correct@@13))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 28560)))
(get-value ((ControlFlow 0 21909)))
(get-value ((ControlFlow 0 21901)))
(get-value ((ControlFlow 0 21903)))
(get-value ((ControlFlow 0 21955)))
(assert (not (= (ControlFlow 0 21955) (- 28729))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@12 () Bool)
(declare-fun inline$$AddU64$0$dst@2@@4 () Int)
(declare-fun _$t0@@13 () Int)
(declare-fun _$t1@@9 () Int)
(declare-fun $abort_code@1@@12 () Int)
(declare-fun inline$$AddU64$0$dst@0@@4 () Int)
(declare-fun inline$$AddU64$0$dst@1@@4 () Int)
(declare-fun $abort_code@0@@12 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u64_add$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 28767) (let ((anon4_Else_correct@@9  (=> (not $abort_flag@0@@12) (=> (and (= inline$$AddU64$0$dst@2@@4 inline$$AddU64$0$dst@2@@4) (= (ControlFlow 0 22222) (- 0 28963))) (not (> (+ _$t0@@13 _$t1@@9) $MAX_U64))))))
(let ((anon4_Then_correct@@9  (=> $abort_flag@0@@12 (=> (and (= $abort_code@1@@12 $abort_code@1@@12) (= (ControlFlow 0 22252) (- 0 28936))) (> (+ _$t0@@13 _$t1@@9) $MAX_U64)))))
(let ((inline$$AddU64$0$anon3_Then$1_correct@@4  (=> (= $abort_flag@0@@12 true) (=> (and (= $abort_code@1@@12 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2@@4 inline$$AddU64$0$dst@0@@4)) (and (=> (= (ControlFlow 0 22184) 22252) anon4_Then_correct@@9) (=> (= (ControlFlow 0 22184) 22222) anon4_Else_correct@@9))))))
(let ((inline$$AddU64$0$anon3_Then_correct@@4  (=> (and (> (+ _$t0@@13 _$t1@@9) $MAX_U64) (= (ControlFlow 0 22182) 22184)) inline$$AddU64$0$anon3_Then$1_correct@@4)))
(let ((inline$$AddU64$0$anon3_Else_correct@@4  (=> (>= $MAX_U64 (+ _$t0@@13 _$t1@@9)) (=> (and (and (= inline$$AddU64$0$dst@1@@4 (+ _$t0@@13 _$t1@@9)) (= $abort_flag@0@@12 false)) (and (= $abort_code@1@@12 $abort_code@0@@12) (= inline$$AddU64$0$dst@2@@4 inline$$AddU64$0$dst@1@@4))) (and (=> (= (ControlFlow 0 22130) 22252) anon4_Then_correct@@9) (=> (= (ControlFlow 0 22130) 22222) anon4_Else_correct@@9))))))
(let ((anon0$1_correct@@14  (=> (and (and (|$IsValid'u64'| _$t0@@13) (|$IsValid'u64'| _$t1@@9)) (and (= _$t0@@13 _$t0@@13) (= _$t1@@9 _$t1@@9))) (and (=> (= (ControlFlow 0 22190) 22182) inline$$AddU64$0$anon3_Then_correct@@4) (=> (= (ControlFlow 0 22190) 22130) inline$$AddU64$0$anon3_Else_correct@@4)))))
(let ((anon0_correct@@14  (=> (= (ControlFlow 0 28767) 22190) anon0$1_correct@@14)))
anon0_correct@@14))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@13 () Bool)
(declare-fun inline$$AddU64$0$dst@2@@5 () Int)
(declare-fun $abort_code@1@@13 () Int)
(declare-fun inline$$AddU64$0$dst@0@@5 () Int)
(declare-fun _$t0@@14 () Int)
(declare-fun _$t1@@10 () Int)
(declare-fun inline$$AddU64$0$dst@1@@5 () Int)
(declare-fun $abort_code@0@@13 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u64_add_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 28985) (let ((anon4_Else_correct@@10  (=> (not $abort_flag@0@@13) (=> (and (= inline$$AddU64$0$dst@2@@5 inline$$AddU64$0$dst@2@@5) (= (ControlFlow 0 22511) (- 0 29175))) (not false)))))
(let ((anon4_Then_correct@@10  (=> $abort_flag@0@@13 (=> (and (= $abort_code@1@@13 $abort_code@1@@13) (= (ControlFlow 0 22533) (- 0 29154))) false))))
(let ((inline$$AddU64$0$anon3_Then$1_correct@@5  (=> (= $abort_flag@0@@13 true) (=> (and (= $abort_code@1@@13 $EXEC_FAILURE_CODE) (= inline$$AddU64$0$dst@2@@5 inline$$AddU64$0$dst@0@@5)) (and (=> (= (ControlFlow 0 22481) 22533) anon4_Then_correct@@10) (=> (= (ControlFlow 0 22481) 22511) anon4_Else_correct@@10))))))
(let ((inline$$AddU64$0$anon3_Then_correct@@5  (=> (and (> (+ _$t0@@14 _$t1@@10) $MAX_U64) (= (ControlFlow 0 22479) 22481)) inline$$AddU64$0$anon3_Then$1_correct@@5)))
(let ((inline$$AddU64$0$anon3_Else_correct@@5  (=> (>= $MAX_U64 (+ _$t0@@14 _$t1@@10)) (=> (and (and (= inline$$AddU64$0$dst@1@@5 (+ _$t0@@14 _$t1@@10)) (= $abort_flag@0@@13 false)) (and (= $abort_code@1@@13 $abort_code@0@@13) (= inline$$AddU64$0$dst@2@@5 inline$$AddU64$0$dst@1@@5))) (and (=> (= (ControlFlow 0 22427) 22533) anon4_Then_correct@@10) (=> (= (ControlFlow 0 22427) 22511) anon4_Else_correct@@10))))))
(let ((anon0$1_correct@@15  (=> (and (and (|$IsValid'u64'| _$t0@@14) (|$IsValid'u64'| _$t1@@10)) (and (= _$t0@@14 _$t0@@14) (= _$t1@@10 _$t1@@10))) (and (=> (= (ControlFlow 0 22487) 22479) inline$$AddU64$0$anon3_Then_correct@@5) (=> (= (ControlFlow 0 22487) 22427) inline$$AddU64$0$anon3_Else_correct@@5)))))
(let ((anon0_correct@@15  (=> (= (ControlFlow 0 28985) 22487) anon0$1_correct@@15)))
anon0_correct@@15))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 28985)))
(get-value ((ControlFlow 0 22487)))
(get-value ((ControlFlow 0 22479)))
(get-value ((ControlFlow 0 22481)))
(get-value ((ControlFlow 0 22533)))
(assert (not (= (ControlFlow 0 22533) (- 29154))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@14 () Bool)
(declare-fun inline$$MulU64$0$dst@2@@0 () Int)
(declare-fun _$t0@@15 () Int)
(declare-fun _$t1@@11 () Int)
(declare-fun $abort_code@1@@14 () Int)
(declare-fun inline$$MulU64$0$dst@0@@0 () Int)
(declare-fun inline$$MulU64$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@14 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u64_mul$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 29192) (let ((anon4_Else_correct@@11  (=> (not $abort_flag@0@@14) (=> (and (= inline$$MulU64$0$dst@2@@0 inline$$MulU64$0$dst@2@@0) (= (ControlFlow 0 22800) (- 0 29388))) (not (> (* _$t0@@15 _$t1@@11) $MAX_U64))))))
(let ((anon4_Then_correct@@11  (=> $abort_flag@0@@14 (=> (and (= $abort_code@1@@14 $abort_code@1@@14) (= (ControlFlow 0 22830) (- 0 29361))) (> (* _$t0@@15 _$t1@@11) $MAX_U64)))))
(let ((inline$$MulU64$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@14 true) (=> (and (= $abort_code@1@@14 $EXEC_FAILURE_CODE) (= inline$$MulU64$0$dst@2@@0 inline$$MulU64$0$dst@0@@0)) (and (=> (= (ControlFlow 0 22762) 22830) anon4_Then_correct@@11) (=> (= (ControlFlow 0 22762) 22800) anon4_Else_correct@@11))))))
(let ((inline$$MulU64$0$anon3_Then_correct@@0  (=> (and (> (* _$t0@@15 _$t1@@11) $MAX_U64) (= (ControlFlow 0 22760) 22762)) inline$$MulU64$0$anon3_Then$1_correct@@0)))
(let ((inline$$MulU64$0$anon3_Else_correct@@0  (=> (>= $MAX_U64 (* _$t0@@15 _$t1@@11)) (=> (and (and (= inline$$MulU64$0$dst@1@@0 (* _$t0@@15 _$t1@@11)) (= $abort_flag@0@@14 false)) (and (= $abort_code@1@@14 $abort_code@0@@14) (= inline$$MulU64$0$dst@2@@0 inline$$MulU64$0$dst@1@@0))) (and (=> (= (ControlFlow 0 22708) 22830) anon4_Then_correct@@11) (=> (= (ControlFlow 0 22708) 22800) anon4_Else_correct@@11))))))
(let ((anon0$1_correct@@16  (=> (and (and (|$IsValid'u64'| _$t0@@15) (|$IsValid'u64'| _$t1@@11)) (and (= _$t0@@15 _$t0@@15) (= _$t1@@11 _$t1@@11))) (and (=> (= (ControlFlow 0 22768) 22760) inline$$MulU64$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 22768) 22708) inline$$MulU64$0$anon3_Else_correct@@0)))))
(let ((anon0_correct@@16  (=> (= (ControlFlow 0 29192) 22768) anon0$1_correct@@16)))
anon0_correct@@16))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@15 () Bool)
(declare-fun inline$$MulU64$0$dst@2@@1 () Int)
(declare-fun $abort_code@1@@15 () Int)
(declare-fun inline$$MulU64$0$dst@0@@1 () Int)
(declare-fun _$t0@@16 () Int)
(declare-fun _$t1@@12 () Int)
(declare-fun inline$$MulU64$0$dst@1@@1 () Int)
(declare-fun $abort_code@0@@15 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u64_mul_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 29410) (let ((anon4_Else_correct@@12  (=> (not $abort_flag@0@@15) (=> (and (= inline$$MulU64$0$dst@2@@1 inline$$MulU64$0$dst@2@@1) (= (ControlFlow 0 23089) (- 0 29600))) (not false)))))
(let ((anon4_Then_correct@@12  (=> $abort_flag@0@@15 (=> (and (= $abort_code@1@@15 $abort_code@1@@15) (= (ControlFlow 0 23111) (- 0 29579))) false))))
(let ((inline$$MulU64$0$anon3_Then$1_correct@@1  (=> (= $abort_flag@0@@15 true) (=> (and (= $abort_code@1@@15 $EXEC_FAILURE_CODE) (= inline$$MulU64$0$dst@2@@1 inline$$MulU64$0$dst@0@@1)) (and (=> (= (ControlFlow 0 23059) 23111) anon4_Then_correct@@12) (=> (= (ControlFlow 0 23059) 23089) anon4_Else_correct@@12))))))
(let ((inline$$MulU64$0$anon3_Then_correct@@1  (=> (and (> (* _$t0@@16 _$t1@@12) $MAX_U64) (= (ControlFlow 0 23057) 23059)) inline$$MulU64$0$anon3_Then$1_correct@@1)))
(let ((inline$$MulU64$0$anon3_Else_correct@@1  (=> (>= $MAX_U64 (* _$t0@@16 _$t1@@12)) (=> (and (and (= inline$$MulU64$0$dst@1@@1 (* _$t0@@16 _$t1@@12)) (= $abort_flag@0@@15 false)) (and (= $abort_code@1@@15 $abort_code@0@@15) (= inline$$MulU64$0$dst@2@@1 inline$$MulU64$0$dst@1@@1))) (and (=> (= (ControlFlow 0 23005) 23111) anon4_Then_correct@@12) (=> (= (ControlFlow 0 23005) 23089) anon4_Else_correct@@12))))))
(let ((anon0$1_correct@@17  (=> (and (and (|$IsValid'u64'| _$t0@@16) (|$IsValid'u64'| _$t1@@12)) (and (= _$t0@@16 _$t0@@16) (= _$t1@@12 _$t1@@12))) (and (=> (= (ControlFlow 0 23065) 23057) inline$$MulU64$0$anon3_Then_correct@@1) (=> (= (ControlFlow 0 23065) 23005) inline$$MulU64$0$anon3_Else_correct@@1)))))
(let ((anon0_correct@@17  (=> (= (ControlFlow 0 29410) 23065) anon0$1_correct@@17)))
anon0_correct@@17))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 29410)))
(get-value ((ControlFlow 0 23065)))
(get-value ((ControlFlow 0 23057)))
(get-value ((ControlFlow 0 23059)))
(get-value ((ControlFlow 0 23111)))
(assert (not (= (ControlFlow 0 23111) (- 29579))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@16 () Bool)
(declare-fun inline$$AddU8$0$dst@2 () Int)
(declare-fun _$t0@@17 () Int)
(declare-fun _$t1@@13 () Int)
(declare-fun $abort_code@1@@16 () Int)
(declare-fun inline$$AddU8$0$dst@0 () Int)
(declare-fun inline$$AddU8$0$dst@1 () Int)
(declare-fun $abort_code@0@@16 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u8_add$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 29617) (let ((anon4_Else_correct@@13  (=> (not $abort_flag@0@@16) (=> (and (= inline$$AddU8$0$dst@2 inline$$AddU8$0$dst@2) (= (ControlFlow 0 23378) (- 0 29813))) (not (> (+ _$t0@@17 _$t1@@13) $MAX_U8))))))
(let ((anon4_Then_correct@@13  (=> $abort_flag@0@@16 (=> (and (= $abort_code@1@@16 $abort_code@1@@16) (= (ControlFlow 0 23408) (- 0 29786))) (> (+ _$t0@@17 _$t1@@13) $MAX_U8)))))
(let ((inline$$AddU8$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@16 true) (=> (and (= $abort_code@1@@16 $EXEC_FAILURE_CODE) (= inline$$AddU8$0$dst@2 inline$$AddU8$0$dst@0)) (and (=> (= (ControlFlow 0 23340) 23408) anon4_Then_correct@@13) (=> (= (ControlFlow 0 23340) 23378) anon4_Else_correct@@13))))))
(let ((inline$$AddU8$0$anon3_Then_correct  (=> (and (> (+ _$t0@@17 _$t1@@13) $MAX_U8) (= (ControlFlow 0 23338) 23340)) inline$$AddU8$0$anon3_Then$1_correct)))
(let ((inline$$AddU8$0$anon3_Else_correct  (=> (>= $MAX_U8 (+ _$t0@@17 _$t1@@13)) (=> (and (and (= inline$$AddU8$0$dst@1 (+ _$t0@@17 _$t1@@13)) (= $abort_flag@0@@16 false)) (and (= $abort_code@1@@16 $abort_code@0@@16) (= inline$$AddU8$0$dst@2 inline$$AddU8$0$dst@1))) (and (=> (= (ControlFlow 0 23286) 23408) anon4_Then_correct@@13) (=> (= (ControlFlow 0 23286) 23378) anon4_Else_correct@@13))))))
(let ((anon0$1_correct@@18  (=> (and (and (|$IsValid'u8'| _$t0@@17) (|$IsValid'u8'| _$t1@@13)) (and (= _$t0@@17 _$t0@@17) (= _$t1@@13 _$t1@@13))) (and (=> (= (ControlFlow 0 23346) 23338) inline$$AddU8$0$anon3_Then_correct) (=> (= (ControlFlow 0 23346) 23286) inline$$AddU8$0$anon3_Else_correct)))))
(let ((anon0_correct@@18  (=> (= (ControlFlow 0 29617) 23346) anon0$1_correct@@18)))
anon0_correct@@18))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@17 () Bool)
(declare-fun inline$$AddU8$0$dst@2@@0 () Int)
(declare-fun $abort_code@1@@17 () Int)
(declare-fun inline$$AddU8$0$dst@0@@0 () Int)
(declare-fun _$t0@@18 () Int)
(declare-fun _$t1@@14 () Int)
(declare-fun inline$$AddU8$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@17 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u8_add_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 29835) (let ((anon4_Else_correct@@14  (=> (not $abort_flag@0@@17) (=> (and (= inline$$AddU8$0$dst@2@@0 inline$$AddU8$0$dst@2@@0) (= (ControlFlow 0 23667) (- 0 30025))) (not false)))))
(let ((anon4_Then_correct@@14  (=> $abort_flag@0@@17 (=> (and (= $abort_code@1@@17 $abort_code@1@@17) (= (ControlFlow 0 23689) (- 0 30004))) false))))
(let ((inline$$AddU8$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@17 true) (=> (and (= $abort_code@1@@17 $EXEC_FAILURE_CODE) (= inline$$AddU8$0$dst@2@@0 inline$$AddU8$0$dst@0@@0)) (and (=> (= (ControlFlow 0 23637) 23689) anon4_Then_correct@@14) (=> (= (ControlFlow 0 23637) 23667) anon4_Else_correct@@14))))))
(let ((inline$$AddU8$0$anon3_Then_correct@@0  (=> (and (> (+ _$t0@@18 _$t1@@14) $MAX_U8) (= (ControlFlow 0 23635) 23637)) inline$$AddU8$0$anon3_Then$1_correct@@0)))
(let ((inline$$AddU8$0$anon3_Else_correct@@0  (=> (>= $MAX_U8 (+ _$t0@@18 _$t1@@14)) (=> (and (and (= inline$$AddU8$0$dst@1@@0 (+ _$t0@@18 _$t1@@14)) (= $abort_flag@0@@17 false)) (and (= $abort_code@1@@17 $abort_code@0@@17) (= inline$$AddU8$0$dst@2@@0 inline$$AddU8$0$dst@1@@0))) (and (=> (= (ControlFlow 0 23583) 23689) anon4_Then_correct@@14) (=> (= (ControlFlow 0 23583) 23667) anon4_Else_correct@@14))))))
(let ((anon0$1_correct@@19  (=> (and (and (|$IsValid'u8'| _$t0@@18) (|$IsValid'u8'| _$t1@@14)) (and (= _$t0@@18 _$t0@@18) (= _$t1@@14 _$t1@@14))) (and (=> (= (ControlFlow 0 23643) 23635) inline$$AddU8$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 23643) 23583) inline$$AddU8$0$anon3_Else_correct@@0)))))
(let ((anon0_correct@@19  (=> (= (ControlFlow 0 29835) 23643) anon0$1_correct@@19)))
anon0_correct@@19))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 29835)))
(get-value ((ControlFlow 0 23643)))
(get-value ((ControlFlow 0 23635)))
(get-value ((ControlFlow 0 23637)))
(get-value ((ControlFlow 0 23689)))
(assert (not (= (ControlFlow 0 23689) (- 30004))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@18 () Bool)
(declare-fun inline$$MulU8$0$dst@2 () Int)
(declare-fun _$t0@@19 () Int)
(declare-fun _$t1@@15 () Int)
(declare-fun $abort_code@1@@18 () Int)
(declare-fun inline$$MulU8$0$dst@0 () Int)
(declare-fun inline$$MulU8$0$dst@1 () Int)
(declare-fun $abort_code@0@@18 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u8_mul$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 30042) (let ((anon4_Else_correct@@15  (=> (not $abort_flag@0@@18) (=> (and (= inline$$MulU8$0$dst@2 inline$$MulU8$0$dst@2) (= (ControlFlow 0 23956) (- 0 30238))) (not (> (* _$t0@@19 _$t1@@15) $MAX_U8))))))
(let ((anon4_Then_correct@@15  (=> $abort_flag@0@@18 (=> (and (= $abort_code@1@@18 $abort_code@1@@18) (= (ControlFlow 0 23986) (- 0 30211))) (> (* _$t0@@19 _$t1@@15) $MAX_U8)))))
(let ((inline$$MulU8$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@18 true) (=> (and (= $abort_code@1@@18 $EXEC_FAILURE_CODE) (= inline$$MulU8$0$dst@2 inline$$MulU8$0$dst@0)) (and (=> (= (ControlFlow 0 23918) 23986) anon4_Then_correct@@15) (=> (= (ControlFlow 0 23918) 23956) anon4_Else_correct@@15))))))
(let ((inline$$MulU8$0$anon3_Then_correct  (=> (and (> (* _$t0@@19 _$t1@@15) $MAX_U8) (= (ControlFlow 0 23916) 23918)) inline$$MulU8$0$anon3_Then$1_correct)))
(let ((inline$$MulU8$0$anon3_Else_correct  (=> (>= $MAX_U8 (* _$t0@@19 _$t1@@15)) (=> (and (and (= inline$$MulU8$0$dst@1 (* _$t0@@19 _$t1@@15)) (= $abort_flag@0@@18 false)) (and (= $abort_code@1@@18 $abort_code@0@@18) (= inline$$MulU8$0$dst@2 inline$$MulU8$0$dst@1))) (and (=> (= (ControlFlow 0 23864) 23986) anon4_Then_correct@@15) (=> (= (ControlFlow 0 23864) 23956) anon4_Else_correct@@15))))))
(let ((anon0$1_correct@@20  (=> (and (and (|$IsValid'u8'| _$t0@@19) (|$IsValid'u8'| _$t1@@15)) (and (= _$t0@@19 _$t0@@19) (= _$t1@@15 _$t1@@15))) (and (=> (= (ControlFlow 0 23924) 23916) inline$$MulU8$0$anon3_Then_correct) (=> (= (ControlFlow 0 23924) 23864) inline$$MulU8$0$anon3_Else_correct)))))
(let ((anon0_correct@@20  (=> (= (ControlFlow 0 30042) 23924) anon0$1_correct@@20)))
anon0_correct@@20))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $abort_flag@0@@19 () Bool)
(declare-fun inline$$MulU8$0$dst@2@@0 () Int)
(declare-fun $abort_code@1@@19 () Int)
(declare-fun inline$$MulU8$0$dst@0@@0 () Int)
(declare-fun _$t0@@20 () Int)
(declare-fun _$t1@@16 () Int)
(declare-fun inline$$MulU8$0$dst@1@@0 () Int)
(declare-fun $abort_code@0@@19 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_overflow_u8_mul_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 30260) (let ((anon4_Else_correct@@16  (=> (not $abort_flag@0@@19) (=> (and (= inline$$MulU8$0$dst@2@@0 inline$$MulU8$0$dst@2@@0) (= (ControlFlow 0 24245) (- 0 30450))) (not false)))))
(let ((anon4_Then_correct@@16  (=> $abort_flag@0@@19 (=> (and (= $abort_code@1@@19 $abort_code@1@@19) (= (ControlFlow 0 24267) (- 0 30429))) false))))
(let ((inline$$MulU8$0$anon3_Then$1_correct@@0  (=> (= $abort_flag@0@@19 true) (=> (and (= $abort_code@1@@19 $EXEC_FAILURE_CODE) (= inline$$MulU8$0$dst@2@@0 inline$$MulU8$0$dst@0@@0)) (and (=> (= (ControlFlow 0 24215) 24267) anon4_Then_correct@@16) (=> (= (ControlFlow 0 24215) 24245) anon4_Else_correct@@16))))))
(let ((inline$$MulU8$0$anon3_Then_correct@@0  (=> (and (> (* _$t0@@20 _$t1@@16) $MAX_U8) (= (ControlFlow 0 24213) 24215)) inline$$MulU8$0$anon3_Then$1_correct@@0)))
(let ((inline$$MulU8$0$anon3_Else_correct@@0  (=> (>= $MAX_U8 (* _$t0@@20 _$t1@@16)) (=> (and (and (= inline$$MulU8$0$dst@1@@0 (* _$t0@@20 _$t1@@16)) (= $abort_flag@0@@19 false)) (and (= $abort_code@1@@19 $abort_code@0@@19) (= inline$$MulU8$0$dst@2@@0 inline$$MulU8$0$dst@1@@0))) (and (=> (= (ControlFlow 0 24161) 24267) anon4_Then_correct@@16) (=> (= (ControlFlow 0 24161) 24245) anon4_Else_correct@@16))))))
(let ((anon0$1_correct@@21  (=> (and (and (|$IsValid'u8'| _$t0@@20) (|$IsValid'u8'| _$t1@@16)) (and (= _$t0@@20 _$t0@@20) (= _$t1@@16 _$t1@@16))) (and (=> (= (ControlFlow 0 24221) 24213) inline$$MulU8$0$anon3_Then_correct@@0) (=> (= (ControlFlow 0 24221) 24161) inline$$MulU8$0$anon3_Else_correct@@0)))))
(let ((anon0_correct@@21  (=> (= (ControlFlow 0 30260) 24221) anon0$1_correct@@21)))
anon0_correct@@21))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 30260)))
(get-value ((ControlFlow 0 24221)))
(get-value ((ControlFlow 0 24213)))
(get-value ((ControlFlow 0 24215)))
(get-value ((ControlFlow 0 24267)))
(assert (not (= (ControlFlow 0 24267) (- 30429))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $abort_flag@0@@20 () Bool)
(declare-fun inline$$Sub$0$dst@2 () Int)
(declare-fun $abort_code@1@@20 () Int)
(declare-fun inline$$Sub$0$dst@0 () Int)
(declare-fun inline$$Sub$0$dst@1 () Int)
(declare-fun $abort_code@0@@20 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestArithmetic_underflow$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 30465) (let ((anon4_Else_correct@@17  (=> (not $abort_flag@0@@20) (=> (and (= inline$$Sub$0$dst@2 inline$$Sub$0$dst@2) (= (ControlFlow 0 24498) (- 0 30637))) (not true)))))
(let ((anon4_Then_correct@@17  (=> $abort_flag@0@@20 (=> (and (= $abort_code@1@@20 $abort_code@1@@20) (= (ControlFlow 0 24520) (- 0 30616))) true))))
(let ((inline$$Sub$0$anon3_Then$1_correct  (=> (= $abort_flag@0@@20 true) (=> (and (= $abort_code@1@@20 $EXEC_FAILURE_CODE) (= inline$$Sub$0$dst@2 inline$$Sub$0$dst@0)) (and (=> (= (ControlFlow 0 24468) 24520) anon4_Then_correct@@17) (=> (= (ControlFlow 0 24468) 24498) anon4_Else_correct@@17))))))
(let ((inline$$Sub$0$anon3_Then_correct  (=> (and (< 0 1) (= (ControlFlow 0 24466) 24468)) inline$$Sub$0$anon3_Then$1_correct)))
(let ((inline$$Sub$0$anon3_Else_correct  (=> (<= 1 0) (=> (and (and (= inline$$Sub$0$dst@1 (- 0 1)) (= $abort_flag@0@@20 false)) (and (= $abort_code@1@@20 $abort_code@0@@20) (= inline$$Sub$0$dst@2 inline$$Sub$0$dst@1))) (and (=> (= (ControlFlow 0 24418) 24520) anon4_Then_correct@@17) (=> (= (ControlFlow 0 24418) 24498) anon4_Else_correct@@17))))))
(let ((anon0$1_correct@@22  (=> (and (|$IsValid'u64'| 0) (|$IsValid'u64'| 1)) (and (=> (= (ControlFlow 0 24474) 24466) inline$$Sub$0$anon3_Then_correct) (=> (= (ControlFlow 0 24474) 24418) inline$$Sub$0$anon3_Else_correct)))))
(let ((anon0_correct@@22  (=> (= (ControlFlow 0 30465) 24474) anon0$1_correct@@22)))
anon0_correct@@22))))))))
))
(check-sat)
(pop 1)
; Valid
