(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)

(declare-sort Element 0)
(declare-fun a_160 () (Seq Element))
(declare-fun a_161 () (Seq Element))
(declare-fun a_162 () (Seq Element))
(declare-fun a_163 () (Seq Element))
(declare-fun a_164 () (Seq Element))
(declare-fun a_165 () (Seq Element))
(declare-fun a_166 () (Seq Element))
(declare-fun a_167 () (Seq Element))
(declare-fun a_168 () (Seq Element))
(declare-fun a_169 () (Seq Element))
(declare-fun a_170 () (Seq Element))
(declare-fun a_171 () (Seq Element))
(declare-fun a_172 () (Seq Element))
(declare-fun a_173 () (Seq Element))
(declare-fun a_174 () (Seq Element))
(declare-fun a_175 () (Seq Element))
(declare-fun a_176 () (Seq Element))
(declare-fun a_177 () (Seq Element))
(declare-fun a_178 () (Seq Element))
(declare-fun a_179 () (Seq Element))
(declare-fun a1 () (Seq Element))
(declare-fun e1 () Element)
(declare-fun e10 () Element)
(declare-fun e2 () Element)
(declare-fun e3 () Element)
(declare-fun e4 () Element)
(declare-fun e5 () Element)
(declare-fun e6 () Element)
(declare-fun e7 () Element)
(declare-fun e8 () Element)
(declare-fun e9 () Element)
(declare-fun i1 () Int)
(declare-fun i10 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun i8 () Int)
(declare-fun i9 () Int)
(assert (= a_160 (seq.update a1 i1 (seq.unit e1))))
(assert (= a_161 (seq.update a_160 i2 (seq.unit e2))))
(assert (= a_162 (seq.update a_161 i3 (seq.unit e3))))
(assert (= a_163 (seq.update a_162 i4 (seq.unit e4))))
(assert (= a_164 (seq.update a_163 i5 (seq.unit e5))))
(assert (= a_165 (seq.update a_164 i6 (seq.unit e6))))
(assert (= a_166 (seq.update a_165 i7 (seq.unit e7))))
(assert (= a_167 (seq.update a_166 i8 (seq.unit e8))))
(assert (= a_168 (seq.update a_167 i9 (seq.unit e9))))
(assert (= a_169 (seq.update a_168 i10 (seq.unit e10))))
(assert (= a_170 (seq.update a1 i7 (seq.unit e7))))
(assert (= a_171 (seq.update a_170 i2 (seq.unit e2))))
(assert (= a_172 (seq.update a_171 i6 (seq.unit e6))))
(assert (= a_173 (seq.update a_172 i4 (seq.unit e4))))
(assert (= a_174 (seq.update a_173 i10 (seq.unit e10))))
(assert (= a_175 (seq.update a_174 i5 (seq.unit e5))))
(assert (= a_176 (seq.update a_175 i9 (seq.unit e9))))
(assert (= a_177 (seq.update a_176 i1 (seq.unit e1))))
(assert (= a_178 (seq.update a_177 i3 (seq.unit e3))))
(assert (= a_179 (seq.update a_178 i8 (seq.unit e8))))
(assert (not (= i9 i10)))
(assert (not (= i8 i10)))
(assert (not (= i8 i9)))
(assert (not (= i7 i10)))
(assert (not (= i7 i9)))
(assert (not (= i7 i8)))
(assert (not (= i6 i10)))
(assert (not (= i6 i9)))
(assert (not (= i6 i8)))
(assert (not (= i6 i7)))
(assert (not (= i5 i10)))
(assert (not (= i5 i9)))
(assert (not (= i5 i8)))
(assert (not (= i5 i7)))
(assert (not (= i5 i6)))
(assert (not (= i4 i10)))
(assert (not (= i4 i9)))
(assert (not (= i4 i8)))
(assert (not (= i4 i7)))
(assert (not (= i4 i6)))
(assert (not (= i4 i5)))
(assert (not (= i3 i10)))
(assert (not (= i3 i9)))
(assert (not (= i3 i8)))
(assert (not (= i3 i7)))
(assert (not (= i3 i6)))
(assert (not (= i3 i5)))
(assert (not (= i3 i4)))
(assert (not (= i2 i10)))
(assert (not (= i2 i9)))
(assert (not (= i2 i8)))
(assert (not (= i2 i7)))
(assert (not (= i2 i6)))
(assert (not (= i2 i5)))
(assert (not (= i2 i4)))
(assert (not (= i2 i3)))
(assert (not (= i1 i10)))
(assert (not (= i1 i9)))
(assert (not (= i1 i8)))
(assert (not (= i1 i7)))
(assert (not (= i1 i6)))
(assert (not (= i1 i5)))
(assert (not (= i1 i4)))
(assert (not (= i1 i3)))
(assert (not (= i1 i2)))
(assert (not (= a_169 a_179)))
(check-sat)
(exit)
