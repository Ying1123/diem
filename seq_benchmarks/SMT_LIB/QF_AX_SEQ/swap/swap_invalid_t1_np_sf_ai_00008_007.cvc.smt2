(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_240 () (Seq Element))
(declare-fun a_241 () (Seq Element))
(declare-fun a_243 () (Seq Element))
(declare-fun a_245 () (Seq Element))
(declare-fun a_247 () (Seq Element))
(declare-fun a_249 () (Seq Element))
(declare-fun a_251 () (Seq Element))
(declare-fun a_253 () (Seq Element))
(declare-fun a_255 () (Seq Element))
(declare-fun a_257 () (Seq Element))
(declare-fun a_259 () (Seq Element))
(declare-fun a_261 () (Seq Element))
(declare-fun a_263 () (Seq Element))
(declare-fun a_265 () (Seq Element))
(declare-fun a_267 () (Seq Element))
(declare-fun a_269 () (Seq Element))
(declare-fun a_270 () (Seq Element))
(declare-fun a_271 () (Seq Element))
(declare-fun a_273 () (Seq Element))
(declare-fun a_275 () (Seq Element))
(declare-fun a_277 () (Seq Element))
(declare-fun a_279 () (Seq Element))
(declare-fun a_281 () (Seq Element))
(declare-fun a_283 () (Seq Element))
(declare-fun a_285 () (Seq Element))
(declare-fun a_287 () (Seq Element))
(declare-fun a_289 () (Seq Element))
(declare-fun a_291 () (Seq Element))
(declare-fun e_239 () Element)
(declare-fun e_242 () Element)
(declare-fun e_244 () Element)
(declare-fun e_246 () Element)
(declare-fun e_248 () Element)
(declare-fun e_250 () Element)
(declare-fun e_252 () Element)
(declare-fun e_254 () Element)
(declare-fun e_256 () Element)
(declare-fun e_258 () Element)
(declare-fun e_260 () Element)
(declare-fun e_262 () Element)
(declare-fun e_264 () Element)
(declare-fun e_266 () Element)
(declare-fun e_268 () Element)
(declare-fun e_272 () Element)
(declare-fun e_274 () Element)
(declare-fun e_276 () Element)
(declare-fun e_278 () Element)
(declare-fun e_280 () Element)
(declare-fun e_282 () Element)
(declare-fun e_284 () Element)
(declare-fun e_286 () Element)
(declare-fun e_288 () Element)
(declare-fun e_290 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(assert (= a_240 (seq.update a1 i3 (seq.unit e_239))))
(assert (= a_241 (seq.update a_240 i3 (seq.unit e_239))))
(assert (= a_243 (seq.update a_241 i5 (seq.unit e_242))))
(assert (= a_245 (seq.update a_243 i7 (seq.unit e_244))))
(assert (= a_247 (seq.update a_245 i6 (seq.unit e_246))))
(assert (= a_249 (seq.update a_247 i7 (seq.unit e_248))))
(assert (= a_251 (seq.update a_249 i5 (seq.unit e_250))))
(assert (= a_253 (seq.update a_251 i7 (seq.unit e_252))))
(assert (= a_255 (seq.update a_253 i0 (seq.unit e_254))))
(assert (= a_257 (seq.update a_255 i7 (seq.unit e_256))))
(assert (= a_259 (seq.update a_257 i4 (seq.unit e_258))))
(assert (= a_261 (seq.update a_259 i2 (seq.unit e_260))))
(assert (= a_263 (seq.update a_261 i5 (seq.unit e_262))))
(assert (= a_265 (seq.update a_263 i2 (seq.unit e_264))))
(assert (= a_267 (seq.update a_265 i7 (seq.unit e_266))))
(assert (= a_269 (seq.update a_267 i0 (seq.unit e_268))))
(assert (= a_270 (seq.update a_245 i7 (seq.unit e_248))))
(assert (= a_271 (seq.update a_270 i6 (seq.unit e_246))))
(assert (= a_273 (seq.update a_271 i7 (seq.unit e_272))))
(assert (= a_275 (seq.update a_273 i5 (seq.unit e_274))))
(assert (= a_277 (seq.update a_275 i7 (seq.unit e_276))))
(assert (= a_279 (seq.update a_277 i0 (seq.unit e_278))))
(assert (= a_281 (seq.update a_279 i2 (seq.unit e_280))))
(assert (= a_283 (seq.update a_281 i4 (seq.unit e_282))))
(assert (= a_285 (seq.update a_283 i2 (seq.unit e_284))))
(assert (= a_287 (seq.update a_285 i5 (seq.unit e_286))))
(assert (= a_289 (seq.update a_287 i7 (seq.unit e_288))))
(assert (= a_291 (seq.update a_289 i1 (seq.unit e_290))))
(assert (= e_239 (seq.nth a1 i3)))
(assert (= e_242 (seq.nth a_241 i7)))
(assert (= e_244 (seq.nth a_241 i5)))
(assert (= e_246 (seq.nth a_245 i7)))
(assert (= e_248 (seq.nth a_245 i6)))
(assert (= e_250 (seq.nth a_249 i7)))
(assert (= e_252 (seq.nth a_249 i5)))
(assert (= e_254 (seq.nth a_253 i7)))
(assert (= e_256 (seq.nth a_253 i0)))
(assert (= e_258 (seq.nth a_257 i2)))
(assert (= e_260 (seq.nth a_257 i4)))
(assert (= e_262 (seq.nth a_261 i2)))
(assert (= e_264 (seq.nth a_261 i5)))
(assert (= e_266 (seq.nth a_265 i0)))
(assert (= e_268 (seq.nth a_265 i7)))
(assert (= e_272 (seq.nth a_271 i5)))
(assert (= e_274 (seq.nth a_271 i7)))
(assert (= e_276 (seq.nth a_275 i0)))
(assert (= e_278 (seq.nth a_275 i7)))
(assert (= e_280 (seq.nth a_279 i4)))
(assert (= e_282 (seq.nth a_279 i2)))
(assert (= e_284 (seq.nth a_283 i5)))
(assert (= e_286 (seq.nth a_283 i2)))
(assert (= e_288 (seq.nth a_287 i1)))
(assert (= e_290 (seq.nth a_287 i7)))
(assert (not (= a_269 a_291)))
(check-sat)
(exit)
