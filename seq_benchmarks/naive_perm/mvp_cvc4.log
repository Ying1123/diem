21:59:59 [DEBUG] (1) bytecode::verification_analysis_v2: marking `TestNaiveSort::verify_sort` to be verified
21:59:59 [DEBUG] (1) boogie_backend::bytecode_translator: translating module Vector
[INFO] translating module TestNaiveSort
21:59:59 [DEBUG] (1) move_prover: writing boogie to `output.bpl`
[INFO] running solver
21:59:59 [DEBUG] (1) boogie_backend::boogie_wrapper: command line: /home/ying/.dotnet/tools/boogie -doModSetAnalysis -printVerifiedProceduresCount:0 -printModel:1 -enhancedErrorMessages:1 -monomorphize -proverOpt:SOLVER=cvc4 -proverOpt:PROVER_PATH=/home/ying/bin/cvc4 -proverOpt:O:smt.QI.EAGER_THRESHOLD=100 -proverOpt:O:smt.QI.LAZY_THRESHOLD=100 -vcsCores:4 -proverLog:@PROC@.smt output.bpl
21:59:59 [DEBUG] (15) boogie_backend::prover_task_runner: runing Boogie command with seed 1
22:00:00 [DEBUG] (1) boogie_backend::boogie_wrapper: analyzing boogie output
22:00:00 [DEBUG] (1) boogie_backend::boogie_wrapper: writing boogie log to output.bpl.log
[INFO] 0.011s build, 0.007s trafo, 0.003s gen, 0.793s verify
error: verification inconclusive

    ┌── /home/ying/diem/language/move-prover/tests/sources/functional/naive_perm.move:6:2 ───
    │
  6 │ ╭     public fun verify_sort(v: &mut vector<u64>): vector<u64> {
  7 │ │ 		let vlen = Vector::length(v);
  8 │ │ 		spec {
  9 │ │ 			assume len(v) == 2;
 10 │ │ 		};
 11 │ │ 		let p = &mut Vector::empty<u64>();
 12 │ │ 		let i = 0;
 13 │ │ 		while ({
 14 │ │ 			spec {
 15 │ │ 				assert len(p) == i;
 16 │ │ 				assert forall k in 0..len(p): p[k] == k;
 17 │ │ 			};
 18 │ │ 			(i < vlen)
 19 │ │ 		}) {
 20 │ │ 			Vector::push_back(p, i);
 21 │ │ 			i = i + 1;
 22 │ │ 		};
 23 │ │ 
 24 │ │ 		*p
 25 │ │     }
    │ ╰─────^
    │

exiting with boogie verification errors
