(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)

(declare-sort Element 0)
(declare-fun a_100 () (Seq Element))
(declare-fun a_102 () (Seq Element))
(declare-fun a_104 () (Seq Element))
(declare-fun a_106 () (Seq Element))
(declare-fun a_108 () (Seq Element))
(declare-fun a_64 () (Seq Element))
(declare-fun a_66 () (Seq Element))
(declare-fun a_68 () (Seq Element))
(declare-fun a_70 () (Seq Element))
(declare-fun a_72 () (Seq Element))
(declare-fun a_74 () (Seq Element))
(declare-fun a_76 () (Seq Element))
(declare-fun a_78 () (Seq Element))
(declare-fun a_80 () (Seq Element))
(declare-fun a_82 () (Seq Element))
(declare-fun a_84 () (Seq Element))
(declare-fun a_86 () (Seq Element))
(declare-fun a_87 () (Seq Element))
(declare-fun a_88 () (Seq Element))
(declare-fun a_90 () (Seq Element))
(declare-fun a_92 () (Seq Element))
(declare-fun a_94 () (Seq Element))
(declare-fun a_96 () (Seq Element))
(declare-fun a_98 () (Seq Element))
(declare-fun e_101 () Element)
(declare-fun e_103 () Element)
(declare-fun e_105 () Element)
(declare-fun e_107 () Element)
(declare-fun e_63 () Element)
(declare-fun e_65 () Element)
(declare-fun e_67 () Element)
(declare-fun e_69 () Element)
(declare-fun e_71 () Element)
(declare-fun e_73 () Element)
(declare-fun e_75 () Element)
(declare-fun e_77 () Element)
(declare-fun e_79 () Element)
(declare-fun e_81 () Element)
(declare-fun e_83 () Element)
(declare-fun e_85 () Element)
(declare-fun e_89 () Element)
(declare-fun e_91 () Element)
(declare-fun e_93 () Element)
(declare-fun e_95 () Element)
(declare-fun e_97 () Element)
(declare-fun e_99 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(assert (= a_100 (seq.update a_98 i2 (seq.unit e_99))))
(assert (= a_102 (seq.update a_100 i3 (seq.unit e_101))))
(assert (= a_104 (seq.update a_102 i4 (seq.unit e_103))))
(assert (= a_106 (seq.update a_104 i5 (seq.unit e_105))))
(assert (= a_108 (seq.update a_106 i1 (seq.unit e_107))))
(assert (= a_64 (seq.update a1 i1 (seq.unit e_63))))
(assert (= a_66 (seq.update a_64 i0 (seq.unit e_65))))
(assert (= a_68 (seq.update a_66 i4 (seq.unit e_67))))
(assert (= a_70 (seq.update a_68 i5 (seq.unit e_69))))
(assert (= a_72 (seq.update a_70 i2 (seq.unit e_71))))
(assert (= a_74 (seq.update a_72 i4 (seq.unit e_73))))
(assert (= a_76 (seq.update a_74 i0 (seq.unit e_75))))
(assert (= a_78 (seq.update a_76 i2 (seq.unit e_77))))
(assert (= a_80 (seq.update a_78 i4 (seq.unit e_79))))
(assert (= a_82 (seq.update a_80 i3 (seq.unit e_81))))
(assert (= a_84 (seq.update a_82 i1 (seq.unit e_83))))
(assert (= a_86 (seq.update a_84 i5 (seq.unit e_85))))
(assert (= a_87 (seq.update a1 i0 (seq.unit e_65))))
(assert (= a_88 (seq.update a_87 i1 (seq.unit e_63))))
(assert (= a_90 (seq.update a_88 i4 (seq.unit e_89))))
(assert (= a_92 (seq.update a_90 i5 (seq.unit e_91))))
(assert (= a_94 (seq.update a_92 i4 (seq.unit e_93))))
(assert (= a_96 (seq.update a_94 i2 (seq.unit e_95))))
(assert (= a_98 (seq.update a_96 i0 (seq.unit e_97))))
(assert (= e_101 (seq.nth a_100 i4)))
(assert (= e_103 (seq.nth a_100 i3)))
(assert (= e_105 (seq.nth a_104 i1)))
(assert (= e_107 (seq.nth a_104 i5)))
(assert (= e_63 (seq.nth a1 i0)))
(assert (= e_65 (seq.nth a1 i1)))
(assert (= e_67 (seq.nth a_66 i5)))
(assert (= e_69 (seq.nth a_66 i4)))
(assert (= e_71 (seq.nth a_70 i4)))
(assert (= e_73 (seq.nth a_70 i2)))
(assert (= e_75 (seq.nth a_74 i2)))
(assert (= e_77 (seq.nth a_74 i0)))
(assert (= e_79 (seq.nth a_78 i3)))
(assert (= e_81 (seq.nth a_78 i4)))
(assert (= e_83 (seq.nth a_82 i5)))
(assert (= e_85 (seq.nth a_82 i1)))
(assert (= e_89 (seq.nth a_88 i5)))
(assert (= e_91 (seq.nth a_88 i4)))
(assert (= e_93 (seq.nth a_92 i2)))
(assert (= e_95 (seq.nth a_92 i4)))
(assert (= e_97 (seq.nth a_96 i2)))
(assert (= e_99 (seq.nth a_96 i0)))
(assert (not (= a_86 a_108)))
(check-sat)
(exit)
