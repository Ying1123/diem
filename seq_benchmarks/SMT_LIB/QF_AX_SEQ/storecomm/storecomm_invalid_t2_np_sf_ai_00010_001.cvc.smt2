(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_318 () (Seq Element))
(declare-fun a_319 () (Seq Element))
(declare-fun a_320 () (Seq Element))
(declare-fun a_321 () (Seq Element))
(declare-fun a_322 () (Seq Element))
(declare-fun a_323 () (Seq Element))
(declare-fun a_324 () (Seq Element))
(declare-fun a_325 () (Seq Element))
(declare-fun a_326 () (Seq Element))
(declare-fun a_327 () (Seq Element))
(declare-fun a_328 () (Seq Element))
(declare-fun a_329 () (Seq Element))
(declare-fun a_330 () (Seq Element))
(declare-fun a_331 () (Seq Element))
(declare-fun a_332 () (Seq Element))
(declare-fun a_333 () (Seq Element))
(declare-fun a_334 () (Seq Element))
(declare-fun a_335 () (Seq Element))
(declare-fun a_336 () (Seq Element))
(declare-fun a_337 () (Seq Element))
(declare-fun a1 () (Seq Element))
(declare-fun e1 () Element)
(declare-fun e10 () Element)
(declare-fun e2 () Element)
(declare-fun e3 () Element)
(declare-fun e4 () Element)
(declare-fun e5 () Element)
(declare-fun e6 () Element)
(declare-fun e7 () Element)
(declare-fun e8 () Element)
(declare-fun e9 () Element)
(declare-fun i1 () Int)
(declare-fun i10 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun i8 () Int)
(declare-fun i9 () Int)
(assert (= a_318 (seq.update a1 i1 (seq.unit e1))))
(assert (= a_319 (seq.update a_318 i2 (seq.unit e2))))
(assert (= a_320 (seq.update a_319 i3 (seq.unit e3))))
(assert (= a_321 (seq.update a_320 i4 (seq.unit e4))))
(assert (= a_322 (seq.update a_321 i5 (seq.unit e5))))
(assert (= a_323 (seq.update a_322 i6 (seq.unit e6))))
(assert (= a_324 (seq.update a_323 i7 (seq.unit e7))))
(assert (= a_325 (seq.update a_324 i8 (seq.unit e8))))
(assert (= a_326 (seq.update a_325 i9 (seq.unit e9))))
(assert (= a_327 (seq.update a_326 i1 (seq.unit e1))))
(assert (= a_328 (seq.update a1 i10 (seq.unit e10))))
(assert (= a_329 (seq.update a_328 i5 (seq.unit e5))))
(assert (= a_330 (seq.update a_329 i3 (seq.unit e3))))
(assert (= a_331 (seq.update a_330 i8 (seq.unit e8))))
(assert (= a_332 (seq.update a_331 i9 (seq.unit e9))))
(assert (= a_333 (seq.update a_332 i4 (seq.unit e4))))
(assert (= a_334 (seq.update a_333 i2 (seq.unit e2))))
(assert (= a_335 (seq.update a_334 i7 (seq.unit e7))))
(assert (= a_336 (seq.update a_335 i6 (seq.unit e6))))
(assert (= a_337 (seq.update a_336 i1 (seq.unit e1))))
(assert (not (= i9 i10)))
(assert (not (= i8 i10)))
(assert (not (= i8 i9)))
(assert (not (= i7 i10)))
(assert (not (= i7 i9)))
(assert (not (= i7 i8)))
(assert (not (= i6 i10)))
(assert (not (= i6 i9)))
(assert (not (= i6 i8)))
(assert (not (= i6 i7)))
(assert (not (= i5 i10)))
(assert (not (= i5 i9)))
(assert (not (= i5 i8)))
(assert (not (= i5 i7)))
(assert (not (= i5 i6)))
(assert (not (= i4 i10)))
(assert (not (= i4 i9)))
(assert (not (= i4 i8)))
(assert (not (= i4 i7)))
(assert (not (= i4 i6)))
(assert (not (= i4 i5)))
(assert (not (= i3 i10)))
(assert (not (= i3 i9)))
(assert (not (= i3 i8)))
(assert (not (= i3 i7)))
(assert (not (= i3 i6)))
(assert (not (= i3 i5)))
(assert (not (= i3 i4)))
(assert (not (= i2 i10)))
(assert (not (= i2 i9)))
(assert (not (= i2 i8)))
(assert (not (= i2 i7)))
(assert (not (= i2 i6)))
(assert (not (= i2 i5)))
(assert (not (= i2 i4)))
(assert (not (= i2 i3)))
(assert (not (= i1 i10)))
(assert (not (= i1 i9)))
(assert (not (= i1 i8)))
(assert (not (= i1 i7)))
(assert (not (= i1 i6)))
(assert (not (= i1 i5)))
(assert (not (= i1 i4)))
(assert (not (= i1 i3)))
(assert (not (= i1 i2)))
(assert (not (= a_327 a_337)))
(check-sat)
(exit)
