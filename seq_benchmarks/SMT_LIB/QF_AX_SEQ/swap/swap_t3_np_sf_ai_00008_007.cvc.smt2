(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)

(declare-sort Element 0)
(declare-fun a_241 () (Seq Element))
(declare-fun a_242 () (Seq Element))
(declare-fun a_244 () (Seq Element))
(declare-fun a_246 () (Seq Element))
(declare-fun a_248 () (Seq Element))
(declare-fun a_250 () (Seq Element))
(declare-fun a_252 () (Seq Element))
(declare-fun a_254 () (Seq Element))
(declare-fun a_256 () (Seq Element))
(declare-fun a_258 () (Seq Element))
(declare-fun a_260 () (Seq Element))
(declare-fun a_262 () (Seq Element))
(declare-fun a_264 () (Seq Element))
(declare-fun a_266 () (Seq Element))
(declare-fun a_268 () (Seq Element))
(declare-fun a_270 () (Seq Element))
(declare-fun a_271 () (Seq Element))
(declare-fun a_272 () (Seq Element))
(declare-fun a_274 () (Seq Element))
(declare-fun a_276 () (Seq Element))
(declare-fun a_278 () (Seq Element))
(declare-fun a_280 () (Seq Element))
(declare-fun a_282 () (Seq Element))
(declare-fun a_284 () (Seq Element))
(declare-fun a_286 () (Seq Element))
(declare-fun a_288 () (Seq Element))
(declare-fun a_290 () (Seq Element))
(declare-fun a_292 () (Seq Element))
(declare-fun e_240 () Element)
(declare-fun e_243 () Element)
(declare-fun e_245 () Element)
(declare-fun e_247 () Element)
(declare-fun e_249 () Element)
(declare-fun e_251 () Element)
(declare-fun e_253 () Element)
(declare-fun e_255 () Element)
(declare-fun e_257 () Element)
(declare-fun e_259 () Element)
(declare-fun e_261 () Element)
(declare-fun e_263 () Element)
(declare-fun e_265 () Element)
(declare-fun e_267 () Element)
(declare-fun e_269 () Element)
(declare-fun e_273 () Element)
(declare-fun e_275 () Element)
(declare-fun e_277 () Element)
(declare-fun e_279 () Element)
(declare-fun e_281 () Element)
(declare-fun e_283 () Element)
(declare-fun e_285 () Element)
(declare-fun e_287 () Element)
(declare-fun e_289 () Element)
(declare-fun e_291 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(assert (= a_241 (seq.update a1 i3 (seq.unit e_240))))
(assert (= a_242 (seq.update a_241 i3 (seq.unit e_240))))
(assert (= a_244 (seq.update a_242 i5 (seq.unit e_243))))
(assert (= a_246 (seq.update a_244 i7 (seq.unit e_245))))
(assert (= a_248 (seq.update a_246 i6 (seq.unit e_247))))
(assert (= a_250 (seq.update a_248 i7 (seq.unit e_249))))
(assert (= a_252 (seq.update a_250 i5 (seq.unit e_251))))
(assert (= a_254 (seq.update a_252 i7 (seq.unit e_253))))
(assert (= a_256 (seq.update a_254 i0 (seq.unit e_255))))
(assert (= a_258 (seq.update a_256 i7 (seq.unit e_257))))
(assert (= a_260 (seq.update a_258 i4 (seq.unit e_259))))
(assert (= a_262 (seq.update a_260 i2 (seq.unit e_261))))
(assert (= a_264 (seq.update a_262 i5 (seq.unit e_263))))
(assert (= a_266 (seq.update a_264 i2 (seq.unit e_265))))
(assert (= a_268 (seq.update a_266 i7 (seq.unit e_267))))
(assert (= a_270 (seq.update a_268 i0 (seq.unit e_269))))
(assert (= a_271 (seq.update a_246 i7 (seq.unit e_249))))
(assert (= a_272 (seq.update a_271 i6 (seq.unit e_247))))
(assert (= a_274 (seq.update a_272 i7 (seq.unit e_273))))
(assert (= a_276 (seq.update a_274 i5 (seq.unit e_275))))
(assert (= a_278 (seq.update a_276 i7 (seq.unit e_277))))
(assert (= a_280 (seq.update a_278 i0 (seq.unit e_279))))
(assert (= a_282 (seq.update a_280 i2 (seq.unit e_281))))
(assert (= a_284 (seq.update a_282 i4 (seq.unit e_283))))
(assert (= a_286 (seq.update a_284 i2 (seq.unit e_285))))
(assert (= a_288 (seq.update a_286 i5 (seq.unit e_287))))
(assert (= a_290 (seq.update a_288 i7 (seq.unit e_289))))
(assert (= a_292 (seq.update a_290 i0 (seq.unit e_291))))
(assert (= e_240 (seq.nth a1 i3)))
(assert (= e_243 (seq.nth a_242 i7)))
(assert (= e_245 (seq.nth a_242 i5)))
(assert (= e_247 (seq.nth a_246 i7)))
(assert (= e_249 (seq.nth a_246 i6)))
(assert (= e_251 (seq.nth a_250 i7)))
(assert (= e_253 (seq.nth a_250 i5)))
(assert (= e_255 (seq.nth a_254 i7)))
(assert (= e_257 (seq.nth a_254 i0)))
(assert (= e_259 (seq.nth a_258 i2)))
(assert (= e_261 (seq.nth a_258 i4)))
(assert (= e_263 (seq.nth a_262 i2)))
(assert (= e_265 (seq.nth a_262 i5)))
(assert (= e_267 (seq.nth a_266 i0)))
(assert (= e_269 (seq.nth a_266 i7)))
(assert (= e_273 (seq.nth a_272 i5)))
(assert (= e_275 (seq.nth a_272 i7)))
(assert (= e_277 (seq.nth a_276 i0)))
(assert (= e_279 (seq.nth a_276 i7)))
(assert (= e_281 (seq.nth a_280 i4)))
(assert (= e_283 (seq.nth a_280 i2)))
(assert (= e_285 (seq.nth a_284 i5)))
(assert (= e_287 (seq.nth a_284 i2)))
(assert (= e_289 (seq.nth a_288 i0)))
(assert (= e_291 (seq.nth a_288 i7)))
(assert (not (= a_270 a_292)))
(check-sat)
(exit)
