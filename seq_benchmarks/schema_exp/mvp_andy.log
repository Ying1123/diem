[INFO] translating module TestSchemaExp
[INFO] running solver
[INFO] 0.008s build, 0.002s trafo, 0.005s gen, 0.604s verify
error: abort not covered by any of the `aborts_if` clauses

    ┌── /home/ying/diem/language/move-prover/tests/sources/functional/schema_exp.move:29:5 ───
    │
 29 │ ╭     spec bar_incorrect {
 30 │ │         // Once we include a schema with aborts, even conditionally, we need to provide a full spec of the aborts
 31 │ │         // behavior. This is because the below translates to `aborts_if c && false`, which reduces
 32 │ │         // to `aborts_if false`.
 33 │ │         include c ==> DontAborts;
 34 │ │     }
    │ ╰─────^
    ·
 26 │         if (!c) abort(1);
    │                 -------- abort happened here with code 0x1
    │
    =     at /home/ying/diem/language/move-prover/tests/sources/functional/schema_exp.move:25: bar_incorrect
    =         c = false
    =     at /home/ying/diem/language/move-prover/tests/sources/functional/schema_exp.move:26: bar_incorrect
    =     at /home/ying/diem/language/move-prover/tests/sources/functional/schema_exp.move:26: bar_incorrect
    =         ABORTED

error: post-condition does not hold

    ┌── /home/ying/diem/language/move-prover/tests/sources/functional/schema_exp.move:47:9 ───
    │
 47 │         ensures result == i + 2;
    │         ^^^^^^^^^^^^^^^^^^^^^^^^
    │
    =     at /home/ying/diem/language/move-prover/tests/sources/functional/schema_exp.move:58
    =     at /home/ying/diem/language/move-prover/tests/sources/functional/schema_exp.move:53: baz_incorrect
    =         i = 11
    =     at /home/ying/diem/language/move-prover/tests/sources/functional/schema_exp.move:54: baz_incorrect
    =         result = 12
    =     at /home/ying/diem/language/move-prover/tests/sources/functional/schema_exp.move:55: baz_incorrect
    =     at /home/ying/diem/language/move-prover/tests/sources/functional/schema_exp.move:47

exiting with boogie verification errors
