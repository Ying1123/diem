
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Basic theory for vectors using arrays. This version of vectors is not extensional.

type {:datatype} Vec _;

function {:constructor} Vec<T>(v: [int]T, l: int): Vec T;

function {:builtin "MapConst"} MapConstVec<T>(T): [int]T;
function DefaultVecElem<T>(): T;
function {:inline} DefaultVecMap<T>(): [int]T { MapConstVec(DefaultVecElem()) }

function {:inline} EmptyVec<T>(): Vec T {
    Vec(DefaultVecMap(), 0)
}

function {:inline} MakeVec1<T>(v: T): Vec T {
    Vec(DefaultVecMap()[0 := v], 1)
}

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2], 2)
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3], 3)
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3][3 := v4], 4)
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    (var l := l#Vec(v);
    Vec(v#Vec(v)[l := elem], l + 1))
}

function {:inline} ReadVec<T>(v: Vec T, i: int): T {
    v#Vec(v)[i]
}

function {:inline} LenVec<T>(v: Vec T): int {
    l#Vec(v)
}

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    l#Vec(v) == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    (var l := l#Vec(v) - 1;
    Vec(v#Vec(v)[l := DefaultVecElem()], l))
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    (var l := l#Vec(v) - 1;
    Vec(
        (lambda j: int ::
           if j >= 0 && j < l then
               if j < i then v#Vec(v)[j] else v#Vec(v)[j+1]
           else DefaultVecElem()),
        l))
}

function {:inline} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T {
    (var l1, m1, l2, m2 := l#Vec(v1), v#Vec(v1), l#Vec(v2), v#Vec(v2);
    Vec(
        (lambda i: int ::
          if i >= 0 && i < l1 + l2 then
            if i < l1 then m1[i] else m2[i - l1]
          else DefaultVecElem()),
        l1 + l2))
}

function {:inline} ReverseVec<T>(v: Vec T): Vec T {
    (var l := l#Vec(v);
    Vec(
        (lambda i: int :: if 0 <= i && i < l then v#Vec(v)[l - i - 1] else DefaultVecElem()),
        l))
}

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v#Vec(v);
    Vec(
        (lambda k:int ::
          if 0 <= k && k < j - i then
            m[i + k]
          else
            DefaultVecElem()),
        (if j - i < 0 then 0 else j - i)))
}


function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    Vec(v#Vec(v)[i := elem], l#Vec(v))
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v#Vec(v);
    Vec(m[i := m[j]][j := m[i]], l#Vec(v)))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    (var l := l#Vec(v);
    (exists i: int :: InRangeVec(v, i) && v#Vec(v)[i] == e))
}

function IndexOfVec<T>(v: Vec T, e: T): int;
axiom {:ctor "Vec"} (forall<T> v: Vec T, e: T :: {IndexOfVec(v, e)}
    (var i := IndexOfVec(v,e);
     if (!ContainsVec(v, e)) then i == -1
     else InRangeVec(v, i) && ReadVec(v, i) == e &&
        (forall j: int :: j >= 0 && j < i ==> ReadVec(v, j) != e)));

// This function should stay non-inlined as it guards many quantifiers
// over vectors. It appears important to have this uninterpreted for
// quantifier triggering.
function InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

type {:datatype} Multiset _;
function {:constructor} Multiset<T>(v: [T]int, l: int): Multiset T;

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    l#Multiset(s)
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := l#Multiset(s);
    (var cnt := v#Multiset(s)[v];
    Multiset(v#Multiset(s)[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := l#Multiset(s1);
    (var len2 := l#Multiset(s2);
    Multiset((lambda v:T :: v#Multiset(s1)[v]-v#Multiset(s2)[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (l#Multiset(s) == 0) &&
    (forall v: T :: v#Multiset(s)[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (l#Multiset(s1) <= l#Multiset(s2)) &&
    (forall v: T :: v#Multiset(s1)[v] <= v#Multiset(s2)[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    v#Multiset(s)[v] > 0
}



// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;

type {:datatype} $Range;
function {:constructor} $Range(lb: int, ub: int): $Range;

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(lb#$Range(r)) &&  $IsValid'u64'(ub#$Range(r))
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   lb#$Range(r) <= i && i < ub#$Range(r)
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

type {:datatype} $Location;

// A global resource location within the statically known resource type's memory,
// where `a` is an address.
function {:constructor} $Global(a: int): $Location;

// A local location. `i` is the unique index of the local.
function {:constructor} $Local(i: int): $Location;

// The location of a reference outside of the verification scope, for example, a `&mut` parameter
// of the function being verified. References with these locations don't need to be written back
// when mutation ends.
function {:constructor} $Param(i: int): $Location;


// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
type {:datatype} $Mutation _;
function {:constructor} $Mutation<T>(l: $Location, p: Vec int, v: T): $Mutation T;

// Representation of memory for a given type.
type {:datatype} $Memory _;
function {:constructor} $Memory<T>(domain: [int]bool, contents: [int]T): $Memory T;

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    v#$Mutation(ref)
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(l#$Mutation(m), p#$Mutation(m), v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), offset), v)
}

// Return true of the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true of the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    l#$Mutation(m1) == l#$Mutation(m2)
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    is#$Global(l#$Mutation(m))
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    l#$Mutation(m) == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    a#$Global(l#$Mutation(m))
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    domain#$Memory(m)[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    contents#$Memory(m)[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(domain#$Memory(m)[a := true], contents#$Memory(m)[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := false], contents#$Memory(m))
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := domain#$Memory(s)[a]],
            contents#$Memory(m)[a := contents#$Memory(s)[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// Note that *not* inlining the shl/shr functions avoids timeouts. It appears that Z3 can reason
// better about this if it is an axiomatized function.
function $shl(src1: int, p: int): int {
    if p == 8 then src1 * 256
    else if p == 16 then src1 * 65536
    else if p == 32 then src1 * 4294967296
    else if p == 64 then src1 * 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

function $shr(src1: int, p: int): int {
    if p == 8 then src1 div 256
    else if p == 16 then src1 div 65536
    else if p == 32 then src1 div 4294967296
    else if p == 64 then src1 div 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

// TODO: fix this and $Shr to drop bits on overflow. Requires $Shl8, $Shl64, and $Shl128
procedure {:inline 1} $Shl(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shl(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shr(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, lb#$Range(r), ub#$Range(r))
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`

// Not inlined. It appears faster this way.
function $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'#0'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_KeyRotationCapability`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_DiemAccount_KeyRotationCapability''(v1: Vec ($1_DiemAccount_KeyRotationCapability), v2: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_KeyRotationCapability''(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): int;
axiom (forall v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability:: {$IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_KeyRotationCapability'() returns (v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), val: $1_DiemAccount_KeyRotationCapability) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), val: $1_DiemAccount_KeyRotationCapability): Vec ($1_DiemAccount_KeyRotationCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), other: Vec ($1_DiemAccount_KeyRotationCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int) returns (dst: $1_DiemAccount_KeyRotationCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_KeyRotationCapability), m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int, j: int): Vec ($1_DiemAccount_KeyRotationCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_WithdrawCapability`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_DiemAccount_WithdrawCapability''(v1: Vec ($1_DiemAccount_WithdrawCapability), v2: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_WithdrawCapability''(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): int;
axiom (forall v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability:: {$IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_WithdrawCapability'() returns (v: Vec ($1_DiemAccount_WithdrawCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), val: $1_DiemAccount_WithdrawCapability) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), val: $1_DiemAccount_WithdrawCapability): Vec ($1_DiemAccount_WithdrawCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), other: Vec ($1_DiemAccount_WithdrawCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int) returns (dst: $1_DiemAccount_WithdrawCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_WithdrawCapability), m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int, j: int): Vec ($1_DiemAccount_WithdrawCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemSystem_ValidatorInfo`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_DiemSystem_ValidatorInfo''(v1: Vec ($1_DiemSystem_ValidatorInfo), v2: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_DiemSystem_ValidatorInfo''(v: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): int;
axiom (forall v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo:: {$IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e)}
    (var i := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
     if (!$ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemSystem_ValidatorInfo'() returns (v: Vec ($1_DiemSystem_ValidatorInfo)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), val: $1_DiemSystem_ValidatorInfo) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), val: $1_DiemSystem_ValidatorInfo): Vec ($1_DiemSystem_ValidatorInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), other: Vec ($1_DiemSystem_ValidatorInfo)) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int) returns (dst: $1_DiemSystem_ValidatorInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), index: int)
returns (dst: $Mutation ($1_DiemSystem_ValidatorInfo), m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int, j: int): Vec ($1_DiemSystem_ValidatorInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var len: int;
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res: bool)  {
    res := $ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'#0'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''(v1: Vec ($1_Diem_PreburnWithMetadata'#0'), v2: Vec ($1_Diem_PreburnWithMetadata'#0')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'#0''(): Vec ($1_Diem_PreburnWithMetadata'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'#0''() returns (v: Vec ($1_Diem_PreburnWithMetadata'#0')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'#0''(): Vec ($1_Diem_PreburnWithMetadata'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), val: $1_Diem_PreburnWithMetadata'#0') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), val: $1_Diem_PreburnWithMetadata'#0'): Vec ($1_Diem_PreburnWithMetadata'#0') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), other: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'#0') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int): $1_Diem_PreburnWithMetadata'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'#0'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int): $1_Diem_PreburnWithMetadata'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'#0') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'$1_XDX_XDX'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''(v1: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), v2: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''() returns (v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), val: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), val: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), other: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'$1_XUS_XUS'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''(v1: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), v2: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''() returns (v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), val: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), val: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), other: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_ValidatorConfig_Config`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_ValidatorConfig_Config''(v1: Vec ($1_ValidatorConfig_Config), v2: Vec ($1_ValidatorConfig_Config)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_ValidatorConfig_Config''(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_ValidatorConfig_Config'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): int;
axiom (forall v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config:: {$IndexOfVec'$1_ValidatorConfig_Config'(v, e)}
    (var i := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
     if (!$ContainsVec'$1_ValidatorConfig_Config'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_ValidatorConfig_Config'() returns (v: Vec ($1_ValidatorConfig_Config)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), val: $1_ValidatorConfig_Config) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), val: $1_ValidatorConfig_Config): Vec ($1_ValidatorConfig_Config) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    var v: Vec ($1_ValidatorConfig_Config);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), other: Vec ($1_ValidatorConfig_Config)) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int) returns (dst: $1_ValidatorConfig_Config) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), index: int)
returns (dst: $Mutation ($1_ValidatorConfig_Config), m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int, j: int) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int, j: int): Vec ($1_ValidatorConfig_Config) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var len: int;
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res: bool)  {
    res := $ContainsVec'$1_ValidatorConfig_Config'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `vec'u8'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'vec'u8'''(v1: Vec (Vec (int)), v2: Vec (Vec (int))): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'vec'u8''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'vec'u8'''(v: Vec (Vec (int))): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'vec'u8''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e))
}

function $IndexOfVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): int;
axiom (forall v: Vec (Vec (int)), e: Vec (int):: {$IndexOfVec'vec'u8''(v, e)}
    (var i := $IndexOfVec'vec'u8''(v, e);
     if (!$ContainsVec'vec'u8''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'vec'u8''(ReadVec(v, j), e))));


function {:inline} $RangeVec'vec'u8''(v: Vec (Vec (int))): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'vec'u8''() returns (v: Vec (Vec (int))) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'vec'u8''(v: Vec (Vec (int))) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'vec'u8''(m: $Mutation (Vec (Vec (int))), val: Vec (int)) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'vec'u8''(v: Vec (Vec (int)), val: Vec (int)): Vec (Vec (int)) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (e: Vec (int), m': $Mutation (Vec (Vec (int)))) {
    var v: Vec (Vec (int));
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'vec'u8''(m: $Mutation (Vec (Vec (int))), other: Vec (Vec (int))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'vec'u8''(v: Vec (Vec (int))) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'vec'u8''(v: Vec (Vec (int))): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'vec'u8''(v: Vec (Vec (int)), i: int) returns (dst: Vec (int)) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'vec'u8''(m: $Mutation (Vec (Vec (int))), index: int)
returns (dst: $Mutation (Vec (int)), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'vec'u8''(v: Vec (Vec (int))) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int, j: int) returns (m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'vec'u8''(v: Vec (Vec (int)), i: int, j: int): Vec (Vec (int)) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var len: int;
    var v: Vec (Vec (int));

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res: bool)  {
    res := $ContainsVec'vec'u8''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'vec'u8''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`

// Not inlined. It appears faster this way.
function $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'address'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_Hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_Hash_sha2(v1), $1_Hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha2(v1), $1_Hash_sha2(v2)));

procedure $1_Hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha2_256(val: Vec int): Vec int {
    $1_Hash_sha2(val)
}

// similarly for Hash_sha3
function $1_Hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_Hash_sha3(v1), $1_Hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha3(v1), $1_Hash_sha3(v2)));

procedure $1_Hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha3_256(val: Vec int): Vec int {
    $1_Hash_sha3(val)
}

// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: int) {
    // A signer is currently identical to an address.
    signer := addr;
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: int
) {
  return;
}

// ==================================================================================
// Native Signer

procedure {:inline 1} $1_Signer_borrow_address(signer: int) returns (res: int) {
    res := signer;
}

// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native BCS::serialize


// ==================================================================================
// Native Signer::spec_address_of

function {:inline} $1_Signer_spec_address_of(signer: int): int
{
    // A signer is currently identical to an address.
    signer
}

function {:inline} $1_Signer_$borrow_address(signer: int): int
{
    // A signer is currently identical to an address.
    signer
}

// ==================================================================================
// Native Event module




// Publishing a generator does nothing. Currently we just ignore this function and do not represent generators
// at all because they are not publicly exposed by the Event module.
// TODO: we should check (and abort with the right code) if a generator already exists for
// the signer.

procedure {:inline 1} $1_Event_publish_generator(signer: int) {
}

// Generic code for dealing with mutations (havoc) still requires type and memory declarations.
type $1_Event_EventHandleGenerator;
var $1_Event_EventHandleGenerator_$memory: $Memory $1_Event_EventHandleGenerator;

// Abstract type of event handles.
type $1_Event_EventHandle;

// Global state to implement uniqueness of event handles.
var $1_Event_EventHandles: [$1_Event_EventHandle]bool;

// Universal representation of an an event. For each concrete event type, we generate a constructor.
type {:datatype} $EventRep;

// Representation of EventStore that consists of event streams.
type {:datatype} $EventStore;
function {:constructor} $EventStore(
    counter: int, streams: [$1_Event_EventHandle]Multiset $EventRep): $EventStore;

// Global state holding EventStore.
var $es: $EventStore;

procedure {:inline 1} $InitEventStore() {
    assume $EventStore__is_empty($es);
}

function {:inline} $EventStore__is_empty(es: $EventStore): bool {
    (counter#$EventStore(es) == 0) &&
    (forall handle: $1_Event_EventHandle ::
        (var stream := streams#$EventStore(es)[handle];
        IsEmptyMultiset(stream)))
}

// This function returns (es1 - es2). This function assumes that es2 is a subset of es1.
function {:inline} $EventStore__subtract(es1: $EventStore, es2: $EventStore): $EventStore {
    $EventStore(counter#$EventStore(es1)-counter#$EventStore(es2),
        (lambda handle: $1_Event_EventHandle ::
        SubtractMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle])))
}

function {:inline} $EventStore__is_subset(es1: $EventStore, es2: $EventStore): bool {
    (counter#$EventStore(es1) <= counter#$EventStore(es2)) &&
    (forall handle: $1_Event_EventHandle ::
        IsSubsetMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle]
        )
    )
}

procedure {:inline 1} $EventStore__diverge(es: $EventStore) returns (es': $EventStore) {
    assume $EventStore__is_subset(es, es');
}

const $EmptyEventStore: $EventStore;
axiom $EventStore__is_empty($EmptyEventStore);

// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_FreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_FreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(e: $1_AccountFreezing_FreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_FreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_FreezeAccountEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_FreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_FreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_UnfreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_UnfreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(e: $1_AccountFreezing_UnfreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_UnfreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_UnfreezeAccountEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_UnfreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_UnfreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DesignatedDealer_ReceivedMintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(a: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', b: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(h: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    true
}

// Embed event `$1_DesignatedDealer_ReceivedMintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(e: $1_DesignatedDealer_ReceivedMintEvent): $EventRep;
axiom (forall v1, v2: $1_DesignatedDealer_ReceivedMintEvent :: {$ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1), $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2)}
    $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(v1, v2) <==> $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1) == $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DesignatedDealer_ReceivedMintEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DesignatedDealer_ReceivedMintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    var handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DesignatedDealer_ReceivedMintEvent'(handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
}

function {:inline} $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_AdminTransactionEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(a: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', b: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(h: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_AdminTransactionEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(e: $1_DiemAccount_AdminTransactionEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_AdminTransactionEvent :: {$ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1), $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2)}
    $IsEqual'$1_DiemAccount_AdminTransactionEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1) == $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_AdminTransactionEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_AdminTransactionEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_AdminTransactionEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_CreateAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(a: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', b: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(h: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_CreateAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_CreateAccountEvent'(e: $1_DiemAccount_CreateAccountEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_CreateAccountEvent :: {$ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1), $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2)}
    $IsEqual'$1_DiemAccount_CreateAccountEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1) == $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_CreateAccountEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_CreateAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_CreateAccountEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_CreateAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_ReceivedPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_ReceivedPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(e: $1_DiemAccount_ReceivedPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_ReceivedPaymentEvent :: {$ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_ReceivedPaymentEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_ReceivedPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_ReceivedPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_SentPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_SentPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_SentPaymentEvent'(e: $1_DiemAccount_SentPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_SentPaymentEvent :: {$ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_SentPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_SentPaymentEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_SentPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_SentPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_SentPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemBlock_NewBlockEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(a: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', b: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(h: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    true
}

// Embed event `$1_DiemBlock_NewBlockEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemBlock_NewBlockEvent'(e: $1_DiemBlock_NewBlockEvent): $EventRep;
axiom (forall v1, v2: $1_DiemBlock_NewBlockEvent :: {$ToEventRep'$1_DiemBlock_NewBlockEvent'(v1), $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2)}
    $IsEqual'$1_DiemBlock_NewBlockEvent'(v1, v2) <==> $ToEventRep'$1_DiemBlock_NewBlockEvent'(v1) == $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemBlock_NewBlockEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemBlock_NewBlockEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    var handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemBlock_NewBlockEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemBlock_NewBlockEvent'(handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemBlock_NewBlockEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemConfig_NewEpochEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(a: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', b: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(h: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    true
}

// Embed event `$1_DiemConfig_NewEpochEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemConfig_NewEpochEvent'(e: $1_DiemConfig_NewEpochEvent): $EventRep;
axiom (forall v1, v2: $1_DiemConfig_NewEpochEvent :: {$ToEventRep'$1_DiemConfig_NewEpochEvent'(v1), $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2)}
    $IsEqual'$1_DiemConfig_NewEpochEvent'(v1, v2) <==> $ToEventRep'$1_DiemConfig_NewEpochEvent'(v1) == $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemConfig_NewEpochEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemConfig_NewEpochEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    var handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemConfig_NewEpochEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemConfig_NewEpochEvent'(handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemConfig_NewEpochEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemId_DiemIdDomainEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent''(a: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent', b: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent''(h: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent'): bool {
    true
}

// Embed event `$1_DiemId_DiemIdDomainEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemId_DiemIdDomainEvent'(e: $1_DiemId_DiemIdDomainEvent): $EventRep;
axiom (forall v1, v2: $1_DiemId_DiemIdDomainEvent :: {$ToEventRep'$1_DiemId_DiemIdDomainEvent'(v1), $ToEventRep'$1_DiemId_DiemIdDomainEvent'(v2)}
    $IsEqual'$1_DiemId_DiemIdDomainEvent'(v1, v2) <==> $ToEventRep'$1_DiemId_DiemIdDomainEvent'(v1) == $ToEventRep'$1_DiemId_DiemIdDomainEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemId_DiemIdDomainEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemId_DiemIdDomainEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent', msg: $1_DiemId_DiemIdDomainEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent') {
    var handle: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemId_DiemIdDomainEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemId_DiemIdDomainEvent'(handle: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemId_DiemIdDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent', msg: $1_DiemId_DiemIdDomainEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemId_DiemIdDomainEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemId_DiemIdDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent', msg: $1_DiemId_DiemIdDomainEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemId_DiemIdDomainEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_BurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_BurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''(a: $1_Event_EventHandle'$1_Diem_BurnEvent', b: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''(h: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    true
}

// Embed event `$1_Diem_BurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_BurnEvent'(e: $1_Diem_BurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_BurnEvent :: {$ToEventRep'$1_Diem_BurnEvent'(v1), $ToEventRep'$1_Diem_BurnEvent'(v2)}
    $IsEqual'$1_Diem_BurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_BurnEvent'(v1) == $ToEventRep'$1_Diem_BurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_BurnEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_BurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_BurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_BurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_BurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_BurnEvent'(handle: $1_Event_EventHandle'$1_Diem_BurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_BurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_BurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_CancelBurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_CancelBurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(a: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', b: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(h: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    true
}

// Embed event `$1_Diem_CancelBurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_CancelBurnEvent'(e: $1_Diem_CancelBurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_CancelBurnEvent :: {$ToEventRep'$1_Diem_CancelBurnEvent'(v1), $ToEventRep'$1_Diem_CancelBurnEvent'(v2)}
    $IsEqual'$1_Diem_CancelBurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_CancelBurnEvent'(v1) == $ToEventRep'$1_Diem_CancelBurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_CancelBurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_CancelBurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_CancelBurnEvent'(handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_CancelBurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_CancelBurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_MintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_MintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''(a: $1_Event_EventHandle'$1_Diem_MintEvent', b: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''(h: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    true
}

// Embed event `$1_Diem_MintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_MintEvent'(e: $1_Diem_MintEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_MintEvent :: {$ToEventRep'$1_Diem_MintEvent'(v1), $ToEventRep'$1_Diem_MintEvent'(v2)}
    $IsEqual'$1_Diem_MintEvent'(v1, v2) <==> $ToEventRep'$1_Diem_MintEvent'(v1) == $ToEventRep'$1_Diem_MintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_MintEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_MintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_MintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_MintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_MintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_MintEvent'(handle: $1_Event_EventHandle'$1_Diem_MintEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_MintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_MintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_PreburnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_PreburnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''(a: $1_Event_EventHandle'$1_Diem_PreburnEvent', b: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''(h: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    true
}

// Embed event `$1_Diem_PreburnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_PreburnEvent'(e: $1_Diem_PreburnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_PreburnEvent :: {$ToEventRep'$1_Diem_PreburnEvent'(v1), $ToEventRep'$1_Diem_PreburnEvent'(v2)}
    $IsEqual'$1_Diem_PreburnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_PreburnEvent'(v1) == $ToEventRep'$1_Diem_PreburnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_PreburnEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_PreburnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_PreburnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_PreburnEvent'(handle: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_PreburnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_PreburnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_ToXDXExchangeRateUpdateEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(a: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', b: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(h: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    true
}

// Embed event `$1_Diem_ToXDXExchangeRateUpdateEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(e: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_ToXDXExchangeRateUpdateEvent :: {$ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1), $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2)}
    $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1, v2) <==> $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1) == $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_BaseUrlRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_BaseUrlRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(e: $1_DualAttestation_BaseUrlRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_BaseUrlRotationEvent :: {$ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1), $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_BaseUrlRotationEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_BaseUrlRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_BaseUrlRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_ComplianceKeyRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_ComplianceKeyRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(e: $1_DualAttestation_ComplianceKeyRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_ComplianceKeyRotationEvent :: {$ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1), $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(signer: int) returns (res: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_ComplianceKeyRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(es, handle, msg)
    else
        es
}




//==================================
// Begin Translation



// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }

// spec fun at /home/ying/diem/language/move-stdlib/modules/Signer.move:13:5+77
function {:inline} $1_Signer_$address_of(s: int): int {
    $1_Signer_$borrow_address(s)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:24:5+70
function {:inline} $1_CoreAddresses_$CURRENCY_INFO_ADDRESS(): int {
    173345816
}

// spec fun at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:16:5+66
function {:inline} $1_CoreAddresses_$DIEM_ROOT_ADDRESS(): int {
    173345816
}

// spec fun at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:5+76
function {:inline} $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(): int {
    186537453
}

// fun CoreAddresses::CURRENCY_INFO_ADDRESS [baseline] at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:24:5+70
procedure {:inline 1} $1_CoreAddresses_CURRENCY_INFO_ADDRESS() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $temp_0'address': int;

    // bytecode translation starts here
    // $t0 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:25:9+10
    assume {:print "$at(8,1126,1136)"} true;
    $t0 := 173345816;
    assume $IsValid'address'($t0);

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:25:9+10
    assume {:print "$track_return(2,1,0):", $t0} $t0 == $t0;

    // label L1 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:26:5+1
    assume {:print "$at(8,1141,1142)"} true;
L1:

    // return $t0 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:26:5+1
    $ret0 := $t0;
    return;

}

// fun CoreAddresses::DIEM_ROOT_ADDRESS [baseline] at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:16:5+66
procedure {:inline 1} $1_CoreAddresses_DIEM_ROOT_ADDRESS() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $temp_0'address': int;

    // bytecode translation starts here
    // $t0 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:17:9+10
    assume {:print "$at(8,737,747)"} true;
    $t0 := 173345816;
    assume $IsValid'address'($t0);

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:17:9+10
    assume {:print "$track_return(2,2,0):", $t0} $t0 == $t0;

    // label L1 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:18:5+1
    assume {:print "$at(8,752,753)"} true;
L1:

    // return $t0 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:18:5+1
    $ret0 := $t0;
    return;

}

// fun CoreAddresses::TREASURY_COMPLIANCE_ADDRESS [baseline] at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:5+76
procedure {:inline 1} $1_CoreAddresses_TREASURY_COMPLIANCE_ADDRESS() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $temp_0'address': int;

    // bytecode translation starts here
    // $t0 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:32:9+10
    assume {:print "$at(8,1419,1429)"} true;
    $t0 := 186537453;
    assume $IsValid'address'($t0);

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:32:9+10
    assume {:print "$track_return(2,3,0):", $t0} $t0 == $t0;

    // label L1 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:33:5+1
    assume {:print "$at(8,1434,1435)"} true;
L1:

    // return $t0 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:33:5+1
    $ret0 := $t0;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:127:5+114
function {:inline} $1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    !$ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:147:5+115
function {:inline} $1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:109:10+129
function {:inline} $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): int {
    $microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds($ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()))
}

// struct DiemTimestamp::CurrentTimeMicroseconds at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:21:5+73
type {:datatype} $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:constructor} $1_DiemTimestamp_CurrentTimeMicroseconds($microseconds: int): $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:inline} $Update'$1_DiemTimestamp_CurrentTimeMicroseconds'_microseconds(s: $1_DiemTimestamp_CurrentTimeMicroseconds, x: int): $1_DiemTimestamp_CurrentTimeMicroseconds {
    $1_DiemTimestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'(s: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'($microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds(s))
}
function {:inline} $IsEqual'$1_DiemTimestamp_CurrentTimeMicroseconds'(s1: $1_DiemTimestamp_CurrentTimeMicroseconds, s2: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;

// fun DiemTimestamp::set_time_has_started [baseline] at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:5+240
procedure {:inline 1} $1_DiemTimestamp_set_time_has_started(_$t0: int) returns ()
{
    // declare local variables
    var $t1: $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:37:5+1
    assume {:print "$at(17,1620,1621)"} true;
    assume {:print "$track_local(3,6,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(17,1683,1699)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16

    // assume Identical($t2, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
    assume ($t2 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t2) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
    assume {:print "$at(17,1683,1699)"} true;
    assume {:print "$track_abort(3,6):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:38:9+16

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(17,1709,1752)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43

    // assume Identical($t4, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
    assume ($t4 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t4) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
    if ($t4) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
L6:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
    assume {:print "$at(17,1709,1752)"} true;
    assume {:print "$track_abort(3,6):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43
L5:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:39:9+43

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:40:61+1
    assume {:print "$at(17,1814,1815)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := pack DiemTimestamp::CurrentTimeMicroseconds($t5) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:40:21+43
    $t6 := $1_DiemTimestamp_CurrentTimeMicroseconds($t5);

    // move_to<DiemTimestamp::CurrentTimeMicroseconds>($t6, $t0) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:41:9+7
    assume {:print "$at(17,1827,1834)"} true;
    if ($ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemTimestamp_CurrentTimeMicroseconds_$memory := $ResourceUpdate($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $t0, $t6);
    }
    if ($abort_flag) {
        assume {:print "$at(17,1827,1834)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(3,6):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:42:5+1
    assume {:print "$at(17,1859,1860)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:42:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:42:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:42:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// struct SlidingNonce::SlidingNonce at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:13:5+341
type {:datatype} $1_SlidingNonce_SlidingNonce;
function {:constructor} $1_SlidingNonce_SlidingNonce($min_nonce: int, $nonce_mask: int): $1_SlidingNonce_SlidingNonce;
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_min_nonce(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce(x, $nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_nonce_mask(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce($min_nonce#$1_SlidingNonce_SlidingNonce(s), x)
}
function $IsValid'$1_SlidingNonce_SlidingNonce'(s: $1_SlidingNonce_SlidingNonce): bool {
    $IsValid'u64'($min_nonce#$1_SlidingNonce_SlidingNonce(s))
      && $IsValid'u128'($nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $IsEqual'$1_SlidingNonce_SlidingNonce'(s1: $1_SlidingNonce_SlidingNonce, s2: $1_SlidingNonce_SlidingNonce): bool {
    s1 == s2
}
var $1_SlidingNonce_SlidingNonce_$memory: $Memory $1_SlidingNonce_SlidingNonce;

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:479:9+148
function {:inline} $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int, role_id: int): bool {
    ($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), role_id))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:483:9+124
function {:inline} $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:487:9+144
function {:inline} $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 1)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:491:9+140
function {:inline} $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 2)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:495:9+124
function {:inline} $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 3)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:499:9+142
function {:inline} $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 4)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:503:9+128
function {:inline} $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 5)
}

// struct Roles::RoleId at /home/ying/diem/language/diem-framework/modules/Roles.move:51:5+51
type {:datatype} $1_Roles_RoleId;
function {:constructor} $1_Roles_RoleId($role_id: int): $1_Roles_RoleId;
function {:inline} $Update'$1_Roles_RoleId'_role_id(s: $1_Roles_RoleId, x: int): $1_Roles_RoleId {
    $1_Roles_RoleId(x)
}
function $IsValid'$1_Roles_RoleId'(s: $1_Roles_RoleId): bool {
    $IsValid'u64'($role_id#$1_Roles_RoleId(s))
}
function {:inline} $IsEqual'$1_Roles_RoleId'(s1: $1_Roles_RoleId, s2: $1_Roles_RoleId): bool {
    s1 == s2
}
var $1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId;

// fun Roles::grant_role [verification] at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
procedure {:timeLimit 40} $1_Roles_grant_role$verify(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Roles_RoleId;
    var $t0: int;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#156: $Memory $1_Roles_RoleId;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    assume {:print "$at(26,6830,7029)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:171:9+44
    assume {:print "$at(26,7145,7189)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t4, CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:173:9+85
    assume {:print "$at(26,7248,7333)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t4, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(Eq<u64>($t1, 1), Eq<address>($t4, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Roles.move:174:9+105
    assume {:print "$at(26,7342,7447)"} true;
    assume ($IsEqual'u64'($t1, 1) ==> $IsEqual'address'($t4, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    assume {:print "$at(26,7701,7731)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @156 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+30
    $1_Roles_RoleId_$memory#156 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+1
    assume {:print "$at(26,6830,6831)"} true;
    assume {:print "$track_local(6,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+1
    assume {:print "$track_local(6,12,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:165:32+27
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(26,6910,6937)"} true;

    // $t5 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:32+27

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:32+27
    assume $IsValid'address'($t5);

    // assume Eq<address>($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:32+27
    assume $IsEqual'address'($t5, $1_Signer_spec_address_of($t0));

    // $t5 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:32+27

    // $t6 := exists<Roles::RoleId>($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:17+6
    $t6 := $ResourceExists($1_Roles_RoleId_$memory, $t5);

    // $t7 := !($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:16+1
    call $t7 := $Not($t6);

    // $t8 := 0 at /home/ying/diem/language/diem-framework/modules/Roles.move:165:88+8
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/Roles.move:165:62+35
    // >> opaque call: $t8 := Errors::already_published($t7)

    // $t9 := opaque begin: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:62+35

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:62+35
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 6) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:62+35
    assume $IsEqual'u64'($t9, 6);

    // $t9 := opaque end: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:62+35

    // trace_local[tmp#$3]($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
    assume {:print "$track_local(6,12,3):", $t9} $t9 == $t9;

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
    assume {:print "$track_local(6,12,2):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
    assume {:print "$at(26,6887,6976)"} true;
    assume {:print "$track_abort(6,12):", $t9} $t9 == $t9;

    // $t10 := move($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
    $t10 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:165:9+89
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Roles.move:166:17+7
    assume {:print "$at(26,6994,7001)"} true;
L0:

    // $t11 := pack Roles::RoleId($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:26+18
    $t11 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:9+7
    assert {:msg "assert_failed(26,6986,6993): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$t0];

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(26,6830,7029)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:164:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // move_to<Roles::RoleId>($t11, $t0) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/Roles.move:166:9+7
    assume {:print "$at(26,6986,6993)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $t0, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(26,6986,6993)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(6,12):", $t10} $t10 == $t10;
        goto L3;
    }

    // assert And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(10,75283,75495)"} true;
    assert {:msg "assert_failed(10,75283,75495): global memory invariant does not hold"}
      (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assert And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume {:print "$at(10,79304,79507)"} true;
    assert {:msg "assert_failed(10,79304,79507): global memory invariant does not hold"}
      (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume {:print "$at(10,83274,83510)"} true;
    assert {:msg "assert_failed(10,83274,83510): global memory invariant does not hold"}
      (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:167:5+1
    assume {:print "$at(26,7028,7029)"} true;
L2:

    // assert Not(exists[@156]<Roles::RoleId>(Signer::$address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/Roles.move:179:9+62
    assume {:print "$at(26,7535,7597)"} true;
    assert {:msg "assert_failed(26,7535,7597): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#156, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:180:9+29
    assume {:print "$at(26,7606,7635)"} true;
    assert {:msg "assert_failed(26,7606,7635): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+48
    assume {:print "$at(26,7644,7692)"} true;
    assert {:msg "assert_failed(26,7644,7692): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+48
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:167:5+1
    assume {:print "$at(26,7028,7029)"} true;
L3:

    // assert exists[@156]<Roles::RoleId>(Signer::$address_of[]($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:168:5+419
    assume {:print "$at(26,7034,7453)"} true;
    assert {:msg "assert_failed(26,7034,7453): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#156, $1_Signer_$address_of($t0));

    // assert And(exists[@156]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(6, $t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:168:5+419
    assert {:msg "assert_failed(26,7034,7453): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#156, $1_Signer_$address_of($t0)) && $IsEqual'u8'(6, $t10));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/Roles.move:168:5+419
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:229:5+74
function {:inline} $1_FixedPoint32_$get_raw_value(num: $1_FixedPoint32_FixedPoint32): int {
    $value#$1_FixedPoint32_FixedPoint32(num)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:80:10+360
function {:inline} $1_FixedPoint32_spec_multiply_u64(val: int, multiplier: $1_FixedPoint32_FixedPoint32): int {
    if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 0)) then (0) else (if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 1)) then (val) else (if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 2)) then ((val div 2)) else ((18446744073709551615 + 1))))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:206:10+244
function {:inline} $1_FixedPoint32_spec_create_from_rational(numerator: int, denominator: int): $1_FixedPoint32_FixedPoint32 {
    if ($IsEqual'num'(numerator, denominator)) then ($1_FixedPoint32_FixedPoint32(1)) else ($1_FixedPoint32_FixedPoint32(2))
}

// struct FixedPoint32::FixedPoint32 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:19:5+56
type {:datatype} $1_FixedPoint32_FixedPoint32;
function {:constructor} $1_FixedPoint32_FixedPoint32($value: int): $1_FixedPoint32_FixedPoint32;
function {:inline} $Update'$1_FixedPoint32_FixedPoint32'_value(s: $1_FixedPoint32_FixedPoint32, x: int): $1_FixedPoint32_FixedPoint32 {
    $1_FixedPoint32_FixedPoint32(x)
}
function $IsValid'$1_FixedPoint32_FixedPoint32'(s: $1_FixedPoint32_FixedPoint32): bool {
    $IsValid'u64'($value#$1_FixedPoint32_FixedPoint32(s))
}
function {:inline} $IsEqual'$1_FixedPoint32_FixedPoint32'(s1: $1_FixedPoint32_FixedPoint32, s2: $1_FixedPoint32_FixedPoint32): bool {
    s1 == s2
}

// fun FixedPoint32::get_raw_value [baseline] at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:229:5+74
procedure {:inline 1} $1_FixedPoint32_get_raw_value(_$t0: $1_FixedPoint32_FixedPoint32) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_FixedPoint32_FixedPoint32;
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[num]($t0) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:229:5+1
    assume {:print "$at(42,10002,10003)"} true;
    assume {:print "$track_local(7,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<FixedPoint32::FixedPoint32>.value($t0) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:230:9+9
    assume {:print "$at(42,10061,10070)"} true;
    $t1 := $value#$1_FixedPoint32_FixedPoint32($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:230:9+9
    assume {:print "$track_return(7,3,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:231:5+1
    assume {:print "$at(42,10075,10076)"} true;
L1:

    // return $t1 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:231:5+1
    $ret0 := $t1;
    return;

}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:93:5+86
function {:inline} $1_Vector_$is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_ValidatorConfig_Config'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:93:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:93:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:164:9+216
function {:inline} $1_Vector_eq_push_back'$1_Diem_PreburnWithMetadata'#0''(v1: Vec ($1_Diem_PreburnWithMetadata'#0'), v2: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): bool {
    (($IsEqual'num'(LenVec(v1), (LenVec(v2) + 1)) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v1, (LenVec(v1) - 1)), e)) && $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''($SliceVecByRange(v1, $Range(0, (LenVec(v1) - 1))), $SliceVecByRange(v2, $Range(0, LenVec(v2)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:92:5+285
function {:inline} $1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): $1_RegisteredCurrencies_RegisteredCurrencies {
    (var addr := $1_CoreAddresses_$DIEM_ROOT_ADDRESS(); $payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'($ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:92:5+285
function {:inline} $1_DiemConfig_$get'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    (var addr := $1_CoreAddresses_$DIEM_ROOT_ADDRESS(); $payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:92:5+285
function {:inline} $1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): $1_DiemSystem_DiemSystem {
    (var addr := $1_CoreAddresses_$DIEM_ROOT_ADDRESS(); $payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:92:5+285
function {:inline} $1_DiemConfig_$get'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): $1_DiemVMConfig_DiemVMConfig {
    (var addr := $1_CoreAddresses_$DIEM_ROOT_ADDRESS(); $payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:92:5+285
function {:inline} $1_DiemConfig_$get'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): $1_DiemVersion_DiemVersion {
    (var addr := $1_CoreAddresses_$DIEM_ROOT_ADDRESS(); $payload#$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:203:5+119
function {:inline} $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory: $Memory $1_DiemConfig_DisableReconfiguration): bool {
    !$ResourceExists($1_DiemConfig_DisableReconfiguration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:439:9+109
function {:inline} $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration): bool {
    $ResourceExists($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:443:9+124
function {:inline} $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:443:9+124
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:443:9+124
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:443:9+124
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:443:9+124
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// struct DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:15:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:constructor} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'($payload: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''_payload(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', x: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies' {
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'($payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s1: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', s2: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s1), $payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s2))}
var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';

// struct DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:15:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', x: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption' {
    $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s1: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', s2: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s1), $payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s2))}
var $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';

// struct DiemConfig::DiemConfig<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:15:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($payload: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', x: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'$1_DiemSystem_DiemSystem'($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $IsEqual'$1_DiemSystem_DiemSystem'($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s1), $payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s2))}
var $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';

// struct DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:15:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'($payload: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', x: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig' {
    $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsValid'$1_DiemVMConfig_DiemVMConfig'($payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s1: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', s2: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsEqual'$1_DiemVMConfig_DiemVMConfig'($payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s1), $payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s2))}
var $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';

// struct DiemConfig::DiemConfig<DiemVersion::DiemVersion> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:15:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'($payload: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', x: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion' {
    $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $IsValid'$1_DiemVersion_DiemVersion'($payload#$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s1: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', s2: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';

// struct DiemConfig::Configuration at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:28:5+306
type {:datatype} $1_DiemConfig_Configuration;
function {:constructor} $1_DiemConfig_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration;
function {:inline} $Update'$1_DiemConfig_Configuration'_epoch(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration(x, $last_reconfiguration_time#$1_DiemConfig_Configuration(s), $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_last_reconfiguration_time(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), x, $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_events(s: $1_DiemConfig_Configuration, x: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), $last_reconfiguration_time#$1_DiemConfig_Configuration(s), x)
}
function $IsValid'$1_DiemConfig_Configuration'(s: $1_DiemConfig_Configuration): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_Configuration(s))
      && $IsValid'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''($events#$1_DiemConfig_Configuration(s))
}
function {:inline} $IsEqual'$1_DiemConfig_Configuration'(s1: $1_DiemConfig_Configuration, s2: $1_DiemConfig_Configuration): bool {
    $IsEqual'u64'($epoch#$1_DiemConfig_Configuration(s1), $epoch#$1_DiemConfig_Configuration(s2))
    && $IsEqual'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration(s1), $last_reconfiguration_time#$1_DiemConfig_Configuration(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''($events#$1_DiemConfig_Configuration(s1), $events#$1_DiemConfig_Configuration(s2))}
var $1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration;

// struct DiemConfig::DisableReconfiguration at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:41:5+40
type {:datatype} $1_DiemConfig_DisableReconfiguration;
function {:constructor} $1_DiemConfig_DisableReconfiguration($dummy_field: bool): $1_DiemConfig_DisableReconfiguration;
function {:inline} $Update'$1_DiemConfig_DisableReconfiguration'_dummy_field(s: $1_DiemConfig_DisableReconfiguration, x: bool): $1_DiemConfig_DisableReconfiguration {
    $1_DiemConfig_DisableReconfiguration(x)
}
function $IsValid'$1_DiemConfig_DisableReconfiguration'(s: $1_DiemConfig_DisableReconfiguration): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_DisableReconfiguration(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DisableReconfiguration'(s1: $1_DiemConfig_DisableReconfiguration, s2: $1_DiemConfig_DisableReconfiguration): bool {
    s1 == s2
}
var $1_DiemConfig_DisableReconfiguration_$memory: $Memory $1_DiemConfig_DisableReconfiguration;

// struct DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:38:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies' {
    $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''(s: $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''(s1: $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies', s2: $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';

// struct DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:38:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';

// struct DiemConfig::ModifyConfigCapability<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:38:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';

// struct DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:38:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig';

// struct DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:38:5+57
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion';

// struct DiemConfig::NewEpochEvent at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:23:5+64
type {:datatype} $1_DiemConfig_NewEpochEvent;
function {:constructor} $1_DiemConfig_NewEpochEvent($epoch: int): $1_DiemConfig_NewEpochEvent;
function {:inline} $Update'$1_DiemConfig_NewEpochEvent'_epoch(s: $1_DiemConfig_NewEpochEvent, x: int): $1_DiemConfig_NewEpochEvent {
    $1_DiemConfig_NewEpochEvent(x)
}
function $IsValid'$1_DiemConfig_NewEpochEvent'(s: $1_DiemConfig_NewEpochEvent): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_NewEpochEvent(s))
}
function {:inline} $IsEqual'$1_DiemConfig_NewEpochEvent'(s1: $1_DiemConfig_NewEpochEvent, s2: $1_DiemConfig_NewEpochEvent): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:100:9+123
function {:inline} $1_RegisteredCurrencies_get_currency_codes($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): Vec (Vec (int)) {
    $currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory))
}

// struct RegisteredCurrencies::RegisteredCurrencies at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:15:5+101
type {:datatype} $1_RegisteredCurrencies_RegisteredCurrencies;
function {:constructor} $1_RegisteredCurrencies_RegisteredCurrencies($currency_codes: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies;
function {:inline} $Update'$1_RegisteredCurrencies_RegisteredCurrencies'_currency_codes(s: $1_RegisteredCurrencies_RegisteredCurrencies, x: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies {
    $1_RegisteredCurrencies_RegisteredCurrencies(x)
}
function $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'(s: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    $IsValid'vec'vec'u8'''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s))
}
function {:inline} $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'(s1: $1_RegisteredCurrencies_RegisteredCurrencies, s2: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    $IsEqual'vec'vec'u8'''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s1), $currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s2))}

// fun RegisteredCurrencies::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:5+280
procedure {:inline 1} $1_RegisteredCurrencies_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: Vec (Vec (int));
    var $t8: $1_RegisteredCurrencies_RegisteredCurrencies;
    var $t9: int;
    var $t10: bool;
    var $t0: int;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'': $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'': $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_DiemConfig_Configuration_$memory#441: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:24:5+1
    assume {:print "$at(25,817,818)"} true;
    assume {:print "$track_local(12,1,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(25,870,901)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31

    // assume Identical($t3, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
    assume ($t3 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t4)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
    assume {:print "$at(25,870,901)"} true;
    assume {:print "$track_abort(12,1):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:25:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(25,911,946)"} true;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    assume {:print "$at(25,911,946)"} true;

    // assume Identical($t6, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    assume ($t6 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t6) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    if ($t6) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4)), And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t4))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 0), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'u8'(5, $t4))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 0) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    assume {:print "$at(25,911,946)"} true;
    assume {:print "$track_abort(12,1):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:26:9+35

    // $t7 := Vector::empty<vector<u8>>() on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:29:52+15
    assume {:print "$at(25,1063,1078)"} true;
    call $t7 := $1_Vector_empty'vec'u8''();
    if ($abort_flag) {
        assume {:print "$at(25,1063,1078)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(12,1):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t8 := pack RegisteredCurrencies::RegisteredCurrencies($t7) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:29:13+56
    $t8 := $1_RegisteredCurrencies_RegisteredCurrencies($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    // >> opaque call: DiemConfig::publish_new_config<RegisteredCurrencies::RegisteredCurrencies>($t0, $t2)
    assume {:print "$at(25,956,1090)"} true;

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: DiemConfig::publish_new_config<RegisteredCurrencies::RegisteredCurrencies>($t0, $t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume {:print "$at(25,956,1090)"} true;

    // assume Identical($t10, Or(Or(Or(Or(DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>(), exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0))), Not(exists<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume ($t10 == (((($1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t10) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    if ($t10) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
L8:

    // assume Or(Or(Or(Or(DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>(), exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0))), And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t4))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume (((($1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'u8'(5, $t4))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume {:print "$at(25,956,1090)"} true;
    assume {:print "$track_abort(12,1):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
L7:

    // @441 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    $1_DiemConfig_Configuration_$memory#441 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'';
        $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'');
    } else {
        $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'';
        $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceUpdate($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'');
    } else {
        $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceRemove($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0));

    // assume DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory);

    // assume Eq<RegisteredCurrencies::RegisteredCurrencies>(DiemConfig::$get<RegisteredCurrencies::RegisteredCurrencies>(), $t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory), $t8);

    // assume Eq<bool>(DiemConfig::spec_has_config[@441](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#441), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::publish_new_config<RegisteredCurrencies::RegisteredCurrencies>($t0, $t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:27:9+134

    // label L1 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:31:5+1
    assume {:print "$at(25,1096,1097)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:31:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:31:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:31:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun RegisteredCurrencies::add_currency_code [baseline] at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:51:5+449
procedure {:inline 1} $1_RegisteredCurrencies_add_currency_code(_$t0: int, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: $1_RegisteredCurrencies_RegisteredCurrencies;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_DiemConfig_Configuration;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $1_RegisteredCurrencies_RegisteredCurrencies;
    var $t10: Vec (Vec (int));
    var $t11: bool;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($1_RegisteredCurrencies_RegisteredCurrencies);
    var $t16: $Mutation (Vec (Vec (int)));
    var $t17: $1_RegisteredCurrencies_RegisteredCurrencies;
    var $t18: $1_DiemConfig_Configuration;
    var $t19: int;
    var $t20: bool;
    var $t0: int;
    var $t1: Vec (int);
    var $temp_0'$1_DiemConfig_Configuration': $1_DiemConfig_Configuration;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'': $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $temp_0'$1_RegisteredCurrencies_RegisteredCurrencies': $1_RegisteredCurrencies_RegisteredCurrencies;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemConfig_Configuration_$memory#413: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t16));

    // bytecode translation starts here
    // assume Identical($t5, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t5 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t6, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t6 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:51:5+1
    assume {:print "$at(25,1792,1793)"} true;
    assume {:print "$track_local(12,0,0):", $t0} $t0 == $t0;

    // trace_local[currency_code]($t1) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:51:5+1
    assume {:print "$track_local(12,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    // >> opaque call: $t2 := DiemConfig::get<RegisteredCurrencies::RegisteredCurrencies>()
    assume {:print "$at(25,1915,1954)"} true;

    // $t2 := opaque begin: DiemConfig::get<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39

    // assume Identical($t7, Not(exists<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    assume ($t7 == !$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t7) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    if ($t7) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
L5:

    // assume And(Not(exists<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS())), Eq(5, $t8)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    assume (!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(5, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    assume {:print "$at(25,1915,1954)"} true;
    assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
L4:

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    assume $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'($t2);

    // assume Eq<RegisteredCurrencies::RegisteredCurrencies>($t2, DiemConfig::$get<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39
    assume $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($t2, $1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // $t2 := opaque end: DiemConfig::get<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:22+39

    // trace_local[config]($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:55:13+6
    assume {:print "$track_local(12,0,2):", $t2} $t2 == $t2;

    // $t9 := copy($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:57:32+6
    assume {:print "$at(25,2003,2009)"} true;
    $t9 := $t2;

    // $t10 := get_field<RegisteredCurrencies::RegisteredCurrencies>.currency_codes($t9) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:57:31+22
    $t10 := $currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($t9);

    // $t11 := Vector::contains<vector<u8>>($t10, $t1) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:57:14+56
    call $t11 := $1_Vector_contains'vec'u8''($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(25,1985,2041)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t12 := !($t11) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:57:13+1
    call $t12 := $Not($t11);

    // $t13 := 0 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:38+28
    assume {:print "$at(25,2080,2108)"} true;
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:13+54
    // >> opaque call: $t10 := Errors::invalid_argument($t9)

    // $t14 := opaque begin: Errors::invalid_argument($t13) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:13+54

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:13+54
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 7) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:13+54
    assume $IsEqual'u64'($t14, 7);

    // $t14 := opaque end: Errors::invalid_argument($t13) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:58:13+54

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
    assume {:print "$at(25,1964,2119)"} true;
    assume {:print "$track_local(12,0,4):", $t14} $t14 == $t14;

    // trace_local[tmp#$3]($t12) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
    assume {:print "$track_local(12,0,3):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
    assume {:print "$at(25,1964,2119)"} true;
    assume {:print "$track_abort(12,0):", $t14} $t14 == $t14;

    // $t8 := move($t14) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
    $t8 := $t14;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:56:9+155
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:32+6
    assume {:print "$at(25,2152,2158)"} true;
L0:

    // $t15 := borrow_local($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:32+6
    $t15 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t16 := borrow_field<RegisteredCurrencies::RegisteredCurrencies>.currency_codes($t15) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:27+26
    $t16 := $ChildMutation($t15, 0, $currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($Dereference($t15)));

    // Vector::push_back<vector<u8>>($t16, $t1) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:9+60
    call $t16 := $1_Vector_push_back'vec'u8''($t16, $t1);
    if ($abort_flag) {
        assume {:print "$at(25,2129,2189)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // write_back[Reference($t15).currency_codes]($t16) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:9+60
    $t15 := $UpdateMutation($t15, $Update'$1_RegisteredCurrencies_RegisteredCurrencies'_currency_codes($Dereference($t15), $Dereference($t16)));

    // write_back[LocalRoot($t2)@]($t15) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:60:9+60
    $t2 := $Dereference($t15);

    // $t17 := move($t2) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:37+6
    assume {:print "$at(25,2227,2233)"} true;
    $t17 := $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    // >> opaque call: DiemConfig::set<RegisteredCurrencies::RegisteredCurrencies>($t0, $t13)

    // assume Identical($t18, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t18 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t19, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t19 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // opaque begin: DiemConfig::set<RegisteredCurrencies::RegisteredCurrencies>($t0, $t17) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume {:print "$at(25,2199,2234)"} true;

    // assume Identical($t20, Or(Or(Not(exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0))), Not(exists<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS()))), And(And(And(And(DiemTimestamp::$is_operating(), DiemConfig::$reconfiguration_enabled()), Gt(DiemTimestamp::spec_now_microseconds(), 0)), Lt(select DiemConfig::Configuration.epoch($t18), 18446744073709551615)), Lt($t19, select DiemConfig::Configuration.last_reconfiguration_time($t18))))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume ($t20 == ((!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0)) || !$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || (((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > 0)) && ($epoch#$1_DiemConfig_Configuration($t18) < 18446744073709551615)) && ($t19 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t18)))));

    // if ($t20) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    if ($t20) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
L7:

    // assume Or(Or(And(Not(exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0))), Eq(4, $t8)), And(Not(exists<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS())), Eq(5, $t8))), And(And(And(And(And(DiemTimestamp::$is_operating(), DiemConfig::$reconfiguration_enabled()), Gt(DiemTimestamp::spec_now_microseconds(), 0)), Lt(select DiemConfig::Configuration.epoch($t18), 18446744073709551615)), Lt($t19, select DiemConfig::Configuration.last_reconfiguration_time($t18))), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume (((!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t8)) || (!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(5, $t8))) || ((((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > 0)) && ($epoch#$1_DiemConfig_Configuration($t18) < 18446744073709551615)) && ($t19 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t18))) && $IsEqual'u8'(1, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume {:print "$at(25,2199,2234)"} true;
    assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
L6:

    // @413 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    $1_DiemConfig_Configuration_$memory#413 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_Configuration';
        $1_DiemConfig_Configuration_$memory := $ResourceUpdate($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_Configuration');
    } else {
        $1_DiemConfig_Configuration_$memory := $ResourceRemove($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'';
        $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'');
    } else {
        $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory);

    // assume Eq<RegisteredCurrencies::RegisteredCurrencies>(DiemConfig::$get<RegisteredCurrencies::RegisteredCurrencies>(), $t17) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory), $t17);

    // assume Eq<bool>(DiemConfig::spec_has_config[@413](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#413), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::set<RegisteredCurrencies::RegisteredCurrencies>($t0, $t17) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:61:9+35

    // label L2 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:62:5+1
    assume {:print "$at(25,2240,2241)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:62:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:62:5+1
L3:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:62:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+134
function {:inline} $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+134
function {:inline} $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+267
function {:inline} $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    (var addr := $1_CoreAddresses_$CURRENCY_INFO_ADDRESS(); ($ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, addr) && $is_synthetic#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1418:10+142
function {:inline} $1_Diem_spec_scaling_factor'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): int {
    $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1442:10+107
function {:inline} $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1803:9+133
function {:inline} $1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1803:9+133
function {:inline} $1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1803:9+133
function {:inline} $1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1808:9+153
function {:inline} $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): $1_Diem_CurrencyInfo'#0' {
    $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1813:9+156
function {:inline} $1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0', value: int): int {
    $1_FixedPoint32_spec_multiply_u64(value, $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1817:9+168
function {:inline} $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1823:9+122
function {:inline} $1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory: $Memory $1_Diem_MintCapability'#0', addr: int): bool {
    $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1833:9+130
function {:inline} $1_Diem_spec_make_preburn'#0'(amount: int): $1_Diem_Preburn'#0' {
    $1_Diem_Preburn'#0'($1_Diem_Diem'#0'(amount))
}

// struct Diem::Diem<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+126
type {:datatype} $1_Diem_Diem'$1_XUS_XUS';
function {:constructor} $1_Diem_Diem'$1_XUS_XUS'($value: int): $1_Diem_Diem'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Diem'$1_XUS_XUS''_value(s: $1_Diem_Diem'$1_XUS_XUS', x: int): $1_Diem_Diem'$1_XUS_XUS' {
    $1_Diem_Diem'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Diem'$1_XUS_XUS''(s: $1_Diem_Diem'$1_XUS_XUS'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XUS_XUS''(s1: $1_Diem_Diem'$1_XUS_XUS', s2: $1_Diem_Diem'$1_XUS_XUS'): bool {
    s1 == s2
}

// struct Diem::Diem<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+126
type {:datatype} $1_Diem_Diem'$1_XDX_XDX';
function {:constructor} $1_Diem_Diem'$1_XDX_XDX'($value: int): $1_Diem_Diem'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Diem'$1_XDX_XDX''_value(s: $1_Diem_Diem'$1_XDX_XDX', x: int): $1_Diem_Diem'$1_XDX_XDX' {
    $1_Diem_Diem'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Diem'$1_XDX_XDX''(s: $1_Diem_Diem'$1_XDX_XDX'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XDX_XDX''(s1: $1_Diem_Diem'$1_XDX_XDX', s2: $1_Diem_Diem'$1_XDX_XDX'): bool {
    s1 == s2
}

// struct Diem::Diem<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+126
type {:datatype} $1_Diem_Diem'#0';
function {:constructor} $1_Diem_Diem'#0'($value: int): $1_Diem_Diem'#0';
function {:inline} $Update'$1_Diem_Diem'#0''_value(s: $1_Diem_Diem'#0', x: int): $1_Diem_Diem'#0' {
    $1_Diem_Diem'#0'(x)
}
function $IsValid'$1_Diem_Diem'#0''(s: $1_Diem_Diem'#0'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'#0''(s1: $1_Diem_Diem'#0', s2: $1_Diem_Diem'#0'): bool {
    s1 == s2
}

// struct Diem::BurnCapability<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:37:5+50
type {:datatype} $1_Diem_BurnCapability'$1_XUS_XUS';
function {:constructor} $1_Diem_BurnCapability'$1_XUS_XUS'($dummy_field: bool): $1_Diem_BurnCapability'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XUS_XUS''_dummy_field(s: $1_Diem_BurnCapability'$1_XUS_XUS', x: bool): $1_Diem_BurnCapability'$1_XUS_XUS' {
    $1_Diem_BurnCapability'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''(s: $1_Diem_BurnCapability'$1_XUS_XUS'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XUS_XUS''(s1: $1_Diem_BurnCapability'$1_XUS_XUS', s2: $1_Diem_BurnCapability'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_BurnCapability'$1_XUS_XUS';

// struct Diem::BurnCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:37:5+50
type {:datatype} $1_Diem_BurnCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_BurnCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_BurnCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_BurnCapability'$1_XDX_XDX', x: bool): $1_Diem_BurnCapability'$1_XDX_XDX' {
    $1_Diem_BurnCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''(s: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XDX_XDX''(s1: $1_Diem_BurnCapability'$1_XDX_XDX', s2: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_BurnCapability'$1_XDX_XDX';

// struct Diem::BurnCapability<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:37:5+50
type {:datatype} $1_Diem_BurnCapability'#0';
function {:constructor} $1_Diem_BurnCapability'#0'($dummy_field: bool): $1_Diem_BurnCapability'#0';
function {:inline} $Update'$1_Diem_BurnCapability'#0''_dummy_field(s: $1_Diem_BurnCapability'#0', x: bool): $1_Diem_BurnCapability'#0' {
    $1_Diem_BurnCapability'#0'(x)
}
function $IsValid'$1_Diem_BurnCapability'#0''(s: $1_Diem_BurnCapability'#0'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'#0''(s1: $1_Diem_BurnCapability'#0', s2: $1_Diem_BurnCapability'#0'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'#0'_$memory: $Memory $1_Diem_BurnCapability'#0';

// struct Diem::BurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:58:5+323
type {:datatype} $1_Diem_BurnEvent;
function {:constructor} $1_Diem_BurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_BurnEvent;
function {:inline} $Update'$1_Diem_BurnEvent'_amount(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent(x, $currency_code#$1_Diem_BurnEvent(s), $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_currency_code(s: $1_Diem_BurnEvent, x: Vec (int)): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), x, $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_preburn_address(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), $currency_code#$1_Diem_BurnEvent(s), x)
}
function $IsValid'$1_Diem_BurnEvent'(s: $1_Diem_BurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_BurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_BurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_BurnEvent'(s1: $1_Diem_BurnEvent, s2: $1_Diem_BurnEvent): bool {
    $IsEqual'u64'($amount#$1_Diem_BurnEvent(s1), $amount#$1_Diem_BurnEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_BurnEvent(s1), $currency_code#$1_Diem_BurnEvent(s2))
    && $IsEqual'address'($preburn_address#$1_Diem_BurnEvent(s1), $preburn_address#$1_Diem_BurnEvent(s2))}

// struct Diem::CancelBurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:83:5+327
type {:datatype} $1_Diem_CancelBurnEvent;
function {:constructor} $1_Diem_CancelBurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_CancelBurnEvent;
function {:inline} $Update'$1_Diem_CancelBurnEvent'_amount(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent(x, $currency_code#$1_Diem_CancelBurnEvent(s), $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_currency_code(s: $1_Diem_CancelBurnEvent, x: Vec (int)): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), x, $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_preburn_address(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), $currency_code#$1_Diem_CancelBurnEvent(s), x)
}
function $IsValid'$1_Diem_CancelBurnEvent'(s: $1_Diem_CancelBurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_CancelBurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CancelBurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_CancelBurnEvent'(s1: $1_Diem_CancelBurnEvent, s2: $1_Diem_CancelBurnEvent): bool {
    $IsEqual'u64'($amount#$1_Diem_CancelBurnEvent(s1), $amount#$1_Diem_CancelBurnEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CancelBurnEvent(s1), $currency_code#$1_Diem_CancelBurnEvent(s2))
    && $IsEqual'address'($preburn_address#$1_Diem_CancelBurnEvent(s1), $preburn_address#$1_Diem_CancelBurnEvent(s2))}

// struct Diem::CurrencyInfo<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2300
type {:datatype} $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:constructor} $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_total_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_currency_code(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_can_mint(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_mint_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s1: $1_Diem_CurrencyInfo'$1_XUS_XUS', s2: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))}
var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';

// struct Diem::CurrencyInfo<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2300
type {:datatype} $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:constructor} $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_total_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_currency_code(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_can_mint(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_mint_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s1: $1_Diem_CurrencyInfo'$1_XDX_XDX', s2: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))}
var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';

// struct Diem::CurrencyInfo<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2300
type {:datatype} $1_Diem_CurrencyInfo'#0';
function {:constructor} $1_Diem_CurrencyInfo'#0'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#0';
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_total_value(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'(x, $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_preburn_value(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'#0', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_is_synthetic(s: $1_Diem_CurrencyInfo'#0', x: bool): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_scaling_factor(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), x, $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_fractional_part(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), x, $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_currency_code(s: $1_Diem_CurrencyInfo'#0', x: Vec (int)): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), x, $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_can_mint(s: $1_Diem_CurrencyInfo'#0', x: bool): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), x, $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_mint_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), x, $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_burn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), x, $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_preburn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_cancel_burn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'#0''(s: $1_Diem_CurrencyInfo'#0'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'#0''(s1: $1_Diem_CurrencyInfo'#0', s2: $1_Diem_CurrencyInfo'#0'): bool {
    $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#0'(s1), $total_value#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'(s1), $preburn_value#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s1), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'bool'($is_synthetic#$1_Diem_CurrencyInfo'#0'(s1), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'#0'(s1), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'#0'(s1), $fractional_part#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#0'(s1), $currency_code#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'#0'(s1), $can_mint#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#0'(s1), $mint_events#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#0'(s1), $burn_events#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#0'(s1), $preburn_events#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s1), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s1), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s2))}
var $1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0';

// struct Diem::MintCapability<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+50
type {:datatype} $1_Diem_MintCapability'$1_XUS_XUS';
function {:constructor} $1_Diem_MintCapability'$1_XUS_XUS'($dummy_field: bool): $1_Diem_MintCapability'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_MintCapability'$1_XUS_XUS''_dummy_field(s: $1_Diem_MintCapability'$1_XUS_XUS', x: bool): $1_Diem_MintCapability'$1_XUS_XUS' {
    $1_Diem_MintCapability'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XUS_XUS''(s: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XUS_XUS''(s1: $1_Diem_MintCapability'$1_XUS_XUS', s2: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_MintCapability'$1_XUS_XUS';

// struct Diem::MintCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+50
type {:datatype} $1_Diem_MintCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_MintCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_MintCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_MintCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_MintCapability'$1_XDX_XDX', x: bool): $1_Diem_MintCapability'$1_XDX_XDX' {
    $1_Diem_MintCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''(s: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XDX_XDX''(s1: $1_Diem_MintCapability'$1_XDX_XDX', s2: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_MintCapability'$1_XDX_XDX';

// struct Diem::MintCapability<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+50
type {:datatype} $1_Diem_MintCapability'#0';
function {:constructor} $1_Diem_MintCapability'#0'($dummy_field: bool): $1_Diem_MintCapability'#0';
function {:inline} $Update'$1_Diem_MintCapability'#0''_dummy_field(s: $1_Diem_MintCapability'#0', x: bool): $1_Diem_MintCapability'#0' {
    $1_Diem_MintCapability'#0'(x)
}
function $IsValid'$1_Diem_MintCapability'#0''(s: $1_Diem_MintCapability'#0'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'#0''(s1: $1_Diem_MintCapability'#0', s2: $1_Diem_MintCapability'#0'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'#0'_$memory: $Memory $1_Diem_MintCapability'#0';

// struct Diem::MintEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:44:5+199
type {:datatype} $1_Diem_MintEvent;
function {:constructor} $1_Diem_MintEvent($amount: int, $currency_code: Vec (int)): $1_Diem_MintEvent;
function {:inline} $Update'$1_Diem_MintEvent'_amount(s: $1_Diem_MintEvent, x: int): $1_Diem_MintEvent {
    $1_Diem_MintEvent(x, $currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $Update'$1_Diem_MintEvent'_currency_code(s: $1_Diem_MintEvent, x: Vec (int)): $1_Diem_MintEvent {
    $1_Diem_MintEvent($amount#$1_Diem_MintEvent(s), x)
}
function $IsValid'$1_Diem_MintEvent'(s: $1_Diem_MintEvent): bool {
    $IsValid'u64'($amount#$1_Diem_MintEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $IsEqual'$1_Diem_MintEvent'(s1: $1_Diem_MintEvent, s2: $1_Diem_MintEvent): bool {
    $IsEqual'u64'($amount#$1_Diem_MintEvent(s1), $amount#$1_Diem_MintEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_MintEvent(s1), $currency_code#$1_Diem_MintEvent(s2))}

// struct Diem::Preburn<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+232
type {:datatype} $1_Diem_Preburn'$1_XUS_XUS';
function {:constructor} $1_Diem_Preburn'$1_XUS_XUS'($to_burn: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Preburn'$1_XUS_XUS''_to_burn(s: $1_Diem_Preburn'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS' {
    $1_Diem_Preburn'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XUS_XUS''(s: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($to_burn#$1_Diem_Preburn'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XUS_XUS''(s1: $1_Diem_Preburn'$1_XUS_XUS', s2: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XUS_XUS'_$memory: $Memory $1_Diem_Preburn'$1_XUS_XUS';

// struct Diem::Preburn<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+232
type {:datatype} $1_Diem_Preburn'$1_XDX_XDX';
function {:constructor} $1_Diem_Preburn'$1_XDX_XDX'($to_burn: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Preburn'$1_XDX_XDX''_to_burn(s: $1_Diem_Preburn'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX' {
    $1_Diem_Preburn'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XDX_XDX''(s: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($to_burn#$1_Diem_Preburn'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XDX_XDX''(s1: $1_Diem_Preburn'$1_XDX_XDX', s2: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XDX_XDX'_$memory: $Memory $1_Diem_Preburn'$1_XDX_XDX';

// struct Diem::Preburn<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+232
type {:datatype} $1_Diem_Preburn'#0';
function {:constructor} $1_Diem_Preburn'#0'($to_burn: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0';
function {:inline} $Update'$1_Diem_Preburn'#0''_to_burn(s: $1_Diem_Preburn'#0', x: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0' {
    $1_Diem_Preburn'#0'(x)
}
function $IsValid'$1_Diem_Preburn'#0''(s: $1_Diem_Preburn'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($to_burn#$1_Diem_Preburn'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'#0''(s1: $1_Diem_Preburn'#0', s2: $1_Diem_Preburn'#0'): bool {
    s1 == s2
}
var $1_Diem_Preburn'#0'_$memory: $Memory $1_Diem_Preburn'#0';

// struct Diem::PreburnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:70:5+355
type {:datatype} $1_Diem_PreburnEvent;
function {:constructor} $1_Diem_PreburnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_PreburnEvent;
function {:inline} $Update'$1_Diem_PreburnEvent'_amount(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent(x, $currency_code#$1_Diem_PreburnEvent(s), $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_currency_code(s: $1_Diem_PreburnEvent, x: Vec (int)): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), x, $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_preburn_address(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), $currency_code#$1_Diem_PreburnEvent(s), x)
}
function $IsValid'$1_Diem_PreburnEvent'(s: $1_Diem_PreburnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_PreburnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_PreburnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnEvent'(s1: $1_Diem_PreburnEvent, s2: $1_Diem_PreburnEvent): bool {
    $IsEqual'u64'($amount#$1_Diem_PreburnEvent(s1), $amount#$1_Diem_PreburnEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_PreburnEvent(s1), $currency_code#$1_Diem_PreburnEvent(s2))
    && $IsEqual'address'($preburn_address#$1_Diem_PreburnEvent(s1), $preburn_address#$1_Diem_PreburnEvent(s2))}

// struct Diem::PreburnQueue<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:194:5+144
type {:datatype} $1_Diem_PreburnQueue'$1_XUS_XUS';
function {:constructor} $1_Diem_PreburnQueue'$1_XUS_XUS'($preburns: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $1_Diem_PreburnQueue'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_PreburnQueue'$1_XUS_XUS''_preburns(s: $1_Diem_PreburnQueue'$1_XUS_XUS', x: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $1_Diem_PreburnQueue'$1_XUS_XUS' {
    $1_Diem_PreburnQueue'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''(s: $1_Diem_PreburnQueue'$1_XUS_XUS'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'$1_XUS_XUS''(s1: $1_Diem_PreburnQueue'$1_XUS_XUS', s2: $1_Diem_PreburnQueue'$1_XUS_XUS'): bool {
    $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'(s1), $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'(s2))}
var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';

// struct Diem::PreburnQueue<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:194:5+144
type {:datatype} $1_Diem_PreburnQueue'$1_XDX_XDX';
function {:constructor} $1_Diem_PreburnQueue'$1_XDX_XDX'($preburns: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $1_Diem_PreburnQueue'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_PreburnQueue'$1_XDX_XDX''_preburns(s: $1_Diem_PreburnQueue'$1_XDX_XDX', x: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $1_Diem_PreburnQueue'$1_XDX_XDX' {
    $1_Diem_PreburnQueue'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_PreburnQueue'$1_XDX_XDX''(s: $1_Diem_PreburnQueue'$1_XDX_XDX'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'$1_XDX_XDX''(s1: $1_Diem_PreburnQueue'$1_XDX_XDX', s2: $1_Diem_PreburnQueue'$1_XDX_XDX'): bool {
    $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'(s1), $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'(s2))}
var $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory: $Memory $1_Diem_PreburnQueue'$1_XDX_XDX';

// struct Diem::PreburnQueue<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:194:5+144
type {:datatype} $1_Diem_PreburnQueue'#0';
function {:constructor} $1_Diem_PreburnQueue'#0'($preburns: Vec ($1_Diem_PreburnWithMetadata'#0')): $1_Diem_PreburnQueue'#0';
function {:inline} $Update'$1_Diem_PreburnQueue'#0''_preburns(s: $1_Diem_PreburnQueue'#0', x: Vec ($1_Diem_PreburnWithMetadata'#0')): $1_Diem_PreburnQueue'#0' {
    $1_Diem_PreburnQueue'#0'(x)
}
function $IsValid'$1_Diem_PreburnQueue'#0''(s: $1_Diem_PreburnQueue'#0'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''($preburns#$1_Diem_PreburnQueue'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'#0''(s1: $1_Diem_PreburnQueue'#0', s2: $1_Diem_PreburnQueue'#0'): bool {
    $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''($preburns#$1_Diem_PreburnQueue'#0'(s1), $preburns#$1_Diem_PreburnQueue'#0'(s2))}
var $1_Diem_PreburnQueue'#0'_$memory: $Memory $1_Diem_PreburnQueue'#0';

// struct Diem::PreburnWithMetadata<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:178:5+120
type {:datatype} $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
function {:constructor} $1_Diem_PreburnWithMetadata'$1_XUS_XUS'($preburn: $1_Diem_Preburn'$1_XUS_XUS', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''_preburn(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    $1_Diem_PreburnWithMetadata'$1_XUS_XUS'(x, $metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''_metadata(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', x: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    $1_Diem_PreburnWithMetadata'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(s1: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', s2: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    $IsEqual'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s1), $preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s2))
    && $IsEqual'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s1), $metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s2))}

// struct Diem::PreburnWithMetadata<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:178:5+120
type {:datatype} $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
function {:constructor} $1_Diem_PreburnWithMetadata'$1_XDX_XDX'($preburn: $1_Diem_Preburn'$1_XDX_XDX', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''_preburn(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', x: $1_Diem_Preburn'$1_XDX_XDX'): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    $1_Diem_PreburnWithMetadata'$1_XDX_XDX'(x, $metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''_metadata(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', x: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    $1_Diem_PreburnWithMetadata'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(s1: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', s2: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    $IsEqual'$1_Diem_Preburn'$1_XDX_XDX''($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s1), $preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s2))
    && $IsEqual'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s1), $metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s2))}

// struct Diem::PreburnWithMetadata<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:178:5+120
type {:datatype} $1_Diem_PreburnWithMetadata'#0';
function {:constructor} $1_Diem_PreburnWithMetadata'#0'($preburn: $1_Diem_Preburn'#0', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'#0';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#0''_preburn(s: $1_Diem_PreburnWithMetadata'#0', x: $1_Diem_Preburn'#0'): $1_Diem_PreburnWithMetadata'#0' {
    $1_Diem_PreburnWithMetadata'#0'(x, $metadata#$1_Diem_PreburnWithMetadata'#0'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#0''_metadata(s: $1_Diem_PreburnWithMetadata'#0', x: Vec (int)): $1_Diem_PreburnWithMetadata'#0' {
    $1_Diem_PreburnWithMetadata'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'#0''(s: $1_Diem_PreburnWithMetadata'#0'): bool {
    $IsValid'$1_Diem_Preburn'#0''($preburn#$1_Diem_PreburnWithMetadata'#0'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'#0''(s1: $1_Diem_PreburnWithMetadata'#0', s2: $1_Diem_PreburnWithMetadata'#0'): bool {
    $IsEqual'$1_Diem_Preburn'#0''($preburn#$1_Diem_PreburnWithMetadata'#0'(s1), $preburn#$1_Diem_PreburnWithMetadata'#0'(s2))
    && $IsEqual'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'#0'(s1), $metadata#$1_Diem_PreburnWithMetadata'#0'(s2))}

// struct Diem::ToXDXExchangeRateUpdateEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:94:5+424
type {:datatype} $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:constructor} $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code: Vec (int), $new_to_xdx_exchange_rate: int): $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_currency_code(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: Vec (int)): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent(x, $new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_new_to_xdx_exchange_rate(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: int): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s), x)
}
function $IsValid'$1_Diem_ToXDXExchangeRateUpdateEvent'(s: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
      && $IsValid'u64'($new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(s1: $1_Diem_ToXDXExchangeRateUpdateEvent, s2: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    $IsEqual'vec'u8''($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s1), $currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s2))
    && $IsEqual'u64'($new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s1), $new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s2))}

// fun Diem::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
procedure {:inline 1} $1_Diem_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+1
    assume {:print "$at(10,12665,12666)"} true;
    assume {:print "$track_local(13,16,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(10,12733,12764)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31

    // assume Identical($t3, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    assume ($t3 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    assume {:print "$at(10,12733,12764)"} true;
    assume {:print "$track_abort(13,16):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(10,12808,12851)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43

    // assume Identical($t5, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    assume ($t5 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
L6:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    assume {:print "$at(10,12808,12851)"} true;
    assume {:print "$track_abort(13,16):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
L5:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // RegisteredCurrencies::initialize($t0) on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:254:9+44
    assume {:print "$at(10,12861,12905)"} true;
    call $1_RegisteredCurrencies_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(10,12861,12905)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(13,16):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:255:5+1
    assume {:print "$at(10,12911,12912)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:255:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:255:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:255:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::initialize [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
procedure {:timeLimit 40} $1_Diem_initialize$verify(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t0: int;
    var $temp_0'address': int;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Roles_RoleId_$memory#443: $Memory $1_Roles_RoleId;
    var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#444: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#445: $Memory $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $1_DiemConfig_Configuration_$memory#446: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(10,12665,12912)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+247
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // @442 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+1
    assume {:print "$at(10,12665,12666)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @443 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+1
    $1_Roles_RoleId_$memory#443 := $1_Roles_RoleId_$memory;

    // @446 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+1
    $1_DiemConfig_Configuration_$memory#446 := $1_DiemConfig_Configuration_$memory;

    // @444 := save_mem(DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+1
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#444 := $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory;

    // @445 := save_mem(DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+1
    $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#445 := $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:248:5+1
    assume {:print "$track_local(13,16,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(10,12733,12764)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31

    // assume Identical($t3, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    assume ($t3 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    assume {:print "$at(10,12733,12764)"} true;
    assume {:print "$track_abort(13,16):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/Diem.move:251:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(10,12808,12851)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43

    // assume Identical($t5, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    assume ($t5 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
L6:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    assume {:print "$at(10,12808,12851)"} true;
    assume {:print "$track_abort(13,16):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43
L5:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:253:9+43

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // RegisteredCurrencies::initialize($t0) on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:254:9+44
    assume {:print "$at(10,12861,12905)"} true;
    call $1_RegisteredCurrencies_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(10,12861,12905)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(13,16):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:255:5+1
    assume {:print "$at(10,12911,12912)"} true;
L1:

    // assert Not(Not(DiemTimestamp::$is_genesis[@442]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:142:9+51
    assume {:print "$at(17,5802,5853)"} true;
    assert {:msg "assert_failed(17,5802,5853): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:70:9+108
    assume {:print "$at(8,2901,3009)"} true;
    assert {:msg "assert_failed(8,2901,3009): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(Not(DiemTimestamp::$is_genesis[@442]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:142:9+51
    assume {:print "$at(17,5802,5853)"} true;
    assert {:msg "assert_failed(17,5802,5853): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442);

    // assert Not(Not(exists[@443]<Roles::RoleId>($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:528:9+59
    assume {:print "$at(26,23704,23763)"} true;
    assert {:msg "assert_failed(26,23704,23763): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#443, $t1);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@443]<Roles::RoleId>($t1)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:529:9+87
    assume {:print "$at(26,23772,23859)"} true;
    assert {:msg "assert_failed(26,23772,23859): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#443, $t1)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:70:9+108
    assume {:print "$at(8,2901,3009)"} true;
    assert {:msg "assert_failed(8,2901,3009): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(DiemConfig::spec_is_published[@444]<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:260:9+38
    assume {:print "$at(13,11170,11208)"} true;
    assert {:msg "assert_failed(13,11170,11208): function does not abort under this condition"}
      !$1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#444);

    // assert Not(exists[@445]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:261:9+86
    assume {:print "$at(13,11217,11303)"} true;
    assert {:msg "assert_failed(13,11217,11303): function does not abort under this condition"}
      !$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#445, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@443]<Roles::RoleId>($t2))) at /home/ying/diem/language/diem-framework/modules/Roles.move:528:9+59
    assume {:print "$at(26,23704,23763)"} true;
    assert {:msg "assert_failed(26,23704,23763): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#443, $t2);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@443]<Roles::RoleId>($t2)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:529:9+87
    assume {:print "$at(26,23772,23859)"} true;
    assert {:msg "assert_failed(26,23772,23859): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#443, $t2)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:70:9+108
    assume {:print "$at(8,2901,3009)"} true;
    assert {:msg "assert_failed(8,2901,3009): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Eq<num>(Len<vector<u8>>(RegisteredCurrencies::get_currency_codes()), 0) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:47:9+39
    assume {:print "$at(25,1669,1708)"} true;
    assert {:msg "assert_failed(25,1669,1708): post-condition does not hold"}
      $IsEqual'num'(LenVec($1_RegisteredCurrencies_get_currency_codes($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory)), 0);

    // assert exists<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:267:9+84
    assume {:print "$at(13,11457,11541)"} true;
    assert {:msg "assert_failed(13,11457,11541): post-condition does not hold"}
      $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $1_Signer_spec_address_of($t0));

    // assert DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>() at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:145:9+36
    assume {:print "$at(13,5818,5854)"} true;
    assert {:msg "assert_failed(13,5818,5854): post-condition does not hold"}
      $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory);

    // assert Eq<RegisteredCurrencies::RegisteredCurrencies>(DiemConfig::$get<RegisteredCurrencies::RegisteredCurrencies>(), pack RegisteredCurrencies::RegisteredCurrencies(Vector::$empty<vector<u8>>())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:146:9+33
    assume {:print "$at(13,5863,5896)"} true;
    assert {:msg "assert_failed(13,5863,5896): post-condition does not hold"}
      $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory), $1_RegisteredCurrencies_RegisteredCurrencies($1_Vector_$empty'vec'u8''()));

    // assert Eq<bool>(DiemConfig::spec_has_config[@446](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:147:9+52
    assume {:print "$at(13,5905,5957)"} true;
    assert {:msg "assert_failed(13,5905,5957): post-condition does not hold"}
      $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#446), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // return () at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:147:9+52
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:255:5+1
    assume {:print "$at(10,12911,12912)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemTimestamp::$is_genesis[@442]()), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Not(DiemTimestamp::$is_genesis[@442]())), Not(exists[@443]<Roles::RoleId>($t1))), Neq<u64>(select Roles::RoleId.role_id(global[@443]<Roles::RoleId>($t1)), 0)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())), DiemConfig::spec_is_published[@444]<RegisteredCurrencies::RegisteredCurrencies>()), exists[@445]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0))), Not(exists[@443]<Roles::RoleId>($t2))), Neq<u64>(select Roles::RoleId.role_id(global[@443]<Roles::RoleId>($t2)), 0)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/Diem.move:256:5+262
    assume {:print "$at(10,12917,13179)"} true;
    assert {:msg "assert_failed(10,12917,13179): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442)) || !$ResourceExists($1_Roles_RoleId_$memory#443, $t1)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#443, $t1)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#444)) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#445, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#443, $t2)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#443, $t2)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemTimestamp::$is_genesis[@442]()), Eq(1, $t4)), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(2, $t4))), And(Not(DiemTimestamp::$is_genesis[@442]()), Eq(1, $t4))), And(Not(exists[@443]<Roles::RoleId>($t1)), Eq(5, $t4))), And(Neq<u64>(select Roles::RoleId.role_id(global[@443]<Roles::RoleId>($t1)), 0), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(2, $t4))), DiemConfig::spec_is_published[@444]<RegisteredCurrencies::RegisteredCurrencies>()), exists[@445]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0))), And(Not(exists[@443]<Roles::RoleId>($t2)), Eq(5, $t4))), And(Neq<u64>(select Roles::RoleId.role_id(global[@443]<Roles::RoleId>($t2)), 0), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:256:5+262
    assert {:msg "assert_failed(10,12917,13179): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442) && $IsEqual'u8'(1, $t4)) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#442) && $IsEqual'u8'(1, $t4))) || (!$ResourceExists($1_Roles_RoleId_$memory#443, $t1) && $IsEqual'u8'(5, $t4))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#443, $t1)), 0) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4))) || $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#444)) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#445, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory#443, $t2) && $IsEqual'u8'(5, $t4))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#443, $t2)), 0) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4)));

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:256:5+262
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::value<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+88
procedure {:inline 1} $1_Diem_value'#0'(_$t0: $1_Diem_Diem'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+1
    assume {:print "$at(10,54510,54511)"} true;
    assume {:print "$track_local(13,39,0):", $t0} $t0 == $t0;

    // $t1 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1118:9+10
    assume {:print "$at(10,54582,54592)"} true;
    $t1 := $value#$1_Diem_Diem'#0'($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1118:9+10
    assume {:print "$track_return(13,39,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1119:5+1
    assume {:print "$at(10,54597,54598)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1119:5+1
    $ret0 := $t1;
    return;

}

// fun Diem::value [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+88
procedure {:timeLimit 40} $1_Diem_value$verify(_$t0: $1_Diem_Diem'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#90: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#91: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#92: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#93: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#94: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+88
    assume {:print "$at(10,54510,54598)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // @92 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+1
    $1_Diem_BurnCapability'#0'_$memory#92 := $1_Diem_BurnCapability'#0'_$memory;

    // @90 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#90 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @91 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+1
    $1_Diem_MintCapability'#0'_$memory#91 := $1_Diem_MintCapability'#0'_$memory;

    // @94 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+1
    $1_Diem_Preburn'#0'_$memory#94 := $1_Diem_Preburn'#0'_$memory;

    // @93 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+1
    $1_Diem_PreburnQueue'#0'_$memory#93 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1117:5+1
    assume {:print "$track_local(13,39,0):", $t0} $t0 == $t0;

    // $t1 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1118:9+10
    assume {:print "$at(10,54582,54592)"} true;
    $t1 := $value#$1_Diem_Diem'#0'($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1118:9+10
    assume {:print "$track_return(13,39,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1119:5+1
    assume {:print "$at(10,54597,54598)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@90]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@90]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#90) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#90))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@91]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#91, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@91]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#91, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@90]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@90]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#90) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#90))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@92]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#92, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@92]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#92, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@90]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@90]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#90) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#90))));

    // assert Implies(Diem::spec_is_currency[@90]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@90]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#90) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#90))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@93]<Diem::PreburnQueue<#0>>(addr), exists[@94]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#93, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#94, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@93]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#93, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@90]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@90]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#90) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#90))));

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t1;
    return;

}

// fun Diem::currency_code [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:5+231
procedure {:timeLimit 40} $1_Diem_currency_code$verify() returns ($ret0: Vec (int))
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: Vec (int);
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_CurrencyInfo'#0'_$memory#223: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#224: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#225: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#226: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#227: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1440:17+6
    assume {:print "$at(10,68579,68585)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @225 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:5+1
    assume {:print "$at(10,68237,68238)"} true;
    $1_Diem_BurnCapability'#0'_$memory#225 := $1_Diem_BurnCapability'#0'_$memory;

    // @223 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#223 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @224 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:5+1
    $1_Diem_MintCapability'#0'_$memory#224 := $1_Diem_MintCapability'#0'_$memory;

    // @227 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:5+1
    $1_Diem_Preburn'#0'_$memory#227 := $1_Diem_Preburn'#0'_$memory;

    // @226 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1432:5+1
    $1_Diem_PreburnQueue'#0'_$memory#226 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1434:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,68329,68359)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1434:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1434:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1434:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1434:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1434:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1434:9+30
    assume {:print "$at(10,68329,68359)"} true;
    assume {:print "$track_abort(13,12):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1434:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1434:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1434:9+30

    // $t2 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1435:49+38
    assume {:print "$at(10,68409,68447)"} true;
    call $t2 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,68409,68447)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,12):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1435:11+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,68371,68384)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,12):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.currency_code($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1435:10+92
    $t4 := $currency_code#$1_Diem_CurrencyInfo'#0'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1435:9+93
    assume {:print "$track_return(13,12,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1436:5+1
    assume {:print "$at(10,68467,68468)"} true;
L1:

    // assert Not(Not(Diem::spec_is_currency[@223]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223);

    // assert Eq<vector<u8>>($t4, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1440:9+49
    assume {:print "$at(10,68571,68620)"} true;
    assert {:msg "assert_failed(10,68571,68620): post-condition does not hold"}
      $IsEqual'vec'u8''($t4, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert Implies(Diem::spec_is_currency[@223]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@223]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#223))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@224]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#224, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@224]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#224, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@223]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@223]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#223))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@225]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#225, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@225]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#225, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@223]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@223]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#223))));

    // assert Implies(Diem::spec_is_currency[@223]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@223]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#223))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@226]<Diem::PreburnQueue<#0>>(addr), exists[@227]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#226, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#227, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@226]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#226, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@223]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@223]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#223))));

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1436:5+1
    assume {:print "$at(10,68467,68468)"} true;
L2:

    // assert Not(Diem::spec_is_currency[@223]<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1437:5+153
    assume {:print "$at(10,68473,68626)"} true;
    assert {:msg "assert_failed(10,68473,68626): abort not covered by any of the `aborts_if` clauses"}
      !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223);

    // assert And(Not(Diem::spec_is_currency[@223]<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1437:5+153
    assert {:msg "assert_failed(10,68473,68626): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#223) && $IsEqual'u8'(5, $t1));

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1437:5+153
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::add_preburn_to_queue [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:708:5+662
procedure {:timeLimit 40} $1_Diem_add_preburn_to_queue$verify(_$t0: int, _$t1: $1_Diem_PreburnWithMetadata'#0') returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'));
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_Diem_Preburn'#0';
    var $t19: $1_Diem_Diem'#0';
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: $Mutation ($1_Diem_PreburnQueue'#0');
    var $t26: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'));
    var $t27: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t28: int;
    var $t29: int;
    var $t30: bool;
    var $t31: int;
    var $t32: int;
    var $t33: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t0: int;
    var $t1: $1_Diem_PreburnWithMetadata'#0';
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_PreburnWithMetadata'#0'': $1_Diem_PreburnWithMetadata'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''': Vec ($1_Diem_PreburnWithMetadata'#0');
    var $1_Diem_PreburnQueue'#0'_$memory#163: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#164: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#165: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#166: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_Preburn'#0'_$memory#167: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t25));
    assume IsEmptyVec(p#$Mutation($t26));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:708:5+662
    assume {:print "$at(10,34161,34823)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:708:5+662
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t1);

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:708:5+662
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+52
    assume {:print "$at(10,34887,34939)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t10))) at /home/ying/diem/language/diem-framework/modules/Diem.move:723:9+69
    assume {:print "$at(10,34948,35017)"} true;
    assume ($t11 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t10)));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:734:9+52
    assume {:print "$at(10,35589,35641)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume CanModify<Diem::PreburnQueue<#0>>($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:725:9+54
    assume {:print "$at(10,35114,35168)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t10];

    // @166 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:725:9+54
    $1_Diem_BurnCapability'#0'_$memory#166 := $1_Diem_BurnCapability'#0'_$memory;

    // @164 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:725:9+54
    $1_Diem_CurrencyInfo'#0'_$memory#164 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @165 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:725:9+54
    $1_Diem_MintCapability'#0'_$memory#165 := $1_Diem_MintCapability'#0'_$memory;

    // @167 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:725:9+54
    $1_Diem_Preburn'#0'_$memory#167 := $1_Diem_Preburn'#0'_$memory;

    // @163 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:725:9+54
    $1_Diem_PreburnQueue'#0'_$memory#163 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:708:5+1
    assume {:print "$at(10,34161,34162)"} true;
    assume {:print "$track_local(13,0,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:708:5+1
    assume {:print "$track_local(13,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:710:28+27
    // >> opaque call: $t10 := Signer::address_of($t0)
    assume {:print "$at(10,34316,34343)"} true;

    // $t13 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:28+27

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:28+27
    assume $IsValid'address'($t13);

    // assume Eq<address>($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:28+27
    assume $IsEqual'address'($t13, $1_Signer_spec_address_of($t0));

    // $t13 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:28+27

    // trace_local[account_addr]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:710:13+12
    assume {:print "$track_local(13,0,2):", $t13} $t13 == $t13;

    // $t14 := exists<Diem::PreburnQueue<#0>>($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:711:16+6
    assume {:print "$at(10,34360,34366)"} true;
    $t14 := $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t13);

    // $t15 := 11 at /home/ying/diem/language/diem-framework/modules/Diem.move:711:84+14
    $t15 := 11;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:711:62+37
    // >> opaque call: $t13 := Errors::invalid_state($t12)

    // $t16 := opaque begin: Errors::invalid_state($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:711:62+37

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:711:62+37
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:711:62+37
    assume $IsEqual'u64'($t16, 1);

    // $t16 := opaque end: Errors::invalid_state($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:711:62+37

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:711:9+91
    assume {:print "$track_local(13,0,5):", $t16} $t16 == $t16;

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:711:9+91
    assume {:print "$track_local(13,0,4):", $t14} $t14 == $t14;

    // if ($t14) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:711:9+91
    if ($t14) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:711:9+91
L1:

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:711:9+91
    assume {:print "$at(10,34353,34444)"} true;
    assume {:print "$track_abort(13,0):", $t16} $t16 == $t16;

    // $t17 := move($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:711:9+91
    $t17 := $t16;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:711:9+91
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:712:23+7
    assume {:print "$at(10,34468,34475)"} true;
L0:

    // $t18 := get_field<Diem::PreburnWithMetadata<#0>>.preburn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:23+15
    $t18 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t1);

    // $t19 := get_field<Diem::Preburn<#0>>.to_burn($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:22+24
    $t19 := $to_burn#$1_Diem_Preburn'#0'($t18);

    // $t20 := Diem::value<#0>($t19) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:712:16+31
    call $t20 := $1_Diem_value'#0'($t19);
    if ($abort_flag) {
        assume {:print "$at(10,34461,34492)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t21 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:712:50+1
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // $t22 := >($t20, $t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:48+1
    call $t22 := $Gt($t20, $t21);

    // $t23 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:712:78+8
    $t23 := 2;
    assume $IsValid'u64'($t23);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:712:53+34
    // >> opaque call: $t20 := Errors::invalid_argument($t19)

    // $t24 := opaque begin: Errors::invalid_argument($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:53+34

    // assume WellFormed($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:53+34
    assume $IsValid'u64'($t24);

    // assume Eq<u64>($t24, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:53+34
    assume $IsEqual'u64'($t24, 7);

    // $t24 := opaque end: Errors::invalid_argument($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:53+34

    // trace_local[tmp#$7]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+79
    assume {:print "$track_local(13,0,7):", $t24} $t24 == $t24;

    // trace_local[tmp#$6]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+79
    assume {:print "$track_local(13,0,6):", $t22} $t22 == $t22;

    // if ($t22) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+79
    if ($t22) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+79
L3:

    // trace_abort($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+79
    assume {:print "$at(10,34454,34533)"} true;
    assume {:print "$track_abort(13,0):", $t24} $t24 == $t24;

    // $t17 := move($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+79
    $t17 := $t24;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:712:9+79
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:713:71+12
    assume {:print "$at(10,34605,34617)"} true;
L2:

    // assert CanModify<Diem::PreburnQueue<#0>>($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:713:29+17
    assert {:msg "assert_failed(10,34563,34580): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t13];

    // $t25 := borrow_global<Diem::PreburnQueue<#0>>($t13) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:713:29+17
    if (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t13)) {
        call $ExecFailureAbort();
    } else {
        $t25 := $Mutation($Global($t13), EmptyVec(), $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t13));
    }
    if ($abort_flag) {
        assume {:print "$at(10,34563,34580)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t26 := borrow_field<Diem::PreburnQueue<#0>>.preburns($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:713:24+69
    $t26 := $ChildMutation($t25, 0, $preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25)));

    // trace_local[preburns]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:713:13+8
    $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''' := $Dereference($t26);
    assume {:print "$track_local(13,0,3):", $temp_0'vec'$1_Diem_PreburnWithMetadata'#0'''} $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''' == $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''';

    // $t27 := read_ref($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:715:28+8
    assume {:print "$at(10,34672,34680)"} true;
    $t27 := $Dereference($t26);

    // $t28 := Vector::length<Diem::PreburnWithMetadata<#0>>($t27) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:715:13+24
    call $t28 := $1_Vector_length'$1_Diem_PreburnWithMetadata'#0''($t27);
    if ($abort_flag) {
        assume {:print "$at(10,34657,34681)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t29 := 256 at /home/ying/diem/language/diem-framework/modules/Diem.move:715:40+24
    $t29 := 256;
    assume $IsValid'u64'($t29);

    // $t30 := <($t28, $t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:715:38+1
    call $t30 := $Lt($t28, $t29);

    // $t31 := 11 at /home/ying/diem/language/diem-framework/modules/Diem.move:716:36+14
    assume {:print "$at(10,34745,34759)"} true;
    $t31 := 11;
    assume $IsValid'u64'($t31);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:716:13+38
    // >> opaque call: $t28 := Errors::limit_exceeded($t27)

    // $t32 := opaque begin: Errors::limit_exceeded($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:716:13+38

    // assume WellFormed($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:716:13+38
    assume $IsValid'u64'($t32);

    // assume Eq<u64>($t32, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:716:13+38
    assume $IsEqual'u64'($t32, 8);

    // $t32 := opaque end: Errors::limit_exceeded($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:716:13+38

    // trace_local[tmp#$9]($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:714:9+133
    assume {:print "$at(10,34637,34770)"} true;
    assume {:print "$track_local(13,0,9):", $t32} $t32 == $t32;

    // trace_local[tmp#$8]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:714:9+133
    assume {:print "$track_local(13,0,8):", $t30} $t30 == $t30;

    // if ($t30) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:714:9+133
    if ($t30) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:714:9+133
L5:

    // assert Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t25)), 256) at /home/ying/diem/language/diem-framework/modules/Diem.move:201:9+52
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:201:9+52
    assume {:print "$at(10,10315,10367)"} true;
    assert {:msg "assert_failed(10,10315,10367): data invariant does not hold"}
      (LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25))) <= 256);

    // assert forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t25))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($t25), i)))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:205:9+78
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:205:9+78
    assume {:print "$at(10,10543,10621)"} true;
    assert {:msg "assert_failed(10,10543,10621): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25)))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25)), i)))) > 0)))));

    // destroy($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:714:9+133
    assume {:print "$at(10,34637,34770)"} true;

    // trace_abort($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:714:9+133
    assume {:print "$at(10,34637,34770)"} true;
    assume {:print "$track_abort(13,0):", $t32} $t32 == $t32;

    // $t17 := move($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:714:9+133
    $t17 := $t32;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:714:9+133
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:718:27+8
    assume {:print "$at(10,34798,34806)"} true;
L4:

    // Vector::push_back<Diem::PreburnWithMetadata<#0>>($t26, $t1) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:718:9+36
    call $t26 := $1_Vector_push_back'$1_Diem_PreburnWithMetadata'#0''($t26, $t1);
    if ($abort_flag) {
        assume {:print "$at(10,34780,34816)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // write_back[Reference($t25).preburns]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:718:9+36
    $t25 := $UpdateMutation($t25, $Update'$1_Diem_PreburnQueue'#0''_preburns($Dereference($t25), $Dereference($t26)));

    // assert Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t25)), 256) at /home/ying/diem/language/diem-framework/modules/Diem.move:201:9+52
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:201:9+52
    assume {:print "$at(10,10315,10367)"} true;
    assert {:msg "assert_failed(10,10315,10367): data invariant does not hold"}
      (LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25))) <= 256);

    // assert forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t25))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($t25), i)))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:205:9+78
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:205:9+78
    assume {:print "$at(10,10543,10621)"} true;
    assert {:msg "assert_failed(10,10543,10621): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25)))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t25)), i)))) > 0)))));

    // write_back[Diem::PreburnQueue<#0>@]($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:718:9+36
    assume {:print "$at(10,34780,34816)"} true;
    $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $GlobalLocationAddress($t25),
        $Dereference($t25));

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:719:5+1
    assume {:print "$at(10,34822,34823)"} true;
L6:

    // assume Identical($t33, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t10))) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79
    assume {:print "$at(10,35026,35105)"} true;
    assume ($t33 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t10)));

    // assert Not(Not(exists[@163]<Diem::PreburnQueue<#0>>($t10))) at /home/ying/diem/language/diem-framework/modules/Diem.move:726:9+83
    assume {:print "$at(10,35177,35260)"} true;
    assert {:msg "assert_failed(10,35177,35260): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, $t10);

    // assert Not(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t1))), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:735:9+75
    assume {:print "$at(10,35650,35725)"} true;
    assert {:msg "assert_failed(10,35650,35725): function does not abort under this condition"}
      !$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t1))), 0);

    // assert Not(And(exists[@163]<Diem::PreburnQueue<#0>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@163]<Diem::PreburnQueue<#0>>($t12))), 256))) at /home/ying/diem/language/diem-framework/modules/Diem.move:736:9+208
    assume {:print "$at(10,35734,35942)"} true;
    assert {:msg "assert_failed(10,35734,35942): function does not abort under this condition"}
      !($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#163, $t12))) >= 256));

    // assert exists<Diem::PreburnQueue<#0>>($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:728:9+53
    assume {:print "$at(10,35322,35375)"} true;
    assert {:msg "assert_failed(10,35322,35375): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t10);

    // assert Vector::eq_push_back<Diem::PreburnWithMetadata<#0>>($t33, $t11, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:729:9+63
    assume {:print "$at(10,35384,35447)"} true;
    assert {:msg "assert_failed(10,35384,35447): post-condition does not hold"}
      $1_Vector_eq_push_back'$1_Diem_PreburnWithMetadata'#0''($t33, $t11, $t1);

    // assert Implies(Diem::spec_is_currency[@164]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@164]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#164) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#164))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@165]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#165, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@165]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#165, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@164]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@164]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#164) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#164))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@166]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#166, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@166]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#166, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@164]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@164]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#164) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#164))));

    // assert Implies(Diem::spec_is_currency[@164]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@164]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#164) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#164))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@163]<Diem::PreburnQueue<#0>>(addr), exists[@167]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#167, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@163]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@164]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@164]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#164) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#164))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:719:5+1
    assume {:print "$at(10,34822,34823)"} true;
L7:

    // assert Or(Or(Not(exists[@163]<Diem::PreburnQueue<#0>>($t10)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t1))), 0)), And(exists[@163]<Diem::PreburnQueue<#0>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@163]<Diem::PreburnQueue<#0>>($t12))), 256))) at /home/ying/diem/language/diem-framework/modules/Diem.move:720:5+625
    assume {:print "$at(10,34828,35453)"} true;
    assert {:msg "assert_failed(10,34828,35453): abort not covered by any of the `aborts_if` clauses"}
      ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, $t10) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t1))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#163, $t12))) >= 256)));

    // assert Or(Or(And(Not(exists[@163]<Diem::PreburnQueue<#0>>($t10)), Eq(1, $t17)), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t1))), 0), Eq(7, $t17))), And(And(exists[@163]<Diem::PreburnQueue<#0>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@163]<Diem::PreburnQueue<#0>>($t12))), 256)), Eq(8, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:720:5+625
    assert {:msg "assert_failed(10,34828,35453): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, $t10) && $IsEqual'u8'(1, $t17)) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t1))), 0) && $IsEqual'u8'(7, $t17))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#163, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#163, $t12))) >= 256)) && $IsEqual'u8'(8, $t17)));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:720:5+625
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun Diem::approx_xdx_for_coin [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1384:5+210
procedure {:timeLimit 40} $1_Diem_approx_xdx_for_coin$verify(_$t0: $1_Diem_Diem'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: $1_FixedPoint32_FixedPoint32;
    var $t5: int;
    var $t6: bool;
    var $t0: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#349: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#350: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#351: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#352: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#353: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1384:5+210
    assume {:print "$at(10,66178,66388)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1384:5+210
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @351 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1384:5+1
    $1_Diem_BurnCapability'#0'_$memory#351 := $1_Diem_BurnCapability'#0'_$memory;

    // @349 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1384:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#349 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @350 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1384:5+1
    $1_Diem_MintCapability'#0'_$memory#350 := $1_Diem_MintCapability'#0'_$memory;

    // @353 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1384:5+1
    $1_Diem_Preburn'#0'_$memory#353 := $1_Diem_Preburn'#0'_$memory;

    // @352 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1384:5+1
    $1_Diem_PreburnQueue'#0'_$memory#352 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1384:5+1
    assume {:print "$track_local(13,1,0):", $t0} $t0 == $t0;

    // $t2 := Diem::value<#0>($t0) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1386:26+11
    assume {:print "$at(10,66315,66326)"} true;
    call $t2 := $1_Diem_value'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,66315,66326)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(13,1):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[from_value]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1386:13+10
    assume {:print "$track_local(13,1,1):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46
    // >> opaque call: $t3 := Diem::approx_xdx_for_value<#0>($t2)
    assume {:print "$at(10,66336,66382)"} true;

    // assume Identical($t4, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1377:9+59
    assume {:print "$at(10,65833,65892)"} true;
    assume ($t4 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t5 := opaque begin: Diem::approx_xdx_for_value<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46
    assume {:print "$at(10,66336,66382)"} true;

    // assume Identical($t6, Or(Not(Diem::spec_is_currency<#0>()), Gt(FixedPoint32::spec_multiply_u64($t2, $t4), 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46
    assume ($t6 == (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) || ($1_FixedPoint32_spec_multiply_u64($t2, $t4) > 18446744073709551615)));

    // if ($t6) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46
    if ($t6) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46
L4:

    // assume Or(And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t3)), And(Gt(FixedPoint32::spec_multiply_u64($t2, $t4), 18446744073709551615), Eq(8, $t3))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46
    assume ((!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t3)) || (($1_FixedPoint32_spec_multiply_u64($t2, $t4) > 18446744073709551615) && $IsEqual'u8'(8, $t3)));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46
    assume {:print "$at(10,66336,66382)"} true;
    assume {:print "$track_abort(13,1):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46
L3:

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, Diem::spec_approx_xdx_for_value<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46
    assume $IsEqual'u64'($t5, $1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory, $t2));

    // $t5 := opaque end: Diem::approx_xdx_for_value<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46

    // trace_return[0]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1387:9+46
    assume {:print "$track_return(13,1,0):", $t5} $t5 == $t5;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1388:5+1
    assume {:print "$at(10,66387,66388)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@349]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@349]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#349) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#349))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@350]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#350, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@350]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#350, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@349]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@349]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#349) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#349))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@351]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#351, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@351]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#351, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@349]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@349]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#349) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#349))));

    // assert Implies(Diem::spec_is_currency[@349]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@349]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#349) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#349))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@352]<Diem::PreburnQueue<#0>>(addr), exists[@353]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#352, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#353, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@352]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#352, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@349]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@349]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#349) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#349))));

    // return $t5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t5;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1388:5+1
    assume {:print "$at(10,66387,66388)"} true;
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1388:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Diem::approx_xdx_for_value [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:5+241
procedure {:timeLimit 40} $1_Diem_approx_xdx_for_value$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $t2: $1_FixedPoint32_FixedPoint32;
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: $1_FixedPoint32_FixedPoint32;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t0: int;
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#242: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#243: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#244: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#245: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#246: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1372:17+6
    assume {:print "$at(10,65631,65637)"} true;
    assume $IsValid'u64'($t0);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1372:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t2, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1377:9+59
    assume {:print "$at(10,65833,65892)"} true;
    assume ($t2 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // @244 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:5+1
    assume {:print "$at(10,65261,65262)"} true;
    $1_Diem_BurnCapability'#0'_$memory#244 := $1_Diem_BurnCapability'#0'_$memory;

    // @242 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#242 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @243 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:5+1
    $1_Diem_MintCapability'#0'_$memory#243 := $1_Diem_MintCapability'#0'_$memory;

    // @246 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:5+1
    $1_Diem_Preburn'#0'_$memory#246 := $1_Diem_Preburn'#0'_$memory;

    // @245 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:5+1
    $1_Diem_PreburnQueue'#0'_$memory#245 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[from_value]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1364:5+1
    assume {:print "$track_local(13,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:33+33
    // >> opaque call: $t2 := Diem::xdx_exchange_rate<#0>()
    assume {:print "$at(10,65396,65429)"} true;

    // assume Identical($t3, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1501:9+82
    assume {:print "$at(10,71351,71433)"} true;
    assume ($t3 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // $t4 := opaque begin: Diem::xdx_exchange_rate<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:33+33
    assume {:print "$at(10,65396,65429)"} true;

    // assume Identical($t5, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:33+33
    assume ($t5 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:33+33
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:33+33
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:33+33
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:33+33
    assume {:print "$at(10,65396,65429)"} true;
    assume {:print "$track_abort(13,2):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:33+33
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:33+33
L3:

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:33+33
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t4);

    // assume Eq<FixedPoint32::FixedPoint32>($t4, select Diem::CurrencyInfo.to_xdx_exchange_rate($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:33+33
    assume $IsEqual'$1_FixedPoint32_FixedPoint32'($t4, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($t3));

    // $t4 := opaque end: Diem::xdx_exchange_rate<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:33+33

    // trace_local[xdx_exchange_rate]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1366:13+17
    assume {:print "$track_local(13,2,1):", $t4} $t4 == $t4;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57
    // >> opaque call: $t3 := FixedPoint32::multiply_u64($t0, $t2)
    assume {:print "$at(10,65439,65496)"} true;

    // $t7 := opaque begin: FixedPoint32::multiply_u64($t0, $t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57

    // assume Identical($t8, Gt(FixedPoint32::spec_multiply_u64($t0, $t4), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57
    assume ($t8 == ($1_FixedPoint32_spec_multiply_u64($t0, $t4) > 18446744073709551615));

    // if ($t8) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57
    if ($t8) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57
L6:

    // assume And(Gt(FixedPoint32::spec_multiply_u64($t0, $t4), 18446744073709551615), Eq(8, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57
    assume (($1_FixedPoint32_spec_multiply_u64($t0, $t4) > 18446744073709551615) && $IsEqual'u8'(8, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57
    assume {:print "$at(10,65439,65496)"} true;
    assume {:print "$track_abort(13,2):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57
L5:

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, FixedPoint32::spec_multiply_u64($t0, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57
    assume $IsEqual'u64'($t7, $1_FixedPoint32_spec_multiply_u64($t0, $t4));

    // $t7 := opaque end: FixedPoint32::multiply_u64($t0, $t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1367:9+57
    assume {:print "$track_return(13,2,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1368:5+1
    assume {:print "$at(10,65501,65502)"} true;
L1:

    // assert Not(Not(Diem::spec_is_currency[@242]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242);

    // assert Not(Gt(FixedPoint32::spec_multiply_u64[]($t0, $t2), 18446744073709551615)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:77:9+83
    assume {:print "$at(42,3513,3596)"} true;
    assert {:msg "assert_failed(42,3513,3596): function does not abort under this condition"}
      !($1_FixedPoint32_spec_multiply_u64($t0, $t2) > 18446744073709551615);

    // assert Eq<u64>($t7, Diem::spec_approx_xdx_for_value<#0>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1372:9+70
    assume {:print "$at(10,65623,65693)"} true;
    assert {:msg "assert_failed(10,65623,65693): post-condition does not hold"}
      $IsEqual'u64'($t7, $1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory, $t0));

    // assert Implies(Diem::spec_is_currency[@242]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@242]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#242))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@243]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#243, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@243]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#243, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@242]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@242]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#242))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@244]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#244, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@244]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#244, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@242]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@242]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#242))));

    // assert Implies(Diem::spec_is_currency[@242]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@242]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#242))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@245]<Diem::PreburnQueue<#0>>(addr), exists[@246]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#245, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#246, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@245]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#245, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@242]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@242]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#242))));

    // return $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1368:5+1
    assume {:print "$at(10,65501,65502)"} true;
L2:

    // assert Or(Not(Diem::spec_is_currency[@242]<#0>()), Gt(FixedPoint32::spec_multiply_u64[]($t0, $t2), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1369:5+192
    assume {:print "$at(10,65507,65699)"} true;
    assert {:msg "assert_failed(10,65507,65699): abort not covered by any of the `aborts_if` clauses"}
      (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) || ($1_FixedPoint32_spec_multiply_u64($t0, $t2) > 18446744073709551615));

    // assert Or(And(Not(Diem::spec_is_currency[@242]<#0>()), Eq(5, $t6)), And(Gt(FixedPoint32::spec_multiply_u64[]($t0, $t2), 18446744073709551615), Eq(8, $t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1369:5+192
    assert {:msg "assert_failed(10,65507,65699): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#242) && $IsEqual'u8'(5, $t6)) || (($1_FixedPoint32_spec_multiply_u64($t0, $t2) > 18446744073709551615) && $IsEqual'u8'(8, $t6)));

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1369:5+192
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Diem::assert_is_SCS_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:5+206
procedure {:timeLimit 40} $1_Diem_assert_is_SCS_currency$verify() returns ()
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#231: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#232: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#233: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#234: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#235: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:5+206
    assume {:print "$at(10,73699,73905)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @233 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:5+1
    $1_Diem_BurnCapability'#0'_$memory#233 := $1_Diem_BurnCapability'#0'_$memory;

    // @231 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#231 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @232 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:5+1
    $1_Diem_MintCapability'#0'_$memory#232 := $1_Diem_MintCapability'#0'_$memory;

    // @235 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:5+1
    $1_Diem_Preburn'#0'_$memory#235 := $1_Diem_Preburn'#0'_$memory;

    // @234 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1554:5+1
    $1_Diem_PreburnQueue'#0'_$memory#234 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,73784,73814)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:9+30

    // assume Identical($t2, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:9+30
    assume ($t2 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t2) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:9+30
    if ($t2) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:9+30
L5:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:9+30
    assume {:print "$at(10,73784,73814)"} true;
    assume {:print "$track_abort(13,3):", $t3} $t3 == $t3;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:9+30
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:9+30
L4:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1555:9+30

    // $t4 := Diem::is_SCS_currency<#0>() on_abort goto L3 with $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:16+27
    assume {:print "$at(10,73831,73858)"} true;
    call $t4 := $1_Diem_is_SCS_currency'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,73831,73858)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(13,3):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t5 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:67+14
    $t5 := 1;
    assume $IsValid'u64'($t5);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:45+37
    // >> opaque call: $t4 := Errors::invalid_state($t3)

    // $t6 := opaque begin: Errors::invalid_state($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:45+37

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:45+37
    assume $IsValid'u64'($t6);

    // assume Eq<u64>($t6, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:45+37
    assume $IsEqual'u64'($t6, 1);

    // $t6 := opaque end: Errors::invalid_state($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:45+37

    // trace_local[tmp#$1]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:9+74
    assume {:print "$track_local(13,3,1):", $t6} $t6 == $t6;

    // trace_local[tmp#$0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:9+74
    assume {:print "$track_local(13,3,0):", $t4} $t4 == $t4;

    // if ($t4) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:9+74
    if ($t4) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:9+74
L1:

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:9+74
    assume {:print "$at(10,73824,73898)"} true;
    assume {:print "$track_abort(13,3):", $t6} $t6 == $t6;

    // $t3 := move($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:9+74
    $t3 := $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:9+74
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1556:83+1
L0:

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1557:5+1
    assume {:print "$at(10,73904,73905)"} true;
L2:

    // assert Implies(Diem::spec_is_currency[@231]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@231]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#231) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#231))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@232]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#232, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@232]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#232, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@231]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@231]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#231) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#231))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@233]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#233, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@233]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#233, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@231]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@231]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#231) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#231))));

    // assert Implies(Diem::spec_is_currency[@231]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@231]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#231) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#231))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@234]<Diem::PreburnQueue<#0>>(addr), exists[@235]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#234, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#235, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@234]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#234, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@231]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@231]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#231) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#231))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1557:5+1
    assume {:print "$at(10,73904,73905)"} true;
L3:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1557:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Diem::assert_is_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1543:5+136
procedure {:timeLimit 40} $1_Diem_assert_is_currency$verify() returns ()
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#151: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#152: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#153: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#154: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#155: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1543:5+136
    assume {:print "$at(10,73323,73459)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @153 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1543:5+1
    $1_Diem_BurnCapability'#0'_$memory#153 := $1_Diem_BurnCapability'#0'_$memory;

    // @151 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1543:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#151 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @152 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1543:5+1
    $1_Diem_MintCapability'#0'_$memory#152 := $1_Diem_MintCapability'#0'_$memory;

    // @155 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1543:5+1
    $1_Diem_Preburn'#0'_$memory#155 := $1_Diem_Preburn'#0'_$memory;

    // @154 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1543:5+1
    $1_Diem_PreburnQueue'#0'_$memory#154 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t2 := Diem::is_currency<#0>() on_abort goto L3 with $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:16+23
    assume {:print "$at(10,73389,73412)"} true;
    call $t2 := $1_Diem_is_currency'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,73389,73412)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(13,4):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:63+14
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:41+37
    // >> opaque call: $t4 := Errors::not_published($t3)

    // $t5 := opaque begin: Errors::not_published($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:41+37

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:41+37
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, 5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:41+37
    assume $IsEqual'u64'($t5, 5);

    // $t5 := opaque end: Errors::not_published($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:41+37

    // trace_local[tmp#$1]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:9+70
    assume {:print "$track_local(13,4,1):", $t5} $t5 == $t5;

    // trace_local[tmp#$0]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:9+70
    assume {:print "$track_local(13,4,0):", $t2} $t2 == $t2;

    // if ($t2) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:9+70
    if ($t2) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:9+70
L1:

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:9+70
    assume {:print "$at(10,73382,73452)"} true;
    assume {:print "$track_abort(13,4):", $t5} $t5 == $t5;

    // $t3 := move($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:9+70
    $t3 := $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:9+70
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1544:79+1
L0:

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1545:5+1
    assume {:print "$at(10,73458,73459)"} true;
L2:

    // assert Not(Not(Diem::spec_is_currency[@151]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#151);

    // assert Implies(Diem::spec_is_currency[@151]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@151]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#151) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#151))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@152]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#152, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@152]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#152, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@151]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@151]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#151) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#151))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@153]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#153, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@153]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#153, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@151]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@151]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#151) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#151))));

    // assert Implies(Diem::spec_is_currency[@151]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@151]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#151) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#151))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@154]<Diem::PreburnQueue<#0>>(addr), exists[@155]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#154, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#155, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@154]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#154, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@151]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@151]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#151) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#151))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1545:5+1
    assume {:print "$at(10,73458,73459)"} true;
L3:

    // assert Not(Diem::spec_is_currency[@151]<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1546:5+100
    assume {:print "$at(10,73464,73564)"} true;
    assert {:msg "assert_failed(10,73464,73564): abort not covered by any of the `aborts_if` clauses"}
      !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#151);

    // assert And(Not(Diem::spec_is_currency[@151]<#0>()), Eq(5, $t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1546:5+100
    assert {:msg "assert_failed(10,73464,73564): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#151) && $IsEqual'u8'(5, $t3));

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1546:5+100
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Diem::burn [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+478
procedure {:timeLimit 40} $1_Diem_burn$verify(_$t0: int, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: $1_Diem_Preburn'#0';
    var $t7: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t8: int;
    var $t9: $1_Diem_CurrencyInfo'#0';
    var $t10: $1_Diem_Preburn'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_BurnCapability'#0';
    var $t20: $1_Diem_CurrencyInfo'#0';
    var $t21: Vec (int);
    var $t22: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t23: $1_Diem_Preburn'#0';
    var $t24: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t25: int;
    var $t26: $1_Diem_CurrencyInfo'#0';
    var $t27: $1_Diem_Preburn'#0';
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_BurnCapability'#0'_$memory#401: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#402: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#403: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#404: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_Preburn'#0'_$memory#405: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+478
    assume {:print "$at(10,16047,16525)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+478
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+478
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+478
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+478
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+478
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t6, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:893:9+50
    assume {:print "$at(10,43710,43760)"} true;
    assume ($t6 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t7, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t7 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t8, select Diem::Diem.value(select Diem::Preburn.to_burn($t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:949:9+36
    assume {:print "$at(10,46495,46531)"} true;
    assume ($t8 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t6)));

    // assume Identical($t9, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:9+42
    assume {:print "$at(10,46540,46582)"} true;
    assume ($t9 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t10, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:901:9+50
    assume {:print "$at(10,44065,44115)"} true;
    assume ($t10 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+42
    assume {:print "$at(10,47332,47374)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+51
    assume {:print "$at(10,47383,47434)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:967:9+30
    assume {:print "$at(10,47443,47473)"} true;
    assume ($t13 == $burn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // @401 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$at(10,16047,16048)"} true;
    $1_Diem_BurnCapability'#0'_$memory#401 := $1_Diem_BurnCapability'#0'_$memory;

    // @403 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#403 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @404 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    $1_Diem_MintCapability'#0'_$memory#404 := $1_Diem_MintCapability'#0'_$memory;

    // @405 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    $1_Diem_Preburn'#0'_$memory#405 := $1_Diem_Preburn'#0'_$memory;

    // @402 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    $1_Diem_PreburnQueue'#0'_$memory#402 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$track_local(13,5,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$track_local(13,5,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$track_local(13,5,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27
    // >> opaque call: $t6 := Signer::address_of($t0)
    assume {:print "$at(10,16241,16268)"} true;

    // $t14 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27
    assume $IsValid'address'($t14);

    // assume Eq<address>($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27
    assume $IsEqual'address'($t14, $1_Signer_spec_address_of($t0));

    // $t14 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27

    // trace_local[addr]($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:13+4
    assume {:print "$track_local(13,5,3):", $t14} $t14 == $t14;

    // $t15 := exists<Diem::BurnCapability<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:16+6
    assume {:print "$at(10,16285,16291)"} true;
    $t15 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t14);

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:84+16
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45
    // >> opaque call: $t9 := Errors::requires_capability($t8)

    // $t17 := opaque begin: Errors::requires_capability($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45
    assume $IsValid'u64'($t17);

    // assume Eq<u64>($t17, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45
    assume $IsEqual'u64'($t17, 4);

    // $t17 := opaque end: Errors::requires_capability($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45

    // trace_local[tmp#$5]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    assume {:print "$track_local(13,5,5):", $t17} $t17 == $t17;

    // trace_local[tmp#$4]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    assume {:print "$track_local(13,5,4):", $t15} $t15 == $t15;

    // if ($t15) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    if ($t15) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
L1:

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    assume {:print "$at(10,16278,16371)"} true;
    assume {:print "$track_abort(13,5):", $t17} $t17 == $t17;

    // $t18 := move($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    $t18 := $t17;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:329:13+15
    assume {:print "$at(10,16415,16430)"} true;
L0:

    // $t19 := get_global<Diem::BurnCapability<#0>>($t14) on_abort goto L3 with $t18 at /home/ying/diem/language/diem-framework/modules/Diem.move:330:13+13
    assume {:print "$at(10,16444,16457)"} true;
    if (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t14)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(10,16444,16457)"} true;
        $t18 := $abort_code;
        assume {:print "$track_abort(13,5):", $t18} $t18 == $t18;
        goto L3;
    }

    // assume Identical($t20, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+42
    assume {:print "$at(10,47332,47374)"} true;
    assume ($t20 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+51
    assume {:print "$at(10,47383,47434)"} true;
    assume ($t21 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t22, select Diem::CurrencyInfo.burn_events($t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:967:9+30
    assume {:print "$at(10,47443,47473)"} true;
    assume ($t22 == $burn_events#$1_Diem_CurrencyInfo'#0'($t20));

    // assume Identical($t23, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:893:9+50
    assume {:print "$at(10,43710,43760)"} true;
    assume ($t23 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t24, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t24 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t25, select Diem::Diem.value(select Diem::Preburn.to_burn($t23))) at /home/ying/diem/language/diem-framework/modules/Diem.move:949:9+36
    assume {:print "$at(10,46495,46531)"} true;
    assume ($t25 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t23)));

    // assume Identical($t26, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:9+42
    assume {:print "$at(10,46540,46582)"} true;
    assume ($t26 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t27, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:901:9+50
    assume {:print "$at(10,44065,44115)"} true;
    assume ($t27 == $1_Diem_spec_make_preburn'#0'($t2));

    // Diem::burn_with_capability<#0>($t1, $t19, $t2) on_abort goto L3 with $t18 at /home/ying/diem/language/diem-framework/modules/Diem.move:328:9+138
    assume {:print "$at(10,16381,16519)"} true;
    call $1_Diem_burn_with_capability'#0'($t1, $t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,16381,16519)"} true;
        $t18 := $abort_code;
        assume {:print "$track_abort(13,5):", $t18} $t18 == $t18;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
    assume {:print "$at(10,16524,16525)"} true;
L2:

    // assert Not(Not(exists[@401]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:344:9+111
    assume {:print "$at(10,16915,17026)"} true;
    assert {:msg "assert_failed(10,16915,17026): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#401, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@402]<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:354:9+86
    assume {:print "$at(10,17338,17424)"} true;
    assert {:msg "assert_failed(10,17338,17424): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1);

    // assert Not(Not(exists[@402]<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:848:9+86
    assume {:print "$at(10,41308,41394)"} true;
    assert {:msg "assert_failed(10,41308,41394): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t7)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t7, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:849:9+121
    assume {:print "$at(10,41403,41524)"} true;
    assert {:msg "assert_failed(10,41403,41524): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t7)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t7, i)))), $t2)))));

    // assert Not(Eq<u64>($t8, 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:951:9+50
    assume {:print "$at(10,46591,46641)"} true;
    assert {:msg "assert_failed(10,46591,46641): function does not abort under this condition"}
      !$IsEqual'u64'($t8, 0);

    // assert Not(Lt(select Diem::CurrencyInfo.total_value($t9), $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:952:9+65
    assume {:print "$at(10,46650,46715)"} true;
    assert {:msg "assert_failed(10,46650,46715): function does not abort under this condition"}
      !($total_value#$1_Diem_CurrencyInfo'#0'($t9) < $t8);

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t9), $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:953:9+67
    assume {:print "$at(10,46724,46791)"} true;
    assert {:msg "assert_failed(10,46724,46791): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t9) < $t8);

    // assert Not(Not(Diem::spec_is_currency[@403]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#403);

    // assert Eq<u128>(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@403]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t10)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:957:9+142
    assume {:print "$at(10,46897,47039)"} true;
    assert {:msg "assert_failed(10,46897,47039): post-condition does not hold"}
      $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#403)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t10))));

    // assert Eq<u64>(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@403]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t10)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:959:9+146
    assume {:print "$at(10,47048,47194)"} true;
    assert {:msg "assert_failed(10,47048,47194): post-condition does not hold"}
      $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#403)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t10))));

    // assert Implies(exists[@402]<Diem::PreburnQueue<#0>>($t1), exists<Diem::PreburnQueue<#0>>($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:856:9+113
    assume {:print "$at(10,41796,41909)"} true;
    assert {:msg "assert_failed(10,41796,41909): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t1));

    // assert Implies(Diem::spec_is_currency[@403]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@403]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#403) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#403))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@404]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#404, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@404]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#404, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@401]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#401, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@401]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#401, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@403]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@403]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#403) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#403))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@402]<Diem::PreburnQueue<#0>>(addr), exists[@405]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#405, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@402]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@403]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@403]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#403) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#403))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<#0>($t2))), $t12, $t1), $t13, Not(select Diem::CurrencyInfo.is_synthetic($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:968:9+187
    assume {:print "$at(10,47482,47669)"} true;
    assert {:msg "assert_failed(10,47482,47669): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t13, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_spec_make_preburn'#0'($t2))), $t12, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t11)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<#0>($t2))), $t12, $t1), $t13, Not(select Diem::CurrencyInfo.is_synthetic($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:334:5+184
    assume {:print "$at(10,16530,16714)"} true;
    assert {:msg "assert_failed(10,16530,16714): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t13, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_spec_make_preburn'#0'($t2))), $t12, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t11)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:334:5+184
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
    assume {:print "$at(10,16524,16525)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Or(Or(Not(exists[@401]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Not(exists[@402]<Diem::PreburnQueue<#0>>($t1))), Not(exists[@402]<Diem::PreburnQueue<#0>>($t1))), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t7)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t7, i)))), $t2)), Eq<u64>($t8, 0)), Lt(select Diem::CurrencyInfo.total_value($t9), $t8)), Lt(select Diem::CurrencyInfo.preburn_value($t9), $t8)), Not(Diem::spec_is_currency[@403]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:334:5+184
    assume {:print "$at(10,16530,16714)"} true;
    assert {:msg "assert_failed(10,16530,16714): abort not covered by any of the `aborts_if` clauses"}
      (((((((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#401, $1_Signer_spec_address_of($t0)) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1)) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1)) || (var $range_0 := $Range(0, LenVec($t7)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t7, i)))), $t2)))))) || $IsEqual'u64'($t8, 0)) || ($total_value#$1_Diem_CurrencyInfo'#0'($t9) < $t8)) || ($preburn_value#$1_Diem_CurrencyInfo'#0'($t9) < $t8)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#403));

    // assert Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@401]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t18)), And(Not(exists[@402]<Diem::PreburnQueue<#0>>($t1)), Eq(5, $t18))), And(Not(exists[@402]<Diem::PreburnQueue<#0>>($t1)), Eq(5, $t18))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t7)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t7, i)))), $t2), Eq(1, $t18))), And(Eq<u64>($t8, 0), Eq(1, $t18))), And(Lt(select Diem::CurrencyInfo.total_value($t9), $t8), Eq(8, $t18))), And(Lt(select Diem::CurrencyInfo.preburn_value($t9), $t8), Eq(8, $t18))), And(Not(Diem::spec_is_currency[@403]<#0>()), Eq(5, $t18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:334:5+184
    assert {:msg "assert_failed(10,16530,16714): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#401, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t18)) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1) && $IsEqual'u8'(5, $t18))) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#402, $t1) && $IsEqual'u8'(5, $t18))) || ((var $range_0 := $Range(0, LenVec($t7)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t7, i)))), $t2))))) && $IsEqual'u8'(1, $t18))) || ($IsEqual'u64'($t8, 0) && $IsEqual'u8'(1, $t18))) || (($total_value#$1_Diem_CurrencyInfo'#0'($t9) < $t8) && $IsEqual'u8'(8, $t18))) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($t9) < $t8) && $IsEqual'u8'(8, $t18))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#403) && $IsEqual'u8'(5, $t18)));

    // abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:334:5+184
    $abort_code := $t18;
    $abort_flag := true;
    return;

}

// fun Diem::burn_now [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+422
procedure {:timeLimit 40} $1_Diem_burn_now$verify(_$t0: $1_Diem_Diem'#0', _$t1: $Mutation ($1_Diem_Preburn'#0'), _$t2: int, _$t3: $1_Diem_BurnCapability'#0') returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t4: bool;
    var $t5: int;
    var $t6: $1_Diem_CurrencyInfo'#0';
    var $t7: $1_Diem_CurrencyInfo'#0';
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: Vec (int);
    var $t10: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t11: $1_Diem_PreburnEvent;
    var $t12: $1_Diem_CurrencyInfo'#0';
    var $t13: Vec (int);
    var $t14: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t15: $1_Diem_Preburn'#0';
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t23: $1_Diem_CurrencyInfo'#0';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t26: $1_Diem_PreburnEvent;
    var $t27: $1_Diem_Preburn'#0';
    var $t28: int;
    var $t29: $1_Diem_CurrencyInfo'#0';
    var $t30: $1_Diem_CurrencyInfo'#0';
    var $t31: Vec (int);
    var $t32: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t33: $1_Diem_CurrencyInfo'#0';
    var $t0: $1_Diem_Diem'#0';
    var $t1: $Mutation ($1_Diem_Preburn'#0');
    var $t2: int;
    var $t3: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#389: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#390: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#391: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#392: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#393: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+422
    assume {:print "$at(10,51314,51736)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+422
    assume $IsValid'$1_Diem_Preburn'#0''($Dereference($t1));

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+422
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+422
    assume $IsValid'$1_Diem_BurnCapability'#0''($t3);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+422
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t6, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:9+42
    assume {:print "$at(10,51808,51850)"} true;
    assume ($t6 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t7, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1077:9+42
    assume {:print "$at(10,52610,52652)"} true;
    assume ($t7 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t8, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(10,25747,25789)"} true;
    assume ($t8 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t9, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(10,25798,25849)"} true;
    assume ($t9 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t10, select Diem::CurrencyInfo.preburn_events($t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(10,25858,25891)"} true;
    assume ($t10 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t8));

    // assume Identical($t11, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t9, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(10,25900,26011)"} true;
    assume ($t11 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t0), $t9, $t2));

    // assume Identical($t12, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+42
    assume {:print "$at(10,47332,47374)"} true;
    assume ($t12 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+51
    assume {:print "$at(10,47383,47434)"} true;
    assume ($t13 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t14, select Diem::CurrencyInfo.burn_events($t12)) at /home/ying/diem/language/diem-framework/modules/Diem.move:967:9+30
    assume {:print "$at(10,47443,47473)"} true;
    assume ($t14 == $burn_events#$1_Diem_CurrencyInfo'#0'($t12));

    // @391 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+1
    assume {:print "$at(10,51314,51315)"} true;
    $1_Diem_BurnCapability'#0'_$memory#391 := $1_Diem_BurnCapability'#0'_$memory;

    // @389 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#389 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @390 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+1
    $1_Diem_MintCapability'#0'_$memory#390 := $1_Diem_MintCapability'#0'_$memory;

    // @393 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+1
    $1_Diem_Preburn'#0'_$memory#393 := $1_Diem_Preburn'#0'_$memory;

    // @392 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+1
    $1_Diem_PreburnQueue'#0'_$memory#392 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t15 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+1
    $t15 := $Dereference($t1);

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+1
    assume {:print "$track_local(13,6,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(13,6,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+1
    assume {:print "$track_local(13,6,2):", $t2} $t2 == $t2;

    // trace_local[capability]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:5+1
    assume {:print "$track_local(13,6,3):", $t3} $t3 == $t3;

    // $t16 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:16+10
    assume {:print "$at(10,51548,51558)"} true;
    $t16 := $value#$1_Diem_Diem'#0'($t0);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:29+1
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := >($t16, $t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:27+1
    call $t18 := $Gt($t16, $t17);

    // $t19 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:57+5
    $t19 := 7;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:32+31
    // >> opaque call: $t10 := Errors::invalid_argument($t9)

    // $t20 := opaque begin: Errors::invalid_argument($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:32+31

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:32+31
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:32+31
    assume $IsEqual'u64'($t20, 7);

    // $t20 := opaque end: Errors::invalid_argument($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:32+31

    // trace_local[tmp#$5]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:9+55
    assume {:print "$track_local(13,6,5):", $t20} $t20 == $t20;

    // trace_local[tmp#$4]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:9+55
    assume {:print "$track_local(13,6,4):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:9+55
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:9+55
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:9+55

    // destroy($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:9+55

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:9+55
    assume {:print "$at(10,51541,51596)"} true;
    assume {:print "$track_abort(13,6):", $t20} $t20 == $t20;

    // $t21 := move($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:9+55
    $t21 := $t20;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1058:9+55
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1059:31+4
    assume {:print "$at(10,51628,51632)"} true;
L0:

    // assume Identical($t22, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(10,25428,25470)"} true;
    assume ($t22 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(10,25747,25789)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(10,25798,25849)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.preburn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(10,25858,25891)"} true;
    assume ($t25 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t23));

    // assume Identical($t26, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t24, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(10,25900,26011)"} true;
    assume ($t26 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t0), $t24, $t2));

    // Diem::preburn_with_resource<#0>($t0, $t1, $t2) on_abort goto L3 with $t21 at /home/ying/diem/language/diem-framework/modules/Diem.move:1059:9+53
    assume {:print "$at(10,51606,51659)"} true;
    call $t1 := $1_Diem_preburn_with_resource'#0'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,51606,51659)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(13,6):", $t21} $t21 == $t21;
        goto L3;
    }

    // assume Identical($t27, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+26
    assume {:print "$at(10,46089,46115)"} true;
    assume ($t27 == $Dereference($t1));

    // assume Identical($t28, select Diem::Diem.value(select Diem::Preburn.to_burn($t27))) at /home/ying/diem/language/diem-framework/modules/Diem.move:949:9+36
    assume {:print "$at(10,46495,46531)"} true;
    assume ($t28 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t27)));

    // assume Identical($t29, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:9+42
    assume {:print "$at(10,46540,46582)"} true;
    assume ($t29 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t30, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+42
    assume {:print "$at(10,47332,47374)"} true;
    assume ($t30 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t31, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+51
    assume {:print "$at(10,47383,47434)"} true;
    assume ($t31 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t32, select Diem::CurrencyInfo.burn_events($t30)) at /home/ying/diem/language/diem-framework/modules/Diem.move:967:9+30
    assume {:print "$at(10,47443,47473)"} true;
    assume ($t32 == $burn_events#$1_Diem_CurrencyInfo'#0'($t30));

    // Diem::burn_with_resource_cap<#0>($t1, $t2, $t3) on_abort goto L3 with $t21 at /home/ying/diem/language/diem-framework/modules/Diem.move:1060:9+60
    assume {:print "$at(10,51669,51729)"} true;
    call $t1 := $1_Diem_burn_with_resource_cap'#0'($t1, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(10,51669,51729)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(13,6):", $t21} $t21 == $t21;
        goto L3;
    }

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1060:69+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(13,6,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1061:5+1
    assume {:print "$at(10,51735,51736)"} true;
L2:

    // assume Identical($t33, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1065:9+52
    assume {:print "$at(10,51859,51911)"} true;
    assume ($t33 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert Not(Eq<u64>(select Diem::Diem.value($t0), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1074:9+56
    assume {:print "$at(10,52374,52430)"} true;
    assert {:msg "assert_failed(10,52374,52430): function does not abort under this condition"}
      !$IsEqual'u64'($value#$1_Diem_Diem'#0'($t0), 0);

    // assert Not(Lt(select Diem::CurrencyInfo.total_value($t7), select Diem::Diem.value($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1078:9+68
    assume {:print "$at(10,52661,52729)"} true;
    assert {:msg "assert_failed(10,52661,52729): function does not abort under this condition"}
      !($total_value#$1_Diem_CurrencyInfo'#0'($t7) < $value#$1_Diem_Diem'#0'($t0));

    // assert Not(Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t15)), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:514:9+63
    assume {:print "$at(10,24979,25042)"} true;
    assert {:msg "assert_failed(10,24979,25042): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t15)) > 0);

    // assert Not(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@389]<#0>()), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:520:9+102
    assume {:print "$at(10,25211,25313)"} true;
    assert {:msg "assert_failed(10,25211,25313): function does not abort under this condition"}
      !(($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#389)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615);

    // assert Not(Not(Diem::spec_is_currency[@389]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#389);

    // assert Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn($t1)), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1068:9+35
    assume {:print "$at(10,52121,52156)"} true;
    assert {:msg "assert_failed(10,52121,52156): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($Dereference($t1))), 0);

    // assert Eq<Diem::CurrencyInfo<#0>>($t33, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t6, Sub(select Diem::CurrencyInfo.total_value($t6), select Diem::Diem.value($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1069:9+84
    assume {:print "$at(10,52165,52249)"} true;
    assert {:msg "assert_failed(10,52165,52249): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t33, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t6, ($total_value#$1_Diem_CurrencyInfo'#0'($t6) - $value#$1_Diem_Diem'#0'($t0))));

    // assert Implies(Diem::spec_is_currency[@389]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@389]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#389) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#389))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@390]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#390, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@390]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#390, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@391]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#391, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@391]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#391, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@389]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@389]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#389) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#389))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@392]<Diem::PreburnQueue<#0>>(addr), exists[@393]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#392, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#393, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@392]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#392, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@389]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@389]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#389) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#389))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:540:9+42
    assume {:print "$at(10,26020,26062)"} true;
    assert {:msg "assert_failed(10,26020,26062): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t10, $t11, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t8)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t11, $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8))), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(pack Diem::Preburn<#0>($t0))), $t13, $t2), $t14, Not(select Diem::CurrencyInfo.is_synthetic($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:968:9+187
    assume {:print "$at(10,47482,47669)"} true;
    assert {:msg "assert_failed(10,47482,47669): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t10, $t11, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t8)), $t14, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_Preburn'#0'($t0))), $t13, $t2), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t12)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t11, $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8))), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(pack Diem::Preburn<#0>($t0))), $t13, $t2), $t14, Not(select Diem::CurrencyInfo.is_synthetic($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1062:5+514
    assume {:print "$at(10,51741,52255)"} true;
    assert {:msg "assert_failed(10,51741,52255): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t10, $t11, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t8)), $t14, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_Preburn'#0'($t0))), $t13, $t2), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t12)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1062:5+514
    $ret0 := $t1;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1061:5+1
    assume {:print "$at(10,51735,51736)"} true;
L3:

    // assert Or(Or(Or(Or(Eq<u64>(select Diem::Diem.value($t0), 0), Lt(select Diem::CurrencyInfo.total_value($t7), select Diem::Diem.value($t0))), Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t15)), 0)), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@389]<#0>()), select Diem::Diem.value($t0)), 18446744073709551615)), Not(Diem::spec_is_currency[@389]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1062:5+514
    assume {:print "$at(10,51741,52255)"} true;
    assert {:msg "assert_failed(10,51741,52255): abort not covered by any of the `aborts_if` clauses"}
      (((($IsEqual'u64'($value#$1_Diem_Diem'#0'($t0), 0) || ($total_value#$1_Diem_CurrencyInfo'#0'($t7) < $value#$1_Diem_Diem'#0'($t0))) || ($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t15)) > 0)) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#389)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#389));

    // assert Or(Or(Or(Or(And(Eq<u64>(select Diem::Diem.value($t0), 0), Eq(7, $t21)), And(Lt(select Diem::CurrencyInfo.total_value($t7), select Diem::Diem.value($t0)), Eq(8, $t21))), And(Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t15)), 0), Eq(1, $t21))), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@389]<#0>()), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t21))), And(Not(Diem::spec_is_currency[@389]<#0>()), Eq(5, $t21))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1062:5+514
    assert {:msg "assert_failed(10,51741,52255): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((($IsEqual'u64'($value#$1_Diem_Diem'#0'($t0), 0) && $IsEqual'u8'(7, $t21)) || (($total_value#$1_Diem_CurrencyInfo'#0'($t7) < $value#$1_Diem_Diem'#0'($t0)) && $IsEqual'u8'(8, $t21))) || (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t15)) > 0) && $IsEqual'u8'(1, $t21))) || ((($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#389)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615) && $IsEqual'u8'(8, $t21))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#389) && $IsEqual'u8'(5, $t21)));

    // abort($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1062:5+514
    $abort_code := $t21;
    $abort_flag := true;
    return;

}

// fun Diem::burn_with_capability<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+547
procedure {:inline 1} $1_Diem_burn_with_capability'#0'(_$t0: int, _$t1: $1_Diem_BurnCapability'#0', _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_Diem_Preburn'#0';
    var $t4: $1_Diem_Diem'#0';
    var $t5: $1_Diem_CurrencyInfo'#0';
    var $t6: Vec (int);
    var $t7: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t8: $1_Diem_Preburn'#0';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t10: int;
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: $1_Diem_Preburn'#0';
    var $t13: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t14: $1_Diem_PreburnWithMetadata'#0';
    var $t15: bool;
    var $t16: int;
    var $t17: $1_Diem_Preburn'#0';
    var $t18: Vec (int);
    var $t19: $Mutation ($1_Diem_Preburn'#0');
    var $t20: $1_Diem_Preburn'#0';
    var $t21: int;
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t23: $1_Diem_CurrencyInfo'#0';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t26: $1_Diem_Preburn'#0';
    var $t27: $1_Diem_Diem'#0';
    var $t28: bool;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $t2: int;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_PreburnQueue'#0'_$memory#377: $Memory $1_Diem_PreburnQueue'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t19));

    // bytecode translation starts here
    // assume Identical($t5, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+42
    assume {:print "$at(10,47332,47374)"} true;
    assume ($t5 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t6, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+51
    assume {:print "$at(10,47383,47434)"} true;
    assume ($t6 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t7, select Diem::CurrencyInfo.burn_events($t5)) at /home/ying/diem/language/diem-framework/modules/Diem.move:967:9+30
    assume {:print "$at(10,47443,47473)"} true;
    assume ($t7 == $burn_events#$1_Diem_CurrencyInfo'#0'($t5));

    // assume Identical($t8, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:893:9+50
    assume {:print "$at(10,43710,43760)"} true;
    assume ($t8 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume Identical($t10, select Diem::Diem.value(select Diem::Preburn.to_burn($t8))) at /home/ying/diem/language/diem-framework/modules/Diem.move:949:9+36
    assume {:print "$at(10,46495,46531)"} true;
    assume ($t10 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t8)));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:9+42
    assume {:print "$at(10,46540,46582)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:901:9+50
    assume {:print "$at(10,44065,44115)"} true;
    assume ($t12 == $1_Diem_spec_make_preburn'#0'($t2));

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+1
    assume {:print "$at(10,42811,42812)"} true;
    assume {:print "$track_local(13,7,0):", $t0} $t0 == $t0;

    // trace_local[capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+1
    assume {:print "$track_local(13,7,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+1
    assume {:print "$track_local(13,7,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    // >> opaque call: $t5 := Diem::remove_preburn_from_queue<#0>($t0, $t2)
    assume {:print "$at(10,43104,43164)"} true;

    // assume Identical($t13, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t13 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // $t14 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume {:print "$at(10,43104,43164)"} true;

    // assume Identical($t15, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume ($t15 == (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t13, i)))), $t2)))))));

    // if ($t15) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    if ($t15) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
L4:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t16)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) && $IsEqual'u8'(5, $t16)) || ((var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t13, i)))), $t2))))) && $IsEqual'u8'(1, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume {:print "$at(10,43104,43164)"} true;
    assume {:print "$track_abort(13,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
L3:

    // @377 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    $1_Diem_PreburnQueue'#0'_$memory#377 := $1_Diem_PreburnQueue'#0'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t0);
    }

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t14);

    // assume Implies(exists[@377]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#377, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t14))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t14))), $t2);

    // $t14 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60

    // ($t17, $t18) := unpack Diem::PreburnWithMetadata<#0>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:13+43
    $t17 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t14);
    $t18 := $metadata#$1_Diem_PreburnWithMetadata'#0'($t14);

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:53+1

    // $t3 := $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:877:34+7
    $t3 := $t17;

    // trace_local[preburn]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:34+7
    assume {:print "$track_local(13,7,3):", $t3} $t3 == $t3;

    // $t19 := borrow_local($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:880:32+12
    assume {:print "$at(10,43234,43246)"} true;
    $t19 := $Mutation($Local(3), EmptyVec(), $t3);

    // assume Identical($t20, $t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+26
    assume {:print "$at(10,46089,46115)"} true;
    assume ($t20 == $Dereference($t19));

    // assume Identical($t21, select Diem::Diem.value(select Diem::Preburn.to_burn($t20))) at /home/ying/diem/language/diem-framework/modules/Diem.move:949:9+36
    assume {:print "$at(10,46495,46531)"} true;
    assume ($t21 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t20)));

    // assume Identical($t22, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:9+42
    assume {:print "$at(10,46540,46582)"} true;
    assume ($t22 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+42
    assume {:print "$at(10,47332,47374)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+51
    assume {:print "$at(10,47383,47434)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:967:9+30
    assume {:print "$at(10,47443,47473)"} true;
    assume ($t25 == $burn_events#$1_Diem_CurrencyInfo'#0'($t23));

    // Diem::burn_with_resource_cap<#0>($t19, $t0, $t1) on_abort goto L2 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:880:9+65
    assume {:print "$at(10,43211,43276)"} true;
    call $t19 := $1_Diem_burn_with_resource_cap'#0'($t19, $t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(10,43211,43276)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,7):", $t16} $t16 == $t16;
        goto L2;
    }

    // write_back[LocalRoot($t3)@]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:880:9+65
    $t3 := $Dereference($t19);

    // $t26 := move($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:35+7
    assume {:print "$at(10,43313,43320)"} true;
    $t26 := $t3;

    // $t27 := unpack Diem::Preburn<#0>($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:13+19
    $t27 := $to_burn#$1_Diem_Preburn'#0'($t26);

    // trace_local[to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:23+7
    assume {:print "$track_local(13,7,4):", $t27} $t27 == $t27;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
    // >> opaque call: Diem::destroy_zero<#0>($t10)
    assume {:print "$at(10,43330,43351)"} true;

    // opaque begin: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21

    // assume Identical($t28, Gt(select Diem::Diem.value($t27), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
    assume ($t28 == ($value#$1_Diem_Diem'#0'($t27) > 0));

    // if ($t28) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
    if ($t28) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
L6:

    // assume And(Gt(select Diem::Diem.value($t27), 0), Eq(7, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
    assume (($value#$1_Diem_Diem'#0'($t27) > 0) && $IsEqual'u8'(7, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
    assume {:print "$at(10,43330,43351)"} true;
    assume {:print "$track_abort(13,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
L5:

    // opaque end: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:884:5+1
    assume {:print "$at(10,43357,43358)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:884:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:884:5+1
L2:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:884:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::burn_with_capability [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+547
procedure {:timeLimit 40} $1_Diem_burn_with_capability$verify(_$t0: int, _$t1: $1_Diem_BurnCapability'#0', _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_Diem_Preburn'#0';
    var $t4: $1_Diem_Diem'#0';
    var $t5: $1_Diem_CurrencyInfo'#0';
    var $t6: Vec (int);
    var $t7: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t8: $1_Diem_Preburn'#0';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t10: int;
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: $1_Diem_Preburn'#0';
    var $t13: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t14: $1_Diem_PreburnWithMetadata'#0';
    var $t15: bool;
    var $t16: int;
    var $t17: $1_Diem_Preburn'#0';
    var $t18: Vec (int);
    var $t19: $Mutation ($1_Diem_Preburn'#0');
    var $t20: $1_Diem_Preburn'#0';
    var $t21: int;
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t23: $1_Diem_CurrencyInfo'#0';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t26: $1_Diem_Preburn'#0';
    var $t27: $1_Diem_Diem'#0';
    var $t28: bool;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $t2: int;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_PreburnQueue'#0'_$memory#365: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#366: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#367: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#368: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_Preburn'#0'_$memory#369: $Memory $1_Diem_Preburn'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#370: $Memory $1_Diem_PreburnQueue'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t19));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+547
    assume {:print "$at(10,42811,43358)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+547
    assume $IsValid'$1_Diem_BurnCapability'#0''($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+547
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+547
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+547
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t5, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+42
    assume {:print "$at(10,47332,47374)"} true;
    assume ($t5 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t6, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+51
    assume {:print "$at(10,47383,47434)"} true;
    assume ($t6 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t7, select Diem::CurrencyInfo.burn_events($t5)) at /home/ying/diem/language/diem-framework/modules/Diem.move:967:9+30
    assume {:print "$at(10,47443,47473)"} true;
    assume ($t7 == $burn_events#$1_Diem_CurrencyInfo'#0'($t5));

    // assume Identical($t8, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:893:9+50
    assume {:print "$at(10,43710,43760)"} true;
    assume ($t8 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume Identical($t10, select Diem::Diem.value(select Diem::Preburn.to_burn($t8))) at /home/ying/diem/language/diem-framework/modules/Diem.move:949:9+36
    assume {:print "$at(10,46495,46531)"} true;
    assume ($t10 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t8)));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:9+42
    assume {:print "$at(10,46540,46582)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:901:9+50
    assume {:print "$at(10,44065,44115)"} true;
    assume ($t12 == $1_Diem_spec_make_preburn'#0'($t2));

    // @368 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+1
    assume {:print "$at(10,42811,42812)"} true;
    $1_Diem_BurnCapability'#0'_$memory#368 := $1_Diem_BurnCapability'#0'_$memory;

    // @366 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#366 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @367 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+1
    $1_Diem_MintCapability'#0'_$memory#367 := $1_Diem_MintCapability'#0'_$memory;

    // @369 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+1
    $1_Diem_Preburn'#0'_$memory#369 := $1_Diem_Preburn'#0'_$memory;

    // @365 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+1
    $1_Diem_PreburnQueue'#0'_$memory#365 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+1
    assume {:print "$track_local(13,7,0):", $t0} $t0 == $t0;

    // trace_local[capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+1
    assume {:print "$track_local(13,7,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:870:5+1
    assume {:print "$track_local(13,7,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    // >> opaque call: $t5 := Diem::remove_preburn_from_queue<#0>($t0, $t2)
    assume {:print "$at(10,43104,43164)"} true;

    // assume Identical($t13, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t13 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // $t14 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume {:print "$at(10,43104,43164)"} true;

    // assume Identical($t15, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume ($t15 == (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t13, i)))), $t2)))))));

    // if ($t15) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    if ($t15) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
L4:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t16)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) && $IsEqual'u8'(5, $t16)) || ((var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t13, i)))), $t2))))) && $IsEqual'u8'(1, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume {:print "$at(10,43104,43164)"} true;
    assume {:print "$track_abort(13,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
L3:

    // @370 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    $1_Diem_PreburnQueue'#0'_$memory#370 := $1_Diem_PreburnQueue'#0'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t0);
    }

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t14);

    // assume Implies(exists[@370]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#370, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t14))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t14))), $t2);

    // $t14 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:59+60

    // ($t17, $t18) := unpack Diem::PreburnWithMetadata<#0>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:13+43
    $t17 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t14);
    $t18 := $metadata#$1_Diem_PreburnWithMetadata'#0'($t14);

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:53+1

    // $t3 := $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:877:34+7
    $t3 := $t17;

    // trace_local[preburn]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:877:34+7
    assume {:print "$track_local(13,7,3):", $t3} $t3 == $t3;

    // $t19 := borrow_local($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:880:32+12
    assume {:print "$at(10,43234,43246)"} true;
    $t19 := $Mutation($Local(3), EmptyVec(), $t3);

    // assume Identical($t20, $t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+26
    assume {:print "$at(10,46089,46115)"} true;
    assume ($t20 == $Dereference($t19));

    // assume Identical($t21, select Diem::Diem.value(select Diem::Preburn.to_burn($t20))) at /home/ying/diem/language/diem-framework/modules/Diem.move:949:9+36
    assume {:print "$at(10,46495,46531)"} true;
    assume ($t21 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t20)));

    // assume Identical($t22, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:9+42
    assume {:print "$at(10,46540,46582)"} true;
    assume ($t22 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+42
    assume {:print "$at(10,47332,47374)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+51
    assume {:print "$at(10,47383,47434)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:967:9+30
    assume {:print "$at(10,47443,47473)"} true;
    assume ($t25 == $burn_events#$1_Diem_CurrencyInfo'#0'($t23));

    // Diem::burn_with_resource_cap<#0>($t19, $t0, $t1) on_abort goto L2 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:880:9+65
    assume {:print "$at(10,43211,43276)"} true;
    call $t19 := $1_Diem_burn_with_resource_cap'#0'($t19, $t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(10,43211,43276)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,7):", $t16} $t16 == $t16;
        goto L2;
    }

    // write_back[LocalRoot($t3)@]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:880:9+65
    $t3 := $Dereference($t19);

    // $t26 := move($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:35+7
    assume {:print "$at(10,43313,43320)"} true;
    $t26 := $t3;

    // $t27 := unpack Diem::Preburn<#0>($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:13+19
    $t27 := $to_burn#$1_Diem_Preburn'#0'($t26);

    // trace_local[to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:23+7
    assume {:print "$track_local(13,7,4):", $t27} $t27 == $t27;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
    // >> opaque call: Diem::destroy_zero<#0>($t10)
    assume {:print "$at(10,43330,43351)"} true;

    // opaque begin: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21

    // assume Identical($t28, Gt(select Diem::Diem.value($t27), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
    assume ($t28 == ($value#$1_Diem_Diem'#0'($t27) > 0));

    // if ($t28) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
    if ($t28) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
L6:

    // assume And(Gt(select Diem::Diem.value($t27), 0), Eq(7, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
    assume (($value#$1_Diem_Diem'#0'($t27) > 0) && $IsEqual'u8'(7, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
    assume {:print "$at(10,43330,43351)"} true;
    assume {:print "$track_abort(13,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21
L5:

    // opaque end: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:883:9+21

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:884:5+1
    assume {:print "$at(10,43357,43358)"} true;
L1:

    // assert Not(Not(exists[@365]<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:354:9+86
    assume {:print "$at(10,17338,17424)"} true;
    assert {:msg "assert_failed(10,17338,17424): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0);

    // assert Not(Not(exists[@365]<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:848:9+86
    assume {:print "$at(10,41308,41394)"} true;
    assert {:msg "assert_failed(10,41308,41394): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t9)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t9, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:849:9+121
    assume {:print "$at(10,41403,41524)"} true;
    assert {:msg "assert_failed(10,41403,41524): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t9)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t9, i)))), $t2)))));

    // assert Not(Eq<u64>($t10, 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:951:9+50
    assume {:print "$at(10,46591,46641)"} true;
    assert {:msg "assert_failed(10,46591,46641): function does not abort under this condition"}
      !$IsEqual'u64'($t10, 0);

    // assert Not(Lt(select Diem::CurrencyInfo.total_value($t11), $t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:952:9+65
    assume {:print "$at(10,46650,46715)"} true;
    assert {:msg "assert_failed(10,46650,46715): function does not abort under this condition"}
      !($total_value#$1_Diem_CurrencyInfo'#0'($t11) < $t10);

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t11), $t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:953:9+67
    assume {:print "$at(10,46724,46791)"} true;
    assert {:msg "assert_failed(10,46724,46791): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t11) < $t10);

    // assert Not(Not(Diem::spec_is_currency[@366]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#366);

    // assert Eq<u128>(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@366]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:957:9+142
    assume {:print "$at(10,46897,47039)"} true;
    assert {:msg "assert_failed(10,46897,47039): post-condition does not hold"}
      $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#366)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12))));

    // assert Eq<u64>(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@366]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:959:9+146
    assume {:print "$at(10,47048,47194)"} true;
    assert {:msg "assert_failed(10,47048,47194): post-condition does not hold"}
      $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#366)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12))));

    // assert Implies(exists[@365]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:856:9+113
    assume {:print "$at(10,41796,41909)"} true;
    assert {:msg "assert_failed(10,41796,41909): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assert Implies(Diem::spec_is_currency[@366]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@366]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#366) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#366))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@367]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#367, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@367]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#367, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@368]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#368, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@368]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#368, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@366]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@366]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#366) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#366))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@365]<Diem::PreburnQueue<#0>>(addr), exists[@369]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#369, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@365]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@366]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@366]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#366) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#366))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<#0>($t2))), $t6, $t0), $t7, Not(select Diem::CurrencyInfo.is_synthetic($t5)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:968:9+187
    assume {:print "$at(10,47482,47669)"} true;
    assert {:msg "assert_failed(10,47482,47669): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t7, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_spec_make_preburn'#0'($t2))), $t6, $t0), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t5)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<#0>($t2))), $t6, $t0), $t7, Not(select Diem::CurrencyInfo.is_synthetic($t5)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:885:5+228
    assume {:print "$at(10,43363,43591)"} true;
    assert {:msg "assert_failed(10,43363,43591): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t7, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_spec_make_preburn'#0'($t2))), $t6, $t0), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t5)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:885:5+228
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:884:5+1
    assume {:print "$at(10,43357,43358)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Not(exists[@365]<Diem::PreburnQueue<#0>>($t0)), Not(exists[@365]<Diem::PreburnQueue<#0>>($t0))), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t9)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t9, i)))), $t2)), Eq<u64>($t10, 0)), Lt(select Diem::CurrencyInfo.total_value($t11), $t10)), Lt(select Diem::CurrencyInfo.preburn_value($t11), $t10)), Not(Diem::spec_is_currency[@366]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:885:5+228
    assume {:print "$at(10,43363,43591)"} true;
    assert {:msg "assert_failed(10,43363,43591): abort not covered by any of the `aborts_if` clauses"}
      ((((((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0)) || (var $range_0 := $Range(0, LenVec($t9)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t9, i)))), $t2)))))) || $IsEqual'u64'($t10, 0)) || ($total_value#$1_Diem_CurrencyInfo'#0'($t11) < $t10)) || ($preburn_value#$1_Diem_CurrencyInfo'#0'($t11) < $t10)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#366));

    // assert Or(Or(Or(Or(Or(Or(And(Not(exists[@365]<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t16)), And(Not(exists[@365]<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t16))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t9)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t9, i)))), $t2), Eq(1, $t16))), And(Eq<u64>($t10, 0), Eq(1, $t16))), And(Lt(select Diem::CurrencyInfo.total_value($t11), $t10), Eq(8, $t16))), And(Lt(select Diem::CurrencyInfo.preburn_value($t11), $t10), Eq(8, $t16))), And(Not(Diem::spec_is_currency[@366]<#0>()), Eq(5, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:885:5+228
    assert {:msg "assert_failed(10,43363,43591): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0) && $IsEqual'u8'(5, $t16)) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#365, $t0) && $IsEqual'u8'(5, $t16))) || ((var $range_0 := $Range(0, LenVec($t9)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t9, i)))), $t2))))) && $IsEqual'u8'(1, $t16))) || ($IsEqual'u64'($t10, 0) && $IsEqual'u8'(1, $t16))) || (($total_value#$1_Diem_CurrencyInfo'#0'($t11) < $t10) && $IsEqual'u8'(8, $t16))) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($t11) < $t10) && $IsEqual'u8'(8, $t16))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#366) && $IsEqual'u8'(5, $t16)));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:885:5+228
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::burn_with_resource_cap<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1404
procedure {:inline 1} $1_Diem_burn_with_resource_cap'#0'(_$t0: $Mutation ($1_Diem_Preburn'#0'), _$t1: int, _$t2: $1_Diem_BurnCapability'#0') returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: $1_Diem_Preburn'#0';
    var $t13: int;
    var $t14: $1_Diem_CurrencyInfo'#0';
    var $t15: $1_Diem_CurrencyInfo'#0';
    var $t16: Vec (int);
    var $t17: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t18: Vec (int);
    var $t19: bool;
    var $t20: int;
    var $t21: $1_Diem_Diem'#0';
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: $Mutation ($1_Diem_Diem'#0');
    var $t28: $1_Diem_Diem'#0';
    var $t29: $1_Diem_Diem'#0';
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t34: int;
    var $t35: int;
    var $t36: bool;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: $Mutation (int);
    var $t43: int;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: int;
    var $t49: $Mutation (int);
    var $t50: bool;
    var $t51: bool;
    var $t52: $Mutation ($1_Event_EventHandle'$1_Diem_BurnEvent');
    var $t53: $1_Diem_BurnEvent;
    var $t0: $Mutation ($1_Diem_Preburn'#0');
    var $t1: int;
    var $t2: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t27));
    assume IsEmptyVec(p#$Mutation($t33));
    assume IsEmptyVec(p#$Mutation($t42));
    assume IsEmptyVec(p#$Mutation($t49));
    assume IsEmptyVec(p#$Mutation($t52));

    // bytecode translation starts here
    // assume Identical($t12, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+26
    assume {:print "$at(10,46089,46115)"} true;
    assume ($t12 == $Dereference($t0));

    // assume Identical($t13, select Diem::Diem.value(select Diem::Preburn.to_burn($t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:949:9+36
    assume {:print "$at(10,46495,46531)"} true;
    assume ($t13 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12)));

    // assume Identical($t14, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:9+42
    assume {:print "$at(10,46540,46582)"} true;
    assume ($t14 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t15, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+42
    assume {:print "$at(10,47332,47374)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t16, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+51
    assume {:print "$at(10,47383,47434)"} true;
    assume ($t16 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t17, select Diem::CurrencyInfo.burn_events($t15)) at /home/ying/diem/language/diem-framework/modules/Diem.move:967:9+30
    assume {:print "$at(10,47443,47473)"} true;
    assume ($t17 == $burn_events#$1_Diem_CurrencyInfo'#0'($t15));

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1
    assume {:print "$at(10,44642,44643)"} true;
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,8,0):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1
    assume {:print "$track_local(13,8,1):", $t1} $t1 == $t1;

    // trace_local[_capability]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1
    assume {:print "$track_local(13,8,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    // >> opaque call: $t12 := Diem::currency_code<#0>()
    assume {:print "$at(10,44867,44892)"} true;

    // $t18 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25

    // assume Identical($t19, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    assume ($t19 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t19) goto L18 else goto L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    if ($t19) { goto L18; } else { goto L14; }

    // label L15 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
L15:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    assume {:print "$at(10,44867,44892)"} true;
    assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    goto L13;

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
L14:

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    assume $IsValid'vec'u8''($t18);

    // assume Eq<vector<u8>>($t18, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    assume $IsEqual'vec'u8''($t18, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t18 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25

    // trace_local[currency_code]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:13+13
    assume {:print "$track_local(13,8,3):", $t18} $t18 == $t18;

    // $t21 := get_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:16+15
    assume {:print "$at(10,44961,44976)"} true;
    $t21 := $to_burn#$1_Diem_Preburn'#0'($Dereference($t0));

    // $t22 := get_field<Diem::Diem<#0>>.value($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:16+21
    $t22 := $value#$1_Diem_Diem'#0'($t21);

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:917:40+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := >($t22, $t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:38+1
    call $t24 := $Gt($t22, $t23);

    // $t25 := 4 at /home/ying/diem/language/diem-framework/modules/Diem.move:917:65+14
    $t25 := 4;
    assume $IsValid'u64'($t25);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:917:43+37
    // >> opaque call: $t18 := Errors::invalid_state($t17)

    // $t26 := opaque begin: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:43+37

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:43+37
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:43+37
    assume $IsEqual'u64'($t26, 1);

    // $t26 := opaque end: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:43+37

    // trace_local[tmp#$6]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
    assume {:print "$track_local(13,8,6):", $t26} $t26 == $t26;

    // trace_local[tmp#$5]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
    assume {:print "$track_local(13,8,5):", $t24} $t24 == $t24;

    // if ($t24) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
    if ($t24) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
    assume {:print "$at(10,44954,45026)"} true;
    assume {:print "$track_abort(13,8):", $t26} $t26 == $t26;

    // $t20 := move($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
    $t20 := $t26;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
    goto L13;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:919:58+7
    assume {:print "$at(10,45129,45136)"} true;
L0:

    // $t27 := borrow_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:53+20
    $t27 := $ChildMutation($t0, 0, $to_burn#$1_Diem_Preburn'#0'($Dereference($t0)));

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    // >> opaque call: $t20 := Diem::withdraw_all<#0>($t19)

    // $t28 := opaque begin: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44

    // $t29 := read_ref($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    $t29 := $Dereference($t27);

    // havoc[mut]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t27 := $UpdateMutation($t27, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t27));

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t27));

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    assume $IsValid'$1_Diem_Diem'#0''($t28);

    // assume Eq<u64>(select Diem::Diem.value($t28), select Diem::Diem.value($t29)) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t28), $value#$1_Diem_Diem'#0'($t29));

    // assume Eq<u64>(select Diem::Diem.value($t27), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t27)), 0);

    // $t28 := opaque end: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44

    // write_back[Reference($t0).to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    $t0 := $UpdateMutation($t0, $Update'$1_Diem_Preburn'#0''_to_burn($Dereference($t0), $Dereference($t27)));

    // $t30 := unpack Diem::Diem<#0>($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:13+14
    $t30 := $value#$1_Diem_Diem'#0'($t28);

    // trace_local[value]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:20+5
    assume {:print "$track_local(13,8,11):", $t30} $t30 == $t30;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,45188,45218)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30

    // assume Identical($t31, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
    assume ($t31 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t31) goto L19 else goto L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
    if ($t31) { goto L19; } else { goto L16; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
L17:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
    assume {:print "$at(10,45188,45218)"} true;
    assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
    goto L13;

    // label L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
L16:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30

    // $t32 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:922:62+38
    assume {:print "$at(10,45281,45319)"} true;
    call $t32 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,45281,45319)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t33 := borrow_global<Diem::CurrencyInfo<#0>>($t32) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:922:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t32)) {
        call $ExecFailureAbort();
    } else {
        $t33 := $Mutation($Global($t32), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t32));
    }
    if ($abort_flag) {
        assume {:print "$at(10,45239,45256)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // trace_local[info]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t33);
    assume {:print "$track_local(13,8,4):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t34 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:16+16
    assume {:print "$at(10,45337,45353)"} true;
    $t34 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t35 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:36+15
    call $t35 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(10,45357,45372)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t36 := >=($t34, $t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:33+2
    call $t36 := $Ge($t34, $t35);

    // $t37 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:76+14
    $t37 := 1;
    assume $IsValid'u64'($t37);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:923:53+38
    // >> opaque call: $t28 := Errors::limit_exceeded($t27)

    // $t38 := opaque begin: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:53+38

    // assume WellFormed($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:53+38
    assume $IsValid'u64'($t38);

    // assume Eq<u64>($t38, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:53+38
    assume $IsEqual'u64'($t38, 8);

    // $t38 := opaque end: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:53+38

    // trace_local[tmp#$8]($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    assume {:print "$track_local(13,8,8):", $t38} $t38 == $t38;

    // trace_local[tmp#$7]($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    assume {:print "$track_local(13,8,7):", $t36} $t36 == $t36;

    // if ($t36) goto L2 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    if ($t36) { goto L2; } else { goto L10; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
L3:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83

    // trace_abort($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    assume {:print "$at(10,45330,45413)"} true;
    assume {:print "$track_abort(13,8):", $t38} $t38 == $t38;

    // $t20 := move($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    $t20 := $t38;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    goto L13;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:924:28+4
    assume {:print "$at(10,45442,45446)"} true;
L2:

    // $t39 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:28+16
    $t39 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t40 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:924:47+15
    call $t40 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(10,45461,45476)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t41 := -($t39, $t40) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:924:45+1
    call $t41 := $Sub($t39, $t40);
    if ($abort_flag) {
        assume {:print "$at(10,45459,45460)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t42 := borrow_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:9+16
    $t42 := $ChildMutation($t33, 0, $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // write_ref($t42, $t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:9+53
    $t42 := $UpdateMutation($t42, $t41);

    // write_back[Reference($t33).total_value]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:9+53
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'#0''_total_value($Dereference($t33), $Dereference($t42)));

    // $t43 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:16+18
    assume {:print "$at(10,45493,45511)"} true;
    $t43 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t44 := >=($t43, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:35+2
    call $t44 := $Ge($t43, $t30);

    // $t45 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:925:68+8
    $t45 := 2;
    assume $IsValid'u64'($t45);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:925:45+32
    // >> opaque call: $t36 := Errors::limit_exceeded($t35)

    // $t46 := opaque begin: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:45+32

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:45+32
    assume $IsValid'u64'($t46);

    // assume Eq<u64>($t46, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:45+32
    assume $IsEqual'u64'($t46, 8);

    // $t46 := opaque end: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:45+32

    // trace_local[tmp#$10]($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    assume {:print "$track_local(13,8,10):", $t46} $t46 == $t46;

    // trace_local[tmp#$9]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    assume {:print "$track_local(13,8,9):", $t44} $t44 == $t44;

    // if ($t44) goto L4 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    if ($t44) { goto L4; } else { goto L11; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
L5:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69

    // trace_abort($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    assume {:print "$at(10,45486,45555)"} true;
    assume {:print "$track_abort(13,8):", $t46} $t46 == $t46;

    // $t20 := move($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    $t20 := $t46;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    goto L13;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:926:30+4
    assume {:print "$at(10,45586,45590)"} true;
L4:

    // $t47 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:926:30+18
    $t47 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t48 := -($t47, $t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:926:49+1
    call $t48 := $Sub($t47, $t30);
    if ($abort_flag) {
        assume {:print "$at(10,45605,45606)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t49 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:926:9+18
    $t49 := $ChildMutation($t33, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // write_ref($t49, $t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:926:9+47
    $t49 := $UpdateMutation($t49, $t48);

    // write_back[Reference($t33).preburn_value]($t49) at /home/ying/diem/language/diem-framework/modules/Diem.move:926:9+47
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t33), $Dereference($t49)));

    // $t50 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:14+17
    assume {:print "$at(10,45771,45788)"} true;
    $t50 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t51 := !($t50) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:13+1
    call $t51 := $Not($t50);

    // if ($t51) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273
    if ($t51) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:931:22+4
    assume {:print "$at(10,45844,45848)"} true;
L6:

    // $t52 := borrow_field<Diem::CurrencyInfo<#0>>.burn_events($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:17+21
    $t52 := $ChildMutation($t33, 9, $burn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // $t53 := pack Diem::BurnEvent($t30, $t18, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:932:17+136
    assume {:print "$at(10,45878,46014)"} true;
    $t53 := $1_Diem_BurnEvent($t30, $t18, $t1);

    // Event::emit_event<Diem::BurnEvent>($t52, $t53) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:930:13+224
    assume {:print "$at(10,45804,46028)"} true;
    call $t52 := $1_Event_emit_event'$1_Diem_BurnEvent'($t52, $t53);
    if ($abort_flag) {
        assume {:print "$at(10,45804,46028)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:930:13+224

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:930:13+224
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:14+1
    assume {:print "$at(10,46028,46029)"} true;
    goto L9;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273
    assume {:print "$at(10,45766,46039)"} true;
L8:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:938:10+1
    assume {:print "$at(10,46039,46040)"} true;
L9:

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:10+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,8,0):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:938:10+1
    goto L12;

    // label L10 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L10:

    // destroy($t0) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L11 at <internal>:1:1+10
L11:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:939:5+1
    assume {:print "$at(10,46045,46046)"} true;
L12:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:939:5+1
    $ret0 := $t0;
    return;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:939:5+1
L13:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:939:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

    // label L18 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L18:

    // destroy($t0) at <internal>:1:1+10

    // goto L15 at <internal>:1:1+10
    goto L15;

    // label L19 at <internal>:1:1+10
L19:

    // destroy($t0) at <internal>:1:1+10

    // goto L17 at <internal>:1:1+10
    goto L17;

}

// fun Diem::burn_with_resource_cap [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1404
procedure {:timeLimit 40} $1_Diem_burn_with_resource_cap$verify(_$t0: $Mutation ($1_Diem_Preburn'#0'), _$t1: int, _$t2: $1_Diem_BurnCapability'#0') returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: $1_Diem_Preburn'#0';
    var $t13: int;
    var $t14: $1_Diem_CurrencyInfo'#0';
    var $t15: $1_Diem_CurrencyInfo'#0';
    var $t16: Vec (int);
    var $t17: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t18: Vec (int);
    var $t19: bool;
    var $t20: int;
    var $t21: $1_Diem_Diem'#0';
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: $Mutation ($1_Diem_Diem'#0');
    var $t28: $1_Diem_Diem'#0';
    var $t29: $1_Diem_Diem'#0';
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t34: int;
    var $t35: int;
    var $t36: bool;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: $Mutation (int);
    var $t43: int;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: int;
    var $t49: $Mutation (int);
    var $t50: bool;
    var $t51: bool;
    var $t52: $Mutation ($1_Event_EventHandle'$1_Diem_BurnEvent');
    var $t53: $1_Diem_BurnEvent;
    var $t0: $Mutation ($1_Diem_Preburn'#0');
    var $t1: int;
    var $t2: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_CurrencyInfo'#0'_$memory#339: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#340: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#341: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#342: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#343: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t27));
    assume IsEmptyVec(p#$Mutation($t33));
    assume IsEmptyVec(p#$Mutation($t42));
    assume IsEmptyVec(p#$Mutation($t49));
    assume IsEmptyVec(p#$Mutation($t52));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1404
    assume {:print "$at(10,44642,46046)"} true;
    assume $IsValid'$1_Diem_Preburn'#0''($Dereference($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1404
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1404
    assume $IsValid'$1_Diem_BurnCapability'#0''($t2);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1404
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t12, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+26
    assume {:print "$at(10,46089,46115)"} true;
    assume ($t12 == $Dereference($t0));

    // assume Identical($t13, select Diem::Diem.value(select Diem::Preburn.to_burn($t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:949:9+36
    assume {:print "$at(10,46495,46531)"} true;
    assume ($t13 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12)));

    // assume Identical($t14, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:9+42
    assume {:print "$at(10,46540,46582)"} true;
    assume ($t14 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t15, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+42
    assume {:print "$at(10,47332,47374)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t16, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:966:9+51
    assume {:print "$at(10,47383,47434)"} true;
    assume ($t16 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t17, select Diem::CurrencyInfo.burn_events($t15)) at /home/ying/diem/language/diem-framework/modules/Diem.move:967:9+30
    assume {:print "$at(10,47443,47473)"} true;
    assume ($t17 == $burn_events#$1_Diem_CurrencyInfo'#0'($t15));

    // @341 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1
    assume {:print "$at(10,44642,44643)"} true;
    $1_Diem_BurnCapability'#0'_$memory#341 := $1_Diem_BurnCapability'#0'_$memory;

    // @339 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#339 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @340 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1
    $1_Diem_MintCapability'#0'_$memory#340 := $1_Diem_MintCapability'#0'_$memory;

    // @343 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1
    $1_Diem_Preburn'#0'_$memory#343 := $1_Diem_Preburn'#0'_$memory;

    // @342 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1
    $1_Diem_PreburnQueue'#0'_$memory#342 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,8,0):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1
    assume {:print "$track_local(13,8,1):", $t1} $t1 == $t1;

    // trace_local[_capability]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:910:5+1
    assume {:print "$track_local(13,8,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    // >> opaque call: $t12 := Diem::currency_code<#0>()
    assume {:print "$at(10,44867,44892)"} true;

    // $t18 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25

    // assume Identical($t19, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    assume ($t19 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t19) goto L18 else goto L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    if ($t19) { goto L18; } else { goto L14; }

    // label L15 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
L15:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    assume {:print "$at(10,44867,44892)"} true;
    assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    goto L13;

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
L14:

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    assume $IsValid'vec'u8''($t18);

    // assume Eq<vector<u8>>($t18, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25
    assume $IsEqual'vec'u8''($t18, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t18 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:915:29+25

    // trace_local[currency_code]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:915:13+13
    assume {:print "$track_local(13,8,3):", $t18} $t18 == $t18;

    // $t21 := get_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:16+15
    assume {:print "$at(10,44961,44976)"} true;
    $t21 := $to_burn#$1_Diem_Preburn'#0'($Dereference($t0));

    // $t22 := get_field<Diem::Diem<#0>>.value($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:16+21
    $t22 := $value#$1_Diem_Diem'#0'($t21);

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:917:40+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := >($t22, $t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:38+1
    call $t24 := $Gt($t22, $t23);

    // $t25 := 4 at /home/ying/diem/language/diem-framework/modules/Diem.move:917:65+14
    $t25 := 4;
    assume $IsValid'u64'($t25);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:917:43+37
    // >> opaque call: $t18 := Errors::invalid_state($t17)

    // $t26 := opaque begin: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:43+37

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:43+37
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:43+37
    assume $IsEqual'u64'($t26, 1);

    // $t26 := opaque end: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:43+37

    // trace_local[tmp#$6]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
    assume {:print "$track_local(13,8,6):", $t26} $t26 == $t26;

    // trace_local[tmp#$5]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
    assume {:print "$track_local(13,8,5):", $t24} $t24 == $t24;

    // if ($t24) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
    if ($t24) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
    assume {:print "$at(10,44954,45026)"} true;
    assume {:print "$track_abort(13,8):", $t26} $t26 == $t26;

    // $t20 := move($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
    $t20 := $t26;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:917:9+72
    goto L13;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:919:58+7
    assume {:print "$at(10,45129,45136)"} true;
L0:

    // $t27 := borrow_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:53+20
    $t27 := $ChildMutation($t0, 0, $to_burn#$1_Diem_Preburn'#0'($Dereference($t0)));

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    // >> opaque call: $t20 := Diem::withdraw_all<#0>($t19)

    // $t28 := opaque begin: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44

    // $t29 := read_ref($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    $t29 := $Dereference($t27);

    // havoc[mut]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t27 := $UpdateMutation($t27, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t27));

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t27));

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    assume $IsValid'$1_Diem_Diem'#0''($t28);

    // assume Eq<u64>(select Diem::Diem.value($t28), select Diem::Diem.value($t29)) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t28), $value#$1_Diem_Diem'#0'($t29));

    // assume Eq<u64>(select Diem::Diem.value($t27), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t27)), 0);

    // $t28 := opaque end: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44

    // write_back[Reference($t0).to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:30+44
    $t0 := $UpdateMutation($t0, $Update'$1_Diem_Preburn'#0''_to_burn($Dereference($t0), $Dereference($t27)));

    // $t30 := unpack Diem::Diem<#0>($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:13+14
    $t30 := $value#$1_Diem_Diem'#0'($t28);

    // trace_local[value]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:919:20+5
    assume {:print "$track_local(13,8,11):", $t30} $t30 == $t30;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,45188,45218)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30

    // assume Identical($t31, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
    assume ($t31 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t31) goto L19 else goto L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
    if ($t31) { goto L19; } else { goto L16; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
L17:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
    assume {:print "$at(10,45188,45218)"} true;
    assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
    goto L13;

    // label L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30
L16:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:921:9+30

    // $t32 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:922:62+38
    assume {:print "$at(10,45281,45319)"} true;
    call $t32 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,45281,45319)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t33 := borrow_global<Diem::CurrencyInfo<#0>>($t32) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:922:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t32)) {
        call $ExecFailureAbort();
    } else {
        $t33 := $Mutation($Global($t32), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t32));
    }
    if ($abort_flag) {
        assume {:print "$at(10,45239,45256)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // trace_local[info]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t33);
    assume {:print "$track_local(13,8,4):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t34 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:16+16
    assume {:print "$at(10,45337,45353)"} true;
    $t34 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t35 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:36+15
    call $t35 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(10,45357,45372)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t36 := >=($t34, $t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:33+2
    call $t36 := $Ge($t34, $t35);

    // $t37 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:76+14
    $t37 := 1;
    assume $IsValid'u64'($t37);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:923:53+38
    // >> opaque call: $t28 := Errors::limit_exceeded($t27)

    // $t38 := opaque begin: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:53+38

    // assume WellFormed($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:53+38
    assume $IsValid'u64'($t38);

    // assume Eq<u64>($t38, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:53+38
    assume $IsEqual'u64'($t38, 8);

    // $t38 := opaque end: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:53+38

    // trace_local[tmp#$8]($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    assume {:print "$track_local(13,8,8):", $t38} $t38 == $t38;

    // trace_local[tmp#$7]($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    assume {:print "$track_local(13,8,7):", $t36} $t36 == $t36;

    // if ($t36) goto L2 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    if ($t36) { goto L2; } else { goto L10; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
L3:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t33)), Le(select Diem::CurrencyInfo.scaling_factor($t33), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33)) <= 10000000000));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    assume {:print "$at(10,45330,45413)"} true;

    // trace_abort($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    assume {:print "$at(10,45330,45413)"} true;
    assume {:print "$track_abort(13,8):", $t38} $t38 == $t38;

    // $t20 := move($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    $t20 := $t38;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:923:9+83
    goto L13;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:924:28+4
    assume {:print "$at(10,45442,45446)"} true;
L2:

    // $t39 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:28+16
    $t39 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t40 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:924:47+15
    call $t40 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(10,45461,45476)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t41 := -($t39, $t40) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:924:45+1
    call $t41 := $Sub($t39, $t40);
    if ($abort_flag) {
        assume {:print "$at(10,45459,45460)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t42 := borrow_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:9+16
    $t42 := $ChildMutation($t33, 0, $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // write_ref($t42, $t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:9+53
    $t42 := $UpdateMutation($t42, $t41);

    // write_back[Reference($t33).total_value]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:924:9+53
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'#0''_total_value($Dereference($t33), $Dereference($t42)));

    // $t43 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:16+18
    assume {:print "$at(10,45493,45511)"} true;
    $t43 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t44 := >=($t43, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:35+2
    call $t44 := $Ge($t43, $t30);

    // $t45 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:925:68+8
    $t45 := 2;
    assume $IsValid'u64'($t45);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:925:45+32
    // >> opaque call: $t36 := Errors::limit_exceeded($t35)

    // $t46 := opaque begin: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:45+32

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:45+32
    assume $IsValid'u64'($t46);

    // assume Eq<u64>($t46, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:45+32
    assume $IsEqual'u64'($t46, 8);

    // $t46 := opaque end: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:45+32

    // trace_local[tmp#$10]($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    assume {:print "$track_local(13,8,10):", $t46} $t46 == $t46;

    // trace_local[tmp#$9]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    assume {:print "$track_local(13,8,9):", $t44} $t44 == $t44;

    // if ($t44) goto L4 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    if ($t44) { goto L4; } else { goto L11; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
L5:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t33)), Le(select Diem::CurrencyInfo.scaling_factor($t33), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    assume {:print "$at(10,45486,45555)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69

    // trace_abort($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    assume {:print "$at(10,45486,45555)"} true;
    assume {:print "$track_abort(13,8):", $t46} $t46 == $t46;

    // $t20 := move($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    $t20 := $t46;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:925:9+69
    goto L13;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:926:30+4
    assume {:print "$at(10,45586,45590)"} true;
L4:

    // $t47 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:926:30+18
    $t47 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t48 := -($t47, $t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:926:49+1
    call $t48 := $Sub($t47, $t30);
    if ($abort_flag) {
        assume {:print "$at(10,45605,45606)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t49 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:926:9+18
    $t49 := $ChildMutation($t33, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // write_ref($t49, $t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:926:9+47
    $t49 := $UpdateMutation($t49, $t48);

    // write_back[Reference($t33).preburn_value]($t49) at /home/ying/diem/language/diem-framework/modules/Diem.move:926:9+47
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t33), $Dereference($t49)));

    // $t50 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:14+17
    assume {:print "$at(10,45771,45788)"} true;
    $t50 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t51 := !($t50) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:13+1
    call $t51 := $Not($t50);

    // if ($t51) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273
    if ($t51) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:931:22+4
    assume {:print "$at(10,45844,45848)"} true;
L6:

    // $t52 := borrow_field<Diem::CurrencyInfo<#0>>.burn_events($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:17+21
    $t52 := $ChildMutation($t33, 9, $burn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // $t53 := pack Diem::BurnEvent($t30, $t18, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:932:17+136
    assume {:print "$at(10,45878,46014)"} true;
    $t53 := $1_Diem_BurnEvent($t30, $t18, $t1);

    // Event::emit_event<Diem::BurnEvent>($t52, $t53) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:930:13+224
    assume {:print "$at(10,45804,46028)"} true;
    call $t52 := $1_Event_emit_event'$1_Diem_BurnEvent'($t52, $t53);
    if ($abort_flag) {
        assume {:print "$at(10,45804,46028)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(13,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t33)), Le(select Diem::CurrencyInfo.scaling_factor($t33), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:930:13+224
    assume {:print "$at(10,45804,46028)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:14+1
    assume {:print "$at(10,46028,46029)"} true;
    goto L9;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273
    assume {:print "$at(10,45766,46039)"} true;
L8:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t33)), Le(select Diem::CurrencyInfo.scaling_factor($t33), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t33)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273
    assume {:print "$at(10,45766,46039)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+273

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:938:10+1
    assume {:print "$at(10,46039,46040)"} true;
L9:

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:10+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,8,0):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:938:10+1
    goto L12;

    // label L10 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L10:

    // destroy($t0) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L11 at <internal>:1:1+10
L11:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:939:5+1
    assume {:print "$at(10,46045,46046)"} true;
L12:

    // assert Not(Eq<u64>($t13, 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:951:9+50
    assume {:print "$at(10,46591,46641)"} true;
    assert {:msg "assert_failed(10,46591,46641): function does not abort under this condition"}
      !$IsEqual'u64'($t13, 0);

    // assert Not(Lt(select Diem::CurrencyInfo.total_value($t14), $t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:952:9+65
    assume {:print "$at(10,46650,46715)"} true;
    assert {:msg "assert_failed(10,46650,46715): function does not abort under this condition"}
      !($total_value#$1_Diem_CurrencyInfo'#0'($t14) < $t13);

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t14), $t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:953:9+67
    assume {:print "$at(10,46724,46791)"} true;
    assert {:msg "assert_failed(10,46724,46791): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t14) < $t13);

    // assert Not(Not(Diem::spec_is_currency[@339]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#339);

    // assert Eq<u128>(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@339]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:957:9+142
    assume {:print "$at(10,46897,47039)"} true;
    assert {:msg "assert_failed(10,46897,47039): post-condition does not hold"}
      $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#339)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12))));

    // assert Eq<u64>(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@339]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:959:9+146
    assume {:print "$at(10,47048,47194)"} true;
    assert {:msg "assert_failed(10,47048,47194): post-condition does not hold"}
      $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#339)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12))));

    // assert Implies(Diem::spec_is_currency[@339]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@339]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#339) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#339))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@340]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#340, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@340]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#340, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@341]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#341, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@341]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#341, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@339]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@339]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#339) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#339))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@342]<Diem::PreburnQueue<#0>>(addr), exists[@343]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#342, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#343, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@342]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#342, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@339]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@339]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#339) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#339))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn($t12)), $t16, $t1), $t17, Not(select Diem::CurrencyInfo.is_synthetic($t15)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:968:9+187
    assume {:print "$at(10,47482,47669)"} true;
    assert {:msg "assert_failed(10,47482,47669): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t17, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12)), $t16, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t15)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn($t12)), $t16, $t1), $t17, Not(select Diem::CurrencyInfo.is_synthetic($t15)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:940:5+297
    assume {:print "$at(10,46051,46348)"} true;
    assert {:msg "assert_failed(10,46051,46348): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t17, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12)), $t16, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t15)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:940:5+297
    $ret0 := $t0;
    return;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:939:5+1
    assume {:print "$at(10,46045,46046)"} true;
L13:

    // assert Or(Or(Or(Eq<u64>($t13, 0), Lt(select Diem::CurrencyInfo.total_value($t14), $t13)), Lt(select Diem::CurrencyInfo.preburn_value($t14), $t13)), Not(Diem::spec_is_currency[@339]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:940:5+297
    assume {:print "$at(10,46051,46348)"} true;
    assert {:msg "assert_failed(10,46051,46348): abort not covered by any of the `aborts_if` clauses"}
      ((($IsEqual'u64'($t13, 0) || ($total_value#$1_Diem_CurrencyInfo'#0'($t14) < $t13)) || ($preburn_value#$1_Diem_CurrencyInfo'#0'($t14) < $t13)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#339));

    // assert Or(Or(Or(And(Eq<u64>($t13, 0), Eq(1, $t20)), And(Lt(select Diem::CurrencyInfo.total_value($t14), $t13), Eq(8, $t20))), And(Lt(select Diem::CurrencyInfo.preburn_value($t14), $t13), Eq(8, $t20))), And(Not(Diem::spec_is_currency[@339]<#0>()), Eq(5, $t20))) at /home/ying/diem/language/diem-framework/modules/Diem.move:940:5+297
    assert {:msg "assert_failed(10,46051,46348): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((($IsEqual'u64'($t13, 0) && $IsEqual'u8'(1, $t20)) || (($total_value#$1_Diem_CurrencyInfo'#0'($t14) < $t13) && $IsEqual'u8'(8, $t20))) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($t14) < $t13) && $IsEqual'u8'(8, $t20))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#339) && $IsEqual'u8'(5, $t20)));

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:940:5+297
    $abort_code := $t20;
    $abort_flag := true;
    return;

    // label L18 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L18:

    // destroy($t0) at <internal>:1:1+10

    // goto L15 at <internal>:1:1+10
    goto L15;

    // label L19 at <internal>:1:1+10
L19:

    // destroy($t0) at <internal>:1:1+10

    // goto L17 at <internal>:1:1+10
    goto L17;

}

// fun Diem::cancel_burn [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+549
procedure {:timeLimit 40} $1_Diem_cancel_burn$verify(_$t0: int, _$t1: int, _$t2: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: $1_Diem_CurrencyInfo'#0';
    var $t7: $1_Diem_CurrencyInfo'#0';
    var $t8: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t9: $1_Diem_CurrencyInfo'#0';
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: Vec (int);
    var $t12: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_BurnCapability'#0';
    var $t20: $1_Diem_CurrencyInfo'#0';
    var $t21: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t23: $1_Diem_CurrencyInfo'#0';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t26: $1_Diem_Diem'#0';
    var $t27: $1_Diem_CurrencyInfo'#0';
    var $t28: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_BurnCapability'#0'_$memory#359: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#360: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#361: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_MintCapability'#0'_$memory#362: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_Preburn'#0'_$memory#363: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:393:17+6
    assume {:print "$at(10,19315,19321)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:393:17+6
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:393:17+6
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:393:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:393:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:393:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t6, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:378:9+91
    assume {:print "$at(10,18439,18530)"} true;
    assume ($t6 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t7, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1023:9+82
    assume {:print "$at(10,49950,50032)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t8, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t8 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t9, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1032:9+82
    assume {:print "$at(10,50391,50473)"} true;
    assume ($t9 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+42
    assume {:print "$at(10,50788,50830)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t11, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1040:9+51
    assume {:print "$at(10,50839,50890)"} true;
    assume ($t11 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, select Diem::CurrencyInfo.cancel_burn_events($t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1041:9+37
    assume {:print "$at(10,50899,50936)"} true;
    assume ($t12 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t10));

    // assume CanModify<Diem::PreburnQueue<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:380:9+57
    assume {:print "$at(10,18649,18706)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t1];

    // assume CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:381:9+80
    assume {:print "$at(10,18715,18795)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // @359 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:381:9+80
    $1_Diem_BurnCapability'#0'_$memory#359 := $1_Diem_BurnCapability'#0'_$memory;

    // @360 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:381:9+80
    $1_Diem_CurrencyInfo'#0'_$memory#360 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @362 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:381:9+80
    $1_Diem_MintCapability'#0'_$memory#362 := $1_Diem_MintCapability'#0'_$memory;

    // @363 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:381:9+80
    $1_Diem_Preburn'#0'_$memory#363 := $1_Diem_Preburn'#0'_$memory;

    // @361 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:381:9+80
    $1_Diem_PreburnQueue'#0'_$memory#361 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$at(10,17858,17859)"} true;
    assume {:print "$track_local(13,9,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$track_local(13,9,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$track_local(13,9,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,18064,18094)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30

    // assume Identical($t13, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume ($t13 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t13) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    if ($t13) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
L5:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t14)) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t14));

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume {:print "$at(10,18064,18094)"} true;
    assume {:print "$track_abort(13,9):", $t14} $t14 == $t14;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
L4:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    // >> opaque call: $t6 := Signer::address_of($t0)
    assume {:print "$at(10,18115,18142)"} true;

    // $t15 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume $IsValid'address'($t15);

    // assume Eq<address>($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume $IsEqual'address'($t15, $1_Signer_spec_address_of($t0));

    // $t15 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27

    // trace_local[addr]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:13+4
    assume {:print "$track_local(13,9,3):", $t15} $t15 == $t15;

    // $t16 := exists<Diem::BurnCapability<#0>>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:16+6
    assume {:print "$at(10,18159,18165)"} true;
    $t16 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t15);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:84+16
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45
    // >> opaque call: $t9 := Errors::requires_capability($t8)

    // $t18 := opaque begin: Errors::requires_capability($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45
    assume $IsEqual'u64'($t18, 4);

    // $t18 := opaque end: Errors::requires_capability($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45

    // trace_local[tmp#$5]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$track_local(13,9,5):", $t18} $t18 == $t18;

    // trace_local[tmp#$4]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$track_local(13,9,4):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
L1:

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$at(10,18152,18245)"} true;
    assume {:print "$track_abort(13,9):", $t18} $t18 == $t18;

    // $t14 := move($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    $t14 := $t18;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:372:13+15
    assume {:print "$at(10,18296,18311)"} true;
L0:

    // $t19 := get_global<Diem::BurnCapability<#0>>($t15) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/Diem.move:373:13+13
    assume {:print "$at(10,18325,18338)"} true;
    if (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t15)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $t15);
    }
    if ($abort_flag) {
        assume {:print "$at(10,18325,18338)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(13,9):", $t14} $t14 == $t14;
        goto L3;
    }

    // assume Identical($t20, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1023:9+82
    assume {:print "$at(10,49950,50032)"} true;
    assume ($t20 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t21, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t21 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t22, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1032:9+82
    assume {:print "$at(10,50391,50473)"} true;
    assume ($t22 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+42
    assume {:print "$at(10,50788,50830)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1040:9+51
    assume {:print "$at(10,50839,50890)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.cancel_burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1041:9+37
    assume {:print "$at(10,50899,50936)"} true;
    assume ($t25 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t23));

    // assert CanModify<Diem::PreburnQueue<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:371:9+146
    assume {:print "$at(10,18255,18401)"} true;
    assert {:msg "assert_failed(10,18255,18401): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t1];

    // assert CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:371:9+146
    assert {:msg "assert_failed(10,18255,18401): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // $t26 := Diem::cancel_burn_with_capability<#0>($t1, $t19, $t2) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/Diem.move:371:9+146
    call $t26 := $1_Diem_cancel_burn_with_capability'#0'($t1, $t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,18255,18401)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(13,9):", $t14} $t14 == $t14;
        goto L3;
    }

    // trace_return[0]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:371:9+146
    assume {:print "$track_return(13,9,0):", $t26} $t26 == $t26;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    assume {:print "$at(10,18406,18407)"} true;
L2:

    // assume Identical($t27, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:379:9+101
    assume {:print "$at(10,18539,18640)"} true;
    assume ($t27 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t28, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1033:9+92
    assume {:print "$at(10,50482,50574)"} true;
    assume ($t28 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assert Not(Not(exists[@359]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:401:9+111
    assume {:print "$at(10,19566,19677)"} true;
    assert {:msg "assert_failed(10,19566,19677): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#359, $1_Signer_spec_address_of($t0));

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t7), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1026:9+66
    assume {:print "$at(10,50145,50211)"} true;
    assert {:msg "assert_failed(10,50145,50211): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t7) < $t2);

    // assert Not(Not(Diem::spec_is_currency[@360]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360);

    // assert Not(Not(exists[@361]<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:848:9+86
    assume {:print "$at(10,41308,41394)"} true;
    assert {:msg "assert_failed(10,41308,41394): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#361, $t1);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t8)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t8, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:849:9+121
    assume {:print "$at(10,41403,41524)"} true;
    assert {:msg "assert_failed(10,41403,41524): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t8)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t8, i)))), $t2)))));

    // assert Eq<Diem::CurrencyInfo<#0>>($t28, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t9, Sub(select Diem::CurrencyInfo.preburn_value($t9), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1034:9+84
    assume {:print "$at(10,50583,50667)"} true;
    assert {:msg "assert_failed(10,50583,50667): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t28, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t9, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t9) - $t2)));

    // assert Implies(exists[@361]<Diem::PreburnQueue<#0>>($t1), exists<Diem::PreburnQueue<#0>>($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:856:9+113
    assume {:print "$at(10,41796,41909)"} true;
    assert {:msg "assert_failed(10,41796,41909): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#361, $t1) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t1));

    // assert exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:385:9+79
    assume {:print "$at(10,18952,19031)"} true;
    assert {:msg "assert_failed(10,18952,19031): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assert exists<Diem::PreburnQueue<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:386:9+56
    assume {:print "$at(10,19040,19096)"} true;
    assert {:msg "assert_failed(10,19040,19096): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t1);

    // assert Eq<Diem::CurrencyInfo<#0>>($t27, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t6, select Diem::CurrencyInfo.preburn_value($t27))) at /home/ying/diem/language/diem-framework/modules/Diem.move:387:9+153
    assume {:print "$at(10,19105,19258)"} true;
    assert {:msg "assert_failed(10,19105,19258): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t27, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t6, $preburn_value#$1_Diem_CurrencyInfo'#0'($t27)));

    // assert Eq<u64>(select Diem::Diem.value($t26), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:392:9+31
    assume {:print "$at(10,19267,19298)"} true;
    assert {:msg "assert_failed(10,19267,19298): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t26), $t2);

    // assert Gt(select Diem::Diem.value($t26), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:393:9+25
    assume {:print "$at(10,19307,19332)"} true;
    assert {:msg "assert_failed(10,19307,19332): post-condition does not hold"}
      ($value#$1_Diem_Diem'#0'($t26) > 0);

    // assert Implies(Diem::spec_is_currency[@360]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@360]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#360))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@362]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#362, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@362]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#362, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@360]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@360]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#360))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@359]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#359, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@359]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#359, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@360]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@360]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#360))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@361]<Diem::PreburnQueue<#0>>(addr), exists[@363]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#361, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#363, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@361]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#361, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@360]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@360]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#360))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t11, $t1), $t12, Not(select Diem::CurrencyInfo.is_synthetic($t10)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1042:9+165
    assume {:print "$at(10,50945,51110)"} true;
    assert {:msg "assert_failed(10,50945,51110): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t12, $1_Diem_CancelBurnEvent($t2, $t11, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t10)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t11, $t1), $t12, Not(select Diem::CurrencyInfo.is_synthetic($t10)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:377:5+926
    assume {:print "$at(10,18412,19338)"} true;
    assert {:msg "assert_failed(10,18412,19338): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t12, $1_Diem_CancelBurnEvent($t2, $t11, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t10)); $EventStore__is_subset(actual, expected)));

    // return $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:377:5+926
    $ret0 := $t26;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    assume {:print "$at(10,18406,18407)"} true;
L3:

    // assert Or(Or(Or(Or(Not(exists[@359]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Lt(select Diem::CurrencyInfo.preburn_value($t7), $t2)), Not(Diem::spec_is_currency[@360]<#0>())), Not(exists[@361]<Diem::PreburnQueue<#0>>($t1))), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t8)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t8, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:377:5+926
    assume {:print "$at(10,18412,19338)"} true;
    assert {:msg "assert_failed(10,18412,19338): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#359, $1_Signer_spec_address_of($t0)) || ($preburn_value#$1_Diem_CurrencyInfo'#0'($t7) < $t2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360)) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#361, $t1)) || (var $range_0 := $Range(0, LenVec($t8)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t8, i)))), $t2))))));

    // assert Or(Or(Or(Or(And(Not(exists[@359]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t14)), And(Lt(select Diem::CurrencyInfo.preburn_value($t7), $t2), Eq(8, $t14))), And(Not(Diem::spec_is_currency[@360]<#0>()), Eq(5, $t14))), And(Not(exists[@361]<Diem::PreburnQueue<#0>>($t1)), Eq(5, $t14))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t8)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t8, i)))), $t2), Eq(1, $t14))) at /home/ying/diem/language/diem-framework/modules/Diem.move:377:5+926
    assert {:msg "assert_failed(10,18412,19338): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#359, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t14)) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($t7) < $t2) && $IsEqual'u8'(8, $t14))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#360) && $IsEqual'u8'(5, $t14))) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#361, $t1) && $IsEqual'u8'(5, $t14))) || ((var $range_0 := $Range(0, LenVec($t8)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t8, i)))), $t2))))) && $IsEqual'u8'(1, $t14)));

    // abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:377:5+926
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun Diem::cancel_burn_with_capability<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:981:5+1201
procedure {:inline 1} $1_Diem_cancel_burn_with_capability'#0'(_$t0: int, _$t1: $1_Diem_BurnCapability'#0', _$t2: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t5: bool;
    var $t6: int;
    var $t7: $1_Diem_Diem'#0';
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t15: $1_Diem_PreburnWithMetadata'#0';
    var $t16: bool;
    var $t17: int;
    var $t18: $1_Diem_Preburn'#0';
    var $t19: Vec (int);
    var $t20: $1_Diem_Diem'#0';
    var $t21: Vec (int);
    var $t22: bool;
    var $t23: int;
    var $t24: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t32: bool;
    var $t33: bool;
    var $t34: $Mutation ($1_Event_EventHandle'$1_Diem_CancelBurnEvent');
    var $t35: $1_Diem_CancelBurnEvent;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_PreburnQueue'#0'_$memory#288: $Memory $1_Diem_PreburnQueue'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t31));
    assume IsEmptyVec(p#$Mutation($t34));

    // bytecode translation starts here
    // assume Identical($t8, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1023:9+82
    assume {:print "$at(10,49950,50032)"} true;
    assume ($t8 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume Identical($t10, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1032:9+82
    assume {:print "$at(10,50391,50473)"} true;
    assume ($t10 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+42
    assume {:print "$at(10,50788,50830)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1040:9+51
    assume {:print "$at(10,50839,50890)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.cancel_burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1041:9+37
    assume {:print "$at(10,50899,50936)"} true;
    assume ($t13 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:981:5+1
    assume {:print "$at(10,48114,48115)"} true;
    assume {:print "$track_local(13,10,0):", $t0} $t0 == $t0;

    // trace_local[_capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:981:5+1
    assume {:print "$track_local(13,10,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:981:5+1
    assume {:print "$track_local(13,10,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    // >> opaque call: $t8 := Diem::remove_preburn_from_queue<#0>($t0, $t2)
    assume {:print "$at(10,48462,48522)"} true;

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // $t15 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume {:print "$at(10,48462,48522)"} true;

    // assume Identical($t16, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume ($t16 == (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t14, i)))), $t2)))))));

    // if ($t16) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
L9:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t17)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) && $IsEqual'u8'(5, $t17)) || ((var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t14, i)))), $t2))))) && $IsEqual'u8'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume {:print "$at(10,48462,48522)"} true;
    assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
L8:

    // @288 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    $1_Diem_PreburnQueue'#0'_$memory#288 := $1_Diem_PreburnQueue'#0'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t0);
    }

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t15);

    // assume Implies(exists[@288]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#288, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t15))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t15))), $t2);

    // $t15 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60

    // ($t18, $t19) := unpack Diem::PreburnWithMetadata<#0>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:13+64
    $t18 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t15);
    $t19 := $metadata#$1_Diem_PreburnWithMetadata'#0'($t15);

    // destroy($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:74+1

    // $t20 := unpack Diem::Preburn<#0>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:43+19
    $t20 := $to_burn#$1_Diem_Preburn'#0'($t18);

    // trace_local[to_burn]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:53+7
    assume {:print "$track_local(13,10,7):", $t20} $t20 == $t20;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    // >> opaque call: $t12 := Diem::currency_code<#0>()
    assume {:print "$at(10,48586,48611)"} true;

    // $t21 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25

    // assume Identical($t22, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume ($t22 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t22) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    if ($t22) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
L11:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume {:print "$at(10,48586,48611)"} true;
    assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
L10:

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume $IsValid'vec'u8''($t21);

    // assume Eq<vector<u8>>($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume $IsEqual'vec'u8''($t21, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t21 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25

    // trace_local[currency_code]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:13+13
    assume {:print "$track_local(13,10,3):", $t21} $t21 == $t21;

    // $t23 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:992:62+38
    assume {:print "$at(10,48674,48712)"} true;
    call $t23 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,48674,48712)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t24 := borrow_global<Diem::CurrencyInfo<#0>>($t23) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:992:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t24 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(10,48632,48649)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[info]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:992:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t24);
    assume {:print "$track_local(13,10,4):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t25 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:16+18
    assume {:print "$at(10,48730,48748)"} true;
    $t25 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t26 := >=($t25, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:35+2
    call $t26 := $Ge($t25, $t2);

    // $t27 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:993:69+8
    $t27 := 2;
    assume $IsValid'u64'($t27);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32
    // >> opaque call: $t18 := Errors::limit_exceeded($t17)

    // $t28 := opaque begin: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32
    assume $IsValid'u64'($t28);

    // assume Eq<u64>($t28, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32
    assume $IsEqual'u64'($t28, 8);

    // $t28 := opaque end: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32

    // trace_local[tmp#$6]($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    assume {:print "$track_local(13,10,6):", $t28} $t28 == $t28;

    // trace_local[tmp#$5]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    assume {:print "$track_local(13,10,5):", $t26} $t26 == $t26;

    // if ($t26) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    if ($t26) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
L1:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70

    // trace_abort($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    assume {:print "$at(10,48723,48793)"} true;
    assume {:print "$track_abort(13,10):", $t28} $t28 == $t28;

    // $t17 := move($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    $t17 := $t28;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:994:30+4
    assume {:print "$at(10,48824,48828)"} true;
L0:

    // $t29 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:994:30+18
    $t29 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t30 := -($t29, $t2) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:994:49+1
    call $t30 := $Sub($t29, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,48843,48844)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t31 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:994:9+18
    $t31 := $ChildMutation($t24, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24)));

    // write_ref($t31, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:994:9+48
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t24).preburn_value]($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:994:9+48
    $t24 := $UpdateMutation($t24, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t24), $Dereference($t31)));

    // $t32 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:14+17
    assume {:print "$at(10,49017,49034)"} true;
    $t32 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t33 := !($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:13+1
    call $t33 := $Not($t32);

    // if ($t33) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
    if ($t33) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:999:22+4
    assume {:print "$at(10,49090,49094)"} true;
L2:

    // $t34 := borrow_field<Diem::CurrencyInfo<#0>>.cancel_burn_events($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:999:17+28
    $t34 := $ChildMutation($t24, 11, $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t24)));

    // $t35 := pack Diem::CancelBurnEvent($t2, $t21, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:17+135
    assume {:print "$at(10,49131,49266)"} true;
    $t35 := $1_Diem_CancelBurnEvent($t2, $t21, $t0);

    // Event::emit_event<Diem::CancelBurnEvent>($t34, $t35) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:998:13+230
    assume {:print "$at(10,49050,49280)"} true;
    call $t34 := $1_Event_emit_event'$1_Diem_CancelBurnEvent'($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(10,49050,49280)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:998:13+230

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:998:13+230
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:14+1
    assume {:print "$at(10,49280,49281)"} true;
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
    assume {:print "$at(10,49012,49291)"} true;
L4:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1008:9+7
    assume {:print "$at(10,49302,49309)"} true;
L5:

    // trace_return[0]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1008:9+7
    assume {:print "$track_return(13,10,0):", $t20} $t20 == $t20;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:5+1
    assume {:print "$at(10,49314,49315)"} true;
L6:

    // return $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:5+1
    $ret0 := $t20;
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:5+1
L7:

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:5+1
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun Diem::cancel_burn_with_capability [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:981:5+1201
procedure {:timeLimit 40} $1_Diem_cancel_burn_with_capability$verify(_$t0: int, _$t1: $1_Diem_BurnCapability'#0', _$t2: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t5: bool;
    var $t6: int;
    var $t7: $1_Diem_Diem'#0';
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t15: $1_Diem_PreburnWithMetadata'#0';
    var $t16: bool;
    var $t17: int;
    var $t18: $1_Diem_Preburn'#0';
    var $t19: Vec (int);
    var $t20: $1_Diem_Diem'#0';
    var $t21: Vec (int);
    var $t22: bool;
    var $t23: int;
    var $t24: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t32: bool;
    var $t33: bool;
    var $t34: $Mutation ($1_Event_EventHandle'$1_Diem_CancelBurnEvent');
    var $t35: $1_Diem_CancelBurnEvent;
    var $t36: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_CurrencyInfo'#0'_$memory#277: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#278: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_MintCapability'#0'_$memory#279: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#280: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_Preburn'#0'_$memory#281: $Memory $1_Diem_Preburn'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#282: $Memory $1_Diem_PreburnQueue'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t31));
    assume IsEmptyVec(p#$Mutation($t34));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1018:17+6
    assume {:print "$at(10,49809,49815)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1018:17+6
    assume $IsValid'$1_Diem_BurnCapability'#0''($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1018:17+6
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1018:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1018:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t8, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1023:9+82
    assume {:print "$at(10,49950,50032)"} true;
    assume ($t8 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume Identical($t10, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1032:9+82
    assume {:print "$at(10,50391,50473)"} true;
    assume ($t10 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1039:9+42
    assume {:print "$at(10,50788,50830)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1040:9+51
    assume {:print "$at(10,50839,50890)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.cancel_burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1041:9+37
    assume {:print "$at(10,50899,50936)"} true;
    assume ($t13 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // assume CanModify<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1011:9+57
    assume {:print "$at(10,49363,49420)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t0];

    // assume CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1012:9+80
    assume {:print "$at(10,49429,49509)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // @280 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1012:9+80
    $1_Diem_BurnCapability'#0'_$memory#280 := $1_Diem_BurnCapability'#0'_$memory;

    // @277 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1012:9+80
    $1_Diem_CurrencyInfo'#0'_$memory#277 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @279 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1012:9+80
    $1_Diem_MintCapability'#0'_$memory#279 := $1_Diem_MintCapability'#0'_$memory;

    // @281 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1012:9+80
    $1_Diem_Preburn'#0'_$memory#281 := $1_Diem_Preburn'#0'_$memory;

    // @278 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1012:9+80
    $1_Diem_PreburnQueue'#0'_$memory#278 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:981:5+1
    assume {:print "$at(10,48114,48115)"} true;
    assume {:print "$track_local(13,10,0):", $t0} $t0 == $t0;

    // trace_local[_capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:981:5+1
    assume {:print "$track_local(13,10,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:981:5+1
    assume {:print "$track_local(13,10,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    // >> opaque call: $t8 := Diem::remove_preburn_from_queue<#0>($t0, $t2)
    assume {:print "$at(10,48462,48522)"} true;

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assert CanModify<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume {:print "$at(10,48462,48522)"} true;
    assert {:msg "assert_failed(10,48462,48522): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t0];

    // $t15 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60

    // assume Identical($t16, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume ($t16 == (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t14, i)))), $t2)))))));

    // if ($t16) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
L9:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t17)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) && $IsEqual'u8'(5, $t17)) || ((var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t14, i)))), $t2))))) && $IsEqual'u8'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume {:print "$at(10,48462,48522)"} true;
    assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
L8:

    // @282 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    $1_Diem_PreburnQueue'#0'_$memory#282 := $1_Diem_PreburnQueue'#0'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t0);
    }

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t15);

    // assume Implies(exists[@282]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#282, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t15))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t15))), $t2);

    // $t15 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:80+60

    // ($t18, $t19) := unpack Diem::PreburnWithMetadata<#0>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:13+64
    $t18 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t15);
    $t19 := $metadata#$1_Diem_PreburnWithMetadata'#0'($t15);

    // destroy($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:74+1

    // $t20 := unpack Diem::Preburn<#0>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:43+19
    $t20 := $to_burn#$1_Diem_Preburn'#0'($t18);

    // trace_local[to_burn]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:988:53+7
    assume {:print "$track_local(13,10,7):", $t20} $t20 == $t20;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    // >> opaque call: $t12 := Diem::currency_code<#0>()
    assume {:print "$at(10,48586,48611)"} true;

    // $t21 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25

    // assume Identical($t22, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume ($t22 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t22) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    if ($t22) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
L11:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume {:print "$at(10,48586,48611)"} true;
    assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
L10:

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume $IsValid'vec'u8''($t21);

    // assume Eq<vector<u8>>($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25
    assume $IsEqual'vec'u8''($t21, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t21 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:991:29+25

    // trace_local[currency_code]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:991:13+13
    assume {:print "$track_local(13,10,3):", $t21} $t21 == $t21;

    // $t23 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:992:62+38
    assume {:print "$at(10,48674,48712)"} true;
    call $t23 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,48674,48712)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // assert CanModify<Diem::CurrencyInfo<#0>>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:992:20+17
    assert {:msg "assert_failed(10,48632,48649): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[$t23];

    // $t24 := borrow_global<Diem::CurrencyInfo<#0>>($t23) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:992:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t24 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(10,48632,48649)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[info]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:992:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t24);
    assume {:print "$track_local(13,10,4):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t25 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:16+18
    assume {:print "$at(10,48730,48748)"} true;
    $t25 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t26 := >=($t25, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:35+2
    call $t26 := $Ge($t25, $t2);

    // $t27 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:993:69+8
    $t27 := 2;
    assume $IsValid'u64'($t27);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32
    // >> opaque call: $t18 := Errors::limit_exceeded($t17)

    // $t28 := opaque begin: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32
    assume $IsValid'u64'($t28);

    // assume Eq<u64>($t28, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32
    assume $IsEqual'u64'($t28, 8);

    // $t28 := opaque end: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:46+32

    // trace_local[tmp#$6]($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    assume {:print "$track_local(13,10,6):", $t28} $t28 == $t28;

    // trace_local[tmp#$5]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    assume {:print "$track_local(13,10,5):", $t26} $t26 == $t26;

    // if ($t26) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    if ($t26) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
L1:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t24)), Le(select Diem::CurrencyInfo.scaling_factor($t24), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t24))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t24)) <= 10000000000));

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    assume {:print "$at(10,48723,48793)"} true;

    // trace_abort($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    assume {:print "$at(10,48723,48793)"} true;
    assume {:print "$track_abort(13,10):", $t28} $t28 == $t28;

    // $t17 := move($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    $t17 := $t28;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:993:9+70
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:994:30+4
    assume {:print "$at(10,48824,48828)"} true;
L0:

    // $t29 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:994:30+18
    $t29 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t30 := -($t29, $t2) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:994:49+1
    call $t30 := $Sub($t29, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,48843,48844)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t31 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:994:9+18
    $t31 := $ChildMutation($t24, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24)));

    // write_ref($t31, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:994:9+48
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t24).preburn_value]($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:994:9+48
    $t24 := $UpdateMutation($t24, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t24), $Dereference($t31)));

    // $t32 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:14+17
    assume {:print "$at(10,49017,49034)"} true;
    $t32 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t33 := !($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:13+1
    call $t33 := $Not($t32);

    // if ($t33) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
    if ($t33) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:999:22+4
    assume {:print "$at(10,49090,49094)"} true;
L2:

    // $t34 := borrow_field<Diem::CurrencyInfo<#0>>.cancel_burn_events($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:999:17+28
    $t34 := $ChildMutation($t24, 11, $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t24)));

    // $t35 := pack Diem::CancelBurnEvent($t2, $t21, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:17+135
    assume {:print "$at(10,49131,49266)"} true;
    $t35 := $1_Diem_CancelBurnEvent($t2, $t21, $t0);

    // Event::emit_event<Diem::CancelBurnEvent>($t34, $t35) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:998:13+230
    assume {:print "$at(10,49050,49280)"} true;
    call $t34 := $1_Event_emit_event'$1_Diem_CancelBurnEvent'($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(10,49050,49280)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t24)), Le(select Diem::CurrencyInfo.scaling_factor($t24), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t24))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t24)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:998:13+230
    assume {:print "$at(10,49050,49280)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:14+1
    assume {:print "$at(10,49280,49281)"} true;
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
    assume {:print "$at(10,49012,49291)"} true;
L4:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t24)), Le(select Diem::CurrencyInfo.scaling_factor($t24), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t24))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t24)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279
    assume {:print "$at(10,49012,49291)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:997:9+279

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1008:9+7
    assume {:print "$at(10,49302,49309)"} true;
L5:

    // trace_return[0]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1008:9+7
    assume {:print "$track_return(13,10,0):", $t20} $t20 == $t20;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:5+1
    assume {:print "$at(10,49314,49315)"} true;
L6:

    // assume Identical($t36, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1033:9+92
    assume {:print "$at(10,50482,50574)"} true;
    assume ($t36 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t8), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1026:9+66
    assume {:print "$at(10,50145,50211)"} true;
    assert {:msg "assert_failed(10,50145,50211): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t8) < $t2);

    // assert Not(Not(Diem::spec_is_currency[@277]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277);

    // assert Not(Not(exists[@278]<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:848:9+86
    assume {:print "$at(10,41308,41394)"} true;
    assert {:msg "assert_failed(10,41308,41394): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#278, $t0);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t9)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t9, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:849:9+121
    assume {:print "$at(10,41403,41524)"} true;
    assert {:msg "assert_failed(10,41403,41524): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t9)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t9, i)))), $t2)))));

    // assert Eq<Diem::CurrencyInfo<#0>>($t36, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t10, Sub(select Diem::CurrencyInfo.preburn_value($t10), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1034:9+84
    assume {:print "$at(10,50583,50667)"} true;
    assert {:msg "assert_failed(10,50583,50667): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t36, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t10, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t10) - $t2)));

    // assert Implies(exists[@278]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:856:9+113
    assume {:print "$at(10,41796,41909)"} true;
    assert {:msg "assert_failed(10,41796,41909): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#278, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assert exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1016:9+79
    assume {:print "$at(10,49673,49752)"} true;
    assert {:msg "assert_failed(10,49673,49752): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assert Eq<u64>(select Diem::Diem.value($t20), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1017:9+31
    assume {:print "$at(10,49761,49792)"} true;
    assert {:msg "assert_failed(10,49761,49792): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t20), $t2);

    // assert Gt(select Diem::Diem.value($t20), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1018:9+25
    assume {:print "$at(10,49801,49826)"} true;
    assert {:msg "assert_failed(10,49801,49826): post-condition does not hold"}
      ($value#$1_Diem_Diem'#0'($t20) > 0);

    // assert Implies(Diem::spec_is_currency[@277]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@277]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#277))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@279]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#279, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@279]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#279, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@277]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@277]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#277))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@280]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#280, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@280]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#280, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@277]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@277]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#277))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@278]<Diem::PreburnQueue<#0>>(addr), exists[@281]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#278, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#281, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@278]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#278, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@277]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@277]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#277))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t12, $t0), $t13, Not(select Diem::CurrencyInfo.is_synthetic($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1042:9+165
    assume {:print "$at(10,50945,51110)"} true;
    assert {:msg "assert_failed(10,50945,51110): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t13, $1_Diem_CancelBurnEvent($t2, $t12, $t0), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t11)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t12, $t0), $t13, Not(select Diem::CurrencyInfo.is_synthetic($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:5+512
    assume {:print "$at(10,49320,49832)"} true;
    assert {:msg "assert_failed(10,49320,49832): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t13, $1_Diem_CancelBurnEvent($t2, $t12, $t0), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t11)); $EventStore__is_subset(actual, expected)));

    // return $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:5+512
    $ret0 := $t20;
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:5+1
    assume {:print "$at(10,49314,49315)"} true;
L7:

    // assert Or(Or(Or(Lt(select Diem::CurrencyInfo.preburn_value($t8), $t2), Not(Diem::spec_is_currency[@277]<#0>())), Not(exists[@278]<Diem::PreburnQueue<#0>>($t0))), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t9)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t9, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:5+512
    assume {:print "$at(10,49320,49832)"} true;
    assert {:msg "assert_failed(10,49320,49832): abort not covered by any of the `aborts_if` clauses"}
      (((($preburn_value#$1_Diem_CurrencyInfo'#0'($t8) < $t2) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277)) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#278, $t0)) || (var $range_0 := $Range(0, LenVec($t9)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t9, i)))), $t2))))));

    // assert Or(Or(Or(And(Lt(select Diem::CurrencyInfo.preburn_value($t8), $t2), Eq(8, $t17)), And(Not(Diem::spec_is_currency[@277]<#0>()), Eq(5, $t17))), And(Not(exists[@278]<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t17))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t9)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t9, i)))), $t2), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:5+512
    assert {:msg "assert_failed(10,49320,49832): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((($preburn_value#$1_Diem_CurrencyInfo'#0'($t8) < $t2) && $IsEqual'u8'(8, $t17)) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#277) && $IsEqual'u8'(5, $t17))) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#278, $t0) && $IsEqual'u8'(5, $t17))) || ((var $range_0 := $Range(0, LenVec($t9)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t9, i)))), $t2))))) && $IsEqual'u8'(1, $t17)));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:5+512
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun Diem::create_preburn<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+255
procedure {:inline 1} $1_Diem_create_preburn'$1_XUS_XUS'(_$t0: int) returns ($ret0: $1_Diem_Preburn'$1_XUS_XUS')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: $1_Diem_Diem'$1_XUS_XUS';
    var $t7: $1_Diem_Preburn'$1_XUS_XUS';
    var $t0: int;
    var $temp_0'$1_Diem_Preburn'$1_XUS_XUS'': $1_Diem_Preburn'$1_XUS_XUS';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+1
    assume {:print "$at(10,26506,26507)"} true;
    assume {:print "$track_local(13,11,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,26613,26658)"} true;

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume {:print "$at(10,26613,26658)"} true;

    // assume Identical($t3, Or(Or(Not(exists<Roles::RoleId>($t2)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume ($t3 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t2) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t2)), Eq(5, $t4)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t2) && $IsEqual'u8'(5, $t4)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume {:print "$at(10,26613,26658)"} true;
    assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,26668,26698)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30

    // assume Identical($t5, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume ($t5 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume {:print "$at(10,26668,26698)"} true;
    assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30

    // $t6 := Diem::zero<#0>() on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:555:38+16
    assume {:print "$at(10,26737,26753)"} true;
    call $t6 := $1_Diem_zero'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(10,26737,26753)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t7 := pack Diem::Preburn<#0>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:9+47
    $t7 := $1_Diem_Preburn'$1_XUS_XUS'($t6);

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:9+47
    assume {:print "$track_return(13,11,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    assume {:print "$at(10,26760,26761)"} true;
L1:

    // return $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::create_preburn<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+255
procedure {:inline 1} $1_Diem_create_preburn'$1_XDX_XDX'(_$t0: int) returns ($ret0: $1_Diem_Preburn'$1_XDX_XDX')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: $1_Diem_Diem'$1_XDX_XDX';
    var $t7: $1_Diem_Preburn'$1_XDX_XDX';
    var $t0: int;
    var $temp_0'$1_Diem_Preburn'$1_XDX_XDX'': $1_Diem_Preburn'$1_XDX_XDX';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+1
    assume {:print "$at(10,26506,26507)"} true;
    assume {:print "$track_local(13,11,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,26613,26658)"} true;

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume {:print "$at(10,26613,26658)"} true;

    // assume Identical($t3, Or(Or(Not(exists<Roles::RoleId>($t2)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume ($t3 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t2) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t2)), Eq(5, $t4)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t2) && $IsEqual'u8'(5, $t4)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume {:print "$at(10,26613,26658)"} true;
    assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,26668,26698)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30

    // assume Identical($t5, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume ($t5 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume {:print "$at(10,26668,26698)"} true;
    assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30

    // $t6 := Diem::zero<#0>() on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:555:38+16
    assume {:print "$at(10,26737,26753)"} true;
    call $t6 := $1_Diem_zero'$1_XDX_XDX'();
    if ($abort_flag) {
        assume {:print "$at(10,26737,26753)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t7 := pack Diem::Preburn<#0>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:9+47
    $t7 := $1_Diem_Preburn'$1_XDX_XDX'($t6);

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:9+47
    assume {:print "$track_return(13,11,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    assume {:print "$at(10,26760,26761)"} true;
L1:

    // return $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::create_preburn [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+255
procedure {:timeLimit 40} $1_Diem_create_preburn$verify(_$t0: int) returns ($ret0: $1_Diem_Preburn'#0')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: $1_Diem_Diem'#0';
    var $t7: $1_Diem_Preburn'#0';
    var $t0: int;
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $1_Roles_RoleId_$memory#321: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#322: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#323: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#324: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#325: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#326: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(10,26506,26761)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+255
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+255
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+255
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // @321 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+1
    assume {:print "$at(10,26506,26507)"} true;
    $1_Roles_RoleId_$memory#321 := $1_Roles_RoleId_$memory;

    // @324 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+1
    $1_Diem_BurnCapability'#0'_$memory#324 := $1_Diem_BurnCapability'#0'_$memory;

    // @322 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#322 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @323 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+1
    $1_Diem_MintCapability'#0'_$memory#323 := $1_Diem_MintCapability'#0'_$memory;

    // @326 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+1
    $1_Diem_Preburn'#0'_$memory#326 := $1_Diem_Preburn'#0'_$memory;

    // @325 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+1
    $1_Diem_PreburnQueue'#0'_$memory#325 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:550:5+1
    assume {:print "$track_local(13,11,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,26613,26658)"} true;

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume {:print "$at(10,26613,26658)"} true;

    // assume Identical($t3, Or(Or(Not(exists<Roles::RoleId>($t2)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume ($t3 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t2) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t3) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t2)), Eq(5, $t4)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 1), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t2) && $IsEqual'u8'(5, $t4)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 1) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t4)));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    assume {:print "$at(10,26613,26658)"} true;
    assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:553:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,26668,26698)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30

    // assume Identical($t5, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume ($t5 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    assume {:print "$at(10,26668,26698)"} true;
    assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:554:9+30

    // $t6 := Diem::zero<#0>() on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:555:38+16
    assume {:print "$at(10,26737,26753)"} true;
    call $t6 := $1_Diem_zero'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,26737,26753)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(13,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t7 := pack Diem::Preburn<#0>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:9+47
    $t7 := $1_Diem_Preburn'#0'($t6);

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:555:9+47
    assume {:print "$track_return(13,11,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    assume {:print "$at(10,26760,26761)"} true;
L1:

    // assert Not(Not(exists[@321]<Roles::RoleId>($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#321, $t1);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@321]<Roles::RoleId>($t1)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#321, $t1)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Not(Diem::spec_is_currency[@322]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322);

    // assert Implies(Diem::spec_is_currency[@322]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@322]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#322))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@323]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#323, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@323]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#323, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@322]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@322]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#322))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@324]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#324, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@324]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#324, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@322]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@322]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#322))));

    // assert Implies(Diem::spec_is_currency[@322]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@322]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#322))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@325]<Diem::PreburnQueue<#0>>(addr), exists[@326]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#325, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#326, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@325]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#325, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@322]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@322]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#322))));

    // return $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:556:5+1
    assume {:print "$at(10,26760,26761)"} true;
L2:

    // assert Or(Or(Or(Not(exists[@321]<Roles::RoleId>($t1)), Neq<u64>(select Roles::RoleId.role_id(global[@321]<Roles::RoleId>($t1)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Not(Diem::spec_is_currency[@322]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:557:5+76
    assume {:print "$at(10,26766,26842)"} true;
    assert {:msg "assert_failed(10,26766,26842): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_Roles_RoleId_$memory#321, $t1) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#321, $t1)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322));

    // assert Or(Or(Or(And(Not(exists[@321]<Roles::RoleId>($t1)), Eq(5, $t4)), And(Neq<u64>(select Roles::RoleId.role_id(global[@321]<Roles::RoleId>($t1)), 1), Eq(3, $t4))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t4))), And(Not(Diem::spec_is_currency[@322]<#0>()), Eq(5, $t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:557:5+76
    assert {:msg "assert_failed(10,26766,26842): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_Roles_RoleId_$memory#321, $t1) && $IsEqual'u8'(5, $t4)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#321, $t1)), 1) && $IsEqual'u8'(3, $t4))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t4))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#322) && $IsEqual'u8'(5, $t4)));

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:557:5+76
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Diem::deposit [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:5+248
procedure {:timeLimit 40} $1_Diem_deposit$verify(_$t0: $Mutation ($1_Diem_Diem'#0'), _$t1: $1_Diem_Diem'#0') returns ($ret0: $Mutation ($1_Diem_Diem'#0'))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $1_Diem_Diem'#0';
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $Mutation (int);
    var $t0: $Mutation ($1_Diem_Diem'#0');
    var $t1: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#130: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#131: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#132: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#133: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#134: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t16));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:5+248
    assume {:print "$at(10,57375,57623)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:5+248
    assume $IsValid'$1_Diem_Diem'#0''($t1);

    // @132 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:5+1
    $1_Diem_BurnCapability'#0'_$memory#132 := $1_Diem_BurnCapability'#0'_$memory;

    // @130 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#130 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @131 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:5+1
    $1_Diem_MintCapability'#0'_$memory#131 := $1_Diem_MintCapability'#0'_$memory;

    // @134 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:5+1
    $1_Diem_Preburn'#0'_$memory#134 := $1_Diem_Preburn'#0'_$memory;

    // @133 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:5+1
    $1_Diem_PreburnQueue'#0'_$memory#133 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t5 := read_ref($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:5+1
    $t5 := $Dereference($t0);

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:5+1
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,13,0):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // trace_local[check]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1187:5+1
    assume {:print "$track_local(13,13,1):", $t1} $t1 == $t1;

    // $t6 := unpack Diem::Diem<#0>($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1188:13+14
    assume {:print "$at(10,57475,57489)"} true;
    $t6 := $value#$1_Diem_Diem'#0'($t1);

    // trace_local[value]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1188:20+5
    assume {:print "$track_local(13,13,4):", $t6} $t6 == $t6;

    // $t7 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:16+7
    assume {:print "$at(10,57514,57521)"} true;
    $t7 := 18446744073709551615;
    assume $IsValid'u64'($t7);

    // $t8 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:26+10
    $t8 := $value#$1_Diem_Diem'#0'($Dereference($t0));

    // $t9 := -($t7, $t8) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:24+1
    call $t9 := $Sub($t7, $t8);
    if ($abort_flag) {
        assume {:print "$at(10,57522,57523)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(13,13):", $t10} $t10 == $t10;
        goto L3;
    }

    // $t11 := >=($t9, $t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:37+2
    call $t11 := $Ge($t9, $t6);

    // $t12 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:70+5
    $t12 := 7;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:47+29
    // >> opaque call: $t11 := Errors::limit_exceeded($t10)

    // $t13 := opaque begin: Errors::limit_exceeded($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:47+29

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:47+29
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:47+29
    assume $IsEqual'u64'($t13, 8);

    // $t13 := opaque end: Errors::limit_exceeded($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:47+29

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:9+68
    assume {:print "$track_local(13,13,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:9+68
    assume {:print "$track_local(13,13,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:9+68
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:9+68
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:9+68

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:9+68
    assume {:print "$at(10,57507,57575)"} true;
    assume {:print "$track_abort(13,13):", $t13} $t13 == $t13;

    // $t10 := move($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:9+68
    $t10 := $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1189:9+68
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1190:22+4
    assume {:print "$at(10,57598,57602)"} true;
L0:

    // $t14 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1190:22+10
    $t14 := $value#$1_Diem_Diem'#0'($Dereference($t0));

    // $t15 := +($t14, $t6) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1190:33+1
    call $t15 := $AddU64($t14, $t6);
    if ($abort_flag) {
        assume {:print "$at(10,57609,57610)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(13,13):", $t10} $t10 == $t10;
        goto L3;
    }

    // $t16 := borrow_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1190:9+10
    $t16 := $ChildMutation($t0, 0, $value#$1_Diem_Diem'#0'($Dereference($t0)));

    // write_ref($t16, $t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:1190:9+31
    $t16 := $UpdateMutation($t16, $t15);

    // write_back[Reference($t0).value]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1190:9+31
    $t0 := $UpdateMutation($t0, $Update'$1_Diem_Diem'#0''_value($Dereference($t0), $Dereference($t16)));

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1190:40+1
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,13,0):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1191:5+1
    assume {:print "$at(10,57622,57623)"} true;
L2:

    // assert Not(Gt(Add(select Diem::Diem.value($t5), select Diem::Diem.value($t1)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1200:9+73
    assume {:print "$at(10,57889,57962)"} true;
    assert {:msg "assert_failed(10,57889,57962): function does not abort under this condition"}
      !(($value#$1_Diem_Diem'#0'($t5) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615);

    // assert Eq<u64>(select Diem::Diem.value($t0), Add(select Diem::Diem.value($t5), select Diem::Diem.value($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1195:9+52
    assume {:print "$at(10,57717,57769)"} true;
    assert {:msg "assert_failed(10,57717,57769): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t0)), ($value#$1_Diem_Diem'#0'($t5) + $value#$1_Diem_Diem'#0'($t1)));

    // assert Implies(Diem::spec_is_currency[@130]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@130]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#130) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#130))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@131]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#131, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@131]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#131, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@130]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@130]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#130) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#130))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@132]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#132, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@132]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#132, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@130]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@130]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#130) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#130))));

    // assert Implies(Diem::spec_is_currency[@130]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@130]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#130) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#130))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@133]<Diem::PreburnQueue<#0>>(addr), exists[@134]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#133, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#134, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@133]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#133, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@130]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@130]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#130) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#130))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t0;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1191:5+1
    assume {:print "$at(10,57622,57623)"} true;
L3:

    // assert Gt(Add(select Diem::Diem.value($t5), select Diem::Diem.value($t1)), 18446744073709551615) at /home/ying/diem/language/diem-framework/modules/Diem.move:1192:5+147
    assume {:print "$at(10,57628,57775)"} true;
    assert {:msg "assert_failed(10,57628,57775): abort not covered by any of the `aborts_if` clauses"}
      (($value#$1_Diem_Diem'#0'($t5) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615);

    // assert And(Gt(Add(select Diem::Diem.value($t5), select Diem::Diem.value($t1)), 18446744073709551615), Eq(8, $t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1192:5+147
    assert {:msg "assert_failed(10,57628,57775): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((($value#$1_Diem_Diem'#0'($t5) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615) && $IsEqual'u8'(8, $t10));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1192:5+147
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun Diem::destroy_zero [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:5+188
procedure {:timeLimit 40} $1_Diem_destroy_zero$verify(_$t0: $1_Diem_Diem'#0') returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t0: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#125: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#126: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#127: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#128: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#129: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:5+188
    assume {:print "$at(10,58215,58403)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // @127 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:5+1
    $1_Diem_BurnCapability'#0'_$memory#127 := $1_Diem_BurnCapability'#0'_$memory;

    // @125 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#125 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @126 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:5+1
    $1_Diem_MintCapability'#0'_$memory#126 := $1_Diem_MintCapability'#0'_$memory;

    // @129 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:5+1
    $1_Diem_Preburn'#0'_$memory#129 := $1_Diem_Preburn'#0'_$memory;

    // @128 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:5+1
    $1_Diem_PreburnQueue'#0'_$memory#128 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1206:5+1
    assume {:print "$track_local(13,14,0):", $t0} $t0 == $t0;

    // $t4 := unpack Diem::Diem<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1207:13+14
    assume {:print "$at(10,58292,58306)"} true;
    $t4 := $value#$1_Diem_Diem'#0'($t0);

    // trace_local[value]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1207:20+5
    assume {:print "$track_local(13,14,3):", $t4} $t4 == $t4;

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:25+1
    assume {:print "$at(10,58339,58340)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := ==($t4, $t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:22+2
    $t6 := $IsEqual'u64'($t4, $t5);

    // $t7 := 8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:53+28
    $t7 := 8;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:28+54
    // >> opaque call: $t8 := Errors::invalid_argument($t7)

    // $t8 := opaque begin: Errors::invalid_argument($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:28+54

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:28+54
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:28+54
    assume $IsEqual'u64'($t8, 7);

    // $t8 := opaque end: Errors::invalid_argument($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:28+54

    // trace_local[tmp#$2]($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:9+74
    assume {:print "$track_local(13,14,2):", $t8} $t8 == $t8;

    // trace_local[tmp#$1]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:9+74
    assume {:print "$track_local(13,14,1):", $t6} $t6 == $t6;

    // if ($t6) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:9+74
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:9+74
L1:

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:9+74
    assume {:print "$at(10,58323,58397)"} true;
    assume {:print "$track_abort(13,14):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:9+74
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1208:9+74
L0:

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1209:5+1
    assume {:print "$at(10,58402,58403)"} true;
L2:

    // assert Not(Gt(select Diem::Diem.value($t0), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1212:9+55
    assume {:print "$at(10,58459,58514)"} true;
    assert {:msg "assert_failed(10,58459,58514): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($t0) > 0);

    // assert Implies(Diem::spec_is_currency[@125]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@125]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#125) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#125))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@126]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#126, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@126]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#126, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@125]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@125]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#125) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#125))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@127]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#127, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@127]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#127, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@125]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@125]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#125) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#125))));

    // assert Implies(Diem::spec_is_currency[@125]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@125]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#125) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#125))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@128]<Diem::PreburnQueue<#0>>(addr), exists[@129]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#128, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#129, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@128]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#128, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@125]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@125]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#125) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#125))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1209:5+1
    assume {:print "$at(10,58402,58403)"} true;
L3:

    // assert Gt(select Diem::Diem.value($t0), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1210:5+112
    assume {:print "$at(10,58408,58520)"} true;
    assert {:msg "assert_failed(10,58408,58520): abort not covered by any of the `aborts_if` clauses"}
      ($value#$1_Diem_Diem'#0'($t0) > 0);

    // assert And(Gt(select Diem::Diem.value($t0), 0), Eq(7, $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1210:5+112
    assert {:msg "assert_failed(10,58408,58520): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (($value#$1_Diem_Diem'#0'($t0) > 0) && $IsEqual'u8'(7, $t8));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1210:5+112
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun Diem::fractional_part [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:5+226
procedure {:timeLimit 40} $1_Diem_fractional_part$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: int;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#218: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#219: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#220: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#221: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#222: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:5+226
    assume {:print "$at(10,67892,68118)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @220 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:5+1
    $1_Diem_BurnCapability'#0'_$memory#220 := $1_Diem_BurnCapability'#0'_$memory;

    // @218 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#218 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @219 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:5+1
    $1_Diem_MintCapability'#0'_$memory#219 := $1_Diem_MintCapability'#0'_$memory;

    // @222 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:5+1
    $1_Diem_Preburn'#0'_$memory#222 := $1_Diem_Preburn'#0'_$memory;

    // @221 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1424:5+1
    $1_Diem_PreburnQueue'#0'_$memory#221 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,67979,68009)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:9+30
    assume {:print "$at(10,67979,68009)"} true;
    assume {:print "$track_abort(13,15):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1426:9+30

    // $t2 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1427:47+38
    assume {:print "$at(10,68057,68095)"} true;
    call $t2 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,68057,68095)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,15):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1427:9+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,68019,68032)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,15):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.fractional_part($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1427:9+93
    $t4 := $fractional_part#$1_Diem_CurrencyInfo'#0'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1427:9+93
    assume {:print "$track_return(13,15,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1428:5+1
    assume {:print "$at(10,68117,68118)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@218]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@218]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#218) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#218))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@219]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#219, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@219]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#219, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@218]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@218]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#218) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#218))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@220]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#220, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@220]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#220, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@218]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@218]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#218) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#218))));

    // assert Implies(Diem::spec_is_currency[@218]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@218]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#218) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#218))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@221]<Diem::PreburnQueue<#0>>(addr), exists[@222]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#221, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#222, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@221]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#221, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@218]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@218]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#218) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#218))));

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1428:5+1
    assume {:print "$at(10,68117,68118)"} true;
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1428:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::is_SCS_currency<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:5+216
procedure {:inline 1} $1_Diem_is_SCS_currency'#0'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: bool;
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: $1_Diem_CurrencyInfo'#0';
    var $t5: bool;
    var $t6: bool;
    var $t7: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t1 := Diem::is_currency<#0>() on_abort goto L5 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+23
    assume {:print "$at(10,66725,66748)"} true;
    call $t1 := $1_Diem_is_currency'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,66725,66748)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(13,17):", $t2} $t2 == $t2;
        goto L5;
    }

    // if ($t1) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1398:48+38
    assume {:print "$at(10,66799,66837)"} true;
L0:

    // $t3 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L5 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1398:48+38
    call $t3 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,66799,66837)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(13,17):", $t2} $t2 == $t2;
        goto L5;
    }

    // $t4 := get_global<Diem::CurrencyInfo<#0>>($t3) on_abort goto L5 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1398:10+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t3);
    }
    if ($abort_flag) {
        assume {:print "$at(10,66761,66774)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(13,17):", $t2} $t2 == $t2;
        goto L5;
    }

    // $t5 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1398:10+90
    $t5 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($t4);

    // $t6 := !($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1398:9+1
    call $t6 := $Not($t5);

    // $t0 := $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    assume {:print "$at(10,66725,66851)"} true;
    $t0 := $t6;

    // trace_local[tmp#$0]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    assume {:print "$track_local(13,17,0):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
L2:

    // $t7 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    $t7 := false;
    assume $IsValid'bool'($t7);

    // $t0 := $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    $t0 := $t7;

    // trace_local[tmp#$0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    assume {:print "$track_local(13,17,0):", $t7} $t7 == $t7;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
L3:

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    assume {:print "$track_return(13,17,0):", $t0} $t0 == $t0;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1399:5+1
    assume {:print "$at(10,66856,66857)"} true;
L4:

    // return $t0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1399:5+1
    $ret0 := $t0;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1399:5+1
L5:

    // abort($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1399:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun Diem::is_SCS_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:5+216
procedure {:timeLimit 40} $1_Diem_is_SCS_currency$verify() returns ($ret0: bool)
{
    // declare local variables
    var $t0: bool;
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: $1_Diem_CurrencyInfo'#0';
    var $t5: bool;
    var $t6: bool;
    var $t7: bool;
    var $temp_0'bool': bool;
    var $1_Diem_CurrencyInfo'#0'_$memory#135: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#136: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#137: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#138: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#139: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:5+216
    assume {:print "$at(10,66641,66857)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @137 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:5+1
    $1_Diem_BurnCapability'#0'_$memory#137 := $1_Diem_BurnCapability'#0'_$memory;

    // @135 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#135 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @136 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:5+1
    $1_Diem_MintCapability'#0'_$memory#136 := $1_Diem_MintCapability'#0'_$memory;

    // @139 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:5+1
    $1_Diem_Preburn'#0'_$memory#139 := $1_Diem_Preburn'#0'_$memory;

    // @138 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1396:5+1
    $1_Diem_PreburnQueue'#0'_$memory#138 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t1 := Diem::is_currency<#0>() on_abort goto L5 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+23
    assume {:print "$at(10,66725,66748)"} true;
    call $t1 := $1_Diem_is_currency'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,66725,66748)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(13,17):", $t2} $t2 == $t2;
        goto L5;
    }

    // if ($t1) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1398:48+38
    assume {:print "$at(10,66799,66837)"} true;
L0:

    // $t3 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L5 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1398:48+38
    call $t3 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,66799,66837)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(13,17):", $t2} $t2 == $t2;
        goto L5;
    }

    // $t4 := get_global<Diem::CurrencyInfo<#0>>($t3) on_abort goto L5 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1398:10+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t3);
    }
    if ($abort_flag) {
        assume {:print "$at(10,66761,66774)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(13,17):", $t2} $t2 == $t2;
        goto L5;
    }

    // $t5 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1398:10+90
    $t5 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($t4);

    // $t6 := !($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1398:9+1
    call $t6 := $Not($t5);

    // $t0 := $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    assume {:print "$at(10,66725,66851)"} true;
    $t0 := $t6;

    // trace_local[tmp#$0]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    assume {:print "$track_local(13,17,0):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
L2:

    // $t7 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    $t7 := false;
    assume $IsValid'bool'($t7);

    // $t0 := $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    $t0 := $t7;

    // trace_local[tmp#$0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    assume {:print "$track_local(13,17,0):", $t7} $t7 == $t7;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
L3:

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1397:9+126
    assume {:print "$track_return(13,17,0):", $t0} $t0 == $t0;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1399:5+1
    assume {:print "$at(10,66856,66857)"} true;
L4:

    // assert Implies(Diem::spec_is_currency[@135]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@135]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#135) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#135))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@136]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#136, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@136]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#136, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@135]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@135]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#135) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#135))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@137]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#137, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@137]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#137, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@135]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@135]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#135) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#135))));

    // assert Implies(Diem::spec_is_currency[@135]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@135]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#135) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#135))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@138]<Diem::PreburnQueue<#0>>(addr), exists[@139]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#138, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#139, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@138]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#138, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@135]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@135]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#135) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#135))));

    // return $t0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t0;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1399:5+1
    assume {:print "$at(10,66856,66857)"} true;
L5:

    // abort($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1399:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun Diem::is_currency<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+134
procedure {:inline 1} $1_Diem_is_currency'#0'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1393:40+38
    assume {:print "$at(10,66590,66628)"} true;
    call $t0 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,66590,66628)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,18):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := exists<Diem::CurrencyInfo<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1393:9+6
    $t2 := $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t0);

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1393:9+70
    assume {:print "$track_return(13,18,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+1
    assume {:print "$at(10,66634,66635)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::is_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+134
procedure {:timeLimit 40} $1_Diem_is_currency$verify() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'bool': bool;
    var $1_Diem_CurrencyInfo'#0'_$memory#110: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#111: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#112: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#113: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#114: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+134
    assume {:print "$at(10,66501,66635)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @112 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+1
    $1_Diem_BurnCapability'#0'_$memory#112 := $1_Diem_BurnCapability'#0'_$memory;

    // @110 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#110 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @111 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+1
    $1_Diem_MintCapability'#0'_$memory#111 := $1_Diem_MintCapability'#0'_$memory;

    // @114 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+1
    $1_Diem_Preburn'#0'_$memory#114 := $1_Diem_Preburn'#0'_$memory;

    // @113 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1392:5+1
    $1_Diem_PreburnQueue'#0'_$memory#113 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t0 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1393:40+38
    assume {:print "$at(10,66590,66628)"} true;
    call $t0 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,66590,66628)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,18):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := exists<Diem::CurrencyInfo<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1393:9+6
    $t2 := $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t0);

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1393:9+70
    assume {:print "$track_return(13,18,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+1
    assume {:print "$at(10,66634,66635)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@110]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@110]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#110) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#110))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@111]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#111, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@111]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#111, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@110]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@110]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#110) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#110))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@112]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#112, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@112]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#112, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@110]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@110]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#110) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#110))));

    // assert Implies(Diem::spec_is_currency[@110]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@110]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#110) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#110))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@113]<Diem::PreburnQueue<#0>>(addr), exists[@114]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#113, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#114, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@113]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#113, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@110]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@110]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#110) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#110))));

    // return $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+1
    assume {:print "$at(10,66634,66635)"} true;
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1394:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::is_synthetic_currency<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+267
procedure {:inline 1} $1_Diem_is_synthetic_currency'#0'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: $1_Diem_CurrencyInfo'#0';
    var $t6: bool;
    var $t7: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t2 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L5 with $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1406:20+38
    assume {:print "$at(10,67099,67137)"} true;
    call $t2 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,67099,67137)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(13,19):", $t3} $t3 == $t3;
        goto L5;
    }

    // trace_local[addr]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1406:13+4
    assume {:print "$track_local(13,19,0):", $t2} $t2 == $t2;

    // $t4 := exists<Diem::CurrencyInfo<#0>>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+6
    assume {:print "$at(10,67147,67153)"} true;
    $t4 := $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2);

    // if ($t4) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    if ($t4) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:51+4
    assume {:print "$at(10,67237,67241)"} true;
L0:

    // $t5 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L5 with $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:13+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,67199,67212)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(13,19):", $t3} $t3 == $t3;
        goto L5;
    }

    // $t6 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:13+56
    $t6 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($t5);

    // $t1 := $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    assume {:print "$at(10,67147,67255)"} true;
    $t1 := $t6;

    // trace_local[tmp#$1]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    assume {:print "$track_local(13,19,1):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
L2:

    // $t7 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    $t7 := false;
    assume $IsValid'bool'($t7);

    // $t1 := $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    $t1 := $t7;

    // trace_local[tmp#$1]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    assume {:print "$track_local(13,19,1):", $t7} $t7 == $t7;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
L3:

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    assume {:print "$track_return(13,19,0):", $t1} $t1 == $t1;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1409:5+1
    assume {:print "$at(10,67260,67261)"} true;
L4:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1409:5+1
    $ret0 := $t1;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1409:5+1
L5:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1409:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Diem::is_synthetic_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+267
procedure {:timeLimit 40} $1_Diem_is_synthetic_currency$verify() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: $1_Diem_CurrencyInfo'#0';
    var $t6: bool;
    var $t7: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_Diem_CurrencyInfo'#0'_$memory#100: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#101: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#102: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#103: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#104: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+267
    assume {:print "$at(10,66994,67261)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @102 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+1
    $1_Diem_BurnCapability'#0'_$memory#102 := $1_Diem_BurnCapability'#0'_$memory;

    // @100 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#100 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @101 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+1
    $1_Diem_MintCapability'#0'_$memory#101 := $1_Diem_MintCapability'#0'_$memory;

    // @104 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+1
    $1_Diem_Preburn'#0'_$memory#104 := $1_Diem_Preburn'#0'_$memory;

    // @103 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+1
    $1_Diem_PreburnQueue'#0'_$memory#103 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t2 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L5 with $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1406:20+38
    assume {:print "$at(10,67099,67137)"} true;
    call $t2 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,67099,67137)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(13,19):", $t3} $t3 == $t3;
        goto L5;
    }

    // trace_local[addr]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1406:13+4
    assume {:print "$track_local(13,19,0):", $t2} $t2 == $t2;

    // $t4 := exists<Diem::CurrencyInfo<#0>>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+6
    assume {:print "$at(10,67147,67153)"} true;
    $t4 := $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2);

    // if ($t4) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    if ($t4) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:51+4
    assume {:print "$at(10,67237,67241)"} true;
L0:

    // $t5 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L5 with $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:13+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,67199,67212)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(13,19):", $t3} $t3 == $t3;
        goto L5;
    }

    // $t6 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:13+56
    $t6 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($t5);

    // $t1 := $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    assume {:print "$at(10,67147,67255)"} true;
    $t1 := $t6;

    // trace_local[tmp#$1]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    assume {:print "$track_local(13,19,1):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
L2:

    // $t7 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    $t7 := false;
    assume $IsValid'bool'($t7);

    // $t1 := $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    $t1 := $t7;

    // trace_local[tmp#$1]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    assume {:print "$track_local(13,19,1):", $t7} $t7 == $t7;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
L3:

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1407:9+108
    assume {:print "$track_return(13,19,0):", $t1} $t1 == $t1;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1409:5+1
    assume {:print "$at(10,67260,67261)"} true;
L4:

    // assert Implies(Diem::spec_is_currency[@100]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@100]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#100) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#100))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@101]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#101, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@101]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#101, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@100]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@100]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#100) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#100))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@102]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#102, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@102]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#102, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@100]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@100]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#100) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#100))));

    // assert Implies(Diem::spec_is_currency[@100]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@100]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#100) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#100))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@103]<Diem::PreburnQueue<#0>>(addr), exists[@104]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#103, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#104, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@103]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#103, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@100]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@100]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#100) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#100))));

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t1;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1409:5+1
    assume {:print "$at(10,67260,67261)"} true;
L5:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1409:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Diem::join [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1173:5+153
procedure {:timeLimit 40} $1_Diem_join$verify(_$t0: $1_Diem_Diem'#0', _$t1: $1_Diem_Diem'#0') returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t2: $1_Diem_Diem'#0';
    var $t3: $Mutation ($1_Diem_Diem'#0');
    var $t4: $1_Diem_Diem'#0';
    var $t5: bool;
    var $t6: int;
    var $t7: $1_Diem_Diem'#0';
    var $t0: $1_Diem_Diem'#0';
    var $t1: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#188: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#189: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#190: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#191: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#192: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t3));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1180:17+6
    assume {:print "$at(10,57144,57150)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1180:17+6
    assume $IsValid'$1_Diem_Diem'#0''($t1);

    // @190 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1173:5+1
    assume {:print "$at(10,56850,56851)"} true;
    $1_Diem_BurnCapability'#0'_$memory#190 := $1_Diem_BurnCapability'#0'_$memory;

    // @188 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1173:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#188 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @189 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1173:5+1
    $1_Diem_MintCapability'#0'_$memory#189 := $1_Diem_MintCapability'#0'_$memory;

    // @192 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1173:5+1
    $1_Diem_Preburn'#0'_$memory#192 := $1_Diem_Preburn'#0'_$memory;

    // @191 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1173:5+1
    $1_Diem_PreburnQueue'#0'_$memory#191 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t2 := copy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1173:5+1
    $t2 := $t0;

    // trace_local[coin1]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1173:5+1
    assume {:print "$track_local(13,20,0):", $t0} $t0 == $t0;

    // trace_local[coin2]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1173:5+1
    assume {:print "$track_local(13,20,1):", $t1} $t1 == $t1;

    // $t3 := borrow_local($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:17+10
    assume {:print "$at(10,56964,56974)"} true;
    $t3 := $Mutation($Local(0), EmptyVec(), $t0);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
    // >> opaque call: Diem::deposit<#0>($t2, $t1)

    // opaque begin: Diem::deposit<#0>($t3, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26

    // $t4 := read_ref($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
    $t4 := $Dereference($t3);

    // assume Identical($t5, Gt(Add(select Diem::Diem.value($t3), select Diem::Diem.value($t1)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
    assume ($t5 == (($value#$1_Diem_Diem'#0'($Dereference($t3)) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
L4:

    // assume And(Gt(Add(select Diem::Diem.value($t3), select Diem::Diem.value($t1)), 18446744073709551615), Eq(8, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
    assume ((($value#$1_Diem_Diem'#0'($Dereference($t3)) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615) && $IsEqual'u8'(8, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
    assume {:print "$at(10,56956,56982)"} true;
    assume {:print "$track_abort(13,20):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
L3:

    // havoc[mut]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t3 := $UpdateMutation($t3, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t3));

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t3));

    // assume Eq<u64>(select Diem::Diem.value($t3), Add(select Diem::Diem.value($t4), select Diem::Diem.value($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t3)), ($value#$1_Diem_Diem'#0'($t4) + $value#$1_Diem_Diem'#0'($t1)));

    // opaque end: Diem::deposit<#0>($t3, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26

    // write_back[LocalRoot($t0)@]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1174:9+26
    $t0 := $Dereference($t3);

    // $t7 := move($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1175:9+5
    assume {:print "$at(10,56992,56997)"} true;
    $t7 := $t0;

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1175:9+5
    assume {:print "$track_return(13,20,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1176:5+1
    assume {:print "$at(10,57002,57003)"} true;
L1:

    // assert Not(Gt(Add(select Diem::Diem.value($t2), select Diem::Diem.value($t1)), MaxU64())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1179:9+76
    assume {:print "$at(10,57051,57127)"} true;
    assert {:msg "assert_failed(10,57051,57127): function does not abort under this condition"}
      !(($value#$1_Diem_Diem'#0'($t2) + $value#$1_Diem_Diem'#0'($t1)) > $MAX_U64);

    // assert Eq<u64>(select Diem::Diem.value($t7), Add(select Diem::Diem.value($t2), select Diem::Diem.value($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1180:9+50
    assume {:print "$at(10,57136,57186)"} true;
    assert {:msg "assert_failed(10,57136,57186): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t7), ($value#$1_Diem_Diem'#0'($t2) + $value#$1_Diem_Diem'#0'($t1)));

    // assert Implies(Diem::spec_is_currency[@188]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@188]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#188) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#188))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@189]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#189, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@189]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#189, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@188]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@188]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#188) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#188))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@190]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#190, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@190]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#190, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@188]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@188]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#188) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#188))));

    // assert Implies(Diem::spec_is_currency[@188]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@188]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#188) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#188))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@191]<Diem::PreburnQueue<#0>>(addr), exists[@192]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#191, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#192, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@191]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#191, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@188]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@188]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#188) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#188))));

    // return $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1176:5+1
    assume {:print "$at(10,57002,57003)"} true;
L2:

    // assert Gt(Add(select Diem::Diem.value($t2), select Diem::Diem.value($t1)), MaxU64()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1177:5+184
    assume {:print "$at(10,57008,57192)"} true;
    assert {:msg "assert_failed(10,57008,57192): abort not covered by any of the `aborts_if` clauses"}
      (($value#$1_Diem_Diem'#0'($t2) + $value#$1_Diem_Diem'#0'($t1)) > $MAX_U64);

    // assert And(Gt(Add(select Diem::Diem.value($t2), select Diem::Diem.value($t1)), MaxU64()), Eq(8, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1177:5+184
    assert {:msg "assert_failed(10,57008,57192): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((($value#$1_Diem_Diem'#0'($t2) + $value#$1_Diem_Diem'#0'($t1)) > $MAX_U64) && $IsEqual'u8'(8, $t6));

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1177:5+184
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Diem::market_cap [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:5+218
procedure {:timeLimit 40} $1_Diem_market_cap$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: int;
    var $temp_0'u128': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#213: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#214: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#215: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#216: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#217: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:5+218
    assume {:print "$at(10,64667,64885)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @215 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:5+1
    $1_Diem_BurnCapability'#0'_$memory#215 := $1_Diem_BurnCapability'#0'_$memory;

    // @213 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#213 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @214 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:5+1
    $1_Diem_MintCapability'#0'_$memory#214 := $1_Diem_MintCapability'#0'_$memory;

    // @217 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:5+1
    $1_Diem_Preburn'#0'_$memory#217 := $1_Diem_Preburn'#0'_$memory;

    // @216 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1351:5+1
    $1_Diem_PreburnQueue'#0'_$memory#216 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,64750,64780)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:9+30
    assume {:print "$at(10,64750,64780)"} true;
    assume {:print "$track_abort(13,21):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1353:9+30

    // $t2 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1354:47+38
    assume {:print "$at(10,64828,64866)"} true;
    call $t2 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,64828,64866)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,21):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1354:9+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,64790,64803)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,21):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.total_value($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1354:9+89
    $t4 := $total_value#$1_Diem_CurrencyInfo'#0'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1354:9+89
    assume {:print "$track_return(13,21,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1355:5+1
    assume {:print "$at(10,64884,64885)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@213]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@213]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#213) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#213))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@214]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#214, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@214]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#214, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@213]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@213]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#213) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#213))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@215]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#215, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@215]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#215, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@213]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@213]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#213) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#213))));

    // assert Implies(Diem::spec_is_currency[@213]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@213]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#213) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#213))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@216]<Diem::PreburnQueue<#0>>(addr), exists[@217]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#216, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#217, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@216]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#216, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@213]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@213]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#213) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#213))));

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1355:5+1
    assume {:print "$at(10,64884,64885)"} true;
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1355:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::mint [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:296:5+396
procedure {:timeLimit 40} $1_Diem_mint$verify(_$t0: int, _$t1: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_Diem_CurrencyInfo'#0';
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Diem_MintCapability'#0';
    var $t12: $1_Diem_CurrencyInfo'#0';
    var $t13: $1_Diem_CurrencyInfo'#0';
    var $t14: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t15: $1_Diem_MintEvent;
    var $t16: $1_Diem_Diem'#0';
    var $t17: bool;
    var $t18: $1_Diem_CurrencyInfo'#0';
    var $t19: $1_Diem_MintEvent;
    var $t20: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t21: bool;
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_MintCapability'#0'_$memory#354: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#355: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_BurnCapability'#0'_$memory#356: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#357: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#358: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:312:17+21
    assume {:print "$at(10,15602,15623)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:312:17+21
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:312:17+21
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:312:17+21
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume Identical($t5, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:452:9+91
    assume {:print "$at(10,21848,21939)"} true;
    assume ($t5 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:306:9+80
    assume {:print "$at(10,15165,15245)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // @356 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:306:9+80
    $1_Diem_BurnCapability'#0'_$memory#356 := $1_Diem_BurnCapability'#0'_$memory;

    // @355 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:306:9+80
    $1_Diem_CurrencyInfo'#0'_$memory#355 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @354 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:306:9+80
    $1_Diem_MintCapability'#0'_$memory#354 := $1_Diem_MintCapability'#0'_$memory;

    // @358 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:306:9+80
    $1_Diem_Preburn'#0'_$memory#358 := $1_Diem_Preburn'#0'_$memory;

    // @357 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:306:9+80
    $1_Diem_PreburnQueue'#0'_$memory#357 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:296:5+1
    assume {:print "$at(10,14744,14745)"} true;
    assume {:print "$track_local(13,22,0):", $t0} $t0 == $t0;

    // trace_local[value]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:296:5+1
    assume {:print "$track_local(13,22,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:298:20+27
    // >> opaque call: $t5 := Signer::address_of($t0)
    assume {:print "$at(10,14886,14913)"} true;

    // $t6 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:20+27

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:20+27
    assume $IsValid'address'($t6);

    // assume Eq<address>($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:20+27
    assume $IsEqual'address'($t6, $1_Signer_spec_address_of($t0));

    // $t6 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:20+27

    // trace_local[addr]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:298:13+4
    assume {:print "$track_local(13,22,2):", $t6} $t6 == $t6;

    // $t7 := exists<Diem::MintCapability<#0>>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:16+6
    assume {:print "$at(10,14930,14936)"} true;
    $t7 := $ResourceExists($1_Diem_MintCapability'#0'_$memory, $t6);

    // $t8 := 9 at /home/ying/diem/language/diem-framework/modules/Diem.move:299:84+16
    $t8 := 9;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:299:56+45
    // >> opaque call: $t8 := Errors::requires_capability($t7)

    // $t9 := opaque begin: Errors::requires_capability($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:56+45

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:56+45
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:56+45
    assume $IsEqual'u64'($t9, 4);

    // $t9 := opaque end: Errors::requires_capability($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:56+45

    // trace_local[tmp#$4]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
    assume {:print "$track_local(13,22,4):", $t9} $t9 == $t9;

    // trace_local[tmp#$3]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
    assume {:print "$track_local(13,22,3):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
L1:

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
    assume {:print "$at(10,14923,15016)"} true;
    assume {:print "$track_abort(13,22):", $t9} $t9 == $t9;

    // $t10 := move($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
    $t10 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:299:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:301:13+5
    assume {:print "$at(10,15060,15065)"} true;
L0:

    // $t11 := get_global<Diem::MintCapability<#0>>($t6) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/Diem.move:302:13+13
    assume {:print "$at(10,15079,15092)"} true;
    if (!$ResourceExists($1_Diem_MintCapability'#0'_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $t6);
    }
    if ($abort_flag) {
        assume {:print "$at(10,15079,15092)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(13,22):", $t10} $t10 == $t10;
        goto L3;
    }

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    // >> opaque call: $t10 := Diem::mint_with_capability<#0>($t1, $t9)
    assume {:print "$at(10,15026,15134)"} true;

    // assume Identical($t12, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:452:9+91
    assume {:print "$at(10,21848,21939)"} true;
    assume ($t12 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t13, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:460:9+91
    assume {:print "$at(10,22364,22455)"} true;
    assume ($t13 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t14, select Diem::CurrencyInfo.mint_events($t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:461:9+39
    assume {:print "$at(10,22464,22503)"} true;
    assume ($t14 == $mint_events#$1_Diem_CurrencyInfo'#0'($t13));

    // assume Identical($t15, pack Diem::MintEvent($t1, select Diem::CurrencyInfo.currency_code($t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:462:9+114
    assume {:print "$at(10,22512,22626)"} true;
    assume ($t15 == $1_Diem_MintEvent($t1, $currency_code#$1_Diem_CurrencyInfo'#0'($t13)));

    // assert CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume {:print "$at(10,15026,15134)"} true;
    assert {:msg "assert_failed(10,15026,15134): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // $t16 := opaque begin: Diem::mint_with_capability<#0>($t1, $t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108

    // assume Identical($t17, Or(Or(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<#0>())), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), $t1), MaxU128())), Not(Diem::spec_is_currency<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume ($t17 == ((!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || (($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $t1) > $MAX_U128)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // if ($t17) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    if ($t17) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
L5:

    // assume Or(Or(And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<#0>())), Eq(1, $t10)), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), $t1), MaxU128()), Eq(8, $t10))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t10))) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume (((!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'u8'(1, $t10)) || ((($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $t1) > $MAX_U128) && $IsEqual'u8'(8, $t10))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume {:print "$at(10,15026,15134)"} true;
    assume {:print "$track_abort(13,22):", $t10} $t10 == $t10;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
L4:

    // modifies global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_CurrencyInfo'#0'';
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS(), $temp_0'$1_Diem_CurrencyInfo'#0'');
    } else {
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceRemove($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());
    }

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume $IsValid'$1_Diem_Diem'#0''($t16);

    // assume Identical($t18, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume {:print "$at(10,21948,22049)"} true;
    assume ($t18 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assume exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assume Eq<Diem::CurrencyInfo<#0>>($t18, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t12, Add(select Diem::CurrencyInfo.total_value($t12), $t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume $IsEqual'$1_Diem_CurrencyInfo'#0''($t18, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t12, ($total_value#$1_Diem_CurrencyInfo'#0'($t12) + $t1)));

    // assume Eq<u64>(select Diem::Diem.value($t16), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t16), $t1);

    // assume Identical($t19, $t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume ($t19 == $t15);

    // assume Identical($t20, $t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume ($t20 == $t14);

    // assume Identical($t21, Not(select Diem::CurrencyInfo.is_synthetic($t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume ($t21 == !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t13));

    // emit_event($t19, $t20, $t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume {:print "$at(10,15026,15134)"} true;
    $es := $CondExtendEventStore'$1_Diem_MintEvent'($es, $t20, $t19, $t21);

    // $t16 := opaque end: Diem::mint_with_capability<#0>($t1, $t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume {:print "$at(10,21948,22049)"} true;

    // trace_return[0]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:300:9+108
    assume {:print "$at(10,15026,15134)"} true;
    assume {:print "$track_return(13,22,0):", $t16} $t16 == $t16;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:304:5+1
    assume {:print "$at(10,15139,15140)"} true;
L2:

    // assume Identical($t22, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume {:print "$at(10,21948,22049)"} true;
    assume ($t22 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assert Not(Not(exists[@354]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:309:9+111
    assume {:print "$at(10,15433,15544)"} true;
    assert {:msg "assert_failed(10,15433,15544): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_MintCapability'#0'_$memory#354, $1_Signer_spec_address_of($t0));

    // assert Not(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@355]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:446:9+78
    assume {:print "$at(10,21552,21630)"} true;
    assert {:msg "assert_failed(10,21552,21630): function does not abort under this condition"}
      !!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355));

    // assert Not(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@355]<#0>()), $t1), MaxU128())) at /home/ying/diem/language/diem-framework/modules/Diem.move:447:9+102
    assume {:print "$at(10,21639,21741)"} true;
    assert {:msg "assert_failed(10,21639,21741): function does not abort under this condition"}
      !(($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355)) + $t1) > $MAX_U128);

    // assert Not(Not(Diem::spec_is_currency[@355]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355);

    // assert exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:307:9+79
    assume {:print "$at(10,15254,15333)"} true;
    assert {:msg "assert_failed(10,15254,15333): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assert exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:454:9+79
    assume {:print "$at(10,22058,22137)"} true;
    assert {:msg "assert_failed(10,22058,22137): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assert Eq<Diem::CurrencyInfo<#0>>($t22, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t5, Add(select Diem::CurrencyInfo.total_value($t5), $t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:455:9+106
    assume {:print "$at(10,22146,22252)"} true;
    assert {:msg "assert_failed(10,22146,22252): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t22, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t5, ($total_value#$1_Diem_CurrencyInfo'#0'($t5) + $t1)));

    // assert Eq<u64>(select Diem::Diem.value($t16), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:456:9+30
    assume {:print "$at(10,22261,22291)"} true;
    assert {:msg "assert_failed(10,22261,22291): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t16), $t1);

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@354]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#354, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@354]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#354, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@355]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@355]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@356]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#356, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@356]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#356, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@355]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@355]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355))));

    // assert Implies(Diem::spec_is_currency[@355]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@355]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@357]<Diem::PreburnQueue<#0>>(addr), exists[@358]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#357, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#358, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@357]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#357, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@355]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@355]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355))));

    // return $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t16;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:304:5+1
    assume {:print "$at(10,15139,15140)"} true;
L3:

    // assert Or(Or(Or(Not(exists[@354]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0))), Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@355]<#0>()))), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@355]<#0>()), $t1), MaxU128())), Not(Diem::spec_is_currency[@355]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:305:5+485
    assume {:print "$at(10,15145,15630)"} true;
    assert {:msg "assert_failed(10,15145,15630): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#354, $1_Signer_spec_address_of($t0)) || !$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355))) || (($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355)) + $t1) > $MAX_U128)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355));

    // assert Or(Or(Or(And(Not(exists[@354]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t10)), And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@355]<#0>())), Eq(1, $t10))), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@355]<#0>()), $t1), MaxU128()), Eq(8, $t10))), And(Not(Diem::spec_is_currency[@355]<#0>()), Eq(5, $t10))) at /home/ying/diem/language/diem-framework/modules/Diem.move:305:5+485
    assert {:msg "assert_failed(10,15145,15630): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#354, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t10)) || (!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355)) && $IsEqual'u8'(1, $t10))) || ((($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#355)) + $t1) > $MAX_U128) && $IsEqual'u8'(8, $t10))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#355) && $IsEqual'u8'(5, $t10)));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:305:5+485
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun Diem::mint_with_capability [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:410:5+1088
procedure {:timeLimit 40} $1_Diem_mint_with_capability$verify(_$t0: int, _$t1: $1_Diem_MintCapability'#0') returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: $1_Diem_CurrencyInfo'#0';
    var $t10: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t11: $1_Diem_MintEvent;
    var $t12: bool;
    var $t13: int;
    var $t14: Vec (int);
    var $t15: bool;
    var $t16: int;
    var $t17: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t32: bool;
    var $t33: bool;
    var $t34: $Mutation ($1_Event_EventHandle'$1_Diem_MintEvent');
    var $t35: $1_Diem_MintEvent;
    var $t36: $1_Diem_Diem'#0';
    var $t37: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: $1_Diem_MintCapability'#0';
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_MintCapability'#0'': $1_Diem_MintCapability'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_CurrencyInfo'#0'_$memory#289: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#290: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#291: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#292: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#293: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t31));
    assume IsEmptyVec(p#$Mutation($t34));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:440:17+21
    assume {:print "$at(10,21371,21392)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:440:17+21
    assume $IsValid'$1_Diem_MintCapability'#0''($t1);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:440:17+21
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t8, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:452:9+91
    assume {:print "$at(10,21848,21939)"} true;
    assume ($t8 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t9, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:460:9+91
    assume {:print "$at(10,22364,22455)"} true;
    assume ($t9 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assume Identical($t10, select Diem::CurrencyInfo.mint_events($t9)) at /home/ying/diem/language/diem-framework/modules/Diem.move:461:9+39
    assume {:print "$at(10,22464,22503)"} true;
    assume ($t10 == $mint_events#$1_Diem_CurrencyInfo'#0'($t9));

    // assume Identical($t11, pack Diem::MintEvent($t0, select Diem::CurrencyInfo.currency_code($t9))) at /home/ying/diem/language/diem-framework/modules/Diem.move:462:9+114
    assume {:print "$at(10,22512,22626)"} true;
    assume ($t11 == $1_Diem_MintEvent($t0, $currency_code#$1_Diem_CurrencyInfo'#0'($t9)));

    // assume CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:437:9+80
    assume {:print "$at(10,21146,21226)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // @291 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:437:9+80
    $1_Diem_BurnCapability'#0'_$memory#291 := $1_Diem_BurnCapability'#0'_$memory;

    // @289 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:437:9+80
    $1_Diem_CurrencyInfo'#0'_$memory#289 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @290 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:437:9+80
    $1_Diem_MintCapability'#0'_$memory#290 := $1_Diem_MintCapability'#0'_$memory;

    // @293 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:437:9+80
    $1_Diem_Preburn'#0'_$memory#293 := $1_Diem_Preburn'#0'_$memory;

    // @292 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:437:9+80
    $1_Diem_PreburnQueue'#0'_$memory#292 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[value]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:410:5+1
    assume {:print "$at(10,19994,19995)"} true;
    assume {:print "$track_local(13,23,0):", $t0} $t0 == $t0;

    // trace_local[_capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:410:5+1
    assume {:print "$track_local(13,23,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:414:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,20165,20195)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:414:9+30

    // assume Identical($t12, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:414:9+30
    assume ($t12 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t12) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:414:9+30
    if ($t12) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:414:9+30
L11:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:414:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:414:9+30
    assume {:print "$at(10,20165,20195)"} true;
    assume {:print "$track_abort(13,23):", $t13} $t13 == $t13;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:414:9+30
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:414:9+30
L10:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:414:9+30

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:415:29+25
    // >> opaque call: $t8 := Diem::currency_code<#0>()
    assume {:print "$at(10,20225,20250)"} true;

    // $t14 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:415:29+25

    // assume Identical($t15, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:415:29+25
    assume ($t15 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t15) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:415:29+25
    if ($t15) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:415:29+25
L13:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:415:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:415:29+25
    assume {:print "$at(10,20225,20250)"} true;
    assume {:print "$track_abort(13,23):", $t13} $t13 == $t13;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:415:29+25
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:415:29+25
L12:

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:415:29+25
    assume $IsValid'vec'u8''($t14);

    // assume Eq<vector<u8>>($t14, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:415:29+25
    assume $IsEqual'vec'u8''($t14, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t14 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:415:29+25

    // trace_local[currency_code]($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:415:13+13
    assume {:print "$track_local(13,23,2):", $t14} $t14 == $t14;

    // $t16 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:417:62+38
    assume {:print "$at(10,20370,20408)"} true;
    call $t16 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,20370,20408)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(13,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // assert CanModify<Diem::CurrencyInfo<#0>>($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:20+17
    assert {:msg "assert_failed(10,20328,20345): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[$t16];

    // $t17 := borrow_global<Diem::CurrencyInfo<#0>>($t16) on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:417:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t16)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t16), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t16));
    }
    if ($abort_flag) {
        assume {:print "$at(10,20328,20345)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(13,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // trace_local[info]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:417:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t17);
    assume {:print "$track_local(13,23,3):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t18 := get_field<Diem::CurrencyInfo<#0>>.can_mint($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:16+13
    assume {:print "$at(10,20426,20439)"} true;
    $t18 := $can_mint#$1_Diem_CurrencyInfo'#0'($Dereference($t17));

    // $t19 := 5 at /home/ying/diem/language/diem-framework/modules/Diem.move:418:53+20
    $t19 := 5;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:418:31+43
    // >> opaque call: $t13 := Errors::invalid_state($t12)

    // $t20 := opaque begin: Errors::invalid_state($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:31+43

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:31+43
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:31+43
    assume $IsEqual'u64'($t20, 1);

    // $t20 := opaque end: Errors::invalid_state($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:31+43

    // trace_local[tmp#$5]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:9+66
    assume {:print "$track_local(13,23,5):", $t20} $t20 == $t20;

    // trace_local[tmp#$4]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:9+66
    assume {:print "$track_local(13,23,4):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:418:9+66
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:418:9+66
L1:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t17)), Le(select Diem::CurrencyInfo.scaling_factor($t17), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17)) <= 10000000000));

    // destroy($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:9+66
    assume {:print "$at(10,20419,20485)"} true;

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:9+66
    assume {:print "$at(10,20419,20485)"} true;
    assume {:print "$track_abort(13,23):", $t20} $t20 == $t20;

    // $t13 := move($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:418:9+66
    $t13 := $t20;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:418:9+66
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:419:16+8
    assume {:print "$at(10,20502,20510)"} true;
L0:

    // $t21 := 340282366920938463463374607431768211455 at /home/ying/diem/language/diem-framework/modules/Diem.move:419:16+8
    $t21 := 340282366920938463463374607431768211455;
    assume $IsValid'u128'($t21);

    // $t22 := get_field<Diem::CurrencyInfo<#0>>.total_value($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:419:27+16
    $t22 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t17));

    // $t23 := -($t21, $t22) on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:419:25+1
    call $t23 := $Sub($t21, $t22);
    if ($abort_flag) {
        assume {:print "$at(10,20511,20512)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(13,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // $t24 := (u128)($t0) on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:419:47+15
    call $t24 := $CastU128($t0);
    if ($abort_flag) {
        assume {:print "$at(10,20533,20548)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(13,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // $t25 := >=($t23, $t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:419:44+2
    call $t25 := $Ge($t23, $t24);

    // $t26 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:419:87+14
    $t26 := 1;
    assume $IsValid'u64'($t26);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:419:64+38
    // >> opaque call: $t20 := Errors::limit_exceeded($t19)

    // $t27 := opaque begin: Errors::limit_exceeded($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:419:64+38

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:419:64+38
    assume $IsValid'u64'($t27);

    // assume Eq<u64>($t27, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:419:64+38
    assume $IsEqual'u64'($t27, 8);

    // $t27 := opaque end: Errors::limit_exceeded($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:419:64+38

    // trace_local[tmp#$7]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:419:9+94
    assume {:print "$track_local(13,23,7):", $t27} $t27 == $t27;

    // trace_local[tmp#$6]($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:419:9+94
    assume {:print "$track_local(13,23,6):", $t25} $t25 == $t25;

    // if ($t25) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:419:9+94
    if ($t25) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:419:9+94
L3:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t17)), Le(select Diem::CurrencyInfo.scaling_factor($t17), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17)) <= 10000000000));

    // destroy($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:419:9+94
    assume {:print "$at(10,20495,20589)"} true;

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:419:9+94
    assume {:print "$at(10,20495,20589)"} true;
    assume {:print "$track_abort(13,23):", $t27} $t27 == $t27;

    // $t13 := move($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:419:9+94
    $t13 := $t27;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:419:9+94
    goto L9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:420:28+4
    assume {:print "$at(10,20618,20622)"} true;
L2:

    // $t28 := get_field<Diem::CurrencyInfo<#0>>.total_value($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:420:28+16
    $t28 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t17));

    // $t29 := (u128)($t0) on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:420:47+15
    call $t29 := $CastU128($t0);
    if ($abort_flag) {
        assume {:print "$at(10,20637,20652)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(13,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // $t30 := +($t28, $t29) on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:420:45+1
    call $t30 := $AddU128($t28, $t29);
    if ($abort_flag) {
        assume {:print "$at(10,20635,20636)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(13,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // $t31 := borrow_field<Diem::CurrencyInfo<#0>>.total_value($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:420:9+16
    $t31 := $ChildMutation($t17, 0, $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t17)));

    // write_ref($t31, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:420:9+53
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t17).total_value]($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:420:9+53
    $t17 := $UpdateMutation($t17, $Update'$1_Diem_CurrencyInfo'#0''_total_value($Dereference($t17), $Dereference($t31)));

    // $t32 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:423:14+17
    assume {:print "$at(10,20811,20828)"} true;
    $t32 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t17));

    // $t33 := !($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:423:13+1
    call $t33 := $Not($t32);

    // if ($t33) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:423:9+235
    if ($t33) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:423:9+235
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:423:9+235
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:425:22+4
    assume {:print "$at(10,20884,20888)"} true;
L4:

    // $t34 := borrow_field<Diem::CurrencyInfo<#0>>.mint_events($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:425:17+21
    $t34 := $ChildMutation($t17, 8, $mint_events#$1_Diem_CurrencyInfo'#0'($Dereference($t17)));

    // $t35 := pack Diem::MintEvent($t0, $t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:426:17+98
    assume {:print "$at(10,20918,21016)"} true;
    $t35 := $1_Diem_MintEvent($t0, $t14);

    // Event::emit_event<Diem::MintEvent>($t34, $t35) on_abort goto L9 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:424:13+186
    assume {:print "$at(10,20844,21030)"} true;
    call $t34 := $1_Event_emit_event'$1_Diem_MintEvent'($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(10,20844,21030)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(13,23):", $t13} $t13 == $t13;
        goto L9;
    }

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t17)), Le(select Diem::CurrencyInfo.scaling_factor($t17), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:424:13+186
    assume {:print "$at(10,20844,21030)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:430:14+1
    assume {:print "$at(10,21030,21031)"} true;
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:423:9+235
    assume {:print "$at(10,20806,21041)"} true;
L6:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t17)), Le(select Diem::CurrencyInfo.scaling_factor($t17), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t17)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:423:9+235
    assume {:print "$at(10,20806,21041)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // destroy($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:423:9+235

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:433:26+5
    assume {:print "$at(10,21069,21074)"} true;
L7:

    // $t36 := pack Diem::Diem<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:433:9+24
    $t36 := $1_Diem_Diem'#0'($t0);

    // trace_return[0]($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:433:9+24
    assume {:print "$track_return(13,23,0):", $t36} $t36 == $t36;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:434:5+1
    assume {:print "$at(10,21081,21082)"} true;
L8:

    // assume Identical($t37, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:453:9+101
    assume {:print "$at(10,21948,22049)"} true;
    assume ($t37 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // assert Not(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@289]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:446:9+78
    assume {:print "$at(10,21552,21630)"} true;
    assert {:msg "assert_failed(10,21552,21630): function does not abort under this condition"}
      !!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289));

    // assert Not(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@289]<#0>()), $t0), MaxU128())) at /home/ying/diem/language/diem-framework/modules/Diem.move:447:9+102
    assume {:print "$at(10,21639,21741)"} true;
    assert {:msg "assert_failed(10,21639,21741): function does not abort under this condition"}
      !(($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289)) + $t0) > $MAX_U128);

    // assert Not(Not(Diem::spec_is_currency[@289]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289);

    // assert exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:438:9+79
    assume {:print "$at(10,21235,21314)"} true;
    assert {:msg "assert_failed(10,21235,21314): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assert exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:454:9+79
    assume {:print "$at(10,22058,22137)"} true;
    assert {:msg "assert_failed(10,22058,22137): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assert Eq<Diem::CurrencyInfo<#0>>($t37, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t8, Add(select Diem::CurrencyInfo.total_value($t8), $t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:455:9+106
    assume {:print "$at(10,22146,22252)"} true;
    assert {:msg "assert_failed(10,22146,22252): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t37, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t8, ($total_value#$1_Diem_CurrencyInfo'#0'($t8) + $t0)));

    // assert Eq<u64>(select Diem::Diem.value($t36), $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:456:9+30
    assume {:print "$at(10,22261,22291)"} true;
    assert {:msg "assert_failed(10,22261,22291): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t36), $t0);

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@290]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#290, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@290]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#290, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@289]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@289]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@291]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#291, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@291]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#291, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@289]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@289]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289))));

    // assert Implies(Diem::spec_is_currency[@289]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@289]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@292]<Diem::PreburnQueue<#0>>(addr), exists[@293]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#292, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#293, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@292]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#292, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@289]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@289]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10, Not(select Diem::CurrencyInfo.is_synthetic($t9)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:466:9+51
    assume {:print "$at(10,22635,22686)"} true;
    assert {:msg "assert_failed(10,22635,22686): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_MintEvent'($EmptyEventStore, $t10, $t11, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t9)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t11, $t10, Not(select Diem::CurrencyInfo.is_synthetic($t9)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:435:5+349
    assume {:print "$at(10,21087,21436)"} true;
    assert {:msg "assert_failed(10,21087,21436): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_MintEvent'($EmptyEventStore, $t10, $t11, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t9)); $EventStore__is_subset(actual, expected)));

    // return $t36 at /home/ying/diem/language/diem-framework/modules/Diem.move:435:5+349
    $ret0 := $t36;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:434:5+1
    assume {:print "$at(10,21081,21082)"} true;
L9:

    // assert Or(Or(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@289]<#0>())), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@289]<#0>()), $t0), MaxU128())), Not(Diem::spec_is_currency[@289]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:435:5+349
    assume {:print "$at(10,21087,21436)"} true;
    assert {:msg "assert_failed(10,21087,21436): abort not covered by any of the `aborts_if` clauses"}
      ((!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289)) || (($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289)) + $t0) > $MAX_U128)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289));

    // assert Or(Or(And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@289]<#0>())), Eq(1, $t13)), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@289]<#0>()), $t0), MaxU128()), Eq(8, $t13))), And(Not(Diem::spec_is_currency[@289]<#0>()), Eq(5, $t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:435:5+349
    assert {:msg "assert_failed(10,21087,21436): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289)) && $IsEqual'u8'(1, $t13)) || ((($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#289)) + $t0) > $MAX_U128) && $IsEqual'u8'(8, $t13))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#289) && $IsEqual'u8'(5, $t13)));

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:435:5+349
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun Diem::preburn_to [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:747:5+869
procedure {:timeLimit 40} $1_Diem_preburn_to$verify(_$t0: int, _$t1: $1_Diem_Diem'#0') returns ()
{
    // declare local variables
    var $t2: $1_Diem_PreburnWithMetadata'#0';
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: $1_Diem_CurrencyInfo'#0';
    var $t16: $1_Diem_CurrencyInfo'#0';
    var $t17: Vec (int);
    var $t18: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t19: $1_Diem_PreburnEvent;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: bool;
    var $t36: $1_Diem_Preburn'#0';
    var $t37: $1_Diem_Diem'#0';
    var $t38: $1_Diem_Preburn'#0';
    var $t39: Vec (int);
    var $t40: $Mutation ($1_Diem_PreburnWithMetadata'#0');
    var $t41: $Mutation ($1_Diem_Preburn'#0');
    var $t42: $1_Diem_CurrencyInfo'#0';
    var $t43: $1_Diem_CurrencyInfo'#0';
    var $t44: Vec (int);
    var $t45: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t46: $1_Diem_PreburnEvent;
    var $t47: $1_Diem_PreburnWithMetadata'#0';
    var $t48: int;
    var $t49: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t50: int;
    var $t51: bool;
    var $t52: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t53: $1_Diem_CurrencyInfo'#0';
    var $t0: int;
    var $t1: $1_Diem_Diem'#0';
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_Preburn'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'$1_Diem_PreburnWithMetadata'#0'': $1_Diem_PreburnWithMetadata'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_Preburn'#0'_$memory#395: $Memory $1_Diem_Preburn'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#396: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Roles_RoleId_$memory#397: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#398: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#399: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#400: $Memory $1_Diem_BurnCapability'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t40));
    assume IsEmptyVec(p#$Mutation($t41));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:5+869
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(10,36376,37245)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:5+869
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:5+869
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:5+869
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:5+869
    assume $IsValid'$1_Diem_Diem'#0''($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:5+869
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:5+869
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:5+869
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:5+869
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:771:9+52
    assume {:print "$at(10,37428,37480)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:777:9+52
    assume {:print "$at(10,37690,37742)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:685:9+52
    assume {:print "$at(10,32772,32824)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, And(exists<Diem::Preburn<#0>>($t9), Not(exists<Diem::PreburnQueue<#0>>($t9)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:686:9+103
    assume {:print "$at(10,32833,32936)"} true;
    assume ($t10 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t9) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t9)));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:734:9+52
    assume {:print "$at(10,35589,35641)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:789:9+52
    assume {:print "$at(10,38389,38441)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(10,25428,25470)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t16, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(10,25747,25789)"} true;
    assume ($t16 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t17, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(10,25798,25849)"} true;
    assume ($t17 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t18, select Diem::CurrencyInfo.preburn_events($t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(10,25858,25891)"} true;
    assume ($t18 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t16));

    // assume Identical($t19, pack Diem::PreburnEvent(select Diem::Diem.value($t1), $t17, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(10,25900,26011)"} true;
    assume ($t19 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t1), $t17, $t6));

    // assume CanModify<Diem::Preburn<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:791:9+49
    assume {:print "$at(10,38504,38553)"} true;
    assume $1_Diem_Preburn'#0'_$modifies[$t14];

    // assume CanModify<Diem::PreburnQueue<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:793:9+54
    assume {:print "$at(10,38636,38690)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t14];

    // assume CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    assume {:print "$at(10,38828,38908)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // @397 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_Roles_RoleId_$memory#397 := $1_Roles_RoleId_$memory;

    // @400 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_Diem_BurnCapability'#0'_$memory#400 := $1_Diem_BurnCapability'#0'_$memory;

    // @398 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_Diem_CurrencyInfo'#0'_$memory#398 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @399 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_Diem_MintCapability'#0'_$memory#399 := $1_Diem_MintCapability'#0'_$memory;

    // @395 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_Diem_Preburn'#0'_$memory#395 := $1_Diem_Preburn'#0'_$memory;

    // @396 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:796:9+80
    $1_Diem_PreburnQueue'#0'_$memory#396 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:5+1
    assume {:print "$at(10,36376,36377)"} true;
    assume {:print "$track_local(13,24,0):", $t0} $t0 == $t0;

    // trace_local[coin]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:5+1
    assume {:print "$track_local(13,24,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+40
    // >> opaque call: Roles::assert_designated_dealer($t0)
    assume {:print "$at(10,36532,36572)"} true;

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+40
    assume {:print "$at(10,36532,36572)"} true;

    // assume Identical($t21, Or(Not(exists<Roles::RoleId>($t20)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+40
    assume ($t21 == (!$ResourceExists($1_Roles_RoleId_$memory, $t20) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 2)));

    // if ($t21) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+40
    if ($t21) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+40
L5:

    // assume Or(And(Not(exists<Roles::RoleId>($t20)), Eq(5, $t22)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 2), Eq(3, $t22))) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+40
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t20) && $IsEqual'u8'(5, $t22)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 2) && $IsEqual'u8'(3, $t22)));

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+40
    assume {:print "$at(10,36532,36572)"} true;
    assume {:print "$track_abort(13,24):", $t22} $t22 == $t22;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+40
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+40
L4:

    // opaque end: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:751:9+40

    // $t23 := Diem::value<#0>($t1) on_abort goto L3 with $t22 at /home/ying/diem/language/diem-framework/modules/Diem.move:753:16+12
    assume {:print "$at(10,36657,36669)"} true;
    call $t23 := $1_Diem_value'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(10,36657,36669)"} true;
        $t22 := $abort_code;
        assume {:print "$track_abort(13,24):", $t22} $t22 == $t22;
        goto L3;
    }

    // $t24 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:753:31+1
    $t24 := 0;
    assume $IsValid'u64'($t24);

    // $t25 := >($t23, $t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:753:29+1
    call $t25 := $Gt($t23, $t24);

    // $t26 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:753:59+5
    $t26 := 7;
    assume $IsValid'u64'($t26);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:753:34+31
    // >> opaque call: $t10 := Errors::invalid_argument($t9)

    // $t27 := opaque begin: Errors::invalid_argument($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:753:34+31

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:753:34+31
    assume $IsValid'u64'($t27);

    // assume Eq<u64>($t27, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:753:34+31
    assume $IsEqual'u64'($t27, 7);

    // $t27 := opaque end: Errors::invalid_argument($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:753:34+31

    // trace_local[tmp#$5]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:753:9+57
    assume {:print "$track_local(13,24,5):", $t27} $t27 == $t27;

    // trace_local[tmp#$4]($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:753:9+57
    assume {:print "$track_local(13,24,4):", $t25} $t25 == $t25;

    // if ($t25) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:753:9+57
    if ($t25) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:753:9+57
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:753:9+57

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:753:9+57
    assume {:print "$at(10,36650,36707)"} true;
    assume {:print "$track_abort(13,24):", $t27} $t27 == $t27;

    // $t22 := move($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:753:9+57
    $t22 := $t27;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:753:9+57
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:754:41+7
    assume {:print "$at(10,36749,36756)"} true;
L0:

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:754:22+27
    // >> opaque call: $t11 := Signer::address_of($t0)

    // $t28 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:754:22+27

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:754:22+27
    assume $IsValid'address'($t28);

    // assume Eq<address>($t28, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:754:22+27
    assume $IsEqual'address'($t28, $1_Signer_spec_address_of($t0));

    // $t28 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:754:22+27

    // trace_local[sender]($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:754:13+6
    assume {:print "$track_local(13,24,3):", $t28} $t28 == $t28;

    // assume Identical($t29, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:677:9+52
    assume {:print "$at(10,32409,32461)"} true;
    assume ($t29 == $1_Signer_spec_address_of($t0));

    // assume Identical($t30, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:685:9+52
    assume {:print "$at(10,32772,32824)"} true;
    assume ($t30 == $1_Signer_spec_address_of($t0));

    // assume Identical($t31, And(exists<Diem::Preburn<#0>>($t30), Not(exists<Diem::PreburnQueue<#0>>($t30)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:686:9+103
    assume {:print "$at(10,32833,32936)"} true;
    assume ($t31 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t30) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t30)));

    // assume Identical($t32, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t0));

    // assume Identical($t33, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume ($t33 == $1_Signer_spec_address_of($t0));

    // assume Identical($t34, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:694:9+52
    assume {:print "$at(10,33296,33348)"} true;
    assume ($t34 == $1_Signer_spec_address_of($t0));

    // assume Identical($t35, And(exists<Diem::Preburn<#0>>($t34), Not(exists<Diem::PreburnQueue<#0>>($t34)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:695:9+103
    assume {:print "$at(10,33357,33460)"} true;
    assume ($t35 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t34) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t34)));

    // assume Identical($t36, global<Diem::Preburn<#0>>($t34)) at /home/ying/diem/language/diem-framework/modules/Diem.move:696:9+54
    assume {:print "$at(10,33469,33523)"} true;
    assume ($t36 == $ResourceValue($1_Diem_Preburn'#0'_$memory, $t34));

    // assert CanModify<Diem::Preburn<#0>>($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:758:9+34
    assume {:print "$at(10,36946,36980)"} true;
    assert {:msg "assert_failed(10,36946,36980): caller does not have permission to modify `Diem::Preburn<#0>` at given address"}
      $1_Diem_Preburn'#0'_$modifies[$t29];

    // assert CanModify<Diem::PreburnQueue<#0>>($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:758:9+34
    assert {:msg "assert_failed(10,36946,36980): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t29];

    // Diem::upgrade_preburn<#0>($t0) on_abort goto L3 with $t22 at /home/ying/diem/language/diem-framework/modules/Diem.move:758:9+34
    call $1_Diem_upgrade_preburn'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,36946,36980)"} true;
        $t22 := $abort_code;
        assume {:print "$track_abort(13,24):", $t22} $t22 == $t22;
        goto L3;
    }

    // $t37 := Diem::zero<#0>() on_abort goto L3 with $t22 at /home/ying/diem/language/diem-framework/modules/Diem.move:761:41+16
    assume {:print "$at(10,37067,37083)"} true;
    call $t37 := $1_Diem_zero'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,37067,37083)"} true;
        $t22 := $abort_code;
        assume {:print "$track_abort(13,24):", $t22} $t22 == $t22;
        goto L3;
    }

    // $t38 := pack Diem::Preburn<#0>($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:761:22+37
    $t38 := $1_Diem_Preburn'#0'($t37);

    // $t39 := [] at /home/ying/diem/language/diem-framework/modules/Diem.move:762:23+3
    assume {:print "$at(10,37109,37112)"} true;
    $t39 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t39);

    // $t2 := pack Diem::PreburnWithMetadata<#0>($t38, $t39) at /home/ying/diem/language/diem-framework/modules/Diem.move:760:23+118
    assume {:print "$at(10,37005,37123)"} true;
    $t2 := $1_Diem_PreburnWithMetadata'#0'($t38, $t39);

    // trace_local[preburn]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:760:13+7
    assume {:print "$track_local(13,24,2):", $t2} $t2 == $t2;

    // $t40 := borrow_local($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:764:42+7
    assume {:print "$at(10,37166,37173)"} true;
    $t40 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t41 := borrow_field<Diem::PreburnWithMetadata<#0>>.preburn($t40) at /home/ying/diem/language/diem-framework/modules/Diem.move:764:37+20
    $t41 := $ChildMutation($t40, 0, $preburn#$1_Diem_PreburnWithMetadata'#0'($Dereference($t40)));

    // assume Identical($t42, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(10,25428,25470)"} true;
    assume ($t42 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t43, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(10,25747,25789)"} true;
    assume ($t43 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t44, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(10,25798,25849)"} true;
    assume ($t44 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t45, select Diem::CurrencyInfo.preburn_events($t43)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(10,25858,25891)"} true;
    assume ($t45 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t43));

    // assume Identical($t46, pack Diem::PreburnEvent(select Diem::Diem.value($t1), $t44, $t28)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(10,25900,26011)"} true;
    assume ($t46 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t1), $t44, $t28));

    // assert CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:764:9+57
    assume {:print "$at(10,37133,37190)"} true;
    assert {:msg "assert_failed(10,37133,37190): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // Diem::preburn_with_resource<#0>($t1, $t41, $t28) on_abort goto L3 with $t22 at /home/ying/diem/language/diem-framework/modules/Diem.move:764:9+57
    call $t41 := $1_Diem_preburn_with_resource'#0'($t1, $t41, $t28);
    if ($abort_flag) {
        assume {:print "$at(10,37133,37190)"} true;
        $t22 := $abort_code;
        assume {:print "$track_abort(13,24):", $t22} $t22 == $t22;
        goto L3;
    }

    // write_back[Reference($t40).preburn]($t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:764:9+57
    $t40 := $UpdateMutation($t40, $Update'$1_Diem_PreburnWithMetadata'#0''_preburn($Dereference($t40), $Dereference($t41)));

    // write_back[LocalRoot($t2)@]($t40) at /home/ying/diem/language/diem-framework/modules/Diem.move:764:9+57
    $t2 := $Dereference($t40);

    // $t47 := move($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:765:39+7
    assume {:print "$at(10,37230,37237)"} true;
    $t47 := $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:765:9+38
    // >> opaque call: Diem::add_preburn_to_queue<#0>($t0, $t17)

    // assume Identical($t48, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+52
    assume {:print "$at(10,34887,34939)"} true;
    assume ($t48 == $1_Signer_spec_address_of($t0));

    // assume Identical($t49, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t48))) at /home/ying/diem/language/diem-framework/modules/Diem.move:723:9+69
    assume {:print "$at(10,34948,35017)"} true;
    assume ($t49 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t48)));

    // assume Identical($t50, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:734:9+52
    assume {:print "$at(10,35589,35641)"} true;
    assume ($t50 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Diem::PreburnQueue<#0>>($t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:765:9+38
    assume {:print "$at(10,37200,37238)"} true;
    assert {:msg "assert_failed(10,37200,37238): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t48];

    // opaque begin: Diem::add_preburn_to_queue<#0>($t0, $t47) at /home/ying/diem/language/diem-framework/modules/Diem.move:765:9+38

    // assume Identical($t51, Or(Or(Not(exists<Diem::PreburnQueue<#0>>($t48)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t47))), 0)), And(exists<Diem::PreburnQueue<#0>>($t50), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t50))), 256)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:765:9+38
    assume ($t51 == ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t48) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t47))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t50) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t50))) >= 256))));

    // if ($t51) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:765:9+38
    if ($t51) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:765:9+38
L7:

    // assume Or(Or(And(Not(exists<Diem::PreburnQueue<#0>>($t48)), Eq(1, $t22)), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t47))), 0), Eq(7, $t22))), And(And(exists<Diem::PreburnQueue<#0>>($t50), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t50))), 256)), Eq(8, $t22))) at /home/ying/diem/language/diem-framework/modules/Diem.move:765:9+38
    assume (((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t48) && $IsEqual'u8'(1, $t22)) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t47))), 0) && $IsEqual'u8'(7, $t22))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t50) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t50))) >= 256)) && $IsEqual'u8'(8, $t22)));

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:765:9+38
    assume {:print "$at(10,37200,37238)"} true;
    assume {:print "$track_abort(13,24):", $t22} $t22 == $t22;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:765:9+38
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:765:9+38
L6:

    // modifies global<Diem::PreburnQueue<#0>>($t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:765:9+38
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t48, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t48);
    }

    // assume Identical($t52, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t48))) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79
    assume {:print "$at(10,35026,35105)"} true;
    assume ($t52 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t48)));

    // assume exists<Diem::PreburnQueue<#0>>($t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t48);

    // assume Vector::eq_push_back<Diem::PreburnWithMetadata<#0>>($t52, $t49, $t47) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79
    assume $1_Vector_eq_push_back'$1_Diem_PreburnWithMetadata'#0''($t52, $t49, $t47);

    // opaque end: Diem::add_preburn_to_queue<#0>($t0, $t47) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:766:5+1
    assume {:print "$at(10,37244,37245)"} true;
L2:

    // assume Identical($t53, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(10,25479,25531)"} true;
    assume ($t53 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert Not(Not(Or(exists[@395]<Diem::Preburn<#0>>($t7), exists[@396]<Diem::PreburnQueue<#0>>($t7)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:780:9+101
    assume {:print "$at(10,37900,38001)"} true;
    assert {:msg "assert_failed(10,37900,38001): function does not abort under this condition"}
      !!($ResourceExists($1_Diem_Preburn'#0'_$memory#395, $t7) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, $t7));

    // assert Not(Not(exists[@397]<Roles::RoleId>($t8))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#397, $t8);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t8)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t8)), 2);

    // assert Not(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@398]<#0>()), select Diem::Diem.value($t1)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:520:9+102
    assume {:print "$at(10,25211,25313)"} true;
    assert {:msg "assert_failed(10,25211,25313): function does not abort under this condition"}
      !(($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398)) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615);

    // assert Not(Not(Diem::spec_is_currency[@398]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398);

    // assert Not(And($t10, Not(exists[@397]<Roles::RoleId>($t11)))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !($t10 && !$ResourceExists($1_Roles_RoleId_$memory#397, $t11));

    // assert Not(And($t10, Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t11)), 2))) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !($t10 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t11)), 2));

    // assert Not(And($t10, Not(Diem::spec_is_currency[@398]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !($t10 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398));

    // assert Not(Not(exists[@397]<Roles::RoleId>($t12))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#397, $t12);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t12)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t12)), 2);

    // assert Not(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn[]<#0>(select Diem::Diem.value($t1)), [])))), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:735:9+75
    assume {:print "$at(10,35650,35725)"} true;
    assert {:msg "assert_failed(10,35650,35725): function does not abort under this condition"}
      !$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($value#$1_Diem_Diem'#0'($t1)), $EmptyVec'u8'())))), 0);

    // assert Not(And(exists[@396]<Diem::PreburnQueue<#0>>($t13), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@396]<Diem::PreburnQueue<#0>>($t13))), 256))) at /home/ying/diem/language/diem-framework/modules/Diem.move:736:9+208
    assume {:print "$at(10,35734,35942)"} true;
    assert {:msg "assert_failed(10,35734,35942): function does not abort under this condition"}
      !($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, $t13) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#396, $t13))) >= 256));

    // assert exists<Diem::PreburnQueue<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:794:9+53
    assume {:print "$at(10,38699,38752)"} true;
    assert {:msg "assert_failed(10,38699,38752): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t14);

    // assert Eq<Diem::CurrencyInfo<#0>>($t53, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t15, Add(select Diem::CurrencyInfo.preburn_value($t15), select Diem::Diem.value($t1)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:527:9+84
    assume {:print "$at(10,25540,25624)"} true;
    assert {:msg "assert_failed(10,25540,25624): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t53, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t15, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t15) + $value#$1_Diem_Diem'#0'($t1))));

    // assert Implies(Diem::spec_is_currency[@398]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@398]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@399]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#399, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@399]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#399, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@398]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@398]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@400]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#400, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@400]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#400, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@398]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@398]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@396]<Diem::PreburnQueue<#0>>(addr), exists[@395]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#395, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@396]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@398]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@398]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t19, $t18, Not(select Diem::CurrencyInfo.is_synthetic($t16)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:540:9+42
    assume {:print "$at(10,26020,26062)"} true;
    assert {:msg "assert_failed(10,26020,26062): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t18, $t19, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t16)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t19, $t18, Not(select Diem::CurrencyInfo.is_synthetic($t16)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:767:5+339
    assume {:print "$at(10,37250,37589)"} true;
    assert {:msg "assert_failed(10,37250,37589): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t18, $t19, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t16)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:767:5+339
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:766:5+1
    assume {:print "$at(10,37244,37245)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(Or(exists[@395]<Diem::Preburn<#0>>($t7), exists[@396]<Diem::PreburnQueue<#0>>($t7))), Not(exists[@397]<Roles::RoleId>($t8))), Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t8)), 2)), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@398]<#0>()), select Diem::Diem.value($t1)), 18446744073709551615)), Not(Diem::spec_is_currency[@398]<#0>())), And($t10, Not(exists[@397]<Roles::RoleId>($t11)))), And($t10, Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t11)), 2))), And($t10, Not(Diem::spec_is_currency[@398]<#0>()))), Not(exists[@397]<Roles::RoleId>($t12))), Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t12)), 2)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn[]<#0>(select Diem::Diem.value($t1)), [])))), 0)), And(exists[@396]<Diem::PreburnQueue<#0>>($t13), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@396]<Diem::PreburnQueue<#0>>($t13))), 256))) at /home/ying/diem/language/diem-framework/modules/Diem.move:767:5+339
    assume {:print "$at(10,37250,37589)"} true;
    assert {:msg "assert_failed(10,37250,37589): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((!($ResourceExists($1_Diem_Preburn'#0'_$memory#395, $t7) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, $t7)) || !$ResourceExists($1_Roles_RoleId_$memory#397, $t8)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t8)), 2)) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398)) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398)) || ($t10 && !$ResourceExists($1_Roles_RoleId_$memory#397, $t11))) || ($t10 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t11)), 2))) || ($t10 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398))) || !$ResourceExists($1_Roles_RoleId_$memory#397, $t12)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t12)), 2)) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($value#$1_Diem_Diem'#0'($t1)), $EmptyVec'u8'())))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, $t13) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#396, $t13))) >= 256)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(Or(exists[@395]<Diem::Preburn<#0>>($t7), exists[@396]<Diem::PreburnQueue<#0>>($t7))), And(Not(exists[@397]<Roles::RoleId>($t8)), Eq(5, $t22))), And(Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t8)), 2), Eq(3, $t22))), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@398]<#0>()), select Diem::Diem.value($t1)), 18446744073709551615), Eq(8, $t22))), And(Not(Diem::spec_is_currency[@398]<#0>()), Eq(5, $t22))), And(And($t10, Not(exists[@397]<Roles::RoleId>($t11))), Eq(5, $t22))), And(And($t10, Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t11)), 2)), Eq(3, $t22))), And(And($t10, Not(Diem::spec_is_currency[@398]<#0>())), Eq(5, $t22))), And(Not(exists[@397]<Roles::RoleId>($t12)), Eq(5, $t22))), And(Neq<u64>(select Roles::RoleId.role_id(global[@397]<Roles::RoleId>($t12)), 2), Eq(3, $t22))), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn[]<#0>(select Diem::Diem.value($t1)), [])))), 0), Eq(7, $t22))), And(And(exists[@396]<Diem::PreburnQueue<#0>>($t13), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@396]<Diem::PreburnQueue<#0>>($t13))), 256)), Eq(8, $t22))) at /home/ying/diem/language/diem-framework/modules/Diem.move:767:5+339
    assert {:msg "assert_failed(10,37250,37589): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((!($ResourceExists($1_Diem_Preburn'#0'_$memory#395, $t7) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, $t7)) || (!$ResourceExists($1_Roles_RoleId_$memory#397, $t8) && $IsEqual'u8'(5, $t22))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t8)), 2) && $IsEqual'u8'(3, $t22))) || ((($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#398)) + $value#$1_Diem_Diem'#0'($t1)) > 18446744073709551615) && $IsEqual'u8'(8, $t22))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398) && $IsEqual'u8'(5, $t22))) || (($t10 && !$ResourceExists($1_Roles_RoleId_$memory#397, $t11)) && $IsEqual'u8'(5, $t22))) || (($t10 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t11)), 2)) && $IsEqual'u8'(3, $t22))) || (($t10 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#398)) && $IsEqual'u8'(5, $t22))) || (!$ResourceExists($1_Roles_RoleId_$memory#397, $t12) && $IsEqual'u8'(5, $t22))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#397, $t12)), 2) && $IsEqual'u8'(3, $t22))) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($value#$1_Diem_Diem'#0'($t1)), $EmptyVec'u8'())))), 0) && $IsEqual'u8'(7, $t22))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#396, $t13) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#396, $t13))) >= 256)) && $IsEqual'u8'(8, $t22)));

    // abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:767:5+339
    $abort_code := $t22;
    $abort_flag := true;
    return;

}

// fun Diem::preburn_value [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1102:5+218
procedure {:timeLimit 40} $1_Diem_preburn_value$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: int;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#208: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#209: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#210: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#211: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#212: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1102:5+218
    assume {:print "$at(10,53828,54046)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @210 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1102:5+1
    $1_Diem_BurnCapability'#0'_$memory#210 := $1_Diem_BurnCapability'#0'_$memory;

    // @208 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1102:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#208 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @209 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1102:5+1
    $1_Diem_MintCapability'#0'_$memory#209 := $1_Diem_MintCapability'#0'_$memory;

    // @212 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1102:5+1
    $1_Diem_Preburn'#0'_$memory#212 := $1_Diem_Preburn'#0'_$memory;

    // @211 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1102:5+1
    $1_Diem_PreburnQueue'#0'_$memory#211 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,53909,53939)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:9+30
    assume {:print "$at(10,53909,53939)"} true;
    assume {:print "$track_abort(13,25):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1103:9+30

    // $t2 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1104:47+38
    assume {:print "$at(10,53987,54025)"} true;
    call $t2 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,53987,54025)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,25):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1104:9+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,53949,53962)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,25):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1104:9+91
    $t4 := $preburn_value#$1_Diem_CurrencyInfo'#0'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1104:9+91
    assume {:print "$track_return(13,25,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1105:5+1
    assume {:print "$at(10,54045,54046)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@208]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@208]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#208) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#208))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@209]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#209, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@209]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#209, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@208]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@208]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#208) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#208))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@210]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#210, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@210]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#210, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@208]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@208]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#208) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#208))));

    // assert Implies(Diem::spec_is_currency[@208]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@208]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#208) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#208))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@211]<Diem::PreburnQueue<#0>>(addr), exists[@212]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#211, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#212, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@211]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#211, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@208]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@208]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#208) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#208))));

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1105:5+1
    assume {:print "$at(10,54045,54046)"} true;
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1105:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::preburn_with_resource<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1245
procedure {:inline 1} $1_Diem_preburn_with_resource'#0'(_$t0: $1_Diem_Diem'#0', _$t1: $Mutation ($1_Diem_Preburn'#0'), _$t2: int) returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t3: int;
    var $t4: Vec (int);
    var $t5: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t14: $1_Diem_PreburnEvent;
    var $t15: int;
    var $t16: int;
    var $t17: $1_Diem_Diem'#0';
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation ($1_Diem_Diem'#0');
    var $t24: $1_Diem_Diem'#0';
    var $t25: bool;
    var $t26: Vec (int);
    var $t27: bool;
    var $t28: int;
    var $t29: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: $Mutation (int);
    var $t39: bool;
    var $t40: bool;
    var $t41: $Mutation ($1_Event_EventHandle'$1_Diem_PreburnEvent');
    var $t42: $1_Diem_PreburnEvent;
    var $t0: $1_Diem_Diem'#0';
    var $t1: $Mutation ($1_Diem_Preburn'#0');
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t23));
    assume IsEmptyVec(p#$Mutation($t29));
    assume IsEmptyVec(p#$Mutation($t38));
    assume IsEmptyVec(p#$Mutation($t41));

    // bytecode translation starts here
    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(10,25428,25470)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(10,25747,25789)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(10,25798,25849)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.preburn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(10,25858,25891)"} true;
    assume ($t13 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // assume Identical($t14, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t12, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(10,25900,26011)"} true;
    assume ($t14 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t0), $t12, $t2));

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    assume {:print "$at(10,23187,23188)"} true;
    assume {:print "$track_local(13,26,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(13,26,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    assume {:print "$track_local(13,26,2):", $t2} $t2 == $t2;

    // $t15 := Diem::value<#0>($t0) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:26+12
    assume {:print "$at(10,23391,23403)"} true;
    call $t15 := $1_Diem_value'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,23391,23403)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // trace_local[coin_value]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:13+10
    assume {:print "$track_local(13,26,3):", $t15} $t15 == $t15;

    // $t17 := get_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:22+16
    assume {:print "$at(10,23463,23479)"} true;
    $t17 := $to_burn#$1_Diem_Preburn'#0'($Dereference($t1));

    // $t18 := Diem::value<#0>($t17) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:16+23
    call $t18 := $1_Diem_value'#0'($t17);
    if ($abort_flag) {
        assume {:print "$at(10,23457,23480)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:43+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := ==($t18, $t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:40+2
    $t20 := $IsEqual'u64'($t18, $t19);

    // $t21 := 3 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:68+17
    $t21 := 3;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40
    // >> opaque call: $t16 := Errors::invalid_state($t15)

    // $t22 := opaque begin: Errors::invalid_state($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40
    assume $IsEqual'u64'($t22, 1);

    // $t22 := opaque end: Errors::invalid_state($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40

    // trace_local[tmp#$7]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$track_local(13,26,7):", $t22} $t22 == $t22;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$track_local(13,26,6):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$at(10,23450,23528)"} true;
    assume {:print "$track_abort(13,26):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    $t16 := $t22;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    goto L10;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:22+7
    assume {:print "$at(10,23551,23558)"} true;
L0:

    // $t23 := borrow_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:17+20
    $t23 := $ChildMutation($t1, 0, $to_burn#$1_Diem_Preburn'#0'($Dereference($t1)));

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    // >> opaque call: Diem::deposit<#0>($t17, $t0)

    // opaque begin: Diem::deposit<#0>($t23, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35

    // $t24 := read_ref($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    $t24 := $Dereference($t23);

    // assume Identical($t25, Gt(Add(select Diem::Diem.value($t23), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume ($t25 == (($value#$1_Diem_Diem'#0'($Dereference($t23)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615));

    // if ($t25) goto L15 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    if ($t25) { goto L15; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
L12:

    // assume And(Gt(Add(select Diem::Diem.value($t23), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume ((($value#$1_Diem_Diem'#0'($Dereference($t23)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615) && $IsEqual'u8'(8, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume {:print "$at(10,23538,23573)"} true;
    assume {:print "$track_abort(13,26):", $t16} $t16 == $t16;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    goto L10;

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
L11:

    // havoc[mut]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t23 := $UpdateMutation($t23, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t23));

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t23));

    // assume Eq<u64>(select Diem::Diem.value($t23), Add(select Diem::Diem.value($t24), select Diem::Diem.value($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t23)), ($value#$1_Diem_Diem'#0'($t24) + $value#$1_Diem_Diem'#0'($t0)));

    // opaque end: Diem::deposit<#0>($t23, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35

    // write_back[Reference($t1).to_burn]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    $t1 := $UpdateMutation($t1, $Update'$1_Diem_Preburn'#0''_to_burn($Dereference($t1), $Dereference($t23)));

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    // >> opaque call: $t18 := Diem::currency_code<#0>()
    assume {:print "$at(10,23603,23628)"} true;

    // $t26 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25

    // assume Identical($t27, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume ($t27 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t27) goto L16 else goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    if ($t27) { goto L16; } else { goto L13; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
L14:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume {:print "$at(10,23603,23628)"} true;
    assume {:print "$track_abort(13,26):", $t16} $t16 == $t16;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    goto L10;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
L13:

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume $IsValid'vec'u8''($t26);

    // assume Eq<vector<u8>>($t26, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume $IsEqual'vec'u8''($t26, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t26 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25

    // trace_local[currency_code]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:13+13
    assume {:print "$track_local(13,26,4):", $t26} $t26 == $t26;

    // $t28 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:62+38
    assume {:print "$at(10,23691,23729)"} true;
    call $t28 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,23691,23729)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t29 := borrow_global<Diem::CurrencyInfo<#0>>($t28) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t28)) {
        call $ExecFailureAbort();
    } else {
        $t29 := $Mutation($Global($t28), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t28));
    }
    if ($abort_flag) {
        assume {:print "$at(10,23649,23666)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // trace_local[info]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t29);
    assume {:print "$track_local(13,26,5):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t30 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:16+7
    assume {:print "$at(10,23747,23754)"} true;
    $t30 := 18446744073709551615;
    assume $IsValid'u64'($t30);

    // $t31 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:26+18
    $t31 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t29));

    // $t32 := -($t30, $t31) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:24+1
    call $t32 := $Sub($t30, $t31);
    if ($abort_flag) {
        assume {:print "$at(10,23755,23756)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t33 := >=($t32, $t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:45+2
    call $t33 := $Ge($t32, $t15);

    // $t34 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:83+5
    $t34 := 7;
    assume $IsValid'u64'($t34);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29
    // >> opaque call: $t26 := Errors::limit_exceeded($t25)

    // $t35 := opaque begin: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29

    // assume WellFormed($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29
    assume $IsValid'u64'($t35);

    // assume Eq<u64>($t35, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29
    assume $IsEqual'u64'($t35, 8);

    // $t35 := opaque end: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29

    // trace_local[tmp#$9]($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$track_local(13,26,9):", $t35} $t35 == $t35;

    // trace_local[tmp#$8]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$track_local(13,26,8):", $t33} $t33 == $t33;

    // if ($t33) goto L2 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    if ($t33) { goto L2; } else { goto L8; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
L3:

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81

    // destroy($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81

    // trace_abort($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$at(10,23740,23821)"} true;
    assume {:print "$track_abort(13,26):", $t35} $t35 == $t35;

    // $t16 := move($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    $t16 := $t35;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    goto L10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:488:30+4
    assume {:print "$at(10,23852,23856)"} true;
L2:

    // $t36 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:30+18
    $t36 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t29));

    // $t37 := +($t36, $t15) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:488:49+1
    call $t37 := $AddU64($t36, $t15);
    if ($abort_flag) {
        assume {:print "$at(10,23871,23872)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t38 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+18
    $t38 := $ChildMutation($t29, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t29)));

    // write_ref($t38, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+52
    $t38 := $UpdateMutation($t38, $t37);

    // write_back[Reference($t29).preburn_value]($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+52
    $t29 := $UpdateMutation($t29, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t29), $Dereference($t38)));

    // $t39 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:14+17
    assume {:print "$at(10,24147,24164)"} true;
    $t39 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t29));

    // $t40 := !($t39) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:13+1
    call $t40 := $Not($t39);

    // if ($t40) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    if ($t40) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:495:22+4
    assume {:print "$at(10,24220,24224)"} true;
L4:

    // $t41 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_events($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:495:17+24
    $t41 := $ChildMutation($t29, 10, $preburn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t29)));

    // $t42 := pack Diem::PreburnEvent($t15, $t26, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:496:17+143
    assume {:print "$at(10,24257,24400)"} true;
    $t42 := $1_Diem_PreburnEvent($t15, $t26, $t2);

    // Event::emit_event<Diem::PreburnEvent>($t41, $t42) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234
    assume {:print "$at(10,24180,24414)"} true;
    call $t41 := $1_Event_emit_event'$1_Diem_PreburnEvent'($t41, $t42);
    if ($abort_flag) {
        assume {:print "$at(10,24180,24414)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234

    // write_back[Diem::CurrencyInfo<#0>@]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t29),
        $Dereference($t29));

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:501:14+1
    assume {:print "$at(10,24414,24415)"} true;
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    assume {:print "$at(10,24142,24425)"} true;
L6:

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283

    // write_back[Diem::CurrencyInfo<#0>@]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t29),
        $Dereference($t29));

    // destroy($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    assume {:print "$at(10,24425,24426)"} true;
L7:

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(13,26,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    goto L9;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t1) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    assume {:print "$at(10,24431,24432)"} true;
L9:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    $ret0 := $t1;
    return;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
L10:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

    // label L15 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L15:

    // destroy($t1) at <internal>:1:1+10

    // goto L12 at <internal>:1:1+10
    goto L12;

    // label L16 at <internal>:1:1+10
L16:

    // destroy($t1) at <internal>:1:1+10

    // goto L14 at <internal>:1:1+10
    goto L14;

}

// fun Diem::preburn_with_resource [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1245
procedure {:timeLimit 40} $1_Diem_preburn_with_resource$verify(_$t0: $1_Diem_Diem'#0', _$t1: $Mutation ($1_Diem_Preburn'#0'), _$t2: int) returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t3: int;
    var $t4: Vec (int);
    var $t5: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t14: $1_Diem_PreburnEvent;
    var $t15: $1_Diem_Preburn'#0';
    var $t16: int;
    var $t17: int;
    var $t18: $1_Diem_Diem'#0';
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation ($1_Diem_Diem'#0');
    var $t25: $1_Diem_Diem'#0';
    var $t26: bool;
    var $t27: Vec (int);
    var $t28: bool;
    var $t29: int;
    var $t30: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: bool;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: $Mutation (int);
    var $t40: bool;
    var $t41: bool;
    var $t42: $Mutation ($1_Event_EventHandle'$1_Diem_PreburnEvent');
    var $t43: $1_Diem_PreburnEvent;
    var $t44: $1_Diem_CurrencyInfo'#0';
    var $t0: $1_Diem_Diem'#0';
    var $t1: $Mutation ($1_Diem_Preburn'#0');
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_CurrencyInfo'#0'_$memory#294: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#295: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#296: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#297: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#298: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t30));
    assume IsEmptyVec(p#$Mutation($t39));
    assume IsEmptyVec(p#$Mutation($t42));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1245
    assume {:print "$at(10,23187,24432)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1245
    assume $IsValid'$1_Diem_Preburn'#0''($Dereference($t1));

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1245
    assume $IsValid'address'($t2);

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1245
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(10,25428,25470)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(10,25747,25789)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(10,25798,25849)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.preburn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(10,25858,25891)"} true;
    assume ($t13 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // assume Identical($t14, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t12, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(10,25900,26011)"} true;
    assume ($t14 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t0), $t12, $t2));

    // assume CanModify<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:505:9+80
    assume {:print "$at(10,24474,24554)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[$1_CoreAddresses_$CURRENCY_INFO_ADDRESS()];

    // @296 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:505:9+80
    $1_Diem_BurnCapability'#0'_$memory#296 := $1_Diem_BurnCapability'#0'_$memory;

    // @294 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:505:9+80
    $1_Diem_CurrencyInfo'#0'_$memory#294 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @295 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:505:9+80
    $1_Diem_MintCapability'#0'_$memory#295 := $1_Diem_MintCapability'#0'_$memory;

    // @298 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:505:9+80
    $1_Diem_Preburn'#0'_$memory#298 := $1_Diem_Preburn'#0'_$memory;

    // @297 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:505:9+80
    $1_Diem_PreburnQueue'#0'_$memory#297 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t15 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:505:9+80
    $t15 := $Dereference($t1);

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    assume {:print "$at(10,23187,23188)"} true;
    assume {:print "$track_local(13,26,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(13,26,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    assume {:print "$track_local(13,26,2):", $t2} $t2 == $t2;

    // $t16 := Diem::value<#0>($t0) on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:26+12
    assume {:print "$at(10,23391,23403)"} true;
    call $t16 := $1_Diem_value'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,23391,23403)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // trace_local[coin_value]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:13+10
    assume {:print "$track_local(13,26,3):", $t16} $t16 == $t16;

    // $t18 := get_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:22+16
    assume {:print "$at(10,23463,23479)"} true;
    $t18 := $to_burn#$1_Diem_Preburn'#0'($Dereference($t1));

    // $t19 := Diem::value<#0>($t18) on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:16+23
    call $t19 := $1_Diem_value'#0'($t18);
    if ($abort_flag) {
        assume {:print "$at(10,23457,23480)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // $t20 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:43+1
    $t20 := 0;
    assume $IsValid'u64'($t20);

    // $t21 := ==($t19, $t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:40+2
    $t21 := $IsEqual'u64'($t19, $t20);

    // $t22 := 3 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:68+17
    $t22 := 3;
    assume $IsValid'u64'($t22);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40
    // >> opaque call: $t16 := Errors::invalid_state($t15)

    // $t23 := opaque begin: Errors::invalid_state($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40
    assume $IsEqual'u64'($t23, 1);

    // $t23 := opaque end: Errors::invalid_state($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40

    // trace_local[tmp#$7]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$track_local(13,26,7):", $t23} $t23 == $t23;

    // trace_local[tmp#$6]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$track_local(13,26,6):", $t21} $t21 == $t21;

    // if ($t21) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    if ($t21) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$at(10,23450,23528)"} true;
    assume {:print "$track_abort(13,26):", $t23} $t23 == $t23;

    // $t17 := move($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    $t17 := $t23;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    goto L10;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:22+7
    assume {:print "$at(10,23551,23558)"} true;
L0:

    // $t24 := borrow_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:17+20
    $t24 := $ChildMutation($t1, 0, $to_burn#$1_Diem_Preburn'#0'($Dereference($t1)));

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    // >> opaque call: Diem::deposit<#0>($t17, $t0)

    // opaque begin: Diem::deposit<#0>($t24, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35

    // $t25 := read_ref($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    $t25 := $Dereference($t24);

    // assume Identical($t26, Gt(Add(select Diem::Diem.value($t24), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume ($t26 == (($value#$1_Diem_Diem'#0'($Dereference($t24)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615));

    // if ($t26) goto L15 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    if ($t26) { goto L15; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
L12:

    // assume And(Gt(Add(select Diem::Diem.value($t24), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume ((($value#$1_Diem_Diem'#0'($Dereference($t24)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615) && $IsEqual'u8'(8, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume {:print "$at(10,23538,23573)"} true;
    assume {:print "$track_abort(13,26):", $t17} $t17 == $t17;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    goto L10;

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
L11:

    // havoc[mut]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t24 := $UpdateMutation($t24, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t24));

    // assume WellFormed($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t24));

    // assume Eq<u64>(select Diem::Diem.value($t24), Add(select Diem::Diem.value($t25), select Diem::Diem.value($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t24)), ($value#$1_Diem_Diem'#0'($t25) + $value#$1_Diem_Diem'#0'($t0)));

    // opaque end: Diem::deposit<#0>($t24, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35

    // write_back[Reference($t1).to_burn]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    $t1 := $UpdateMutation($t1, $Update'$1_Diem_Preburn'#0''_to_burn($Dereference($t1), $Dereference($t24)));

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    // >> opaque call: $t18 := Diem::currency_code<#0>()
    assume {:print "$at(10,23603,23628)"} true;

    // $t27 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25

    // assume Identical($t28, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume ($t28 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t28) goto L16 else goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    if ($t28) { goto L16; } else { goto L13; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
L14:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume {:print "$at(10,23603,23628)"} true;
    assume {:print "$track_abort(13,26):", $t17} $t17 == $t17;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    goto L10;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
L13:

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume $IsValid'vec'u8''($t27);

    // assume Eq<vector<u8>>($t27, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume $IsEqual'vec'u8''($t27, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t27 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25

    // trace_local[currency_code]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:13+13
    assume {:print "$track_local(13,26,4):", $t27} $t27 == $t27;

    // $t29 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:62+38
    assume {:print "$at(10,23691,23729)"} true;
    call $t29 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,23691,23729)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // assert CanModify<Diem::CurrencyInfo<#0>>($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:20+17
    assert {:msg "assert_failed(10,23649,23666): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[$t29];

    // $t30 := borrow_global<Diem::CurrencyInfo<#0>>($t29) on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t29)) {
        call $ExecFailureAbort();
    } else {
        $t30 := $Mutation($Global($t29), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t29));
    }
    if ($abort_flag) {
        assume {:print "$at(10,23649,23666)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // trace_local[info]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t30);
    assume {:print "$track_local(13,26,5):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t31 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:16+7
    assume {:print "$at(10,23747,23754)"} true;
    $t31 := 18446744073709551615;
    assume $IsValid'u64'($t31);

    // $t32 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:26+18
    $t32 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t30));

    // $t33 := -($t31, $t32) on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:24+1
    call $t33 := $Sub($t31, $t32);
    if ($abort_flag) {
        assume {:print "$at(10,23755,23756)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // $t34 := >=($t33, $t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:45+2
    call $t34 := $Ge($t33, $t16);

    // $t35 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:83+5
    $t35 := 7;
    assume $IsValid'u64'($t35);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29
    // >> opaque call: $t26 := Errors::limit_exceeded($t25)

    // $t36 := opaque begin: Errors::limit_exceeded($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29

    // assume WellFormed($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29
    assume $IsValid'u64'($t36);

    // assume Eq<u64>($t36, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29
    assume $IsEqual'u64'($t36, 8);

    // $t36 := opaque end: Errors::limit_exceeded($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29

    // trace_local[tmp#$9]($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$track_local(13,26,9):", $t36} $t36 == $t36;

    // trace_local[tmp#$8]($t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$track_local(13,26,8):", $t34} $t34 == $t34;

    // if ($t34) goto L2 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    if ($t34) { goto L2; } else { goto L8; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
L3:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t30)), Le(select Diem::CurrencyInfo.scaling_factor($t30), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t30))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t30)) <= 10000000000));

    // destroy($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$at(10,23740,23821)"} true;

    // trace_abort($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$at(10,23740,23821)"} true;
    assume {:print "$track_abort(13,26):", $t36} $t36 == $t36;

    // $t17 := move($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    $t17 := $t36;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    goto L10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:488:30+4
    assume {:print "$at(10,23852,23856)"} true;
L2:

    // $t37 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:30+18
    $t37 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t30));

    // $t38 := +($t37, $t16) on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:488:49+1
    call $t38 := $AddU64($t37, $t16);
    if ($abort_flag) {
        assume {:print "$at(10,23871,23872)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // $t39 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+18
    $t39 := $ChildMutation($t30, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t30)));

    // write_ref($t39, $t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+52
    $t39 := $UpdateMutation($t39, $t38);

    // write_back[Reference($t30).preburn_value]($t39) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+52
    $t30 := $UpdateMutation($t30, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t30), $Dereference($t39)));

    // $t40 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:14+17
    assume {:print "$at(10,24147,24164)"} true;
    $t40 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t30));

    // $t41 := !($t40) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:13+1
    call $t41 := $Not($t40);

    // if ($t41) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    if ($t41) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:495:22+4
    assume {:print "$at(10,24220,24224)"} true;
L4:

    // $t42 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_events($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:495:17+24
    $t42 := $ChildMutation($t30, 10, $preburn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t30)));

    // $t43 := pack Diem::PreburnEvent($t16, $t27, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:496:17+143
    assume {:print "$at(10,24257,24400)"} true;
    $t43 := $1_Diem_PreburnEvent($t16, $t27, $t2);

    // Event::emit_event<Diem::PreburnEvent>($t42, $t43) on_abort goto L10 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234
    assume {:print "$at(10,24180,24414)"} true;
    call $t42 := $1_Event_emit_event'$1_Diem_PreburnEvent'($t42, $t43);
    if ($abort_flag) {
        assume {:print "$at(10,24180,24414)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(13,26):", $t17} $t17 == $t17;
        goto L10;
    }

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t30)), Le(select Diem::CurrencyInfo.scaling_factor($t30), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t30))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t30)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234
    assume {:print "$at(10,24180,24414)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t30),
        $Dereference($t30));

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:501:14+1
    assume {:print "$at(10,24414,24415)"} true;
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    assume {:print "$at(10,24142,24425)"} true;
L6:

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t30)), Le(select Diem::CurrencyInfo.scaling_factor($t30), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t30))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t30)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    assume {:print "$at(10,24142,24425)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t30),
        $Dereference($t30));

    // destroy($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    assume {:print "$at(10,24425,24426)"} true;
L7:

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(13,26,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    goto L9;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t1) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    assume {:print "$at(10,24431,24432)"} true;
L9:

    // assume Identical($t44, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(10,25479,25531)"} true;
    assume ($t44 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert Not(Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t15)), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:514:9+63
    assume {:print "$at(10,24979,25042)"} true;
    assert {:msg "assert_failed(10,24979,25042): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t15)) > 0);

    // assert Not(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@294]<#0>()), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:520:9+102
    assume {:print "$at(10,25211,25313)"} true;
    assert {:msg "assert_failed(10,25211,25313): function does not abort under this condition"}
      !(($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615);

    // assert Not(Not(Diem::spec_is_currency[@294]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294);

    // assert exists<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Diem.move:506:9+79
    assume {:print "$at(10,24563,24642)"} true;
    assert {:msg "assert_failed(10,24563,24642): post-condition does not hold"}
      $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assert Eq<Diem::CurrencyInfo<#0>>($t44, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t10, Add(select Diem::CurrencyInfo.preburn_value($t10), select Diem::Diem.value($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:527:9+84
    assume {:print "$at(10,25540,25624)"} true;
    assert {:msg "assert_failed(10,25540,25624): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t44, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t10, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t10) + $value#$1_Diem_Diem'#0'($t0))));

    // assert Implies(Diem::spec_is_currency[@294]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@294]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@295]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#295, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@295]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#295, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@294]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@294]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@296]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#296, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@296]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#296, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@294]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@294]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@297]<Diem::PreburnQueue<#0>>(addr), exists[@298]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#297, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#298, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@297]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#297, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@294]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@294]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t14, $t13, Not(select Diem::CurrencyInfo.is_synthetic($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:540:9+42
    assume {:print "$at(10,26020,26062)"} true;
    assert {:msg "assert_failed(10,26020,26062): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t13, $t14, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t11)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t14, $t13, Not(select Diem::CurrencyInfo.is_synthetic($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:504:5+420
    assume {:print "$at(10,24437,24857)"} true;
    assert {:msg "assert_failed(10,24437,24857): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t13, $t14, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t11)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:504:5+420
    $ret0 := $t1;
    return;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    assume {:print "$at(10,24431,24432)"} true;
L10:

    // assert Or(Or(Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t15)), 0), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@294]<#0>()), select Diem::Diem.value($t0)), 18446744073709551615)), Not(Diem::spec_is_currency[@294]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:504:5+420
    assume {:print "$at(10,24437,24857)"} true;
    assert {:msg "assert_failed(10,24437,24857): abort not covered by any of the `aborts_if` clauses"}
      ((($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t15)) > 0) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294));

    // assert Or(Or(And(Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t15)), 0), Eq(1, $t17)), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@294]<#0>()), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t17))), And(Not(Diem::spec_is_currency[@294]<#0>()), Eq(5, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:504:5+420
    assert {:msg "assert_failed(10,24437,24857): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t15)) > 0) && $IsEqual'u8'(1, $t17)) || ((($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#294)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615) && $IsEqual'u8'(8, $t17))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#294) && $IsEqual'u8'(5, $t17)));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:504:5+420
    $abort_code := $t17;
    $abort_flag := true;
    return;

    // label L15 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L15:

    // destroy($t1) at <internal>:1:1+10

    // goto L12 at <internal>:1:1+10
    goto L12;

    // label L16 at <internal>:1:1+10
L16:

    // destroy($t1) at <internal>:1:1+10

    // goto L14 at <internal>:1:1+10
    goto L14;

}

// fun Diem::publish_burn_capability<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+424
procedure {:inline 1} $1_Diem_publish_burn_capability'$1_XUS_XUS'(_$t0: int, _$t1: $1_Diem_BurnCapability'$1_XUS_XUS') returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$at(10,13382,13383)"} true;
    assume {:print "$track_local(13,27,0):", $t0} $t0 == $t0;

    // trace_local[cap]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$track_local(13,27,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,13519,13564)"} true;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(10,13519,13564)"} true;

    // assume Identical($t6, Or(Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume ($t6 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'u8'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(10,13519,13564)"} true;
    assume {:print "$track_abort(13,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,13574,13604)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30

    // assume Identical($t8, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume ($t8 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t8) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    if ($t8) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume {:print "$at(10,13574,13604)"} true;
    assume {:print "$track_abort(13,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(10,13668,13698)"} true;

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30

    // $t10 := exists<Diem::BurnCapability<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:14+6
    $t10 := $ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t9);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:13+1
    call $t11 := $Not($t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:39+16
    assume {:print "$at(10,13739,13755)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    // >> opaque call: $t8 := Errors::already_published($t7)

    // $t13 := opaque begin: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsEqual'u64'($t13, 6);

    // $t13 := opaque end: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(10,13614,13766)"} true;
    assume {:print "$track_local(13,27,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$track_local(13,27,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(10,13614,13766)"} true;
    assume {:print "$track_abort(13,27):", $t13} $t13 == $t13;

    // $t7 := move($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    $t7 := $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:17+10
    assume {:print "$at(10,13784,13794)"} true;
L0:

    // move_to<Diem::BurnCapability<#0>>($t1, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:9+7
    if ($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_BurnCapability'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t0, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(10,13776,13783)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(13,27):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    assume {:print "$at(10,13805,13806)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Diem::publish_burn_capability<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+424
procedure {:inline 1} $1_Diem_publish_burn_capability'#0'(_$t0: int, _$t1: $1_Diem_BurnCapability'#0') returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$at(10,13382,13383)"} true;
    assume {:print "$track_local(13,27,0):", $t0} $t0 == $t0;

    // trace_local[cap]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$track_local(13,27,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,13519,13564)"} true;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(10,13519,13564)"} true;

    // assume Identical($t6, Or(Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume ($t6 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'u8'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(10,13519,13564)"} true;
    assume {:print "$track_abort(13,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,13574,13604)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30

    // assume Identical($t8, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume ($t8 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t8) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    if ($t8) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume {:print "$at(10,13574,13604)"} true;
    assume {:print "$track_abort(13,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(10,13668,13698)"} true;

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30

    // $t10 := exists<Diem::BurnCapability<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:14+6
    $t10 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t9);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:13+1
    call $t11 := $Not($t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:39+16
    assume {:print "$at(10,13739,13755)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    // >> opaque call: $t8 := Errors::already_published($t7)

    // $t13 := opaque begin: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsEqual'u64'($t13, 6);

    // $t13 := opaque end: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(10,13614,13766)"} true;
    assume {:print "$track_local(13,27,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$track_local(13,27,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(10,13614,13766)"} true;
    assume {:print "$track_abort(13,27):", $t13} $t13 == $t13;

    // $t7 := move($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    $t7 := $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:17+10
    assume {:print "$at(10,13784,13794)"} true;
L0:

    // move_to<Diem::BurnCapability<#0>>($t1, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:9+7
    if ($ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_BurnCapability'#0'_$memory := $ResourceUpdate($1_Diem_BurnCapability'#0'_$memory, $t0, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(10,13776,13783)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(13,27):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    assume {:print "$at(10,13805,13806)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Diem::publish_burn_capability [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+424
procedure {:timeLimit 40} $1_Diem_publish_burn_capability$verify(_$t0: int, _$t1: $1_Diem_BurnCapability'#0') returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#265: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_BurnCapability'#0'_$memory#266: $Memory $1_Diem_BurnCapability'#0';
    var $1_Roles_RoleId_$memory#267: $Memory $1_Roles_RoleId;
    var $1_Diem_MintCapability'#0'_$memory#268: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#269: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#270: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+424
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(10,13382,13806)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+424
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+424
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+424
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+424
    assume $IsValid'$1_Diem_BurnCapability'#0''($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+424
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+424
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+424
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // @267 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$at(10,13382,13383)"} true;
    $1_Roles_RoleId_$memory#267 := $1_Roles_RoleId_$memory;

    // @266 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    $1_Diem_BurnCapability'#0'_$memory#266 := $1_Diem_BurnCapability'#0'_$memory;

    // @265 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#265 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @268 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    $1_Diem_MintCapability'#0'_$memory#268 := $1_Diem_MintCapability'#0'_$memory;

    // @270 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    $1_Diem_Preburn'#0'_$memory#270 := $1_Diem_Preburn'#0'_$memory;

    // @269 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    $1_Diem_PreburnQueue'#0'_$memory#269 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$track_local(13,27,0):", $t0} $t0 == $t0;

    // trace_local[cap]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$track_local(13,27,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,13519,13564)"} true;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(10,13519,13564)"} true;

    // assume Identical($t6, Or(Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume ($t6 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'u8'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(10,13519,13564)"} true;
    assume {:print "$track_abort(13,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,13574,13604)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30

    // assume Identical($t8, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume ($t8 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t8) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    if ($t8) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume {:print "$at(10,13574,13604)"} true;
    assume {:print "$track_abort(13,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(10,13668,13698)"} true;

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30

    // $t10 := exists<Diem::BurnCapability<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:14+6
    $t10 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t9);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:13+1
    call $t11 := $Not($t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:39+16
    assume {:print "$at(10,13739,13755)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    // >> opaque call: $t8 := Errors::already_published($t7)

    // $t13 := opaque begin: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsEqual'u64'($t13, 6);

    // $t13 := opaque end: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(10,13614,13766)"} true;
    assume {:print "$track_local(13,27,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$track_local(13,27,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(10,13614,13766)"} true;
    assume {:print "$track_abort(13,27):", $t13} $t13 == $t13;

    // $t7 := move($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    $t7 := $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:17+10
    assume {:print "$at(10,13784,13794)"} true;
L0:

    // move_to<Diem::BurnCapability<#0>>($t1, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:9+7
    if ($ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_BurnCapability'#0'_$memory := $ResourceUpdate($1_Diem_BurnCapability'#0'_$memory, $t0, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(10,13776,13783)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(13,27):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    assume {:print "$at(10,13805,13806)"} true;
L2:

    // assert Not(Not(Diem::spec_is_currency[@265]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:278:9+40
    assume {:print "$at(10,13850,13890)"} true;
    assert {:msg "assert_failed(10,13850,13890): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265);

    // assert Not(exists[@266]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:286:9+111
    assume {:print "$at(10,14286,14397)"} true;
    assert {:msg "assert_failed(10,14286,14397): function does not abort under this condition"}
      !$ResourceExists($1_Diem_BurnCapability'#0'_$memory#266, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@267]<Roles::RoleId>($t4))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#267, $t4);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@267]<Roles::RoleId>($t4)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#267, $t4)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Implies(Diem::spec_is_currency[@265]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@265]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#265))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@268]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#268, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@268]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#268, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@265]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@265]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#265))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@266]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#266, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@265]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@265]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#265))));

    // assert Implies(Diem::spec_is_currency[@265]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@265]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#265))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@269]<Diem::PreburnQueue<#0>>(addr), exists[@270]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#269, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#270, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@269]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#269, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@265]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@265]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#265))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    assume {:print "$at(10,13805,13806)"} true;
L3:

    // assert Or(Or(Or(Or(Not(Diem::spec_is_currency[@265]<#0>()), exists[@266]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Not(exists[@267]<Roles::RoleId>($t4))), Neq<u64>(select Roles::RoleId.role_id(global[@267]<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/Diem.move:277:5+136
    assume {:print "$at(10,13811,13947)"} true;
    assert {:msg "assert_failed(10,13811,13947): abort not covered by any of the `aborts_if` clauses"}
      ((((!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) || $ResourceExists($1_Diem_BurnCapability'#0'_$memory#266, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#267, $t4)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#267, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assert Or(Or(Or(Or(Not(Diem::spec_is_currency[@265]<#0>()), And(exists[@266]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)), Eq(6, $t7))), And(Not(exists[@267]<Roles::RoleId>($t4)), Eq(5, $t7))), And(Neq<u64>(select Roles::RoleId.role_id(global[@267]<Roles::RoleId>($t4)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/Diem.move:277:5+136
    assert {:msg "assert_failed(10,13811,13947): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#265) || ($ResourceExists($1_Diem_BurnCapability'#0'_$memory#266, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(6, $t7))) || (!$ResourceExists($1_Roles_RoleId_$memory#267, $t4) && $IsEqual'u8'(5, $t7))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#267, $t4)), 1) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t7)));

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:277:5+136
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Diem::publish_preburn_queue [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:568:5+592
procedure {:timeLimit 40} $1_Diem_publish_preburn_queue$verify(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t24: $1_Diem_PreburnQueue'#0';
    var $t0: int;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_PreburnQueue'#0'_$memory#236: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#237: $Memory $1_Diem_Preburn'#0';
    var $1_Roles_RoleId_$memory#238: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#239: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#240: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#241: $Memory $1_Diem_BurnCapability'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:568:5+592
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(10,27164,27756)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:568:5+592
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:568:5+592
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:568:5+592
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:568:5+592
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:568:5+592
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:568:5+592
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:568:5+592
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:588:9+52
    assume {:print "$at(10,27821,27873)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:605:9+52
    assume {:print "$at(10,28691,28743)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume CanModify<Diem::PreburnQueue<#0>>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:589:9+54
    assume {:print "$at(10,27882,27936)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t6];

    // @238 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:589:9+54
    $1_Roles_RoleId_$memory#238 := $1_Roles_RoleId_$memory;

    // @241 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:589:9+54
    $1_Diem_BurnCapability'#0'_$memory#241 := $1_Diem_BurnCapability'#0'_$memory;

    // @239 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:589:9+54
    $1_Diem_CurrencyInfo'#0'_$memory#239 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @240 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:589:9+54
    $1_Diem_MintCapability'#0'_$memory#240 := $1_Diem_MintCapability'#0'_$memory;

    // @237 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:589:9+54
    $1_Diem_Preburn'#0'_$memory#237 := $1_Diem_Preburn'#0'_$memory;

    // @236 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:589:9+54
    $1_Diem_PreburnQueue'#0'_$memory#236 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:568:5+1
    assume {:print "$at(10,27164,27165)"} true;
    assume {:print "$track_local(13,28,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:571:28+27
    // >> opaque call: $t6 := Signer::address_of($t0)
    assume {:print "$at(10,27268,27295)"} true;

    // $t10 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:571:28+27

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:571:28+27
    assume $IsValid'address'($t10);

    // assume Eq<address>($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:571:28+27
    assume $IsEqual'address'($t10, $1_Signer_spec_address_of($t0));

    // $t10 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:571:28+27

    // trace_local[account_addr]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:571:13+12
    assume {:print "$track_local(13,28,1):", $t10} $t10 == $t10;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+40
    // >> opaque call: Roles::assert_designated_dealer($t0)
    assume {:print "$at(10,27305,27345)"} true;

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+40
    assume {:print "$at(10,27305,27345)"} true;

    // assume Identical($t12, Or(Not(exists<Roles::RoleId>($t11)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+40
    assume ($t12 == (!$ResourceExists($1_Roles_RoleId_$memory, $t11) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 2)));

    // if ($t12) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+40
    if ($t12) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+40
L7:

    // assume Or(And(Not(exists<Roles::RoleId>($t11)), Eq(5, $t13)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 2), Eq(3, $t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+40
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t11) && $IsEqual'u8'(5, $t13)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 2) && $IsEqual'u8'(3, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+40
    assume {:print "$at(10,27305,27345)"} true;
    assume {:print "$track_abort(13,28):", $t13} $t13 == $t13;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+40
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+40
L6:

    // opaque end: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:572:9+40

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:573:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,27355,27385)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:573:9+30

    // assume Identical($t14, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:573:9+30
    assume ($t14 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t14) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:573:9+30
    if ($t14) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:573:9+30
L9:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t13)) at /home/ying/diem/language/diem-framework/modules/Diem.move:573:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:573:9+30
    assume {:print "$at(10,27355,27385)"} true;
    assume {:print "$track_abort(13,28):", $t13} $t13 == $t13;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:573:9+30
    goto L5;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:573:9+30
L8:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:573:9+30

    // $t15 := exists<Diem::Preburn<#0>>($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:575:14+6
    assume {:print "$at(10,27416,27422)"} true;
    $t15 := $ResourceExists($1_Diem_Preburn'#0'_$memory, $t10);

    // $t16 := !($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:575:13+1
    call $t16 := $Not($t15);

    // $t17 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:576:35+8
    assume {:print "$at(10,27491,27499)"} true;
    $t17 := 2;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:576:13+31
    // >> opaque call: $t10 := Errors::invalid_state($t9)

    // $t18 := opaque begin: Errors::invalid_state($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:576:13+31

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:576:13+31
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:576:13+31
    assume $IsEqual'u64'($t18, 1);

    // $t18 := opaque end: Errors::invalid_state($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:576:13+31

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:574:9+115
    assume {:print "$at(10,27395,27510)"} true;
    assume {:print "$track_local(13,28,3):", $t18} $t18 == $t18;

    // trace_local[tmp#$2]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:574:9+115
    assume {:print "$track_local(13,28,2):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:574:9+115
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:574:9+115
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:574:9+115

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:574:9+115
    assume {:print "$at(10,27395,27510)"} true;
    assume {:print "$track_abort(13,28):", $t18} $t18 == $t18;

    // $t13 := move($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:574:9+115
    $t13 := $t18;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:574:9+115
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:579:45+12
    assume {:print "$at(10,27572,27584)"} true;
L0:

    // $t19 := exists<Diem::PreburnQueue<#0>>($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:579:14+6
    $t19 := $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t10);

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:579:13+1
    call $t20 := $Not($t19);

    // $t21 := 11 at /home/ying/diem/language/diem-framework/modules/Diem.move:580:39+14
    assume {:print "$at(10,27625,27639)"} true;
    $t21 := 11;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:580:13+41
    // >> opaque call: $t14 := Errors::already_published($t13)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:580:13+41

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:580:13+41
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:580:13+41
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:580:13+41

    // trace_local[tmp#$5]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:578:9+130
    assume {:print "$at(10,27520,27650)"} true;
    assume {:print "$track_local(13,28,5):", $t22} $t22 == $t22;

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:578:9+130
    assume {:print "$track_local(13,28,4):", $t20} $t20 == $t20;

    // if ($t20) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:578:9+130
    if ($t20) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:578:9+130
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:578:9+130

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:578:9+130
    assume {:print "$at(10,27520,27650)"} true;
    assume {:print "$track_abort(13,28):", $t22} $t22 == $t22;

    // $t13 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:578:9+130
    $t13 := $t22;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:578:9+130
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:582:17+7
    assume {:print "$at(10,27668,27675)"} true;
L2:

    // $t23 := Vector::empty<Diem::PreburnWithMetadata<#0>>() on_abort goto L5 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:583:23+15
    assume {:print "$at(10,27724,27739)"} true;
    call $t23 := $1_Vector_empty'$1_Diem_PreburnWithMetadata'#0''();
    if ($abort_flag) {
        assume {:print "$at(10,27724,27739)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(13,28):", $t13} $t13 == $t13;
        goto L5;
    }

    // $t24 := pack Diem::PreburnQueue<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:582:26+72
    assume {:print "$at(10,27677,27749)"} true;
    $t24 := $1_Diem_PreburnQueue'#0'($t23);

    // assert Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t24)), 256) at /home/ying/diem/language/diem-framework/modules/Diem.move:201:9+52
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:201:9+52
    assume {:print "$at(10,10315,10367)"} true;
    assert {:msg "assert_failed(10,10315,10367): data invariant does not hold"}
      (LenVec($preburns#$1_Diem_PreburnQueue'#0'($t24)) <= 256);

    // assert forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t24))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($t24), i)))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:205:9+78
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:205:9+78
    assume {:print "$at(10,10543,10621)"} true;
    assert {:msg "assert_failed(10,10543,10621): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($t24))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($t24), i)))) > 0)))));

    // assert CanModify<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:582:9+7
    assume {:print "$at(10,27660,27667)"} true;
    assert {:msg "assert_failed(10,27660,27667): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t0];

    // move_to<Diem::PreburnQueue<#0>>($t24, $t0) on_abort goto L5 with $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:582:9+7
    if ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $t24);
    }
    if ($abort_flag) {
        assume {:print "$at(10,27660,27667)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(13,28):", $t13} $t13 == $t13;
        goto L5;
    }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:585:5+1
    assume {:print "$at(10,27755,27756)"} true;
L4:

    // assert Not(exists[@236]<Diem::PreburnQueue<#0>>($t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:591:9+86
    assume {:print "$at(10,27995,28081)"} true;
    assert {:msg "assert_failed(10,27995,28081): function does not abort under this condition"}
      !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#236, $t6);

    // assert Not(exists[@237]<Diem::Preburn<#0>>($t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:594:9+77
    assume {:print "$at(10,28225,28302)"} true;
    assert {:msg "assert_failed(10,28225,28302): function does not abort under this condition"}
      !$ResourceExists($1_Diem_Preburn'#0'_$memory#237, $t6);

    // assert Not(Not(exists[@238]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#238, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@238]<Roles::RoleId>($t7)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#238, $t7)), 2);

    // assert Not(Not(Diem::spec_is_currency[@239]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239);

    // assert Not(Not(exists[@238]<Roles::RoleId>($t9))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#238, $t9);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@238]<Roles::RoleId>($t9)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#238, $t9)), 2);

    // assert exists<Diem::PreburnQueue<#0>>($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:607:9+53
    assume {:print "$at(10,28823,28876)"} true;
    assert {:msg "assert_failed(10,28823,28876): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t8);

    // assert Not(exists<Diem::Preburn<#0>>($t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:609:9+49
    assume {:print "$at(10,28969,29018)"} true;
    assert {:msg "assert_failed(10,28969,29018): post-condition does not hold"}
      !$ResourceExists($1_Diem_Preburn'#0'_$memory, $t8);

    // assert Eq<u64>(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t8))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:611:9+83
    assume {:print "$at(10,29069,29152)"} true;
    assert {:msg "assert_failed(10,29069,29152): post-condition does not hold"}
      $IsEqual'u64'($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t8))), 0);

    // assert Implies(Diem::spec_is_currency[@239]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@239]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#239))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@240]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#240, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@240]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#240, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@239]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@239]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#239))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@241]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#241, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@241]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#241, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@239]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@239]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#239))));

    // assert Implies(Diem::spec_is_currency[@239]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@239]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#239))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@236]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#236, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@239]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@239]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#239))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:585:5+1
    assume {:print "$at(10,27755,27756)"} true;
L5:

    // assert Or(Or(Or(Or(Or(Or(exists[@236]<Diem::PreburnQueue<#0>>($t6), exists[@237]<Diem::Preburn<#0>>($t6)), Not(exists[@238]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@238]<Roles::RoleId>($t7)), 2)), Not(Diem::spec_is_currency[@239]<#0>())), Not(exists[@238]<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global[@238]<Roles::RoleId>($t9)), 2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:586:5+656
    assume {:print "$at(10,27761,28417)"} true;
    assert {:msg "assert_failed(10,27761,28417): abort not covered by any of the `aborts_if` clauses"}
      (((((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#236, $t6) || $ResourceExists($1_Diem_Preburn'#0'_$memory#237, $t6)) || !$ResourceExists($1_Roles_RoleId_$memory#238, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#238, $t7)), 2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239)) || !$ResourceExists($1_Roles_RoleId_$memory#238, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#238, $t9)), 2));

    // assert Or(Or(Or(Or(Or(Or(And(exists[@236]<Diem::PreburnQueue<#0>>($t6), Eq(6, $t13)), And(exists[@237]<Diem::Preburn<#0>>($t6), Eq(1, $t13))), And(Not(exists[@238]<Roles::RoleId>($t7)), Eq(5, $t13))), And(Neq<u64>(select Roles::RoleId.role_id(global[@238]<Roles::RoleId>($t7)), 2), Eq(3, $t13))), And(Not(Diem::spec_is_currency[@239]<#0>()), Eq(5, $t13))), And(Not(exists[@238]<Roles::RoleId>($t9)), Eq(5, $t13))), And(Neq<u64>(select Roles::RoleId.role_id(global[@238]<Roles::RoleId>($t9)), 2), Eq(3, $t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:586:5+656
    assert {:msg "assert_failed(10,27761,28417): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#236, $t6) && $IsEqual'u8'(6, $t13)) || ($ResourceExists($1_Diem_Preburn'#0'_$memory#237, $t6) && $IsEqual'u8'(1, $t13))) || (!$ResourceExists($1_Roles_RoleId_$memory#238, $t7) && $IsEqual'u8'(5, $t13))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#238, $t7)), 2) && $IsEqual'u8'(3, $t13))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#239) && $IsEqual'u8'(5, $t13))) || (!$ResourceExists($1_Roles_RoleId_$memory#238, $t9) && $IsEqual'u8'(5, $t13))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#238, $t9)), 2) && $IsEqual'u8'(3, $t13)));

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:586:5+656
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun Diem::publish_preburn_queue_to_account [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:618:5+407
procedure {:timeLimit 40} $1_Diem_publish_preburn_queue_to_account$verify(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: bool;
    var $t0: int;
    var $t1: int;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#333: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#334: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#335: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#336: $Memory $1_Diem_Preburn'#0';
    var $1_Diem_MintCapability'#0'_$memory#337: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#338: $Memory $1_Diem_BurnCapability'#0';
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:618:5+407
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(10,29489,29896)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:618:5+407
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:618:5+407
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:618:5+407
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:618:5+407
    assume $IsValid'address'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:618:5+407
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:618:5+407
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:618:5+407
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:618:5+407
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:629:9+52
    assume {:print "$at(10,29972,30024)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:605:9+52
    assume {:print "$at(10,28691,28743)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume CanModify<Diem::PreburnQueue<#0>>($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:630:9+54
    assume {:print "$at(10,30033,30087)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t4];

    // @333 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:630:9+54
    $1_Roles_RoleId_$memory#333 := $1_Roles_RoleId_$memory;

    // @338 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:630:9+54
    $1_Diem_BurnCapability'#0'_$memory#338 := $1_Diem_BurnCapability'#0'_$memory;

    // @334 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:630:9+54
    $1_Diem_CurrencyInfo'#0'_$memory#334 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @337 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:630:9+54
    $1_Diem_MintCapability'#0'_$memory#337 := $1_Diem_MintCapability'#0'_$memory;

    // @336 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:630:9+54
    $1_Diem_Preburn'#0'_$memory#336 := $1_Diem_Preburn'#0'_$memory;

    // @335 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:630:9+54
    $1_Diem_PreburnQueue'#0'_$memory#335 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:618:5+1
    assume {:print "$at(10,29489,29490)"} true;
    assume {:print "$track_local(13,29,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:618:5+1
    assume {:print "$track_local(13,29,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+40
    // >> opaque call: Roles::assert_designated_dealer($t0)
    assume {:print "$at(10,29643,29683)"} true;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+40
    assume {:print "$at(10,29643,29683)"} true;

    // assume Identical($t11, Or(Not(exists<Roles::RoleId>($t10)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+40
    assume ($t11 == (!$ResourceExists($1_Roles_RoleId_$memory, $t10) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 2)));

    // if ($t11) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+40
    if ($t11) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+40
L5:

    // assume Or(And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t12)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 2), Eq(3, $t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+40
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'u8'(5, $t12)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 2) && $IsEqual'u8'(3, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+40
    assume {:print "$at(10,29643,29683)"} true;
    assume {:print "$track_abort(13,29):", $t12} $t12 == $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+40
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+40
L4:

    // opaque end: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:622:9+40

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(10,29693,29738)"} true;

    // assume Identical($t13, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+45
    assume {:print "$at(10,29693,29738)"} true;

    // assume Identical($t14, Or(Or(Not(exists<Roles::RoleId>($t13)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 1)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+45
    assume ($t14 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t13) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t14) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+45
    if ($t14) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+45
L7:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t13)), Eq(5, $t12)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 1), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t13) && $IsEqual'u8'(5, $t12)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 1) && $IsEqual'u8'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+45
    assume {:print "$at(10,29693,29738)"} true;
    assume {:print "$track_abort(13,29):", $t12} $t12 == $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+45
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+45
L6:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:623:9+45

    // $t15 := Diem::is_synthetic_currency<#0>() on_abort goto L3 with $t12 at /home/ying/diem/language/diem-framework/modules/Diem.move:624:17+33
    assume {:print "$at(10,29756,29789)"} true;
    call $t15 := $1_Diem_is_synthetic_currency'#0'();
    if ($abort_flag) {
        assume {:print "$at(10,29756,29789)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(13,29):", $t12} $t12 == $t12;
        goto L3;
    }

    // $t16 := !($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:624:16+1
    call $t16 := $Not($t15);

    // $t17 := 6 at /home/ying/diem/language/diem-framework/modules/Diem.move:624:77+22
    $t17 := 6;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:624:52+48
    // >> opaque call: $t7 := Errors::invalid_argument($t6)

    // $t18 := opaque begin: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:624:52+48

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:624:52+48
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:624:52+48
    assume $IsEqual'u64'($t18, 7);

    // $t18 := opaque end: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:624:52+48

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:624:9+92
    assume {:print "$track_local(13,29,3):", $t18} $t18 == $t18;

    // trace_local[tmp#$2]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:624:9+92
    assume {:print "$track_local(13,29,2):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:624:9+92
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:624:9+92
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:624:9+92

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:624:9+92
    assume {:print "$at(10,29748,29840)"} true;
    assume {:print "$track_abort(13,29):", $t18} $t18 == $t18;

    // $t12 := move($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:624:9+92
    $t12 := $t18;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:624:9+92
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:625:41+7
    assume {:print "$at(10,29882,29889)"} true;
L0:

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
    // >> opaque call: Diem::publish_preburn_queue<#0>($t0)

    // assume Identical($t19, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:588:9+52
    assume {:print "$at(10,27821,27873)"} true;
    assume ($t19 == $1_Signer_spec_address_of($t0));

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // assume Identical($t21, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:605:9+52
    assume {:print "$at(10,28691,28743)"} true;
    assume ($t21 == $1_Signer_spec_address_of($t0));

    // assume Identical($t22, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t22 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Diem::PreburnQueue<#0>>($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
    assume {:print "$at(10,29850,29890)"} true;
    assert {:msg "assert_failed(10,29850,29890): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t19];

    // opaque begin: Diem::publish_preburn_queue<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40

    // assume Identical($t23, Or(Or(Or(Or(exists<Diem::PreburnQueue<#0>>($t19), exists<Diem::Preburn<#0>>($t19)), Not(exists<Roles::RoleId>($t20))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 2)), Not(Diem::spec_is_currency<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
    assume ($t23 == (((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t19) || $ResourceExists($1_Diem_Preburn'#0'_$memory, $t19)) || !$ResourceExists($1_Roles_RoleId_$memory, $t20)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // if ($t23) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
    if ($t23) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
L9:

    // assume Or(Or(Or(Or(And(exists<Diem::PreburnQueue<#0>>($t19), Eq(6, $t12)), And(exists<Diem::Preburn<#0>>($t19), Eq(1, $t12))), And(Not(exists<Roles::RoleId>($t20)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 2), Eq(3, $t12))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
    assume ((((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t19) && $IsEqual'u8'(6, $t12)) || ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t19) && $IsEqual'u8'(1, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t20) && $IsEqual'u8'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 2) && $IsEqual'u8'(3, $t12))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
    assume {:print "$at(10,29850,29890)"} true;
    assume {:print "$track_abort(13,29):", $t12} $t12 == $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
L8:

    // modifies global<Diem::PreburnQueue<#0>>($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t19, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t19);
    }

    // assume exists<Diem::PreburnQueue<#0>>($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t21);

    // assume Not(exists<Diem::Preburn<#0>>($t21)) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
    assume !$ResourceExists($1_Diem_Preburn'#0'_$memory, $t21);

    // assume Eq<u64>(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t21))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40
    assume $IsEqual'u64'($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t21))), 0);

    // opaque end: Diem::publish_preburn_queue<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:625:9+40

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:626:5+1
    assume {:print "$at(10,29895,29896)"} true;
L2:

    // assert Not(Not(exists[@333]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#333, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t5)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t5)), 2);

    // assert Not(Not(exists[@333]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#333, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t6)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t6)), 2);

    // assert Not(Not(Diem::spec_is_currency[@334]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334);

    // assert Not(Not(exists[@333]<Roles::RoleId>($t8))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#333, $t8);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t8)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t8)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Not(Diem::spec_is_currency[@334]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334);

    // assert Not(Diem::$is_synthetic_currency[@334]<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:641:9+74
    assume {:print "$at(10,30690,30764)"} true;
    assert {:msg "assert_failed(10,30690,30764): function does not abort under this condition"}
      !$1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334);

    // assert Not(exists[@335]<Diem::PreburnQueue<#0>>($t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:642:9+86
    assume {:print "$at(10,30773,30859)"} true;
    assert {:msg "assert_failed(10,30773,30859): function does not abort under this condition"}
      !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#335, $t4);

    // assert Not(exists[@336]<Diem::Preburn<#0>>($t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:643:9+77
    assume {:print "$at(10,30868,30945)"} true;
    assert {:msg "assert_failed(10,30868,30945): function does not abort under this condition"}
      !$ResourceExists($1_Diem_Preburn'#0'_$memory#336, $t4);

    // assert Not(Not(exists[@333]<Roles::RoleId>($t9))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#333, $t9);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t9)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t9)), 2);

    // assert exists<Diem::PreburnQueue<#0>>($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:607:9+53
    assume {:print "$at(10,28823,28876)"} true;
    assert {:msg "assert_failed(10,28823,28876): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t7);

    // assert Not(exists<Diem::Preburn<#0>>($t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:609:9+49
    assume {:print "$at(10,28969,29018)"} true;
    assert {:msg "assert_failed(10,28969,29018): post-condition does not hold"}
      !$ResourceExists($1_Diem_Preburn'#0'_$memory, $t7);

    // assert Eq<u64>(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t7))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:611:9+83
    assume {:print "$at(10,29069,29152)"} true;
    assert {:msg "assert_failed(10,29069,29152): post-condition does not hold"}
      $IsEqual'u64'($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t7))), 0);

    // assert exists<Diem::PreburnQueue<#0>>($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:637:9+53
    assume {:print "$at(10,30506,30559)"} true;
    assert {:msg "assert_failed(10,30506,30559): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t4);

    // assert Implies(Diem::spec_is_currency[@334]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@334]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#334))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@337]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#337, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@337]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#337, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@334]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@334]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#334))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@338]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#338, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@338]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#338, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@334]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@334]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#334))));

    // assert Implies(Diem::spec_is_currency[@334]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@334]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#334))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@335]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#335, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@334]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@334]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#334))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:626:5+1
    assume {:print "$at(10,29895,29896)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@333]<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t5)), 2)), Not(exists[@333]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t6)), 2)), Not(Diem::spec_is_currency[@334]<#0>())), Not(exists[@333]<Roles::RoleId>($t8))), Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t8)), 1)), Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Not(Diem::spec_is_currency[@334]<#0>())), Diem::$is_synthetic_currency[@334]<#0>()), exists[@335]<Diem::PreburnQueue<#0>>($t4)), exists[@336]<Diem::Preburn<#0>>($t4)), Not(exists[@333]<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t9)), 2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:627:5+1051
    assume {:print "$at(10,29901,30952)"} true;
    assert {:msg "assert_failed(10,29901,30952): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((!$ResourceExists($1_Roles_RoleId_$memory#333, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t5)), 2)) || !$ResourceExists($1_Roles_RoleId_$memory#333, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t6)), 2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334)) || !$ResourceExists($1_Roles_RoleId_$memory#333, $t8)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t8)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334)) || $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334)) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#335, $t4)) || $ResourceExists($1_Diem_Preburn'#0'_$memory#336, $t4)) || !$ResourceExists($1_Roles_RoleId_$memory#333, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t9)), 2));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@333]<Roles::RoleId>($t5)), Eq(5, $t12)), And(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t5)), 2), Eq(3, $t12))), And(Not(exists[@333]<Roles::RoleId>($t6)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t6)), 2), Eq(3, $t12))), And(Not(Diem::spec_is_currency[@334]<#0>()), Eq(5, $t12))), And(Not(exists[@333]<Roles::RoleId>($t8)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t8)), 1), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t12))), And(Not(Diem::spec_is_currency[@334]<#0>()), Eq(5, $t12))), And(Diem::$is_synthetic_currency[@334]<#0>(), Eq(7, $t12))), And(exists[@335]<Diem::PreburnQueue<#0>>($t4), Eq(6, $t12))), And(exists[@336]<Diem::Preburn<#0>>($t4), Eq(1, $t12))), And(Not(exists[@333]<Roles::RoleId>($t9)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global[@333]<Roles::RoleId>($t9)), 2), Eq(3, $t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:627:5+1051
    assert {:msg "assert_failed(10,29901,30952): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((!$ResourceExists($1_Roles_RoleId_$memory#333, $t5) && $IsEqual'u8'(5, $t12)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t5)), 2) && $IsEqual'u8'(3, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#333, $t6) && $IsEqual'u8'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t6)), 2) && $IsEqual'u8'(3, $t12))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) && $IsEqual'u8'(5, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#333, $t8) && $IsEqual'u8'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t8)), 1) && $IsEqual'u8'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t12))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) && $IsEqual'u8'(5, $t12))) || ($1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#334) && $IsEqual'u8'(7, $t12))) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#335, $t4) && $IsEqual'u8'(6, $t12))) || ($ResourceExists($1_Diem_Preburn'#0'_$memory#336, $t4) && $IsEqual'u8'(1, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#333, $t9) && $IsEqual'u8'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#333, $t9)), 2) && $IsEqual'u8'(3, $t12)));

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:627:5+1051
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun Diem::register_SCS_currency<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
procedure {:inline 1} $1_Diem_register_SCS_currency'$1_XUS_XUS'(_$t0: int, _$t1: int, _$t2: $1_FixedPoint32_FixedPoint32, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ()
{
    // declare local variables
    var $t6: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t7: $1_Diem_MintCapability'$1_XUS_XUS';
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: int;
    var $t24: $1_DiemConfig_Configuration;
    var $t25: int;
    var $t26: $1_Diem_MintCapability'$1_XUS_XUS';
    var $t27: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t28: int;
    var $t29: bool;
    var $t30: bool;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: int;
    var $t1: int;
    var $t2: $1_FixedPoint32_FixedPoint32;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_MintCapability'$1_XUS_XUS'': $1_Diem_MintCapability'$1_XUS_XUS';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // assume Identical($t10, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t1));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t14, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t1));

    // assume Identical($t15, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t15 == $1_Signer_spec_address_of($t1));

    // assume Identical($t16, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t16 == $1_Signer_spec_address_of($t1));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$at(10,62592,62593)"} true;
    assume {:print "$track_local(13,30,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,1):", $t1} $t1 == $t1;

    // trace_local[to_xdx_exchange_rate]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(10,62855,62900)"} true;

    // assume Identical($t17, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    assume {:print "$at(10,62855,62900)"} true;

    // assume Identical($t18, Or(Or(Not(exists<Roles::RoleId>($t17)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    assume ($t18 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t17) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t18) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    if ($t18) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t17)), Eq(5, $t19)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t19))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t17) && $IsEqual'u8'(5, $t19)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    assume {:print "$at(10,62855,62900)"} true;
    assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,62910,62945)"} true;

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    assume {:print "$at(10,62910,62945)"} true;

    // assume Identical($t21, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t20))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    assume ($t21 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t20)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t21) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    if ($t21) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t19)), And(Not(exists<Roles::RoleId>($t20)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 0), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t19))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t19)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t20) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 0) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    assume {:print "$at(10,62910,62945)"} true;
    assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35

    // $t22 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1313:17+5
    assume {:print "$at(10,63105,63110)"} true;
    $t22 := false;
    assume $IsValid'bool'($t22);

    // assume Identical($t23, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t23 == $1_Signer_spec_address_of($t0));

    // assume Identical($t24, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t24 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t25, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t25 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // ($t26, $t27) := Diem::register_currency<#0>($t0, $t2, $t22, $t3, $t4, $t5) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1310:13+245
    assume {:print "$at(10,62994,63239)"} true;
    call $t26,$t27 := $1_Diem_register_currency'$1_XUS_XUS'($t0, $t2, $t22, $t3, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,62994,63239)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // trace_local[burn_cap]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1309:24+8
    assume {:print "$at(10,62970,62978)"} true;
    assume {:print "$track_local(13,30,6):", $t27} $t27 == $t27;

    // trace_local[mint_cap]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1309:14+8
    assume {:print "$track_local(13,30,7):", $t26} $t26 == $t26;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30
    // >> opaque call: $t13 := Signer::address_of($t1)
    assume {:print "$at(10,63303,63333)"} true;

    // $t28 := opaque begin: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30
    assume $IsValid'address'($t28);

    // assume Eq<address>($t28, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30
    assume $IsEqual'address'($t28, $1_Signer_spec_address_of($t1));

    // $t28 := opaque end: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30

    // $t29 := exists<Diem::MintCapability<#0>>($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:14+6
    $t29 := $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $t28);

    // $t30 := !($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:13+1
    call $t30 := $Not($t29);

    // $t31 := 9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:39+16
    assume {:print "$at(10,63374,63390)"} true;
    $t31 := 9;
    assume $IsValid'u64'($t31);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43
    // >> opaque call: $t17 := Errors::already_published($t16)

    // $t32 := opaque begin: Errors::already_published($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43

    // assume WellFormed($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43
    assume $IsValid'u64'($t32);

    // assume Eq<u64>($t32, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43
    assume $IsEqual'u64'($t32, 6);

    // $t32 := opaque end: Errors::already_published($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43

    // trace_local[tmp#$9]($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    assume {:print "$at(10,63249,63401)"} true;
    assume {:print "$track_local(13,30,9):", $t32} $t32 == $t32;

    // trace_local[tmp#$8]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    assume {:print "$track_local(13,30,8):", $t30} $t30 == $t30;

    // if ($t30) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    if ($t30) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152

    // trace_abort($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    assume {:print "$at(10,63249,63401)"} true;
    assume {:print "$track_abort(13,30):", $t32} $t32 == $t32;

    // $t19 := move($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    $t19 := $t32;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1322:17+10
    assume {:print "$at(10,63419,63429)"} true;
L0:

    // move_to<Diem::MintCapability<#0>>($t26, $t1) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1322:9+7
    if ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_MintCapability'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $t1, $t26);
    }
    if ($abort_flag) {
        assume {:print "$at(10,63411,63418)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // assume Identical($t33, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t1));

    // Diem::publish_burn_capability<#0>($t1, $t27) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1323:9+55
    assume {:print "$at(10,63450,63505)"} true;
    call $1_Diem_publish_burn_capability'$1_XUS_XUS'($t1, $t27);
    if ($abort_flag) {
        assume {:print "$at(10,63450,63505)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+1
    assume {:print "$at(10,63511,63512)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+1
L3:

    // abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+1
    $abort_code := $t19;
    $abort_flag := true;
    return;

}

// fun Diem::register_SCS_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
procedure {:timeLimit 40} $1_Diem_register_SCS_currency$verify(_$t0: int, _$t1: int, _$t2: $1_FixedPoint32_FixedPoint32, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ()
{
    // declare local variables
    var $t6: $1_Diem_BurnCapability'#0';
    var $t7: $1_Diem_MintCapability'#0';
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: int;
    var $t24: $1_DiemConfig_Configuration;
    var $t25: int;
    var $t26: $1_Diem_MintCapability'#0';
    var $t27: $1_Diem_BurnCapability'#0';
    var $t28: int;
    var $t29: bool;
    var $t30: bool;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: int;
    var $t1: int;
    var $t2: $1_FixedPoint32_FixedPoint32;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_MintCapability'#0'': $1_Diem_MintCapability'#0';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_MintCapability'#0'_$memory#478: $Memory $1_Diem_MintCapability'#0';
    var $1_Roles_RoleId_$memory#479: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#480: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#482: $Memory $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemConfig_DisableReconfiguration_$memory#484: $Memory $1_DiemConfig_DisableReconfiguration;
    var $1_Diem_BurnCapability'#0'_$memory#485: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#486: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#487: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(10,62592,63512)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume $IsValid'vec'u8''($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DisableReconfiguration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DisableReconfiguration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+920
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume Identical($t10, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t1));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t14, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t1));

    // assume Identical($t15, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t15 == $1_Signer_spec_address_of($t1));

    // assume Identical($t16, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t16 == $1_Signer_spec_address_of($t1));

    // @483 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$at(10,62592,62593)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @479 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    $1_Roles_RoleId_$memory#479 := $1_Roles_RoleId_$memory;

    // @484 := save_mem(DiemConfig::DisableReconfiguration) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    $1_DiemConfig_DisableReconfiguration_$memory#484 := $1_DiemConfig_DisableReconfiguration_$memory;

    // @481 := save_mem(DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481 := $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory;

    // @482 := save_mem(DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#482 := $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory;

    // @485 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    $1_Diem_BurnCapability'#0'_$memory#485 := $1_Diem_BurnCapability'#0'_$memory;

    // @480 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#480 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @478 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    $1_Diem_MintCapability'#0'_$memory#478 := $1_Diem_MintCapability'#0'_$memory;

    // @487 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    $1_Diem_Preburn'#0'_$memory#487 := $1_Diem_Preburn'#0'_$memory;

    // @486 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    $1_Diem_PreburnQueue'#0'_$memory#486 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,1):", $t1} $t1 == $t1;

    // trace_local[to_xdx_exchange_rate]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1299:5+1
    assume {:print "$track_local(13,30,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(10,62855,62900)"} true;

    // assume Identical($t17, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    assume {:print "$at(10,62855,62900)"} true;

    // assume Identical($t18, Or(Or(Not(exists<Roles::RoleId>($t17)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    assume ($t18 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t17) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t18) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    if ($t18) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t17)), Eq(5, $t19)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t19))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t17) && $IsEqual'u8'(5, $t19)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    assume {:print "$at(10,62855,62900)"} true;
    assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1307:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,62910,62945)"} true;

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    assume {:print "$at(10,62910,62945)"} true;

    // assume Identical($t21, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t20))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    assume ($t21 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t20)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t21) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    if ($t21) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t19)), And(Not(exists<Roles::RoleId>($t20)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t20)), 0), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t19))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t19)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t20) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t20)), 0) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    assume {:print "$at(10,62910,62945)"} true;
    assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1308:9+35

    // $t22 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1313:17+5
    assume {:print "$at(10,63105,63110)"} true;
    $t22 := false;
    assume $IsValid'bool'($t22);

    // assume Identical($t23, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t23 == $1_Signer_spec_address_of($t0));

    // assume Identical($t24, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t24 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t25, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t25 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // ($t26, $t27) := Diem::register_currency<#0>($t0, $t2, $t22, $t3, $t4, $t5) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1310:13+245
    assume {:print "$at(10,62994,63239)"} true;
    call $t26,$t27 := $1_Diem_register_currency'#0'($t0, $t2, $t22, $t3, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,62994,63239)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // trace_local[burn_cap]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1309:24+8
    assume {:print "$at(10,62970,62978)"} true;
    assume {:print "$track_local(13,30,6):", $t27} $t27 == $t27;

    // trace_local[mint_cap]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1309:14+8
    assume {:print "$track_local(13,30,7):", $t26} $t26 == $t26;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30
    // >> opaque call: $t13 := Signer::address_of($t1)
    assume {:print "$at(10,63303,63333)"} true;

    // $t28 := opaque begin: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30
    assume $IsValid'address'($t28);

    // assume Eq<address>($t28, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30
    assume $IsEqual'address'($t28, $1_Signer_spec_address_of($t1));

    // $t28 := opaque end: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:47+30

    // $t29 := exists<Diem::MintCapability<#0>>($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:14+6
    $t29 := $ResourceExists($1_Diem_MintCapability'#0'_$memory, $t28);

    // $t30 := !($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1319:13+1
    call $t30 := $Not($t29);

    // $t31 := 9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:39+16
    assume {:print "$at(10,63374,63390)"} true;
    $t31 := 9;
    assume $IsValid'u64'($t31);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43
    // >> opaque call: $t17 := Errors::already_published($t16)

    // $t32 := opaque begin: Errors::already_published($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43

    // assume WellFormed($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43
    assume $IsValid'u64'($t32);

    // assume Eq<u64>($t32, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43
    assume $IsEqual'u64'($t32, 6);

    // $t32 := opaque end: Errors::already_published($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1320:13+43

    // trace_local[tmp#$9]($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    assume {:print "$at(10,63249,63401)"} true;
    assume {:print "$track_local(13,30,9):", $t32} $t32 == $t32;

    // trace_local[tmp#$8]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    assume {:print "$track_local(13,30,8):", $t30} $t30 == $t30;

    // if ($t30) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    if ($t30) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152

    // trace_abort($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    assume {:print "$at(10,63249,63401)"} true;
    assume {:print "$track_abort(13,30):", $t32} $t32 == $t32;

    // $t19 := move($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    $t19 := $t32;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1318:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1322:17+10
    assume {:print "$at(10,63419,63429)"} true;
L0:

    // move_to<Diem::MintCapability<#0>>($t26, $t1) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1322:9+7
    if ($ResourceExists($1_Diem_MintCapability'#0'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_MintCapability'#0'_$memory := $ResourceUpdate($1_Diem_MintCapability'#0'_$memory, $t1, $t26);
    }
    if ($abort_flag) {
        assume {:print "$at(10,63411,63418)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // assume Identical($t33, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t1));

    // Diem::publish_burn_capability<#0>($t1, $t27) on_abort goto L3 with $t19 at /home/ying/diem/language/diem-framework/modules/Diem.move:1323:9+55
    assume {:print "$at(10,63450,63505)"} true;
    call $1_Diem_publish_burn_capability'#0'($t1, $t27);
    if ($abort_flag) {
        assume {:print "$at(10,63450,63505)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(13,30):", $t19} $t19 == $t19;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+1
    assume {:print "$at(10,63511,63512)"} true;
L2:

    // assert Not(exists[@478]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1341:9+111
    assume {:print "$at(10,64191,64302)"} true;
    assert {:msg "assert_failed(10,64191,64302): function does not abort under this condition"}
      !$ResourceExists($1_Diem_MintCapability'#0'_$memory#478, $1_Signer_spec_address_of($t1));

    // assert Not(Not(exists[@479]<Roles::RoleId>($t10))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#479, $t10);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t10)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t10)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Or(Eq<u64>($t3, 0), Gt($t3, 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1281:9+99
    assume {:print "$at(10,61646,61745)"} true;
    assert {:msg "assert_failed(10,61646,61745): function does not abort under this condition"}
      !($IsEqual'u64'($t3, 0) || ($t3 > 10000000000));

    // assert Not(exists[@480]<Diem::CurrencyInfo<#0>>(Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1283:9+121
    assume {:print "$at(10,61831,61952)"} true;
    assert {:msg "assert_failed(10,61831,61952): function does not abort under this condition"}
      !$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory#480, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@479]<Roles::RoleId>($t11))) at /home/ying/diem/language/diem-framework/modules/Roles.move:528:9+59
    assume {:print "$at(26,23704,23763)"} true;
    assert {:msg "assert_failed(26,23704,23763): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#479, $t11);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t11)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:529:9+87
    assume {:print "$at(26,23772,23859)"} true;
    assert {:msg "assert_failed(26,23772,23859): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t11)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:70:9+108
    assume {:print "$at(8,2901,3009)"} true;
    assert {:msg "assert_failed(8,2901,3009): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:121:9+112
    assume {:print "$at(8,4814,4926)"} true;
    assert {:msg "assert_failed(8,4814,4926): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assert Not(ContainsVec<vector<u8>>(select RegisteredCurrencies::RegisteredCurrencies.currency_codes(DiemConfig::$get[@481]<RegisteredCurrencies::RegisteredCurrencies>()), $t5)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:72:9+154
    assume {:print "$at(25,2617,2771)"} true;
    assert {:msg "assert_failed(25,2617,2771): function does not abort under this condition"}
      !$ContainsVec'vec'u8''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481)), $t5);

    // assert Not(Not(exists[@482]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:140:9+129
    assume {:print "$at(13,5612,5741)"} true;
    assert {:msg "assert_failed(13,5612,5741): function does not abort under this condition"}
      !!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#482, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@481]<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:104:9+101
    assume {:print "$at(13,3930,4031)"} true;
    assert {:msg "assert_failed(13,3930,4031): function does not abort under this condition"}
      !!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(And(And(And(And(DiemTimestamp::$is_operating[@483](), DiemConfig::$reconfiguration_enabled[@484]()), Gt(DiemTimestamp::spec_now_microseconds[@483](), 0)), Lt(select DiemConfig::Configuration.epoch($t12), 18446744073709551615)), Lt($t13, select DiemConfig::Configuration.last_reconfiguration_time($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:362:9+283
    assume {:print "$at(13,16092,16375)"} true;
    assert {:msg "assert_failed(13,16092,16375): function does not abort under this condition"}
      !(((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory#484)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483) > 0)) && ($epoch#$1_DiemConfig_Configuration($t12) < 18446744073709551615)) && ($t13 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t12)));

    // assert Not(exists[@485]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:286:9+111
    assume {:print "$at(10,14286,14397)"} true;
    assert {:msg "assert_failed(10,14286,14397): function does not abort under this condition"}
      !$ResourceExists($1_Diem_BurnCapability'#0'_$memory#485, $1_Signer_spec_address_of($t1));

    // assert Not(Not(exists[@479]<Roles::RoleId>($t14))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#479, $t14);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t14)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t14)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Not(exists[@479]<Roles::RoleId>($t15))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#479, $t15);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t15)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t15)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Not(exists[@479]<Roles::RoleId>($t16))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#479, $t16);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t16)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t16)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Diem::spec_has_mint_capability<#0>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1347:9+80
    assume {:print "$at(10,64503,64583)"} true;
    assert {:msg "assert_failed(10,64503,64583): post-condition does not hold"}
      $1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, $1_Signer_spec_address_of($t1));

    // assert Implies(Diem::spec_is_currency[@480]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@480]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#480) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#480))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@478]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#478, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@480]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@480]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#480) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#480))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@485]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#485, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@480]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@480]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#480) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#480))));

    // assert Implies(Diem::spec_is_currency[@480]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@480]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#480) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#480))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@486]<Diem::PreburnQueue<#0>>(addr), exists[@487]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#486, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#487, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@486]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#486, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@480]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@480]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#480) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#480))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1324:5+1
    assume {:print "$at(10,63511,63512)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(exists[@478]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t1)), Not(exists[@479]<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t10)), 1)), Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Or(Eq<u64>($t3, 0), Gt($t3, 10000000000))), exists[@480]<Diem::CurrencyInfo<#0>>(Signer::spec_address_of[]($t0))), Not(exists[@479]<Roles::RoleId>($t11))), Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t11)), 0)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS[]())), ContainsVec<vector<u8>>(select RegisteredCurrencies::RegisteredCurrencies.currency_codes(DiemConfig::$get[@481]<RegisteredCurrencies::RegisteredCurrencies>()), $t5)), Not(exists[@482]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0)))), Not(exists[@481]<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))), And(And(And(And(DiemTimestamp::$is_operating[@483](), DiemConfig::$reconfiguration_enabled[@484]()), Gt(DiemTimestamp::spec_now_microseconds[@483](), 0)), Lt(select DiemConfig::Configuration.epoch($t12), 18446744073709551615)), Lt($t13, select DiemConfig::Configuration.last_reconfiguration_time($t12)))), exists[@485]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t1))), Not(exists[@479]<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t14)), 1)), Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Not(exists[@479]<Roles::RoleId>($t15))), Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t15)), 1)), Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Not(exists[@479]<Roles::RoleId>($t16))), Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t16)), 1)), Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1326:5+143
    assume {:print "$at(10,63518,63661)"} true;
    assert {:msg "assert_failed(10,63518,63661): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((((($ResourceExists($1_Diem_MintCapability'#0'_$memory#478, $1_Signer_spec_address_of($t1)) || !$ResourceExists($1_Roles_RoleId_$memory#479, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t10)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || ($IsEqual'u64'($t3, 0) || ($t3 > 10000000000))) || $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory#480, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#479, $t11)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t11)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())) || $ContainsVec'vec'u8''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481)), $t5)) || !$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#482, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || (((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory#484)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483) > 0)) && ($epoch#$1_DiemConfig_Configuration($t12) < 18446744073709551615)) && ($t13 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t12)))) || $ResourceExists($1_Diem_BurnCapability'#0'_$memory#485, $1_Signer_spec_address_of($t1))) || !$ResourceExists($1_Roles_RoleId_$memory#479, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t14)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_Roles_RoleId_$memory#479, $t15)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t15)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$ResourceExists($1_Roles_RoleId_$memory#479, $t16)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t16)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(exists[@478]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t1)), Eq(6, $t19)), And(Not(exists[@479]<Roles::RoleId>($t10)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t10)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t19))), And(Or(Eq<u64>($t3, 0), Gt($t3, 10000000000)), Eq(7, $t19))), And(exists[@480]<Diem::CurrencyInfo<#0>>(Signer::spec_address_of[]($t0)), Eq(6, $t19))), And(Not(exists[@479]<Roles::RoleId>($t11)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t11)), 0), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(2, $t19))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS[]()), Eq(2, $t19))), And(ContainsVec<vector<u8>>(select RegisteredCurrencies::RegisteredCurrencies.currency_codes(DiemConfig::$get[@481]<RegisteredCurrencies::RegisteredCurrencies>()), $t5), Eq(7, $t19))), And(Not(exists[@482]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0))), Eq(4, $t19))), And(Not(exists[@481]<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Eq(5, $t19))), And(And(And(And(And(DiemTimestamp::$is_operating[@483](), DiemConfig::$reconfiguration_enabled[@484]()), Gt(DiemTimestamp::spec_now_microseconds[@483](), 0)), Lt(select DiemConfig::Configuration.epoch($t12), 18446744073709551615)), Lt($t13, select DiemConfig::Configuration.last_reconfiguration_time($t12))), Eq(1, $t19))), And(exists[@485]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t1)), Eq(6, $t19))), And(Not(exists[@479]<Roles::RoleId>($t14)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t14)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t19))), And(Not(exists[@479]<Roles::RoleId>($t15)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t15)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t19))), And(Not(exists[@479]<Roles::RoleId>($t16)), Eq(5, $t19))), And(Neq<u64>(select Roles::RoleId.role_id(global[@479]<Roles::RoleId>($t16)), 1), Eq(3, $t19))), And(Neq<address>(Signer::spec_address_of[]($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t19))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1326:5+143
    assert {:msg "assert_failed(10,63518,63661): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((($ResourceExists($1_Diem_MintCapability'#0'_$memory#478, $1_Signer_spec_address_of($t1)) && $IsEqual'u8'(6, $t19)) || (!$ResourceExists($1_Roles_RoleId_$memory#479, $t10) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t10)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t19))) || (($IsEqual'u64'($t3, 0) || ($t3 > 10000000000)) && $IsEqual'u8'(7, $t19))) || ($ResourceExists($1_Diem_CurrencyInfo'#0'_$memory#480, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(6, $t19))) || (!$ResourceExists($1_Roles_RoleId_$memory#479, $t11) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t11)), 0) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()) && $IsEqual'u8'(2, $t19))) || ($ContainsVec'vec'u8''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481)), $t5) && $IsEqual'u8'(7, $t19))) || (!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#482, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t19))) || (!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#481, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(5, $t19))) || ((((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory#484)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#483) > 0)) && ($epoch#$1_DiemConfig_Configuration($t12) < 18446744073709551615)) && ($t13 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t12))) && $IsEqual'u8'(1, $t19))) || ($ResourceExists($1_Diem_BurnCapability'#0'_$memory#485, $1_Signer_spec_address_of($t1)) && $IsEqual'u8'(6, $t19))) || (!$ResourceExists($1_Roles_RoleId_$memory#479, $t14) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t14)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t19))) || (!$ResourceExists($1_Roles_RoleId_$memory#479, $t15) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t15)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t19))) || (!$ResourceExists($1_Roles_RoleId_$memory#479, $t16) && $IsEqual'u8'(5, $t19))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#479, $t16)), 1) && $IsEqual'u8'(3, $t19))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t19)));

    // abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1326:5+143
    $abort_code := $t19;
    $abort_flag := true;
    return;

}

// fun Diem::scaling_factor<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:5+224
procedure {:inline 1} $1_Diem_scaling_factor'$1_XDX_XDX'() returns ($ret0: int)
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t4: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,67458,67488)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    assume {:print "$at(10,67458,67488)"} true;
    assume {:print "$track_abort(13,34):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30

    // $t2 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:47+38
    assume {:print "$at(10,67536,67574)"} true;
    call $t2 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,67536,67574)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,34):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:9+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,67498,67511)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,34):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.scaling_factor($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:9+92
    $t4 := $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:9+92
    assume {:print "$track_return(13,34,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1417:5+1
    assume {:print "$at(10,67595,67596)"} true;
L1:

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1417:5+1
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1417:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1417:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::scaling_factor [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:5+224
procedure {:timeLimit 40} $1_Diem_scaling_factor$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: int;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#198: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#199: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#200: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#201: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#202: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:5+224
    assume {:print "$at(10,67372,67596)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @200 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:5+1
    $1_Diem_BurnCapability'#0'_$memory#200 := $1_Diem_BurnCapability'#0'_$memory;

    // @198 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#198 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @199 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:5+1
    $1_Diem_MintCapability'#0'_$memory#199 := $1_Diem_MintCapability'#0'_$memory;

    // @202 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:5+1
    $1_Diem_Preburn'#0'_$memory#202 := $1_Diem_Preburn'#0'_$memory;

    // @201 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1413:5+1
    $1_Diem_PreburnQueue'#0'_$memory#201 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,67458,67488)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    assume {:print "$at(10,67458,67488)"} true;
    assume {:print "$track_abort(13,34):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1415:9+30

    // $t2 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:47+38
    assume {:print "$at(10,67536,67574)"} true;
    call $t2 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,67536,67574)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,34):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_global<Diem::CurrencyInfo<#0>>($t2) on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:9+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(10,67498,67511)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,34):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t4 := get_field<Diem::CurrencyInfo<#0>>.scaling_factor($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:9+92
    $t4 := $scaling_factor#$1_Diem_CurrencyInfo'#0'($t3);

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:9+92
    assume {:print "$track_return(13,34,0):", $t4} $t4 == $t4;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1417:5+1
    assume {:print "$at(10,67595,67596)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@198]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@198]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#198) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#198))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@199]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#199, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@199]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#199, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@198]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@198]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#198) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#198))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@200]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#200, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@200]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#200, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@198]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@198]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#198) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#198))));

    // assert Implies(Diem::spec_is_currency[@198]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@198]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#198) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#198))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@201]<Diem::PreburnQueue<#0>>(addr), exists[@202]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#201, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#202, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@201]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#201, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@198]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@198]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#198) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#198))));

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t4;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1417:5+1
    assume {:print "$at(10,67595,67596)"} true;
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1417:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::register_currency<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
procedure {:inline 1} $1_Diem_register_currency'$1_XUS_XUS'(_$t0: int, _$t1: $1_FixedPoint32_FixedPoint32, _$t2: bool, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ($ret0: $1_Diem_MintCapability'$1_XUS_XUS', $ret1: $1_Diem_BurnCapability'$1_XUS_XUS')
{
    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: bool;
    var $t33: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t34: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t35: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t36: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t37: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t38: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t39: $1_DiemConfig_Configuration;
    var $t40: int;
    var $t41: bool;
    var $t42: $1_Diem_MintCapability'$1_XUS_XUS';
    var $t43: bool;
    var $t44: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t0: int;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_MintCapability'$1_XUS_XUS'': $1_Diem_MintCapability'$1_XUS_XUS';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$at(10,59514,59515)"} true;
    assume {:print "$track_local(13,31,0):", $t0} $t0 == $t0;

    // trace_local[to_xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,1):", $t1} $t1 == $t1;

    // trace_local[is_synthetic]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,59830,59865)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume {:print "$at(10,59830,59865)"} true;

    // assume Identical($t15, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume ($t15 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t15) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    if ($t15) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
L11:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t16)), And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0) && $IsEqual'u8'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume {:print "$at(10,59830,59865)"} true;
    assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
L10:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(10,59958,60005)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47

    // assume Identical($t17, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume ($t17 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // if ($t17) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    if ($t17) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
L13:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS()), Eq(2, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()) && $IsEqual'u8'(2, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume {:print "$at(10,59958,60005)"} true;
    assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
L12:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    // >> opaque call: $t11 := Signer::address_of($t0)
    assume {:print "$at(10,60067,60097)"} true;

    // $t18 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t0));

    // $t18 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30

    // $t19 := exists<Diem::CurrencyInfo<#0>>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:14+6
    $t19 := $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t18);

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:13+1
    call $t20 := $Not($t19);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:39+14
    assume {:print "$at(10,60138,60152)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    // >> opaque call: $t15 := Errors::already_published($t14)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41

    // trace_local[tmp#$7]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$at(10,60015,60163)"} true;
    assume {:print "$track_local(13,31,7):", $t22} $t22 == $t22;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$track_local(13,31,6):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$at(10,60015,60163)"} true;
    assume {:print "$track_abort(13,31):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    $t16 := $t22;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+1
    assume {:print "$at(10,60180,60181)"} true;
L0:

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := <($t23, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:18+1
    call $t24 := $Lt($t23, $t3);

    // if ($t24) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    if ($t24) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:38+14
L2:

    // $t25 := 10000000000 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:56+18
    $t25 := 10000000000;
    assume $IsValid'u64'($t25);

    // $t26 := <=($t3, $t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:53+2
    call $t26 := $Le($t3, $t25);

    // $t10 := $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t10 := $t26;

    // trace_local[tmp#$10]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    assume {:print "$track_local(13,31,10):", $t26} $t26 == $t26;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L4:

    // $t27 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t27 := false;
    assume $IsValid'bool'($t27);

    // $t10 := $t27 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t10 := $t27;

    // trace_local[tmp#$10]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    assume {:print "$track_local(13,31,10):", $t27} $t27 == $t27;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L5:

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:101+14
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    // >> opaque call: $t22 := Errors::invalid_argument($t21)

    // $t29 := opaque begin: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    assume $IsEqual'u64'($t29, 7);

    // $t29 := opaque end: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40

    // trace_local[tmp#$9]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$track_local(13,31,9):", $t29} $t29 == $t29;

    // trace_local[tmp#$8]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$track_local(13,31,8):", $t10} $t10 == $t10;

    // if ($t10) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    if ($t10) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
L7:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$at(10,60173,60281)"} true;
    assume {:print "$track_abort(13,31):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    $t16 := $t29;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    goto L9;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:17+10
    assume {:print "$at(10,60299,60309)"} true;
L6:

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1248:26+1
    assume {:print "$at(10,60361,60362)"} true;
    $t30 := 0;
    assume $IsValid'u128'($t30);

    // $t31 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1249:28+1
    assume {:print "$at(10,60391,60392)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t32 := true at /home/ying/diem/language/diem-framework/modules/Diem.move:1255:23+4
    assume {:print "$at(10,60580,60584)"} true;
    $t32 := true;
    assume $IsValid'bool'($t32);

    // $t33 := Event::new_event_handle<Diem::MintEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1256:26+46
    assume {:print "$at(10,60611,60657)"} true;
    call $t33 := $1_Event_new_event_handle'$1_Diem_MintEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60611,60657)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t34 := Event::new_event_handle<Diem::BurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1257:26+46
    assume {:print "$at(10,60684,60730)"} true;
    call $t34 := $1_Event_new_event_handle'$1_Diem_BurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60684,60730)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t35 := Event::new_event_handle<Diem::PreburnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1258:29+49
    assume {:print "$at(10,60760,60809)"} true;
    call $t35 := $1_Event_new_event_handle'$1_Diem_PreburnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60760,60809)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t36 := Event::new_event_handle<Diem::CancelBurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1259:33+52
    assume {:print "$at(10,60843,60895)"} true;
    call $t36 := $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60843,60895)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t37 := Event::new_event_handle<Diem::ToXDXExchangeRateUpdateEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1260:42+65
    assume {:print "$at(10,60938,61003)"} true;
    call $t37 := $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60938,61003)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t38 := pack Diem::CurrencyInfo<#0>($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:29+702
    assume {:print "$at(10,60311,61013)"} true;
    $t38 := $1_Diem_CurrencyInfo'$1_XUS_XUS'($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37);

    // move_to<Diem::CurrencyInfo<#0>>($t38, $t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:9+7
    if ($ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t0, $t38);
    }
    if ($abort_flag) {
        assume {:print "$at(10,60291,60298)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // assume Identical($t39, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t39 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t40, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t40 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // RegisteredCurrencies::add_currency_code($t0, $t5) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1262:9+101
    assume {:print "$at(10,61024,61125)"} true;
    call $1_RegisteredCurrencies_add_currency_code($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,61024,61125)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t41 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:10+26
    assume {:print "$at(10,61136,61162)"} true;
    $t41 := false;
    assume $IsValid'bool'($t41);

    // $t42 := pack Diem::MintCapability<#0>($t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:10+26
    $t42 := $1_Diem_MintCapability'$1_XUS_XUS'($t41);

    // $t43 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:38+26
    $t43 := false;
    assume $IsValid'bool'($t43);

    // $t44 := pack Diem::BurnCapability<#0>($t43) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:38+26
    $t44 := $1_Diem_BurnCapability'$1_XUS_XUS'($t43);

    // trace_return[0]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:9+56
    assume {:print "$track_return(13,31,0):", $t42} $t42 == $t42;

    // trace_return[1]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:9+56
    assume {:print "$track_return(13,31,1):", $t44} $t44 == $t44;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    assume {:print "$at(10,61196,61197)"} true;
L8:

    // return ($t42, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    $ret0 := $t42;
    $ret1 := $t44;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
L9:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::register_currency<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
procedure {:inline 1} $1_Diem_register_currency'$1_XDX_XDX'(_$t0: int, _$t1: $1_FixedPoint32_FixedPoint32, _$t2: bool, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ($ret0: $1_Diem_MintCapability'$1_XDX_XDX', $ret1: $1_Diem_BurnCapability'$1_XDX_XDX')
{
    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: bool;
    var $t33: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t34: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t35: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t36: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t37: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t38: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t39: $1_DiemConfig_Configuration;
    var $t40: int;
    var $t41: bool;
    var $t42: $1_Diem_MintCapability'$1_XDX_XDX';
    var $t43: bool;
    var $t44: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t0: int;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_MintCapability'$1_XDX_XDX'': $1_Diem_MintCapability'$1_XDX_XDX';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$at(10,59514,59515)"} true;
    assume {:print "$track_local(13,31,0):", $t0} $t0 == $t0;

    // trace_local[to_xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,1):", $t1} $t1 == $t1;

    // trace_local[is_synthetic]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,59830,59865)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume {:print "$at(10,59830,59865)"} true;

    // assume Identical($t15, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume ($t15 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t15) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    if ($t15) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
L11:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t16)), And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0) && $IsEqual'u8'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume {:print "$at(10,59830,59865)"} true;
    assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
L10:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(10,59958,60005)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47

    // assume Identical($t17, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume ($t17 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // if ($t17) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    if ($t17) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
L13:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS()), Eq(2, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()) && $IsEqual'u8'(2, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume {:print "$at(10,59958,60005)"} true;
    assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
L12:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    // >> opaque call: $t11 := Signer::address_of($t0)
    assume {:print "$at(10,60067,60097)"} true;

    // $t18 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t0));

    // $t18 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30

    // $t19 := exists<Diem::CurrencyInfo<#0>>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:14+6
    $t19 := $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t18);

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:13+1
    call $t20 := $Not($t19);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:39+14
    assume {:print "$at(10,60138,60152)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    // >> opaque call: $t15 := Errors::already_published($t14)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41

    // trace_local[tmp#$7]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$at(10,60015,60163)"} true;
    assume {:print "$track_local(13,31,7):", $t22} $t22 == $t22;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$track_local(13,31,6):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$at(10,60015,60163)"} true;
    assume {:print "$track_abort(13,31):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    $t16 := $t22;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+1
    assume {:print "$at(10,60180,60181)"} true;
L0:

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := <($t23, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:18+1
    call $t24 := $Lt($t23, $t3);

    // if ($t24) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    if ($t24) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:38+14
L2:

    // $t25 := 10000000000 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:56+18
    $t25 := 10000000000;
    assume $IsValid'u64'($t25);

    // $t26 := <=($t3, $t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:53+2
    call $t26 := $Le($t3, $t25);

    // $t10 := $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t10 := $t26;

    // trace_local[tmp#$10]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    assume {:print "$track_local(13,31,10):", $t26} $t26 == $t26;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L4:

    // $t27 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t27 := false;
    assume $IsValid'bool'($t27);

    // $t10 := $t27 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t10 := $t27;

    // trace_local[tmp#$10]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    assume {:print "$track_local(13,31,10):", $t27} $t27 == $t27;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L5:

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:101+14
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    // >> opaque call: $t22 := Errors::invalid_argument($t21)

    // $t29 := opaque begin: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    assume $IsEqual'u64'($t29, 7);

    // $t29 := opaque end: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40

    // trace_local[tmp#$9]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$track_local(13,31,9):", $t29} $t29 == $t29;

    // trace_local[tmp#$8]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$track_local(13,31,8):", $t10} $t10 == $t10;

    // if ($t10) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    if ($t10) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
L7:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$at(10,60173,60281)"} true;
    assume {:print "$track_abort(13,31):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    $t16 := $t29;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    goto L9;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:17+10
    assume {:print "$at(10,60299,60309)"} true;
L6:

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1248:26+1
    assume {:print "$at(10,60361,60362)"} true;
    $t30 := 0;
    assume $IsValid'u128'($t30);

    // $t31 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1249:28+1
    assume {:print "$at(10,60391,60392)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t32 := true at /home/ying/diem/language/diem-framework/modules/Diem.move:1255:23+4
    assume {:print "$at(10,60580,60584)"} true;
    $t32 := true;
    assume $IsValid'bool'($t32);

    // $t33 := Event::new_event_handle<Diem::MintEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1256:26+46
    assume {:print "$at(10,60611,60657)"} true;
    call $t33 := $1_Event_new_event_handle'$1_Diem_MintEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60611,60657)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t34 := Event::new_event_handle<Diem::BurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1257:26+46
    assume {:print "$at(10,60684,60730)"} true;
    call $t34 := $1_Event_new_event_handle'$1_Diem_BurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60684,60730)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t35 := Event::new_event_handle<Diem::PreburnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1258:29+49
    assume {:print "$at(10,60760,60809)"} true;
    call $t35 := $1_Event_new_event_handle'$1_Diem_PreburnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60760,60809)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t36 := Event::new_event_handle<Diem::CancelBurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1259:33+52
    assume {:print "$at(10,60843,60895)"} true;
    call $t36 := $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60843,60895)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t37 := Event::new_event_handle<Diem::ToXDXExchangeRateUpdateEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1260:42+65
    assume {:print "$at(10,60938,61003)"} true;
    call $t37 := $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60938,61003)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t38 := pack Diem::CurrencyInfo<#0>($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:29+702
    assume {:print "$at(10,60311,61013)"} true;
    $t38 := $1_Diem_CurrencyInfo'$1_XDX_XDX'($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37);

    // move_to<Diem::CurrencyInfo<#0>>($t38, $t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:9+7
    if ($ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t0, $t38);
    }
    if ($abort_flag) {
        assume {:print "$at(10,60291,60298)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // assume Identical($t39, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t39 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t40, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t40 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // RegisteredCurrencies::add_currency_code($t0, $t5) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1262:9+101
    assume {:print "$at(10,61024,61125)"} true;
    call $1_RegisteredCurrencies_add_currency_code($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,61024,61125)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t41 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:10+26
    assume {:print "$at(10,61136,61162)"} true;
    $t41 := false;
    assume $IsValid'bool'($t41);

    // $t42 := pack Diem::MintCapability<#0>($t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:10+26
    $t42 := $1_Diem_MintCapability'$1_XDX_XDX'($t41);

    // $t43 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:38+26
    $t43 := false;
    assume $IsValid'bool'($t43);

    // $t44 := pack Diem::BurnCapability<#0>($t43) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:38+26
    $t44 := $1_Diem_BurnCapability'$1_XDX_XDX'($t43);

    // trace_return[0]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:9+56
    assume {:print "$track_return(13,31,0):", $t42} $t42 == $t42;

    // trace_return[1]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:9+56
    assume {:print "$track_return(13,31,1):", $t44} $t44 == $t44;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    assume {:print "$at(10,61196,61197)"} true;
L8:

    // return ($t42, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    $ret0 := $t42;
    $ret1 := $t44;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
L9:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::register_currency<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
procedure {:inline 1} $1_Diem_register_currency'#0'(_$t0: int, _$t1: $1_FixedPoint32_FixedPoint32, _$t2: bool, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ($ret0: $1_Diem_MintCapability'#0', $ret1: $1_Diem_BurnCapability'#0')
{
    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: bool;
    var $t33: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t34: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t35: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t36: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t37: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t38: $1_Diem_CurrencyInfo'#0';
    var $t39: $1_DiemConfig_Configuration;
    var $t40: int;
    var $t41: bool;
    var $t42: $1_Diem_MintCapability'#0';
    var $t43: bool;
    var $t44: $1_Diem_BurnCapability'#0';
    var $t0: int;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_MintCapability'#0'': $1_Diem_MintCapability'#0';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$at(10,59514,59515)"} true;
    assume {:print "$track_local(13,31,0):", $t0} $t0 == $t0;

    // trace_local[to_xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,1):", $t1} $t1 == $t1;

    // trace_local[is_synthetic]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,59830,59865)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume {:print "$at(10,59830,59865)"} true;

    // assume Identical($t15, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume ($t15 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t15) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    if ($t15) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
L11:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t16)), And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0) && $IsEqual'u8'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume {:print "$at(10,59830,59865)"} true;
    assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
L10:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(10,59958,60005)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47

    // assume Identical($t17, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume ($t17 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // if ($t17) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    if ($t17) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
L13:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS()), Eq(2, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()) && $IsEqual'u8'(2, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume {:print "$at(10,59958,60005)"} true;
    assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
L12:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    // >> opaque call: $t11 := Signer::address_of($t0)
    assume {:print "$at(10,60067,60097)"} true;

    // $t18 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t0));

    // $t18 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30

    // $t19 := exists<Diem::CurrencyInfo<#0>>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:14+6
    $t19 := $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t18);

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:13+1
    call $t20 := $Not($t19);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:39+14
    assume {:print "$at(10,60138,60152)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    // >> opaque call: $t15 := Errors::already_published($t14)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41

    // trace_local[tmp#$7]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$at(10,60015,60163)"} true;
    assume {:print "$track_local(13,31,7):", $t22} $t22 == $t22;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$track_local(13,31,6):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$at(10,60015,60163)"} true;
    assume {:print "$track_abort(13,31):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    $t16 := $t22;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+1
    assume {:print "$at(10,60180,60181)"} true;
L0:

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := <($t23, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:18+1
    call $t24 := $Lt($t23, $t3);

    // if ($t24) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    if ($t24) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:38+14
L2:

    // $t25 := 10000000000 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:56+18
    $t25 := 10000000000;
    assume $IsValid'u64'($t25);

    // $t26 := <=($t3, $t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:53+2
    call $t26 := $Le($t3, $t25);

    // $t10 := $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t10 := $t26;

    // trace_local[tmp#$10]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    assume {:print "$track_local(13,31,10):", $t26} $t26 == $t26;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L4:

    // $t27 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t27 := false;
    assume $IsValid'bool'($t27);

    // $t10 := $t27 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t10 := $t27;

    // trace_local[tmp#$10]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    assume {:print "$track_local(13,31,10):", $t27} $t27 == $t27;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L5:

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:101+14
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    // >> opaque call: $t22 := Errors::invalid_argument($t21)

    // $t29 := opaque begin: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    assume $IsEqual'u64'($t29, 7);

    // $t29 := opaque end: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40

    // trace_local[tmp#$9]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$track_local(13,31,9):", $t29} $t29 == $t29;

    // trace_local[tmp#$8]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$track_local(13,31,8):", $t10} $t10 == $t10;

    // if ($t10) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    if ($t10) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
L7:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$at(10,60173,60281)"} true;
    assume {:print "$track_abort(13,31):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    $t16 := $t29;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    goto L9;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:17+10
    assume {:print "$at(10,60299,60309)"} true;
L6:

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1248:26+1
    assume {:print "$at(10,60361,60362)"} true;
    $t30 := 0;
    assume $IsValid'u128'($t30);

    // $t31 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1249:28+1
    assume {:print "$at(10,60391,60392)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t32 := true at /home/ying/diem/language/diem-framework/modules/Diem.move:1255:23+4
    assume {:print "$at(10,60580,60584)"} true;
    $t32 := true;
    assume $IsValid'bool'($t32);

    // $t33 := Event::new_event_handle<Diem::MintEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1256:26+46
    assume {:print "$at(10,60611,60657)"} true;
    call $t33 := $1_Event_new_event_handle'$1_Diem_MintEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60611,60657)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t34 := Event::new_event_handle<Diem::BurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1257:26+46
    assume {:print "$at(10,60684,60730)"} true;
    call $t34 := $1_Event_new_event_handle'$1_Diem_BurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60684,60730)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t35 := Event::new_event_handle<Diem::PreburnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1258:29+49
    assume {:print "$at(10,60760,60809)"} true;
    call $t35 := $1_Event_new_event_handle'$1_Diem_PreburnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60760,60809)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t36 := Event::new_event_handle<Diem::CancelBurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1259:33+52
    assume {:print "$at(10,60843,60895)"} true;
    call $t36 := $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60843,60895)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t37 := Event::new_event_handle<Diem::ToXDXExchangeRateUpdateEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1260:42+65
    assume {:print "$at(10,60938,61003)"} true;
    call $t37 := $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60938,61003)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t38 := pack Diem::CurrencyInfo<#0>($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:29+702
    assume {:print "$at(10,60311,61013)"} true;
    $t38 := $1_Diem_CurrencyInfo'#0'($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37);

    // move_to<Diem::CurrencyInfo<#0>>($t38, $t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:9+7
    if ($ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $t0, $t38);
    }
    if ($abort_flag) {
        assume {:print "$at(10,60291,60298)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // assume Identical($t39, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t39 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t40, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t40 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // RegisteredCurrencies::add_currency_code($t0, $t5) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1262:9+101
    assume {:print "$at(10,61024,61125)"} true;
    call $1_RegisteredCurrencies_add_currency_code($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,61024,61125)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t41 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:10+26
    assume {:print "$at(10,61136,61162)"} true;
    $t41 := false;
    assume $IsValid'bool'($t41);

    // $t42 := pack Diem::MintCapability<#0>($t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:10+26
    $t42 := $1_Diem_MintCapability'#0'($t41);

    // $t43 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:38+26
    $t43 := false;
    assume $IsValid'bool'($t43);

    // $t44 := pack Diem::BurnCapability<#0>($t43) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:38+26
    $t44 := $1_Diem_BurnCapability'#0'($t43);

    // trace_return[0]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:9+56
    assume {:print "$track_return(13,31,0):", $t42} $t42 == $t42;

    // trace_return[1]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:9+56
    assume {:print "$track_return(13,31,1):", $t44} $t44 == $t44;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    assume {:print "$at(10,61196,61197)"} true;
L8:

    // return ($t42, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    $ret0 := $t42;
    $ret1 := $t44;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
L9:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::register_currency [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
procedure {:timeLimit 40} $1_Diem_register_currency$verify(_$t0: int, _$t1: $1_FixedPoint32_FixedPoint32, _$t2: bool, _$t3: int, _$t4: int, _$t5: Vec (int)) returns ($ret0: $1_Diem_MintCapability'#0', $ret1: $1_Diem_BurnCapability'#0')
{
    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $1_DiemConfig_Configuration;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: bool;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: bool;
    var $t33: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t34: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t35: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t36: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t37: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t38: $1_Diem_CurrencyInfo'#0';
    var $t39: $1_DiemConfig_Configuration;
    var $t40: int;
    var $t41: bool;
    var $t42: $1_Diem_MintCapability'#0';
    var $t43: bool;
    var $t44: $1_Diem_BurnCapability'#0';
    var $t0: int;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_MintCapability'#0'': $1_Diem_MintCapability'#0';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_CurrencyInfo'#0'_$memory#454: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Roles_RoleId_$memory#455: $Memory $1_Roles_RoleId;
    var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#457: $Memory $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemConfig_DisableReconfiguration_$memory#459: $Memory $1_DiemConfig_DisableReconfiguration;
    var $1_Diem_MintCapability'#0'_$memory#460: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#461: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#462: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#463: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(10,59514,61197)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume $IsValid'bool'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume $IsValid'vec'u8''($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DisableReconfiguration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DisableReconfiguration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1683
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t12 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t13, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t13 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // @458 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$at(10,59514,59515)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @455 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    $1_Roles_RoleId_$memory#455 := $1_Roles_RoleId_$memory;

    // @459 := save_mem(DiemConfig::DisableReconfiguration) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    $1_DiemConfig_DisableReconfiguration_$memory#459 := $1_DiemConfig_DisableReconfiguration_$memory;

    // @456 := save_mem(DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456 := $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory;

    // @457 := save_mem(DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#457 := $1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory;

    // @461 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    $1_Diem_BurnCapability'#0'_$memory#461 := $1_Diem_BurnCapability'#0'_$memory;

    // @454 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#454 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @460 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    $1_Diem_MintCapability'#0'_$memory#460 := $1_Diem_MintCapability'#0'_$memory;

    // @463 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    $1_Diem_Preburn'#0'_$memory#463 := $1_Diem_Preburn'#0'_$memory;

    // @462 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    $1_Diem_PreburnQueue'#0'_$memory#462 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,0):", $t0} $t0 == $t0;

    // trace_local[to_xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,1):", $t1} $t1 == $t1;

    // trace_local[is_synthetic]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,2):", $t2} $t2 == $t2;

    // trace_local[scaling_factor]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,3):", $t3} $t3 == $t3;

    // trace_local[fractional_part]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,4):", $t4} $t4 == $t4;

    // trace_local[currency_code]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1230:5+1
    assume {:print "$track_local(13,31,5):", $t5} $t5 == $t5;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(10,59830,59865)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume {:print "$at(10,59830,59865)"} true;

    // assume Identical($t15, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t14))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume ($t15 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t14)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t15) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    if ($t15) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
L11:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t16)), And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 0), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 0) && $IsEqual'u8'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    assume {:print "$at(10,59830,59865)"} true;
    assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
    goto L9;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35
L10:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1239:9+35

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(10,59958,60005)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47

    // assume Identical($t17, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume ($t17 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // if ($t17) goto L13 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    if ($t17) { goto L13; } else { goto L12; }

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
L13:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS()), Eq(2, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()) && $IsEqual'u8'(2, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    assume {:print "$at(10,59958,60005)"} true;
    assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
    goto L9;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47
L12:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1241:9+47

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    // >> opaque call: $t11 := Signer::address_of($t0)
    assume {:print "$at(10,60067,60097)"} true;

    // $t18 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t0));

    // $t18 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:45+30

    // $t19 := exists<Diem::CurrencyInfo<#0>>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:14+6
    $t19 := $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t18);

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1243:13+1
    call $t20 := $Not($t19);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:39+14
    assume {:print "$at(10,60138,60152)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    // >> opaque call: $t15 := Errors::already_published($t14)

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1244:13+41

    // trace_local[tmp#$7]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$at(10,60015,60163)"} true;
    assume {:print "$track_local(13,31,7):", $t22} $t22 == $t22;

    // trace_local[tmp#$6]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$track_local(13,31,6):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    assume {:print "$at(10,60015,60163)"} true;
    assume {:print "$track_abort(13,31):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    $t16 := $t22;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1242:9+148
    goto L9;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+1
    assume {:print "$at(10,60180,60181)"} true;
L0:

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := <($t23, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:18+1
    call $t24 := $Lt($t23, $t3);

    // if ($t24) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    if ($t24) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:38+14
L2:

    // $t25 := 10000000000 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:56+18
    $t25 := 10000000000;
    assume $IsValid'u64'($t25);

    // $t26 := <=($t3, $t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:53+2
    call $t26 := $Le($t3, $t25);

    // $t10 := $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t10 := $t26;

    // trace_local[tmp#$10]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    assume {:print "$track_local(13,31,10):", $t26} $t26 == $t26;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L4:

    // $t27 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t27 := false;
    assume $IsValid'bool'($t27);

    // $t10 := $t27 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    $t10 := $t27;

    // trace_local[tmp#$10]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
    assume {:print "$track_local(13,31,10):", $t27} $t27 == $t27;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:16+58
L5:

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:101+14
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    // >> opaque call: $t22 := Errors::invalid_argument($t21)

    // $t29 := opaque begin: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40
    assume $IsEqual'u64'($t29, 7);

    // $t29 := opaque end: Errors::invalid_argument($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:76+40

    // trace_local[tmp#$9]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$track_local(13,31,9):", $t29} $t29 == $t29;

    // trace_local[tmp#$8]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$track_local(13,31,8):", $t10} $t10 == $t10;

    // if ($t10) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    if ($t10) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
L7:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    assume {:print "$at(10,60173,60281)"} true;
    assume {:print "$track_abort(13,31):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    $t16 := $t29;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1246:9+108
    goto L9;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:17+10
    assume {:print "$at(10,60299,60309)"} true;
L6:

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1248:26+1
    assume {:print "$at(10,60361,60362)"} true;
    $t30 := 0;
    assume $IsValid'u128'($t30);

    // $t31 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1249:28+1
    assume {:print "$at(10,60391,60392)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t32 := true at /home/ying/diem/language/diem-framework/modules/Diem.move:1255:23+4
    assume {:print "$at(10,60580,60584)"} true;
    $t32 := true;
    assume $IsValid'bool'($t32);

    // $t33 := Event::new_event_handle<Diem::MintEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1256:26+46
    assume {:print "$at(10,60611,60657)"} true;
    call $t33 := $1_Event_new_event_handle'$1_Diem_MintEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60611,60657)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t34 := Event::new_event_handle<Diem::BurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1257:26+46
    assume {:print "$at(10,60684,60730)"} true;
    call $t34 := $1_Event_new_event_handle'$1_Diem_BurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60684,60730)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t35 := Event::new_event_handle<Diem::PreburnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1258:29+49
    assume {:print "$at(10,60760,60809)"} true;
    call $t35 := $1_Event_new_event_handle'$1_Diem_PreburnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60760,60809)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t36 := Event::new_event_handle<Diem::CancelBurnEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1259:33+52
    assume {:print "$at(10,60843,60895)"} true;
    call $t36 := $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60843,60895)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t37 := Event::new_event_handle<Diem::ToXDXExchangeRateUpdateEvent>($t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1260:42+65
    assume {:print "$at(10,60938,61003)"} true;
    call $t37 := $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,60938,61003)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t38 := pack Diem::CurrencyInfo<#0>($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:29+702
    assume {:print "$at(10,60311,61013)"} true;
    $t38 := $1_Diem_CurrencyInfo'#0'($t30, $t31, $t1, $t2, $t3, $t4, $t5, $t32, $t33, $t34, $t35, $t36, $t37);

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t38)), Le(select Diem::CurrencyInfo.scaling_factor($t38), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($t38)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($t38) <= 10000000000));

    // move_to<Diem::CurrencyInfo<#0>>($t38, $t0) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1247:9+7
    assume {:print "$at(10,60291,60298)"} true;
    if ($ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $t0, $t38);
    }
    if ($abort_flag) {
        assume {:print "$at(10,60291,60298)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // assume Identical($t39, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t39 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t40, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t40 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // RegisteredCurrencies::add_currency_code($t0, $t5) on_abort goto L9 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:1262:9+101
    assume {:print "$at(10,61024,61125)"} true;
    call $1_RegisteredCurrencies_add_currency_code($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(10,61024,61125)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,31):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t41 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:10+26
    assume {:print "$at(10,61136,61162)"} true;
    $t41 := false;
    assume $IsValid'bool'($t41);

    // $t42 := pack Diem::MintCapability<#0>($t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:10+26
    $t42 := $1_Diem_MintCapability'#0'($t41);

    // $t43 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:38+26
    $t43 := false;
    assume $IsValid'bool'($t43);

    // $t44 := pack Diem::BurnCapability<#0>($t43) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:38+26
    $t44 := $1_Diem_BurnCapability'#0'($t43);

    // trace_return[0]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:9+56
    assume {:print "$track_return(13,31,0):", $t42} $t42 == $t42;

    // trace_return[1]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1266:9+56
    assume {:print "$track_return(13,31,1):", $t44} $t44 == $t44;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    assume {:print "$at(10,61196,61197)"} true;
L8:

    // assert Not(Or(Eq<u64>($t3, 0), Gt($t3, 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1281:9+99
    assume {:print "$at(10,61646,61745)"} true;
    assert {:msg "assert_failed(10,61646,61745): function does not abort under this condition"}
      !($IsEqual'u64'($t3, 0) || ($t3 > 10000000000));

    // assert Not(exists[@454]<Diem::CurrencyInfo<#0>>(Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1283:9+121
    assume {:print "$at(10,61831,61952)"} true;
    assert {:msg "assert_failed(10,61831,61952): function does not abort under this condition"}
      !$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory#454, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@455]<Roles::RoleId>($t11))) at /home/ying/diem/language/diem-framework/modules/Roles.move:528:9+59
    assume {:print "$at(26,23704,23763)"} true;
    assert {:msg "assert_failed(26,23704,23763): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#455, $t11);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@455]<Roles::RoleId>($t11)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:529:9+87
    assume {:print "$at(26,23772,23859)"} true;
    assert {:msg "assert_failed(26,23772,23859): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#455, $t11)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:70:9+108
    assume {:print "$at(8,2901,3009)"} true;
    assert {:msg "assert_failed(8,2901,3009): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:121:9+112
    assume {:print "$at(8,4814,4926)"} true;
    assert {:msg "assert_failed(8,4814,4926): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS());

    // assert Not(ContainsVec<vector<u8>>(select RegisteredCurrencies::RegisteredCurrencies.currency_codes(DiemConfig::$get[@456]<RegisteredCurrencies::RegisteredCurrencies>()), $t5)) at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:72:9+154
    assume {:print "$at(25,2617,2771)"} true;
    assert {:msg "assert_failed(25,2617,2771): function does not abort under this condition"}
      !$ContainsVec'vec'u8''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456)), $t5);

    // assert Not(Not(exists[@457]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:140:9+129
    assume {:print "$at(13,5612,5741)"} true;
    assert {:msg "assert_failed(13,5612,5741): function does not abort under this condition"}
      !!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#457, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@456]<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:104:9+101
    assume {:print "$at(13,3930,4031)"} true;
    assert {:msg "assert_failed(13,3930,4031): function does not abort under this condition"}
      !!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assert Not(And(And(And(And(DiemTimestamp::$is_operating[@458](), DiemConfig::$reconfiguration_enabled[@459]()), Gt(DiemTimestamp::spec_now_microseconds[@458](), 0)), Lt(select DiemConfig::Configuration.epoch($t12), 18446744073709551615)), Lt($t13, select DiemConfig::Configuration.last_reconfiguration_time($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:362:9+283
    assume {:print "$at(13,16092,16375)"} true;
    assert {:msg "assert_failed(13,16092,16375): function does not abort under this condition"}
      !(((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory#459)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458) > 0)) && ($epoch#$1_DiemConfig_Configuration($t12) < 18446744073709551615)) && ($t13 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t12)));

    // assert Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1289:9+37
    assume {:print "$at(10,62083,62120)"} true;
    assert {:msg "assert_failed(10,62083,62120): post-condition does not hold"}
      $1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory);

    // assert Eq<u128>(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1290:9+56
    assume {:print "$at(10,62129,62185)"} true;
    assert {:msg "assert_failed(10,62129,62185): post-condition does not hold"}
      $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), 0);

    // assert Implies(Diem::spec_is_currency[@454]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@454]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#454) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#454))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@460]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#460, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@460]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#460, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@454]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@454]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#454) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#454))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@461]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#461, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@461]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#461, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@454]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@454]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#454) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#454))));

    // assert Implies(Diem::spec_is_currency[@454]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@454]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#454) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#454))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@462]<Diem::PreburnQueue<#0>>(addr), exists[@463]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#462, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#463, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@462]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#462, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@454]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@454]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#454) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#454))));

    // return ($t42, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t42;
    $ret1 := $t44;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1267:5+1
    assume {:print "$at(10,61196,61197)"} true;
L9:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Eq<u64>($t3, 0), Gt($t3, 10000000000)), exists[@454]<Diem::CurrencyInfo<#0>>(Signer::spec_address_of[]($t0))), Not(exists[@455]<Roles::RoleId>($t11))), Neq<u64>(select Roles::RoleId.role_id(global[@455]<Roles::RoleId>($t11)), 0)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS[]())), ContainsVec<vector<u8>>(select RegisteredCurrencies::RegisteredCurrencies.currency_codes(DiemConfig::$get[@456]<RegisteredCurrencies::RegisteredCurrencies>()), $t5)), Not(exists[@457]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0)))), Not(exists[@456]<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS[]()))), And(And(And(And(DiemTimestamp::$is_operating[@458](), DiemConfig::$reconfiguration_enabled[@459]()), Gt(DiemTimestamp::spec_now_microseconds[@458](), 0)), Lt(select DiemConfig::Configuration.epoch($t12), 18446744073709551615)), Lt($t13, select DiemConfig::Configuration.last_reconfiguration_time($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1268:5+133
    assume {:print "$at(10,61202,61335)"} true;
    assert {:msg "assert_failed(10,61202,61335): abort not covered by any of the `aborts_if` clauses"}
      (((((((((($IsEqual'u64'($t3, 0) || ($t3 > 10000000000)) || $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory#454, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#455, $t11)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#455, $t11)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())) || $ContainsVec'vec'u8''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456)), $t5)) || !$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#457, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || (((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory#459)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458) > 0)) && ($epoch#$1_DiemConfig_Configuration($t12) < 18446744073709551615)) && ($t13 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t12))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Or(Eq<u64>($t3, 0), Gt($t3, 10000000000)), Eq(7, $t16)), And(exists[@454]<Diem::CurrencyInfo<#0>>(Signer::spec_address_of[]($t0)), Eq(6, $t16))), And(Not(exists[@455]<Roles::RoleId>($t11)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global[@455]<Roles::RoleId>($t11)), 0), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$DIEM_ROOT_ADDRESS[]()), Eq(2, $t16))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS[]()), Eq(2, $t16))), And(ContainsVec<vector<u8>>(select RegisteredCurrencies::RegisteredCurrencies.currency_codes(DiemConfig::$get[@456]<RegisteredCurrencies::RegisteredCurrencies>()), $t5), Eq(7, $t16))), And(Not(exists[@457]<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(Signer::spec_address_of[]($t0))), Eq(4, $t16))), And(Not(exists[@456]<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(CoreAddresses::$DIEM_ROOT_ADDRESS[]())), Eq(5, $t16))), And(And(And(And(And(DiemTimestamp::$is_operating[@458](), DiemConfig::$reconfiguration_enabled[@459]()), Gt(DiemTimestamp::spec_now_microseconds[@458](), 0)), Lt(select DiemConfig::Configuration.epoch($t12), 18446744073709551615)), Lt($t13, select DiemConfig::Configuration.last_reconfiguration_time($t12))), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1268:5+133
    assert {:msg "assert_failed(10,61202,61335): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((($IsEqual'u64'($t3, 0) || ($t3 > 10000000000)) && $IsEqual'u8'(7, $t16)) || ($ResourceExists($1_Diem_CurrencyInfo'#0'_$memory#454, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(6, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory#455, $t11) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#455, $t11)), 0) && $IsEqual'u8'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()) && $IsEqual'u8'(2, $t16))) || ($ContainsVec'vec'u8''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies($1_DiemConfig_$get'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456)), $t5) && $IsEqual'u8'(7, $t16))) || (!$ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#457, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t16))) || (!$ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory#456, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(5, $t16))) || ((((($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458) && $1_DiemConfig_$reconfiguration_enabled($1_DiemConfig_DisableReconfiguration_$memory#459)) && ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#458) > 0)) && ($epoch#$1_DiemConfig_Configuration($t12) < 18446744073709551615)) && ($t13 < $last_reconfiguration_time#$1_DiemConfig_Configuration($t12))) && $IsEqual'u8'(1, $t16)));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1268:5+133
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::remove_burn_capability [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:5+331
procedure {:timeLimit 40} $1_Diem_remove_burn_capability$verify(_$t0: int) returns ($ret0: $1_Diem_BurnCapability'#0')
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Diem_BurnCapability'#0';
    var $t0: int;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_BurnCapability'#0'_$memory#146: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#147: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#148: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#149: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#150: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:5+331
    assume {:print "$at(10,52959,53290)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:5+331
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // @146 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:5+1
    $1_Diem_BurnCapability'#0'_$memory#146 := $1_Diem_BurnCapability'#0'_$memory;

    // @147 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#147 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @148 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:5+1
    $1_Diem_MintCapability'#0'_$memory#148 := $1_Diem_MintCapability'#0'_$memory;

    // @150 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:5+1
    $1_Diem_Preburn'#0'_$memory#150 := $1_Diem_Preburn'#0'_$memory;

    // @149 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:5+1
    $1_Diem_PreburnQueue'#0'_$memory#149 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1084:5+1
    assume {:print "$track_local(13,32,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1086:20+27
    // >> opaque call: $t4 := Signer::address_of($t0)
    assume {:print "$at(10,53103,53130)"} true;

    // $t4 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1086:20+27

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1086:20+27
    assume $IsValid'address'($t4);

    // assume Eq<address>($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1086:20+27
    assume $IsEqual'address'($t4, $1_Signer_spec_address_of($t0));

    // $t4 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1086:20+27

    // trace_local[addr]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1086:13+4
    assume {:print "$track_local(13,32,1):", $t4} $t4 == $t4;

    // $t5 := exists<Diem::BurnCapability<#0>>($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:16+6
    assume {:print "$at(10,53147,53153)"} true;
    $t5 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t4);

    // $t6 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:84+16
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:56+45
    // >> opaque call: $t7 := Errors::requires_capability($t6)

    // $t7 := opaque begin: Errors::requires_capability($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:56+45

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:56+45
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:56+45
    assume $IsEqual'u64'($t7, 4);

    // $t7 := opaque end: Errors::requires_capability($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:56+45

    // trace_local[tmp#$3]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:9+93
    assume {:print "$track_local(13,32,3):", $t7} $t7 == $t7;

    // trace_local[tmp#$2]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:9+93
    assume {:print "$track_local(13,32,2):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:9+93
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:9+93
L1:

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:9+93
    assume {:print "$at(10,53140,53233)"} true;
    assume {:print "$track_abort(13,32):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:9+93
    $t8 := $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1087:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1088:45+4
    assume {:print "$at(10,53279,53283)"} true;
L0:

    // $t9 := move_from<Diem::BurnCapability<#0>>($t4) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1088:9+9
    if (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $t4);
        $1_Diem_BurnCapability'#0'_$memory := $ResourceRemove($1_Diem_BurnCapability'#0'_$memory, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(10,53243,53252)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(13,32):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1088:9+41
    assume {:print "$track_return(13,32,0):", $t9} $t9 == $t9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:5+1
    assume {:print "$at(10,53289,53290)"} true;
L2:

    // assert Not(Not(exists[@146]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1095:9+111
    assume {:print "$at(10,53469,53580)"} true;
    assert {:msg "assert_failed(10,53469,53580): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#146, $1_Signer_spec_address_of($t0));

    // assert Implies(Diem::spec_is_currency[@147]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@147]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#147) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#147))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@148]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#148, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@148]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#148, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@147]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@147]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#147) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#147))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@146]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#146, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@147]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@147]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#147) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#147))));

    // assert Implies(Diem::spec_is_currency[@147]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@147]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#147) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#147))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@149]<Diem::PreburnQueue<#0>>(addr), exists[@150]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#149, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#150, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@149]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#149, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@147]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@147]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#147) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#147))));

    // return $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t9;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:5+1
    assume {:print "$at(10,53289,53290)"} true;
L3:

    // assert Not(exists[@146]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1090:5+87
    assume {:print "$at(10,53295,53382)"} true;
    assert {:msg "assert_failed(10,53295,53382): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_Diem_BurnCapability'#0'_$memory#146, $1_Signer_spec_address_of($t0));

    // assert And(Not(exists[@146]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1090:5+87
    assert {:msg "assert_failed(10,53295,53382): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#146, $1_Signer_spec_address_of($t0)) && $IsEqual'u8'(4, $t8));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1090:5+87
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun Diem::remove_preburn_from_queue [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:805:5+1370
procedure {:timeLimit 40} $1_Diem_remove_preburn_from_queue$verify(_$t0: int, _$t1: int) returns ($ret0: $1_Diem_PreburnWithMetadata'#0')
{
    // declare local variables
    var $t2: $1_Diem_PreburnWithMetadata'#0';
    var $t3: int;
    var $t4: $1_Diem_PreburnWithMetadata'#0';
    var $t5: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'));
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'));
    var $t10: int;
    var $t11: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($1_Diem_PreburnQueue'#0');
    var $t18: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'));
    var $t19: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t20: int;
    var $t21: bool;
    var $t22: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t23: $1_Diem_PreburnWithMetadata'#0';
    var $t24: $1_Diem_Preburn'#0';
    var $t25: $1_Diem_Diem'#0';
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: $1_Diem_PreburnWithMetadata'#0';
    var $t31: int;
    var $t32: int;
    var $t0: int;
    var $t1: int;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_PreburnWithMetadata'#0'': $1_Diem_PreburnWithMetadata'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''': Vec ($1_Diem_PreburnWithMetadata'#0');
    var $1_Diem_PreburnQueue'#0'_$memory#158: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#159: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#160: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#161: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_Preburn'#0'_$memory#162: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:842:17+6
    assume {:print "$at(10,41054,41060)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:842:17+6
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:842:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t11, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:847:9+77
    assume {:print "$at(10,41222,41299)"} true;
    assume ($t11 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume CanModify<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:839:9+57
    assume {:print "$at(10,40865,40922)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t0];

    // @161 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:839:9+57
    $1_Diem_BurnCapability'#0'_$memory#161 := $1_Diem_BurnCapability'#0'_$memory;

    // @159 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:839:9+57
    $1_Diem_CurrencyInfo'#0'_$memory#159 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @160 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:839:9+57
    $1_Diem_MintCapability'#0'_$memory#160 := $1_Diem_MintCapability'#0'_$memory;

    // @162 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:839:9+57
    $1_Diem_Preburn'#0'_$memory#162 := $1_Diem_Preburn'#0'_$memory;

    // @158 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:839:9+57
    $1_Diem_PreburnQueue'#0'_$memory#158 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:5+1
    assume {:print "$at(10,39426,39427)"} true;
    assume {:print "$track_local(13,33,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:5+1
    assume {:print "$track_local(13,33,1):", $t1} $t1 == $t1;

    // $t12 := exists<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:807:16+6
    assume {:print "$at(10,39586,39592)"} true;
    $t12 := $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0);

    // $t13 := 11 at /home/ying/diem/language/diem-framework/modules/Diem.move:807:87+14
    $t13 := 11;
    assume $IsValid'u64'($t13);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:807:65+37
    // >> opaque call: $t13 := Errors::not_published($t12)

    // $t14 := opaque begin: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:807:65+37

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:807:65+37
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 5) at /home/ying/diem/language/diem-framework/modules/Diem.move:807:65+37
    assume $IsEqual'u64'($t14, 5);

    // $t14 := opaque end: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:807:65+37

    // trace_local[tmp#$8]($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:807:9+94
    assume {:print "$track_local(13,33,8):", $t14} $t14 == $t14;

    // trace_local[tmp#$7]($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:807:9+94
    assume {:print "$track_local(13,33,7):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:807:9+94
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:807:9+94
L1:

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:807:9+94
    assume {:print "$at(10,39579,39673)"} true;
    assume {:print "$track_abort(13,33):", $t14} $t14 == $t14;

    // $t15 := move($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:807:9+94
    $t15 := $t14;

    // goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:807:9+94
    goto L11;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:809:21+1
    assume {:print "$at(10,39743,39744)"} true;
L0:

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:809:21+1
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // trace_local[index]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:809:13+5
    assume {:print "$track_local(13,33,3):", $t16} $t16 == $t16;

    // assert CanModify<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:810:34+17
    assume {:print "$at(10,39779,39796)"} true;
    assert {:msg "assert_failed(10,39779,39796): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t0];

    // $t17 := borrow_global<Diem::PreburnQueue<#0>>($t0) on_abort goto L11 with $t15 at /home/ying/diem/language/diem-framework/modules/Diem.move:810:34+17
    if (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(10,39779,39796)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(13,33):", $t15} $t15 == $t15;
        goto L11;
    }

    // $t18 := borrow_field<Diem::PreburnQueue<#0>>.preburns($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:810:29+72
    $t18 := $ChildMutation($t17, 0, $preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17)));

    // trace_local[preburn_queue]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:810:13+13
    $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''' := $Dereference($t18);
    assume {:print "$track_local(13,33,5):", $temp_0'vec'$1_Diem_PreburnWithMetadata'#0'''} $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''' == $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''';

    // $t19 := read_ref($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:811:43+13
    assume {:print "$at(10,39890,39903)"} true;
    $t19 := $Dereference($t18);

    // $t20 := Vector::length<Diem::PreburnWithMetadata<#0>>($t19) on_abort goto L11 with $t15 at /home/ying/diem/language/diem-framework/modules/Diem.move:811:28+29
    call $t20 := $1_Vector_length'$1_Diem_PreburnWithMetadata'#0''($t19);
    if ($abort_flag) {
        assume {:print "$at(10,39875,39904)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(13,33):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[queue_length]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:811:13+12
    assume {:print "$track_local(13,33,6):", $t20} $t20 == $t20;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:814:13+161
    assume {:print "$at(10,39936,40097)"} true;
L8:

    // assert Le($t16, $t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:815:17+29
    assume {:print "$at(10,39959,39988)"} true;
    assert {:msg "assert_failed(10,39959,39988): base case of the loop invariant does not hold"}
      ($t16 <= $t20);

    // assert forall j: Range(0, $t16): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t18, j)))), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    assume {:print "$at(10,40005,40083)"} true;
    assert {:msg "assert_failed(10,40005,40083): base case of the loop invariant does not hold"}
      (var $range_0 := $Range(0, $t16); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($Dereference($t18), j)))), $t1)))));

    // havoc[val]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    havoc $t16;
    assume $IsValid'u64'($t16);

    // havoc[val]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    havoc $t21;
    assume $IsValid'bool'($t21);

    // havoc[val]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    havoc $t22;
    assume $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''($t22);

    // havoc[val]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    havoc $t23;
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t23);

    // havoc[val]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    havoc $t24;
    assume $IsValid'$1_Diem_Preburn'#0''($t24);

    // havoc[val]($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    havoc $t25;
    assume $IsValid'$1_Diem_Diem'#0''($t25);

    // havoc[val]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    havoc $t26;
    assume $IsValid'u64'($t26);

    // havoc[val]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    havoc $t27;
    assume $IsValid'bool'($t27);

    // havoc[val]($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    havoc $t28;
    assume $IsValid'u64'($t28);

    // havoc[val]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    havoc $t29;
    assume $IsValid'u64'($t29);

    // assume Not(AbortFlag()) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    assume !$abort_flag;

    // assume Le($t16, $t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:815:17+29
    assume {:print "$at(10,39959,39988)"} true;
    assume ($t16 <= $t20);

    // assume forall j: Range(0, $t16): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t18, j)))), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    assume {:print "$at(10,40005,40083)"} true;
    assume (var $range_0 := $Range(0, $t16); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($Dereference($t18), j)))), $t1)))));

    // $t21 := <($t16, $t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:818:20+1
    assume {:print "$at(10,40118,40119)"} true;
    call $t21 := $Lt($t16, $t20);

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:813:9+560
    assume {:print "$at(10,39915,40475)"} true;
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:813:9+560
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:813:9+560
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:820:39+13
    assume {:print "$at(10,40185,40198)"} true;
L2:

    // trace_local[tmp#$10]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:820:38+22
    assume {:print "$track_local(13,33,10):", $t16} $t16 == $t16;

    // trace_local[tmp#$9]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:820:38+22
    $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''' := $Dereference($t18);
    assume {:print "$track_local(13,33,9):", $temp_0'vec'$1_Diem_PreburnWithMetadata'#0'''} $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''' == $temp_0'vec'$1_Diem_PreburnWithMetadata'#0''';

    // $t22 := read_ref($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:820:38+22
    $t22 := $Dereference($t18);

    // $t23 := Vector::borrow<Diem::PreburnWithMetadata<#0>>($t22, $t16) on_abort goto L11 with $t15 at /home/ying/diem/language/diem-framework/modules/Diem.move:820:24+36
    call $t23 := $1_Vector_borrow'$1_Diem_PreburnWithMetadata'#0''($t22, $t16);
    if ($abort_flag) {
        assume {:print "$at(10,40170,40206)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(13,33):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[elem]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:820:17+4
    assume {:print "$track_local(13,33,2):", $t23} $t23 == $t23;

    // $t24 := get_field<Diem::PreburnWithMetadata<#0>>.preburn($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:821:24+12
    assume {:print "$at(10,40231,40243)"} true;
    $t24 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t23);

    // $t25 := get_field<Diem::Preburn<#0>>.to_burn($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:821:23+21
    $t25 := $to_burn#$1_Diem_Preburn'#0'($t24);

    // $t26 := Diem::value<#0>($t25) on_abort goto L11 with $t15 at /home/ying/diem/language/diem-framework/modules/Diem.move:821:17+28
    call $t26 := $1_Diem_value'#0'($t25);
    if ($abort_flag) {
        assume {:print "$at(10,40224,40252)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(13,33):", $t15} $t15 == $t15;
        goto L11;
    }

    // $t27 := ==($t26, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:821:46+2
    $t27 := $IsEqual'u64'($t26, $t1);

    // if ($t27) goto L5 else goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:821:13+213
    if ($t27) { goto L5; } else { goto L12; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:821:13+213
L6:

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:821:13+213
    goto L7;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:822:46+13
    assume {:print "$at(10,40311,40324)"} true;
L5:

    // $t30 := Vector::remove<Diem::PreburnWithMetadata<#0>>($t18, $t16) on_abort goto L11 with $t15 at /home/ying/diem/language/diem-framework/modules/Diem.move:822:31+36
    call $t30,$t18 := $1_Vector_remove'$1_Diem_PreburnWithMetadata'#0''($t18, $t16);
    if ($abort_flag) {
        assume {:print "$at(10,40296,40332)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(13,33):", $t15} $t15 == $t15;
        goto L11;
    }

    // write_back[Reference($t17).preburns]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:822:31+36
    $t17 := $UpdateMutation($t17, $Update'$1_Diem_PreburnQueue'#0''_preburns($Dereference($t17), $Dereference($t18)));

    // assert Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t17)), 256) at /home/ying/diem/language/diem-framework/modules/Diem.move:201:9+52
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:201:9+52
    assume {:print "$at(10,10315,10367)"} true;
    assert {:msg "assert_failed(10,10315,10367): data invariant does not hold"}
      (LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17))) <= 256);

    // assert forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t17))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($t17), i)))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:205:9+78
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:205:9+78
    assume {:print "$at(10,10543,10621)"} true;
    assert {:msg "assert_failed(10,10543,10621): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17)))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17)), i)))) > 0)))));

    // write_back[Diem::PreburnQueue<#0>@]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:822:31+36
    assume {:print "$at(10,40296,40332)"} true;
    $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // trace_local[preburn]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:822:21+7
    assume {:print "$track_local(13,33,4):", $t30} $t30 == $t30;

    // trace_return[0]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:824:17+14
    assume {:print "$at(10,40405,40419)"} true;
    assume {:print "$track_return(13,33,0):", $t30} $t30 == $t30;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:824:17+14
    goto L10;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:826:21+5
    assume {:print "$at(10,40455,40460)"} true;
L7:

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:826:29+1
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // $t29 := +($t16, $t28) on_abort goto L11 with $t15 at /home/ying/diem/language/diem-framework/modules/Diem.move:826:27+1
    call $t29 := $AddU64($t16, $t28);
    if ($abort_flag) {
        assume {:print "$at(10,40461,40462)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(13,33):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[index]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:826:13+5
    assume {:print "$track_local(13,33,3):", $t29} $t29 == $t29;

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:826:30+1
    goto L9;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:829:9+156
    assume {:print "$at(10,40486,40642)"} true;
L4:

    // assert Eq<u64>($t16, $t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:830:13+29
    assume {:print "$at(10,40505,40534)"} true;
    assert {:msg "assert_failed(10,40505,40534): unknown assertion failed"}
      $IsEqual'u64'($t16, $t20);

    // assert forall j: Range(0, $t20): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t18, j)))), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:831:13+85
    assume {:print "$at(10,40547,40632)"} true;
    assert {:msg "assert_failed(10,40547,40632): unknown assertion failed"}
      (var $range_0 := $Range(0, $t20); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($Dereference($t18), j)))), $t1)))));

    // assert Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t17)), 256) at /home/ying/diem/language/diem-framework/modules/Diem.move:201:9+52
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:201:9+52
    assume {:print "$at(10,10315,10367)"} true;
    assert {:msg "assert_failed(10,10315,10367): data invariant does not hold"}
      (LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17))) <= 256);

    // assert forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($t17))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($t17), i)))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:205:9+78
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:205:9+78
    assume {:print "$at(10,10543,10621)"} true;
    assert {:msg "assert_failed(10,10543,10621): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17)))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($Dereference($t17)), i)))) > 0)))));

    // $t31 := 12 at /home/ying/diem/language/diem-framework/modules/Diem.move:835:37+18
    assume {:print "$at(10,40771,40789)"} true;
    $t31 := 12;
    assume $IsValid'u64'($t31);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:835:15+41
    // >> opaque call: $t30 := Errors::invalid_state($t29)

    // $t32 := opaque begin: Errors::invalid_state($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:835:15+41

    // assume WellFormed($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:835:15+41
    assume $IsValid'u64'($t32);

    // assume Eq<u64>($t32, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:835:15+41
    assume $IsEqual'u64'($t32, 1);

    // $t32 := opaque end: Errors::invalid_state($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:835:15+41

    // trace_abort($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:835:9+47
    assume {:print "$at(10,40743,40790)"} true;
    assume {:print "$track_abort(13,33):", $t32} $t32 == $t32;

    // $t15 := move($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:835:9+47
    $t15 := $t32;

    // goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:835:9+47
    goto L11;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:829:9+156
    // Loop invariant checking block for the loop started with header: L8
    assume {:print "$at(10,40486,40642)"} true;
L9:

    // assert Le($t29, $t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:815:17+29
    assume {:print "$at(10,39959,39988)"} true;
    assert {:msg "assert_failed(10,39959,39988): induction case of the loop invariant does not hold"}
      ($t29 <= $t20);

    // assert forall j: Range(0, $t29): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t18, j)))), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    assume {:print "$at(10,40005,40083)"} true;
    assert {:msg "assert_failed(10,40005,40083): induction case of the loop invariant does not hold"}
      (var $range_0 := $Range(0, $t29); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($Dereference($t18), j)))), $t1)))));

    // stop() at /home/ying/diem/language/diem-framework/modules/Diem.move:816:17+78
    assume false;
    return;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:836:5+1
    assume {:print "$at(10,40795,40796)"} true;
L10:

    // assert Not(Not(exists[@158]<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:848:9+86
    assume {:print "$at(10,41308,41394)"} true;
    assert {:msg "assert_failed(10,41308,41394): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#158, $t0);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t11)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t11, i)))), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:849:9+121
    assume {:print "$at(10,41403,41524)"} true;
    assert {:msg "assert_failed(10,41403,41524): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t11)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t11, i)))), $t1)))));

    // assert Implies(exists[@158]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:856:9+113
    assume {:print "$at(10,41796,41909)"} true;
    assert {:msg "assert_failed(10,41796,41909): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#158, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assert Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t30))), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:842:9+47
    assume {:print "$at(10,41046,41093)"} true;
    assert {:msg "assert_failed(10,41046,41093): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t30))), $t1);

    // assert Implies(Diem::spec_is_currency[@159]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@159]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#159) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#159))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@160]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#160, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@160]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#160, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@159]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@159]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#159) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#159))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@161]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#161, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@161]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#161, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@159]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@159]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#159) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#159))));

    // assert Implies(Diem::spec_is_currency[@159]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@159]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#159) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#159))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@158]<Diem::PreburnQueue<#0>>(addr), exists[@162]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#158, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#162, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@158]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#158, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@159]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@159]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#159) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#159))));

    // return $t30 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t30;
    return;

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:836:5+1
    assume {:print "$at(10,40795,40796)"} true;
L11:

    // assert Or(Not(exists[@158]<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t11)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t11, i)))), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:837:5+298
    assume {:print "$at(10,40801,41099)"} true;
    assert {:msg "assert_failed(10,40801,41099): abort not covered by any of the `aborts_if` clauses"}
      (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#158, $t0) || (var $range_0 := $Range(0, LenVec($t11)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t11, i)))), $t1))))));

    // assert Or(And(Not(exists[@158]<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t15)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t11)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t11, i)))), $t1), Eq(1, $t15))) at /home/ying/diem/language/diem-framework/modules/Diem.move:837:5+298
    assert {:msg "assert_failed(10,40801,41099): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#158, $t0) && $IsEqual'u8'(5, $t15)) || ((var $range_0 := $Range(0, LenVec($t11)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t11, i)))), $t1))))) && $IsEqual'u8'(1, $t15)));

    // abort($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:837:5+298
    $abort_code := $t15;
    $abort_flag := true;
    return;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // destroy($t17) at <internal>:1:1+10

    // goto L6 at <internal>:1:1+10
    goto L6;

}

// fun Diem::split [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+181
procedure {:timeLimit 40} $1_Diem_split$verify(_$t0: $1_Diem_Diem'#0', _$t1: int) returns ($ret0: $1_Diem_Diem'#0', $ret1: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t2: $1_Diem_Diem'#0';
    var $t3: $1_Diem_Diem'#0';
    var $t4: $Mutation ($1_Diem_Diem'#0');
    var $t5: $1_Diem_Diem'#0';
    var $t6: $1_Diem_Diem'#0';
    var $t7: bool;
    var $t8: int;
    var $t9: $1_Diem_Diem'#0';
    var $t0: $1_Diem_Diem'#0';
    var $t1: int;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#183: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#184: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#185: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#186: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#187: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t4));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1131:17+8
    assume {:print "$at(10,55177,55185)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1131:17+8
    assume $IsValid'u64'($t1);

    // @185 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    assume {:print "$at(10,54840,54841)"} true;
    $1_Diem_BurnCapability'#0'_$memory#185 := $1_Diem_BurnCapability'#0'_$memory;

    // @183 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#183 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @184 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    $1_Diem_MintCapability'#0'_$memory#184 := $1_Diem_MintCapability'#0'_$memory;

    // @187 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    $1_Diem_Preburn'#0'_$memory#187 := $1_Diem_Preburn'#0'_$memory;

    // @186 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    $1_Diem_PreburnQueue'#0'_$memory#186 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t3 := copy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    $t3 := $t0;

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    assume {:print "$track_local(13,35,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    assume {:print "$track_local(13,35,1):", $t1} $t1 == $t1;

    // $t4 := borrow_local($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:30+9
    assume {:print "$at(10,54974,54983)"} true;
    $t4 := $Mutation($Local(0), EmptyVec(), $t0);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    // >> opaque call: $t4 := Diem::withdraw<#0>($t3, $t1)

    // $t5 := opaque begin: Diem::withdraw<#0>($t4, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27

    // $t6 := read_ref($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    $t6 := $Dereference($t4);

    // assume Identical($t7, Lt(select Diem::Diem.value($t4), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    assume ($t7 == ($value#$1_Diem_Diem'#0'($Dereference($t4)) < $t1));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
L4:

    // assume And(Lt(select Diem::Diem.value($t4), $t1), Eq(8, $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    assume (($value#$1_Diem_Diem'#0'($Dereference($t4)) < $t1) && $IsEqual'u8'(8, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    assume {:print "$at(10,54965,54992)"} true;
    assume {:print "$track_abort(13,35):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
L3:

    // havoc[mut]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t4 := $UpdateMutation($t4, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t4));

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t4));

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    assume $IsValid'$1_Diem_Diem'#0''($t5);

    // assume Eq<u64>(select Diem::Diem.value($t4), Sub(select Diem::Diem.value($t6), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t4)), ($value#$1_Diem_Diem'#0'($t6) - $t1));

    // assume Eq<u64>(select Diem::Diem.value($t5), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t5), $t1);

    // $t5 := opaque end: Diem::withdraw<#0>($t4, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27

    // write_back[LocalRoot($t0)@]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:21+27
    $t0 := $Dereference($t4);

    // trace_local[other]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1125:13+5
    assume {:print "$track_local(13,35,2):", $t5} $t5 == $t5;

    // $t9 := move($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1126:10+4
    assume {:print "$at(10,55003,55007)"} true;
    $t9 := $t0;

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1126:9+13
    assume {:print "$track_return(13,35,0):", $t9} $t9 == $t9;

    // trace_return[1]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1126:9+13
    assume {:print "$track_return(13,35,1):", $t5} $t5 == $t5;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1127:5+1
    assume {:print "$at(10,55020,55021)"} true;
L1:

    // assert Not(Lt(select Diem::Diem.value($t3), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:9+58
    assume {:print "$at(10,55047,55105)"} true;
    assert {:msg "assert_failed(10,55047,55105): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($t3) < $t1);

    // assert Eq<u64>(select Diem::Diem.value($t9), Sub(select Diem::Diem.value($t3), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1130:9+46
    assume {:print "$at(10,55114,55160)"} true;
    assert {:msg "assert_failed(10,55114,55160): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t9), ($value#$1_Diem_Diem'#0'($t3) - $t1));

    // assert Eq<u64>(select Diem::Diem.value($t5), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1131:9+33
    assume {:print "$at(10,55169,55202)"} true;
    assert {:msg "assert_failed(10,55169,55202): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t5), $t1);

    // assert Implies(Diem::spec_is_currency[@183]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@183]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#183))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@184]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#184, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@184]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#184, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@183]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@183]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#183))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@185]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#185, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@185]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#185, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@183]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@183]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#183))));

    // assert Implies(Diem::spec_is_currency[@183]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@183]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#183))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@186]<Diem::PreburnQueue<#0>>(addr), exists[@187]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#186, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#187, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@186]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#186, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@183]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@183]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#183) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#183))));

    // return ($t9, $t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t9;
    $ret1 := $t5;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1127:5+1
    assume {:print "$at(10,55020,55021)"} true;
L2:

    // assert Lt(select Diem::Diem.value($t3), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1128:5+182
    assume {:print "$at(10,55026,55208)"} true;
    assert {:msg "assert_failed(10,55026,55208): abort not covered by any of the `aborts_if` clauses"}
      ($value#$1_Diem_Diem'#0'($t3) < $t1);

    // assert And(Lt(select Diem::Diem.value($t3), $t1), Eq(8, $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1128:5+182
    assert {:msg "assert_failed(10,55026,55208): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (($value#$1_Diem_Diem'#0'($t3) < $t1) && $IsEqual'u8'(8, $t8));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1128:5+182
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun Diem::update_minting_ability<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+397
procedure {:inline 1} $1_Diem_update_minting_ability'$1_XDX_XDX'(_$t0: int, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t10: $Mutation (bool);
    var $t0: int;
    var $t1: bool;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'': $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t10));

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+1
    assume {:print "$at(10,72039,72040)"} true;
    assume {:print "$track_local(13,36,0):", $t0} $t0 == $t0;

    // trace_local[can_mint]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+1
    assume {:print "$track_local(13,36,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,72190,72235)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    assume {:print "$at(10,72190,72235)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    assume {:print "$at(10,72190,72235)"} true;
    assume {:print "$track_abort(13,36):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,72245,72275)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30

    // assume Identical($t7, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    assume ($t7 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t7) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    if ($t7) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    assume {:print "$at(10,72245,72275)"} true;
    assume {:print "$track_abort(13,36):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30

    // $t8 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:71+38
    assume {:print "$at(10,72347,72385)"} true;
    call $t8 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,72347,72385)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(13,36):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t9 := borrow_global<Diem::CurrencyInfo<#0>>($t8) on_abort goto L2 with $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(10,72305,72322)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(13,36):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[currency_info]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:13+13
    $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' := $Dereference($t9);
    assume {:print "$track_local(13,36,2):", $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX''} $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' == $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'';

    // $t10 := borrow_field<Diem::CurrencyInfo<#0>>.can_mint($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+22
    assume {:print "$at(10,72396,72418)"} true;
    $t10 := $ChildMutation($t9, 7, $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t9)));

    // write_ref($t10, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+33
    $t10 := $UpdateMutation($t10, $t1);

    // write_back[Reference($t9).can_mint]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+33
    $t9 := $UpdateMutation($t9, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_can_mint($Dereference($t9), $Dereference($t10)));

    // pack_ref_deep($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+33

    // write_back[Diem::CurrencyInfo<#0>@]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+33
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1521:5+1
    assume {:print "$at(10,72435,72436)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1521:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1521:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1521:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Diem::update_minting_ability [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+397
procedure {:timeLimit 40} $1_Diem_update_minting_ability$verify(_$t0: int, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t10: $Mutation (bool);
    var $t0: int;
    var $t1: bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_Diem_CurrencyInfo'#0'_$memory#247: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Roles_RoleId_$memory#248: $Memory $1_Roles_RoleId;
    var $1_Diem_MintCapability'#0'_$memory#249: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#250: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#251: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#252: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t10));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+397
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(10,72039,72436)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+397
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+397
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+397
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+397
    assume $IsValid'bool'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+397
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+397
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // @248 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+1
    assume {:print "$at(10,72039,72040)"} true;
    $1_Roles_RoleId_$memory#248 := $1_Roles_RoleId_$memory;

    // @250 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+1
    $1_Diem_BurnCapability'#0'_$memory#250 := $1_Diem_BurnCapability'#0'_$memory;

    // @247 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#247 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @249 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+1
    $1_Diem_MintCapability'#0'_$memory#249 := $1_Diem_MintCapability'#0'_$memory;

    // @252 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+1
    $1_Diem_Preburn'#0'_$memory#252 := $1_Diem_Preburn'#0'_$memory;

    // @251 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+1
    $1_Diem_PreburnQueue'#0'_$memory#251 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+1
    assume {:print "$track_local(13,36,0):", $t0} $t0 == $t0;

    // trace_local[can_mint]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1512:5+1
    assume {:print "$track_local(13,36,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,72190,72235)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    assume {:print "$at(10,72190,72235)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    assume {:print "$at(10,72190,72235)"} true;
    assume {:print "$track_abort(13,36):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1517:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,72245,72275)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30

    // assume Identical($t7, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    assume ($t7 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t7) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    if ($t7) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    assume {:print "$at(10,72245,72275)"} true;
    assume {:print "$track_abort(13,36):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1518:9+30

    // $t8 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:71+38
    assume {:print "$at(10,72347,72385)"} true;
    call $t8 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,72347,72385)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(13,36):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t9 := borrow_global<Diem::CurrencyInfo<#0>>($t8) on_abort goto L2 with $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(10,72305,72322)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(13,36):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[currency_info]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1519:13+13
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t9);
    assume {:print "$track_local(13,36,2):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t10 := borrow_field<Diem::CurrencyInfo<#0>>.can_mint($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+22
    assume {:print "$at(10,72396,72418)"} true;
    $t10 := $ChildMutation($t9, 7, $can_mint#$1_Diem_CurrencyInfo'#0'($Dereference($t9)));

    // write_ref($t10, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+33
    $t10 := $UpdateMutation($t10, $t1);

    // write_back[Reference($t9).can_mint]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+33
    $t9 := $UpdateMutation($t9, $Update'$1_Diem_CurrencyInfo'#0''_can_mint($Dereference($t9), $Dereference($t10)));

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t9)), Le(select Diem::CurrencyInfo.scaling_factor($t9), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t9))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t9)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1520:9+33
    assume {:print "$at(10,72396,72429)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1521:5+1
    assume {:print "$at(10,72435,72436)"} true;
L1:

    // assert Not(Not(Diem::spec_is_currency[@247]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#247);

    // assert Not(Not(exists[@248]<Roles::RoleId>($t3))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#248, $t3);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t3)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t3)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Eq<bool>(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<#0>()), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1535:9+60
    assume {:print "$at(10,73008,73068)"} true;
    assert {:msg "assert_failed(10,73008,73068): post-condition does not hold"}
      $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $t1);

    // assert Implies(Diem::spec_is_currency[@247]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@247]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#247) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#247))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@249]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#249, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@249]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#249, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@247]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@247]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#247) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#247))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@250]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#250, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@250]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#250, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@247]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@247]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#247) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#247))));

    // assert Implies(Diem::spec_is_currency[@247]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@247]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#247) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#247))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@251]<Diem::PreburnQueue<#0>>(addr), exists[@252]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#251, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#252, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@251]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#251, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@247]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@247]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#247) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#247))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1521:5+1
    assume {:print "$at(10,72435,72436)"} true;
L2:

    // assert Or(Or(Or(Not(Diem::spec_is_currency[@247]<#0>()), Not(exists[@248]<Roles::RoleId>($t3))), Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t3)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1522:5+146
    assume {:print "$at(10,72441,72587)"} true;
    assert {:msg "assert_failed(10,72441,72587): abort not covered by any of the `aborts_if` clauses"}
      (((!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#247) || !$ResourceExists($1_Roles_RoleId_$memory#248, $t3)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t3)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assert Or(Or(Or(And(Not(Diem::spec_is_currency[@247]<#0>()), Eq(5, $t6)), And(Not(exists[@248]<Roles::RoleId>($t3)), Eq(5, $t6))), And(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t3)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1522:5+146
    assert {:msg "assert_failed(10,72441,72587): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#247) && $IsEqual'u8'(5, $t6)) || (!$ResourceExists($1_Roles_RoleId_$memory#248, $t3) && $IsEqual'u8'(5, $t6))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t3)), 1) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1522:5+146
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Diem::update_xdx_exchange_rate [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+766
procedure {:timeLimit 40} $1_Diem_update_xdx_exchange_rate$verify(_$t0: int, _$t1: $1_FixedPoint32_FixedPoint32) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t3: int;
    var $t4: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t5: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t13: $Mutation ($1_FixedPoint32_FixedPoint32);
    var $t14: $Mutation ($1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent');
    var $t15: Vec (int);
    var $t16: $1_FixedPoint32_FixedPoint32;
    var $t17: int;
    var $t18: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t0: int;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'address': int;
    var $1_Roles_RoleId_$memory#259: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#260: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#261: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#262: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#263: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#264: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t12));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t14));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+766
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(10,68888,69654)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+766
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+766
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+766
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+766
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+766
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+766
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, select Diem::CurrencyInfo.exchange_rate_update_events(global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1484:9+116
    assume {:print "$at(10,70510,70626)"} true;
    assume ($t4 == $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())));

    // assume Identical($t5, pack Diem::ToXDXExchangeRateUpdateEvent(select Diem::CurrencyInfo.currency_code(global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())), FixedPoint32::$get_raw_value($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1485:9+253
    assume {:print "$at(10,70635,70888)"} true;
    assume ($t5 == $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())), $1_FixedPoint32_$get_raw_value($t1)));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // @259 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+1
    assume {:print "$at(10,68888,68889)"} true;
    $1_Roles_RoleId_$memory#259 := $1_Roles_RoleId_$memory;

    // @262 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+1
    $1_Diem_BurnCapability'#0'_$memory#262 := $1_Diem_BurnCapability'#0'_$memory;

    // @260 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#260 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @261 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+1
    $1_Diem_MintCapability'#0'_$memory#261 := $1_Diem_MintCapability'#0'_$memory;

    // @264 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+1
    $1_Diem_Preburn'#0'_$memory#264 := $1_Diem_Preburn'#0'_$memory;

    // @263 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+1
    $1_Diem_PreburnQueue'#0'_$memory#263 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+1
    assume {:print "$track_local(13,37,0):", $t0} $t0 == $t0;

    // trace_local[xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1448:5+1
    assume {:print "$track_local(13,37,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(10,69053,69098)"} true;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:9+45
    assume {:print "$at(10,69053,69098)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:9+45
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t8) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:9+45
    if ($t8) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'u8'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1) && $IsEqual'u8'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:9+45
    assume {:print "$at(10,69053,69098)"} true;
    assume {:print "$track_abort(13,37):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1452:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+34
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,69108,69142)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+34

    // assume Identical($t10, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+34
    assume ($t10 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t10) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+34
    if ($t10) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+34
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t9)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+34
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+34
    assume {:print "$at(10,69108,69142)"} true;
    assume {:print "$track_abort(13,37):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+34
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+34
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1453:9+34

    // $t11 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:75+38
    assume {:print "$at(10,69218,69256)"} true;
    call $t11 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,69218,69256)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(13,37):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t12 := borrow_global<Diem::CurrencyInfo<#0>>($t11) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $Mutation($Global($t11), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t11));
    }
    if ($abort_flag) {
        assume {:print "$at(10,69172,69189)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(13,37):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[currency_info]($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:13+13
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t12);
    assume {:print "$track_local(13,37,2):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t13 := borrow_field<Diem::CurrencyInfo<#0>>.to_xdx_exchange_rate($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1455:9+34
    assume {:print "$at(10,69267,69301)"} true;
    $t13 := $ChildMutation($t12, 2, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($Dereference($t12)));

    // write_ref($t13, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1455:9+54
    $t13 := $UpdateMutation($t13, $t1);

    // write_back[Reference($t12).to_xdx_exchange_rate]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:1455:9+54
    $t12 := $UpdateMutation($t12, $Update'$1_Diem_CurrencyInfo'#0''_to_xdx_exchange_rate($Dereference($t12), $Dereference($t13)));

    // $t14 := borrow_field<Diem::CurrencyInfo<#0>>.exchange_rate_update_events($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1457:13+46
    assume {:print "$at(10,69362,69408)"} true;
    $t14 := $ChildMutation($t12, 12, $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'($Dereference($t12)));

    // $t15 := get_field<Diem::CurrencyInfo<#0>>.currency_code($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1459:33+28
    assume {:print "$at(10,69485,69513)"} true;
    $t15 := $currency_code#$1_Diem_CurrencyInfo'#0'($Dereference($t12));

    // $t16 := get_field<Diem::CurrencyInfo<#0>>.to_xdx_exchange_rate($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1460:72+35
    assume {:print "$at(10,69586,69621)"} true;
    $t16 := $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($Dereference($t12));

    // $t17 := FixedPoint32::get_raw_value($t16) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1460:43+65
    call $t17 := $1_FixedPoint32_get_raw_value($t16);
    if ($abort_flag) {
        assume {:print "$at(10,69557,69622)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(13,37):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t18 := pack Diem::ToXDXExchangeRateUpdateEvent($t15, $t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1458:13+215
    assume {:print "$at(10,69422,69637)"} true;
    $t18 := $1_Diem_ToXDXExchangeRateUpdateEvent($t15, $t17);

    // Event::emit_event<Diem::ToXDXExchangeRateUpdateEvent>($t14, $t18) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1456:9+316
    assume {:print "$at(10,69331,69647)"} true;
    call $t14 := $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'($t14, $t18);
    if ($abort_flag) {
        assume {:print "$at(10,69331,69647)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(13,37):", $t9} $t9 == $t9;
        goto L2;
    }

    // assert And(Lt(0, select Diem::CurrencyInfo.scaling_factor($t12)), Le(select Diem::CurrencyInfo.scaling_factor($t12), 10000000000)) at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    // data invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:159:9+69
    assume {:print "$at(10,8133,8202)"} true;
    assert {:msg "assert_failed(10,8133,8202): data invariant does not hold"}
      ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t12))) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($Dereference($t12)) <= 10000000000));

    // write_back[Diem::CurrencyInfo<#0>@]($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1456:9+316
    assume {:print "$at(10,69331,69647)"} true;
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t12),
        $Dereference($t12));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1463:5+1
    assume {:print "$at(10,69653,69654)"} true;
L1:

    // assert Not(Not(exists[@259]<Roles::RoleId>($t3))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#259, $t3);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@259]<Roles::RoleId>($t3)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#259, $t3)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Not(Not(Diem::spec_is_currency[@260]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260);

    // assert Not(Not(exists[@259]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:536:9+59
    assume {:print "$at(26,24063,24122)"} true;
    assert {:msg "assert_failed(26,24063,24122): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#259, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@259]<Roles::RoleId>($t6)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+97
    assume {:print "$at(26,24131,24228)"} true;
    assert {:msg "assert_failed(26,24131,24228): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#259, $t6)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:89:9+118
    assume {:print "$at(8,3611,3729)"} true;
    assert {:msg "assert_failed(8,3611,3729): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assert Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1479:9+85
    assume {:print "$at(10,70309,70394)"} true;
    assert {:msg "assert_failed(10,70309,70394): post-condition does not hold"}
      $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $t1);

    // assert Implies(Diem::spec_is_currency[@260]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@260]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#260))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@261]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#261, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@261]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#261, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@260]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@260]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#260))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@262]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#262, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@262]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#262, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@260]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@260]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#260))));

    // assert Implies(Diem::spec_is_currency[@260]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@260]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#260))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@263]<Diem::PreburnQueue<#0>>(addr), exists[@264]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#263, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#264, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@263]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#263, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t5, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1489:9+20
    assume {:print "$at(10,70897,70917)"} true;
    assert {:msg "assert_failed(10,70897,70917): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($EmptyEventStore, $t4, $t5); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t5, $t4)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:5+216
    assume {:print "$at(10,69659,69875)"} true;
    assert {:msg "assert_failed(10,69659,69875): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($EmptyEventStore, $t4, $t5); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:5+216
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1463:5+1
    assume {:print "$at(10,69653,69654)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Not(exists[@259]<Roles::RoleId>($t3)), Neq<u64>(select Roles::RoleId.role_id(global[@259]<Roles::RoleId>($t3)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())), Not(Diem::spec_is_currency[@260]<#0>())), Not(exists[@259]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@259]<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:5+216
    assume {:print "$at(10,69659,69875)"} true;
    assert {:msg "assert_failed(10,69659,69875): abort not covered by any of the `aborts_if` clauses"}
      ((((((!$ResourceExists($1_Roles_RoleId_$memory#259, $t3) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#259, $t3)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260)) || !$ResourceExists($1_Roles_RoleId_$memory#259, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#259, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assert Or(Or(Or(Or(Or(Or(And(Not(exists[@259]<Roles::RoleId>($t3)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global[@259]<Roles::RoleId>($t3)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t9))), And(Not(Diem::spec_is_currency[@260]<#0>()), Eq(5, $t9))), And(Not(exists[@259]<Roles::RoleId>($t6)), Eq(5, $t9))), And(Neq<u64>(select Roles::RoleId.role_id(global[@259]<Roles::RoleId>($t6)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of[]($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS[]()), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:5+216
    assert {:msg "assert_failed(10,69659,69875): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((!$ResourceExists($1_Roles_RoleId_$memory#259, $t3) && $IsEqual'u8'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#259, $t3)), 1) && $IsEqual'u8'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t9))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#260) && $IsEqual'u8'(5, $t9))) || (!$ResourceExists($1_Roles_RoleId_$memory#259, $t6) && $IsEqual'u8'(5, $t9))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#259, $t6)), 1) && $IsEqual'u8'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t9)));

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:5+216
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun Diem::xdx_exchange_rate [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:5+244
procedure {:timeLimit 40} $1_Diem_xdx_exchange_rate$verify() returns ($ret0: $1_FixedPoint32_FixedPoint32)
{
    // declare local variables
    var $t0: $1_Diem_CurrencyInfo'#0';
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: $1_Diem_CurrencyInfo'#0';
    var $t5: $1_FixedPoint32_FixedPoint32;
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $1_Diem_CurrencyInfo'#0'_$memory#193: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#194: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#195: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#196: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#197: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1502:17+6
    assume {:print "$at(10,71450,71456)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t0, global<Diem::CurrencyInfo<#0>>(CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1501:9+82
    assume {:print "$at(10,71351,71433)"} true;
    assume ($t0 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // @195 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:5+1
    assume {:print "$at(10,71000,71001)"} true;
    $1_Diem_BurnCapability'#0'_$memory#195 := $1_Diem_BurnCapability'#0'_$memory;

    // @193 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#193 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @194 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:5+1
    $1_Diem_MintCapability'#0'_$memory#194 := $1_Diem_MintCapability'#0'_$memory;

    // @197 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:5+1
    $1_Diem_Preburn'#0'_$memory#197 := $1_Diem_Preburn'#0'_$memory;

    // @196 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1493:5+1
    $1_Diem_PreburnQueue'#0'_$memory#196 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1495:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,71098,71128)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1495:9+30

    // assume Identical($t1, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1495:9+30
    assume ($t1 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t1) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1495:9+30
    if ($t1) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1495:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1495:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t2));

    // trace_abort($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1495:9+30
    assume {:print "$at(10,71098,71128)"} true;
    assume {:print "$track_abort(13,42):", $t2} $t2 == $t2;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1495:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1495:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1495:9+30

    // $t3 := CoreAddresses::CURRENCY_INFO_ADDRESS() on_abort goto L2 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:49+38
    assume {:print "$at(10,71178,71216)"} true;
    call $t3 := $1_CoreAddresses_CURRENCY_INFO_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(10,71178,71216)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(13,42):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t4 := get_global<Diem::CurrencyInfo<#0>>($t3) on_abort goto L2 with $t2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:11+13
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t3);
    }
    if ($abort_flag) {
        assume {:print "$at(10,71140,71153)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(13,42):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t5 := get_field<Diem::CurrencyInfo<#0>>.to_xdx_exchange_rate($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:10+99
    $t5 := $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($t4);

    // trace_return[0]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:9+100
    assume {:print "$track_return(13,42,0):", $t5} $t5 == $t5;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1497:5+1
    assume {:print "$at(10,71243,71244)"} true;
L1:

    // assert Not(Not(Diem::spec_is_currency[@193]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193);

    // assert Eq<FixedPoint32::FixedPoint32>($t5, select Diem::CurrencyInfo.to_xdx_exchange_rate($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1502:9+44
    assume {:print "$at(10,71442,71486)"} true;
    assert {:msg "assert_failed(10,71442,71486): post-condition does not hold"}
      $IsEqual'$1_FixedPoint32_FixedPoint32'($t5, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($t0));

    // assert Implies(Diem::spec_is_currency[@193]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@193]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#193))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@194]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#194, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@194]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#194, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@193]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@193]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#193))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@195]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#195, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@195]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#195, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@193]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@193]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#193))));

    // assert Implies(Diem::spec_is_currency[@193]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@193]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#193))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@196]<Diem::PreburnQueue<#0>>(addr), exists[@197]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#196, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#197, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@196]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#196, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@193]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@193]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#193))));

    // return $t5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t5;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1497:5+1
    assume {:print "$at(10,71243,71244)"} true;
L2:

    // assert Not(Diem::spec_is_currency[@193]<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1498:5+243
    assume {:print "$at(10,71249,71492)"} true;
    assert {:msg "assert_failed(10,71249,71492): abort not covered by any of the `aborts_if` clauses"}
      !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193);

    // assert And(Not(Diem::spec_is_currency[@193]<#0>()), Eq(5, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1498:5+243
    assert {:msg "assert_failed(10,71249,71492): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#193) && $IsEqual'u8'(5, $t2));

    // abort($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1498:5+243
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun Diem::upgrade_preburn<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:653:5+1100
procedure {:inline 1} $1_Diem_upgrade_preburn'#0'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: $1_Diem_Diem'#0';
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: $1_Diem_Preburn'#0';
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: bool;
    var $t20: bool;
    var $t21: bool;
    var $t22: $1_Diem_Preburn'#0';
    var $t23: $1_Diem_Diem'#0';
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: $1_Diem_Preburn'#0';
    var $t33: Vec (int);
    var $t34: $1_Diem_PreburnWithMetadata'#0';
    var $t35: int;
    var $t36: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t37: int;
    var $t38: bool;
    var $t39: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t40: bool;
    var $t0: int;
    var $1_Diem_Preburn'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:677:9+52
    assume {:print "$at(10,32409,32461)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:685:9+52
    assume {:print "$at(10,32772,32824)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, And(exists<Diem::Preburn<#0>>($t7), Not(exists<Diem::PreburnQueue<#0>>($t7)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:686:9+103
    assume {:print "$at(10,32833,32936)"} true;
    assume ($t8 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t7) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t7)));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:694:9+52
    assume {:print "$at(10,33296,33348)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, And(exists<Diem::Preburn<#0>>($t11), Not(exists<Diem::PreburnQueue<#0>>($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:695:9+103
    assume {:print "$at(10,33357,33460)"} true;
    assume ($t12 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t11) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t11)));

    // assume Identical($t13, global<Diem::Preburn<#0>>($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:696:9+54
    assume {:print "$at(10,33469,33523)"} true;
    assume ($t13 == $ResourceValue($1_Diem_Preburn'#0'_$memory, $t11));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:5+1
    assume {:print "$at(10,31273,31274)"} true;
    assume {:print "$track_local(13,38,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    // >> opaque call: Roles::assert_designated_dealer($t0)
    assume {:print "$at(10,31373,31413)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    assume {:print "$at(10,31373,31413)"} true;

    // assume Identical($t15, Or(Not(exists<Roles::RoleId>($t14)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    assume ($t15 == (!$ResourceExists($1_Roles_RoleId_$memory, $t14) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 2)));

    // if ($t15) goto L15 else goto L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    if ($t15) { goto L15; } else { goto L14; }

    // label L15 at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
L15:

    // assume Or(And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 2), Eq(3, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 2) && $IsEqual'u8'(3, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    assume {:print "$at(10,31373,31413)"} true;
    assume {:print "$track_abort(13,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    goto L13;

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
L14:

    // opaque end: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:656:22+27
    // >> opaque call: $t6 := Signer::address_of($t0)
    assume {:print "$at(10,31436,31463)"} true;

    // $t17 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:22+27

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:22+27
    assume $IsValid'address'($t17);

    // assume Eq<address>($t17, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:22+27
    assume $IsEqual'address'($t17, $1_Signer_spec_address_of($t0));

    // $t17 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:22+27

    // trace_local[sender]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:13+6
    assume {:print "$track_local(13,38,3):", $t17} $t17 == $t17;

    // $t18 := exists<Diem::Preburn<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:657:30+6
    assume {:print "$at(10,31494,31500)"} true;
    $t18 := $ResourceExists($1_Diem_Preburn'#0'_$memory, $t17);

    // trace_local[preburn_exists]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:657:13+14
    assume {:print "$track_local(13,38,1):", $t18} $t18 == $t18;

    // $t19 := exists<Diem::PreburnQueue<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:658:36+6
    assume {:print "$at(10,31564,31570)"} true;
    $t19 := $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t17);

    // trace_local[preburn_queue_exists]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:658:13+20
    assume {:print "$track_local(13,38,2):", $t19} $t19 == $t19;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    assume {:print "$at(10,31763,31802)"} true;
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:32+20
L0:

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:31+1
    call $t20 := $Not($t19);

    // $t4 := $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    $t4 := $t20;

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    assume {:print "$track_local(13,38,4):", $t20} $t20 == $t20;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
L2:

    // $t21 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    $t21 := false;
    assume $IsValid'bool'($t21);

    // $t4 := $t21 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    $t4 := $t21;

    // trace_local[tmp#$4]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    assume {:print "$track_local(13,38,4):", $t21} $t21 == $t21;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
L3:

    // if ($t4) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
    if ($t4) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:662:68+6
    assume {:print "$at(10,31873,31879)"} true;
L4:

    // $t22 := move_from<Diem::Preburn<#0>>($t17) on_abort goto L13 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:662:39+9
    if (!$ResourceExists($1_Diem_Preburn'#0'_$memory, $t17)) {
        call $ExecFailureAbort();
    } else {
        $t22 := $ResourceValue($1_Diem_Preburn'#0'_$memory, $t17);
        $1_Diem_Preburn'#0'_$memory := $ResourceRemove($1_Diem_Preburn'#0'_$memory, $t17);
    }
    if ($abort_flag) {
        assume {:print "$at(10,31844,31853)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,38):", $t16} $t16 == $t16;
        goto L13;
    }

    // $t23 := unpack Diem::Preburn<#0>($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:662:17+19
    $t23 := $to_burn#$1_Diem_Preburn'#0'($t22);

    // trace_local[to_burn]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:662:27+7
    assume {:print "$track_local(13,38,5):", $t23} $t23 == $t23;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    // >> opaque call: Diem::publish_preburn_queue<#0>($t0)
    assume {:print "$at(10,31894,31934)"} true;

    // assume Identical($t24, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:588:9+52
    assume {:print "$at(10,27821,27873)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t0));

    // assume Identical($t25, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t0));

    // assume Identical($t26, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:605:9+52
    assume {:print "$at(10,28691,28743)"} true;
    assume ($t26 == $1_Signer_spec_address_of($t0));

    // assume Identical($t27, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t27 == $1_Signer_spec_address_of($t0));

    // opaque begin: Diem::publish_preburn_queue<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume {:print "$at(10,31894,31934)"} true;

    // assume Identical($t28, Or(Or(Or(Or(exists<Diem::PreburnQueue<#0>>($t24), exists<Diem::Preburn<#0>>($t24)), Not(exists<Roles::RoleId>($t25))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 2)), Not(Diem::spec_is_currency<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume ($t28 == (((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t24) || $ResourceExists($1_Diem_Preburn'#0'_$memory, $t24)) || !$ResourceExists($1_Roles_RoleId_$memory, $t25)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // if ($t28) goto L17 else goto L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    if ($t28) { goto L17; } else { goto L16; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
L17:

    // assume Or(Or(Or(Or(And(exists<Diem::PreburnQueue<#0>>($t24), Eq(6, $t16)), And(exists<Diem::Preburn<#0>>($t24), Eq(1, $t16))), And(Not(exists<Roles::RoleId>($t25)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 2), Eq(3, $t16))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume ((((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t24) && $IsEqual'u8'(6, $t16)) || ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t24) && $IsEqual'u8'(1, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t25) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 2) && $IsEqual'u8'(3, $t16))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume {:print "$at(10,31894,31934)"} true;
    assume {:print "$track_abort(13,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    goto L13;

    // label L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
L16:

    // modifies global<Diem::PreburnQueue<#0>>($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t24, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t24);
    }

    // assume exists<Diem::PreburnQueue<#0>>($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t26);

    // assume Not(exists<Diem::Preburn<#0>>($t26)) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume !$ResourceExists($1_Diem_Preburn'#0'_$memory, $t26);

    // assume Eq<u64>(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t26))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume $IsEqual'u64'($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t26))), 0);

    // opaque end: Diem::publish_preburn_queue<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40

    // $t29 := get_field<Diem::Diem<#0>>.value($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:666:17+13
    assume {:print "$at(10,32090,32103)"} true;
    $t29 := $value#$1_Diem_Diem'#0'($t23);

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:666:33+1
    $t30 := 0;
    assume $IsValid'u64'($t30);

    // $t31 := >($t29, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:666:31+1
    call $t31 := $Gt($t29, $t30);

    // if ($t31) goto L7 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:666:13+270
    if ($t31) { goto L7; } else { goto L8; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:666:13+270
L8:

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:666:13+270
    goto L9;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:667:38+7
    assume {:print "$at(10,32149,32156)"} true;
L7:

    // $t32 := pack Diem::Preburn<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:668:30+19
    assume {:print "$at(10,32209,32228)"} true;
    $t32 := $1_Diem_Preburn'#0'($t23);

    // $t33 := [] at /home/ying/diem/language/diem-framework/modules/Diem.move:669:31+3
    assume {:print "$at(10,32260,32263)"} true;
    $t33 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t33);

    // $t34 := pack Diem::PreburnWithMetadata<#0>($t32, $t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:47+124
    assume {:print "$at(10,32158,32282)"} true;
    $t34 := $1_Diem_PreburnWithMetadata'#0'($t32, $t33);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    // >> opaque call: Diem::add_preburn_to_queue<#0>($t0, $t18)

    // assume Identical($t35, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+52
    assume {:print "$at(10,34887,34939)"} true;
    assume ($t35 == $1_Signer_spec_address_of($t0));

    // assume Identical($t36, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t35))) at /home/ying/diem/language/diem-framework/modules/Diem.move:723:9+69
    assume {:print "$at(10,34948,35017)"} true;
    assume ($t36 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t35)));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:734:9+52
    assume {:print "$at(10,35589,35641)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // opaque begin: Diem::add_preburn_to_queue<#0>($t0, $t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    assume {:print "$at(10,32128,32283)"} true;

    // assume Identical($t38, Or(Or(Not(exists<Diem::PreburnQueue<#0>>($t35)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t34))), 0)), And(exists<Diem::PreburnQueue<#0>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t37))), 256)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    assume ($t38 == ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t35) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t34))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t37))) >= 256))));

    // if ($t38) goto L19 else goto L18 at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    if ($t38) { goto L19; } else { goto L18; }

    // label L19 at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
L19:

    // assume Or(Or(And(Not(exists<Diem::PreburnQueue<#0>>($t35)), Eq(1, $t16)), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t34))), 0), Eq(7, $t16))), And(And(exists<Diem::PreburnQueue<#0>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t37))), 256)), Eq(8, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    assume (((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t35) && $IsEqual'u8'(1, $t16)) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t34))), 0) && $IsEqual'u8'(7, $t16))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t37))) >= 256)) && $IsEqual'u8'(8, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    assume {:print "$at(10,32128,32283)"} true;
    assume {:print "$track_abort(13,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    goto L13;

    // label L18 at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
L18:

    // modifies global<Diem::PreburnQueue<#0>>($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t35, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t35);
    }

    // assume Identical($t39, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t35))) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79
    assume {:print "$at(10,35026,35105)"} true;
    assume ($t39 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t35)));

    // assume exists<Diem::PreburnQueue<#0>>($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t35);

    // assume Vector::eq_push_back<Diem::PreburnWithMetadata<#0>>($t39, $t36, $t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79
    assume $1_Vector_eq_push_back'$1_Diem_PreburnWithMetadata'#0''($t39, $t36, $t34);

    // opaque end: Diem::add_preburn_to_queue<#0>($t0, $t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    assume {:print "$at(10,32128,32283)"} true;
    goto L10;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    assume {:print "$at(10,32321,32342)"} true;
L9:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    // >> opaque call: Diem::destroy_zero<#0>($t12)

    // opaque begin: Diem::destroy_zero<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21

    // assume Identical($t40, Gt(select Diem::Diem.value($t23), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    assume ($t40 == ($value#$1_Diem_Diem'#0'($t23) > 0));

    // if ($t40) goto L21 else goto L20 at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    if ($t40) { goto L21; } else { goto L20; }

    // label L21 at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
L21:

    // assume And(Gt(select Diem::Diem.value($t23), 0), Eq(7, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    assume (($value#$1_Diem_Diem'#0'($t23) > 0) && $IsEqual'u8'(7, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    assume {:print "$at(10,32321,32342)"} true;
    assume {:print "$track_abort(13,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    goto L13;

    // label L20 at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
L20:

    // opaque end: Diem::destroy_zero<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
    assume {:print "$at(10,31759,32367)"} true;
L10:

    // goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
    goto L11;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
L6:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
L11:

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:675:5+1
    assume {:print "$at(10,32372,32373)"} true;
L12:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:675:5+1
    return;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:675:5+1
L13:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:675:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::upgrade_preburn [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:653:5+1100
procedure {:timeLimit 40} $1_Diem_upgrade_preburn$verify(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: $1_Diem_Diem'#0';
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: $1_Diem_Preburn'#0';
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: bool;
    var $t20: bool;
    var $t21: bool;
    var $t22: $1_Diem_Preburn'#0';
    var $t23: $1_Diem_Diem'#0';
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: $1_Diem_Preburn'#0';
    var $t33: Vec (int);
    var $t34: $1_Diem_PreburnWithMetadata'#0';
    var $t35: int;
    var $t36: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t37: int;
    var $t38: bool;
    var $t39: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t40: bool;
    var $t0: int;
    var $1_Diem_Preburn'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $1_Roles_RoleId_$memory#308: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#309: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#310: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#311: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#312: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#313: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:5+1100
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume {:print "$at(10,31273,32373)"} true;
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:5+1100
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:5+1100
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:5+1100
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:5+1100
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:5+1100
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:5+1100
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:5+1100
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:677:9+52
    assume {:print "$at(10,32409,32461)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:685:9+52
    assume {:print "$at(10,32772,32824)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, And(exists<Diem::Preburn<#0>>($t7), Not(exists<Diem::PreburnQueue<#0>>($t7)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:686:9+103
    assume {:print "$at(10,32833,32936)"} true;
    assume ($t8 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t7) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t7)));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:694:9+52
    assume {:print "$at(10,33296,33348)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, And(exists<Diem::Preburn<#0>>($t11), Not(exists<Diem::PreburnQueue<#0>>($t11)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:695:9+103
    assume {:print "$at(10,33357,33460)"} true;
    assume ($t12 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t11) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t11)));

    // assume Identical($t13, global<Diem::Preburn<#0>>($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:696:9+54
    assume {:print "$at(10,33469,33523)"} true;
    assume ($t13 == $ResourceValue($1_Diem_Preburn'#0'_$memory, $t11));

    // assume CanModify<Diem::Preburn<#0>>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:678:9+49
    assume {:print "$at(10,32470,32519)"} true;
    assume $1_Diem_Preburn'#0'_$modifies[$t6];

    // assume CanModify<Diem::PreburnQueue<#0>>($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:679:9+54
    assume {:print "$at(10,32528,32582)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t6];

    // @308 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:679:9+54
    $1_Roles_RoleId_$memory#308 := $1_Roles_RoleId_$memory;

    // @311 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:679:9+54
    $1_Diem_BurnCapability'#0'_$memory#311 := $1_Diem_BurnCapability'#0'_$memory;

    // @309 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:679:9+54
    $1_Diem_CurrencyInfo'#0'_$memory#309 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @310 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:679:9+54
    $1_Diem_MintCapability'#0'_$memory#310 := $1_Diem_MintCapability'#0'_$memory;

    // @313 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:679:9+54
    $1_Diem_Preburn'#0'_$memory#313 := $1_Diem_Preburn'#0'_$memory;

    // @312 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:679:9+54
    $1_Diem_PreburnQueue'#0'_$memory#312 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:653:5+1
    assume {:print "$at(10,31273,31274)"} true;
    assume {:print "$track_local(13,38,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    // >> opaque call: Roles::assert_designated_dealer($t0)
    assume {:print "$at(10,31373,31413)"} true;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    assume {:print "$at(10,31373,31413)"} true;

    // assume Identical($t15, Or(Not(exists<Roles::RoleId>($t14)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    assume ($t15 == (!$ResourceExists($1_Roles_RoleId_$memory, $t14) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 2)));

    // if ($t15) goto L15 else goto L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    if ($t15) { goto L15; } else { goto L14; }

    // label L15 at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
L15:

    // assume Or(And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 2), Eq(3, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'u8'(5, $t16)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 2) && $IsEqual'u8'(3, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    assume {:print "$at(10,31373,31413)"} true;
    assume {:print "$track_abort(13,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
    goto L13;

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40
L14:

    // opaque end: Roles::assert_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:655:9+40

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:656:22+27
    // >> opaque call: $t6 := Signer::address_of($t0)
    assume {:print "$at(10,31436,31463)"} true;

    // $t17 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:22+27

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:22+27
    assume $IsValid'address'($t17);

    // assume Eq<address>($t17, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:22+27
    assume $IsEqual'address'($t17, $1_Signer_spec_address_of($t0));

    // $t17 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:22+27

    // trace_local[sender]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:656:13+6
    assume {:print "$track_local(13,38,3):", $t17} $t17 == $t17;

    // $t18 := exists<Diem::Preburn<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:657:30+6
    assume {:print "$at(10,31494,31500)"} true;
    $t18 := $ResourceExists($1_Diem_Preburn'#0'_$memory, $t17);

    // trace_local[preburn_exists]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:657:13+14
    assume {:print "$track_local(13,38,1):", $t18} $t18 == $t18;

    // $t19 := exists<Diem::PreburnQueue<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:658:36+6
    assume {:print "$at(10,31564,31570)"} true;
    $t19 := $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t17);

    // trace_local[preburn_queue_exists]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:658:13+20
    assume {:print "$track_local(13,38,2):", $t19} $t19 == $t19;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    assume {:print "$at(10,31763,31802)"} true;
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:32+20
L0:

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:31+1
    call $t20 := $Not($t19);

    // $t4 := $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    $t4 := $t20;

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    assume {:print "$track_local(13,38,4):", $t20} $t20 == $t20;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
L2:

    // $t21 := false at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    $t21 := false;
    assume $IsValid'bool'($t21);

    // $t4 := $t21 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    $t4 := $t21;

    // trace_local[tmp#$4]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
    assume {:print "$track_local(13,38,4):", $t21} $t21 == $t21;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:13+39
L3:

    // if ($t4) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
    if ($t4) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:662:68+6
    assume {:print "$at(10,31873,31879)"} true;
L4:

    // assert CanModify<Diem::Preburn<#0>>($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:662:39+9
    assert {:msg "assert_failed(10,31844,31853): caller does not have permission to modify `Diem::Preburn<#0>` at given address"}
      $1_Diem_Preburn'#0'_$modifies[$t17];

    // $t22 := move_from<Diem::Preburn<#0>>($t17) on_abort goto L13 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:662:39+9
    if (!$ResourceExists($1_Diem_Preburn'#0'_$memory, $t17)) {
        call $ExecFailureAbort();
    } else {
        $t22 := $ResourceValue($1_Diem_Preburn'#0'_$memory, $t17);
        $1_Diem_Preburn'#0'_$memory := $ResourceRemove($1_Diem_Preburn'#0'_$memory, $t17);
    }
    if ($abort_flag) {
        assume {:print "$at(10,31844,31853)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(13,38):", $t16} $t16 == $t16;
        goto L13;
    }

    // $t23 := unpack Diem::Preburn<#0>($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:662:17+19
    $t23 := $to_burn#$1_Diem_Preburn'#0'($t22);

    // trace_local[to_burn]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:662:27+7
    assume {:print "$track_local(13,38,5):", $t23} $t23 == $t23;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    // >> opaque call: Diem::publish_preburn_queue<#0>($t0)
    assume {:print "$at(10,31894,31934)"} true;

    // assume Identical($t24, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:588:9+52
    assume {:print "$at(10,27821,27873)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t0));

    // assume Identical($t25, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t0));

    // assume Identical($t26, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:605:9+52
    assume {:print "$at(10,28691,28743)"} true;
    assume ($t26 == $1_Signer_spec_address_of($t0));

    // assume Identical($t27, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:555:9+44
    assume {:print "$at(26,24849,24893)"} true;
    assume ($t27 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Diem::PreburnQueue<#0>>($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume {:print "$at(10,31894,31934)"} true;
    assert {:msg "assert_failed(10,31894,31934): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t24];

    // opaque begin: Diem::publish_preburn_queue<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40

    // assume Identical($t28, Or(Or(Or(Or(exists<Diem::PreburnQueue<#0>>($t24), exists<Diem::Preburn<#0>>($t24)), Not(exists<Roles::RoleId>($t25))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 2)), Not(Diem::spec_is_currency<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume ($t28 == (((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t24) || $ResourceExists($1_Diem_Preburn'#0'_$memory, $t24)) || !$ResourceExists($1_Roles_RoleId_$memory, $t25)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // if ($t28) goto L17 else goto L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    if ($t28) { goto L17; } else { goto L16; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
L17:

    // assume Or(Or(Or(Or(And(exists<Diem::PreburnQueue<#0>>($t24), Eq(6, $t16)), And(exists<Diem::Preburn<#0>>($t24), Eq(1, $t16))), And(Not(exists<Roles::RoleId>($t25)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 2), Eq(3, $t16))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume ((((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t24) && $IsEqual'u8'(6, $t16)) || ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t24) && $IsEqual'u8'(1, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t25) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 2) && $IsEqual'u8'(3, $t16))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume {:print "$at(10,31894,31934)"} true;
    assume {:print "$track_abort(13,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    goto L13;

    // label L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
L16:

    // modifies global<Diem::PreburnQueue<#0>>($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t24, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t24);
    }

    // assume exists<Diem::PreburnQueue<#0>>($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t26);

    // assume Not(exists<Diem::Preburn<#0>>($t26)) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume !$ResourceExists($1_Diem_Preburn'#0'_$memory, $t26);

    // assume Eq<u64>(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t26))), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40
    assume $IsEqual'u64'($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t26))), 0);

    // opaque end: Diem::publish_preburn_queue<#0>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:663:13+40

    // $t29 := get_field<Diem::Diem<#0>>.value($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:666:17+13
    assume {:print "$at(10,32090,32103)"} true;
    $t29 := $value#$1_Diem_Diem'#0'($t23);

    // $t30 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:666:33+1
    $t30 := 0;
    assume $IsValid'u64'($t30);

    // $t31 := >($t29, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:666:31+1
    call $t31 := $Gt($t29, $t30);

    // if ($t31) goto L7 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:666:13+270
    if ($t31) { goto L7; } else { goto L8; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:666:13+270
L8:

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:666:13+270
    goto L9;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:667:38+7
    assume {:print "$at(10,32149,32156)"} true;
L7:

    // $t32 := pack Diem::Preburn<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:668:30+19
    assume {:print "$at(10,32209,32228)"} true;
    $t32 := $1_Diem_Preburn'#0'($t23);

    // $t33 := [] at /home/ying/diem/language/diem-framework/modules/Diem.move:669:31+3
    assume {:print "$at(10,32260,32263)"} true;
    $t33 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t33);

    // $t34 := pack Diem::PreburnWithMetadata<#0>($t32, $t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:47+124
    assume {:print "$at(10,32158,32282)"} true;
    $t34 := $1_Diem_PreburnWithMetadata'#0'($t32, $t33);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    // >> opaque call: Diem::add_preburn_to_queue<#0>($t0, $t18)

    // assume Identical($t35, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:722:9+52
    assume {:print "$at(10,34887,34939)"} true;
    assume ($t35 == $1_Signer_spec_address_of($t0));

    // assume Identical($t36, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t35))) at /home/ying/diem/language/diem-framework/modules/Diem.move:723:9+69
    assume {:print "$at(10,34948,35017)"} true;
    assume ($t36 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t35)));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:734:9+52
    assume {:print "$at(10,35589,35641)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Diem::PreburnQueue<#0>>($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    assume {:print "$at(10,32128,32283)"} true;
    assert {:msg "assert_failed(10,32128,32283): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t35];

    // opaque begin: Diem::add_preburn_to_queue<#0>($t0, $t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155

    // assume Identical($t38, Or(Or(Not(exists<Diem::PreburnQueue<#0>>($t35)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t34))), 0)), And(exists<Diem::PreburnQueue<#0>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t37))), 256)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    assume ($t38 == ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t35) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t34))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t37))) >= 256))));

    // if ($t38) goto L19 else goto L18 at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    if ($t38) { goto L19; } else { goto L18; }

    // label L19 at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
L19:

    // assume Or(Or(And(Not(exists<Diem::PreburnQueue<#0>>($t35)), Eq(1, $t16)), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t34))), 0), Eq(7, $t16))), And(And(exists<Diem::PreburnQueue<#0>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t37))), 256)), Eq(8, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    assume (((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t35) && $IsEqual'u8'(1, $t16)) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t34))), 0) && $IsEqual'u8'(7, $t16))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t37))) >= 256)) && $IsEqual'u8'(8, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    assume {:print "$at(10,32128,32283)"} true;
    assume {:print "$track_abort(13,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    goto L13;

    // label L18 at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
L18:

    // modifies global<Diem::PreburnQueue<#0>>($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t35, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t35);
    }

    // assume Identical($t39, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t35))) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79
    assume {:print "$at(10,35026,35105)"} true;
    assume ($t39 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t35)));

    // assume exists<Diem::PreburnQueue<#0>>($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t35);

    // assume Vector::eq_push_back<Diem::PreburnWithMetadata<#0>>($t39, $t36, $t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79
    assume $1_Vector_eq_push_back'$1_Diem_PreburnWithMetadata'#0''($t39, $t36, $t34);

    // opaque end: Diem::add_preburn_to_queue<#0>($t0, $t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:724:9+79

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:667:17+155
    assume {:print "$at(10,32128,32283)"} true;
    goto L10;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    assume {:print "$at(10,32321,32342)"} true;
L9:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    // >> opaque call: Diem::destroy_zero<#0>($t12)

    // opaque begin: Diem::destroy_zero<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21

    // assume Identical($t40, Gt(select Diem::Diem.value($t23), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    assume ($t40 == ($value#$1_Diem_Diem'#0'($t23) > 0));

    // if ($t40) goto L21 else goto L20 at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    if ($t40) { goto L21; } else { goto L20; }

    // label L21 at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
L21:

    // assume And(Gt(select Diem::Diem.value($t23), 0), Eq(7, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    assume (($value#$1_Diem_Diem'#0'($t23) > 0) && $IsEqual'u8'(7, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    assume {:print "$at(10,32321,32342)"} true;
    assume {:print "$track_abort(13,38):", $t16} $t16 == $t16;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
    goto L13;

    // label L20 at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21
L20:

    // opaque end: Diem::destroy_zero<#0>($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:672:17+21

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
    assume {:print "$at(10,31759,32367)"} true;
L10:

    // goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
    goto L11;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
L6:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:661:9+608
L11:

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:675:5+1
    assume {:print "$at(10,32372,32373)"} true;
L12:

    // assert Not(And($t8, Not(exists[@308]<Roles::RoleId>($t9)))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !($t8 && !$ResourceExists($1_Roles_RoleId_$memory#308, $t9));

    // assert Not(And($t8, Neq<u64>(select Roles::RoleId.role_id(global[@308]<Roles::RoleId>($t9)), 2))) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !($t8 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#308, $t9)), 2));

    // assert Not(And($t8, Not(Diem::spec_is_currency[@309]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1551:9+67
    assume {:print "$at(10,73620,73687)"} true;
    assert {:msg "assert_failed(10,73620,73687): function does not abort under this condition"}
      !($t8 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309));

    // assert Not(Not(exists[@308]<Roles::RoleId>($t10))) at /home/ying/diem/language/diem-framework/modules/Roles.move:556:9+59
    assume {:print "$at(26,24902,24961)"} true;
    assert {:msg "assert_failed(26,24902,24961): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#308, $t10);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@308]<Roles::RoleId>($t10)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:557:9+95
    assume {:print "$at(26,24970,25065)"} true;
    assert {:msg "assert_failed(26,24970,25065): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#308, $t10)), 2);

    // assert Implies($t12, And(Not(exists<Diem::Preburn<#0>>($t11)), exists<Diem::PreburnQueue<#0>>($t11))) at /home/ying/diem/language/diem-framework/modules/Diem.move:697:9+121
    assume {:print "$at(10,33532,33653)"} true;
    assert {:msg "assert_failed(10,33532,33653): post-condition does not hold"}
      ($t12 ==> (!$ResourceExists($1_Diem_Preburn'#0'_$memory, $t11) && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t11)));

    // assert Implies(And($t12, Gt(select Diem::Diem.value(select Diem::Preburn.to_burn($t13)), 0)), Eq<vector<Diem::PreburnWithMetadata<#0>>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t11)), SingleVec<Diem::PreburnWithMetadata<#0>>(pack Diem::PreburnWithMetadata<#0>($t13, [])))) at /home/ying/diem/language/diem-framework/modules/Diem.move:699:9+186
    assume {:print "$at(10,33662,33848)"} true;
    assert {:msg "assert_failed(10,33662,33848): post-condition does not hold"}
      (($t12 && ($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t13)) > 0)) ==> $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t11)), MakeVec1($1_Diem_PreburnWithMetadata'#0'($t13, $EmptyVec'u8'()))));

    // assert Implies(And($t12, Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn($t13)), 0)), Eq<vector<Diem::PreburnWithMetadata<#0>>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t11)), EmptyVec<Diem::PreburnWithMetadata<#0>>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:702:9+125
    assume {:print "$at(10,33857,33982)"} true;
    assert {:msg "assert_failed(10,33857,33982): post-condition does not hold"}
      (($t12 && $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t13)), 0)) ==> $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t11)), $EmptyVec'$1_Diem_PreburnWithMetadata'#0''()));

    // assert Implies(Diem::spec_is_currency[@309]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@309]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#309))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@310]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#310, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@310]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#310, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@309]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@309]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#309))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@311]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#311, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@311]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#311, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@309]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@309]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#309))));

    // assert Implies(Diem::spec_is_currency[@309]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@309]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#309))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@312]<Diem::PreburnQueue<#0>>(addr), exists[@313]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#312, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#313, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@312]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#312, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@309]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@309]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#309))));

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    return;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:675:5+1
    assume {:print "$at(10,32372,32373)"} true;
L13:

    // assert Or(Or(Or(Or(And($t8, Not(exists[@308]<Roles::RoleId>($t9))), And($t8, Neq<u64>(select Roles::RoleId.role_id(global[@308]<Roles::RoleId>($t9)), 2))), And($t8, Not(Diem::spec_is_currency[@309]<#0>()))), Not(exists[@308]<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global[@308]<Roles::RoleId>($t10)), 2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:676:5+309
    assume {:print "$at(10,32378,32687)"} true;
    assert {:msg "assert_failed(10,32378,32687): abort not covered by any of the `aborts_if` clauses"}
      ((((($t8 && !$ResourceExists($1_Roles_RoleId_$memory#308, $t9)) || ($t8 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#308, $t9)), 2))) || ($t8 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309))) || !$ResourceExists($1_Roles_RoleId_$memory#308, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#308, $t10)), 2));

    // assert Or(Or(Or(Or(And(And($t8, Not(exists[@308]<Roles::RoleId>($t9))), Eq(5, $t16)), And(And($t8, Neq<u64>(select Roles::RoleId.role_id(global[@308]<Roles::RoleId>($t9)), 2)), Eq(3, $t16))), And(And($t8, Not(Diem::spec_is_currency[@309]<#0>())), Eq(5, $t16))), And(Not(exists[@308]<Roles::RoleId>($t10)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global[@308]<Roles::RoleId>($t10)), 2), Eq(3, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:676:5+309
    assert {:msg "assert_failed(10,32378,32687): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((($t8 && !$ResourceExists($1_Roles_RoleId_$memory#308, $t9)) && $IsEqual'u8'(5, $t16)) || (($t8 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#308, $t9)), 2)) && $IsEqual'u8'(3, $t16))) || (($t8 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#309)) && $IsEqual'u8'(5, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory#308, $t10) && $IsEqual'u8'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#308, $t10)), 2) && $IsEqual'u8'(3, $t16)));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:676:5+309
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::withdraw [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:5+324
procedure {:timeLimit 40} $1_Diem_withdraw$verify(_$t0: $Mutation ($1_Diem_Diem'#0'), _$t1: int) returns ($ret0: $1_Diem_Diem'#0', $ret1: $Mutation ($1_Diem_Diem'#0'))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: $1_Diem_Diem'#0';
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $Mutation (int);
    var $t13: $1_Diem_Diem'#0';
    var $t0: $Mutation ($1_Diem_Diem'#0');
    var $t1: int;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#120: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#121: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#122: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#123: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#124: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t12));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1150:17+6
    assume {:print "$at(10,56069,56075)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1150:17+6
    assume $IsValid'u64'($t1);

    // @122 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:5+1
    assume {:print "$at(10,55585,55586)"} true;
    $1_Diem_BurnCapability'#0'_$memory#122 := $1_Diem_BurnCapability'#0'_$memory;

    // @120 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#120 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @121 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:5+1
    $1_Diem_MintCapability'#0'_$memory#121 := $1_Diem_MintCapability'#0'_$memory;

    // @124 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:5+1
    $1_Diem_Preburn'#0'_$memory#124 := $1_Diem_Preburn'#0'_$memory;

    // @123 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:5+1
    $1_Diem_PreburnQueue'#0'_$memory#123 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t4 := read_ref($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:5+1
    $t4 := $Dereference($t0);

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:5+1
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,40,0):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // trace_local[amount]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1140:5+1
    assume {:print "$track_local(13,40,1):", $t1} $t1 == $t1;

    // $t5 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:16+10
    assume {:print "$at(10,55756,55766)"} true;
    $t5 := $value#$1_Diem_Diem'#0'($Dereference($t0));

    // $t6 := >=($t5, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:27+2
    call $t6 := $Ge($t5, $t1);

    // $t7 := 10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:61+26
    $t7 := 10;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:38+50
    // >> opaque call: $t7 := Errors::limit_exceeded($t6)

    // $t8 := opaque begin: Errors::limit_exceeded($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:38+50

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:38+50
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:38+50
    assume $IsEqual'u64'($t8, 8);

    // $t8 := opaque end: Errors::limit_exceeded($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:38+50

    // trace_local[tmp#$3]($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:9+80
    assume {:print "$track_local(13,40,3):", $t8} $t8 == $t8;

    // trace_local[tmp#$2]($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:9+80
    assume {:print "$track_local(13,40,2):", $t6} $t6 == $t6;

    // if ($t6) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:9+80
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:9+80
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:9+80

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:9+80
    assume {:print "$at(10,55749,55829)"} true;
    assume {:print "$track_abort(13,40):", $t8} $t8 == $t8;

    // $t9 := move($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:9+80
    $t9 := $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1142:9+80
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1143:22+4
    assume {:print "$at(10,55852,55856)"} true;
L0:

    // $t10 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1143:22+10
    $t10 := $value#$1_Diem_Diem'#0'($Dereference($t0));

    // $t11 := -($t10, $t1) on_abort goto L3 with $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1143:33+1
    call $t11 := $Sub($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(10,55863,55864)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(13,40):", $t9} $t9 == $t9;
        goto L3;
    }

    // $t12 := borrow_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1143:9+10
    $t12 := $ChildMutation($t0, 0, $value#$1_Diem_Diem'#0'($Dereference($t0)));

    // write_ref($t12, $t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1143:9+32
    $t12 := $UpdateMutation($t12, $t11);

    // write_back[Reference($t0).value]($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1143:9+32
    $t0 := $UpdateMutation($t0, $Update'$1_Diem_Diem'#0''_value($Dereference($t0), $Dereference($t12)));

    // $t13 := pack Diem::Diem<#0>($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1144:9+22
    assume {:print "$at(10,55881,55903)"} true;
    $t13 := $1_Diem_Diem'#0'($t1);

    // trace_return[0]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:1144:9+22
    assume {:print "$track_return(13,40,0):", $t13} $t13 == $t13;

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1144:9+22
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,40,0):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1145:5+1
    assume {:print "$at(10,55908,55909)"} true;
L2:

    // assert Not(Lt(select Diem::Diem.value($t4), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1155:9+58
    assume {:print "$at(10,56203,56261)"} true;
    assert {:msg "assert_failed(10,56203,56261): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($t4) < $t1);

    // assert Eq<u64>(select Diem::Diem.value($t0), Sub(select Diem::Diem.value($t4), $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1149:9+47
    assume {:print "$at(10,56005,56052)"} true;
    assert {:msg "assert_failed(10,56005,56052): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t0)), ($value#$1_Diem_Diem'#0'($t4) - $t1));

    // assert Eq<u64>(select Diem::Diem.value($t13), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1150:9+31
    assume {:print "$at(10,56061,56092)"} true;
    assert {:msg "assert_failed(10,56061,56092): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t13), $t1);

    // assert Implies(Diem::spec_is_currency[@120]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@120]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#120) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#120))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@121]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#121, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@121]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#121, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@120]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@120]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#120) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#120))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@122]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#122, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@122]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#122, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@120]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@120]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#120) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#120))));

    // assert Implies(Diem::spec_is_currency[@120]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@120]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#120) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#120))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@123]<Diem::PreburnQueue<#0>>(addr), exists[@124]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#123, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#124, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@123]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#123, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@120]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@120]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#120) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#120))));

    // return $t13 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t13;
    $ret1 := $t0;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1145:5+1
    assume {:print "$at(10,55908,55909)"} true;
L3:

    // assert Lt(select Diem::Diem.value($t4), $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1146:5+184
    assume {:print "$at(10,55914,56098)"} true;
    assert {:msg "assert_failed(10,55914,56098): abort not covered by any of the `aborts_if` clauses"}
      ($value#$1_Diem_Diem'#0'($t4) < $t1);

    // assert And(Lt(select Diem::Diem.value($t4), $t1), Eq(8, $t9)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1146:5+184
    assert {:msg "assert_failed(10,55914,56098): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (($value#$1_Diem_Diem'#0'($t4) < $t1) && $IsEqual'u8'(8, $t9));

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1146:5+184
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun Diem::withdraw_all [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:5+149
procedure {:timeLimit 40} $1_Diem_withdraw_all$verify(_$t0: $Mutation ($1_Diem_Diem'#0')) returns ($ret0: $1_Diem_Diem'#0', $ret1: $Mutation ($1_Diem_Diem'#0'))
{
    // declare local variables
    var $t1: int;
    var $t2: $1_Diem_Diem'#0';
    var $t3: int;
    var $t4: $1_Diem_Diem'#0';
    var $t5: $1_Diem_Diem'#0';
    var $t6: bool;
    var $t7: int;
    var $t0: $Mutation ($1_Diem_Diem'#0');
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'u64': int;
    var $1_Diem_CurrencyInfo'#0'_$memory#178: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#179: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#180: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#181: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#182: $Memory $1_Diem_Preburn'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1167:17+6
    assume {:print "$at(10,56641,56647)"} true;
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t0));

    // @180 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:5+1
    assume {:print "$at(10,56403,56404)"} true;
    $1_Diem_BurnCapability'#0'_$memory#180 := $1_Diem_BurnCapability'#0'_$memory;

    // @178 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#178 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @179 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:5+1
    $1_Diem_MintCapability'#0'_$memory#179 := $1_Diem_MintCapability'#0'_$memory;

    // @182 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:5+1
    $1_Diem_Preburn'#0'_$memory#182 := $1_Diem_Preburn'#0'_$memory;

    // @181 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:5+1
    $1_Diem_PreburnQueue'#0'_$memory#181 := $1_Diem_PreburnQueue'#0'_$memory;

    // $t2 := read_ref($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:5+1
    $t2 := $Dereference($t0);

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1160:5+1
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,41,0):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // $t3 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1161:19+10
    assume {:print "$at(10,56507,56517)"} true;
    $t3 := $value#$1_Diem_Diem'#0'($Dereference($t0));

    // trace_local[val]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1161:13+3
    assume {:print "$track_local(13,41,1):", $t3} $t3 == $t3;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    // >> opaque call: $t3 := Diem::withdraw<#0>($t0, $t2)
    assume {:print "$at(10,56527,56546)"} true;

    // $t4 := opaque begin: Diem::withdraw<#0>($t0, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19

    // $t5 := read_ref($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    $t5 := $Dereference($t0);

    // assume Identical($t6, Lt(select Diem::Diem.value($t0), $t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    assume ($t6 == ($value#$1_Diem_Diem'#0'($Dereference($t0)) < $t3));

    // if ($t6) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    if ($t6) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
L4:

    // assume And(Lt(select Diem::Diem.value($t0), $t3), Eq(8, $t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    assume (($value#$1_Diem_Diem'#0'($Dereference($t0)) < $t3) && $IsEqual'u8'(8, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    assume {:print "$at(10,56527,56546)"} true;
    assume {:print "$track_abort(13,41):", $t7} $t7 == $t7;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
L3:

    // havoc[mut]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t0 := $UpdateMutation($t0, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t0));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t0));

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    assume $IsValid'$1_Diem_Diem'#0''($t4);

    // assume Eq<u64>(select Diem::Diem.value($t0), Sub(select Diem::Diem.value($t5), $t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t0)), ($value#$1_Diem_Diem'#0'($t5) - $t3));

    // assume Eq<u64>(select Diem::Diem.value($t4), $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t4), $t3);

    // $t4 := opaque end: Diem::withdraw<#0>($t0, $t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19

    // trace_return[0]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    assume {:print "$track_return(13,41,0):", $t4} $t4 == $t4;

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1162:9+19
    $temp_0'$1_Diem_Diem'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,41,0):", $temp_0'$1_Diem_Diem'#0''} $temp_0'$1_Diem_Diem'#0'' == $temp_0'$1_Diem_Diem'#0'';

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1163:5+1
    assume {:print "$at(10,56551,56552)"} true;
L1:

    // assert Not(false) at /home/ying/diem/language/diem-framework/modules/Diem.move:1166:9+16
    assume {:print "$at(10,56608,56624)"} true;
    assert {:msg "assert_failed(10,56608,56624): function does not abort under this condition"}
      !false;

    // assert Eq<u64>(select Diem::Diem.value($t4), select Diem::Diem.value($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1167:9+40
    assume {:print "$at(10,56633,56673)"} true;
    assert {:msg "assert_failed(10,56633,56673): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($t4), $value#$1_Diem_Diem'#0'($t2));

    // assert Eq<u64>(select Diem::Diem.value($t0), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1168:9+24
    assume {:print "$at(10,56682,56706)"} true;
    assert {:msg "assert_failed(10,56682,56706): post-condition does not hold"}
      $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t0)), 0);

    // assert Implies(Diem::spec_is_currency[@178]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@178]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#178) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#178))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@179]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#179, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@179]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#179, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@178]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@178]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#178) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#178))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@180]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#180, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@180]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#180, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@178]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@178]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#178) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#178))));

    // assert Implies(Diem::spec_is_currency[@178]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@178]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#178) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#178))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@181]<Diem::PreburnQueue<#0>>(addr), exists[@182]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#181, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#182, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@181]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#181, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@178]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@178]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#178) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#178))));

    // return $t4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t4;
    $ret1 := $t0;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1163:5+1
    assume {:print "$at(10,56551,56552)"} true;
L2:

    // assert false at /home/ying/diem/language/diem-framework/modules/Diem.move:1164:5+155
    assume {:print "$at(10,56557,56712)"} true;
    assert {:msg "assert_failed(10,56557,56712): abort not covered by any of the `aborts_if` clauses"}
      false;

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1164:5+155
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Diem::zero<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+134
procedure {:inline 1} $1_Diem_zero'$1_XUS_XUS'() returns ($ret0: $1_Diem_Diem'$1_XUS_XUS')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,54275,54305)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume {:print "$at(10,54275,54305)"} true;
    assume {:print "$track_abort(13,43):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:33+1
    assume {:print "$at(10,54339,54340)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    $t3 := $1_Diem_Diem'$1_XUS_XUS'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    assume {:print "$track_return(13,43,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    assume {:print "$at(10,54347,54348)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::zero<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+134
procedure {:inline 1} $1_Diem_zero'$1_XDX_XDX'() returns ($ret0: $1_Diem_Diem'$1_XDX_XDX')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,54275,54305)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume {:print "$at(10,54275,54305)"} true;
    assume {:print "$track_abort(13,43):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:33+1
    assume {:print "$at(10,54339,54340)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    $t3 := $1_Diem_Diem'$1_XDX_XDX'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    assume {:print "$track_return(13,43,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    assume {:print "$at(10,54347,54348)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::zero<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+134
procedure {:inline 1} $1_Diem_zero'#0'() returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';

    // bytecode translation starts here
    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,54275,54305)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume {:print "$at(10,54275,54305)"} true;
    assume {:print "$track_abort(13,43):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:33+1
    assume {:print "$at(10,54339,54340)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    $t3 := $1_Diem_Diem'#0'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    assume {:print "$track_return(13,43,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    assume {:print "$at(10,54347,54348)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::zero [verification] at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+134
procedure {:timeLimit 40} $1_Diem_zero$verify() returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#168: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_MintCapability'#0'_$memory#169: $Memory $1_Diem_MintCapability'#0';
    var $1_Diem_BurnCapability'#0'_$memory#170: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#171: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#172: $Memory $1_Diem_Preburn'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+134
    assume {:print "$at(10,54214,54348)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // @170 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+1
    $1_Diem_BurnCapability'#0'_$memory#170 := $1_Diem_BurnCapability'#0'_$memory;

    // @168 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+1
    $1_Diem_CurrencyInfo'#0'_$memory#168 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @169 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+1
    $1_Diem_MintCapability'#0'_$memory#169 := $1_Diem_MintCapability'#0'_$memory;

    // @172 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+1
    $1_Diem_Preburn'#0'_$memory#172 := $1_Diem_Preburn'#0'_$memory;

    // @171 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1109:5+1
    $1_Diem_PreburnQueue'#0'_$memory#171 := $1_Diem_PreburnQueue'#0'_$memory;

    // nop at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(10,54275,54305)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'u8'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    assume {:print "$at(10,54275,54305)"} true;
    assume {:print "$track_abort(13,43):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1110:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:33+1
    assume {:print "$at(10,54339,54340)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    $t3 := $1_Diem_Diem'#0'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1111:9+27
    assume {:print "$track_return(13,43,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    assume {:print "$at(10,54347,54348)"} true;
L1:

    // assert Implies(Diem::spec_is_currency[@168]<#0>(), Le(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@168]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1611:9+152
    assume {:print "$at(10,76641,76793)"} true;
    assert {:msg "assert_failed(10,76641,76793): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#168) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#168))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@169]<Diem::MintCapability<#0>>(addr)), Not(exists<Diem::MintCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1622:9+147
    assume {:print "$at(10,77186,77333)"} true;
    assert {:msg "assert_failed(10,77186,77333): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_MintCapability'#0'_$memory#169, addr) ==> !$ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@169]<Diem::MintCapability<#0>>(addr), exists<Diem::MintCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1616:9+145
    assume {:print "$at(10,76919,77064)"} true;
    assert {:msg "assert_failed(10,76919,77064): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory#169, addr) ==> $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@168]<#0>(), Ge(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@168]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1631:9+152
    assume {:print "$at(10,77479,77631)"} true;
    assert {:msg "assert_failed(10,77479,77631): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#168) ==> ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#168))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(exists[@170]<Diem::BurnCapability<#0>>(addr)), Not(exists<Diem::BurnCapability<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1642:9+147
    assume {:print "$at(10,78024,78171)"} true;
    assert {:msg "assert_failed(10,78024,78171): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#170, addr) ==> !$ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@170]<Diem::BurnCapability<#0>>(addr), exists<Diem::BurnCapability<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1636:9+145
    assume {:print "$at(10,77757,77902)"} true;
    assert {:msg "assert_failed(10,77757,77902): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory#170, addr) ==> $ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@168]<#0>(), Ge(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@168]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1689:9+156
    assume {:print "$at(10,80719,80875)"} true;
    assert {:msg "assert_failed(10,80719,80875): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#168) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) >= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#168))));

    // assert Implies(Diem::spec_is_currency[@168]<#0>(), Le(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@168]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1684:9+156
    assume {:print "$at(10,80431,80587)"} true;
    assert {:msg "assert_failed(10,80431,80587): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#168) ==> ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) <= $preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#168))));

    // assert forall addr: TypeDomain<address>(): Implies(Not(Or(exists[@171]<Diem::PreburnQueue<#0>>(addr), exists[@172]<Diem::Preburn<#0>>(addr))), Not(exists<Diem::PreburnQueue<#0>>(addr))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1703:9+180
    assume {:print "$at(10,81536,81716)"} true;
    assert {:msg "assert_failed(10,81536,81716): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((!($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#171, addr) || $ResourceExists($1_Diem_Preburn'#0'_$memory#172, addr)) ==> !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert forall addr: TypeDomain<address>(): Implies(exists[@171]<Diem::PreburnQueue<#0>>(addr), exists<Diem::PreburnQueue<#0>>(addr)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1694:9+141
    assume {:print "$at(10,81019,81160)"} true;
    assert {:msg "assert_failed(10,81019,81160): post-condition does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#171, addr) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr))));

    // assert Implies(Diem::spec_is_currency[@168]<#0>(), Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info[@168]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    assume {:print "$at(10,86110,86296)"} true;
    assert {:msg "assert_failed(10,86110,86296): post-condition does not hold"}
      ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#168) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#168))));

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1786:9+186
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    assume {:print "$at(10,54347,54348)"} true;
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1112:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// struct AccountLimits::AccountLimitMutationCapability at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:13:5+51
type {:datatype} $1_AccountLimits_AccountLimitMutationCapability;
function {:constructor} $1_AccountLimits_AccountLimitMutationCapability($dummy_field: bool): $1_AccountLimits_AccountLimitMutationCapability;
function {:inline} $Update'$1_AccountLimits_AccountLimitMutationCapability'_dummy_field(s: $1_AccountLimits_AccountLimitMutationCapability, x: bool): $1_AccountLimits_AccountLimitMutationCapability {
    $1_AccountLimits_AccountLimitMutationCapability(x)
}
function $IsValid'$1_AccountLimits_AccountLimitMutationCapability'(s: $1_AccountLimits_AccountLimitMutationCapability): bool {
    $IsValid'bool'($dummy_field#$1_AccountLimits_AccountLimitMutationCapability(s))
}
function {:inline} $IsEqual'$1_AccountLimits_AccountLimitMutationCapability'(s1: $1_AccountLimits_AccountLimitMutationCapability, s2: $1_AccountLimits_AccountLimitMutationCapability): bool {
    s1 == s2
}

// struct AccountLimits::LimitsDefinition<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:20:5+398
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s1: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', s2: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';

// struct AccountLimits::LimitsDefinition<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:20:5+398
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s1: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', s2: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';

// fun AccountLimits::publish_unrestricted_limits<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:5+522
procedure {:inline 1} $1_AccountLimits_publish_unrestricted_limits'$1_XUS_XUS'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[publish_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:5+1
    assume {:print "$at(5,7840,7841)"} true;
    assume {:print "$track_local(14,8,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35
    // >> opaque call: $t8 := Signer::address_of($t0)
    assume {:print "$at(5,7988,8023)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35

    // $t9 := exists<AccountLimits::LimitsDefinition<#0>>($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:14+6
    $t9 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t8);

    // $t10 := !($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:13+1
    call $t10 := $Not($t9);

    // $t11 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:39+18
    assume {:print "$at(5,8064,8082)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45
    // >> opaque call: $t12 := Errors::already_published($t11)

    // $t12 := opaque begin: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, 6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45
    assume $IsEqual'u64'($t12, 6);

    // $t12 := opaque end: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45

    // trace_local[tmp#$2]($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    assume {:print "$at(5,7932,8093)"} true;
    assume {:print "$track_local(14,8,2):", $t12} $t12 == $t12;

    // trace_local[tmp#$1]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    assume {:print "$track_local(14,8,1):", $t10} $t10 == $t10;

    // if ($t10) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    if ($t10) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    assume {:print "$at(5,7932,8093)"} true;
    assume {:print "$track_abort(14,8):", $t12} $t12 == $t12;

    // $t13 := move($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    $t13 := $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:192:13+15
    assume {:print "$at(5,8124,8139)"} true;
L0:

    // trace_local[tmp#$7]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:192:13+15
    assume {:print "$track_local(14,8,7):", $t0} $t0 == $t0;

    // $t14 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:194:29+7
    assume {:print "$at(5,8210,8217)"} true;
    $t14 := 18446744073709551615;
    assume $IsValid'u64'($t14);

    // $t15 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:195:30+7
    assume {:print "$at(5,8248,8255)"} true;
    $t15 := 18446744073709551615;
    assume $IsValid'u64'($t15);

    // $t16 := 86400000000 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:197:30+7
    assume {:print "$at(5,8324,8331)"} true;
    $t16 := 86400000000;
    assume $IsValid'u64'($t16);

    // $t17 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:196:30+7
    assume {:print "$at(5,8286,8293)"} true;
    $t17 := 18446744073709551615;
    assume $IsValid'u64'($t17);

    // $t18 := pack AccountLimits::LimitsDefinition<#0>($t14, $t15, $t16, $t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:193:13+193
    assume {:print "$at(5,8153,8346)"} true;
    $t18 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t14, $t15, $t16, $t17);

    // move_to<AccountLimits::LimitsDefinition<#0>>($t18, $t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:191:9+7
    assume {:print "$at(5,8103,8110)"} true;
    if ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t0, $t18);
    }
    if ($abort_flag) {
        assume {:print "$at(5,8103,8110)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(14,8):", $t13} $t13 == $t13;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
    assume {:print "$at(5,8361,8362)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
L3:

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun AccountLimits::publish_unrestricted_limits<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:5+522
procedure {:inline 1} $1_AccountLimits_publish_unrestricted_limits'$1_XDX_XDX'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[publish_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:186:5+1
    assume {:print "$at(5,7840,7841)"} true;
    assume {:print "$track_local(14,8,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35
    // >> opaque call: $t8 := Signer::address_of($t0)
    assume {:print "$at(5,7988,8023)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:49+35

    // $t9 := exists<AccountLimits::LimitsDefinition<#0>>($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:14+6
    $t9 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t8);

    // $t10 := !($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:188:13+1
    call $t10 := $Not($t9);

    // $t11 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:39+18
    assume {:print "$at(5,8064,8082)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45
    // >> opaque call: $t12 := Errors::already_published($t11)

    // $t12 := opaque begin: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, 6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45
    assume $IsEqual'u64'($t12, 6);

    // $t12 := opaque end: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:189:13+45

    // trace_local[tmp#$2]($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    assume {:print "$at(5,7932,8093)"} true;
    assume {:print "$track_local(14,8,2):", $t12} $t12 == $t12;

    // trace_local[tmp#$1]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    assume {:print "$track_local(14,8,1):", $t10} $t10 == $t10;

    // if ($t10) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    if ($t10) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    assume {:print "$at(5,7932,8093)"} true;
    assume {:print "$track_abort(14,8):", $t12} $t12 == $t12;

    // $t13 := move($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    $t13 := $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:187:9+161
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:192:13+15
    assume {:print "$at(5,8124,8139)"} true;
L0:

    // trace_local[tmp#$7]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:192:13+15
    assume {:print "$track_local(14,8,7):", $t0} $t0 == $t0;

    // $t14 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:194:29+7
    assume {:print "$at(5,8210,8217)"} true;
    $t14 := 18446744073709551615;
    assume $IsValid'u64'($t14);

    // $t15 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:195:30+7
    assume {:print "$at(5,8248,8255)"} true;
    $t15 := 18446744073709551615;
    assume $IsValid'u64'($t15);

    // $t16 := 86400000000 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:197:30+7
    assume {:print "$at(5,8324,8331)"} true;
    $t16 := 86400000000;
    assume $IsValid'u64'($t16);

    // $t17 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:196:30+7
    assume {:print "$at(5,8286,8293)"} true;
    $t17 := 18446744073709551615;
    assume $IsValid'u64'($t17);

    // $t18 := pack AccountLimits::LimitsDefinition<#0>($t14, $t15, $t16, $t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:193:13+193
    assume {:print "$at(5,8153,8346)"} true;
    $t18 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t14, $t15, $t16, $t17);

    // move_to<AccountLimits::LimitsDefinition<#0>>($t18, $t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:191:9+7
    assume {:print "$at(5,8103,8110)"} true;
    if ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t0, $t18);
    }
    if ($abort_flag) {
        assume {:print "$at(5,8103,8110)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(14,8):", $t13} $t13 == $t13;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
    assume {:print "$at(5,8361,8362)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
L3:

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:200:5+1
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// struct XUS::XUS at /home/ying/diem/language/diem-framework/modules/XUS.move:12:5+24
type {:datatype} $1_XUS_XUS;
function {:constructor} $1_XUS_XUS($dummy_field: bool): $1_XUS_XUS;
function {:inline} $Update'$1_XUS_XUS'_dummy_field(s: $1_XUS_XUS, x: bool): $1_XUS_XUS {
    $1_XUS_XUS(x)
}
function $IsValid'$1_XUS_XUS'(s: $1_XUS_XUS): bool {
    $IsValid'bool'($dummy_field#$1_XUS_XUS(s))
}
function {:inline} $IsEqual'$1_XUS_XUS'(s1: $1_XUS_XUS, s2: $1_XUS_XUS): bool {
    s1 == s2
}

// fun XUS::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/XUS.move:15:5+595
procedure {:inline 1} $1_XUS_initialize(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $1_DiemConfig_Configuration;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $1_FixedPoint32_FixedPoint32;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: Vec (int);
    var $t28: int;
    var $t29: int;
    var $t30: $1_DiemConfig_Configuration;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t1));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t4 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t5, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t5 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t6, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t1));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/XUS.move:15:5+1
    assume {:print "$at(38,399,400)"} true;
    assume {:print "$track_local(15,0,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/XUS.move:15:5+1
    assume {:print "$track_local(15,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(38,496,527)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31

    // assume Identical($t9, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
    assume ($t9 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t9) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
    if ($t9) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t10)) at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
    assume {:print "$at(38,496,527)"} true;
    assume {:print "$track_abort(15,0):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/XUS.move:19:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t1)
    assume {:print "$at(38,537,582)"} true;

    // assume Identical($t11, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    assume {:print "$at(38,537,582)"} true;

    // assume Identical($t12, Or(Or(Not(exists<Roles::RoleId>($t11)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1)), Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    assume ($t12 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t11) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t12) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    if ($t12) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
L6:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t11)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t1), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t11) && $IsEqual'u8'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    assume {:print "$at(38,537,582)"} true;
    assume {:print "$track_abort(15,0):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45
L5:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/XUS.move:20:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(38,592,627)"} true;

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    assume {:print "$at(38,592,627)"} true;

    // assume Identical($t14, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t13))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    assume ($t14 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t13)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t14) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    if ($t14) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
L8:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t10)), And(Not(exists<Roles::RoleId>($t13)), Eq(5, $t10))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 0), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t10)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t13) && $IsEqual'u8'(5, $t10))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 0) && $IsEqual'u8'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    assume {:print "$at(38,592,627)"} true;
    assume {:print "$track_abort(15,0):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35
L7:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/XUS.move:21:9+35

    // $t15 := 1 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:48+1
    assume {:print "$at(38,766,767)"} true;
    $t15 := 1;
    assume $IsValid'u64'($t15);

    // $t16 := 1 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:51+1
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // nop at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    // >> opaque call: $t4 := FixedPoint32::create_from_rational($t2, $t3)

    // assume Identical($t17, Shl($t15, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+39
    assume {:print "$at(42,8350,8389)"} true;
    assume ($t17 == $shl($t15, 64));

    // assume Identical($t18, Shl($t16, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:187:9+43
    assume {:print "$at(42,8398,8441)"} true;
    assume ($t18 == $shl($t16, 32));

    // assume Identical($t19, Div($t17, $t18)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:188:9+53
    assume {:print "$at(42,8450,8503)"} true;
    assume ($t19 == ($t17 div $t18));

    // assume Identical($t20, Shl($t15, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+39
    assume {:print "$at(42,8350,8389)"} true;
    assume ($t20 == $shl($t15, 64));

    // assume Identical($t21, Shl($t16, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:187:9+43
    assume {:print "$at(42,8398,8441)"} true;
    assume ($t21 == $shl($t16, 32));

    // assume Identical($t22, Div($t20, $t21)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:188:9+53
    assume {:print "$at(42,8450,8503)"} true;
    assume ($t22 == ($t20 div $t21));

    // $t23 := opaque begin: FixedPoint32::create_from_rational($t15, $t16) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    assume {:print "$at(38,731,771)"} true;

    // assume Identical($t24, Or(Or(Eq<num>($t21, 0), And(Eq<num>($t22, 0), Neq<num>($t20, 0))), Gt($t22, 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    assume ($t24 == (($IsEqual'num'($t21, 0) || ($IsEqual'num'($t22, 0) && !$IsEqual'num'($t20, 0))) || ($t22 > 18446744073709551615)));

    // if ($t24) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    if ($t24) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
L10:

    // assume Or(Or(And(Eq<num>($t21, 0), Eq(7, $t10)), And(And(Eq<num>($t22, 0), Neq<num>($t20, 0)), Eq(7, $t10))), And(Gt($t22, 18446744073709551615), Eq(8, $t10))) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    assume ((($IsEqual'num'($t21, 0) && $IsEqual'u8'(7, $t10)) || (($IsEqual'num'($t22, 0) && !$IsEqual'num'($t20, 0)) && $IsEqual'u8'(7, $t10))) || (($t22 > 18446744073709551615) && $IsEqual'u8'(8, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    assume {:print "$at(38,731,771)"} true;
    assume {:print "$track_abort(15,0):", $t10} $t10 == $t10;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    goto L2;

    // label L9 at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
L9:

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t23);

    // assume Eq<FixedPoint32::FixedPoint32>($t23, FixedPoint32::spec_create_from_rational($t15, $t16)) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40
    assume $IsEqual'$1_FixedPoint32_FixedPoint32'($t23, $1_FixedPoint32_spec_create_from_rational($t15, $t16));

    // $t23 := opaque end: FixedPoint32::create_from_rational($t15, $t16) at /home/ying/diem/language/diem-framework/modules/XUS.move:25:13+40

    // $t25 := 1000000 at /home/ying/diem/language/diem-framework/modules/XUS.move:26:13+7
    assume {:print "$at(38,809,816)"} true;
    $t25 := 1000000;
    assume $IsValid'u64'($t25);

    // $t26 := 100 at /home/ying/diem/language/diem-framework/modules/XUS.move:27:13+3
    assume {:print "$at(38,855,858)"} true;
    $t26 := 100;
    assume $IsValid'u64'($t26);

    // $t27 := [88, 85, 83] at /home/ying/diem/language/diem-framework/modules/XUS.move:28:13+6
    assume {:print "$at(38,902,908)"} true;
    $t27 := MakeVec3(88, 85, 83);
    assume $IsValid'vec'u8''($t27);

    // assume Identical($t28, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t28 == $1_Signer_spec_address_of($t1));

    // assume Identical($t29, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t29 == $1_Signer_spec_address_of($t0));

    // assume Identical($t30, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t30 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t31, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t31 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t32, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t1));

    // assume Identical($t33, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t33 == $1_Signer_spec_address_of($t1));

    // assume Identical($t34, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume ($t34 == $1_Signer_spec_address_of($t1));

    // Diem::register_SCS_currency<XUS::XUS>($t0, $t1, $t23, $t25, $t26, $t27) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/XUS.move:22:9+281
    assume {:print "$at(38,637,918)"} true;
    call $1_Diem_register_SCS_currency'$1_XUS_XUS'($t0, $t1, $t23, $t25, $t26, $t27);
    if ($abort_flag) {
        assume {:print "$at(38,637,918)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(15,0):", $t10} $t10 == $t10;
        goto L2;
    }

    // AccountLimits::publish_unrestricted_limits<XUS::XUS>($t0) on_abort goto L2 with $t10 at /home/ying/diem/language/diem-framework/modules/XUS.move:30:9+59
    assume {:print "$at(38,928,987)"} true;
    call $1_AccountLimits_publish_unrestricted_limits'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(38,928,987)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(15,0):", $t10} $t10 == $t10;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/XUS.move:31:5+1
    assume {:print "$at(38,993,994)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/XUS.move:31:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/XUS.move:31:5+1
L2:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/XUS.move:31:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/XDX.move:134:9+105
function {:inline} $1_XDX_reserve_exists($1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve): bool {
    $ResourceExists($1_XDX_Reserve_$memory, $1_CoreAddresses_$CURRENCY_INFO_ADDRESS())
}

// struct XDX::XDX at /home/ying/diem/language/diem-framework/modules/XDX.move:16:5+24
type {:datatype} $1_XDX_XDX;
function {:constructor} $1_XDX_XDX($dummy_field: bool): $1_XDX_XDX;
function {:inline} $Update'$1_XDX_XDX'_dummy_field(s: $1_XDX_XDX, x: bool): $1_XDX_XDX {
    $1_XDX_XDX(x)
}
function $IsValid'$1_XDX_XDX'(s: $1_XDX_XDX): bool {
    $IsValid'bool'($dummy_field#$1_XDX_XDX(s))
}
function {:inline} $IsEqual'$1_XDX_XDX'(s1: $1_XDX_XDX, s2: $1_XDX_XDX): bool {
    s1 == s2
}

// struct XDX::Reserve at /home/ying/diem/language/diem-framework/modules/XDX.move:25:5+677
type {:datatype} $1_XDX_Reserve;
function {:constructor} $1_XDX_Reserve($mint_cap: $1_Diem_MintCapability'$1_XDX_XDX', $burn_cap: $1_Diem_BurnCapability'$1_XDX_XDX', $preburn_cap: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve;
function {:inline} $Update'$1_XDX_Reserve'_mint_cap(s: $1_XDX_Reserve, x: $1_Diem_MintCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve(x, $burn_cap#$1_XDX_Reserve(s), $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_burn_cap(s: $1_XDX_Reserve, x: $1_Diem_BurnCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), x, $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_preburn_cap(s: $1_XDX_Reserve, x: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), $burn_cap#$1_XDX_Reserve(s), x)
}
function $IsValid'$1_XDX_Reserve'(s: $1_XDX_Reserve): bool {
    $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''($mint_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''($burn_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $IsEqual'$1_XDX_Reserve'(s1: $1_XDX_Reserve, s2: $1_XDX_Reserve): bool {
    s1 == s2
}
var $1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve;

// fun XDX::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/XDX.move:49:5+998
procedure {:inline 1} $1_XDX_initialize(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t3: $1_Diem_MintCapability'$1_XDX_XDX';
    var $t4: $1_Diem_Preburn'$1_XDX_XDX';
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: $1_DiemConfig_Configuration;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $1_FixedPoint32_FixedPoint32;
    var $t29: bool;
    var $t30: bool;
    var $t31: int;
    var $t32: int;
    var $t33: Vec (int);
    var $t34: int;
    var $t35: $1_DiemConfig_Configuration;
    var $t36: int;
    var $t37: $1_Diem_MintCapability'$1_XDX_XDX';
    var $t38: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t39: bool;
    var $t40: int;
    var $t41: int;
    var $t42: $1_Diem_Preburn'$1_XDX_XDX';
    var $t43: $1_XDX_Reserve;
    var $t0: int;
    var $t1: int;
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_MintCapability'$1_XDX_XDX'': $1_Diem_MintCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_Preburn'$1_XDX_XDX'': $1_Diem_Preburn'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t8 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t9, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t9 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t1));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/XDX.move:49:5+1
    assume {:print "$at(37,2310,2311)"} true;
    assume {:print "$track_local(16,0,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/XDX.move:49:5+1
    assume {:print "$track_local(16,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(37,2407,2438)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31

    // assume Identical($t12, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
    assume ($t12 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t12) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
L5:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t13)) at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
    assume {:print "$at(37,2407,2438)"} true;
    assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31
L4:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/XDX.move:53:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
    // >> opaque call: CoreAddresses::assert_currency_info($t0)
    assume {:print "$at(37,2482,2529)"} true;

    // opaque begin: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47

    // assume Identical($t14, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
    assume ($t14 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()));

    // if ($t14) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
    if ($t14) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
L7:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$CURRENCY_INFO_ADDRESS()), Eq(2, $t13)) at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$CURRENCY_INFO_ADDRESS()) && $IsEqual'u8'(2, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
    assume {:print "$at(37,2482,2529)"} true;
    assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47
L6:

    // opaque end: CoreAddresses::assert_currency_info($t0) at /home/ying/diem/language/diem-framework/modules/XDX.move:55:9+47

    // $t15 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:57:33+34
    assume {:print "$at(37,2598,2632)"} true;
    call $t15 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(37,2598,2632)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // $t16 := exists<XDX::Reserve>($t15) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:17+6
    $t16 := $ResourceExists($1_XDX_Reserve_$memory, $t15);

    // $t17 := !($t16) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:16+1
    call $t17 := $Not($t16);

    // $t18 := 0 at /home/ying/diem/language/diem-framework/modules/XDX.move:57:96+8
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // nop at /home/ying/diem/language/diem-framework/modules/XDX.move:57:70+35
    // >> opaque call: $t11 := Errors::already_published($t10)

    // $t19 := opaque begin: Errors::already_published($t18) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:70+35

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:70+35
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 6) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:70+35
    assume $IsEqual'u64'($t19, 6);

    // $t19 := opaque end: Errors::already_published($t18) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:70+35

    // trace_local[tmp#$6]($t19) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
    assume {:print "$track_local(16,0,6):", $t19} $t19 == $t19;

    // trace_local[tmp#$5]($t17) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
    assume {:print "$track_local(16,0,5):", $t17} $t17 == $t17;

    // if ($t17) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
    if ($t17) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
    assume {:print "$at(37,2574,2671)"} true;
    assume {:print "$track_abort(16,0):", $t19} $t19 == $t19;

    // $t13 := move($t19) at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
    $t13 := $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:57:9+97
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/XDX.move:59:13+10
    assume {:print "$at(37,2750,2760)"} true;
L0:

    // $t20 := 1 at /home/ying/diem/language/diem-framework/modules/XDX.move:60:48+1
    assume {:print "$at(37,2809,2810)"} true;
    $t20 := 1;
    assume $IsValid'u64'($t20);

    // $t21 := 1 at /home/ying/diem/language/diem-framework/modules/XDX.move:60:51+1
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // nop at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    // >> opaque call: $t14 := FixedPoint32::create_from_rational($t12, $t13)

    // assume Identical($t22, Shl($t20, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+39
    assume {:print "$at(42,8350,8389)"} true;
    assume ($t22 == $shl($t20, 64));

    // assume Identical($t23, Shl($t21, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:187:9+43
    assume {:print "$at(42,8398,8441)"} true;
    assume ($t23 == $shl($t21, 32));

    // assume Identical($t24, Div($t22, $t23)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:188:9+53
    assume {:print "$at(42,8450,8503)"} true;
    assume ($t24 == ($t22 div $t23));

    // assume Identical($t25, Shl($t20, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+39
    assume {:print "$at(42,8350,8389)"} true;
    assume ($t25 == $shl($t20, 64));

    // assume Identical($t26, Shl($t21, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:187:9+43
    assume {:print "$at(42,8398,8441)"} true;
    assume ($t26 == $shl($t21, 32));

    // assume Identical($t27, Div($t25, $t26)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:188:9+53
    assume {:print "$at(42,8450,8503)"} true;
    assume ($t27 == ($t25 div $t26));

    // $t28 := opaque begin: FixedPoint32::create_from_rational($t20, $t21) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    assume {:print "$at(37,2774,2814)"} true;

    // assume Identical($t29, Or(Or(Eq<num>($t26, 0), And(Eq<num>($t27, 0), Neq<num>($t25, 0))), Gt($t27, 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    assume ($t29 == (($IsEqual'num'($t26, 0) || ($IsEqual'num'($t27, 0) && !$IsEqual'num'($t25, 0))) || ($t27 > 18446744073709551615)));

    // if ($t29) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    if ($t29) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
L9:

    // assume Or(Or(And(Eq<num>($t26, 0), Eq(7, $t13)), And(And(Eq<num>($t27, 0), Neq<num>($t25, 0)), Eq(7, $t13))), And(Gt($t27, 18446744073709551615), Eq(8, $t13))) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    assume ((($IsEqual'num'($t26, 0) && $IsEqual'u8'(7, $t13)) || (($IsEqual'num'($t27, 0) && !$IsEqual'num'($t25, 0)) && $IsEqual'u8'(7, $t13))) || (($t27 > 18446744073709551615) && $IsEqual'u8'(8, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    assume {:print "$at(37,2774,2814)"} true;
    assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
L8:

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t28);

    // assume Eq<FixedPoint32::FixedPoint32>($t28, FixedPoint32::spec_create_from_rational($t20, $t21)) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40
    assume $IsEqual'$1_FixedPoint32_FixedPoint32'($t28, $1_FixedPoint32_spec_create_from_rational($t20, $t21));

    // $t28 := opaque end: FixedPoint32::create_from_rational($t20, $t21) at /home/ying/diem/language/diem-framework/modules/XDX.move:60:13+40

    // $t30 := true at /home/ying/diem/language/diem-framework/modules/XDX.move:61:13+4
    assume {:print "$at(37,2852,2856)"} true;
    $t30 := true;
    assume $IsValid'bool'($t30);

    // $t31 := 1000000 at /home/ying/diem/language/diem-framework/modules/XDX.move:62:13+7
    assume {:print "$at(37,2889,2896)"} true;
    $t31 := 1000000;
    assume $IsValid'u64'($t31);

    // $t32 := 1000 at /home/ying/diem/language/diem-framework/modules/XDX.move:63:13+4
    assume {:print "$at(37,2935,2939)"} true;
    $t32 := 1000;
    assume $IsValid'u64'($t32);

    // $t33 := [88, 68, 88] at /home/ying/diem/language/diem-framework/modules/XDX.move:64:13+6
    assume {:print "$at(37,2982,2988)"} true;
    $t33 := MakeVec3(88, 68, 88);
    assume $IsValid'vec'u8''($t33);

    // assume Identical($t34, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t34 == $1_Signer_spec_address_of($t0));

    // assume Identical($t35, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t35 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t36, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t36 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // ($t37, $t38) := Diem::register_currency<XDX::XDX>($t0, $t28, $t30, $t31, $t32, $t33) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:58:36+290
    assume {:print "$at(37,2708,2998)"} true;
    call $t37,$t38 := $1_Diem_register_currency'$1_XDX_XDX'($t0, $t28, $t30, $t31, $t32, $t33);
    if ($abort_flag) {
        assume {:print "$at(37,2708,2998)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // trace_local[burn_cap]($t38) at /home/ying/diem/language/diem-framework/modules/XDX.move:58:24+8
    assume {:print "$track_local(16,0,2):", $t38} $t38 == $t38;

    // trace_local[mint_cap]($t37) at /home/ying/diem/language/diem-framework/modules/XDX.move:58:14+8
    assume {:print "$track_local(16,0,3):", $t37} $t37 == $t37;

    // $t39 := false at /home/ying/diem/language/diem-framework/modules/XDX.move:67:55+5
    assume {:print "$at(37,3087,3092)"} true;
    $t39 := false;
    assume $IsValid'bool'($t39);

    // assume Identical($t40, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t40 == $1_Signer_spec_address_of($t1));

    // Diem::update_minting_ability<XDX::XDX>($t1, $t39) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:67:9+52
    assume {:print "$at(37,3041,3093)"} true;
    call $1_Diem_update_minting_ability'$1_XDX_XDX'($t1, $t39);
    if ($abort_flag) {
        assume {:print "$at(37,3041,3093)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // AccountLimits::publish_unrestricted_limits<XDX::XDX>($t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:68:9+59
    assume {:print "$at(37,3103,3162)"} true;
    call $1_AccountLimits_publish_unrestricted_limits'$1_XDX_XDX'($t0);
    if ($abort_flag) {
        assume {:print "$at(37,3103,3162)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // assume Identical($t41, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t41 == $1_Signer_spec_address_of($t1));

    // $t42 := Diem::create_preburn<XDX::XDX>($t1) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:69:27+37
    assume {:print "$at(37,3190,3227)"} true;
    call $t42 := $1_Diem_create_preburn'$1_XDX_XDX'($t1);
    if ($abort_flag) {
        assume {:print "$at(37,3190,3227)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // trace_local[preburn_cap]($t42) at /home/ying/diem/language/diem-framework/modules/XDX.move:69:13+11
    assume {:print "$track_local(16,0,4):", $t42} $t42 == $t42;

    // $t43 := pack XDX::Reserve($t37, $t38, $t42) at /home/ying/diem/language/diem-framework/modules/XDX.move:70:29+43
    assume {:print "$at(37,3257,3300)"} true;
    $t43 := $1_XDX_Reserve($t37, $t38, $t42);

    // move_to<XDX::Reserve>($t43, $t0) on_abort goto L3 with $t13 at /home/ying/diem/language/diem-framework/modules/XDX.move:70:9+7
    if ($ResourceExists($1_XDX_Reserve_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_XDX_Reserve_$memory := $ResourceUpdate($1_XDX_Reserve_$memory, $t0, $t43);
    }
    if ($abort_flag) {
        assume {:print "$at(37,3237,3244)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(16,0):", $t13} $t13 == $t13;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/XDX.move:71:5+1
    assume {:print "$at(37,3307,3308)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/XDX.move:71:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/XDX.move:71:5+1
L3:

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/XDX.move:71:5+1
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:64:5+153
function {:inline} $1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig, validator_operator_addr: int): bool {
    $ResourceExists($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, validator_operator_addr)
}

// struct ValidatorOperatorConfig::ValidatorOperatorConfig at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:11:5+141
type {:datatype} $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:constructor} $1_ValidatorOperatorConfig_ValidatorOperatorConfig($human_name: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:inline} $Update'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'_human_name(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, x: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig {
    $1_ValidatorOperatorConfig_ValidatorOperatorConfig(x)
}
function $IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    $IsValid'vec'u8''($human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s1: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, s2: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    $IsEqual'vec'u8''($human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s1), $human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s2))}
var $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig;

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:88:5+170
function {:inline} $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_KeyRotationCapability {
    $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:88:5+170
function {:inline} $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_WithdrawCapability {
    $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:53:5+95
function {:inline} $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:53:5+95
function {:inline} $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:63:5+96
function {:inline} $1_Option_$is_some'$1_ValidatorConfig_Config'(t: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    !$1_Vector_$is_empty'$1_ValidatorConfig_Config'($vec#$1_Option_Option'$1_ValidatorConfig_Config'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:63:5+96
function {:inline} $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    !$1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:63:5+96
function {:inline} $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    !$1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t))
}

// struct Option::Option<address> at /home/ying/diem/language/move-stdlib/modules/Option.move:10:5+81
type {:datatype} $1_Option_Option'address';
function {:constructor} $1_Option_Option'address'($vec: Vec (int)): $1_Option_Option'address';
function {:inline} $Update'$1_Option_Option'address''_vec(s: $1_Option_Option'address', x: Vec (int)): $1_Option_Option'address' {
    $1_Option_Option'address'(x)
}
function $IsValid'$1_Option_Option'address''(s: $1_Option_Option'address'): bool {
    $IsValid'vec'address''($vec#$1_Option_Option'address'(s))
}
function {:inline} $IsEqual'$1_Option_Option'address''(s1: $1_Option_Option'address', s2: $1_Option_Option'address'): bool {
    $IsEqual'vec'address''($vec#$1_Option_Option'address'(s1), $vec#$1_Option_Option'address'(s2))}

// struct Option::Option<ValidatorConfig::Config> at /home/ying/diem/language/move-stdlib/modules/Option.move:10:5+81
type {:datatype} $1_Option_Option'$1_ValidatorConfig_Config';
function {:constructor} $1_Option_Option'$1_ValidatorConfig_Config'($vec: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config';
function {:inline} $Update'$1_Option_Option'$1_ValidatorConfig_Config''_vec(s: $1_Option_Option'$1_ValidatorConfig_Config', x: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config' {
    $1_Option_Option'$1_ValidatorConfig_Config'(x)
}
function $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''(s: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    $IsValid'vec'$1_ValidatorConfig_Config''($vec#$1_Option_Option'$1_ValidatorConfig_Config'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_ValidatorConfig_Config''(s1: $1_Option_Option'$1_ValidatorConfig_Config', s2: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    $IsEqual'vec'$1_ValidatorConfig_Config''($vec#$1_Option_Option'$1_ValidatorConfig_Config'(s1), $vec#$1_Option_Option'$1_ValidatorConfig_Config'(s2))}

// struct Option::Option<DiemAccount::KeyRotationCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:10:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_KeyRotationCapability'($vec: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''_vec(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', x: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $1_Option_Option'$1_DiemAccount_KeyRotationCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $IsValid'vec'$1_DiemAccount_KeyRotationCapability''($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s1: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', s2: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $IsEqual'vec'$1_DiemAccount_KeyRotationCapability''($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s1), $vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s2))}

// struct Option::Option<DiemAccount::WithdrawCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:10:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_WithdrawCapability'($vec: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_WithdrawCapability''_vec(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability', x: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $IsValid'vec'$1_DiemAccount_WithdrawCapability''($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s1: $1_Option_Option'$1_DiemAccount_WithdrawCapability', s2: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $IsEqual'vec'$1_DiemAccount_WithdrawCapability''($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s1), $vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s2))}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:85:5+84
function {:inline} $1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:231:5+176
function {:inline} $1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    ($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr) && $1_Option_$is_some'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, addr))))
}

// struct ValidatorConfig::Config at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:18:5+178
type {:datatype} $1_ValidatorConfig_Config;
function {:constructor} $1_ValidatorConfig_Config($consensus_pubkey: Vec (int), $validator_network_addresses: Vec (int), $fullnode_network_addresses: Vec (int)): $1_ValidatorConfig_Config;
function {:inline} $Update'$1_ValidatorConfig_Config'_consensus_pubkey(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config(x, $validator_network_addresses#$1_ValidatorConfig_Config(s), $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_validator_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), x, $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_fullnode_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), $validator_network_addresses#$1_ValidatorConfig_Config(s), x)
}
function $IsValid'$1_ValidatorConfig_Config'(s: $1_ValidatorConfig_Config): bool {
    $IsValid'vec'u8''($consensus_pubkey#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($validator_network_addresses#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_Config'(s1: $1_ValidatorConfig_Config, s2: $1_ValidatorConfig_Config): bool {
    $IsEqual'vec'u8''($consensus_pubkey#$1_ValidatorConfig_Config(s1), $consensus_pubkey#$1_ValidatorConfig_Config(s2))
    && $IsEqual'vec'u8''($validator_network_addresses#$1_ValidatorConfig_Config(s1), $validator_network_addresses#$1_ValidatorConfig_Config(s2))
    && $IsEqual'vec'u8''($fullnode_network_addresses#$1_ValidatorConfig_Config(s1), $fullnode_network_addresses#$1_ValidatorConfig_Config(s2))}

// struct ValidatorConfig::ValidatorConfig at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:24:5+260
type {:datatype} $1_ValidatorConfig_ValidatorConfig;
function {:constructor} $1_ValidatorConfig_ValidatorConfig($config: $1_Option_Option'$1_ValidatorConfig_Config', $operator_account: $1_Option_Option'address', $human_name: Vec (int)): $1_ValidatorConfig_ValidatorConfig;
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_config(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'$1_ValidatorConfig_Config'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig(x, $operator_account#$1_ValidatorConfig_ValidatorConfig(s), $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_operator_account(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'address'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), x, $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_human_name(s: $1_ValidatorConfig_ValidatorConfig, x: Vec (int)): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), $operator_account#$1_ValidatorConfig_ValidatorConfig(s), x)
}
function $IsValid'$1_ValidatorConfig_ValidatorConfig'(s: $1_ValidatorConfig_ValidatorConfig): bool {
    $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''($config#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'vec'u8''($human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_ValidatorConfig'(s1: $1_ValidatorConfig_ValidatorConfig, s2: $1_ValidatorConfig_ValidatorConfig): bool {
    $IsEqual'$1_Option_Option'$1_ValidatorConfig_Config''($config#$1_ValidatorConfig_ValidatorConfig(s1), $config#$1_ValidatorConfig_ValidatorConfig(s2))
    && $IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig(s1), $operator_account#$1_ValidatorConfig_ValidatorConfig(s2))
    && $IsEqual'vec'u8''($human_name#$1_ValidatorConfig_ValidatorConfig(s1), $human_name#$1_ValidatorConfig_ValidatorConfig(s2))}
var $1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig;

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:48:5+150
function {:inline} $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:52:5+69
function {:inline} $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory)
}

// struct TransactionFee::TransactionFee<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:17:5+116
type {:datatype} $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:constructor} $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance: $1_Diem_Diem'$1_XUS_XUS', $preburn: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_balance(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'(x, $preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_preburn(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
      && $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s1: $1_TransactionFee_TransactionFee'$1_XUS_XUS', s2: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS';

// fun TransactionFee::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:5+253
procedure {:inline 1} $1_TransactionFee_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:27:5+1
    assume {:print "$at(31,844,845)"} true;
    assume {:print "$track_local(21,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(31,912,943)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31

    // assume Identical($t2, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
    assume ($t2 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t2) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t3)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
    assume {:print "$at(31,912,943)"} true;
    assume {:print "$track_abort(21,2):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:30:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(31,953,998)"} true;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    assume {:print "$at(31,953,998)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
L6:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t3)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t3))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t3))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'u8'(5, $t3)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'u8'(3, $t3))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t3)));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    assume {:print "$at(31,953,998)"} true;
    assume {:print "$track_abort(21,2):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45
L5:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:31:9+45

    // TransactionFee::add_txn_fee_currency<XUS::XUS>($t0) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:33:9+37
    assume {:print "$at(31,1053,1090)"} true;
    call $1_TransactionFee_add_txn_fee_currency'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,1053,1090)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(21,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:34:5+1
    assume {:print "$at(31,1096,1097)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:34:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:34:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:34:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun TransactionFee::add_txn_fee_currency<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:59:5+508
procedure {:inline 1} $1_TransactionFee_add_txn_fee_currency'$1_XUS_XUS'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Diem_Diem'$1_XUS_XUS';
    var $t12: int;
    var $t13: $1_Diem_Preburn'$1_XUS_XUS';
    var $t14: $1_TransactionFee_TransactionFee'$1_XUS_XUS';
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:59:5+1
    assume {:print "$at(31,2117,2118)"} true;
    assume {:print "$track_local(21,0,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    // >> opaque call: Roles::assert_treasury_compliance($t0)
    assume {:print "$at(31,2197,2242)"} true;

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    assume {:print "$at(31,2197,2242)"} true;

    // assume Identical($t4, Or(Or(Not(exists<Roles::RoleId>($t3)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t3)), 1)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    assume ($t4 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t3) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t3)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t4) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    if ($t4) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t3)), Eq(5, $t5)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t3)), 1), Eq(3, $t5))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(2, $t5))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t3) && $IsEqual'u8'(5, $t5)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t3)), 1) && $IsEqual'u8'(3, $t5))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(2, $t5)));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    assume {:print "$at(31,2197,2242)"} true;
    assume {:print "$track_abort(21,0):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:60:9+45

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
    // >> opaque call: Diem::assert_is_currency<#0>()
    assume {:print "$at(31,2252,2288)"} true;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36

    // assume Identical($t6, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
    assume ($t6 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t6) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
    if ($t6) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t5)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'u8'(5, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
    assume {:print "$at(31,2252,2288)"} true;
    assume {:print "$track_abort(21,0):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:61:9+36

    // $t7 := TransactionFee::is_coin_initialized<#0>() on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:63:14+31
    assume {:print "$at(31,2319,2350)"} true;
    call $t7 := $1_TransactionFee_is_coin_initialized'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(31,2319,2350)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(21,0):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t8 := !($t7) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:63:13+1
    call $t8 := $Not($t7);

    // $t9 := 0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:39+16
    assume {:print "$at(31,2390,2406)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // nop at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:13+43
    // >> opaque call: $t6 := Errors::already_published($t5)

    // $t10 := opaque begin: Errors::already_published($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:13+43

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:13+43
    assume $IsValid'u64'($t10);

    // assume Eq<u64>($t10, 6) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:13+43
    assume $IsEqual'u64'($t10, 6);

    // $t10 := opaque end: Errors::already_published($t9) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:64:13+43

    // trace_local[tmp#$2]($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
    assume {:print "$at(31,2298,2417)"} true;
    assume {:print "$track_local(21,0,2):", $t10} $t10 == $t10;

    // trace_local[tmp#$1]($t8) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
    assume {:print "$track_local(21,0,1):", $t8} $t8 == $t8;

    // if ($t8) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
    if ($t8) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
    assume {:print "$at(31,2298,2417)"} true;
    assume {:print "$track_abort(21,0):", $t10} $t10 == $t10;

    // $t5 := move($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
    $t5 := $t10;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:62:9+119
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:67:13+10
    assume {:print "$at(31,2448,2458)"} true;
L0:

    // $t11 := Diem::zero<#0>() on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:69:26+12
    assume {:print "$at(31,2524,2536)"} true;
    call $t11 := $1_Diem_zero'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(31,2524,2536)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(21,0):", $t5} $t5 == $t5;
        goto L3;
    }

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // $t13 := Diem::create_preburn<#0>($t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:70:26+32
    assume {:print "$at(31,2563,2595)"} true;
    call $t13 := $1_Diem_create_preburn'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,2563,2595)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(21,0):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t14 := pack TransactionFee::TransactionFee<#0>($t11, $t13) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:68:13+137
    assume {:print "$at(31,2472,2609)"} true;
    $t14 := $1_TransactionFee_TransactionFee'$1_XUS_XUS'($t11, $t13);

    // move_to<TransactionFee::TransactionFee<#0>>($t14, $t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:66:9+7
    assume {:print "$at(31,2427,2434)"} true;
    if ($ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory := $ResourceUpdate($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t0, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(31,2427,2434)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(21,0):", $t5} $t5 == $t5;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:73:5+1
    assume {:print "$at(31,2624,2625)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:73:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:73:5+1
L3:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:73:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun TransactionFee::is_coin_initialized<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:48:5+150
procedure {:inline 1} $1_TransactionFee_is_coin_initialized'$1_XUS_XUS'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := CoreAddresses::TREASURY_COMPLIANCE_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:49:42+44
    assume {:print "$at(31,1755,1799)"} true;
    call $t0 := $1_CoreAddresses_TREASURY_COMPLIANCE_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(31,1755,1799)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(21,3):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := exists<TransactionFee::TransactionFee<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:49:9+6
    $t2 := $ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t0);

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:49:9+78
    assume {:print "$track_return(21,3,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:50:5+1
    assume {:print "$at(31,1805,1806)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:50:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:50:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:50:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:122:10+85
function {:inline} $1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): bool {
    $ResourceExists($1_DualAttestation_Credential_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:546:9+103
function {:inline} $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): bool {
    $ResourceExists($1_DualAttestation_Limit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// struct DualAttestation::BaseUrlRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:58:5+257
type {:datatype} $1_DualAttestation_BaseUrlRotationEvent;
function {:constructor} $1_DualAttestation_BaseUrlRotationEvent($new_base_url: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_BaseUrlRotationEvent;
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_new_base_url(s: $1_DualAttestation_BaseUrlRotationEvent, x: Vec (int)): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_BaseUrlRotationEvent, x: int): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_BaseUrlRotationEvent'(s: $1_DualAttestation_BaseUrlRotationEvent): bool {
    $IsValid'vec'u8''($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(s1: $1_DualAttestation_BaseUrlRotationEvent, s2: $1_DualAttestation_BaseUrlRotationEvent): bool {
    $IsEqual'vec'u8''($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s1), $new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s2))
    && $IsEqual'u64'($time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s1), $time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s2))}

// struct DualAttestation::ComplianceKeyRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:50:5+303
type {:datatype} $1_DualAttestation_ComplianceKeyRotationEvent;
function {:constructor} $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_ComplianceKeyRotationEvent;
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_new_compliance_public_key(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: Vec (int)): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: int): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_ComplianceKeyRotationEvent'(s: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    $IsValid'vec'u8''($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(s1: $1_DualAttestation_ComplianceKeyRotationEvent, s2: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    $IsEqual'vec'u8''($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s1), $new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s2))
    && $IsEqual'u64'($time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s1), $time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s2))}

// struct DualAttestation::Credential at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:20:5+1467
type {:datatype} $1_DualAttestation_Credential;
function {:constructor} $1_DualAttestation_Credential($human_name: Vec (int), $base_url: Vec (int), $compliance_public_key: Vec (int), $expiration_date: int, $compliance_key_rotation_events: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', $base_url_rotation_events: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential;
function {:inline} $Update'$1_DualAttestation_Credential'_human_name(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential(x, $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), x, $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_public_key(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), x, $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_expiration_date(s: $1_DualAttestation_Credential, x: int): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), x, $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_key_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), x, $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), x)
}
function $IsValid'$1_DualAttestation_Credential'(s: $1_DualAttestation_Credential): bool {
    $IsValid'vec'u8''($human_name#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($base_url#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($compliance_public_key#$1_DualAttestation_Credential(s))
      && $IsValid'u64'($expiration_date#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''($compliance_key_rotation_events#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''($base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Credential'(s1: $1_DualAttestation_Credential, s2: $1_DualAttestation_Credential): bool {
    $IsEqual'vec'u8''($human_name#$1_DualAttestation_Credential(s1), $human_name#$1_DualAttestation_Credential(s2))
    && $IsEqual'vec'u8''($base_url#$1_DualAttestation_Credential(s1), $base_url#$1_DualAttestation_Credential(s2))
    && $IsEqual'vec'u8''($compliance_public_key#$1_DualAttestation_Credential(s1), $compliance_public_key#$1_DualAttestation_Credential(s2))
    && $IsEqual'u64'($expiration_date#$1_DualAttestation_Credential(s1), $expiration_date#$1_DualAttestation_Credential(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''($compliance_key_rotation_events#$1_DualAttestation_Credential(s1), $compliance_key_rotation_events#$1_DualAttestation_Credential(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''($base_url_rotation_events#$1_DualAttestation_Credential(s1), $base_url_rotation_events#$1_DualAttestation_Credential(s2))}
var $1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential;

// struct DualAttestation::Limit at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:45:5+58
type {:datatype} $1_DualAttestation_Limit;
function {:constructor} $1_DualAttestation_Limit($micro_xdx_limit: int): $1_DualAttestation_Limit;
function {:inline} $Update'$1_DualAttestation_Limit'_micro_xdx_limit(s: $1_DualAttestation_Limit, x: int): $1_DualAttestation_Limit {
    $1_DualAttestation_Limit(x)
}
function $IsValid'$1_DualAttestation_Limit'(s: $1_DualAttestation_Limit): bool {
    $IsValid'u64'($micro_xdx_limit#$1_DualAttestation_Limit(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Limit'(s1: $1_DualAttestation_Limit, s2: $1_DualAttestation_Limit): bool {
    s1 == s2
}
var $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit;

// fun DualAttestation::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:5+599
procedure {:inline 1} $1_DualAttestation_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: $1_DualAttestation_Limit;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u128': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t6, Mul(1000, Diem::spec_scaling_factor<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:501:9+86
    assume {:print "$at(21,22219,22305)"} true;
    assume ($t6 == (1000 * $1_Diem_spec_scaling_factor'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:484:5+1
    assume {:print "$at(21,21365,21366)"} true;
    assume {:print "$track_local(23,10,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(21,21418,21449)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31

    // assume Identical($t7, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
    assume ($t7 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t7) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
    if ($t7) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
L7:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t8)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
    assume {:print "$at(21,21418,21449)"} true;
    assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31
L6:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:485:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(21,21459,21502)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43

    // assume Identical($t9, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
    assume ($t9 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t9) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
    if ($t9) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
L9:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
    assume {:print "$at(21,21459,21502)"} true;
    assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
    goto L5;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43
L8:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:486:9+43

    // $t10 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:31+34
    assume {:print "$at(21,21561,21595)"} true;
    call $t10 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(21,21561,21595)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t11 := exists<DualAttestation::Limit>($t10) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:17+6
    $t11 := $ResourceExists($1_DualAttestation_Limit_$memory, $t10);

    // $t12 := !($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:16+1
    call $t12 := $Not($t11);

    // $t13 := 1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:94+6
    $t13 := 1;
    assume $IsValid'u64'($t13);

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:68+33
    // >> opaque call: $t10 := Errors::already_published($t9)

    // $t14 := opaque begin: Errors::already_published($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:68+33

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:68+33
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 6) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:68+33
    assume $IsEqual'u64'($t14, 6);

    // $t14 := opaque end: Errors::already_published($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:68+33

    // trace_local[tmp#$3]($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
    assume {:print "$track_local(23,10,3):", $t14} $t14 == $t14;

    // trace_local[tmp#$2]($t12) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
    assume {:print "$track_local(23,10,2):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
    assume {:print "$at(21,21539,21632)"} true;
    assume {:print "$track_abort(23,10):", $t14} $t14 == $t14;

    // $t8 := move($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
    $t8 := $t14;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:487:9+93
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:30+30
    assume {:print "$at(21,21663,21693)"} true;
L0:

    // $t15 := 1000 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:30+30
    $t15 := 1000;
    assume $IsValid'u64'($t15);

    // $t16 := (u128)($t15) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:29+40
    call $t16 := $CastU128($t15);
    if ($abort_flag) {
        assume {:print "$at(21,21662,21702)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t17 := Diem::scaling_factor<XDX::XDX>() on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:73+27
    call $t17 := $1_Diem_scaling_factor'$1_XDX_XDX'();
    if ($abort_flag) {
        assume {:print "$at(21,21706,21733)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t18 := (u128)($t17) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:72+37
    call $t18 := $CastU128($t17);
    if ($abort_flag) {
        assume {:print "$at(21,21705,21742)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t19 := *($t16, $t18) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:70+1
    call $t19 := $MulU128($t16, $t18);
    if ($abort_flag) {
        assume {:print "$at(21,21703,21704)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // trace_local[initial_limit]($t19) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:488:13+13
    assume {:print "$track_local(23,10,1):", $t19} $t19 == $t19;

    // $t20 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:33+7
    assume {:print "$at(21,21776,21783)"} true;
    $t20 := 18446744073709551615;
    assume $IsValid'u128'($t20);

    // $t21 := <=($t19, $t20) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:30+2
    call $t21 := $Le($t19, $t20);

    // $t22 := 1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:65+6
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // nop at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:42+30
    // >> opaque call: $t19 := Errors::limit_exceeded($t18)

    // $t23 := opaque begin: Errors::limit_exceeded($t22) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:42+30

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:42+30
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:42+30
    assume $IsEqual'u64'($t23, 8);

    // $t23 := opaque end: Errors::limit_exceeded($t22) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:42+30

    // trace_local[tmp#$5]($t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
    assume {:print "$track_local(23,10,5):", $t23} $t23 == $t23;

    // trace_local[tmp#$4]($t21) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
    assume {:print "$track_local(23,10,4):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
    assume {:print "$at(21,21752,21816)"} true;
    assume {:print "$track_abort(23,10):", $t23} $t23 == $t23;

    // $t8 := move($t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
    $t8 := $t23;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:489:9+64
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:491:13+10
    assume {:print "$at(21,21847,21857)"} true;
L2:

    // $t24 := (u64)($t19) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:493:34+22
    assume {:print "$at(21,21912,21934)"} true;
    call $t24 := $CastU64($t19);
    if ($abort_flag) {
        assume {:print "$at(21,21912,21934)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t25 := pack DualAttestation::Limit($t24) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:492:13+77
    assume {:print "$at(21,21871,21948)"} true;
    $t25 := $1_DualAttestation_Limit($t24);

    // move_to<DualAttestation::Limit>($t25, $t0) on_abort goto L5 with $t8 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:490:9+7
    assume {:print "$at(21,21826,21833)"} true;
    if ($ResourceExists($1_DualAttestation_Limit_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DualAttestation_Limit_$memory := $ResourceUpdate($1_DualAttestation_Limit_$memory, $t0, $t25);
    }
    if ($abort_flag) {
        assume {:print "$at(21,21826,21833)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(23,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:496:5+1
    assume {:print "$at(21,21963,21964)"} true;
L4:

    // return () at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:496:5+1
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:496:5+1
L5:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:496:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// struct DiemTransactionPublishingOption::DiemTransactionPublishingOption at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:27:5+381
type {:datatype} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:constructor} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list: Vec (Vec (int)), $module_publishing_allowed: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_script_allow_list(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: Vec (Vec (int))): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(x, $module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_module_publishing_allowed(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s), x)
}
function $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    $IsValid'vec'vec'u8'''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
      && $IsValid'bool'($module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s1: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, s2: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    $IsEqual'vec'vec'u8'''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s1), $script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s2))
    && $IsEqual'bool'($module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s1), $module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s2))}

// fun DiemTransactionPublishingOption::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:38:5+436
procedure {:inline 1} $1_DiemTransactionPublishingOption_initialize(_$t0: int, _$t1: Vec (Vec (int)), _$t2: bool) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
    var $t10: int;
    var $t11: bool;
    var $t0: int;
    var $t1: Vec (Vec (int));
    var $t2: bool;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'': $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'': $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'vec'u8''': Vec (Vec (int));
    var $1_DiemConfig_Configuration_$memory#431: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:38:5+1
    assume {:print "$at(18,1558,1559)"} true;
    assume {:print "$track_local(24,1,0):", $t0} $t0 == $t0;

    // trace_local[script_allow_list]($t1) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:38:5+1
    assume {:print "$track_local(24,1,1):", $t1} $t1 == $t1;

    // trace_local[module_publishing_allowed]($t2) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:38:5+1
    assume {:print "$track_local(24,1,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(18,1714,1745)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31

    // assume Identical($t5, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
    assume ($t5 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t6)) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
    assume {:print "$at(18,1714,1745)"} true;
    assume {:print "$track_abort(24,1):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:43:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(18,1755,1790)"} true;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    assume {:print "$at(18,1755,1790)"} true;

    // assume Identical($t8, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    assume ($t8 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t8) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    if ($t8) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t6)), And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t6))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 0), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t6)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'u8'(5, $t6))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 0) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    assume {:print "$at(18,1755,1790)"} true;
    assume {:print "$track_abort(24,1):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:44:9+35

    // $t9 := pack DiemTransactionPublishingOption::DiemTransactionPublishingOption($t1, $t2) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:48:13+108
    assume {:print "$at(18,1869,1977)"} true;
    $t9 := $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($t1, $t2);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    // >> opaque call: DiemConfig::publish_new_config<DiemTransactionPublishingOption::DiemTransactionPublishingOption>($t0, $t3)
    assume {:print "$at(18,1801,1987)"} true;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: DiemConfig::publish_new_config<DiemTransactionPublishingOption::DiemTransactionPublishingOption>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume {:print "$at(18,1801,1987)"} true;

    // assume Identical($t11, Or(Or(Or(Or(DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>(), exists<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(Signer::spec_address_of($t0))), Not(exists<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume ($t11 == (((($1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t11) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    if ($t11) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
L8:

    // assume Or(Or(Or(Or(DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>(), exists<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(Signer::spec_address_of($t0))), And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t6))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume (((($1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'u8'(5, $t6))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0) && $IsEqual'u8'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume {:print "$at(18,1801,1987)"} true;
    assume {:print "$track_abort(24,1):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
L7:

    // @431 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    $1_DiemConfig_Configuration_$memory#431 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'';
        $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'');
    } else {
        $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'';
        $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory := $ResourceUpdate($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'');
    } else {
        $1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory := $ResourceRemove($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume exists<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $1_Signer_spec_address_of($t0));

    // assume DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>() at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory);

    // assume Eq<DiemTransactionPublishingOption::DiemTransactionPublishingOption>(DiemConfig::$get<DiemTransactionPublishingOption::DiemTransactionPublishingOption>(), $t9) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_$get'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory), $t9);

    // assume Eq<bool>(DiemConfig::spec_has_config[@431](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#431), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::publish_new_config<DiemTransactionPublishingOption::DiemTransactionPublishingOption>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:46:9+186

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:52:5+1
    assume {:print "$at(18,1993,1994)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:52:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:52:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:52:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemId.move:300:5+133
function {:inline} $1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory: $Memory $1_DiemId_DiemIdDomainManager): bool {
    $ResourceExists($1_DiemId_DiemIdDomainManager_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())
}

// struct DiemId::DiemIdDomain at /home/ying/diem/language/diem-framework/modules/DiemId.move:27:5+112
type {:datatype} $1_DiemId_DiemIdDomain;
function {:constructor} $1_DiemId_DiemIdDomain($domain: Vec (int)): $1_DiemId_DiemIdDomain;
function {:inline} $Update'$1_DiemId_DiemIdDomain'_domain(s: $1_DiemId_DiemIdDomain, x: Vec (int)): $1_DiemId_DiemIdDomain {
    $1_DiemId_DiemIdDomain(x)
}
function $IsValid'$1_DiemId_DiemIdDomain'(s: $1_DiemId_DiemIdDomain): bool {
    $IsValid'vec'u8''($domain#$1_DiemId_DiemIdDomain(s))
}
function {:inline} $IsEqual'$1_DiemId_DiemIdDomain'(s1: $1_DiemId_DiemIdDomain, s2: $1_DiemId_DiemIdDomain): bool {
    $IsEqual'vec'u8''($domain#$1_DiemId_DiemIdDomain(s1), $domain#$1_DiemId_DiemIdDomain(s2))}

// struct DiemId::DiemIdDomainEvent at /home/ying/diem/language/diem-framework/modules/DiemId.move:41:5+263
type {:datatype} $1_DiemId_DiemIdDomainEvent;
function {:constructor} $1_DiemId_DiemIdDomainEvent($removed: bool, $domain: $1_DiemId_DiemIdDomain, $address: int): $1_DiemId_DiemIdDomainEvent;
function {:inline} $Update'$1_DiemId_DiemIdDomainEvent'_removed(s: $1_DiemId_DiemIdDomainEvent, x: bool): $1_DiemId_DiemIdDomainEvent {
    $1_DiemId_DiemIdDomainEvent(x, $domain#$1_DiemId_DiemIdDomainEvent(s), $address#$1_DiemId_DiemIdDomainEvent(s))
}
function {:inline} $Update'$1_DiemId_DiemIdDomainEvent'_domain(s: $1_DiemId_DiemIdDomainEvent, x: $1_DiemId_DiemIdDomain): $1_DiemId_DiemIdDomainEvent {
    $1_DiemId_DiemIdDomainEvent($removed#$1_DiemId_DiemIdDomainEvent(s), x, $address#$1_DiemId_DiemIdDomainEvent(s))
}
function {:inline} $Update'$1_DiemId_DiemIdDomainEvent'_address(s: $1_DiemId_DiemIdDomainEvent, x: int): $1_DiemId_DiemIdDomainEvent {
    $1_DiemId_DiemIdDomainEvent($removed#$1_DiemId_DiemIdDomainEvent(s), $domain#$1_DiemId_DiemIdDomainEvent(s), x)
}
function $IsValid'$1_DiemId_DiemIdDomainEvent'(s: $1_DiemId_DiemIdDomainEvent): bool {
    $IsValid'bool'($removed#$1_DiemId_DiemIdDomainEvent(s))
      && $IsValid'$1_DiemId_DiemIdDomain'($domain#$1_DiemId_DiemIdDomainEvent(s))
      && $IsValid'address'($address#$1_DiemId_DiemIdDomainEvent(s))
}
function {:inline} $IsEqual'$1_DiemId_DiemIdDomainEvent'(s1: $1_DiemId_DiemIdDomainEvent, s2: $1_DiemId_DiemIdDomainEvent): bool {
    $IsEqual'bool'($removed#$1_DiemId_DiemIdDomainEvent(s1), $removed#$1_DiemId_DiemIdDomainEvent(s2))
    && $IsEqual'$1_DiemId_DiemIdDomain'($domain#$1_DiemId_DiemIdDomainEvent(s1), $domain#$1_DiemId_DiemIdDomainEvent(s2))
    && $IsEqual'address'($address#$1_DiemId_DiemIdDomainEvent(s1), $address#$1_DiemId_DiemIdDomainEvent(s2))}

// struct DiemId::DiemIdDomainManager at /home/ying/diem/language/diem-framework/modules/DiemId.move:35:5+242
type {:datatype} $1_DiemId_DiemIdDomainManager;
function {:constructor} $1_DiemId_DiemIdDomainManager($diem_id_domain_events: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent'): $1_DiemId_DiemIdDomainManager;
function {:inline} $Update'$1_DiemId_DiemIdDomainManager'_diem_id_domain_events(s: $1_DiemId_DiemIdDomainManager, x: $1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent'): $1_DiemId_DiemIdDomainManager {
    $1_DiemId_DiemIdDomainManager(x)
}
function $IsValid'$1_DiemId_DiemIdDomainManager'(s: $1_DiemId_DiemIdDomainManager): bool {
    $IsValid'$1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent''($diem_id_domain_events#$1_DiemId_DiemIdDomainManager(s))
}
function {:inline} $IsEqual'$1_DiemId_DiemIdDomainManager'(s1: $1_DiemId_DiemIdDomainManager, s2: $1_DiemId_DiemIdDomainManager): bool {
    $IsEqual'$1_Event_EventHandle'$1_DiemId_DiemIdDomainEvent''($diem_id_domain_events#$1_DiemId_DiemIdDomainManager(s1), $diem_id_domain_events#$1_DiemId_DiemIdDomainManager(s2))}
var $1_DiemId_DiemIdDomainManager_$memory: $Memory $1_DiemId_DiemIdDomainManager;

// struct DesignatedDealer::Dealer at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:15:5+130
type {:datatype} $1_DesignatedDealer_Dealer;
function {:constructor} $1_DesignatedDealer_Dealer($mint_event_handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer;
function {:inline} $Update'$1_DesignatedDealer_Dealer'_mint_event_handle(s: $1_DesignatedDealer_Dealer, x: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer {
    $1_DesignatedDealer_Dealer(x)
}
function $IsValid'$1_DesignatedDealer_Dealer'(s: $1_DesignatedDealer_Dealer): bool {
    $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''($mint_event_handle#$1_DesignatedDealer_Dealer(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_Dealer'(s1: $1_DesignatedDealer_Dealer, s2: $1_DesignatedDealer_Dealer): bool {
    $IsEqual'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''($mint_event_handle#$1_DesignatedDealer_Dealer(s1), $mint_event_handle#$1_DesignatedDealer_Dealer(s2))}
var $1_DesignatedDealer_Dealer_$memory: $Memory $1_DesignatedDealer_Dealer;

// struct DesignatedDealer::ReceivedMintEvent at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:39:5+286
type {:datatype} $1_DesignatedDealer_ReceivedMintEvent;
function {:constructor} $1_DesignatedDealer_ReceivedMintEvent($currency_code: Vec (int), $destination_address: int, $amount: int): $1_DesignatedDealer_ReceivedMintEvent;
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_currency_code(s: $1_DesignatedDealer_ReceivedMintEvent, x: Vec (int)): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent(x, $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_destination_address(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), x, $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_amount(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), x)
}
function $IsValid'$1_DesignatedDealer_ReceivedMintEvent'(s: $1_DesignatedDealer_ReceivedMintEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'address'($destination_address#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'u64'($amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(s1: $1_DesignatedDealer_ReceivedMintEvent, s2: $1_DesignatedDealer_ReceivedMintEvent): bool {
    $IsEqual'vec'u8''($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s1), $currency_code#$1_DesignatedDealer_ReceivedMintEvent(s2))
    && $IsEqual'address'($destination_address#$1_DesignatedDealer_ReceivedMintEvent(s1), $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s2))
    && $IsEqual'u64'($amount#$1_DesignatedDealer_ReceivedMintEvent(s1), $amount#$1_DesignatedDealer_ReceivedMintEvent(s2))}

// struct ChainId::ChainId at /home/ying/diem/language/diem-framework/modules/ChainId.move:11:5+45
type {:datatype} $1_ChainId_ChainId;
function {:constructor} $1_ChainId_ChainId($id: int): $1_ChainId_ChainId;
function {:inline} $Update'$1_ChainId_ChainId'_id(s: $1_ChainId_ChainId, x: int): $1_ChainId_ChainId {
    $1_ChainId_ChainId(x)
}
function $IsValid'$1_ChainId_ChainId'(s: $1_ChainId_ChainId): bool {
    $IsValid'u8'($id#$1_ChainId_ChainId(s))
}
function {:inline} $IsEqual'$1_ChainId_ChainId'(s1: $1_ChainId_ChainId, s2: $1_ChainId_ChainId): bool {
    s1 == s2
}
var $1_ChainId_ChainId_$memory: $Memory $1_ChainId_ChainId;

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:234:9+141
function {:inline} $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && !$is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// struct AccountFreezing::FreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:23:5+208
type {:datatype} $1_AccountFreezing_FreezeAccountEvent;
function {:constructor} $1_AccountFreezing_FreezeAccountEvent($initiator_address: int, $frozen_address: int): $1_AccountFreezing_FreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent(x, $frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_frozen_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeAccountEvent'(s: $1_AccountFreezing_FreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s))
      && $IsValid'address'($frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(s1: $1_AccountFreezing_FreezeAccountEvent, s2: $1_AccountFreezing_FreezeAccountEvent): bool {
    s1 == s2
}

// struct AccountFreezing::FreezeEventsHolder at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:17:5+169
type {:datatype} $1_AccountFreezing_FreezeEventsHolder;
function {:constructor} $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', $unfreeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder;
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_freeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder(x, $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_unfreeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeEventsHolder'(s: $1_AccountFreezing_FreezeEventsHolder): bool {
    $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
      && $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''($unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeEventsHolder'(s1: $1_AccountFreezing_FreezeEventsHolder, s2: $1_AccountFreezing_FreezeEventsHolder): bool {
    $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s1), $freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s2))
    && $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''($unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s1), $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s2))}
var $1_AccountFreezing_FreezeEventsHolder_$memory: $Memory $1_AccountFreezing_FreezeEventsHolder;

// struct AccountFreezing::FreezingBit at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:12:5+164
type {:datatype} $1_AccountFreezing_FreezingBit;
function {:constructor} $1_AccountFreezing_FreezingBit($is_frozen: bool): $1_AccountFreezing_FreezingBit;
function {:inline} $Update'$1_AccountFreezing_FreezingBit'_is_frozen(s: $1_AccountFreezing_FreezingBit, x: bool): $1_AccountFreezing_FreezingBit {
    $1_AccountFreezing_FreezingBit(x)
}
function $IsValid'$1_AccountFreezing_FreezingBit'(s: $1_AccountFreezing_FreezingBit): bool {
    $IsValid'bool'($is_frozen#$1_AccountFreezing_FreezingBit(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezingBit'(s1: $1_AccountFreezing_FreezingBit, s2: $1_AccountFreezing_FreezingBit): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit;

// struct AccountFreezing::UnfreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:31:5+216
type {:datatype} $1_AccountFreezing_UnfreezeAccountEvent;
function {:constructor} $1_AccountFreezing_UnfreezeAccountEvent($initiator_address: int, $unfrozen_address: int): $1_AccountFreezing_UnfreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent(x, $unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_unfrozen_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_UnfreezeAccountEvent'(s: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
      && $IsValid'address'($unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(s1: $1_AccountFreezing_UnfreezeAccountEvent, s2: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    s1 == s2
}

// fun AccountFreezing::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:5+508
procedure {:inline 1} $1_AccountFreezing_initialize(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    var $t13: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    var $t14: $1_AccountFreezing_FreezeEventsHolder;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:64:9+47
    assume {:print "$at(4,2284,2331)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:49:5+1
    assume {:print "$at(4,1621,1622)"} true;
    assume {:print "$track_local(28,4,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(4,1674,1705)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31

    // assume Identical($t4, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
    assume ($t4 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t4) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
    if ($t4) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
L5:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t5)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
    assume {:print "$at(4,1674,1705)"} true;
    assume {:print "$track_abort(28,4):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31
L4:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:50:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(4,1715,1758)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43

    // assume Identical($t6, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
    assume ($t6 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t6) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
    if ($t6) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
L7:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t5)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
    assume {:print "$at(4,1715,1758)"} true;
    assume {:print "$track_abort(28,4):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43
L6:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:51:9+43

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:41+30
    // >> opaque call: $t3 := Signer::address_of($t0)
    assume {:print "$at(4,1816,1846)"} true;

    // $t7 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:41+30

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:41+30
    assume $IsValid'address'($t7);

    // assume Eq<address>($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:41+30
    assume $IsEqual'address'($t7, $1_Signer_spec_address_of($t0));

    // $t7 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:41+30

    // $t8 := exists<AccountFreezing::FreezeEventsHolder>($t7) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:14+6
    $t8 := $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $t7);

    // $t9 := !($t8) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:53:13+1
    call $t9 := $Not($t8);

    // $t10 := 1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:39+21
    assume {:print "$at(4,1887,1908)"} true;
    $t10 := 1;
    assume $IsValid'u64'($t10);

    // nop at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:13+48
    // >> opaque call: $t7 := Errors::already_published($t6)

    // $t11 := opaque begin: Errors::already_published($t10) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:13+48

    // assume WellFormed($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:13+48
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 6) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:13+48
    assume $IsEqual'u64'($t11, 6);

    // $t11 := opaque end: Errors::already_published($t10) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:54:13+48

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
    assume {:print "$at(4,1768,1919)"} true;
    assume {:print "$track_local(28,4,2):", $t11} $t11 == $t11;

    // trace_local[tmp#$1]($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
    assume {:print "$track_local(28,4,1):", $t9} $t9 == $t9;

    // if ($t9) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
    assume {:print "$at(4,1768,1919)"} true;
    assume {:print "$track_abort(28,4):", $t11} $t11 == $t11;

    // $t5 := move($t11) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
    $t5 := $t11;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:52:9+151
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:56:17+10
    assume {:print "$at(4,1937,1947)"} true;
L0:

    // $t12 := Event::new_event_handle<AccountFreezing::FreezeAccountEvent>($t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:57:34+35
    assume {:print "$at(4,2003,2038)"} true;
    call $t12 := $1_Event_new_event_handle'$1_AccountFreezing_FreezeAccountEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,2003,2038)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(28,4):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t13 := Event::new_event_handle<AccountFreezing::UnfreezeAccountEvent>($t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:58:36+35
    assume {:print "$at(4,2075,2110)"} true;
    call $t13 := $1_Event_new_event_handle'$1_AccountFreezing_UnfreezeAccountEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,2075,2110)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(28,4):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t14 := pack AccountFreezing::FreezeEventsHolder($t12, $t13) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:56:29+172
    assume {:print "$at(4,1949,2121)"} true;
    $t14 := $1_AccountFreezing_FreezeEventsHolder($t12, $t13);

    // move_to<AccountFreezing::FreezeEventsHolder>($t14, $t0) on_abort goto L3 with $t5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:56:9+7
    if ($ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_AccountFreezing_FreezeEventsHolder_$memory := $ResourceUpdate($1_AccountFreezing_FreezeEventsHolder_$memory, $t0, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(4,1929,1936)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(28,4):", $t5} $t5 == $t5;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:60:5+1
    assume {:print "$at(4,2128,2129)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:60:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:60:5+1
L3:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:60:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+247
function {:inline} $1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+95
function {:inline} $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, check_addr: int): bool {
    $ResourceExists($1_DiemAccount_DiemAccount_$memory, check_addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2342:9+155
function {:inline} $1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $key_rotation_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2347:9+145
function {:inline} $1_DiemAccount_spec_get_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_DiemAccount_KeyRotationCapability {
    $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2352:9+129
function {:inline} $1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2358:9+183
function {:inline} $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr) && $IsEqual'address'(addr, $account_address#$1_DiemAccount_KeyRotationCapability($1_DiemAccount_spec_get_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2369:9+144
function {:inline} $1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2374:9+134
function {:inline} $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_DiemAccount_WithdrawCapability {
    $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'($1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+121
function {:inline} $1_DiemAccount_spec_has_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'($1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2384:9+171
function {:inline} $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_spec_has_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr) && $IsEqual'address'(addr, $account_address#$1_DiemAccount_WithdrawCapability($1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2390:9+171
function {:inline} $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) && $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))))
}

// struct DiemAccount::DiemAccount at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:36:5+1558
type {:datatype} $1_DiemAccount_DiemAccount;
function {:constructor} $1_DiemAccount_DiemAccount($authentication_key: Vec (int), $withdraw_capability: $1_Option_Option'$1_DiemAccount_WithdrawCapability', $key_rotation_capability: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', $received_events: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', $sent_events: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', $sequence_number: int): $1_DiemAccount_DiemAccount;
function {:inline} $Update'$1_DiemAccount_DiemAccount'_authentication_key(s: $1_DiemAccount_DiemAccount, x: Vec (int)): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount(x, $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_withdraw_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), x, $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), x, $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_received_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), x, $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sent_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), x, $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sequence_number(s: $1_DiemAccount_DiemAccount, x: int): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), x)
}
function $IsValid'$1_DiemAccount_DiemAccount'(s: $1_DiemAccount_DiemAccount): bool {
    $IsValid'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($key_rotation_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''($received_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''($sent_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'u64'($sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemAccount'(s1: $1_DiemAccount_DiemAccount, s2: $1_DiemAccount_DiemAccount): bool {
    $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount(s1), $authentication_key#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount(s1), $withdraw_capability#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($key_rotation_capability#$1_DiemAccount_DiemAccount(s1), $key_rotation_capability#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''($received_events#$1_DiemAccount_DiemAccount(s1), $received_events#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''($sent_events#$1_DiemAccount_DiemAccount(s1), $sent_events#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'u64'($sequence_number#$1_DiemAccount_DiemAccount(s1), $sequence_number#$1_DiemAccount_DiemAccount(s2))}
var $1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount;

// struct DiemAccount::AccountOperationsCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:93:5+167
type {:datatype} $1_DiemAccount_AccountOperationsCapability;
function {:constructor} $1_DiemAccount_AccountOperationsCapability($limits_cap: $1_AccountLimits_AccountLimitMutationCapability, $creation_events: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability;
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_limits_cap(s: $1_DiemAccount_AccountOperationsCapability, x: $1_AccountLimits_AccountLimitMutationCapability): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability(x, $creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events(s: $1_DiemAccount_AccountOperationsCapability, x: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability($limits_cap#$1_DiemAccount_AccountOperationsCapability(s), x)
}
function $IsValid'$1_DiemAccount_AccountOperationsCapability'(s: $1_DiemAccount_AccountOperationsCapability): bool {
    $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($limits_cap#$1_DiemAccount_AccountOperationsCapability(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''($creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AccountOperationsCapability'(s1: $1_DiemAccount_AccountOperationsCapability, s2: $1_DiemAccount_AccountOperationsCapability): bool {
    $IsEqual'$1_AccountLimits_AccountLimitMutationCapability'($limits_cap#$1_DiemAccount_AccountOperationsCapability(s1), $limits_cap#$1_DiemAccount_AccountOperationsCapability(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''($creation_events#$1_DiemAccount_AccountOperationsCapability(s1), $creation_events#$1_DiemAccount_AccountOperationsCapability(s2))}
var $1_DiemAccount_AccountOperationsCapability_$memory: $Memory $1_DiemAccount_AccountOperationsCapability;

// struct DiemAccount::AdminTransactionEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:129:5+150
type {:datatype} $1_DiemAccount_AdminTransactionEvent;
function {:constructor} $1_DiemAccount_AdminTransactionEvent($committed_timestamp_secs: int): $1_DiemAccount_AdminTransactionEvent;
function {:inline} $Update'$1_DiemAccount_AdminTransactionEvent'_committed_timestamp_secs(s: $1_DiemAccount_AdminTransactionEvent, x: int): $1_DiemAccount_AdminTransactionEvent {
    $1_DiemAccount_AdminTransactionEvent(x)
}
function $IsValid'$1_DiemAccount_AdminTransactionEvent'(s: $1_DiemAccount_AdminTransactionEvent): bool {
    $IsValid'u64'($committed_timestamp_secs#$1_DiemAccount_AdminTransactionEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AdminTransactionEvent'(s1: $1_DiemAccount_AdminTransactionEvent, s2: $1_DiemAccount_AdminTransactionEvent): bool {
    s1 == s2
}

// struct DiemAccount::CreateAccountEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:135:5+179
type {:datatype} $1_DiemAccount_CreateAccountEvent;
function {:constructor} $1_DiemAccount_CreateAccountEvent($created: int, $role_id: int): $1_DiemAccount_CreateAccountEvent;
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_created(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent(x, $role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_role_id(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent($created#$1_DiemAccount_CreateAccountEvent(s), x)
}
function $IsValid'$1_DiemAccount_CreateAccountEvent'(s: $1_DiemAccount_CreateAccountEvent): bool {
    $IsValid'address'($created#$1_DiemAccount_CreateAccountEvent(s))
      && $IsValid'u64'($role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_CreateAccountEvent'(s1: $1_DiemAccount_CreateAccountEvent, s2: $1_DiemAccount_CreateAccountEvent): bool {
    s1 == s2
}

// struct DiemAccount::DiemWriteSetManager at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:99:5+115
type {:datatype} $1_DiemAccount_DiemWriteSetManager;
function {:constructor} $1_DiemAccount_DiemWriteSetManager($upgrade_events: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager;
function {:inline} $Update'$1_DiemAccount_DiemWriteSetManager'_upgrade_events(s: $1_DiemAccount_DiemWriteSetManager, x: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager {
    $1_DiemAccount_DiemWriteSetManager(x)
}
function $IsValid'$1_DiemAccount_DiemWriteSetManager'(s: $1_DiemAccount_DiemWriteSetManager): bool {
    $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''($upgrade_events#$1_DiemAccount_DiemWriteSetManager(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemWriteSetManager'(s1: $1_DiemAccount_DiemWriteSetManager, s2: $1_DiemAccount_DiemWriteSetManager): bool {
    $IsEqual'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''($upgrade_events#$1_DiemAccount_DiemWriteSetManager(s1), $upgrade_events#$1_DiemAccount_DiemWriteSetManager(s2))}
var $1_DiemAccount_DiemWriteSetManager_$memory: $Memory $1_DiemAccount_DiemWriteSetManager;

// struct DiemAccount::KeyRotationCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:85:5+208
type {:datatype} $1_DiemAccount_KeyRotationCapability;
function {:constructor} $1_DiemAccount_KeyRotationCapability($account_address: int): $1_DiemAccount_KeyRotationCapability;
function {:inline} $Update'$1_DiemAccount_KeyRotationCapability'_account_address(s: $1_DiemAccount_KeyRotationCapability, x: int): $1_DiemAccount_KeyRotationCapability {
    $1_DiemAccount_KeyRotationCapability(x)
}
function $IsValid'$1_DiemAccount_KeyRotationCapability'(s: $1_DiemAccount_KeyRotationCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_KeyRotationCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_KeyRotationCapability'(s1: $1_DiemAccount_KeyRotationCapability, s2: $1_DiemAccount_KeyRotationCapability): bool {
    s1 == s2
}

// struct DiemAccount::ReceivedPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:117:5+363
type {:datatype} $1_DiemAccount_ReceivedPaymentEvent;
function {:constructor} $1_DiemAccount_ReceivedPaymentEvent($amount: int, $currency_code: Vec (int), $payer: int, $metadata: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent;
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_amount(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent(x, $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_currency_code(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), x, $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_payer(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), x, $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_metadata(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_ReceivedPaymentEvent'(s: $1_DiemAccount_ReceivedPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'address'($payer#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(s1: $1_DiemAccount_ReceivedPaymentEvent, s2: $1_DiemAccount_ReceivedPaymentEvent): bool {
    $IsEqual'u64'($amount#$1_DiemAccount_ReceivedPaymentEvent(s1), $amount#$1_DiemAccount_ReceivedPaymentEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_DiemAccount_ReceivedPaymentEvent(s1), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s2))
    && $IsEqual'address'($payer#$1_DiemAccount_ReceivedPaymentEvent(s1), $payer#$1_DiemAccount_ReceivedPaymentEvent(s2))
    && $IsEqual'vec'u8''($metadata#$1_DiemAccount_ReceivedPaymentEvent(s1), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s2))}

// struct DiemAccount::SentPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:105:5+346
type {:datatype} $1_DiemAccount_SentPaymentEvent;
function {:constructor} $1_DiemAccount_SentPaymentEvent($amount: int, $currency_code: Vec (int), $payee: int, $metadata: Vec (int)): $1_DiemAccount_SentPaymentEvent;
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_amount(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent(x, $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_currency_code(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), x, $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_payee(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), x, $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_metadata(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_SentPaymentEvent'(s: $1_DiemAccount_SentPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'address'($payee#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_SentPaymentEvent'(s1: $1_DiemAccount_SentPaymentEvent, s2: $1_DiemAccount_SentPaymentEvent): bool {
    $IsEqual'u64'($amount#$1_DiemAccount_SentPaymentEvent(s1), $amount#$1_DiemAccount_SentPaymentEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_DiemAccount_SentPaymentEvent(s1), $currency_code#$1_DiemAccount_SentPaymentEvent(s2))
    && $IsEqual'address'($payee#$1_DiemAccount_SentPaymentEvent(s1), $payee#$1_DiemAccount_SentPaymentEvent(s2))
    && $IsEqual'vec'u8''($metadata#$1_DiemAccount_SentPaymentEvent(s1), $metadata#$1_DiemAccount_SentPaymentEvent(s2))}

// struct DiemAccount::WithdrawCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:76:5+202
type {:datatype} $1_DiemAccount_WithdrawCapability;
function {:constructor} $1_DiemAccount_WithdrawCapability($account_address: int): $1_DiemAccount_WithdrawCapability;
function {:inline} $Update'$1_DiemAccount_WithdrawCapability'_account_address(s: $1_DiemAccount_WithdrawCapability, x: int): $1_DiemAccount_WithdrawCapability {
    $1_DiemAccount_WithdrawCapability(x)
}
function $IsValid'$1_DiemAccount_WithdrawCapability'(s: $1_DiemAccount_WithdrawCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_WithdrawCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_WithdrawCapability'(s1: $1_DiemAccount_WithdrawCapability, s2: $1_DiemAccount_WithdrawCapability): bool {
    s1 == s2
}

// fun DiemAccount::exists_at [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+95
procedure {:inline 1} $1_DiemAccount_exists_at(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[check_addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1595:5+1
    assume {:print "$at(11,73921,73922)"} true;
    assume {:print "$track_local(29,21,0):", $t0} $t0 == $t0;

    // $t1 := exists<DiemAccount::DiemAccount>($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1596:9+6
    assume {:print "$at(11,73979,73985)"} true;
    $t1 := $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1596:9+31
    assume {:print "$track_return(29,21,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1597:5+1
    assume {:print "$at(11,74015,74016)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1597:5+1
    $ret0 := $t1;
    return;

}

// fun DiemAccount::delegated_key_rotation_capability [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+247
procedure {:inline 1} $1_DiemAccount_delegated_key_rotation_capability(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_DiemAccount_DiemAccount;
    var $t8: $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $t9: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1571:5+1
    assume {:print "$at(11,72867,72868)"} true;
    assume {:print "$track_local(29,16,0):", $t0} $t0 == $t0;

    // $t3 := DiemAccount::exists_at($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:16+15
    assume {:print "$at(11,72975,72990)"} true;
    call $t3 := $1_DiemAccount_exists_at($t0);
    if ($abort_flag) {
        assume {:print "$at(11,72975,72990)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,16):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:55+8
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31
    // >> opaque call: $t5 := Errors::not_published($t4)

    // $t6 := opaque begin: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31
    assume $IsValid'u64'($t6);

    // assume Eq<u64>($t6, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31
    assume $IsEqual'u64'($t6, 5);

    // $t6 := opaque end: Errors::not_published($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:33+31

    // trace_local[tmp#$2]($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    assume {:print "$track_local(29,16,2):", $t6} $t6 == $t6;

    // trace_local[tmp#$1]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    assume {:print "$track_local(29,16,1):", $t3} $t3 == $t3;

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
L1:

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    assume {:print "$at(11,72968,73024)"} true;
    assume {:print "$track_abort(29,16):", $t6} $t6 == $t6;

    // $t4 := move($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    $t4 := $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+56
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:53+4
    assume {:print "$at(11,73078,73082)"} true;
L0:

    // $t7 := get_global<DiemAccount::DiemAccount>($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:26+13
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(11,73051,73064)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,16):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t8 := get_field<DiemAccount::DiemAccount>.key_rotation_capability($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:25+57
    $t8 := $key_rotation_capability#$1_DiemAccount_DiemAccount($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74
    // >> opaque call: $t8 := Option::is_none<DiemAccount::KeyRotationCapability>($t7)

    // $t9 := opaque begin: Option::is_none<DiemAccount::KeyRotationCapability>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74
    assume $IsValid'bool'($t9);

    // assume Eq<bool>($t9, Option::$is_none<DiemAccount::KeyRotationCapability>($t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74
    assume $IsEqual'bool'($t9, $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($t8));

    // $t9 := opaque end: Option::is_none<DiemAccount::KeyRotationCapability>($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+74
    assume {:print "$track_return(29,16,0):", $t9} $t9 == $t9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1575:5+1
    assume {:print "$at(11,73113,73114)"} true;
L2:

    // return $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1575:5+1
    $ret0 := $t9;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1575:5+1
L3:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1575:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun DiemAccount::extract_key_rotation_capability [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+649
procedure {:inline 1} $1_DiemAccount_extract_key_rotation_capability(_$t0: int) returns ($ret0: $1_DiemAccount_KeyRotationCapability)
{
    // declare local variables
    var $t1: $Mutation ($1_DiemAccount_DiemAccount);
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($1_DiemAccount_DiemAccount);
    var $t18: $Mutation ($1_Option_Option'$1_DiemAccount_KeyRotationCapability');
    var $t19: $1_DiemAccount_KeyRotationCapability;
    var $t20: $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $t21: bool;
    var $t0: int;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'': $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));

    // bytecode translation starts here
    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:966:9+52
    assume {:print "$at(11,43116,43168)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:948:5+1
    assume {:print "$at(11,42222,42223)"} true;
    assume {:print "$track_local(29,22,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27
    // >> opaque call: $t7 := Signer::address_of($t0)
    assume {:print "$at(11,42363,42390)"} true;

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:31+27

    // trace_local[account_address]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:950:13+15
    assume {:print "$track_local(29,22,2):", $t8} $t8 == $t8;

    // $t9 := DiemAccount::delegated_key_rotation_capability($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:953:14+50
    assume {:print "$at(11,42515,42565)"} true;
    call $t9 := $1_DiemAccount_delegated_key_rotation_capability($t8);
    if ($abort_flag) {
        assume {:print "$at(11,42515,42565)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,22):", $t10} $t10 == $t10;
        goto L5;
    }

    // $t11 := !($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:953:13+1
    call $t11 := $Not($t9);

    // $t12 := 9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:35+42
    assume {:print "$at(11,42601,42643)"} true;
    $t12 := 9;
    assume $IsValid'u64'($t12);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65
    // >> opaque call: $t11 := Errors::invalid_state($t10)

    // $t13 := opaque begin: Errors::invalid_state($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65
    assume $IsEqual'u64'($t13, 1);

    // $t13 := opaque end: Errors::invalid_state($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:954:13+65

    // trace_local[tmp#$4]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    assume {:print "$at(11,42494,42654)"} true;
    assume {:print "$track_local(29,22,4):", $t13} $t13 == $t13;

    // trace_local[tmp#$3]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    assume {:print "$track_local(29,22,3):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
L1:

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    assume {:print "$at(11,42494,42654)"} true;
    assume {:print "$track_abort(29,22):", $t13} $t13 == $t13;

    // $t10 := move($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    $t10 := $t13;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:952:9+160
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:26+15
    assume {:print "$at(11,42681,42696)"} true;
L0:

    // $t14 := DiemAccount::exists_at($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:16+26
    call $t14 := $1_DiemAccount_exists_at($t8);
    if ($abort_flag) {
        assume {:print "$at(11,42671,42697)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,22):", $t10} $t10 == $t10;
        goto L5;
    }

    // $t15 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:66+8
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31
    // >> opaque call: $t14 := Errors::not_published($t13)

    // $t16 := opaque begin: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31
    assume $IsEqual'u64'($t16, 5);

    // $t16 := opaque end: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:44+31

    // trace_local[tmp#$6]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    assume {:print "$track_local(29,22,6):", $t16} $t16 == $t16;

    // trace_local[tmp#$5]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    assume {:print "$track_local(29,22,5):", $t14} $t14 == $t14;

    // if ($t14) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    if ($t14) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
L3:

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    assume {:print "$at(11,42664,42731)"} true;
    assume {:print "$track_abort(29,22):", $t16} $t16 == $t16;

    // $t10 := move($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    $t10 := $t16;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:956:9+67
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:54+15
    assume {:print "$at(11,42786,42801)"} true;
L2:

    // $t17 := borrow_global<DiemAccount::DiemAccount>($t8) on_abort goto L5 with $t10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:23+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(11,42755,42772)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,22):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[account#1788]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:957:13+7
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t17);
    assume {:print "$track_local(29,22,1):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t18 := borrow_field<DiemAccount::DiemAccount>.key_rotation_capability($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:25+36
    assume {:print "$at(11,42828,42864)"} true;
    $t18 := $ChildMutation($t17, 2, $key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t17)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    // >> opaque call: $t17 := Option::extract<DiemAccount::KeyRotationCapability>($t16)

    // $t19 := opaque begin: Option::extract<DiemAccount::KeyRotationCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53

    // $t20 := read_ref($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    $t20 := $Dereference($t18);

    // assume Identical($t21, Option::$is_none<DiemAccount::KeyRotationCapability>($t18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume ($t21 == $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($Dereference($t18)));

    // if ($t21) goto L8 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    if ($t21) { goto L8; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
L7:

    // assume And(Option::$is_none<DiemAccount::KeyRotationCapability>($t18), Eq(7, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume ($1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($Dereference($t18)) && $IsEqual'u8'(7, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume {:print "$at(11,42812,42865)"} true;
    assume {:print "$track_abort(29,22):", $t10} $t10 == $t10;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
L6:

    // havoc[mut]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    havoc $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'';
    $t18 := $UpdateMutation($t18, $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'');
    assume $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t18));

    // assume And(WellFormed($t18), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec($t18)), 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume ($IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t18)) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($Dereference($t18))) <= 1));

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume $IsValid'$1_DiemAccount_KeyRotationCapability'($t19);

    // assume Eq<DiemAccount::KeyRotationCapability>($t19, Option::$borrow<DiemAccount::KeyRotationCapability>($t20)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume $IsEqual'$1_DiemAccount_KeyRotationCapability'($t19, $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($t20));

    // assume Option::$is_none<DiemAccount::KeyRotationCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($Dereference($t18));

    // $t19 := opaque end: Option::extract<DiemAccount::KeyRotationCapability>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53

    // write_back[Reference($t17).key_rotation_capability]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    $t17 := $UpdateMutation($t17, $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability($Dereference($t17), $Dereference($t18)));

    // pack_ref_deep($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53

    // write_back[DiemAccount::DiemAccount@]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // trace_return[0]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:958:9+53
    assume {:print "$track_return(29,22,0):", $t19} $t19 == $t19;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:959:5+1
    assume {:print "$at(11,42870,42871)"} true;
L4:

    // return $t19 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:959:5+1
    $ret0 := $t19;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:959:5+1
L5:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:959:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t17) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// fun DiemAccount::restore_key_rotation_capability [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+323
procedure {:inline 1} $1_DiemAccount_restore_key_rotation_capability(_$t0: $1_DiemAccount_KeyRotationCapability) returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_DiemAccount_DiemAccount);
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation ($1_DiemAccount_DiemAccount);
    var $t11: $Mutation ($1_Option_Option'$1_DiemAccount_KeyRotationCapability');
    var $t12: bool;
    var $t0: $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'': $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t11));

    // bytecode translation starts here
    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:980:5+1
    assume {:print "$at(11,43761,43762)"} true;
    assume {:print "$track_local(29,34,0):", $t0} $t0 == $t0;

    // $t4 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:26+19
    assume {:print "$at(11,43884,43903)"} true;
    $t4 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t5 := DiemAccount::exists_at($t4) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:16+30
    call $t5 := $1_DiemAccount_exists_at($t4);
    if ($abort_flag) {
        assume {:print "$at(11,43874,43904)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,34):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t7 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:70+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31
    // >> opaque call: $t7 := Errors::not_published($t6)

    // $t8 := opaque begin: Errors::not_published($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31
    assume $IsEqual'u64'($t8, 5);

    // $t8 := opaque end: Errors::not_published($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:48+31

    // trace_local[tmp#$3]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    assume {:print "$track_local(29,34,3):", $t8} $t8 == $t8;

    // trace_local[tmp#$2]($t5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    assume {:print "$track_local(29,34,2):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
L1:

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    assume {:print "$at(11,43867,43938)"} true;
    assume {:print "$track_abort(29,34):", $t8} $t8 == $t8;

    // $t6 := move($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    $t6 := $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:982:9+71
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:54+3
    assume {:print "$at(11,43993,43996)"} true;
L0:

    // $t9 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:54+19
    $t9 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t10 := borrow_global<DiemAccount::DiemAccount>($t9) on_abort goto L3 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:23+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t9)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t9), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t9));
    }
    if ($abort_flag) {
        assume {:print "$at(11,43962,43979)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,34):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_local[account]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:983:13+7
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t10);
    assume {:print "$track_local(29,34,1):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t11 := borrow_field<DiemAccount::DiemAccount>.key_rotation_capability($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:22+36
    assume {:print "$at(11,44036,44072)"} true;
    $t11 := $ChildMutation($t10, 2, $key_rotation_capability#$1_DiemAccount_DiemAccount($Dereference($t10)));

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    // >> opaque call: Option::fill<DiemAccount::KeyRotationCapability>($t10, $t0)

    // opaque begin: Option::fill<DiemAccount::KeyRotationCapability>($t11, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55

    // assume Identical($t12, Option::$is_some<DiemAccount::KeyRotationCapability>($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume ($t12 == $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($Dereference($t11)));

    // if ($t12) goto L6 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    if ($t12) { goto L6; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
L5:

    // assume And(Option::$is_some<DiemAccount::KeyRotationCapability>($t11), Eq(7, $t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume ($1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($Dereference($t11)) && $IsEqual'u8'(7, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume {:print "$at(11,44023,44078)"} true;
    assume {:print "$track_abort(29,34):", $t6} $t6 == $t6;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
L4:

    // havoc[mut]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    havoc $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'';
    $t11 := $UpdateMutation($t11, $temp_0'$1_Option_Option'$1_DiemAccount_KeyRotationCapability'');
    assume $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t11));

    // assume And(WellFormed($t11), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec($t11)), 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume ($IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($Dereference($t11)) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($Dereference($t11))) <= 1));

    // assume Option::$is_some<DiemAccount::KeyRotationCapability>($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($Dereference($t11));

    // assume Eq<DiemAccount::KeyRotationCapability>(Option::$borrow<DiemAccount::KeyRotationCapability>($t11), $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    assume $IsEqual'$1_DiemAccount_KeyRotationCapability'($1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($Dereference($t11)), $t0);

    // opaque end: Option::fill<DiemAccount::KeyRotationCapability>($t11, $t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55

    // write_back[Reference($t10).key_rotation_capability]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    $t10 := $UpdateMutation($t10, $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability($Dereference($t10), $Dereference($t11)));

    // pack_ref_deep($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55

    // write_back[DiemAccount::DiemAccount@]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:984:9+55
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:985:5+1
    assume {:print "$at(11,44083,44084)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:985:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:985:5+1
L3:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:985:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

    // label L6 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L6:

    // destroy($t10) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun DiemAccount::rotate_authentication_key [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+612
procedure {:inline 1} $1_DiemAccount_rotate_authentication_key(_$t0: $1_DiemAccount_KeyRotationCapability, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_DiemAccount_DiemAccount);
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($1_DiemAccount_DiemAccount);
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $Mutation (Vec (int));
    var $t0: $1_DiemAccount_KeyRotationCapability;
    var $t1: Vec (int);
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t19));

    // bytecode translation starts here
    // trace_local[cap]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+1
    assume {:print "$at(11,40375,40376)"} true;
    assume {:print "$track_local(29,36,0):", $t0} $t0 == $t0;

    // trace_local[new_authentication_key]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:5+1
    assume {:print "$track_local(29,36,1):", $t1} $t1 == $t1;

    // $t7 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:26+19
    assume {:print "$at(11,40549,40568)"} true;
    $t7 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t8 := DiemAccount::exists_at($t7) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:16+30
    call $t8 := $1_DiemAccount_exists_at($t7);
    if ($abort_flag) {
        assume {:print "$at(11,40539,40569)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,36):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t10 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:70+8
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31
    // >> opaque call: $t10 := Errors::not_published($t9)

    // $t11 := opaque begin: Errors::not_published($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31

    // assume WellFormed($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31
    assume $IsEqual'u64'($t11, 5);

    // $t11 := opaque end: Errors::not_published($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:48+31

    // trace_local[tmp#$4]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    assume {:print "$track_local(29,36,4):", $t11} $t11 == $t11;

    // trace_local[tmp#$3]($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    assume {:print "$track_local(29,36,3):", $t8} $t8 == $t8;

    // if ($t8) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    if ($t8) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    assume {:print "$at(11,40532,40603)"} true;
    assume {:print "$track_abort(29,36):", $t11} $t11 == $t11;

    // $t9 := move($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    $t9 := $t11;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:913:9+71
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:70+3
    assume {:print "$at(11,40674,40677)"} true;
L0:

    // $t12 := get_field<DiemAccount::KeyRotationCapability>.account_address($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:70+19
    $t12 := $account_address#$1_DiemAccount_KeyRotationCapability($t0);

    // $t13 := borrow_global<DiemAccount::DiemAccount>($t12) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:39+17
    if (!$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t12)) {
        call $ExecFailureAbort();
    } else {
        $t13 := $Mutation($Global($t12), EmptyVec(), $ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12));
    }
    if ($abort_flag) {
        assume {:print "$at(11,40643,40660)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,36):", $t9} $t9 == $t9;
        goto L5;
    }

    // trace_local[sender_account_resource]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:914:13+23
    $temp_0'$1_DiemAccount_DiemAccount' := $Dereference($t13);
    assume {:print "$track_local(29,36,2):", $temp_0'$1_DiemAccount_DiemAccount'} $temp_0'$1_DiemAccount_DiemAccount' == $temp_0'$1_DiemAccount_DiemAccount';

    // $t14 := Vector::length<u8>($t1) on_abort goto L5 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:917:13+39
    assume {:print "$at(11,40779,40818)"} true;
    call $t14 := $1_Vector_length'u8'($t1);
    if ($abort_flag) {
        assume {:print "$at(11,40779,40818)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,36):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t15 := 32 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:917:56+2
    $t15 := 32;
    assume $IsValid'u64'($t15);

    // $t16 := ==($t14, $t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:917:53+2
    $t16 := $IsEqual'u64'($t14, $t15);

    // $t17 := 8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:38+29
    assume {:print "$at(11,40863,40892)"} true;
    $t17 := 8;
    assume $IsValid'u64'($t17);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55
    // >> opaque call: $t17 := Errors::invalid_argument($t16)

    // $t18 := opaque begin: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55
    assume $IsEqual'u64'($t18, 7);

    // $t18 := opaque end: Errors::invalid_argument($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:918:13+55

    // trace_local[tmp#$6]($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    assume {:print "$at(11,40759,40903)"} true;
    assume {:print "$track_local(29,36,6):", $t18} $t18 == $t18;

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    assume {:print "$track_local(29,36,5):", $t16} $t16 == $t16;

    // if ($t16) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    if ($t16) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
L3:

    // pack_ref_deep($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144

    // destroy($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    assume {:print "$at(11,40759,40903)"} true;
    assume {:print "$track_abort(29,36):", $t18} $t18 == $t18;

    // $t9 := move($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    $t9 := $t18;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:916:9+144
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:54+22
    assume {:print "$at(11,40958,40980)"} true;
L2:

    // $t19 := borrow_field<DiemAccount::DiemAccount>.authentication_key($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+42
    $t19 := $ChildMutation($t13, 0, $authentication_key#$1_DiemAccount_DiemAccount($Dereference($t13)));

    // write_ref($t19, $t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+67
    $t19 := $UpdateMutation($t19, $t1);

    // write_back[Reference($t13).authentication_key]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+67
    $t13 := $UpdateMutation($t13, $Update'$1_DiemAccount_DiemAccount'_authentication_key($Dereference($t13), $Dereference($t19)));

    // pack_ref_deep($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+67

    // write_back[DiemAccount::DiemAccount@]($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:920:9+67
    $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $GlobalLocationAddress($t13),
        $Dereference($t13));

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:921:5+1
    assume {:print "$at(11,40986,40987)"} true;
L4:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:921:5+1
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:921:5+1
L5:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:921:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:600:10+105
function {:inline} $1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): Vec ($1_DiemSystem_ValidatorInfo) {
    $validators#$1_DiemSystem_DiemSystem($1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))
}

// struct DiemSystem::DiemSystem at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:51:5+198
type {:datatype} $1_DiemSystem_DiemSystem;
function {:constructor} $1_DiemSystem_DiemSystem($scheme: int, $validators: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem;
function {:inline} $Update'$1_DiemSystem_DiemSystem'_scheme(s: $1_DiemSystem_DiemSystem, x: int): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem(x, $validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $Update'$1_DiemSystem_DiemSystem'_validators(s: $1_DiemSystem_DiemSystem, x: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem($scheme#$1_DiemSystem_DiemSystem(s), x)
}
function $IsValid'$1_DiemSystem_DiemSystem'(s: $1_DiemSystem_DiemSystem): bool {
    $IsValid'u8'($scheme#$1_DiemSystem_DiemSystem(s))
      && $IsValid'vec'$1_DiemSystem_ValidatorInfo''($validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $IsEqual'$1_DiemSystem_DiemSystem'(s1: $1_DiemSystem_DiemSystem, s2: $1_DiemSystem_DiemSystem): bool {
    $IsEqual'u8'($scheme#$1_DiemSystem_DiemSystem(s1), $scheme#$1_DiemSystem_DiemSystem(s2))
    && $IsEqual'vec'$1_DiemSystem_ValidatorInfo''($validators#$1_DiemSystem_DiemSystem(s1), $validators#$1_DiemSystem_DiemSystem(s2))}

// struct DiemSystem::CapabilityHolder at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:42:5+242
type {:datatype} $1_DiemSystem_CapabilityHolder;
function {:constructor} $1_DiemSystem_CapabilityHolder($cap: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder;
function {:inline} $Update'$1_DiemSystem_CapabilityHolder'_cap(s: $1_DiemSystem_CapabilityHolder, x: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder {
    $1_DiemSystem_CapabilityHolder(x)
}
function $IsValid'$1_DiemSystem_CapabilityHolder'(s: $1_DiemSystem_CapabilityHolder): bool {
    $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''($cap#$1_DiemSystem_CapabilityHolder(s))
}
function {:inline} $IsEqual'$1_DiemSystem_CapabilityHolder'(s1: $1_DiemSystem_CapabilityHolder, s2: $1_DiemSystem_CapabilityHolder): bool {
    s1 == s2
}
var $1_DiemSystem_CapabilityHolder_$memory: $Memory $1_DiemSystem_CapabilityHolder;

// struct DiemSystem::ValidatorInfo at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:21:5+600
type {:datatype} $1_DiemSystem_ValidatorInfo;
function {:constructor} $1_DiemSystem_ValidatorInfo($addr: int, $consensus_voting_power: int, $config: $1_ValidatorConfig_Config, $last_config_update_time: int): $1_DiemSystem_ValidatorInfo;
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_addr(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo(x, $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_consensus_voting_power(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), x, $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_config(s: $1_DiemSystem_ValidatorInfo, x: $1_ValidatorConfig_Config): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), x, $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_last_config_update_time(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), x)
}
function $IsValid'$1_DiemSystem_ValidatorInfo'(s: $1_DiemSystem_ValidatorInfo): bool {
    $IsValid'address'($addr#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'$1_ValidatorConfig_Config'($config#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $IsEqual'$1_DiemSystem_ValidatorInfo'(s1: $1_DiemSystem_ValidatorInfo, s2: $1_DiemSystem_ValidatorInfo): bool {
    $IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(s1), $addr#$1_DiemSystem_ValidatorInfo(s2))
    && $IsEqual'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(s1), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s2))
    && $IsEqual'$1_ValidatorConfig_Config'($config#$1_DiemSystem_ValidatorInfo(s1), $config#$1_DiemSystem_ValidatorInfo(s2))
    && $IsEqual'u64'($last_config_update_time#$1_DiemSystem_ValidatorInfo(s1), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s2))}

// fun DiemSystem::initialize_validator_set [baseline] at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:5+608
procedure {:inline 1} $1_DiemSystem_initialize_validator_set(_$t0: int) returns ()
{
    // declare local variables
    var $t1: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: Vec ($1_DiemSystem_ValidatorInfo);
    var $t12: $1_DiemSystem_DiemSystem;
    var $t13: int;
    var $t14: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: $1_DiemSystem_CapabilityHolder;
    var $t0: int;
    var $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$modifies: [int]bool;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'': $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'': $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemConfig_Configuration_$memory#388: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:120:9+50
    assume {:print "$at(16,5288,5338)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:97:5+1
    assume {:print "$at(16,4422,4423)"} true;
    assume {:print "$track_local(30,5,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(16,4504,4535)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31

    // assume Identical($t6, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
    assume ($t6 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
L5:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t7)) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
    assume {:print "$at(16,4504,4535)"} true;
    assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31
L4:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:100:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(16,4545,4580)"} true;

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    assume {:print "$at(16,4545,4580)"} true;

    // assume Identical($t9, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t8))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t8)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    assume ($t9 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t8)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t9) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    if ($t9) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t7)), And(Not(exists<Roles::RoleId>($t8)), Eq(5, $t7))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t8)), 0), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t7)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t8) && $IsEqual'u8'(5, $t7))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)), 0) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    assume {:print "$at(16,4545,4580)"} true;
    assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:101:9+35

    // $t10 := 0 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:106:25+1
    assume {:print "$at(16,4737,4738)"} true;
    $t10 := 0;
    assume $IsValid'u8'($t10);

    // $t11 := Vector::empty<DiemSystem::ValidatorInfo>() on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:107:29+15
    assume {:print "$at(16,4768,4783)"} true;
    call $t11 := $1_Vector_empty'$1_DiemSystem_ValidatorInfo'();
    if ($abort_flag) {
        assume {:print "$at(16,4768,4783)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t12 := pack DiemSystem::DiemSystem($t10, $t11) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:105:13+98
    assume {:print "$at(16,4700,4798)"} true;
    $t12 := $1_DiemSystem_DiemSystem($t10, $t11);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    // >> opaque call: $t7 := DiemConfig::publish_new_config_and_get_capability<DiemSystem::DiemSystem>($t0, $t6)
    assume {:print "$at(16,4601,4809)"} true;

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // $t14 := opaque begin: DiemConfig::publish_new_config_and_get_capability<DiemSystem::DiemSystem>($t0, $t12) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume {:print "$at(16,4601,4809)"} true;

    // assume Identical($t15, Or(Or(Or(Not(exists<Roles::RoleId>($t13)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())), exists<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume ($t15 == (((!$ResourceExists($1_Roles_RoleId_$memory, $t13) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t15) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    if ($t15) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
L9:

    // assume Or(Or(Or(And(Not(exists<Roles::RoleId>($t13)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t13)), 0), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t7))), And(exists<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t7))) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume ((((!$ResourceExists($1_Roles_RoleId_$memory, $t13) && $IsEqual'u8'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t13)), 0) && $IsEqual'u8'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t7))) || ($ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume {:print "$at(16,4601,4809)"} true;
    assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
L8:

    // @388 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    $1_DiemConfig_Configuration_$memory#388 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'';
        $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'');
    } else {
        $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''($t14);

    // assume DiemConfig::spec_is_published<DiemSystem::DiemSystem>() at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume $1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory);

    // assume Eq<DiemSystem::DiemSystem>(DiemConfig::$get<DiemSystem::DiemSystem>(), $t12) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume $IsEqual'$1_DiemSystem_DiemSystem'($1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), $t12);

    // assume Eq<bool>(DiemConfig::spec_has_config[@388](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#388), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // $t14 := opaque end: DiemConfig::publish_new_config_and_get_capability<DiemSystem::DiemSystem>($t0, $t12) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:19+208

    // trace_local[cap]($t14) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:103:13+3
    assume {:print "$track_local(30,5,1):", $t14} $t14 == $t14;

    // $t16 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:111:39+34
    assume {:print "$at(16,4865,4899)"} true;
    call $t16 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(16,4865,4899)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t17 := exists<DiemSystem::CapabilityHolder>($t16) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:111:14+6
    $t17 := $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, $t16);

    // $t18 := !($t17) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:111:13+1
    call $t18 := $Not($t17);

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:39+18
    assume {:print "$at(16,4940,4958)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:13+45
    // >> opaque call: $t12 := Errors::already_published($t11)

    // $t20 := opaque begin: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:13+45

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:13+45
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 6) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:13+45
    assume $IsEqual'u64'($t20, 6);

    // $t20 := opaque end: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:112:13+45

    // trace_local[tmp#$3]($t20) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
    assume {:print "$at(16,4819,4969)"} true;
    assume {:print "$track_local(30,5,3):", $t20} $t20 == $t20;

    // trace_local[tmp#$2]($t18) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
    assume {:print "$track_local(30,5,2):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
    assume {:print "$at(16,4819,4969)"} true;
    assume {:print "$track_abort(30,5):", $t20} $t20 == $t20;

    // $t7 := move($t20) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
    $t7 := $t20;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:110:9+150
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:114:17+10
    assume {:print "$at(16,4987,4997)"} true;
L0:

    // $t21 := pack DiemSystem::CapabilityHolder($t14) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:114:29+24
    $t21 := $1_DiemSystem_CapabilityHolder($t14);

    // move_to<DiemSystem::CapabilityHolder>($t21, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:114:9+7
    if ($ResourceExists($1_DiemSystem_CapabilityHolder_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemSystem_CapabilityHolder_$memory := $ResourceUpdate($1_DiemSystem_CapabilityHolder_$memory, $t0, $t21);
    }
    if ($abort_flag) {
        assume {:print "$at(16,4979,4986)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:115:5+1
    assume {:print "$at(16,5029,5030)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:115:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:115:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:115:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:57:5+100
function {:inline} $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata): bool {
    $ResourceExists($1_DiemBlock_BlockMetadata_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())
}

// struct DiemBlock::BlockMetadata at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:11:5+236
type {:datatype} $1_DiemBlock_BlockMetadata;
function {:constructor} $1_DiemBlock_BlockMetadata($height: int, $new_block_events: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata;
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_height(s: $1_DiemBlock_BlockMetadata, x: int): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata(x, $new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_new_block_events(s: $1_DiemBlock_BlockMetadata, x: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata($height#$1_DiemBlock_BlockMetadata(s), x)
}
function $IsValid'$1_DiemBlock_BlockMetadata'(s: $1_DiemBlock_BlockMetadata): bool {
    $IsValid'u64'($height#$1_DiemBlock_BlockMetadata(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''($new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $IsEqual'$1_DiemBlock_BlockMetadata'(s1: $1_DiemBlock_BlockMetadata, s2: $1_DiemBlock_BlockMetadata): bool {
    $IsEqual'u64'($height#$1_DiemBlock_BlockMetadata(s1), $height#$1_DiemBlock_BlockMetadata(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''($new_block_events#$1_DiemBlock_BlockMetadata(s1), $new_block_events#$1_DiemBlock_BlockMetadata(s2))}
var $1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata;

// struct DiemBlock::NewBlockEvent at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:18:5+234
type {:datatype} $1_DiemBlock_NewBlockEvent;
function {:constructor} $1_DiemBlock_NewBlockEvent($round: int, $proposer: int, $previous_block_votes: Vec (int), $time_microseconds: int): $1_DiemBlock_NewBlockEvent;
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_round(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent(x, $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_proposer(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), x, $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_previous_block_votes(s: $1_DiemBlock_NewBlockEvent, x: Vec (int)): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), x, $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_time_microseconds(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), x)
}
function $IsValid'$1_DiemBlock_NewBlockEvent'(s: $1_DiemBlock_NewBlockEvent): bool {
    $IsValid'u64'($round#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'address'($proposer#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'vec'address''($previous_block_votes#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'u64'($time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $IsEqual'$1_DiemBlock_NewBlockEvent'(s1: $1_DiemBlock_NewBlockEvent, s2: $1_DiemBlock_NewBlockEvent): bool {
    $IsEqual'u64'($round#$1_DiemBlock_NewBlockEvent(s1), $round#$1_DiemBlock_NewBlockEvent(s2))
    && $IsEqual'address'($proposer#$1_DiemBlock_NewBlockEvent(s1), $proposer#$1_DiemBlock_NewBlockEvent(s2))
    && $IsEqual'vec'address''($previous_block_votes#$1_DiemBlock_NewBlockEvent(s1), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s2))
    && $IsEqual'u64'($time_microseconds#$1_DiemBlock_NewBlockEvent(s1), $time_microseconds#$1_DiemBlock_NewBlockEvent(s2))}

// fun DiemBlock::is_initialized [baseline] at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:57:5+100
procedure {:inline 1} $1_DiemBlock_is_initialized() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := CoreAddresses::DIEM_ROOT_ADDRESS() on_abort goto L2 with $t1 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:58:31+34
    assume {:print "$at(12,2071,2105)"} true;
    call $t0 := $1_CoreAddresses_DIEM_ROOT_ADDRESS();
    if ($abort_flag) {
        assume {:print "$at(12,2071,2105)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(31,3):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := exists<DiemBlock::BlockMetadata>($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:58:9+6
    $t2 := $ResourceExists($1_DiemBlock_BlockMetadata_$memory, $t0);

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:58:9+57
    assume {:print "$track_return(31,3,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:59:5+1
    assume {:print "$at(12,2111,2112)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:59:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:59:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:59:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun DiemBlock::initialize_block_metadata [baseline] at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:34:5+531
procedure {:inline 1} $1_DiemBlock_initialize_block_metadata(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent';
    var $t12: $1_DiemBlock_BlockMetadata;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:34:5+1
    assume {:print "$at(12,1100,1101)"} true;
    assume {:print "$track_local(31,2,0):", $t0} $t0 == $t0;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(12,1165,1196)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31

    // assume Identical($t3, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
    assume ($t3 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t3) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
    if ($t3) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
L5:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
    assume {:print "$at(12,1165,1196)"} true;
    assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31
L4:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:35:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
    // >> opaque call: CoreAddresses::assert_diem_root($t0)
    assume {:print "$at(12,1282,1322)"} true;

    // opaque begin: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40

    // assume Identical($t5, Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
    assume ($t5 == !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // if ($t5) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
    if ($t5) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
L7:

    // assume And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t4)) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
    assume (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t4));

    // trace_abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
    assume {:print "$at(12,1282,1322)"} true;
    assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40
L6:

    // opaque end: CoreAddresses::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:37:9+40

    // $t6 := DiemBlock::is_initialized() on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:17+16
    assume {:print "$at(12,1341,1357)"} true;
    call $t6 := $1_DiemBlock_is_initialized();
    if ($abort_flag) {
        assume {:print "$at(12,1341,1357)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t7 := !($t6) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:16+1
    call $t7 := $Not($t6);

    // $t8 := 0 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:61+15
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:35+42
    // >> opaque call: $t6 := Errors::already_published($t5)

    // $t9 := opaque begin: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:35+42

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:35+42
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 6) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:35+42
    assume $IsEqual'u64'($t9, 6);

    // $t9 := opaque end: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:35+42

    // trace_local[tmp#$2]($t9) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
    assume {:print "$track_local(31,2,2):", $t9} $t9 == $t9;

    // trace_local[tmp#$1]($t7) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
    assume {:print "$track_local(31,2,1):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
    assume {:print "$at(12,1333,1402)"} true;
    assume {:print "$track_abort(31,2):", $t9} $t9 == $t9;

    // $t4 := move($t9) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
    $t4 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:39:9+69
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:41:13+7
    assume {:print "$at(12,1448,1455)"} true;
L0:

    // $t10 := 0 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:43:25+1
    assume {:print "$at(12,1509,1510)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := Event::new_event_handle<DiemBlock::NewBlockEvent>($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:44:35+53
    assume {:print "$at(12,1546,1599)"} true;
    call $t11 := $1_Event_new_event_handle'$1_DiemBlock_NewBlockEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(12,1546,1599)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t12 := pack DiemBlock::BlockMetadata($t10, $t11) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:42:13+145
    assume {:print "$at(12,1469,1614)"} true;
    $t12 := $1_DiemBlock_BlockMetadata($t10, $t11);

    // move_to<DiemBlock::BlockMetadata>($t12, $t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:40:9+7
    assume {:print "$at(12,1412,1419)"} true;
    if ($ResourceExists($1_DiemBlock_BlockMetadata_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $1_DiemBlock_BlockMetadata_$memory := $ResourceUpdate($1_DiemBlock_BlockMetadata_$memory, $t0, $t12);
    }
    if ($abort_flag) {
        assume {:print "$at(12,1412,1419)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(31,2):", $t4} $t4 == $t4;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:47:5+1
    assume {:print "$at(12,1630,1631)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:47:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:47:5+1
L3:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:47:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// struct DiemVMConfig::DiemVMConfig at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:16:5+120
type {:datatype} $1_DiemVMConfig_DiemVMConfig;
function {:constructor} $1_DiemVMConfig_DiemVMConfig($gas_schedule: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig;
function {:inline} $Update'$1_DiemVMConfig_DiemVMConfig'_gas_schedule(s: $1_DiemVMConfig_DiemVMConfig, x: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig {
    $1_DiemVMConfig_DiemVMConfig(x)
}
function $IsValid'$1_DiemVMConfig_DiemVMConfig'(s: $1_DiemVMConfig_DiemVMConfig): bool {
    $IsValid'$1_DiemVMConfig_GasSchedule'($gas_schedule#$1_DiemVMConfig_DiemVMConfig(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_DiemVMConfig'(s1: $1_DiemVMConfig_DiemVMConfig, s2: $1_DiemVMConfig_DiemVMConfig): bool {
    $IsEqual'$1_DiemVMConfig_GasSchedule'($gas_schedule#$1_DiemVMConfig_DiemVMConfig(s1), $gas_schedule#$1_DiemVMConfig_DiemVMConfig(s2))}

// struct DiemVMConfig::GasConstants at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:38:5+1690
type {:datatype} $1_DiemVMConfig_GasConstants;
function {:constructor} $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost: int, $global_memory_per_byte_write_cost: int, $min_transaction_gas_units: int, $large_transaction_cutoff: int, $intrinsic_gas_per_byte: int, $maximum_number_of_gas_units: int, $min_price_per_gas_unit: int, $max_price_per_gas_unit: int, $max_transaction_size_in_bytes: int, $gas_unit_scaling_factor: int, $default_account_size: int): $1_DiemVMConfig_GasConstants;
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants(x, $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_write_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), x, $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_transaction_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), x, $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_large_transaction_cutoff(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), x, $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_intrinsic_gas_per_byte(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), x, $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_maximum_number_of_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), x, $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), x, $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_transaction_size_in_bytes(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_gas_unit_scaling_factor(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), x, $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_default_account_size(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), x)
}
function $IsValid'$1_DiemVMConfig_GasConstants'(s: $1_DiemVMConfig_GasConstants): bool {
    $IsValid'u64'($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasConstants'(s1: $1_DiemVMConfig_GasConstants, s2: $1_DiemVMConfig_GasConstants): bool {
    s1 == s2
}

// struct DiemVMConfig::GasSchedule at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:32:5+164
type {:datatype} $1_DiemVMConfig_GasSchedule;
function {:constructor} $1_DiemVMConfig_GasSchedule($instruction_schedule: Vec (int), $native_schedule: Vec (int), $gas_constants: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule;
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_instruction_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule(x, $native_schedule#$1_DiemVMConfig_GasSchedule(s), $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_native_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), x, $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_gas_constants(s: $1_DiemVMConfig_GasSchedule, x: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), $native_schedule#$1_DiemVMConfig_GasSchedule(s), x)
}
function $IsValid'$1_DiemVMConfig_GasSchedule'(s: $1_DiemVMConfig_GasSchedule): bool {
    $IsValid'vec'u8''($instruction_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'vec'u8''($native_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'$1_DiemVMConfig_GasConstants'($gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasSchedule'(s1: $1_DiemVMConfig_GasSchedule, s2: $1_DiemVMConfig_GasSchedule): bool {
    $IsEqual'vec'u8''($instruction_schedule#$1_DiemVMConfig_GasSchedule(s1), $instruction_schedule#$1_DiemVMConfig_GasSchedule(s2))
    && $IsEqual'vec'u8''($native_schedule#$1_DiemVMConfig_GasSchedule(s1), $native_schedule#$1_DiemVMConfig_GasSchedule(s2))
    && $IsEqual'$1_DiemVMConfig_GasConstants'($gas_constants#$1_DiemVMConfig_GasSchedule(s1), $gas_constants#$1_DiemVMConfig_GasSchedule(s2))}

// fun DiemVMConfig::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:76:5+1150
procedure {:inline 1} $1_DiemVMConfig_initialize(_$t0: int, _$t1: Vec (int), _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: $1_DiemVMConfig_GasConstants;
    var $t4: $1_DiemVMConfig_GasConstants;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_DiemVMConfig_GasConstants;
    var $t23: $1_DiemVMConfig_GasSchedule;
    var $t24: $1_DiemVMConfig_DiemVMConfig;
    var $t25: int;
    var $t26: bool;
    var $t0: int;
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'': $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'': $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemConfig_Configuration_$memory#425: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t4, pack DiemVMConfig::GasConstants(4, 9, 600, 600, 8, 4000000, 0, 10000, 4096, 1000, 800)) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:112:9+528
    assume {:print "$at(19,4597,5125)"} true;
    assume ($t4 == $1_DiemVMConfig_GasConstants(4, 9, 600, 600, 8, 4000000, 0, 10000, 4096, 1000, 800));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:76:5+1
    assume {:print "$at(19,3416,3417)"} true;
    assume {:print "$track_local(32,0,0):", $t0} $t0 == $t0;

    // trace_local[instruction_schedule]($t1) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:76:5+1
    assume {:print "$track_local(32,0,1):", $t1} $t1 == $t1;

    // trace_local[native_schedule]($t2) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:76:5+1
    assume {:print "$track_local(32,0,2):", $t2} $t2 == $t2;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(19,3563,3594)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31

    // assume Identical($t7, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
    assume ($t7 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t8)) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
    assume {:print "$at(19,3563,3594)"} true;
    assume {:print "$track_abort(32,0):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:81:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(19,3692,3727)"} true;

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    assume {:print "$at(19,3692,3727)"} true;

    // assume Identical($t10, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    assume ($t10 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t10) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    if ($t10) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8)), And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'u8'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    assume {:print "$at(19,3692,3727)"} true;
    assume {:print "$track_abort(32,0):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:84:9+35

    // $t11 := 4 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:87:42+1
    assume {:print "$at(19,3814,3815)"} true;
    $t11 := 4;
    assume $IsValid'u64'($t11);

    // $t12 := 9 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:88:48+1
    assume {:print "$at(19,3864,3865)"} true;
    $t12 := 9;
    assume $IsValid'u64'($t12);

    // $t13 := 600 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:89:40+3
    assume {:print "$at(19,3906,3909)"} true;
    $t13 := 600;
    assume $IsValid'u64'($t13);

    // $t14 := 600 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:90:39+3
    assume {:print "$at(19,3949,3952)"} true;
    $t14 := 600;
    assume $IsValid'u64'($t14);

    // $t15 := 8 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:91:37+1
    assume {:print "$at(19,3990,3991)"} true;
    $t15 := 8;
    assume $IsValid'u64'($t15);

    // $t16 := 4000000 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:92:42+7
    assume {:print "$at(19,4034,4041)"} true;
    $t16 := 4000000;
    assume $IsValid'u64'($t16);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:93:37+1
    assume {:print "$at(19,4079,4080)"} true;
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := 10000 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:94:37+5
    assume {:print "$at(19,4118,4123)"} true;
    $t18 := 10000;
    assume $IsValid'u64'($t18);

    // $t19 := 4096 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:95:44+4
    assume {:print "$at(19,4168,4172)"} true;
    $t19 := 4096;
    assume $IsValid'u64'($t19);

    // $t20 := 1000 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:96:38+4
    assume {:print "$at(19,4211,4215)"} true;
    $t20 := 1000;
    assume $IsValid'u64'($t20);

    // $t21 := 800 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:97:35+3
    assume {:print "$at(19,4251,4254)"} true;
    $t21 := 800;
    assume $IsValid'u64'($t21);

    // $t22 := pack DiemVMConfig::GasConstants($t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:86:29+507
    assume {:print "$at(19,3758,4265)"} true;
    $t22 := $1_DiemVMConfig_GasConstants($t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21);

    // $t23 := pack DiemVMConfig::GasSchedule($t1, $t2, $t22) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:103:31+145
    assume {:print "$at(19,4389,4534)"} true;
    $t23 := $1_DiemVMConfig_GasSchedule($t1, $t2, $t22);

    // $t24 := pack DiemVMConfig::DiemVMConfig($t23) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:102:13+204
    assume {:print "$at(19,4344,4548)"} true;
    $t24 := $1_DiemVMConfig_DiemVMConfig($t23);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    // >> opaque call: DiemConfig::publish_new_config<DiemVMConfig::DiemVMConfig>($t0, $t17)
    assume {:print "$at(19,4276,4559)"} true;

    // assume Identical($t25, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t0));

    // opaque begin: DiemConfig::publish_new_config<DiemVMConfig::DiemVMConfig>($t0, $t24) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume {:print "$at(19,4276,4559)"} true;

    // assume Identical($t26, Or(Or(Or(Or(DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>(), exists<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(Signer::spec_address_of($t0))), Not(exists<Roles::RoleId>($t25))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume ($t26 == (((($1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t25)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t26) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    if ($t26) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
L8:

    // assume Or(Or(Or(Or(DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>(), exists<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(Signer::spec_address_of($t0))), And(Not(exists<Roles::RoleId>($t25)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t25)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume (((($1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t25) && $IsEqual'u8'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t25)), 0) && $IsEqual'u8'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume {:print "$at(19,4276,4559)"} true;
    assume {:print "$track_abort(32,0):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
L7:

    // @425 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    $1_DiemConfig_Configuration_$memory#425 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'';
        $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'');
    } else {
        $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'';
        $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory := $ResourceUpdate($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'');
    } else {
        $1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory := $ResourceRemove($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume exists<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $1_Signer_spec_address_of($t0));

    // assume DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>() at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory);

    // assume Eq<DiemVMConfig::DiemVMConfig>(DiemConfig::$get<DiemVMConfig::DiemVMConfig>(), $t24) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume $IsEqual'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_$get'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory), $t24);

    // assume Eq<bool>(DiemConfig::spec_has_config[@425](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#425), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::publish_new_config<DiemVMConfig::DiemVMConfig>($t0, $t24) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:100:9+283

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:110:5+1
    assume {:print "$at(19,4565,4566)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:110:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:110:5+1
L2:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:110:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// struct DiemVersion::DiemVersion at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:11:5+68
type {:datatype} $1_DiemVersion_DiemVersion;
function {:constructor} $1_DiemVersion_DiemVersion($major: int): $1_DiemVersion_DiemVersion;
function {:inline} $Update'$1_DiemVersion_DiemVersion'_major(s: $1_DiemVersion_DiemVersion, x: int): $1_DiemVersion_DiemVersion {
    $1_DiemVersion_DiemVersion(x)
}
function $IsValid'$1_DiemVersion_DiemVersion'(s: $1_DiemVersion_DiemVersion): bool {
    $IsValid'u64'($major#$1_DiemVersion_DiemVersion(s))
}
function {:inline} $IsEqual'$1_DiemVersion_DiemVersion'(s1: $1_DiemVersion_DiemVersion, s2: $1_DiemVersion_DiemVersion): bool {
    s1 == s2
}

// fun DiemVersion::initialize [baseline] at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:5+298
procedure {:inline 1} $1_DiemVersion_initialize(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: $1_DiemVersion_DiemVersion;
    var $t9: int;
    var $t10: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'': $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
    var $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'': $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemConfig_Configuration_$memory#419: $Memory $1_DiemConfig_Configuration;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:5+1
    assume {:print "$at(20,615,616)"} true;
    assume {:print "$track_local(33,0,0):", $t0} $t0 == $t0;

    // trace_local[initial_version]($t1) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:19:5+1
    assume {:print "$track_local(33,0,1):", $t1} $t1 == $t1;

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
    // >> opaque call: DiemTimestamp::assert_genesis()
    assume {:print "$at(20,690,721)"} true;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31

    // assume Identical($t4, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
    assume ($t4 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t4) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
    if ($t4) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t5)) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t5));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
    assume {:print "$at(20,690,721)"} true;
    assume {:print "$track_abort(33,0):", $t5} $t5 == $t5;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:20:9+31

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    // >> opaque call: Roles::assert_diem_root($t0)
    assume {:print "$at(20,731,766)"} true;

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    assume {:print "$at(20,731,766)"} true;

    // assume Identical($t7, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Not(exists<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    assume ($t7 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || !$ResourceExists($1_Roles_RoleId_$memory, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t7) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    if ($t7) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t5)), And(Not(exists<Roles::RoleId>($t6)), Eq(5, $t5))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0), Eq(3, $t5))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t5))) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t5)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'u8'(5, $t5))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0) && $IsEqual'u8'(3, $t5))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t5)));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    assume {:print "$at(20,731,766)"} true;
    assume {:print "$track_abort(33,0):", $t5} $t5 == $t5;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:21:9+35

    // $t8 := pack DiemVersion::DiemVersion($t1) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:24:13+38
    assume {:print "$at(20,857,895)"} true;
    $t8 := $1_DiemVersion_DiemVersion($t1);

    // nop at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    // >> opaque call: DiemConfig::publish_new_config<DiemVersion::DiemVersion>($t0, $t2)
    assume {:print "$at(20,776,906)"} true;

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: DiemConfig::publish_new_config<DiemVersion::DiemVersion>($t0, $t8) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume {:print "$at(20,776,906)"} true;

    // assume Identical($t10, Or(Or(Or(Or(DiemConfig::spec_is_published<DiemVersion::DiemVersion>(), exists<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(Signer::spec_address_of($t0))), Not(exists<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume ($t10 == (((($1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t10) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    if ($t10) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
L8:

    // assume Or(Or(Or(Or(DiemConfig::spec_is_published<DiemVersion::DiemVersion>(), exists<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(Signer::spec_address_of($t0))), And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t5))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(3, $t5))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t5))) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume (((($1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory) || $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_Signer_spec_address_of($t0))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'u8'(5, $t5))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'u8'(3, $t5))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t5)));

    // trace_abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume {:print "$at(20,776,906)"} true;
    assume {:print "$track_abort(33,0):", $t5} $t5 == $t5;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
L7:

    // @419 := save_mem(DiemConfig::Configuration) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    $1_DiemConfig_Configuration_$memory#419 := $1_DiemConfig_Configuration_$memory;

    // modifies global<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'';
        $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory := $ResourceUpdate($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'');
    } else {
        $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory := $ResourceRemove($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'';
        $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory := $ResourceUpdate($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'');
    } else {
        $1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory := $ResourceRemove($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // assume exists<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume $ResourceExists($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $1_Signer_spec_address_of($t0));

    // assume DiemConfig::spec_is_published<DiemVersion::DiemVersion>() at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory);

    // assume Eq<DiemVersion::DiemVersion>(DiemConfig::$get<DiemVersion::DiemVersion>(), $t8) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume $IsEqual'$1_DiemVersion_DiemVersion'($1_DiemConfig_$get'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory), $t8);

    // assume Eq<bool>(DiemConfig::spec_has_config[@419](), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130
    assume $IsEqual'bool'($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory#419), $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // opaque end: DiemConfig::publish_new_config<DiemVersion::DiemVersion>($t0, $t8) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:22:9+130

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:26:5+1
    assume {:print "$at(20,912,913)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:26:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:26:5+1
L2:

    // abort($t5) at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:26:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun Genesis::initialize [verification] at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
procedure {:timeLimit 40} $1_Genesis_initialize$verify(_$t0: int, _$t1: int, _$t2: Vec (int), _$t3: Vec (int), _$t4: Vec (Vec (int)), _$t5: bool, _$t6: Vec (int), _$t7: Vec (int), _$t8: int, _$t9: int) returns ()
{
    // declare local variables
    var $t10: int;
    var $t11: $1_DiemAccount_KeyRotationCapability;
    var $t12: int;
    var $t13: $1_DiemAccount_KeyRotationCapability;
    var $t14: Vec (int);
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: bool;
    var $t24: $1_DiemConfig_Configuration;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: $1_DiemConfig_Configuration;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: $1_DiemConfig_Configuration;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: int;
    var $t45: int;
    var $t46: int;
    var $t47: $1_DiemAccount_KeyRotationCapability;
    var $t48: int;
    var $t49: $1_DiemAccount_KeyRotationCapability;
    var $t50: int;
    var $t51: int;
    var $t52: $1_DiemVMConfig_GasConstants;
    var $t53: int;
    var $t54: int;
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: Vec (Vec (int));
    var $t5: bool;
    var $t6: Vec (int);
    var $t7: Vec (int);
    var $t8: int;
    var $t9: int;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_ChainId_ChainId': $1_ChainId_ChainId;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_DiemWriteSetManager': $1_DiemAccount_DiemWriteSetManager;
    var $temp_0'$1_DiemAccount_KeyRotationCapability': $1_DiemAccount_KeyRotationCapability;
    var $temp_0'$1_DiemConfig_Configuration': $1_DiemConfig_Configuration;
    var $temp_0'$1_DiemId_DiemIdDomainManager': $1_DiemId_DiemIdDomainManager;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'$1_SlidingNonce_SlidingNonce': $1_SlidingNonce_SlidingNonce;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    var $temp_0'vec'vec'u8''': Vec (Vec (int));
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;
    $t7 := _$t7;
    $t8 := _$t8;
    $t9 := _$t9;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:171:9+97
    assume {:print "$at(22,873,3238)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:284:9+113
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:287:9+123
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:412:9+62
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:93:9+98
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume And(And(forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)), forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1584:9+212
    assume (((forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)))) && (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1662:9+203
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume And(And(forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))), forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1729:9+236
    assume (((forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))))) && (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume true at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:552:9+318
    assume true;

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:60:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:69:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:125:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:128:9+69
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:141:9+137
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:145:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:77:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:350:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:357:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:165:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:540:9+64
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:578:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:165:9+121
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:51:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:193:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:201:9+119
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:206:9+129
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2205:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2235:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2284:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2288:9+120
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<Roles::RoleId>(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2310:9+82
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_Roles_RoleId_$memory, addr)));

    // assume true at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+139
    assume true;

    // assume forall addr: TypeDomain<address>() where exists<DesignatedDealer::Dealer>(addr): Roles::spec_has_designated_dealer_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2319:9+139
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr))  ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DualAttestation::Credential>(addr): Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2324:9+201
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DualAttestation_Credential_$memory, addr))  ==> (($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): exists<AccountFreezing::FreezingBit>(addr) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2329:9+97
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr)));

    // assume true at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2332:9+115
    assume true;

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:562:9+176
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:621:8+133
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Eq<u64>(select DiemSystem::ValidatorInfo.consensus_voting_power(Index(DiemSystem::spec_get_validators(), i1)), 1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:629:8+119
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($IsEqual'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)), 1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:131:9+61
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:219:9+90
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:72:9+89
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'vec'vec'u8'''($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'bool'($t5);

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'vec'u8''($t6);

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'vec'u8''($t7);

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'u8'($t8);

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume $IsValid'u64'($t9);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DisableReconfiguration>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DisableReconfiguration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DisableReconfiguration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::ModifyConfigCapability<DiemVersion::DiemVersion>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemId::DiemIdDomainManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemId_DiemIdDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemId_DiemIdDomainManager_$memory, $a_0);
    ($IsValid'$1_DiemId_DiemIdDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+2365
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume DiemTimestamp::$is_genesis() at /home/ying/diem/language/diem-framework/modules/Genesis.move:197:9+37
    assume {:print "$at(22,8942,8979)"} true;
    assume $1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory);

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$at(22,873,874)"} true;
    assume {:print "$track_local(34,1,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,1):", $t1} $t1 == $t1;

    // trace_local[dr_auth_key]($t2) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,2):", $t2} $t2 == $t2;

    // trace_local[tc_auth_key]($t3) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,3):", $t3} $t3 == $t3;

    // trace_local[initial_script_allow_list]($t4) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,4):", $t4} $t4 == $t4;

    // trace_local[is_open_module]($t5) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,5):", $t5} $t5 == $t5;

    // trace_local[instruction_schedule]($t6) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,6):", $t6} $t6 == $t6;

    // trace_local[native_schedule]($t7) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,7):", $t7} $t7 == $t7;

    // trace_local[chain_id]($t8) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,8):", $t8} $t8 == $t8;

    // trace_local[initial_diem_version]($t9) at /home/ying/diem/language/diem-framework/modules/Genesis.move:30:5+1
    assume {:print "$track_local(34,1,9):", $t9} $t9 == $t9;

    // trace_local[dr_account#2046]($t0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:42:13+10
    assume {:print "$at(22,1252,1262)"} true;
    assume {:print "$track_local(34,1,10):", $t0} $t0 == $t0;

    // trace_local[tc_account#2047]($t1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:43:13+10
    assume {:print "$at(22,1290,1300)"} true;
    assume {:print "$track_local(34,1,12):", $t1} $t1 == $t1;

    // $t14 := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:45+35
    assume {:print "$at(22,1361,1396)"} true;
    $t14 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(0, 0, 0, 0), MakeVec4(0, 0, 0, 0)), MakeVec4(0, 0, 0, 0)), MakeVec4(0, 0, 0, 0));
    assume $IsValid'vec'u8''($t14);

    // nop at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    // >> opaque call: DiemAccount::initialize($t0, $t14)

    // assume Identical($t15, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1227:9+49
    assume {:print "$at(11,55369,55418)"} true;
    assume ($t15 == $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Identical($t16, CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1251:9+49
    assume {:print "$at(11,56713,56762)"} true;
    assume ($t16 == $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Identical($t17, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1295:9+59
    assume {:print "$at(11,59274,59333)"} true;
    assume ($t17 == $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assume Identical($t18, CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1315:9+59
    assume {:print "$at(11,60508,60567)"} true;
    assume ($t18 == $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // opaque begin: DiemAccount::initialize($t0, $t14) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume {:print "$at(22,1325,1397)"} true;

    // assume Identical($t19, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS())), exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS())), exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS())), exists<AccountFreezing::FreezingBit>(CoreAddresses::$DIEM_ROOT_ADDRESS())), Not(DiemTimestamp::$is_genesis())), exists<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS())), Neq<num>(Add(16, Len<u8>($t14)), 32)), exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), DiemId::$tc_domain_manager_exists()), Not(DiemTimestamp::$is_genesis())), exists<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), exists<AccountFreezing::FreezingBit>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume ($t19 == ((((((((((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) || $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || !$IsEqual'num'((16 + LenVec($t14)), 32)) || $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || $1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory)) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())));

    // if ($t19) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    if ($t19) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
L4:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t20)), And(exists<SlidingNonce::SlidingNonce>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t20))), And(exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t20))), And(exists<DiemAccount::DiemWriteSetManager>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t20))), And(exists<AccountFreezing::FreezingBit>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t20))), And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t20))), And(exists<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(6, $t20))), And(Neq<num>(Add(16, Len<u8>($t14)), 32), Eq(7, $t20))), And(exists<SlidingNonce::SlidingNonce>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(6, $t20))), And(DiemId::$tc_domain_manager_exists(), Eq(6, $t20))), And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t20))), And(exists<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(6, $t20))), And(exists<AccountFreezing::FreezingBit>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()), Eq(6, $t20))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume (((((((((((((!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t20)) || ($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t20))) || ($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t20))) || ($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t20))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t20))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20))) || ($ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(6, $t20))) || (!$IsEqual'num'((16 + LenVec($t14)), 32) && $IsEqual'u8'(7, $t20))) || ($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t20))) || ($1_DiemId_$tc_domain_manager_exists($1_DiemId_DiemIdDomainManager_$memory) && $IsEqual'u8'(6, $t20))) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20))) || ($ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t20))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS()) && $IsEqual'u8'(6, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume {:print "$at(22,1325,1397)"} true;
    assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
L3:

    // modifies global<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());
    }

    // modifies global<Event::EventHandleGenerator>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t15, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t15);
    }

    // modifies global<DiemAccount::DiemAccount>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t15, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t15);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $t15, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $t15);
    }

    // modifies global<DiemAccount::DiemWriteSetManager>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemWriteSetManager';
        $1_DiemAccount_DiemWriteSetManager_$memory := $ResourceUpdate($1_DiemAccount_DiemWriteSetManager_$memory, $t15, $temp_0'$1_DiemAccount_DiemWriteSetManager');
    } else {
        $1_DiemAccount_DiemWriteSetManager_$memory := $ResourceRemove($1_DiemAccount_DiemWriteSetManager_$memory, $t15);
    }

    // modifies global<SlidingNonce::SlidingNonce>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_SlidingNonce_SlidingNonce';
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceUpdate($1_SlidingNonce_SlidingNonce_$memory, $t15, $temp_0'$1_SlidingNonce_SlidingNonce');
    } else {
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceRemove($1_SlidingNonce_SlidingNonce_$memory, $t15);
    }

    // modifies global<Roles::RoleId>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $t15, $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $t15);
    }

    // modifies global<AccountFreezing::FreezingBit>($t15) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t15, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t15);
    }

    // modifies global<DiemAccount::DiemAccount>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t17, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t17);
    }

    // modifies global<SlidingNonce::SlidingNonce>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_SlidingNonce_SlidingNonce';
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceUpdate($1_SlidingNonce_SlidingNonce_$memory, $t17, $temp_0'$1_SlidingNonce_SlidingNonce');
    } else {
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceRemove($1_SlidingNonce_SlidingNonce_$memory, $t17);
    }

    // modifies global<Roles::RoleId>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $t17, $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $t17);
    }

    // modifies global<AccountFreezing::FreezingBit>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t17, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t17);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<Event::EventHandleGenerator>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS(), $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());
    }

    // modifies global<DiemId::DiemIdDomainManager>($t17) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemId_DiemIdDomainManager';
        $1_DiemId_DiemIdDomainManager_$memory := $ResourceUpdate($1_DiemId_DiemIdDomainManager_$memory, $t17, $temp_0'$1_DiemId_DiemIdDomainManager');
    } else {
        $1_DiemId_DiemIdDomainManager_$memory := $ResourceRemove($1_DiemId_DiemIdDomainManager_$memory, $t17);
    }

    // assume exists<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(CoreAddresses::$DIEM_ROOT_ADDRESS())), 0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS())), 0);

    // assume exists<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS());

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(CoreAddresses::$TREASURY_COMPLIANCE_ADDRESS())), 1) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_CoreAddresses_$TREASURY_COMPLIANCE_ADDRESS())), 1);

    // assume exists<DiemAccount::AccountOperationsCapability>($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $t16);

    // assume exists<DiemAccount::DiemWriteSetManager>($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, $t16);

    // assume exists<SlidingNonce::SlidingNonce>($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $t16);

    // assume Roles::spec_has_diem_root_role_addr($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, $t16);

    // assume DiemAccount::$exists_at($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t16);

    // assume AccountFreezing::spec_account_is_not_frozen($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t16);

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t16);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t16) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t16);

    // assume exists<DiemAccount::AccountOperationsCapability>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());

    // assume Roles::spec_has_treasury_compliance_role_addr($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, $t18);

    // assume DiemAccount::$exists_at($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume exists<SlidingNonce::SlidingNonce>($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $t18);

    // assume AccountFreezing::spec_account_is_not_frozen($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t18);

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume exists<DiemId::DiemIdDomainManager>($t18) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72
    assume $ResourceExists($1_DiemId_DiemIdDomainManager_$memory, $t18);

    // opaque end: DiemAccount::initialize($t0, $t14) at /home/ying/diem/language/diem-framework/modules/Genesis.move:45:9+72

    // nop at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    // >> opaque call: ChainId::initialize($t0, $t8)
    assume {:print "$at(22,1408,1449)"} true;

    // assume Identical($t21, Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/ChainId.move:28:9+45
    assume {:print "$at(7,1017,1062)"} true;
    assume ($t21 == $1_Signer_$address_of($t0));

    // opaque begin: ChainId::initialize($t0, $t8) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    assume {:print "$at(22,1408,1449)"} true;

    // assume Identical($t22, Or(Or(Not(DiemTimestamp::$is_genesis()), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS())), exists<ChainId::ChainId>($t21))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    assume ($t22 == ((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())) || $ResourceExists($1_ChainId_ChainId_$memory, $t21)));

    // if ($t22) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
L6:

    // assume Or(Or(And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t20)), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t20))), And(exists<ChainId::ChainId>($t21), Eq(6, $t20))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    assume (((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20)) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t20))) || ($ResourceExists($1_ChainId_ChainId_$memory, $t21) && $IsEqual'u8'(6, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    assume {:print "$at(22,1408,1449)"} true;
    assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
L5:

    // modifies global<ChainId::ChainId>($t21) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_ChainId_ChainId';
        $1_ChainId_ChainId_$memory := $ResourceUpdate($1_ChainId_ChainId_$memory, $t21, $temp_0'$1_ChainId_ChainId');
    } else {
        $1_ChainId_ChainId_$memory := $ResourceRemove($1_ChainId_ChainId_$memory, $t21);
    }

    // assume exists<ChainId::ChainId>($t21) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41
    assume $ResourceExists($1_ChainId_ChainId_$memory, $t21);

    // opaque end: ChainId::initialize($t0, $t8) at /home/ying/diem/language/diem-framework/modules/Genesis.move:47:9+41

    // nop at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    // >> opaque call: DiemConfig::initialize($t0)
    assume {:print "$at(22,1493,1527)"} true;

    // opaque begin: DiemConfig::initialize($t0) at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34

    // assume Identical($t23, Or(Or(DiemConfig::spec_has_config(), Not(DiemTimestamp::$is_genesis())), Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    assume ($t23 == (($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory) || !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS())));

    // if ($t23) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    if ($t23) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
L8:

    // assume Or(Or(And(DiemConfig::spec_has_config(), Eq(6, $t20)), And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t20))), And(Neq<address>(Signer::spec_address_of($t0), CoreAddresses::$DIEM_ROOT_ADDRESS()), Eq(2, $t20))) at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    assume ((($1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory) && $IsEqual'u8'(6, $t20)) || (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'u8'(1, $t20))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), $1_CoreAddresses_$DIEM_ROOT_ADDRESS()) && $IsEqual'u8'(2, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    assume {:print "$at(22,1493,1527)"} true;
    assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
L7:

    // modifies global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS()) at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemConfig_Configuration';
        $1_DiemConfig_Configuration_$memory := $ResourceUpdate($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS(), $temp_0'$1_DiemConfig_Configuration');
    } else {
        $1_DiemConfig_Configuration_$memory := $ResourceRemove($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS());
    }

    // modifies global<Event::EventHandleGenerator>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Genesis.move:50:9+34
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $1_Signer_spec_address_of($t0), $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $1_Signer_spec_address_of($t0));
    }

    // assume Identical($t24, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:85:9+81
    assume {:print "$at(13,3202,3283)"} true;
    assume ($t24 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume DiemConfig::spec_has_config() at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:85:9+81
    assume $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory);

    // assume Eq<u64>(select DiemConfig::Configuration.epoch($t24), 0) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:85:9+81
    assume $IsEqual'u64'($epoch#$1_DiemConfig_Configuration($t24), 0);

    // assume Eq<u64>(select DiemConfig::Configuration.last_reconfiguration_time($t24), 0) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:85:9+81
    assume $IsEqual'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration($t24), 0);

    // opaque end: DiemConfig::initialize($t0) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:85:9+81

    // assume Identical($t25, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t25 == $1_Signer_spec_address_of($t0));

    // assume Identical($t26, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t26 == $1_Signer_spec_address_of($t0));

    // Diem::initialize($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:53:9+28
    assume {:print "$at(22,1564,1592)"} true;
    call $1_Diem_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(22,1564,1592)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t27, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t27 == $1_Signer_spec_address_of($t1));

    // assume Identical($t28, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t28 == $1_Signer_spec_address_of($t0));

    // assume Identical($t29, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t29 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t30, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t30 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t31, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t31 == $1_Signer_spec_address_of($t1));

    // assume Identical($t32, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t0));

    // assume Identical($t33, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t1));

    // XUS::initialize($t0, $t1) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:56:9+39
    assume {:print "$at(22,1629,1668)"} true;
    call $1_XUS_initialize($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(22,1629,1668)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t34, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t34 == $1_Signer_spec_address_of($t0));

    // assume Identical($t35, global<DiemConfig::Configuration>(CoreAddresses::$DIEM_ROOT_ADDRESS())) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:360:9+71
    assume {:print "$at(13,15945,16016)"} true;
    assume ($t35 == $ResourceValue($1_DiemConfig_Configuration_$memory, $1_CoreAddresses_$DIEM_ROOT_ADDRESS()));

    // assume Identical($t36, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:361:9+58
    assume {:print "$at(13,16025,16083)"} true;
    assume ($t36 == $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // assume Identical($t38, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t38 == $1_Signer_spec_address_of($t1));

    // XDX::initialize($t0, $t1) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:58:9+39
    assume {:print "$at(22,1679,1718)"} true;
    call $1_XDX_initialize($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(22,1679,1718)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t39, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:64:9+47
    assume {:print "$at(4,2284,2331)"} true;
    assume ($t39 == $1_Signer_spec_address_of($t0));

    // AccountFreezing::initialize($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:60:9+39
    assume {:print "$at(22,1729,1768)"} true;
    call $1_AccountFreezing_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(22,1729,1768)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t40, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:535:9+44
    assume {:print "$at(26,24010,24054)"} true;
    assume ($t40 == $1_Signer_spec_address_of($t1));

    // TransactionFee::initialize($t1) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:61:9+38
    assume {:print "$at(22,1778,1816)"} true;
    call $1_TransactionFee_initialize($t1);
    if ($abort_flag) {
        assume {:print "$at(22,1778,1816)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t41, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:120:9+50
    assume {:print "$at(16,5288,5338)"} true;
    assume ($t41 == $1_Signer_spec_address_of($t0));

    // assume Identical($t42, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t42 == $1_Signer_spec_address_of($t0));

    // DiemSystem::initialize_validator_set($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:63:9+48
    assume {:print "$at(22,1827,1875)"} true;
    call $1_DiemSystem_initialize_validator_set($t0);
    if ($abort_flag) {
        assume {:print "$at(22,1827,1875)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t43, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t43 == $1_Signer_spec_address_of($t0));

    // assume Identical($t44, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t44 == $1_Signer_spec_address_of($t0));

    // DiemVersion::initialize($t0, $t9) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:64:9+57
    assume {:print "$at(22,1885,1942)"} true;
    call $1_DiemVersion_initialize($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(22,1885,1942)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t45, Mul(1000, Diem::spec_scaling_factor<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:501:9+86
    assume {:print "$at(21,22219,22305)"} true;
    assume ($t45 == (1000 * $1_Diem_spec_scaling_factor'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // DualAttestation::initialize($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:65:9+39
    assume {:print "$at(22,1952,1991)"} true;
    call $1_DualAttestation_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(22,1952,1991)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // DiemBlock::initialize_block_metadata($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:66:9+48
    assume {:print "$at(22,2001,2049)"} true;
    call $1_DiemBlock_initialize_block_metadata($t0);
    if ($abort_flag) {
        assume {:print "$at(22,2001,2049)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t46, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:966:9+52
    assume {:print "$at(11,43116,43168)"} true;
    assume ($t46 == $1_Signer_spec_address_of($t0));

    // $t47 := DiemAccount::extract_key_rotation_capability($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:70:33+56
    assume {:print "$at(22,2188,2244)"} true;
    call $t47 := $1_DiemAccount_extract_key_rotation_capability($t0);
    if ($abort_flag) {
        assume {:print "$at(22,2188,2244)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // trace_local[dr_rotate_key_cap]($t47) at /home/ying/diem/language/diem-framework/modules/Genesis.move:70:13+17
    assume {:print "$track_local(34,1,11):", $t47} $t47 == $t47;

    // DiemAccount::rotate_authentication_key($t47, $t2) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:71:9+71
    assume {:print "$at(22,2254,2325)"} true;
    call $1_DiemAccount_rotate_authentication_key($t47, $t2);
    if ($abort_flag) {
        assume {:print "$at(22,2254,2325)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // DiemAccount::restore_key_rotation_capability($t47) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:72:9+63
    assume {:print "$at(22,2335,2398)"} true;
    call $1_DiemAccount_restore_key_rotation_capability($t47);
    if ($abort_flag) {
        assume {:print "$at(22,2335,2398)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t48, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:966:9+52
    assume {:print "$at(11,43116,43168)"} true;
    assume ($t48 == $1_Signer_spec_address_of($t1));

    // $t49 := DiemAccount::extract_key_rotation_capability($t1) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:74:33+56
    assume {:print "$at(22,2433,2489)"} true;
    call $t49 := $1_DiemAccount_extract_key_rotation_capability($t1);
    if ($abort_flag) {
        assume {:print "$at(22,2433,2489)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // trace_local[tc_rotate_key_cap]($t49) at /home/ying/diem/language/diem-framework/modules/Genesis.move:74:13+17
    assume {:print "$track_local(34,1,13):", $t49} $t49 == $t49;

    // DiemAccount::rotate_authentication_key($t49, $t3) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:75:9+71
    assume {:print "$at(22,2499,2570)"} true;
    call $1_DiemAccount_rotate_authentication_key($t49, $t3);
    if ($abort_flag) {
        assume {:print "$at(22,2499,2570)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // DiemAccount::restore_key_rotation_capability($t49) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:76:9+63
    assume {:print "$at(22,2580,2643)"} true;
    call $1_DiemAccount_restore_key_rotation_capability($t49);
    if ($abort_flag) {
        assume {:print "$at(22,2580,2643)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t50, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t50 == $1_Signer_spec_address_of($t0));

    // assume Identical($t51, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t51 == $1_Signer_spec_address_of($t0));

    // DiemTransactionPublishingOption::initialize($t0, $t4, $t5) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:78:9+145
    assume {:print "$at(22,2654,2799)"} true;
    call $1_DiemTransactionPublishingOption_initialize($t0, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(22,2654,2799)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // assume Identical($t52, pack DiemVMConfig::GasConstants(4, 9, 600, 600, 8, 4000000, 0, 10000, 4096, 1000, 800)) at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:112:9+528
    assume {:print "$at(19,4597,5125)"} true;
    assume ($t52 == $1_DiemVMConfig_GasConstants(4, 9, 600, 600, 8, 4000000, 0, 10000, 4096, 1000, 800));

    // assume Identical($t53, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume {:print "$at(26,23651,23695)"} true;
    assume ($t53 == $1_Signer_spec_address_of($t0));

    // assume Identical($t54, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:527:9+44
    assume ($t54 == $1_Signer_spec_address_of($t0));

    // DiemVMConfig::initialize($t0, $t6, $t7) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:84:9+122
    assume {:print "$at(22,2810,2932)"} true;
    call $1_DiemVMConfig_initialize($t0, $t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(22,2810,2932)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // DiemTimestamp::set_time_has_started($t0) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/Genesis.move:93:9+47
    assume {:print "$at(22,3184,3231)"} true;
    call $1_DiemTimestamp_set_time_has_started($t0);
    if ($abort_flag) {
        assume {:print "$at(22,3184,3231)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(34,1):", $t20} $t20 == $t20;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Genesis.move:94:5+1
    assume {:print "$at(22,3237,3238)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Genesis.move:94:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Genesis.move:94:5+1
L2:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Genesis.move:94:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

}
