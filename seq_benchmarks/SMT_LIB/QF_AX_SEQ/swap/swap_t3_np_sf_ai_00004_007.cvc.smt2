(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)

(declare-sort Element 0)
(declare-fun a_106 () (Seq Element))
(declare-fun a_108 () (Seq Element))
(declare-fun a_110 () (Seq Element))
(declare-fun a_112 () (Seq Element))
(declare-fun a_114 () (Seq Element))
(declare-fun a_116 () (Seq Element))
(declare-fun a_118 () (Seq Element))
(declare-fun a_120 () (Seq Element))
(declare-fun a_121 () (Seq Element))
(declare-fun a_122 () (Seq Element))
(declare-fun a_124 () (Seq Element))
(declare-fun a_126 () (Seq Element))
(declare-fun e_105 () Element)
(declare-fun e_107 () Element)
(declare-fun e_109 () Element)
(declare-fun e_111 () Element)
(declare-fun e_113 () Element)
(declare-fun e_115 () Element)
(declare-fun e_117 () Element)
(declare-fun e_119 () Element)
(declare-fun e_123 () Element)
(declare-fun e_125 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(assert (= a_106 (seq.update a1 i2 (seq.unit e_105))))
(assert (= a_108 (seq.update a_106 i1 (seq.unit e_107))))
(assert (= a_110 (seq.update a_108 i2 (seq.unit e_109))))
(assert (= a_112 (seq.update a_110 i3 (seq.unit e_111))))
(assert (= a_114 (seq.update a_112 i1 (seq.unit e_113))))
(assert (= a_116 (seq.update a_114 i2 (seq.unit e_115))))
(assert (= a_118 (seq.update a_116 i3 (seq.unit e_117))))
(assert (= a_120 (seq.update a_118 i2 (seq.unit e_119))))
(assert (= a_121 (seq.update a_112 i2 (seq.unit e_115))))
(assert (= a_122 (seq.update a_121 i1 (seq.unit e_113))))
(assert (= a_124 (seq.update a_122 i2 (seq.unit e_123))))
(assert (= a_126 (seq.update a_124 i3 (seq.unit e_125))))
(assert (= e_105 (seq.nth a1 i1)))
(assert (= e_107 (seq.nth a1 i2)))
(assert (= e_109 (seq.nth a_108 i3)))
(assert (= e_111 (seq.nth a_108 i2)))
(assert (= e_113 (seq.nth a_112 i2)))
(assert (= e_115 (seq.nth a_112 i1)))
(assert (= e_117 (seq.nth a_116 i2)))
(assert (= e_119 (seq.nth a_116 i3)))
(assert (= e_123 (seq.nth a_122 i3)))
(assert (= e_125 (seq.nth a_122 i2)))
(assert (not (= a_120 a_126)))
(check-sat)
(exit)
