(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_1 () (Seq Element))
(declare-fun a_11 () (Seq Element))
(declare-fun a_13 () (Seq Element))
(declare-fun a_15 () (Seq Element))
(declare-fun a_17 () (Seq Element))
(declare-fun a_18 () (Seq Element))
(declare-fun a_19 () (Seq Element))
(declare-fun a_20 () (Seq Element))
(declare-fun a_22 () (Seq Element))
(declare-fun a_24 () (Seq Element))
(declare-fun a_26 () (Seq Element))
(declare-fun a_28 () (Seq Element))
(declare-fun a_3 () (Seq Element))
(declare-fun a_30 () (Seq Element))
(declare-fun a_32 () (Seq Element))
(declare-fun a_34 () (Seq Element))
(declare-fun a_36 () (Seq Element))
(declare-fun a_5 () (Seq Element))
(declare-fun a_7 () (Seq Element))
(declare-fun a_9 () (Seq Element))
(declare-fun e_0 () Element)
(declare-fun e_10 () Element)
(declare-fun e_12 () Element)
(declare-fun e_14 () Element)
(declare-fun e_16 () Element)
(declare-fun e_2 () Element)
(declare-fun e_21 () Element)
(declare-fun e_23 () Element)
(declare-fun e_25 () Element)
(declare-fun e_27 () Element)
(declare-fun e_29 () Element)
(declare-fun e_31 () Element)
(declare-fun e_33 () Element)
(declare-fun e_35 () Element)
(declare-fun e_4 () Element)
(declare-fun e_6 () Element)
(declare-fun e_8 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(assert (= a_1 (seq.update a1 i4 (seq.unit e_0))))
(assert (= a_11 (seq.update a_9 i2 (seq.unit e_10))))
(assert (= a_13 (seq.update a_11 i1 (seq.unit e_12))))
(assert (= a_15 (seq.update a_13 i3 (seq.unit e_14))))
(assert (= a_17 (seq.update a_15 i0 (seq.unit e_16))))
(assert (= a_18 (seq.update a_17 i0 (seq.unit e_16))))
(assert (= a_19 (seq.update a1 i2 (seq.unit e_2))))
(assert (= a_20 (seq.update a_19 i4 (seq.unit e_0))))
(assert (= a_22 (seq.update a_20 i3 (seq.unit e_21))))
(assert (= a_24 (seq.update a_22 i1 (seq.unit e_23))))
(assert (= a_26 (seq.update a_24 i3 (seq.unit e_25))))
(assert (= a_28 (seq.update a_26 i2 (seq.unit e_27))))
(assert (= a_3 (seq.update a_1 i2 (seq.unit e_2))))
(assert (= a_30 (seq.update a_28 i3 (seq.unit e_29))))
(assert (= a_32 (seq.update a_30 i1 (seq.unit e_31))))
(assert (= a_34 (seq.update a_32 i0 (seq.unit e_33))))
(assert (= a_36 (seq.update a_34 i1 (seq.unit e_35))))
(assert (= a_5 (seq.update a_3 i1 (seq.unit e_4))))
(assert (= a_7 (seq.update a_5 i3 (seq.unit e_6))))
(assert (= a_9 (seq.update a_7 i3 (seq.unit e_8))))
(assert (= e_0 (seq.nth a1 i2)))
(assert (= e_10 (seq.nth a_7 i3)))
(assert (= e_12 (seq.nth a_11 i3)))
(assert (= e_14 (seq.nth a_11 i1)))
(assert (= e_16 (seq.nth a_15 i0)))
(assert (= e_2 (seq.nth a1 i4)))
(assert (= e_21 (seq.nth a_20 i1)))
(assert (= e_23 (seq.nth a_20 i3)))
(assert (= e_25 (seq.nth a_24 i2)))
(assert (= e_27 (seq.nth a_24 i3)))
(assert (= e_29 (seq.nth a_28 i1)))
(assert (= e_31 (seq.nth a_28 i3)))
(assert (= e_33 (seq.nth a_32 i1)))
(assert (= e_35 (seq.nth a_32 i0)))
(assert (= e_4 (seq.nth a_3 i3)))
(assert (= e_6 (seq.nth a_3 i1)))
(assert (= e_8 (seq.nth a_7 i2)))
(assert (not (= a_18 a_36)))
(check-sat)
(exit)
